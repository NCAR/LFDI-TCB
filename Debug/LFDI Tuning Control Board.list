
LFDI Tuning Control Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a20  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011cc  08013bd0  08013bd0  00023bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d9c  08014d9c  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  08014d9c  08014d9c  00024d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014da4  08014da4  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014da4  08014da4  00024da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014da8  08014da8  00024da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  08014dac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302e4  2**0
                  CONTENTS
 10 .bss          00002e68  200002e8  200002e8  000302e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003150  20003150  000302e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000200e3  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bd6  00000000  00000000  000503f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f0  00000000  00000000  00054fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017d0  00000000  00000000  000569c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029ae0  00000000  00000000  00058190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022393  00000000  00000000  00081c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0c1a  00000000  00000000  000a4003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00184c1d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008544  00000000  00000000  00184c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e8 	.word	0x200002e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013bb8 	.word	0x08013bb8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002ec 	.word	0x200002ec
 80001ec:	08013bb8 	.word	0x08013bb8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <DAC_InitStruct>:
//Reference Voltage scales the Ouput Voltage
float REFERENCE_VOLTAGE = 3.3;


//
void DAC_InitStruct(struct sDAC* s, SPI_HandleTypeDef* hspi){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	
	s->spi = hspi;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	601a      	str	r2, [r3, #0]
	Set_Config(s);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f833 	bl	80010b4 <Set_Config>
	Set_Max_Peak_To_Peak_Voltage(s, 0);
 800104e:	2100      	movs	r1, #0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f99b 	bl	800138c <Set_Max_Peak_To_Peak_Voltage>
	/* USER CODE BEGIN 1 */
	//Set all DAC Channels Up. Should probably be put into TCB init
	for (int i = 0; i < 6; i++){
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e022      	b.n	80010a2 <DAC_InitStruct+0x6a>
		s->DAC_Channels[i].DAC_number = i;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	b2d9      	uxtb	r1, r3
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3302      	adds	r3, #2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4413      	add	r3, r2
 800106a:	460a      	mov	r2, r1
 800106c:	721a      	strb	r2, [r3, #8]
		s->DAC_Channels[i].upper_bound = 0x7FFF;
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3302      	adds	r3, #2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800107c:	809a      	strh	r2, [r3, #4]
		s->DAC_Channels[i].lower_bound = 0x7FFF;
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3302      	adds	r3, #2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800108c:	80da      	strh	r2, [r3, #6]
		s->DAC_Channels[i].enabled = true;
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3302      	adds	r3, #2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	2201      	movs	r2, #1
 800109a:	729a      	strb	r2, [r3, #10]
	for (int i = 0; i < 6; i++){
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	ddd9      	ble.n	800105c <DAC_InitStruct+0x24>
	}

}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <Set_Config>:
//@brief: This function will set a configuration value to the configuration register
//@param s: The DAC struct to use
//@return: None
void Set_Config(struct sDAC* s){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	uint8_t Data[3] = {0x00, 0x00, 0x00};
 80010bc:	4a30      	ldr	r2, [pc, #192]	; (8001180 <Set_Config+0xcc>)
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	4611      	mov	r1, r2
 80010c6:	8019      	strh	r1, [r3, #0]
 80010c8:	3302      	adds	r3, #2
 80010ca:	0c12      	lsrs	r2, r2, #16
 80010cc:	701a      	strb	r2, [r3, #0]
	uint8_t read_command[3] = {READ|CONFIG, 0x00, 0x00};
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <Set_Config+0xd0>)
 80010d0:	781a      	ldrb	r2, [r3, #0]
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <Set_Config+0xd4>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	743b      	strb	r3, [r7, #16]
 80010dc:	2300      	movs	r3, #0
 80010de:	747b      	strb	r3, [r7, #17]
 80010e0:	2300      	movs	r3, #0
 80010e2:	74bb      	strb	r3, [r7, #18]
	
	Hardware_Reset(s);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f923 	bl	8001330 <Hardware_Reset>
	//Make sure SCE is 0. This will make it so that the DAC will use the Values direclty written to it
	//rather than trying to use the individual offset and gain of each register to re-adjust
	//the value
	//Gain_A = 1 -> gain is set to 4xVref GAIN_A = 0 -> gain is set to 6xVref
	
	uint8_t tx_data[3] = {WRITE|CONFIG, AB, 0x00};
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <Set_Config+0xd8>)
 80010ec:	781a      	ldrb	r2, [r3, #0]
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <Set_Config+0xd4>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	733b      	strb	r3, [r7, #12]
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <Set_Config+0xdc>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	737b      	strb	r3, [r7, #13]
 80010fe:	2300      	movs	r3, #0
 8001100:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	4619      	mov	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f843 	bl	8001194 <Send_Command>
	Send_Command(s, read_command);
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f83d 	bl	8001194 <Send_Command>
	Recieve_Data(s, Data);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 f85b 	bl	80011dc <Recieve_Data>
	
	//if Data is the same as tx_data then the command was successful
	if(Data[1] == tx_data[1] && Data[2] == tx_data[2]){
 8001126:	7d7a      	ldrb	r2, [r7, #21]
 8001128:	7b7b      	ldrb	r3, [r7, #13]
 800112a:	429a      	cmp	r2, r3
 800112c:	d117      	bne.n	800115e <Set_Config+0xaa>
 800112e:	7dba      	ldrb	r2, [r7, #22]
 8001130:	7bbb      	ldrb	r3, [r7, #14]
 8001132:	429a      	cmp	r2, r3
 8001134:	d113      	bne.n	800115e <Set_Config+0xaa>
		s->config = (Data[1] << 8) | Data[2];
 8001136:	7d7b      	ldrb	r3, [r7, #21]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	7dbb      	ldrb	r3, [r7, #22]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21b      	sxth	r3, r3
 8001144:	b29a      	uxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	809a      	strh	r2, [r3, #4]
		s->Configured = true;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	729a      	strb	r2, [r3, #10]
		s->State = DAC_STATE_OK;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2204      	movs	r2, #4
 8001154:	72da      	strb	r2, [r3, #11]
		s->Ready = true;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	731a      	strb	r2, [r3, #12]
 800115c:	e00c      	b.n	8001178 <Set_Config+0xc4>
	}else{
		s->State = DAC_STATE_INITFAILED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	72da      	strb	r2, [r3, #11]
		s->Ready = false;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	731a      	strb	r2, [r3, #12]
		s->Errors++;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	89db      	ldrh	r3, [r3, #14]
 800116e:	3301      	adds	r3, #1
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	81da      	strh	r2, [r3, #14]
	}
			

}
 8001176:	bf00      	nop
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	08013bd0 	.word	0x08013bd0
 8001184:	20000000 	.word	0x20000000
 8001188:	20000305 	.word	0x20000305
 800118c:	20000304 	.word	0x20000304
 8001190:	20000002 	.word	0x20000002

08001194 <Send_Command>:
//        The second byte is the MSB of the register
//        The third byte is the LSB of the register
//@param: spi: The spi handle to use
//@param: command: The command to send
//@return: none
void Send_Command(struct sDAC* s, uint8_t* Command){
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 f8aa 	bl	80012f8 <Set_nCS_high>
	hal_status = HAL_SPI_Transmit(s->spi, Command, 3, 1);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	f008 f8c8 	bl	8009342 <HAL_SPI_Transmit>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
	while (!(s->spi->Instance->SR & SPI_SR_TXE));
 80011b6:	bf00      	nop
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f7      	beq.n	80011b8 <Send_Command+0x24>
	Set_nCS_high(true);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f000 f895 	bl	80012f8 <Set_nCS_high>
	Delay_us(10);
 80011ce:	200a      	movs	r0, #10
 80011d0:	f001 ff84 	bl	80030dc <Delay_us>
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <Recieve_Data>:

//@brief: This function recieves data from the DAC and stores it in the data array
//@param: spi: The spi handle
//@param: Data: buffer to store the data in
//@return: None
void Recieve_Data(struct sDAC* s, uint8_t* Data){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f886 	bl	80012f8 <Set_nCS_high>
	hal_status = HAL_SPI_TransmitReceive(s->spi,NOP_Send, Data, 3, 100);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2303      	movs	r3, #3
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	490b      	ldr	r1, [pc, #44]	; (8001228 <Recieve_Data+0x4c>)
 80011fa:	f008 f9de 	bl	80095ba <HAL_SPI_TransmitReceive>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
	while ((s->spi->Instance->SR & SPI_SR_RXNE));
 8001202:	bf00      	nop
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f7      	bne.n	8001204 <Recieve_Data+0x28>
	Set_nCS_high(true);
 8001214:	2001      	movs	r0, #1
 8001216:	f000 f86f 	bl	80012f8 <Set_nCS_high>
	Delay_us(10);
 800121a:	200a      	movs	r0, #10
 800121c:	f001 ff5e 	bl	80030dc <Delay_us>

}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000004 	.word	0x20000004

0800122c <Set_DAC_Value>:
//@brief: This function sets the value of the given dac
//@param: DAC_Num: The DAC number to set the offset of
//@param: val: The value to set the dac to
//@param spi: The spi handle to use
//@return: None
void Set_DAC_Value(struct sDAC* s, uint8_t DAC_Num, uint16_t val){
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
 8001238:	4613      	mov	r3, r2
 800123a:	803b      	strh	r3, [r7, #0]
	//Make sure DAC is between 0 and 7
	if(DAC_Num > 7){
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	2b07      	cmp	r3, #7
 8001240:	d819      	bhi.n	8001276 <Set_DAC_Value+0x4a>
		return;
	}
	uint8_t DAC_REG = Set_DAC0+DAC_Num;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <Set_DAC_Value+0x54>)
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	4413      	add	r3, r2
 800124a:	73fb      	strb	r3, [r7, #15]
	//Set the DAC to the correct value by adding the DAC number to the Set_DAC0 command
	uint8_t tx_data[3] = {WRITE|DAC_REG, (val >> 8), (val & 0xFF)};
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <Set_DAC_Value+0x58>)
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	4313      	orrs	r3, r2
 8001254:	b2db      	uxtb	r3, r3
 8001256:	733b      	strb	r3, [r7, #12]
 8001258:	883b      	ldrh	r3, [r7, #0]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	b29b      	uxth	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	737b      	strb	r3, [r7, #13]
 8001262:	883b      	ldrh	r3, [r7, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4619      	mov	r1, r3
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff90 	bl	8001194 <Send_Command>
 8001274:	e000      	b.n	8001278 <Set_DAC_Value+0x4c>
		return;
 8001276:	bf00      	nop
	
}
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000001 	.word	0x20000001
 8001284:	20000304 	.word	0x20000304

08001288 <Set_nLDAC_high>:
}

//@brief: This function sets the nLDAC pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nLDAC_high(bool HIGH){
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <Set_nLDAC_high+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <Set_nLDAC_high+0x34>)
 80012a0:	f003 fbc0 	bl	8004a24 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
	}
}
 80012a4:	e005      	b.n	80012b2 <Set_nLDAC_high+0x2a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <Set_nLDAC_high+0x34>)
 80012ae:	f003 fbb9 	bl	8004a24 <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40020c00 	.word	0x40020c00

080012c0 <Set_nRST_high>:
}

//@brief: This function sets the nRST pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nRST_high(bool HIGH){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <Set_nRST_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <Set_nRST_high+0x34>)
 80012d8:	f003 fba4 	bl	8004a24 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
	}

}
 80012dc:	e005      	b.n	80012ea <Set_nRST_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <Set_nRST_high+0x34>)
 80012e6:	f003 fb9d 	bl	8004a24 <HAL_GPIO_WritePin>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000

080012f8 <Set_nCS_high>:
}

//@brief: This function sets the nCS pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nCS_high(bool HIGH){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <Set_nCS_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, SET);
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800130e:	4807      	ldr	r0, [pc, #28]	; (800132c <Set_nCS_high+0x34>)
 8001310:	f003 fb88 	bl	8004a24 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
	}

}
 8001314:	e005      	b.n	8001322 <Set_nCS_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <Set_nCS_high+0x34>)
 800131e:	f003 fb81 	bl	8004a24 <HAL_GPIO_WritePin>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <Hardware_Reset>:
	return state;
}


//Reset the DAC Values using the nRST Pin
void Hardware_Reset(struct sDAC* s){
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	Set_nRST_high(false);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff ffc1 	bl	80012c0 <Set_nRST_high>
	Delay_us(10);
 800133e:	200a      	movs	r0, #10
 8001340:	f001 fecc 	bl	80030dc <Delay_us>
	Set_nRST_high(true);
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff ffbb 	bl	80012c0 <Set_nRST_high>
	Delay_us(10);
 800134a:	200a      	movs	r0, #10
 800134c:	f001 fec6 	bl	80030dc <Delay_us>
	s->State = DAC_STATE_UNKNOWN;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	72da      	strb	r2, [r3, #11]
	s->Ready= false;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	731a      	strb	r2, [r3, #12]
	s->Errors = 0;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	81da      	strh	r2, [r3, #14]
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <Syncronous_Update>:


//Syncronous Update of LDAC using the nLDAC Pin NOTE: Only Needed if nLDAC is tied High
void Syncronous_Update(void){
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
	Set_nLDAC_high(false);
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff ff8a 	bl	8001288 <Set_nLDAC_high>
	Delay_us(10);
 8001374:	200a      	movs	r0, #10
 8001376:	f001 feb1 	bl	80030dc <Delay_us>
	Set_nLDAC_high(true);
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff ff84 	bl	8001288 <Set_nLDAC_high>
	Delay_us(10);
 8001380:	200a      	movs	r0, #10
 8001382:	f001 feab 	bl	80030dc <Delay_us>
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <Set_Max_Peak_To_Peak_Voltage>:


//@brief: This function calculates the max peak to peak voltage that can be achieved
void Set_Max_Peak_To_Peak_Voltage(struct sDAC* s, bool Gain){
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
	//The max Voltage is 11.2V so we need to scale the voltage to fit in 16 bits
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	if(Gain){
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00a      	beq.n	80013b4 <Set_Max_Peak_To_Peak_Voltage+0x28>
		s->max_peak2peak = REFERENCE_VOLTAGE*4;
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80013a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edc3 7a04 	vstr	s15, [r3, #16]
	}else
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
	return;
 80013b2:	e00a      	b.n	80013ca <Set_Max_Peak_To_Peak_Voltage+0x3e>
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	edc3 7a04 	vstr	s15, [r3, #16]
	return;
 80013c8:	bf00      	nop
}
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20000008 	.word	0x20000008

080013d8 <Set_Voltage_Peak_to_Peak>:

//@brief: This function sets the upper and lower bounds of a DAC Channel
//@param: s: The DAC Channel to set the bounds of
//@param: voltage: The voltage to set the bounds to
void Set_Voltage_Peak_to_Peak(struct sDAC* sDAC, uint8_t Channel_Number, float* voltage){
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	460b      	mov	r3, r1
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	72fb      	strb	r3, [r7, #11]
	//The max Voltage Peak to Peak is 22.4V so we need to scale the voltage to fit in 16 bits
	//Find the upper and lower bounds of the voltage with Zero Bias
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	float percentage = (*voltage/(float)sDAC->max_peak2peak)/2;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edd3 6a00 	vldr	s13, [r3]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80013f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fe:	edc7 7a05 	vstr	s15, [r7, #20]
	sDAC->DAC_Channels[Channel_Number].upper_bound = 0xFFFF/2 + percentage*0xFFFF;
 8001402:	edd7 7a05 	vldr	s15, [r7, #20]
 8001406:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001468 <Set_Voltage_Peak_to_Peak+0x90>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800146c <Set_Voltage_Peak_to_Peak+0x94>
 8001412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001416:	7afb      	ldrb	r3, [r7, #11]
 8001418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141c:	ee17 2a90 	vmov	r2, s15
 8001420:	b291      	uxth	r1, r2
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	3302      	adds	r3, #2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	460a      	mov	r2, r1
 800142c:	809a      	strh	r2, [r3, #4]
	sDAC->DAC_Channels[Channel_Number].lower_bound = 0xFFFF/2 - percentage*0xFFFF;
 800142e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001432:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001468 <Set_Voltage_Peak_to_Peak+0x90>
 8001436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800146c <Set_Voltage_Peak_to_Peak+0x94>
 800143e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001442:	7afb      	ldrb	r3, [r7, #11]
 8001444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001448:	ee17 2a90 	vmov	r2, s15
 800144c:	b291      	uxth	r1, r2
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	3302      	adds	r3, #2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4413      	add	r3, r2
 8001456:	460a      	mov	r2, r1
 8001458:	80da      	strh	r2, [r3, #6]
	return;
 800145a:	bf00      	nop

}
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	477fff00 	.word	0x477fff00
 800146c:	46fffe00 	.word	0x46fffe00

08001470 <PID_InitStruct>:
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80014a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80014ae:	4a22      	ldr	r2, [pc, #136]	; (8001538 <PID_InitStruct+0xc8>)
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2210      	movs	r2, #16
 80014be:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014c8:	4a1c      	ldr	r2, [pc, #112]	; (800153c <PID_InitStruct+0xcc>)
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	e009      	b.n	80014ee <PID_InitStruct+0x7e>
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	3301      	adds	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	2bff      	cmp	r3, #255	; 0xff
 80014f2:	d1f2      	bne.n	80014da <PID_InitStruct+0x6a>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	22c8      	movs	r2, #200	; 0xc8
 8001528:	f8a3 242e 	strh.w	r2, [r3, #1070]	; 0x42e
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	c3888000 	.word	0xc3888000
 800153c:	3c54fdf4 	.word	0x3c54fdf4

08001540 <PID_SavePoint>:
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	ed87 0a00 	vstr	s0, [r7]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8001552:	3b01      	subs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e00d      	b.n	8001574 <PID_SavePoint+0x34>
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	440a      	add	r2, r1
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	3b01      	subs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1ee      	bne.n	8001558 <PID_SavePoint+0x18>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <PID_SumError>:
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800159a:	3301      	adds	r3, #1
 800159c:	b2da      	uxtb	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d202      	bcs.n	80015ba <PID_SumError+0x2e>
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	e05b      	b.n	8001672 <PID_SumError+0xe6>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 242d 	ldrb.w	r2, [r3, #1069]	; 0x42d
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e015      	b.n	80015fe <PID_SumError+0x72>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80015d8:	ed93 7a00 	vldr	s14, [r3]
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80015f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f4:	edc7 7a02 	vstr	s15, [r7, #8]
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	3301      	adds	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	429a      	cmp	r2, r3
 8001608:	d3e3      	bcc.n	80015d2 <PID_SumError+0x46>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ed97 7a02 	vldr	s14, [r7, #8]
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	edc7 7a02 	vstr	s15, [r7, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	eef1 7a67 	vneg.f32	s15, s15
 800162e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163a:	d508      	bpl.n	800164e <PID_SumError+0xc2>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	eef1 7a67 	vneg.f32	s15, s15
 800164a:	edc7 7a02 	vstr	s15, [r7, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	ed97 7a02 	vldr	s14, [r7, #8]
 800165c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	dd04      	ble.n	8001670 <PID_SumError+0xe4>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <PID_Velocity>:
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	2304      	movs	r3, #4
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	429a      	cmp	r2, r3
 800169a:	d219      	bcs.n	80016d0 <PID_Velocity+0x4c>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	ed93 7a00 	vldr	s14, [r3]
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b8:	edd3 6a00 	vldr	s13, [r3]
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016ce:	e001      	b.n	80016d4 <PID_Velocity+0x50>
 80016d0:	eddf 6a05 	vldr	s13, [pc, #20]	; 80016e8 <PID_Velocity+0x64>
 80016d4:	eef0 7a66 	vmov.f32	s15, s13
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	00000000 	.word	0x00000000

080016ec <PID_CalculateEffort>:
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	ed87 0a00 	vstr	s0, [r7]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 342c 	ldrb.w	r3, [r3, #1068]	; 0x42c
 80016fe:	f083 0301 	eor.w	r3, r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d115      	bne.n	8001734 <PID_CalculateEffort+0x48>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001848 <PID_CalculateEffort+0x15c>
 8001716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	d409      	bmi.n	8001734 <PID_CalculateEffort+0x48>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001732:	d117      	bne.n	8001764 <PID_CalculateEffort+0x78>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800173a:	4a44      	ldr	r2, [pc, #272]	; (800184c <PID_CalculateEffort+0x160>)
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001744:	4a41      	ldr	r2, [pc, #260]	; (800184c <PID_CalculateEffort+0x160>)
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800174e:	4a3f      	ldr	r2, [pc, #252]	; (800184c <PID_CalculateEffort+0x160>)
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	e069      	b.n	8001838 <PID_CalculateEffort+0x14c>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800176a:	ed93 7a00 	vldr	s14, [r3]
 800176e:	edd7 7a00 	vldr	s15, [r7]
 8001772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800178a:	edc3 7a00 	vstr	s15, [r3]
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff78 	bl	8001684 <PID_Velocity>
 8001794:	eef0 7a40 	vmov.f32	s15, s0
 8001798:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001850 <PID_CalculateEffort+0x164>
 800179c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017b4:	edc3 7a00 	vstr	s15, [r3]
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fee7 	bl	800158c <PID_SumError>
 80017be:	eef0 7a40 	vmov.f32	s15, s0
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80017c8:	edc3 7a00 	vstr	s15, [r3]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80017d2:	ed93 7a00 	vldr	s14, [r3]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f2:	edc7 7a03 	vstr	s15, [r7, #12]
 80017f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	dd02      	ble.n	800180e <PID_CalculateEffort+0x122>
 8001808:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001812:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	d502      	bpl.n	8001822 <PID_CalculateEffort+0x136>
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	ed97 0a00 	vldr	s0, [r7]
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fe8a 	bl	8001540 <PID_SavePoint>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eeb0 0a67 	vmov.f32	s0, s15
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	c3480000 	.word	0xc3480000
 800184c:	bf800000 	.word	0xbf800000
	...

08001858 <TMP117_InitStruct>:
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	4613      	mov	r3, r2
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 800186c:	b2da      	uxtb	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	a31f      	add	r3, pc, #124	; (adr r3, 80018f8 <TMP117_InitStruct+0xa0>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2210      	movs	r2, #16
 8001890:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 80018a4:	2300      	movs	r3, #0
 80018a6:	75fb      	strb	r3, [r7, #23]
 80018a8:	e00c      	b.n	80018c4 <TMP117_InitStruct+0x6c>
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	18d1      	adds	r1, r2, r3
 80018b4:	a310      	add	r3, pc, #64	; (adr r3, 80018f8 <TMP117_InitStruct+0xa0>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	e9c1 2300 	strd	r2, r3, [r1]
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	3301      	adds	r3, #1
 80018c2:	75fb      	strb	r3, [r7, #23]
 80018c4:	7dfb      	ldrb	r3, [r7, #23]
 80018c6:	2b3f      	cmp	r3, #63	; 0x3f
 80018c8:	d9ef      	bls.n	80018aa <TMP117_InitStruct+0x52>
 80018ca:	68f9      	ldr	r1, [r7, #12]
 80018cc:	a30a      	add	r3, pc, #40	; (adr r3, 80018f8 <TMP117_InitStruct+0xa0>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	f3af 8000 	nop.w
 80018f8:	00000000 	.word	0x00000000
 80018fc:	c0711000 	.word	0xc0711000

08001900 <TMP117_Configure>:
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af02      	add	r7, sp, #8
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	481c      	ldr	r0, [pc, #112]	; (800197c <TMP117_Configure+0x7c>)
 800190a:	f00d fe73 	bl	800f5f4 <iprintf>
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <TMP117_Configure+0x80>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	81bb      	strh	r3, [r7, #12]
 8001914:	2300      	movs	r3, #0
 8001916:	73bb      	strb	r3, [r7, #14]
 8001918:	2301      	movs	r3, #1
 800191a:	733b      	strb	r3, [r7, #12]
 800191c:	2320      	movs	r3, #32
 800191e:	73bb      	strb	r3, [r7, #14]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6858      	ldr	r0, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b29b      	uxth	r3, r3
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	b299      	uxth	r1, r3
 800192e:	f107 020c 	add.w	r2, r7, #12
 8001932:	230a      	movs	r3, #10
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2303      	movs	r3, #3
 8001938:	f003 f9d2 	bl	8004ce0 <HAL_I2C_Master_Transmit>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d107      	bne.n	8001956 <TMP117_Configure+0x56>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 800194e:	480d      	ldr	r0, [pc, #52]	; (8001984 <TMP117_Configure+0x84>)
 8001950:	f00d fed6 	bl	800f700 <puts>
 8001954:	e00e      	b.n	8001974 <TMP117_Configure+0x74>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 800195c:	3301      	adds	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 800196e:	4806      	ldr	r0, [pc, #24]	; (8001988 <TMP117_Configure+0x88>)
 8001970:	f00d fec6 	bl	800f700 <puts>
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	08013bf8 	.word	0x08013bf8
 8001980:	08013c1c 	.word	0x08013c1c
 8001984:	08013c10 	.word	0x08013c10
 8001988:	08013c14 	.word	0x08013c14

0800198c <TMP117_GetTemperature>:
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b08b      	sub	sp, #44	; 0x2c
 8001990:	af02      	add	r7, sp, #8
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80019a0:	2300      	movs	r3, #0
 80019a2:	81bb      	strh	r3, [r7, #12]
 80019a4:	2300      	movs	r3, #0
 80019a6:	817b      	strh	r3, [r7, #10]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6858      	ldr	r0, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	b299      	uxth	r1, r3
 80019b6:	f107 020c 	add.w	r2, r7, #12
 80019ba:	230a      	movs	r3, #10
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2301      	movs	r3, #1
 80019c0:	f003 f98e 	bl	8004ce0 <HAL_I2C_Master_Transmit>
 80019c4:	4603      	mov	r3, r0
 80019c6:	74fb      	strb	r3, [r7, #19]
 80019c8:	7cfb      	ldrb	r3, [r7, #19]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01a      	beq.n	8001a04 <TMP117_GetTemperature+0x78>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2202      	movs	r2, #2
 80019d2:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019dc:	3301      	adds	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019ec:	2b64      	cmp	r3, #100	; 0x64
 80019ee:	f240 80b3 	bls.w	8001b58 <TMP117_GetTemperature+0x1cc>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
 8001a02:	e0a9      	b.n	8001b58 <TMP117_GetTemperature+0x1cc>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6858      	ldr	r0, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	b299      	uxth	r1, r3
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	230a      	movs	r3, #10
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f003 fa5e 	bl	8004edc <HAL_I2C_Master_Receive>
 8001a20:	4603      	mov	r3, r0
 8001a22:	74fb      	strb	r3, [r7, #19]
 8001a24:	7cfb      	ldrb	r3, [r7, #19]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d01a      	beq.n	8001a60 <TMP117_GetTemperature+0xd4>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a38:	3301      	adds	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a48:	2b64      	cmp	r3, #100	; 0x64
 8001a4a:	f240 8087 	bls.w	8001b5c <TMP117_GetTemperature+0x1d0>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
 8001a5e:	e07d      	b.n	8001b5c <TMP117_GetTemperature+0x1d0>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2204      	movs	r2, #4
 8001a64:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 8001a68:	7b3b      	ldrb	r3, [r7, #12]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	7b7b      	ldrb	r3, [r7, #13]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	817b      	strh	r3, [r7, #10]
 8001a7a:	897b      	ldrh	r3, [r7, #10]
 8001a7c:	823b      	strh	r3, [r7, #16]
 8001a7e:	8a3b      	ldrh	r3, [r7, #16]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd5f 	bl	8000544 <__aeabi_ui2d>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001a8c:	461c      	mov	r4, r3
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a96:	f7fe fdcf 	bl	8000638 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	1c61      	adds	r1, r4, #1
 8001aa2:	00c9      	lsls	r1, r1, #3
 8001aa4:	4401      	add	r1, r0
 8001aa6:	e9c1 2300 	strd	r2, r3, [r1]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001ac8:	3301      	adds	r3, #1
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 2211 	ldrb.w	r2, [r3, #529]	; 0x211
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d307      	bcc.n	8001af2 <TMP117_GetTemperature+0x166>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d030      	beq.n	8001b5e <TMP117_GetTemperature+0x1d2>
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e011      	b.n	8001b26 <TMP117_GetTemperature+0x19a>
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b14:	f7fe fbda 	bl	80002cc <__adddf3>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	4293      	cmp	r3, r2
 8001b32:	dbe6      	blt.n	8001b02 <TMP117_GetTemperature+0x176>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd12 	bl	8000564 <__aeabi_i2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b48:	f7fe fea0 	bl	800088c <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
 8001b56:	e002      	b.n	8001b5e <TMP117_GetTemperature+0x1d2>
 8001b58:	bf00      	nop
 8001b5a:	e000      	b.n	8001b5e <TMP117_GetTemperature+0x1d2>
 8001b5c:	bf00      	nop
 8001b5e:	3724      	adds	r7, #36	; 0x24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}

08001b64 <TCB_InitStruct>:
#include "DAC.h"



//This Will Setup the TCB structer by initiallizing the DAC and the TMP117 and the Controller
void TCB_InitStruct(struct sTuningControlBoard* s, I2C_HandleTypeDef* hi2c, SPI_HandleTypeDef* hspi){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]

    //For each of the Seven Temperature sensors initialize the struct
    for(int i = 0; i < 4; i++){
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e011      	b.n	8001b9a <TCB_InitStruct+0x36>
        TMP117_InitStruct(&s->Sensor[i], hi2c, i);
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f44f 720a 	mov.w	r2, #552	; 0x228
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fe62 	bl	8001858 <TMP117_InitStruct>
    for(int i = 0; i < 4; i++){
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	3301      	adds	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	ddea      	ble.n	8001b76 <TCB_InitStruct+0x12>
    }   
    Controller_InitStruct(&s->Controller,&s->Sensor[0], 0);
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4619      	mov	r1, r3
 8001bac:	f001 f98e 	bl	8002ecc <Controller_InitStruct>
    DAC_InitStruct(&s->DAC8718, hspi);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fa3d 	bl	8001038 <DAC_InitStruct>

}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__NVIC_SystemReset+0x24>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bda:	4904      	ldr	r1, [pc, #16]	; (8001bec <__NVIC_SystemReset+0x24>)
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__NVIC_SystemReset+0x28>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001be2:	f3bf 8f4f 	dsb	sy
}
 8001be6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <__NVIC_SystemReset+0x20>
 8001bec:	e000ed00 	.word	0xe000ed00
 8001bf0:	05fa0004 	.word	0x05fa0004

08001bf4 <ProcessUserInput>:

//Get the User Input and process it
//@param Controller: pointer to the controller struct
//@param buffer: pointer to the buffer
void ProcessUserInput(struct sController* Controller, uint8_t* buffer, struct sTuningControlBoard* TCB)
{
 8001bf4:	b5b0      	push	{r4, r5, r7, lr}
 8001bf6:	b0ca      	sub	sp, #296	; 0x128
 8001bf8:	af04      	add	r7, sp, #16
 8001bfa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001bfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c02:	6018      	str	r0, [r3, #0]
 8001c04:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c0c:	6019      	str	r1, [r3, #0]
 8001c0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c16:	601a      	str	r2, [r3, #0]
  uint16_t i = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  uint8_t u = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
  char output[250];
  char c;
  float f = 0;
 8001c24:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
  for (i=0; buffer[i]; i++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001c38:	e02b      	b.n	8001c92 <ProcessUserInput+0x9e>
    buffer[i] = tolower(buffer[i]);
 8001c3a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c3e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001c42:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
 8001c50:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8001c54:	3301      	adds	r3, #1
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <ProcessUserInput+0x78>)
 8001c58:	4413      	add	r3, r2
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d105      	bne.n	8001c70 <ProcessUserInput+0x7c>
 8001c64:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8001c68:	3320      	adds	r3, #32
 8001c6a:	e003      	b.n	8001c74 <ProcessUserInput+0x80>
 8001c6c:	080148e0 	.word	0x080148e0
 8001c70:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8001c74:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8001c78:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001c7c:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001c80:	6809      	ldr	r1, [r1, #0]
 8001c82:	440a      	add	r2, r1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	7013      	strb	r3, [r2, #0]
  for (i=0; buffer[i]; i++)
 8001c88:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001c92:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001c96:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001c9a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1c8      	bne.n	8001c3a <ProcessUserInput+0x46>
//  printf("String: %s\n", buffer);

  replacestr(buffer, "=", "");
 8001ca8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cb0:	4ab4      	ldr	r2, [pc, #720]	; (8001f84 <ProcessUserInput+0x390>)
 8001cb2:	49b5      	ldr	r1, [pc, #724]	; (8001f88 <ProcessUserInput+0x394>)
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	f001 fa37 	bl	8003128 <replacestr>
  replacestr(buffer, " ", "");
 8001cba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cbe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cc2:	4ab0      	ldr	r2, [pc, #704]	; (8001f84 <ProcessUserInput+0x390>)
 8001cc4:	49b1      	ldr	r1, [pc, #708]	; (8001f8c <ProcessUserInput+0x398>)
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	f001 fa2e 	bl	8003128 <replacestr>
  replacestr(buffer, " ", "");
 8001ccc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cd4:	4aab      	ldr	r2, [pc, #684]	; (8001f84 <ProcessUserInput+0x390>)
 8001cd6:	49ad      	ldr	r1, [pc, #692]	; (8001f8c <ProcessUserInput+0x398>)
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	f001 fa25 	bl	8003128 <replacestr>
  replacestr(buffer, " ", "");
 8001cde:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ce2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ce6:	4aa7      	ldr	r2, [pc, #668]	; (8001f84 <ProcessUserInput+0x390>)
 8001ce8:	49a8      	ldr	r1, [pc, #672]	; (8001f8c <ProcessUserInput+0x398>)
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	f001 fa1c 	bl	8003128 <replacestr>
  replacestr(buffer, " ", "");
 8001cf0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cf4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cf8:	4aa2      	ldr	r2, [pc, #648]	; (8001f84 <ProcessUserInput+0x390>)
 8001cfa:	49a4      	ldr	r1, [pc, #656]	; (8001f8c <ProcessUserInput+0x398>)
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	f001 fa13 	bl	8003128 <replacestr>
  replacestr(buffer, " ", "");
 8001d02:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d06:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d0a:	4a9e      	ldr	r2, [pc, #632]	; (8001f84 <ProcessUserInput+0x390>)
 8001d0c:	499f      	ldr	r1, [pc, #636]	; (8001f8c <ProcessUserInput+0x398>)
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	f001 fa0a 	bl	8003128 <replacestr>
  replacestr(buffer, "channel", "c");
 8001d14:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d1c:	4a9c      	ldr	r2, [pc, #624]	; (8001f90 <ProcessUserInput+0x39c>)
 8001d1e:	499d      	ldr	r1, [pc, #628]	; (8001f94 <ProcessUserInput+0x3a0>)
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	f001 fa01 	bl	8003128 <replacestr>
//  replacestr(buffer, "controller", "c");
  replacestr(buffer, "chan", "c");
 8001d26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d2a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d2e:	4a98      	ldr	r2, [pc, #608]	; (8001f90 <ProcessUserInput+0x39c>)
 8001d30:	4999      	ldr	r1, [pc, #612]	; (8001f98 <ProcessUserInput+0x3a4>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	f001 f9f8 	bl	8003128 <replacestr>
//  replacestr(buffer, "con", "c");
  replacestr(buffer, "address", "a");
 8001d38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d40:	4a96      	ldr	r2, [pc, #600]	; (8001f9c <ProcessUserInput+0x3a8>)
 8001d42:	4997      	ldr	r1, [pc, #604]	; (8001fa0 <ProcessUserInput+0x3ac>)
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	f001 f9ef 	bl	8003128 <replacestr>
  replacestr(buffer, "kp", "p");
 8001d4a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d4e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d52:	4a94      	ldr	r2, [pc, #592]	; (8001fa4 <ProcessUserInput+0x3b0>)
 8001d54:	4994      	ldr	r1, [pc, #592]	; (8001fa8 <ProcessUserInput+0x3b4>)
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	f001 f9e6 	bl	8003128 <replacestr>
  replacestr(buffer, "kd", "d");
 8001d5c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d64:	4a91      	ldr	r2, [pc, #580]	; (8001fac <ProcessUserInput+0x3b8>)
 8001d66:	4992      	ldr	r1, [pc, #584]	; (8001fb0 <ProcessUserInput+0x3bc>)
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	f001 f9dd 	bl	8003128 <replacestr>
  replacestr(buffer, "ki", "i");
 8001d6e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d72:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d76:	4a8f      	ldr	r2, [pc, #572]	; (8001fb4 <ProcessUserInput+0x3c0>)
 8001d78:	498f      	ldr	r1, [pc, #572]	; (8001fb8 <ProcessUserInput+0x3c4>)
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	f001 f9d4 	bl	8003128 <replacestr>
  replacestr(buffer, "li", "l");
 8001d80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d88:	4a8c      	ldr	r2, [pc, #560]	; (8001fbc <ProcessUserInput+0x3c8>)
 8001d8a:	498d      	ldr	r1, [pc, #564]	; (8001fc0 <ProcessUserInput+0x3cc>)
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	f001 f9cb 	bl	8003128 <replacestr>
  replacestr(buffer, "target", "t");
 8001d92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d9a:	4a8a      	ldr	r2, [pc, #552]	; (8001fc4 <ProcessUserInput+0x3d0>)
 8001d9c:	498a      	ldr	r1, [pc, #552]	; (8001fc8 <ProcessUserInput+0x3d4>)
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	f001 f9c2 	bl	8003128 <replacestr>
  replacestr(buffer, "temperature", "t");
 8001da4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001da8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dac:	4a85      	ldr	r2, [pc, #532]	; (8001fc4 <ProcessUserInput+0x3d0>)
 8001dae:	4987      	ldr	r1, [pc, #540]	; (8001fcc <ProcessUserInput+0x3d8>)
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	f001 f9b9 	bl	8003128 <replacestr>
  replacestr(buffer, "temp", "t");
 8001db6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dbe:	4a81      	ldr	r2, [pc, #516]	; (8001fc4 <ProcessUserInput+0x3d0>)
 8001dc0:	4983      	ldr	r1, [pc, #524]	; (8001fd0 <ProcessUserInput+0x3dc>)
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	f001 f9b0 	bl	8003128 <replacestr>
  replacestr(buffer, "frequency", "f");
 8001dc8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dcc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dd0:	4a80      	ldr	r2, [pc, #512]	; (8001fd4 <ProcessUserInput+0x3e0>)
 8001dd2:	4981      	ldr	r1, [pc, #516]	; (8001fd8 <ProcessUserInput+0x3e4>)
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	f001 f9a7 	bl	8003128 <replacestr>
  replacestr(buffer, "freq", "f");
 8001dda:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001de2:	4a7c      	ldr	r2, [pc, #496]	; (8001fd4 <ProcessUserInput+0x3e0>)
 8001de4:	497d      	ldr	r1, [pc, #500]	; (8001fdc <ProcessUserInput+0x3e8>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	f001 f99e 	bl	8003128 <replacestr>
  replacestr(buffer, "enable", "n");
 8001dec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001df0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001df4:	4a7a      	ldr	r2, [pc, #488]	; (8001fe0 <ProcessUserInput+0x3ec>)
 8001df6:	497b      	ldr	r1, [pc, #492]	; (8001fe4 <ProcessUserInput+0x3f0>)
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	f001 f995 	bl	8003128 <replacestr>
  replacestr(buffer, "disable", "f");
 8001dfe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e02:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e06:	4a73      	ldr	r2, [pc, #460]	; (8001fd4 <ProcessUserInput+0x3e0>)
 8001e08:	4977      	ldr	r1, [pc, #476]	; (8001fe8 <ProcessUserInput+0x3f4>)
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	f001 f98c 	bl	8003128 <replacestr>
  replacestr(buffer, "save", "s");
 8001e10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e18:	4a74      	ldr	r2, [pc, #464]	; (8001fec <ProcessUserInput+0x3f8>)
 8001e1a:	4975      	ldr	r1, [pc, #468]	; (8001ff0 <ProcessUserInput+0x3fc>)
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	f001 f983 	bl	8003128 <replacestr>
  replacestr(buffer, "load", "l");
 8001e22:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e26:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e2a:	4a64      	ldr	r2, [pc, #400]	; (8001fbc <ProcessUserInput+0x3c8>)
 8001e2c:	4971      	ldr	r1, [pc, #452]	; (8001ff4 <ProcessUserInput+0x400>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	f001 f97a 	bl	8003128 <replacestr>
  replacestr(buffer, "history", "h");
 8001e34:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e3c:	4a6e      	ldr	r2, [pc, #440]	; (8001ff8 <ProcessUserInput+0x404>)
 8001e3e:	496f      	ldr	r1, [pc, #444]	; (8001ffc <ProcessUserInput+0x408>)
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	f001 f971 	bl	8003128 <replacestr>
  replacestr(buffer, "update", "u");
 8001e46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e4a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e4e:	4a6c      	ldr	r2, [pc, #432]	; (8002000 <ProcessUserInput+0x40c>)
 8001e50:	496c      	ldr	r1, [pc, #432]	; (8002004 <ProcessUserInput+0x410>)
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	f001 f968 	bl	8003128 <replacestr>
  replacestr(buffer, "raw", "r");
 8001e58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e60:	4a69      	ldr	r2, [pc, #420]	; (8002008 <ProcessUserInput+0x414>)
 8001e62:	496a      	ldr	r1, [pc, #424]	; (800200c <ProcessUserInput+0x418>)
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	f001 f95f 	bl	8003128 <replacestr>
  replacestr(buffer, "bounce", "b");
 8001e6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e6e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e72:	4a67      	ldr	r2, [pc, #412]	; (8002010 <ProcessUserInput+0x41c>)
 8001e74:	4967      	ldr	r1, [pc, #412]	; (8002014 <ProcessUserInput+0x420>)
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	f001 f956 	bl	8003128 <replacestr>
  replacestr(buffer, "wipe", "w");
 8001e7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e84:	4a64      	ldr	r2, [pc, #400]	; (8002018 <ProcessUserInput+0x424>)
 8001e86:	4965      	ldr	r1, [pc, #404]	; (800201c <ProcessUserInput+0x428>)
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	f001 f94d 	bl	8003128 <replacestr>
  replacestr(buffer, "voltage", "v");
 8001e8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e92:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e96:	4a62      	ldr	r2, [pc, #392]	; (8002020 <ProcessUserInput+0x42c>)
 8001e98:	4962      	ldr	r1, [pc, #392]	; (8002024 <ProcessUserInput+0x430>)
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	f001 f944 	bl	8003128 <replacestr>


//  printf("New String: %s\n", buffer);

  if ((strcmp((char*) buffer, "?") == 0) || (strcmp((char*) buffer, "help") == 0))
 8001ea0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ea4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ea8:	495f      	ldr	r1, [pc, #380]	; (8002028 <ProcessUserInput+0x434>)
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	f7fe f9a0 	bl	80001f0 <strcmp>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <ProcessUserInput+0x2da>
 8001eb6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001eba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ebe:	495b      	ldr	r1, [pc, #364]	; (800202c <ProcessUserInput+0x438>)
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	f7fe f995 	bl	80001f0 <strcmp>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f040 80e3 	bne.w	8002094 <ProcessUserInput+0x4a0>
  {
    USBSendString("\nLFDI TCB Firmware v1.2\n");
 8001ece:	4858      	ldr	r0, [pc, #352]	; (8002030 <ProcessUserInput+0x43c>)
 8001ed0:	f001 f8c6 	bl	8003060 <USBSendString>
    USBSendString("Commands can be upper or lower case. Variables can be set with an equals sign or space or nothing.\n");
 8001ed4:	4857      	ldr	r0, [pc, #348]	; (8002034 <ProcessUserInput+0x440>)
 8001ed6:	f001 f8c3 	bl	8003060 <USBSendString>
    USBSendString("\"channel=1\", \"channel 1\", \"channel1\", \"c1\" are all treated the same.\n");
 8001eda:	4857      	ldr	r0, [pc, #348]	; (8002038 <ProcessUserInput+0x444>)
 8001edc:	f001 f8c0 	bl	8003060 <USBSendString>
    USBSendString("\n");
 8001ee0:	4856      	ldr	r0, [pc, #344]	; (800203c <ProcessUserInput+0x448>)
 8001ee2:	f001 f8bd 	bl	8003060 <USBSendString>
//    USBSendString("Controller = n  -- chooses which controller to configure\n");
    USBSendString("Channel = n     -- chooses which channel to configure\n");
 8001ee6:	4856      	ldr	r0, [pc, #344]	; (8002040 <ProcessUserInput+0x44c>)
 8001ee8:	f001 f8ba 	bl	8003060 <USBSendString>
    USBSendString("Address = nn    -- sets the address of the temperature sensor (00, 01, 10, or 11)\n");
 8001eec:	4855      	ldr	r0, [pc, #340]	; (8002044 <ProcessUserInput+0x450>)
 8001eee:	f001 f8b7 	bl	8003060 <USBSendString>
    USBSendString("kP = n.nn       -- sets the proportional gain\n");
 8001ef2:	4855      	ldr	r0, [pc, #340]	; (8002048 <ProcessUserInput+0x454>)
 8001ef4:	f001 f8b4 	bl	8003060 <USBSendString>
    USBSendString("kD = n.nn       -- sets the derivative gain\n");
 8001ef8:	4854      	ldr	r0, [pc, #336]	; (800204c <ProcessUserInput+0x458>)
 8001efa:	f001 f8b1 	bl	8003060 <USBSendString>
    USBSendString("kI = n.nn       -- sets the integral gain\n");
 8001efe:	4854      	ldr	r0, [pc, #336]	; (8002050 <ProcessUserInput+0x45c>)
 8001f00:	f001 f8ae 	bl	8003060 <USBSendString>
    USBSendString("Li = n.nn       -- sets the integral gain limit\n");
 8001f04:	4853      	ldr	r0, [pc, #332]	; (8002054 <ProcessUserInput+0x460>)
 8001f06:	f001 f8ab 	bl	8003060 <USBSendString>
    USBSendString("History = nn    -- sets the number of points used in the integral (1-255)\n");
 8001f0a:	4853      	ldr	r0, [pc, #332]	; (8002058 <ProcessUserInput+0x464>)
 8001f0c:	f001 f8a8 	bl	8003060 <USBSendString>
    USBSendString("Target = n      -- sets the target temperature\n");
 8001f10:	4852      	ldr	r0, [pc, #328]	; (800205c <ProcessUserInput+0x468>)
 8001f12:	f001 f8a5 	bl	8003060 <USBSendString>
    USBSendString("Temperature = n -- sets the target temperature\n");
 8001f16:	4852      	ldr	r0, [pc, #328]	; (8002060 <ProcessUserInput+0x46c>)
 8001f18:	f001 f8a2 	bl	8003060 <USBSendString>
    USBSendString("Freq = n        -- sets the PWM frequency (40 = 1 second)\n");
 8001f1c:	4851      	ldr	r0, [pc, #324]	; (8002064 <ProcessUserInput+0x470>)
 8001f1e:	f001 f89f 	bl	8003060 <USBSendString>
    USBSendString("Enable          -- starts the temperature control loop\n");
 8001f22:	4851      	ldr	r0, [pc, #324]	; (8002068 <ProcessUserInput+0x474>)
 8001f24:	f001 f89c 	bl	8003060 <USBSendString>
    USBSendString("Disable         -- stops the temperature control loop\n");
 8001f28:	4850      	ldr	r0, [pc, #320]	; (800206c <ProcessUserInput+0x478>)
 8001f2a:	f001 f899 	bl	8003060 <USBSendString>
    USBSendString("Update          -- shows the status of all of the controllers\n");
 8001f2e:	4850      	ldr	r0, [pc, #320]	; (8002070 <ProcessUserInput+0x47c>)
 8001f30:	f001 f896 	bl	8003060 <USBSendString>
    USBSendString("Raw             -- shows an easily parsable version of Update\n");
 8001f34:	484f      	ldr	r0, [pc, #316]	; (8002074 <ProcessUserInput+0x480>)
 8001f36:	f001 f893 	bl	8003060 <USBSendString>
    USBSendString("Wipe            -- wipes the existing configuration and load new defaults\n");
 8001f3a:	484f      	ldr	r0, [pc, #316]	; (8002078 <ProcessUserInput+0x484>)
 8001f3c:	f001 f890 	bl	8003060 <USBSendString>
    USBSendString("Bounce          -- performs a power-cycle / reboot on the system\n");
 8001f40:	484e      	ldr	r0, [pc, #312]	; (800207c <ProcessUserInput+0x488>)
 8001f42:	f001 f88d 	bl	8003060 <USBSendString>
    USBSendString("Load            -- reloads the previously saved values (automatic at power-on)\n");
 8001f46:	484e      	ldr	r0, [pc, #312]	; (8002080 <ProcessUserInput+0x48c>)
 8001f48:	f001 f88a 	bl	8003060 <USBSendString>
    USBSendString("Save            -- saves the currently configured values\n");
 8001f4c:	484d      	ldr	r0, [pc, #308]	; (8002084 <ProcessUserInput+0x490>)
 8001f4e:	f001 f887 	bl	8003060 <USBSendString>
    USBSendString("Voltage         -- Set the Peak to Peak Voltage to output on DAC Channel 0\n");
 8001f52:	484d      	ldr	r0, [pc, #308]	; (8002088 <ProcessUserInput+0x494>)
 8001f54:	f001 f884 	bl	8003060 <USBSendString>
    USBSendString("\n");
 8001f58:	4838      	ldr	r0, [pc, #224]	; (800203c <ProcessUserInput+0x448>)
 8001f5a:	f001 f881 	bl	8003060 <USBSendString>
    if (UI_Controller == 9)
 8001f5e:	4b4b      	ldr	r3, [pc, #300]	; (800208c <ProcessUserInput+0x498>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b09      	cmp	r3, #9
 8001f64:	d104      	bne.n	8001f70 <ProcessUserInput+0x37c>
      USBSendString("No controller selected.\n");
 8001f66:	484a      	ldr	r0, [pc, #296]	; (8002090 <ProcessUserInput+0x49c>)
 8001f68:	f001 f87a 	bl	8003060 <USBSendString>
      ShowEffort(&TCB.Controller);
      USBSendString("\n");
      */
      ShowAll(Controller, true);
    }
    return;
 8001f6c:	f000 bc61 	b.w	8002832 <ProcessUserInput+0xc3e>
      ShowAll(Controller, true);
 8001f70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f78:	2101      	movs	r1, #1
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	f000 fd2e 	bl	80029dc <ShowAll>
    return;
 8001f80:	f000 bc57 	b.w	8002832 <ProcessUserInput+0xc3e>
 8001f84:	08013c20 	.word	0x08013c20
 8001f88:	08013c24 	.word	0x08013c24
 8001f8c:	08013c28 	.word	0x08013c28
 8001f90:	08013c2c 	.word	0x08013c2c
 8001f94:	08013c30 	.word	0x08013c30
 8001f98:	08013c38 	.word	0x08013c38
 8001f9c:	08013c40 	.word	0x08013c40
 8001fa0:	08013c44 	.word	0x08013c44
 8001fa4:	08013c4c 	.word	0x08013c4c
 8001fa8:	08013c50 	.word	0x08013c50
 8001fac:	08013c54 	.word	0x08013c54
 8001fb0:	08013c58 	.word	0x08013c58
 8001fb4:	08013c5c 	.word	0x08013c5c
 8001fb8:	08013c60 	.word	0x08013c60
 8001fbc:	08013c64 	.word	0x08013c64
 8001fc0:	08013c68 	.word	0x08013c68
 8001fc4:	08013c6c 	.word	0x08013c6c
 8001fc8:	08013c70 	.word	0x08013c70
 8001fcc:	08013c78 	.word	0x08013c78
 8001fd0:	08013c84 	.word	0x08013c84
 8001fd4:	08013c8c 	.word	0x08013c8c
 8001fd8:	08013c90 	.word	0x08013c90
 8001fdc:	08013c9c 	.word	0x08013c9c
 8001fe0:	08013ca4 	.word	0x08013ca4
 8001fe4:	08013ca8 	.word	0x08013ca8
 8001fe8:	08013cb0 	.word	0x08013cb0
 8001fec:	08013cb8 	.word	0x08013cb8
 8001ff0:	08013cbc 	.word	0x08013cbc
 8001ff4:	08013cc4 	.word	0x08013cc4
 8001ff8:	08013ccc 	.word	0x08013ccc
 8001ffc:	08013cd0 	.word	0x08013cd0
 8002000:	08013cd8 	.word	0x08013cd8
 8002004:	08013cdc 	.word	0x08013cdc
 8002008:	08013ce4 	.word	0x08013ce4
 800200c:	08013ce8 	.word	0x08013ce8
 8002010:	08013cec 	.word	0x08013cec
 8002014:	08013cf0 	.word	0x08013cf0
 8002018:	08013cf8 	.word	0x08013cf8
 800201c:	08013cfc 	.word	0x08013cfc
 8002020:	08013d04 	.word	0x08013d04
 8002024:	08013d08 	.word	0x08013d08
 8002028:	08013d10 	.word	0x08013d10
 800202c:	08013d14 	.word	0x08013d14
 8002030:	08013d1c 	.word	0x08013d1c
 8002034:	08013d38 	.word	0x08013d38
 8002038:	08013d9c 	.word	0x08013d9c
 800203c:	08013de4 	.word	0x08013de4
 8002040:	08013de8 	.word	0x08013de8
 8002044:	08013e20 	.word	0x08013e20
 8002048:	08013e74 	.word	0x08013e74
 800204c:	08013ea4 	.word	0x08013ea4
 8002050:	08013ed4 	.word	0x08013ed4
 8002054:	08013f00 	.word	0x08013f00
 8002058:	08013f34 	.word	0x08013f34
 800205c:	08013f80 	.word	0x08013f80
 8002060:	08013fb0 	.word	0x08013fb0
 8002064:	08013fe0 	.word	0x08013fe0
 8002068:	0801401c 	.word	0x0801401c
 800206c:	08014054 	.word	0x08014054
 8002070:	0801408c 	.word	0x0801408c
 8002074:	080140cc 	.word	0x080140cc
 8002078:	0801410c 	.word	0x0801410c
 800207c:	08014158 	.word	0x08014158
 8002080:	0801419c 	.word	0x0801419c
 8002084:	080141ec 	.word	0x080141ec
 8002088:	08014228 	.word	0x08014228
 800208c:	2000000c 	.word	0x2000000c
 8002090:	08014274 	.word	0x08014274
  }

  //Print the Status all the Controllers
  if ((strcmp((char*) buffer, "u") == 0) || (strcmp((char*) buffer, "/") == 0))
 8002094:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002098:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800209c:	49c1      	ldr	r1, [pc, #772]	; (80023a4 <ProcessUserInput+0x7b0>)
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	f7fe f8a6 	bl	80001f0 <strcmp>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <ProcessUserInput+0x4cc>
 80020aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020b2:	49bd      	ldr	r1, [pc, #756]	; (80023a8 <ProcessUserInput+0x7b4>)
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	f7fe f89b 	bl	80001f0 <strcmp>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d108      	bne.n	80020d2 <ProcessUserInput+0x4de>
  {
    ShowAll(Controller, true);
 80020c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020c8:	2101      	movs	r1, #1
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	f000 fc86 	bl	80029dc <ShowAll>
    return;
 80020d0:	e3af      	b.n	8002832 <ProcessUserInput+0xc3e>
  }
  //Print the Status all the Controllers in non readable format
  if (strcmp((char*) buffer, "r") == 0)
 80020d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80020da:	49b4      	ldr	r1, [pc, #720]	; (80023ac <ProcessUserInput+0x7b8>)
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	f7fe f887 	bl	80001f0 <strcmp>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d108      	bne.n	80020fa <ProcessUserInput+0x506>
  {
    ShowAll(Controller, false);
 80020e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020f0:	2100      	movs	r1, #0
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	f000 fc72 	bl	80029dc <ShowAll>
    return;
 80020f8:	e39b      	b.n	8002832 <ProcessUserInput+0xc3e>
  }
  //Save the Configuration of a controller
  if (strcmp((char*) buffer, "s") == 0)
 80020fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80020fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002102:	49ab      	ldr	r1, [pc, #684]	; (80023b0 <ProcessUserInput+0x7bc>)
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	f7fe f873 	bl	80001f0 <strcmp>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d103      	bne.n	8002118 <ProcessUserInput+0x524>
  {

    USBSendString("Cannot Save, No EEPROM.\n");
 8002110:	48a8      	ldr	r0, [pc, #672]	; (80023b4 <ProcessUserInput+0x7c0>)
 8002112:	f000 ffa5 	bl	8003060 <USBSendString>
    return;
 8002116:	e38c      	b.n	8002832 <ProcessUserInput+0xc3e>
  }

  if (strcmp((char*) buffer, "l") == 0)
 8002118:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800211c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002120:	49a5      	ldr	r1, [pc, #660]	; (80023b8 <ProcessUserInput+0x7c4>)
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	f7fe f864 	bl	80001f0 <strcmp>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d103      	bne.n	8002136 <ProcessUserInput+0x542>
  {
    USBSendString("Cannot load Configuration, No EEPROM.\n");
 800212e:	48a3      	ldr	r0, [pc, #652]	; (80023bc <ProcessUserInput+0x7c8>)
 8002130:	f000 ff96 	bl	8003060 <USBSendString>
    return;
 8002134:	e37d      	b.n	8002832 <ProcessUserInput+0xc3e>
  }

  if (strcmp((char*) buffer, "b") == 0)
 8002136:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800213a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800213e:	49a0      	ldr	r1, [pc, #640]	; (80023c0 <ProcessUserInput+0x7cc>)
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	f7fe f855 	bl	80001f0 <strcmp>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <ProcessUserInput+0x55c>
  {
    NVIC_SystemReset();
 800214c:	f7ff fd3c 	bl	8001bc8 <__NVIC_SystemReset>
  }

  if (strcmp((char*) buffer, "w") == 0)
 8002150:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002154:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002158:	499a      	ldr	r1, [pc, #616]	; (80023c4 <ProcessUserInput+0x7d0>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	f7fe f848 	bl	80001f0 <strcmp>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10a      	bne.n	800217c <ProcessUserInput+0x588>
  {
    Controller_WipeConfig(Controller);
 8002166:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800216a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	f000 ff18 	bl	8002fa4 <Controller_WipeConfig>
    USBSendString("Configuration wiped.\n");
 8002174:	4894      	ldr	r0, [pc, #592]	; (80023c8 <ProcessUserInput+0x7d4>)
 8002176:	f000 ff73 	bl	8003060 <USBSendString>
    return;
 800217a:	e35a      	b.n	8002832 <ProcessUserInput+0xc3e>
  }

  if ((strcmp((char*) buffer, "1") == 0) || (strcmp((char*) buffer, "c1") == 0))
 800217c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002180:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002184:	4991      	ldr	r1, [pc, #580]	; (80023cc <ProcessUserInput+0x7d8>)
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	f7fe f832 	bl	80001f0 <strcmp>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <ProcessUserInput+0x5b4>
 8002192:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002196:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800219a:	498d      	ldr	r1, [pc, #564]	; (80023d0 <ProcessUserInput+0x7dc>)
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	f7fe f827 	bl	80001f0 <strcmp>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <ProcessUserInput+0x5ca>
  {
    UI_Controller = 0;
 80021a8:	4b8a      	ldr	r3, [pc, #552]	; (80023d4 <ProcessUserInput+0x7e0>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 80021ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	f000 fb46 	bl	8002848 <ShowControllerConfig>
    return;
 80021bc:	e339      	b.n	8002832 <ProcessUserInput+0xc3e>
  }

  if ((strcmp((char*) buffer, "2") == 0) || (strcmp((char*) buffer, "c2") == 0))
 80021be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021c2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021c6:	4984      	ldr	r1, [pc, #528]	; (80023d8 <ProcessUserInput+0x7e4>)
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	f7fe f811 	bl	80001f0 <strcmp>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <ProcessUserInput+0x5f6>
 80021d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021dc:	497f      	ldr	r1, [pc, #508]	; (80023dc <ProcessUserInput+0x7e8>)
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	f7fe f806 	bl	80001f0 <strcmp>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10a      	bne.n	8002200 <ProcessUserInput+0x60c>
  {
    UI_Controller = 1;
 80021ea:	4b7a      	ldr	r3, [pc, #488]	; (80023d4 <ProcessUserInput+0x7e0>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 80021f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	f000 fb25 	bl	8002848 <ShowControllerConfig>
    return;
 80021fe:	e318      	b.n	8002832 <ProcessUserInput+0xc3e>
  }

  if ((strcmp((char*) buffer, "3") == 0) || (strcmp((char*) buffer, "c3") == 0))
 8002200:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002204:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002208:	4975      	ldr	r1, [pc, #468]	; (80023e0 <ProcessUserInput+0x7ec>)
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	f7fd fff0 	bl	80001f0 <strcmp>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <ProcessUserInput+0x638>
 8002216:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800221a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800221e:	4971      	ldr	r1, [pc, #452]	; (80023e4 <ProcessUserInput+0x7f0>)
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	f7fd ffe5 	bl	80001f0 <strcmp>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10a      	bne.n	8002242 <ProcessUserInput+0x64e>
  {
    UI_Controller = 2;
 800222c:	4b69      	ldr	r3, [pc, #420]	; (80023d4 <ProcessUserInput+0x7e0>)
 800222e:	2202      	movs	r2, #2
 8002230:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 8002232:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002236:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	f000 fb04 	bl	8002848 <ShowControllerConfig>
    return;
 8002240:	e2f7      	b.n	8002832 <ProcessUserInput+0xc3e>
  }

  if ((strcmp((char*) buffer, "4") == 0) || (strcmp((char*) buffer, "c4") == 0))
 8002242:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002246:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800224a:	4967      	ldr	r1, [pc, #412]	; (80023e8 <ProcessUserInput+0x7f4>)
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	f7fd ffcf 	bl	80001f0 <strcmp>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <ProcessUserInput+0x67a>
 8002258:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800225c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002260:	4962      	ldr	r1, [pc, #392]	; (80023ec <ProcessUserInput+0x7f8>)
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	f7fd ffc4 	bl	80001f0 <strcmp>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10a      	bne.n	8002284 <ProcessUserInput+0x690>
  {
    UI_Controller = 3;
 800226e:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <ProcessUserInput+0x7e0>)
 8002270:	2203      	movs	r2, #3
 8002272:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 8002274:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002278:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	f000 fae3 	bl	8002848 <ShowControllerConfig>
    return;
 8002282:	e2d6      	b.n	8002832 <ProcessUserInput+0xc3e>
  }

  if (UI_Controller == 9)
 8002284:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <ProcessUserInput+0x7e0>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b09      	cmp	r3, #9
 800228a:	d103      	bne.n	8002294 <ProcessUserInput+0x6a0>
  {
    USBSendString("No controller selected.\n");
 800228c:	4858      	ldr	r0, [pc, #352]	; (80023f0 <ProcessUserInput+0x7fc>)
 800228e:	f000 fee7 	bl	8003060 <USBSendString>
    return;
 8002292:	e2ce      	b.n	8002832 <ProcessUserInput+0xc3e>
  }


  if (strcmp((char*) buffer, "e") == 0)
 8002294:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002298:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800229c:	4955      	ldr	r1, [pc, #340]	; (80023f4 <ProcessUserInput+0x800>)
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	f7fd ffa6 	bl	80001f0 <strcmp>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10b      	bne.n	80022c2 <ProcessUserInput+0x6ce>
  {
    USBSendString("Controller enabled.\n");
 80022aa:	4853      	ldr	r0, [pc, #332]	; (80023f8 <ProcessUserInput+0x804>)
 80022ac:	f000 fed8 	bl	8003060 <USBSendString>
    Controller->PID.Config.Enabled = true;
 80022b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
    return;
 80022c0:	e2b7      	b.n	8002832 <ProcessUserInput+0xc3e>
  }

  if (strcmp((char*) buffer, "d") == 0)
 80022c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022ca:	494c      	ldr	r1, [pc, #304]	; (80023fc <ProcessUserInput+0x808>)
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	f7fd ff8f 	bl	80001f0 <strcmp>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10b      	bne.n	80022f0 <ProcessUserInput+0x6fc>
  {
    USBSendString("Controller disabled.\n");
 80022d8:	4849      	ldr	r0, [pc, #292]	; (8002400 <ProcessUserInput+0x80c>)
 80022da:	f000 fec1 	bl	8003060 <USBSendString>
    Controller->PID.Config.Enabled = false;
 80022de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
    return;
 80022ee:	e2a0      	b.n	8002832 <ProcessUserInput+0xc3e>
  }

  if (sscanf((char*) buffer, "%c%f", &c, &f) == 2)
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	f107 0217 	add.w	r2, r7, #23
 80022f8:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80022fc:	f5a1 7088 	sub.w	r0, r1, #272	; 0x110
 8002300:	4940      	ldr	r1, [pc, #256]	; (8002404 <ProcessUserInput+0x810>)
 8002302:	6800      	ldr	r0, [r0, #0]
 8002304:	f00d fa5e 	bl	800f7c4 <siscanf>
 8002308:	4603      	mov	r3, r0
 800230a:	2b02      	cmp	r3, #2
 800230c:	f040 828a 	bne.w	8002824 <ProcessUserInput+0xc30>
  {
    u = (uint8_t) f;
 8002310:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002318:	edd3 7a00 	vldr	s15, [r3]
 800231c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002320:	edc7 7a00 	vstr	s15, [r7]
 8002324:	783b      	ldrb	r3, [r7, #0]
 8002326:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
    switch (c)
 800232a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800232e:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	3b61      	subs	r3, #97	; 0x61
 8002336:	2b15      	cmp	r3, #21
 8002338:	f200 8276 	bhi.w	8002828 <ProcessUserInput+0xc34>
 800233c:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <ProcessUserInput+0x750>)
 800233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002342:	bf00      	nop
 8002344:	0800240d 	.word	0x0800240d
 8002348:	08002829 	.word	0x08002829
 800234c:	0800239d 	.word	0x0800239d
 8002350:	0800257d 	.word	0x0800257d
 8002354:	08002829 	.word	0x08002829
 8002358:	080025e5 	.word	0x080025e5
 800235c:	08002829 	.word	0x08002829
 8002360:	080026fd 	.word	0x080026fd
 8002364:	08002515 	.word	0x08002515
 8002368:	08002829 	.word	0x08002829
 800236c:	08002829 	.word	0x08002829
 8002370:	08002695 	.word	0x08002695
 8002374:	08002829 	.word	0x08002829
 8002378:	08002829 	.word	0x08002829
 800237c:	08002829 	.word	0x08002829
 8002380:	080024ad 	.word	0x080024ad
 8002384:	08002829 	.word	0x08002829
 8002388:	08002829 	.word	0x08002829
 800238c:	08002829 	.word	0x08002829
 8002390:	08002775 	.word	0x08002775
 8002394:	08002829 	.word	0x08002829
 8002398:	080027bf 	.word	0x080027bf
    {
      case 'c':
        // we shouldn't get here if a valid number was used
        USBSendString("Invalid controller number.\n");
 800239c:	481a      	ldr	r0, [pc, #104]	; (8002408 <ProcessUserInput+0x814>)
 800239e:	f000 fe5f 	bl	8003060 <USBSendString>
        return;
 80023a2:	e246      	b.n	8002832 <ProcessUserInput+0xc3e>
 80023a4:	08013cd8 	.word	0x08013cd8
 80023a8:	08014290 	.word	0x08014290
 80023ac:	08013ce4 	.word	0x08013ce4
 80023b0:	08013cb8 	.word	0x08013cb8
 80023b4:	08014294 	.word	0x08014294
 80023b8:	08013c64 	.word	0x08013c64
 80023bc:	080142b0 	.word	0x080142b0
 80023c0:	08013cec 	.word	0x08013cec
 80023c4:	08013cf8 	.word	0x08013cf8
 80023c8:	080142d8 	.word	0x080142d8
 80023cc:	080142f0 	.word	0x080142f0
 80023d0:	080142f4 	.word	0x080142f4
 80023d4:	2000000c 	.word	0x2000000c
 80023d8:	080142f8 	.word	0x080142f8
 80023dc:	080142fc 	.word	0x080142fc
 80023e0:	08014300 	.word	0x08014300
 80023e4:	08014304 	.word	0x08014304
 80023e8:	08014308 	.word	0x08014308
 80023ec:	0801430c 	.word	0x0801430c
 80023f0:	08014274 	.word	0x08014274
 80023f4:	08014310 	.word	0x08014310
 80023f8:	08014314 	.word	0x08014314
 80023fc:	08013c54 	.word	0x08013c54
 8002400:	0801432c 	.word	0x0801432c
 8002404:	08014344 	.word	0x08014344
 8002408:	0801434c 	.word	0x0801434c
        break;
      case 'a':
        switch (u)
 800240c:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8002410:	2b0b      	cmp	r3, #11
 8002412:	d847      	bhi.n	80024a4 <ProcessUserInput+0x8b0>
 8002414:	a201      	add	r2, pc, #4	; (adr r2, 800241c <ProcessUserInput+0x828>)
 8002416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241a:	bf00      	nop
 800241c:	0800244d 	.word	0x0800244d
 8002420:	08002479 	.word	0x08002479
 8002424:	080024a5 	.word	0x080024a5
 8002428:	080024a5 	.word	0x080024a5
 800242c:	080024a5 	.word	0x080024a5
 8002430:	080024a5 	.word	0x080024a5
 8002434:	080024a5 	.word	0x080024a5
 8002438:	080024a5 	.word	0x080024a5
 800243c:	080024a5 	.word	0x080024a5
 8002440:	080024a5 	.word	0x080024a5
 8002444:	08002463 	.word	0x08002463
 8002448:	0800248f 	.word	0x0800248f
        {
          case 0:
            USBSendString("Address set to 0b 10 01 00 0x.\n");
 800244c:	48bb      	ldr	r0, [pc, #748]	; (800273c <ProcessUserInput+0xb48>)
 800244e:	f000 fe07 	bl	8003060 <USBSendString>
            Controller->Sensor.Address = 0b1001000;
 8002452:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002456:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2248      	movs	r2, #72	; 0x48
 800245e:	721a      	strb	r2, [r3, #8]
            return;
 8002460:	e1e7      	b.n	8002832 <ProcessUserInput+0xc3e>
            break;
          case 10:
            USBSendString("Address set to 0b 10 01 01 0x.\n");
 8002462:	48b7      	ldr	r0, [pc, #732]	; (8002740 <ProcessUserInput+0xb4c>)
 8002464:	f000 fdfc 	bl	8003060 <USBSendString>
            Controller->Sensor.Address = 0b1001010;
 8002468:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800246c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	224a      	movs	r2, #74	; 0x4a
 8002474:	721a      	strb	r2, [r3, #8]
            return;
 8002476:	e1dc      	b.n	8002832 <ProcessUserInput+0xc3e>
            break;
          case 1:
            USBSendString("Address set to 0b 10 01 00 1x.\n");
 8002478:	48b2      	ldr	r0, [pc, #712]	; (8002744 <ProcessUserInput+0xb50>)
 800247a:	f000 fdf1 	bl	8003060 <USBSendString>
            Controller->Sensor.Address = 0b1001001;
 800247e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002482:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2249      	movs	r2, #73	; 0x49
 800248a:	721a      	strb	r2, [r3, #8]
            return;
 800248c:	e1d1      	b.n	8002832 <ProcessUserInput+0xc3e>
            break;
          case 11:
            USBSendString("Address set to 0b 10 01 01 1x.\n");
 800248e:	48ae      	ldr	r0, [pc, #696]	; (8002748 <ProcessUserInput+0xb54>)
 8002490:	f000 fde6 	bl	8003060 <USBSendString>
            Controller->Sensor.Address = 0b1001011;
 8002494:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002498:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	224b      	movs	r2, #75	; 0x4b
 80024a0:	721a      	strb	r2, [r3, #8]
            return;
 80024a2:	e1c6      	b.n	8002832 <ProcessUserInput+0xc3e>
            break;
          default:
            USBSendString("Invalid Address.\n");
 80024a4:	48a9      	ldr	r0, [pc, #676]	; (800274c <ProcessUserInput+0xb58>)
 80024a6:	f000 fddb 	bl	8003060 <USBSendString>
            return;
 80024aa:	e1c2      	b.n	8002832 <ProcessUserInput+0xc3e>
        Controller->Sensor.Configured = false;
        Controller->Sensor.State = 0;
        Controller->PID.IntegratorCount = 0;
        break;
      case 'p':
        if (f < 0)
 80024ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	d503      	bpl.n	80024ca <ProcessUserInput+0x8d6>
          USBSendString("Invalid value.");
 80024c2:	48a3      	ldr	r0, [pc, #652]	; (8002750 <ProcessUserInput+0xb5c>)
 80024c4:	f000 fdcc 	bl	8003060 <USBSendString>
        {
          snprintf(output, 200, "kp set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Kp = f;
        }
        return;
 80024c8:	e1b3      	b.n	8002832 <ProcessUserInput+0xc3e>
          snprintf(output, 200, "kp set to %f.\n", f);
 80024ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe f857 	bl	8000588 <__aeabi_f2d>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	f107 0018 	add.w	r0, r7, #24
 80024e2:	e9cd 2300 	strd	r2, r3, [sp]
 80024e6:	4a9b      	ldr	r2, [pc, #620]	; (8002754 <ProcessUserInput+0xb60>)
 80024e8:	21c8      	movs	r1, #200	; 0xc8
 80024ea:	f00d f917 	bl	800f71c <sniprintf>
          USBSendString(output);
 80024ee:	f107 0318 	add.w	r3, r7, #24
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fdb4 	bl	8003060 <USBSendString>
          Controller->PID.Config.Kp = f;
 80024f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002506:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002510:	601a      	str	r2, [r3, #0]
        return;
 8002512:	e18e      	b.n	8002832 <ProcessUserInput+0xc3e>
        break;

      case 'i':
        if (f < 0)
 8002514:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	d503      	bpl.n	8002532 <ProcessUserInput+0x93e>
          USBSendString("Invalid value.");
 800252a:	4889      	ldr	r0, [pc, #548]	; (8002750 <ProcessUserInput+0xb5c>)
 800252c:	f000 fd98 	bl	8003060 <USBSendString>
        {
          snprintf(output, 200, "ki set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Ki = f;
        }
        return;
 8002530:	e17f      	b.n	8002832 <ProcessUserInput+0xc3e>
          snprintf(output, 200, "ki set to %f.\n", f);
 8002532:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe f823 	bl	8000588 <__aeabi_f2d>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	f107 0018 	add.w	r0, r7, #24
 800254a:	e9cd 2300 	strd	r2, r3, [sp]
 800254e:	4a82      	ldr	r2, [pc, #520]	; (8002758 <ProcessUserInput+0xb64>)
 8002550:	21c8      	movs	r1, #200	; 0xc8
 8002552:	f00d f8e3 	bl	800f71c <sniprintf>
          USBSendString(output);
 8002556:	f107 0318 	add.w	r3, r7, #24
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fd80 	bl	8003060 <USBSendString>
          Controller->PID.Config.Ki = f;
 8002560:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800256e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002578:	601a      	str	r2, [r3, #0]
        return;
 800257a:	e15a      	b.n	8002832 <ProcessUserInput+0xc3e>
        break;

      case 'd':
        if (f < 0)
 800257c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002590:	d503      	bpl.n	800259a <ProcessUserInput+0x9a6>
          USBSendString("Invalid value.");
 8002592:	486f      	ldr	r0, [pc, #444]	; (8002750 <ProcessUserInput+0xb5c>)
 8002594:	f000 fd64 	bl	8003060 <USBSendString>
        {
          snprintf(output, 200, "kd set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Kd = f;
        }
        return;
 8002598:	e14b      	b.n	8002832 <ProcessUserInput+0xc3e>
          snprintf(output, 200, "kd set to %f.\n", f);
 800259a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800259e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fd ffef 	bl	8000588 <__aeabi_f2d>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	f107 0018 	add.w	r0, r7, #24
 80025b2:	e9cd 2300 	strd	r2, r3, [sp]
 80025b6:	4a69      	ldr	r2, [pc, #420]	; (800275c <ProcessUserInput+0xb68>)
 80025b8:	21c8      	movs	r1, #200	; 0xc8
 80025ba:	f00d f8af 	bl	800f71c <sniprintf>
          USBSendString(output);
 80025be:	f107 0318 	add.w	r3, r7, #24
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fd4c 	bl	8003060 <USBSendString>
          Controller->PID.Config.Kd = f;
 80025c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80025e0:	601a      	str	r2, [r3, #0]
        return;
 80025e2:	e126      	b.n	8002832 <ProcessUserInput+0xc3e>
        break;

      case 'f':
        if ((f < 0) || (f > 600))
 80025e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025ec:	edd3 7a00 	vldr	s15, [r3]
 80025f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f8:	d40c      	bmi.n	8002614 <ProcessUserInput+0xa20>
 80025fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002602:	edd3 7a00 	vldr	s15, [r3]
 8002606:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8002760 <ProcessUserInput+0xb6c>
 800260a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002612:	dd03      	ble.n	800261c <ProcessUserInput+0xa28>
          USBSendString("Invalid value.");
 8002614:	484e      	ldr	r0, [pc, #312]	; (8002750 <ProcessUserInput+0xb5c>)
 8002616:	f000 fd23 	bl	8003060 <USBSendString>
        {
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
          USBSendString(output);
          Controller->PID.Config.Frequency = f;
        }
        return;
 800261a:	e10a      	b.n	8002832 <ProcessUserInput+0xc3e>
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
 800261c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ffae 	bl	8000588 <__aeabi_f2d>
 800262c:	4604      	mov	r4, r0
 800262e:	460d      	mov	r5, r1
 8002630:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002764 <ProcessUserInput+0xb70>
 8002640:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002644:	ee16 0a90 	vmov	r0, s13
 8002648:	f7fd ff9e 	bl	8000588 <__aeabi_f2d>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	f107 0018 	add.w	r0, r7, #24
 8002654:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002658:	e9cd 4500 	strd	r4, r5, [sp]
 800265c:	4a42      	ldr	r2, [pc, #264]	; (8002768 <ProcessUserInput+0xb74>)
 800265e:	21c8      	movs	r1, #200	; 0xc8
 8002660:	f00d f85c 	bl	800f71c <sniprintf>
          USBSendString(output);
 8002664:	f107 0318 	add.w	r3, r7, #24
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fcf9 	bl	8003060 <USBSendString>
          Controller->PID.Config.Frequency = f;
 800266e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800267e:	ee17 3a90 	vmov	r3, s15
 8002682:	b29a      	uxth	r2, r3
 8002684:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002688:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f8a3 265e 	strh.w	r2, [r3, #1630]	; 0x65e
        return;
 8002692:	e0ce      	b.n	8002832 <ProcessUserInput+0xc3e>
        break;


      case 'l':
        if (f < 0)
 8002694:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a8:	d503      	bpl.n	80026b2 <ProcessUserInput+0xabe>
          USBSendString("Invalid value.");
 80026aa:	4829      	ldr	r0, [pc, #164]	; (8002750 <ProcessUserInput+0xb5c>)
 80026ac:	f000 fcd8 	bl	8003060 <USBSendString>
        {
          snprintf(output, 200, "Li set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Li = f;
        }
        return;
 80026b0:	e0bf      	b.n	8002832 <ProcessUserInput+0xc3e>
          snprintf(output, 200, "Li set to %f.\n", f);
 80026b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd ff63 	bl	8000588 <__aeabi_f2d>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	f107 0018 	add.w	r0, r7, #24
 80026ca:	e9cd 2300 	strd	r2, r3, [sp]
 80026ce:	4a27      	ldr	r2, [pc, #156]	; (800276c <ProcessUserInput+0xb78>)
 80026d0:	21c8      	movs	r1, #200	; 0xc8
 80026d2:	f00d f823 	bl	800f71c <sniprintf>
          USBSendString(output);
 80026d6:	f107 0318 	add.w	r3, r7, #24
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fcc0 	bl	8003060 <USBSendString>
          Controller->PID.Config.Li = f;
 80026e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 80026f8:	601a      	str	r2, [r3, #0]
        return;
 80026fa:	e09a      	b.n	8002832 <ProcessUserInput+0xc3e>
        break;
      case 'h':
        if (u == 0)
 80026fc:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8002700:	2b00      	cmp	r3, #0
 8002702:	d103      	bne.n	800270c <ProcessUserInput+0xb18>
          USBSendString("Invalid value.");
 8002704:	4812      	ldr	r0, [pc, #72]	; (8002750 <ProcessUserInput+0xb5c>)
 8002706:	f000 fcab 	bl	8003060 <USBSendString>
        {
          snprintf(output, 200, "History set to %u.\n", u);
          USBSendString(output);
          Controller->PID.Config.History = u;
        }
        return;
 800270a:	e092      	b.n	8002832 <ProcessUserInput+0xc3e>
          snprintf(output, 200, "History set to %u.\n", u);
 800270c:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8002710:	f107 0018 	add.w	r0, r7, #24
 8002714:	4a16      	ldr	r2, [pc, #88]	; (8002770 <ProcessUserInput+0xb7c>)
 8002716:	21c8      	movs	r1, #200	; 0xc8
 8002718:	f00d f800 	bl	800f71c <sniprintf>
          USBSendString(output);
 800271c:	f107 0318 	add.w	r3, r7, #24
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fc9d 	bl	8003060 <USBSendString>
          Controller->PID.Config.History = u;
 8002726:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800272a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 8002734:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
        return;
 8002738:	e07b      	b.n	8002832 <ProcessUserInput+0xc3e>
 800273a:	bf00      	nop
 800273c:	08014368 	.word	0x08014368
 8002740:	08014388 	.word	0x08014388
 8002744:	080143a8 	.word	0x080143a8
 8002748:	080143c8 	.word	0x080143c8
 800274c:	080143e8 	.word	0x080143e8
 8002750:	080143fc 	.word	0x080143fc
 8002754:	0801440c 	.word	0x0801440c
 8002758:	0801441c 	.word	0x0801441c
 800275c:	0801442c 	.word	0x0801442c
 8002760:	44160000 	.word	0x44160000
 8002764:	42200000 	.word	0x42200000
 8002768:	0801443c 	.word	0x0801443c
 800276c:	08014460 	.word	0x08014460
 8002770:	08014470 	.word	0x08014470
        break;

      case 't':
        snprintf(output, 200, "Target temperature set to %f.\n", f);
 8002774:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd ff02 	bl	8000588 <__aeabi_f2d>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	f107 0018 	add.w	r0, r7, #24
 800278c:	e9cd 2300 	strd	r2, r3, [sp]
 8002790:	4a2a      	ldr	r2, [pc, #168]	; (800283c <ProcessUserInput+0xc48>)
 8002792:	21c8      	movs	r1, #200	; 0xc8
 8002794:	f00c ffc2 	bl	800f71c <sniprintf>
        USBSendString(output);
 8002798:	f107 0318 	add.w	r3, r7, #24
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fc5f 	bl	8003060 <USBSendString>
        Controller->PID.Config.TargetP = f;
 80027a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 80027ba:	601a      	str	r2, [r3, #0]
        return;
 80027bc:	e039      	b.n	8002832 <ProcessUserInput+0xc3e>
        break;

      case 'v':
    	  snprintf(output, 200, "Voltage of DAC Channel 0 set to %f.\n", f);
 80027be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd fedd 	bl	8000588 <__aeabi_f2d>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	f107 0018 	add.w	r0, r7, #24
 80027d6:	e9cd 2300 	strd	r2, r3, [sp]
 80027da:	4a19      	ldr	r2, [pc, #100]	; (8002840 <ProcessUserInput+0xc4c>)
 80027dc:	21c8      	movs	r1, #200	; 0xc8
 80027de:	f00c ff9d 	bl	800f71c <sniprintf>
    	  USBSendString(output);
 80027e2:	f107 0318 	add.w	r3, r7, #24
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fc3a 	bl	8003060 <USBSendString>
    	  //Need to implement Voltage for the Dac Channels
        for (uint8_t i = 0; i < 6; i++)
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80027f2:	e012      	b.n	800281a <ProcessUserInput+0xc26>
        {
          Set_Voltage_Peak_to_Peak(&TCB->DAC8718, i, &f);
 80027f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8002802:	f107 0210 	add.w	r2, r7, #16
 8002806:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fde4 	bl	80013d8 <Set_Voltage_Peak_to_Peak>
        for (uint8_t i = 0; i < 6; i++)
 8002810:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002814:	3301      	adds	r3, #1
 8002816:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 800281a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800281e:	2b05      	cmp	r3, #5
 8002820:	d9e8      	bls.n	80027f4 <ProcessUserInput+0xc00>
        }
    	  return;
 8002822:	e006      	b.n	8002832 <ProcessUserInput+0xc3e>
    	  break;

      default:
        break;
    }
  }
 8002824:	bf00      	nop
 8002826:	e000      	b.n	800282a <ProcessUserInput+0xc36>
        break;
 8002828:	bf00      	nop
  USBSendString("Unknown command.\n");
 800282a:	4806      	ldr	r0, [pc, #24]	; (8002844 <ProcessUserInput+0xc50>)
 800282c:	f000 fc18 	bl	8003060 <USBSendString>
  return;
 8002830:	bf00      	nop
}
 8002832:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002836:	46bd      	mov	sp, r7
 8002838:	bdb0      	pop	{r4, r5, r7, pc}
 800283a:	bf00      	nop
 800283c:	08014484 	.word	0x08014484
 8002840:	080144a4 	.word	0x080144a4
 8002844:	080144cc 	.word	0x080144cc

08002848 <ShowControllerConfig>:

//Show the Configuration of a Controller
void ShowControllerConfig(struct sController* Controller)
{
 8002848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284c:	b0d1      	sub	sp, #324	; 0x144
 800284e:	af0c      	add	r7, sp, #48	; 0x30
 8002850:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002854:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002858:	6018      	str	r0, [r3, #0]
  char s1[12];
  char buffer[250];
  FormatTemperature(s1, Controller->PID.Config.TargetP);
 800285a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800285e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fd fe8c 	bl	8000588 <__aeabi_f2d>
 8002870:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002874:	ec41 0b10 	vmov	d0, r0, r1
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fafd 	bl	8002e78 <FormatTemperature>
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 800287e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002882:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	603b      	str	r3, [r7, #0]
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 800288c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002890:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 800289a:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fe73 	bl	8000588 <__aeabi_f2d>
 80028a2:	4604      	mov	r4, r0
 80028a4:	460d      	mov	r5, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80028a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80028b4:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fd fe66 	bl	8000588 <__aeabi_f2d>
 80028bc:	4680      	mov	r8, r0
 80028be:	4689      	mov	r9, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80028c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 80028ce:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe59 	bl	8000588 <__aeabi_f2d>
 80028d6:	4682      	mov	sl, r0
 80028d8:	468b      	mov	fp, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80028da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 80028e8:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fd fe4c 	bl	8000588 <__aeabi_f2d>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80028f4:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80028f8:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80028fc:	6809      	ldr	r1, [r1, #0]
 80028fe:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002902:	460e      	mov	r6, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002904:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002908:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800290c:	6809      	ldr	r1, [r1, #0]
 800290e:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002912:	f107 0008 	add.w	r0, r7, #8
 8002916:	910a      	str	r1, [sp, #40]	; 0x28
 8002918:	9609      	str	r6, [sp, #36]	; 0x24
 800291a:	f507 7182 	add.w	r1, r7, #260	; 0x104
 800291e:	9108      	str	r1, [sp, #32]
 8002920:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002924:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002928:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800292c:	e9cd 4500 	strd	r4, r5, [sp]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <ShowControllerConfig+0x178>)
 8002934:	21c8      	movs	r1, #200	; 0xc8
 8002936:	f00c fef1 	bl	800f71c <sniprintf>
  USBSendString(buffer);
 800293a:	f107 0308 	add.w	r3, r7, #8
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fb8e 	bl	8003060 <USBSendString>
  switch (Controller->Sensor.Address & 0x03)
 8002944:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002948:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	7a1b      	ldrb	r3, [r3, #8]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b03      	cmp	r3, #3
 8002956:	d81b      	bhi.n	8002990 <ShowControllerConfig+0x148>
 8002958:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <ShowControllerConfig+0x118>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002971 	.word	0x08002971
 8002964:	08002979 	.word	0x08002979
 8002968:	08002981 	.word	0x08002981
 800296c:	08002989 	.word	0x08002989
  {
    case 0:
      USBSendString("00");
 8002970:	4814      	ldr	r0, [pc, #80]	; (80029c4 <ShowControllerConfig+0x17c>)
 8002972:	f000 fb75 	bl	8003060 <USBSendString>
      break;
 8002976:	e00c      	b.n	8002992 <ShowControllerConfig+0x14a>
    case 1:
      USBSendString("01");
 8002978:	4813      	ldr	r0, [pc, #76]	; (80029c8 <ShowControllerConfig+0x180>)
 800297a:	f000 fb71 	bl	8003060 <USBSendString>
      break;
 800297e:	e008      	b.n	8002992 <ShowControllerConfig+0x14a>
    case 2:
      USBSendString("10");
 8002980:	4812      	ldr	r0, [pc, #72]	; (80029cc <ShowControllerConfig+0x184>)
 8002982:	f000 fb6d 	bl	8003060 <USBSendString>
      break;
 8002986:	e004      	b.n	8002992 <ShowControllerConfig+0x14a>
    case 3:
      USBSendString("11");
 8002988:	4811      	ldr	r0, [pc, #68]	; (80029d0 <ShowControllerConfig+0x188>)
 800298a:	f000 fb69 	bl	8003060 <USBSendString>
      break;
 800298e:	e000      	b.n	8002992 <ShowControllerConfig+0x14a>
    default:
      break;
 8002990:	bf00      	nop
  }
  if (Controller->PID.Config.Enabled)
 8002992:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002996:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <ShowControllerConfig+0x164>
    USBSendString("  ENABLED\n");
 80029a4:	480b      	ldr	r0, [pc, #44]	; (80029d4 <ShowControllerConfig+0x18c>)
 80029a6:	f000 fb5b 	bl	8003060 <USBSendString>
  else
    USBSendString("  DISABLED\n");
}
 80029aa:	e002      	b.n	80029b2 <ShowControllerConfig+0x16a>
    USBSendString("  DISABLED\n");
 80029ac:	480a      	ldr	r0, [pc, #40]	; (80029d8 <ShowControllerConfig+0x190>)
 80029ae:	f000 fb57 	bl	8003060 <USBSendString>
}
 80029b2:	bf00      	nop
 80029b4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80029b8:	46bd      	mov	sp, r7
 80029ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029be:	bf00      	nop
 80029c0:	080144e0 	.word	0x080144e0
 80029c4:	08014544 	.word	0x08014544
 80029c8:	08014548 	.word	0x08014548
 80029cc:	0801454c 	.word	0x0801454c
 80029d0:	08014550 	.word	0x08014550
 80029d4:	08014554 	.word	0x08014554
 80029d8:	08014560 	.word	0x08014560

080029dc <ShowAll>:
//Show the Status of a Controller
//@brief Show the Status of a Controller
//@param Controller The Controller to show
//@param readable If true, show the status in human readable form
void ShowAll(struct sController* Controller, bool readable)
{
 80029dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e0:	b0b7      	sub	sp, #220	; 0xdc
 80029e2:	af16      	add	r7, sp, #88	; 0x58
 80029e4:	6278      	str	r0, [r7, #36]	; 0x24
 80029e6:	460b      	mov	r3, r1
 80029e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint32_t ADCVal = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint8_t i;
    char target[12];
    FormatTemperature(target, Controller->PID.Config.TargetP);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fdc5 	bl	8000588 <__aeabi_f2d>
 80029fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a02:	ec41 0b10 	vmov	d0, r0, r1
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fa36 	bl	8002e78 <FormatTemperature>
    char address[3];
    switch (Controller->Sensor.Address & 0x03)
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	7a1b      	ldrb	r3, [r3, #8]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d833      	bhi.n	8002a80 <ShowAll+0xa4>
 8002a18:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <ShowAll+0x44>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a31 	.word	0x08002a31
 8002a24:	08002a45 	.word	0x08002a45
 8002a28:	08002a59 	.word	0x08002a59
 8002a2c:	08002a6d 	.word	0x08002a6d
    {
      case 0: strcpy(address, "00"); break;
 8002a30:	4aaa      	ldr	r2, [pc, #680]	; (8002cdc <ShowAll+0x300>)
 8002a32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	4611      	mov	r1, r2
 8002a3a:	8019      	strh	r1, [r3, #0]
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	0c12      	lsrs	r2, r2, #16
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e01e      	b.n	8002a82 <ShowAll+0xa6>
      case 1: strcpy(address, "01"); break;
 8002a44:	4aa6      	ldr	r2, [pc, #664]	; (8002ce0 <ShowAll+0x304>)
 8002a46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	8019      	strh	r1, [r3, #0]
 8002a50:	3302      	adds	r3, #2
 8002a52:	0c12      	lsrs	r2, r2, #16
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e014      	b.n	8002a82 <ShowAll+0xa6>
      case 2: strcpy(address, "10"); break;
 8002a58:	4aa2      	ldr	r2, [pc, #648]	; (8002ce4 <ShowAll+0x308>)
 8002a5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	4611      	mov	r1, r2
 8002a62:	8019      	strh	r1, [r3, #0]
 8002a64:	3302      	adds	r3, #2
 8002a66:	0c12      	lsrs	r2, r2, #16
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	e00a      	b.n	8002a82 <ShowAll+0xa6>
      case 3: strcpy(address, "11"); break;
 8002a6c:	4a9e      	ldr	r2, [pc, #632]	; (8002ce8 <ShowAll+0x30c>)
 8002a6e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	4611      	mov	r1, r2
 8002a76:	8019      	strh	r1, [r3, #0]
 8002a78:	3302      	adds	r3, #2
 8002a7a:	0c12      	lsrs	r2, r2, #16
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	e000      	b.n	8002a82 <ShowAll+0xa6>
      default: break;
 8002a80:	bf00      	nop
    }
    char enabled[10];
    if (Controller->PID.Config.Enabled)
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <ShowAll+0xbe>
      strcpy(enabled, "ENABLED ");
 8002a8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a90:	4a96      	ldr	r2, [pc, #600]	; (8002cec <ShowAll+0x310>)
 8002a92:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a94:	c303      	stmia	r3!, {r0, r1}
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	e005      	b.n	8002aa6 <ShowAll+0xca>
    else
      strcpy(enabled, "DISABLED");
 8002a9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002a9e:	4a94      	ldr	r2, [pc, #592]	; (8002cf0 <ShowAll+0x314>)
 8002aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aa2:	c303      	stmia	r3!, {r0, r1}
 8002aa4:	701a      	strb	r2, [r3, #0]
    char average[12], last[12], targetp[12];
    FormatTemperature(average, Controller->Sensor.Average);
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8002aac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ab0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ab4:	eef0 0a67 	vmov.f32	s1, s15
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 f9dd 	bl	8002e78 <FormatTemperature>
    FormatTemperature(last, Controller->Sensor.LastTemperature);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	ed93 7b88 	vldr	d7, [r3, #544]	; 0x220
 8002ac4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ac8:	eeb0 0a47 	vmov.f32	s0, s14
 8002acc:	eef0 0a67 	vmov.f32	s1, s15
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 f9d1 	bl	8002e78 <FormatTemperature>
    FormatTemperature(targetp, Controller->PID.Config.TargetP);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fd52 	bl	8000588 <__aeabi_f2d>
 8002ae4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ae8:	ec41 0b10 	vmov	d0, r0, r1
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 f9c3 	bl	8002e78 <FormatTemperature>

    char sensor[15];
    switch (Controller->Sensor.State)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d839      	bhi.n	8002b70 <ShowAll+0x194>
 8002afc:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <ShowAll+0x128>)
 8002afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b02:	bf00      	nop
 8002b04:	08002b19 	.word	0x08002b19
 8002b08:	08002b29 	.word	0x08002b29
 8002b0c:	08002b3b 	.word	0x08002b3b
 8002b10:	08002b4f 	.word	0x08002b4f
 8002b14:	08002b5d 	.word	0x08002b5d
    {
      case TMP117_STATE_UNKNOWN:      strcpy(sensor, "Unknown");       break;
 8002b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b1c:	4a75      	ldr	r2, [pc, #468]	; (8002cf4 <ShowAll+0x318>)
 8002b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b22:	e883 0003 	stmia.w	r3, {r0, r1}
 8002b26:	e024      	b.n	8002b72 <ShowAll+0x196>
      case TMP117_STATE_INITFAILED:   strcpy(sensor, "Config failed"); break;
 8002b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b2c:	4a72      	ldr	r2, [pc, #456]	; (8002cf8 <ShowAll+0x31c>)
 8002b2e:	461c      	mov	r4, r3
 8002b30:	4613      	mov	r3, r2
 8002b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b34:	c407      	stmia	r4!, {r0, r1, r2}
 8002b36:	8023      	strh	r3, [r4, #0]
 8002b38:	e01b      	b.n	8002b72 <ShowAll+0x196>
      case TMP117_STATE_REQUESTNOACK: strcpy(sensor, "Req failed");    break;
 8002b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b3e:	4a6f      	ldr	r2, [pc, #444]	; (8002cfc <ShowAll+0x320>)
 8002b40:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b42:	c303      	stmia	r3!, {r0, r1}
 8002b44:	801a      	strh	r2, [r3, #0]
 8002b46:	3302      	adds	r3, #2
 8002b48:	0c12      	lsrs	r2, r2, #16
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	e011      	b.n	8002b72 <ShowAll+0x196>
      case TMP117_STATE_RECEIVEFAIL:  strcpy(sensor, "No response");   break;
 8002b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b52:	4a6b      	ldr	r2, [pc, #428]	; (8002d00 <ShowAll+0x324>)
 8002b54:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b5a:	e00a      	b.n	8002b72 <ShowAll+0x196>
      case TMP117_STATE_VALIDTEMP:    strcpy(sensor, "OK");            break;
 8002b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b60:	4a68      	ldr	r2, [pc, #416]	; (8002d04 <ShowAll+0x328>)
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	4611      	mov	r1, r2
 8002b66:	8019      	strh	r1, [r3, #0]
 8002b68:	3302      	adds	r3, #2
 8002b6a:	0c12      	lsrs	r2, r2, #16
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e000      	b.n	8002b72 <ShowAll+0x196>
      default: break;
 8002b70:	bf00      	nop
    }

    static char buffer[250];

    if (readable)
 8002b72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80d2 	beq.w	8002d20 <ShowAll+0x344>
    {
      snprintf(buffer, 200, "C%u: kp=%5.2f   ep=% 7.1f    temp=%8s  freq: %04u  %s\n", Controller->Heater, Controller->PID.Config.Kp, 100 * Controller->PID.Ep, last, Controller->PID.Config.Frequency, enabled);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	461e      	mov	r6, r3
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fcfc 	bl	8000588 <__aeabi_f2d>
 8002b90:	4604      	mov	r4, r0
 8002b92:	460d      	mov	r5, r1
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002d1c <ShowAll+0x340>
 8002ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba6:	ee17 0a90 	vmov	r0, s15
 8002baa:	f7fd fced 	bl	8000588 <__aeabi_f2d>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bb4:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
 8002bb8:	4608      	mov	r0, r1
 8002bba:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002bbe:	9106      	str	r1, [sp, #24]
 8002bc0:	9005      	str	r0, [sp, #20]
 8002bc2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002bc6:	9104      	str	r1, [sp, #16]
 8002bc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bcc:	e9cd 4500 	strd	r4, r5, [sp]
 8002bd0:	4633      	mov	r3, r6
 8002bd2:	4a4d      	ldr	r2, [pc, #308]	; (8002d08 <ShowAll+0x32c>)
 8002bd4:	21c8      	movs	r1, #200	; 0xc8
 8002bd6:	484d      	ldr	r0, [pc, #308]	; (8002d0c <ShowAll+0x330>)
 8002bd8:	f00c fda0 	bl	800f71c <sniprintf>
      USBSendString(buffer);
 8002bdc:	484b      	ldr	r0, [pc, #300]	; (8002d0c <ShowAll+0x330>)
 8002bde:	f000 fa3f 	bl	8003060 <USBSendString>
      snprintf(buffer, 200,  "  : kd=%5.2f   ed=% 7.1f     avg=%8s  i2c: %2s\n", Controller->PID.Config.Kd, 100 * Controller->PID.Ed, average, address);
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fccc 	bl	8000588 <__aeabi_f2d>
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	460d      	mov	r5, r1
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002d1c <ShowAll+0x340>
 8002c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c06:	ee17 0a90 	vmov	r0, s15
 8002c0a:	f7fd fcbd 	bl	8000588 <__aeabi_f2d>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002c16:	9105      	str	r1, [sp, #20]
 8002c18:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002c1c:	9104      	str	r1, [sp, #16]
 8002c1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c22:	e9cd 4500 	strd	r4, r5, [sp]
 8002c26:	4a3a      	ldr	r2, [pc, #232]	; (8002d10 <ShowAll+0x334>)
 8002c28:	21c8      	movs	r1, #200	; 0xc8
 8002c2a:	4838      	ldr	r0, [pc, #224]	; (8002d0c <ShowAll+0x330>)
 8002c2c:	f00c fd76 	bl	800f71c <sniprintf>
      USBSendString(buffer);
 8002c30:	4836      	ldr	r0, [pc, #216]	; (8002d0c <ShowAll+0x330>)
 8002c32:	f000 fa15 	bl	8003060 <USBSendString>
      snprintf(buffer, 200,  "  : ki=%5.2f   ei=% 7.1f  target=%8s  history=%3u\n", Controller->PID.Config.Ki, 100 * Controller->PID.Ei, target, Controller->PID.Config.History);
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fca2 	bl	8000588 <__aeabi_f2d>
 8002c44:	4604      	mov	r4, r0
 8002c46:	460d      	mov	r5, r1
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002d1c <ShowAll+0x340>
 8002c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c5a:	ee17 0a90 	vmov	r0, s15
 8002c5e:	f7fd fc93 	bl	8000588 <__aeabi_f2d>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c68:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
 8002c6c:	9105      	str	r1, [sp, #20]
 8002c6e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002c72:	9104      	str	r1, [sp, #16]
 8002c74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c78:	e9cd 4500 	strd	r4, r5, [sp]
 8002c7c:	4a25      	ldr	r2, [pc, #148]	; (8002d14 <ShowAll+0x338>)
 8002c7e:	21c8      	movs	r1, #200	; 0xc8
 8002c80:	4822      	ldr	r0, [pc, #136]	; (8002d0c <ShowAll+0x330>)
 8002c82:	f00c fd4b 	bl	800f71c <sniprintf>
      USBSendString(buffer);
 8002c86:	4821      	ldr	r0, [pc, #132]	; (8002d0c <ShowAll+0x330>)
 8002c88:	f000 f9ea 	bl	8003060 <USBSendString>
      snprintf(buffer, 200,  "  : li=%5.2f  eff=% 7.1f  sensor: %s\n\n", Controller->PID.Config.Li, 100 * Controller->PID.Effort, sensor);
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fc77 	bl	8000588 <__aeabi_f2d>
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	460d      	mov	r5, r1
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002ca4:	edd3 7a00 	vldr	s15, [r3]
 8002ca8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d1c <ShowAll+0x340>
 8002cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb0:	ee17 0a90 	vmov	r0, s15
 8002cb4:	f7fd fc68 	bl	8000588 <__aeabi_f2d>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002cc0:	9104      	str	r1, [sp, #16]
 8002cc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002cc6:	e9cd 4500 	strd	r4, r5, [sp]
 8002cca:	4a13      	ldr	r2, [pc, #76]	; (8002d18 <ShowAll+0x33c>)
 8002ccc:	21c8      	movs	r1, #200	; 0xc8
 8002cce:	480f      	ldr	r0, [pc, #60]	; (8002d0c <ShowAll+0x330>)
 8002cd0:	f00c fd24 	bl	800f71c <sniprintf>
      USBSendString(buffer);
 8002cd4:	480d      	ldr	r0, [pc, #52]	; (8002d0c <ShowAll+0x330>)
 8002cd6:	f000 f9c3 	bl	8003060 <USBSendString>
      USBSendString(buffer);
      //}

//      HAL_Delay(1); // don't butcher our buffer before we're done with it
    }
}
 8002cda:	e0b4      	b.n	8002e46 <ShowAll+0x46a>
 8002cdc:	08014544 	.word	0x08014544
 8002ce0:	08014548 	.word	0x08014548
 8002ce4:	0801454c 	.word	0x0801454c
 8002ce8:	08014550 	.word	0x08014550
 8002cec:	08014614 	.word	0x08014614
 8002cf0:	08014620 	.word	0x08014620
 8002cf4:	0801462c 	.word	0x0801462c
 8002cf8:	08014634 	.word	0x08014634
 8002cfc:	08014644 	.word	0x08014644
 8002d00:	08014650 	.word	0x08014650
 8002d04:	0801465c 	.word	0x0801465c
 8002d08:	08014660 	.word	0x08014660
 8002d0c:	20000308 	.word	0x20000308
 8002d10:	08014698 	.word	0x08014698
 8002d14:	080146c8 	.word	0x080146c8
 8002d18:	080146fc 	.word	0x080146fc
 8002d1c:	42c80000 	.word	0x42c80000
        ShowRawHeader();
 8002d20:	f000 f89a 	bl	8002e58 <ShowRawHeader>
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	781b      	ldrb	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d28:	61fb      	str	r3, [r7, #28]
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002d30:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fc28 	bl	8000588 <__aeabi_f2d>
 8002d38:	4680      	mov	r8, r0
 8002d3a:	4689      	mov	r9, r1
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002d42:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fd fc1f 	bl	8000588 <__aeabi_f2d>
 8002d4a:	4682      	mov	sl, r0
 8002d4c:	468b      	mov	fp, r1
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002d54:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fc16 	bl	8000588 <__aeabi_f2d>
 8002d5c:	e9c7 0104 	strd	r0, r1, [r7, #16]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002d66:	edd3 7a00 	vldr	s15, [r3]
 8002d6a:	ed1f 7a14 	vldr	s14, [pc, #-80]	; 8002d1c <ShowAll+0x340>
 8002d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d72:	ee17 0a90 	vmov	r0, s15
 8002d76:	f7fd fc07 	bl	8000588 <__aeabi_f2d>
 8002d7a:	e9c7 0102 	strd	r0, r1, [r7, #8]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 8002d1c <ShowAll+0x340>
 8002d8c:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002d90:	ee17 0a90 	vmov	r0, s15
 8002d94:	f7fd fbf8 	bl	8000588 <__aeabi_f2d>
 8002d98:	e9c7 0100 	strd	r0, r1, [r7]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8002d1c <ShowAll+0x340>
 8002daa:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002dae:	ee17 0a90 	vmov	r0, s15
 8002db2:	f7fd fbe9 	bl	8000588 <__aeabi_f2d>
 8002db6:	4604      	mov	r4, r0
 8002db8:	460d      	mov	r5, r1
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002dc0:	edd3 7a00 	vldr	s15, [r3]
 8002dc4:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 8002d1c <ShowAll+0x340>
 8002dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002dcc:	ee17 0a90 	vmov	r0, s15
 8002dd0:	f7fd fbda 	bl	8000588 <__aeabi_f2d>
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	f893 365d 	ldrb.w	r3, [r3, #1629]	; 0x65d
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002dda:	461e      	mov	r6, r3
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	f8b3 365e 	ldrh.w	r3, [r3, #1630]	; 0x65e
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002de2:	461a      	mov	r2, r3
 8002de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002de8:	9315      	str	r3, [sp, #84]	; 0x54
 8002dea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002dee:	9314      	str	r3, [sp, #80]	; 0x50
 8002df0:	9213      	str	r2, [sp, #76]	; 0x4c
 8002df2:	9612      	str	r6, [sp, #72]	; 0x48
 8002df4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002df8:	9311      	str	r3, [sp, #68]	; 0x44
 8002dfa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002dfe:	9310      	str	r3, [sp, #64]	; 0x40
 8002e00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e04:	930f      	str	r3, [sp, #60]	; 0x3c
 8002e06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e0a:	930e      	str	r3, [sp, #56]	; 0x38
 8002e0c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8002e10:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002e14:	ed97 7b00 	vldr	d7, [r7]
 8002e18:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002e1c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002e20:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002e24:	ed97 7b04 	vldr	d7, [r7, #16]
 8002e28:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002e2c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002e30:	e9cd 8900 	strd	r8, r9, [sp]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	4a06      	ldr	r2, [pc, #24]	; (8002e50 <ShowAll+0x474>)
 8002e38:	21c8      	movs	r1, #200	; 0xc8
 8002e3a:	4806      	ldr	r0, [pc, #24]	; (8002e54 <ShowAll+0x478>)
 8002e3c:	f00c fc6e 	bl	800f71c <sniprintf>
      USBSendString(buffer);
 8002e40:	4804      	ldr	r0, [pc, #16]	; (8002e54 <ShowAll+0x478>)
 8002e42:	f000 f90d 	bl	8003060 <USBSendString>
}
 8002e46:	bf00      	nop
 8002e48:	3784      	adds	r7, #132	; 0x84
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e50:	08014724 	.word	0x08014724
 8002e54:	20000308 	.word	0x20000308

08002e58 <ShowRawHeader>:


//Prints the header for the raw data
void ShowRawHeader(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  static char buffer[250];
  snprintf(buffer, 200,  "Chan\t  kp\t  kd\t  ki\t    ep\t    ed\t    ei\t  effort temp\t         average          target        i2c\thist\tfreq\tenabled\t       sensor\n");
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <ShowRawHeader+0x18>)
 8002e5e:	21c8      	movs	r1, #200	; 0xc8
 8002e60:	4804      	ldr	r0, [pc, #16]	; (8002e74 <ShowRawHeader+0x1c>)
 8002e62:	f00c fc5b 	bl	800f71c <sniprintf>
  USBSendString(buffer);
 8002e66:	4803      	ldr	r0, [pc, #12]	; (8002e74 <ShowRawHeader+0x1c>)
 8002e68:	f000 f8fa 	bl	8003060 <USBSendString>
//  HAL_Delay(1); // don't butcher our buffer before we're done with it
}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	08014774 	.word	0x08014774
 8002e74:	20000404 	.word	0x20000404

08002e78 <FormatTemperature>:


//Formats the Float to fit into the Temperature Display
void FormatTemperature(char* buffer, double temp)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	ed87 0b00 	vstr	d0, [r7]
  if (temp > -100)
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <FormatTemperature+0x48>)
 8002e8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e8e:	f7fd fe63 	bl	8000b58 <__aeabi_dcmpgt>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d009      	beq.n	8002eac <FormatTemperature+0x34>
    snprintf(buffer, 10, "% 7.3fC", temp);
 8002e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e9c:	e9cd 2300 	strd	r2, r3, [sp]
 8002ea0:	4a08      	ldr	r2, [pc, #32]	; (8002ec4 <FormatTemperature+0x4c>)
 8002ea2:	210a      	movs	r1, #10
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f00c fc39 	bl	800f71c <sniprintf>
  else
    snprintf(buffer, 10, "  error ");
}
 8002eaa:	e004      	b.n	8002eb6 <FormatTemperature+0x3e>
    snprintf(buffer, 10, "  error ");
 8002eac:	4a06      	ldr	r2, [pc, #24]	; (8002ec8 <FormatTemperature+0x50>)
 8002eae:	210a      	movs	r1, #10
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f00c fc33 	bl	800f71c <sniprintf>
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	c0590000 	.word	0xc0590000
 8002ec4:	080147f8 	.word	0x080147f8
 8002ec8:	08014800 	.word	0x08014800

08002ecc <Controller_InitStruct>:
#include "Controller.h"




void Controller_InitStruct(struct sController* s, struct sTMP117 *t,uint8_t heater){
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002ed8:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002edc:	6018      	str	r0, [r3, #0]
 8002ede:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002ee2:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8002ee6:	6019      	str	r1, [r3, #0]
 8002ee8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002eec:	f2a3 4339 	subw	r3, r3, #1081	; 0x439
 8002ef0:	701a      	strb	r2, [r3, #0]
  struct sPID PID;
  PID_InitStruct(&PID);
 8002ef2:	f107 0310 	add.w	r3, r7, #16
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe faba 	bl	8001470 <PID_InitStruct>

  s->Heater = heater;
 8002efc:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002f00:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002f0a:	f2a2 4239 	subw	r2, r2, #1081	; 0x439
 8002f0e:	7812      	ldrb	r2, [r2, #0]
 8002f10:	701a      	strb	r2, [r3, #0]
  s->Sensor = *t;
 8002f12:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002f16:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002f20:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	3308      	adds	r3, #8
 8002f28:	4611      	mov	r1, r2
 8002f2a:	f44f 720a 	mov.w	r2, #552	; 0x228
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f00b fcb6 	bl	800e8a0 <memcpy>
  s->PID = PID;
 8002f34:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002f38:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002f42:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8002f46:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8002f50:	4618      	mov	r0, r3
 8002f52:	f00b fca5 	bl	800e8a0 <memcpy>
}
 8002f56:	bf00      	nop
 8002f58:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <Controller_SetHeater>:

// this doesn't sit in the struct because we want something global that the interrupt can call
//This Has been Edited so that it can be used in the TCB
void Controller_SetHeater(uint8_t heater, bool state)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	460a      	mov	r2, r1
 8002f6a:	71fb      	strb	r3, [r7, #7]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	71bb      	strb	r3, [r7, #6]
  //For the TCB
  uint16_t Pin;
  GPIO_TypeDef* Port;
  Port = GPIOC;
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <Controller_SetHeater+0x40>)
 8002f72:	60fb      	str	r3, [r7, #12]
  Pin = GPIO_PIN_5;
 8002f74:	2320      	movs	r3, #32
 8002f76:	817b      	strh	r3, [r7, #10]
  
  if (state)
 8002f78:	79bb      	ldrb	r3, [r7, #6]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d006      	beq.n	8002f8c <Controller_SetHeater+0x2c>
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 8002f7e:	897b      	ldrh	r3, [r7, #10]
 8002f80:	2201      	movs	r2, #1
 8002f82:	4619      	mov	r1, r3
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f001 fd4d 	bl	8004a24 <HAL_GPIO_WritePin>
  else
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);

}
 8002f8a:	e005      	b.n	8002f98 <Controller_SetHeater+0x38>
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 8002f8c:	897b      	ldrh	r3, [r7, #10]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	4619      	mov	r1, r3
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f001 fd46 	bl	8004a24 <HAL_GPIO_WritePin>
}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40020800 	.word	0x40020800

08002fa4 <Controller_WipeConfig>:

void Controller_WipeConfig(struct sController* Controller)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  Controller_InitStruct(Controller, &Controller->Sensor, 0);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3308      	adds	r3, #8
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff89 	bl	8002ecc <Controller_InitStruct>
  printf("Cannot Save No EEPROM");
 8002fba:	4803      	ldr	r0, [pc, #12]	; (8002fc8 <Controller_WipeConfig+0x24>)
 8002fbc:	f00c fb1a 	bl	800f5f4 <iprintf>
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	0801480c 	.word	0x0801480c

08002fcc <Controller_Step>:



void Controller_Step(struct sController* Controller)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint8_t i = Controller->Heater - 1;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	75fb      	strb	r3, [r7, #23]
  float temp, eff;
  if (Controller->PID.Config.Enabled == false)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8002fe2:	f083 0301 	eor.w	r3, r3, #1
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <Controller_Step+0x28>
  {
    HeaterDwell = 100; // duty cycle of 0, disabled
 8002fec:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <Controller_Step+0x8c>)
 8002fee:	2264      	movs	r2, #100	; 0x64
 8002ff0:	701a      	strb	r2, [r3, #0]
    return;
 8002ff2:	e02d      	b.n	8003050 <Controller_Step+0x84>
  }
  if (Controller->Sensor.State != TMP117_STATE_VALIDTEMP)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d003      	beq.n	8003006 <Controller_Step+0x3a>
  {
    HeaterDwell = 100; // duty cycle of 0, disabled
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <Controller_Step+0x8c>)
 8003000:	2264      	movs	r2, #100	; 0x64
 8003002:	701a      	strb	r2, [r3, #0]
    return;
 8003004:	e024      	b.n	8003050 <Controller_Step+0x84>
  }

  temp = Controller->Sensor.Average;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 800300c:	4610      	mov	r0, r2
 800300e:	4619      	mov	r1, r3
 8003010:	f7fd fe0a 	bl	8000c28 <__aeabi_d2f>
 8003014:	4603      	mov	r3, r0
 8003016:	613b      	str	r3, [r7, #16]
  eff = PID_CalculateEffort(&Controller->PID, temp);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800301e:	ed97 0a04 	vldr	s0, [r7, #16]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fb62 	bl	80016ec <PID_CalculateEffort>
 8003028:	ed87 0a03 	vstr	s0, [r7, #12]
  // dwell is a value between 0 and 100 which tells the heater controller how many
  // heater ticks the heater spends off. A complete heater cycle is 200 ticks.
  // For a 40% duty cycle (effort), dwell becomes 60, making the heater off for 60,
  // on for 80, and off for another 60. This weird design causes heaters with
  // different effort values to turn on and off at different times.
  HeaterDwell = 100 * (1 - eff);
 800302c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003030:	edd7 7a03 	vldr	s15, [r7, #12]
 8003034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003038:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800305c <Controller_Step+0x90>
 800303c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003044:	edc7 7a00 	vstr	s15, [r7]
 8003048:	783b      	ldrb	r3, [r7, #0]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	4b02      	ldr	r3, [pc, #8]	; (8003058 <Controller_Step+0x8c>)
 800304e:	701a      	strb	r2, [r3, #0]
}
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000010 	.word	0x20000010
 800305c:	42c80000 	.word	0x42c80000

08003060 <USBSendString>:
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e013      	b.n	8003096 <USBSendString+0x36>
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fd f8c8 	bl	8000204 <strlen>
 8003074:	4603      	mov	r3, r0
 8003076:	b29b      	uxth	r3, r3
 8003078:	4619      	mov	r1, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f00a ff8a 	bl	800df94 <CDC_Transmit_FS>
 8003080:	4603      	mov	r3, r0
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <USBSendString+0x3e>
 800308a:	2001      	movs	r0, #1
 800308c:	f001 f9b8 	bl	8004400 <HAL_Delay>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	3301      	adds	r3, #1
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2b31      	cmp	r3, #49	; 0x31
 800309a:	dde8      	ble.n	800306e <USBSendString+0xe>
 800309c:	e000      	b.n	80030a0 <USBSendString+0x40>
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <InitDWTTimer>:
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <InitDWTTimer+0x2c>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4a08      	ldr	r2, [pc, #32]	; (80030d4 <InitDWTTimer+0x2c>)
 80030b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b6:	60d3      	str	r3, [r2, #12]
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <InitDWTTimer+0x30>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <InitDWTTimer+0x30>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a05      	ldr	r2, [pc, #20]	; (80030d8 <InitDWTTimer+0x30>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000edf0 	.word	0xe000edf0
 80030d8:	e0001000 	.word	0xe0001000

080030dc <Delay_us>:
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <Delay_us+0x40>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <Delay_us+0x44>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0c9b      	lsrs	r3, r3, #18
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <Delay_us+0x48>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <Delay_us+0x48>)
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1ad2      	subs	r2, r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	429a      	cmp	r2, r3
 800310a:	d3f8      	bcc.n	80030fe <Delay_us+0x22>
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000014 	.word	0x20000014
 8003120:	431bde83 	.word	0x431bde83
 8003124:	e0001000 	.word	0xe0001000

08003128 <replacestr>:
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800313c:	f00c fbb3 	bl	800f8a6 <strstr>
 8003140:	6238      	str	r0, [r7, #32]
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d023      	beq.n	8003190 <replacestr+0x68>
 8003148:	68b8      	ldr	r0, [r7, #8]
 800314a:	f7fd f85b 	bl	8000204 <strlen>
 800314e:	4603      	mov	r3, r0
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd f856 	bl	8000204 <strlen>
 8003158:	4603      	mov	r3, r0
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	6a3a      	ldr	r2, [r7, #32]
 8003160:	4413      	add	r3, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd f84e 	bl	8000204 <strlen>
 8003168:	4603      	mov	r3, r0
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	6a3a      	ldr	r2, [r7, #32]
 8003170:	18d0      	adds	r0, r2, r3
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	6a3a      	ldr	r2, [r7, #32]
 8003176:	18d1      	adds	r1, r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	3301      	adds	r3, #1
 800317c:	461a      	mov	r2, r3
 800317e:	f00b fb9d 	bl	800e8bc <memmove>
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	461a      	mov	r2, r3
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	6a38      	ldr	r0, [r7, #32]
 800318a:	f00b fb89 	bl	800e8a0 <memcpy>
 800318e:	e000      	b.n	8003192 <replacestr+0x6a>
 8003190:	bf00      	nop
 8003192:	3728      	adds	r7, #40	; 0x28
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80031a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80031a4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80031b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80031b4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80031b8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00b      	beq.n	80031d8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80031c0:	e000      	b.n	80031c4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80031c2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80031c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f9      	beq.n	80031c2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80031ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80031d8:	687b      	ldr	r3, [r7, #4]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//This Intterupot is called every .25ms Will Toggle the State of the Dac Channels
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a6c      	ldr	r2, [pc, #432]	; (80033a4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d149      	bne.n	800328c <HAL_TIM_PeriodElapsedCallback+0xa4>
  {
    //Syncronous Update of the DACs
    for (int i = 0; i < 6; i++){
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e041      	b.n	8003282 <HAL_TIM_PeriodElapsedCallback+0x9a>
      if(TCB.DAC8718.DAC_Channels[i].enabled){
 80031fe:	4a6a      	ldr	r2, [pc, #424]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	33ce      	adds	r3, #206	; 0xce
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	7a9b      	ldrb	r3, [r3, #10]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d036      	beq.n	800327c <HAL_TIM_PeriodElapsedCallback+0x94>
        if(TCB.DAC8718.DAC_Channels[i].state_high){
 800320e:	4a66      	ldr	r2, [pc, #408]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	33ce      	adds	r3, #206	; 0xce
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	7a5b      	ldrb	r3, [r3, #9]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d017      	beq.n	800324e <HAL_TIM_PeriodElapsedCallback+0x66>

          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].lower_bound);
 800321e:	4a62      	ldr	r2, [pc, #392]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	33ce      	adds	r3, #206	; 0xce
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	7a19      	ldrb	r1, [r3, #8]
 800322a:	4a5f      	ldr	r2, [pc, #380]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	33ce      	adds	r3, #206	; 0xce
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	88db      	ldrh	r3, [r3, #6]
 8003236:	461a      	mov	r2, r3
 8003238:	485c      	ldr	r0, [pc, #368]	; (80033ac <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800323a:	f7fd fff7 	bl	800122c <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = false;
 800323e:	4a5a      	ldr	r2, [pc, #360]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	33ce      	adds	r3, #206	; 0xce
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	2200      	movs	r2, #0
 800324a:	725a      	strb	r2, [r3, #9]
 800324c:	e016      	b.n	800327c <HAL_TIM_PeriodElapsedCallback+0x94>
        }else{
          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].upper_bound);
 800324e:	4a56      	ldr	r2, [pc, #344]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	33ce      	adds	r3, #206	; 0xce
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4413      	add	r3, r2
 8003258:	7a19      	ldrb	r1, [r3, #8]
 800325a:	4a53      	ldr	r2, [pc, #332]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	33ce      	adds	r3, #206	; 0xce
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	889b      	ldrh	r3, [r3, #4]
 8003266:	461a      	mov	r2, r3
 8003268:	4850      	ldr	r0, [pc, #320]	; (80033ac <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800326a:	f7fd ffdf 	bl	800122c <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = true;
 800326e:	4a4e      	ldr	r2, [pc, #312]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	33ce      	adds	r3, #206	; 0xce
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	2201      	movs	r2, #1
 800327a:	725a      	strb	r2, [r3, #9]
    for (int i = 0; i < 6; i++){
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3301      	adds	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b05      	cmp	r3, #5
 8003286:	ddba      	ble.n	80031fe <HAL_TIM_PeriodElapsedCallback+0x16>

        }
      }
    }//End For
    Syncronous_Update();
 8003288:	f7fe f86f 	bl	800136a <Syncronous_Update>
  }//End Timer 2


//--------------------This is from Damons Code-----------------------
  uint8_t i;
  if (htim == &htim6)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a48      	ldr	r2, [pc, #288]	; (80033b0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d123      	bne.n	80032dc <HAL_TIM_PeriodElapsedCallback+0xf4>
  {
    HeaterSubtick += HeaterFrequency;
 8003294:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	b29a      	uxth	r2, r3
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80032a6:	801a      	strh	r2, [r3, #0]
    if (HeaterSubtick > 1000){
 80032a8:	4b43      	ldr	r3, [pc, #268]	; (80033b8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b2:	d913      	bls.n	80032dc <HAL_TIM_PeriodElapsedCallback+0xf4>
        HeaterTick = (HeaterTick + 1) % 200;
 80032b4:	4b41      	ldr	r3, [pc, #260]	; (80033bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	4a40      	ldr	r2, [pc, #256]	; (80033c0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80032be:	fb82 1203 	smull	r1, r2, r2, r3
 80032c2:	1191      	asrs	r1, r2, #6
 80032c4:	17da      	asrs	r2, r3, #31
 80032c6:	1a8a      	subs	r2, r1, r2
 80032c8:	21c8      	movs	r1, #200	; 0xc8
 80032ca:	fb01 f202 	mul.w	r2, r1, r2
 80032ce:	1a9a      	subs	r2, r3, r2
 80032d0:	b292      	uxth	r2, r2
 80032d2:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80032d4:	801a      	strh	r2, [r3, #0]
        HeaterSubtick = 0;
 80032d6:	4b38      	ldr	r3, [pc, #224]	; (80033b8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80032d8:	2200      	movs	r2, #0
 80032da:	801a      	strh	r2, [r3, #0]
    }
  }//End Timer 3

  if ((HeaterTick > HeaterDwell)&& (HeaterTick < (200 - HeaterDwell))){
 80032dc:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	4b35      	ldr	r3, [pc, #212]	; (80033bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d210      	bcs.n	8003310 <HAL_TIM_PeriodElapsedCallback+0x128>
 80032ee:	4b33      	ldr	r3, [pc, #204]	; (80033bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b33      	ldr	r3, [pc, #204]	; (80033c4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8003300:	429a      	cmp	r2, r3
 8003302:	da05      	bge.n	8003310 <HAL_TIM_PeriodElapsedCallback+0x128>
        Controller_SetHeater(i, true);
 8003304:	7afb      	ldrb	r3, [r7, #11]
 8003306:	2101      	movs	r1, #1
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fe29 	bl	8002f60 <Controller_SetHeater>
 800330e:	e004      	b.n	800331a <HAL_TIM_PeriodElapsedCallback+0x132>
  }else{
        Controller_SetHeater(i, false);
 8003310:	7afb      	ldrb	r3, [r7, #11]
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fe23 	bl	8002f60 <Controller_SetHeater>
  }//Dictates If heater is on or off

  //Removed ADC stuff

  if (htim == &htim4)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a2a      	ldr	r2, [pc, #168]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d13c      	bne.n	800339c <HAL_TIM_PeriodElapsedCallback+0x1b4>
  {
    ClockTick = (ClockTick + 1) % 100;
 8003322:	4b2a      	ldr	r3, [pc, #168]	; (80033cc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	3301      	adds	r3, #1
 800332a:	4a25      	ldr	r2, [pc, #148]	; (80033c0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800332c:	fb82 1203 	smull	r1, r2, r2, r3
 8003330:	1151      	asrs	r1, r2, #5
 8003332:	17da      	asrs	r2, r3, #31
 8003334:	1a8a      	subs	r2, r1, r2
 8003336:	2164      	movs	r1, #100	; 0x64
 8003338:	fb01 f202 	mul.w	r2, r1, r2
 800333c:	1a9a      	subs	r2, r3, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	4b22      	ldr	r3, [pc, #136]	; (80033cc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003342:	701a      	strb	r2, [r3, #0]
    // this should be after the ClockTick increment
    if (ClockTick == 0)
 8003344:	4b21      	ldr	r3, [pc, #132]	; (80033cc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_TIM_PeriodElapsedCallback+0x174>
      ElapsedSeconds++;
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	3301      	adds	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800335a:	801a      	strh	r2, [r3, #0]

    if (++Ticks_TMP117 >= 13)
 800335c:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	3301      	adds	r3, #1
 8003364:	b2db      	uxtb	r3, r3
 8003366:	4a1b      	ldr	r2, [pc, #108]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8003368:	4619      	mov	r1, r3
 800336a:	7011      	strb	r1, [r2, #0]
 800336c:	2b0c      	cmp	r3, #12
 800336e:	d905      	bls.n	800337c <HAL_TIM_PeriodElapsedCallback+0x194>
    {
      Ticks_TMP117 = 0;
 8003370:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
      DoSampleTMP117 = true;
 8003376:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
    }

    if (++Ticks_CalculatePWM >= 100)
 800337c:	4b17      	ldr	r3, [pc, #92]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	3301      	adds	r3, #1
 8003384:	b2db      	uxtb	r3, r3
 8003386:	4a15      	ldr	r2, [pc, #84]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003388:	4619      	mov	r1, r3
 800338a:	7011      	strb	r1, [r2, #0]
 800338c:	2b63      	cmp	r3, #99	; 0x63
 800338e:	d905      	bls.n	800339c <HAL_TIM_PeriodElapsedCallback+0x1b4>
    {
      Ticks_CalculatePWM = 0;
 8003390:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
      DoCalculatePWM = true;
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
    }

  }
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	200005ac 	.word	0x200005ac
 80033a8:	20000690 	.word	0x20000690
 80033ac:	20000cf0 	.word	0x20000cf0
 80033b0:	2000063c 	.word	0x2000063c
 80033b4:	2000000e 	.word	0x2000000e
 80033b8:	20000688 	.word	0x20000688
 80033bc:	20000686 	.word	0x20000686
 80033c0:	51eb851f 	.word	0x51eb851f
 80033c4:	20000010 	.word	0x20000010
 80033c8:	200005f4 	.word	0x200005f4
 80033cc:	2000068c 	.word	0x2000068c
 80033d0:	2000068e 	.word	0x2000068e
 80033d4:	2000068a 	.word	0x2000068a
 80033d8:	20000684 	.word	0x20000684
 80033dc:	2000068b 	.word	0x2000068b
 80033e0:	20000685 	.word	0x20000685

080033e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08e      	sub	sp, #56	; 0x38
 80033e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033ea:	f000 ff97 	bl	800431c <HAL_Init>

  /* USER CODE BEGIN Init */
  
  StringFIFOInit(&USBFIFO);
 80033ee:	4850      	ldr	r0, [pc, #320]	; (8003530 <main+0x14c>)
 80033f0:	f000 fd60 	bl	8003eb4 <StringFIFOInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033f4:	f000 f8b6 	bl	8003564 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */


  InitDWTTimer(); // we need this for delay_us
 80033f8:	f7ff fe56 	bl	80030a8 <InitDWTTimer>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033fc:	f000 fa62 	bl	80038c4 <MX_GPIO_Init>
  MX_SPI4_Init();
 8003400:	f000 f95a 	bl	80036b8 <MX_SPI4_Init>
  MX_I2C1_Init();
 8003404:	f000 f918 	bl	8003638 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003408:	f000 f98c 	bl	8003724 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800340c:	f00a fcf8 	bl	800de00 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8003410:	f000 f9d4 	bl	80037bc <MX_TIM4_Init>
  MX_TIM6_Init();
 8003414:	f000 fa20 	bl	8003858 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  TCB_InitStruct(&TCB, &hi2c1, &hspi4);
 8003418:	4a46      	ldr	r2, [pc, #280]	; (8003534 <main+0x150>)
 800341a:	4947      	ldr	r1, [pc, #284]	; (8003538 <main+0x154>)
 800341c:	4847      	ldr	r0, [pc, #284]	; (800353c <main+0x158>)
 800341e:	f7fe fba1 	bl	8001b64 <TCB_InitStruct>
  for (int i = 0; i < 6; i++){
 8003422:	2300      	movs	r3, #0
 8003424:	637b      	str	r3, [r7, #52]	; 0x34
 8003426:	e029      	b.n	800347c <main+0x98>
    TCB.DAC8718.DAC_Channels[i].enabled = true;
 8003428:	4a44      	ldr	r2, [pc, #272]	; (800353c <main+0x158>)
 800342a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342c:	33ce      	adds	r3, #206	; 0xce
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	2201      	movs	r2, #1
 8003434:	729a      	strb	r2, [r3, #10]
    TCB.DAC8718.DAC_Channels[i].DAC_number = i;
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	b2d9      	uxtb	r1, r3
 800343a:	4a40      	ldr	r2, [pc, #256]	; (800353c <main+0x158>)
 800343c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343e:	33ce      	adds	r3, #206	; 0xce
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	460a      	mov	r2, r1
 8003446:	721a      	strb	r2, [r3, #8]
    TCB.DAC8718.DAC_Channels[i].lower_bound = 0x7FFF;
 8003448:	4a3c      	ldr	r2, [pc, #240]	; (800353c <main+0x158>)
 800344a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344c:	33ce      	adds	r3, #206	; 0xce
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003456:	80da      	strh	r2, [r3, #6]
    TCB.DAC8718.DAC_Channels[i].upper_bound = 0x7FFF;
 8003458:	4a38      	ldr	r2, [pc, #224]	; (800353c <main+0x158>)
 800345a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345c:	33ce      	adds	r3, #206	; 0xce
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003466:	809a      	strh	r2, [r3, #4]
    TCB.DAC8718.DAC_Channels[i].state_high = false;
 8003468:	4a34      	ldr	r2, [pc, #208]	; (800353c <main+0x158>)
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	33ce      	adds	r3, #206	; 0xce
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	2200      	movs	r2, #0
 8003474:	725a      	strb	r2, [r3, #9]
  for (int i = 0; i < 6; i++){
 8003476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003478:	3301      	adds	r3, #1
 800347a:	637b      	str	r3, [r7, #52]	; 0x34
 800347c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347e:	2b05      	cmp	r3, #5
 8003480:	ddd2      	ble.n	8003428 <main+0x44>
  }
  HAL_Delay(500);
 8003482:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003486:	f000 ffbb 	bl	8004400 <HAL_Delay>
  printf("-- REBOOT --\n");
 800348a:	482d      	ldr	r0, [pc, #180]	; (8003540 <main+0x15c>)
 800348c:	f00c f938 	bl	800f700 <puts>

// if you rearrange the PID.CONFIG struct, you should force rewriting defaults
  // over the EEPROM on next startup. This will *probably* be caught by checking
  // the address of the last controller rather than the first.
  //Welcome to OOP hell
  if (!(TCB.Controller.Sensor.Address & 0b1001000)) // if the stored address is not valid, we probably have invalid data.
 8003490:	4b2a      	ldr	r3, [pc, #168]	; (800353c <main+0x158>)
 8003492:	7a1b      	ldrb	r3, [r3, #8]
 8003494:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <main+0xbe>
  {
    printf("The configuration is invalid. Rewriting defaults.");
 800349c:	4829      	ldr	r0, [pc, #164]	; (8003544 <main+0x160>)
 800349e:	f00c f8a9 	bl	800f5f4 <iprintf>
  }

  TMP117_Configure(&TCB.Controller.Sensor);
 80034a2:	4829      	ldr	r0, [pc, #164]	; (8003548 <main+0x164>)
 80034a4:	f7fe fa2c 	bl	8001900 <TMP117_Configure>
  HAL_TIM_Base_Start_IT(&htim2); //DAC Timer
 80034a8:	4828      	ldr	r0, [pc, #160]	; (800354c <main+0x168>)
 80034aa:	f006 fc61 	bl	8009d70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6); // Heater Timer
 80034ae:	4828      	ldr	r0, [pc, #160]	; (8003550 <main+0x16c>)
 80034b0:	f006 fc5e 	bl	8009d70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); // Main Timer
 80034b4:	4827      	ldr	r0, [pc, #156]	; (8003554 <main+0x170>)
 80034b6:	f006 fc5b 	bl	8009d70 <HAL_TIM_Base_Start_IT>



    //-------- Damons Code ----------------------
    // we keep a global copy of this for the timer interrupt
    HeaterFrequency = TCB.Controller.PID.Config.Frequency;
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <main+0x158>)
 80034bc:	f8b3 265e 	ldrh.w	r2, [r3, #1630]	; 0x65e
 80034c0:	4b25      	ldr	r3, [pc, #148]	; (8003558 <main+0x174>)
 80034c2:	801a      	strh	r2, [r3, #0]

    if (TCB.Controller.Sensor.Errors > 10)
 80034c4:	4b1d      	ldr	r3, [pc, #116]	; (800353c <main+0x158>)
 80034c6:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 80034ca:	2b0a      	cmp	r3, #10
 80034cc:	d901      	bls.n	80034d2 <main+0xee>
      MX_I2C1_Init();
 80034ce:	f000 f8b3 	bl	8003638 <MX_I2C1_Init>

    if (DoSampleTMP117)
 80034d2:	4b22      	ldr	r3, [pc, #136]	; (800355c <main+0x178>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00e      	beq.n	80034fa <main+0x116>
    {
      DoSampleTMP117 = false;
 80034dc:	4b1f      	ldr	r3, [pc, #124]	; (800355c <main+0x178>)
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
      if (TCB.Controller.Sensor.Configured){
 80034e2:	4b16      	ldr	r3, [pc, #88]	; (800353c <main+0x158>)
 80034e4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <main+0x110>
          TMP117_GetTemperature(&TCB.Controller.Sensor);
 80034ec:	4816      	ldr	r0, [pc, #88]	; (8003548 <main+0x164>)
 80034ee:	f7fe fa4d 	bl	800198c <TMP117_GetTemperature>
 80034f2:	e002      	b.n	80034fa <main+0x116>
      }else{
          TMP117_Configure(&TCB.Controller.Sensor);
 80034f4:	4814      	ldr	r0, [pc, #80]	; (8003548 <main+0x164>)
 80034f6:	f7fe fa03 	bl	8001900 <TMP117_Configure>
      }
    }


    if (DoCalculatePWM)
 80034fa:	4b19      	ldr	r3, [pc, #100]	; (8003560 <main+0x17c>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <main+0x12c>
    {
      DoCalculatePWM = false;
 8003504:	4b16      	ldr	r3, [pc, #88]	; (8003560 <main+0x17c>)
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
      Controller_Step(&TCB.Controller);
 800350a:	480c      	ldr	r0, [pc, #48]	; (800353c <main+0x158>)
 800350c:	f7ff fd5e 	bl	8002fcc <Controller_Step>
    }

    if (StringFIFORemove(&USBFIFO, buffer) == 0)
 8003510:	463b      	mov	r3, r7
 8003512:	4619      	mov	r1, r3
 8003514:	4806      	ldr	r0, [pc, #24]	; (8003530 <main+0x14c>)
 8003516:	f000 fd61 	bl	8003fdc <StringFIFORemove>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1cc      	bne.n	80034ba <main+0xd6>
    {
      ProcessUserInput(&TCB.Controller, buffer, &TCB);
 8003520:	463b      	mov	r3, r7
 8003522:	4a06      	ldr	r2, [pc, #24]	; (800353c <main+0x158>)
 8003524:	4619      	mov	r1, r3
 8003526:	4805      	ldr	r0, [pc, #20]	; (800353c <main+0x158>)
 8003528:	f7fe fb64 	bl	8001bf4 <ProcessUserInput>
    HeaterFrequency = TCB.Controller.PID.Config.Frequency;
 800352c:	e7c5      	b.n	80034ba <main+0xd6>
 800352e:	bf00      	nop
 8003530:	20001c60 	.word	0x20001c60
 8003534:	20000554 	.word	0x20000554
 8003538:	20000500 	.word	0x20000500
 800353c:	20000690 	.word	0x20000690
 8003540:	08014824 	.word	0x08014824
 8003544:	08014834 	.word	0x08014834
 8003548:	20000698 	.word	0x20000698
 800354c:	200005ac 	.word	0x200005ac
 8003550:	2000063c 	.word	0x2000063c
 8003554:	200005f4 	.word	0x200005f4
 8003558:	2000000e 	.word	0x2000000e
 800355c:	20000684 	.word	0x20000684
 8003560:	20000685 	.word	0x20000685

08003564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b094      	sub	sp, #80	; 0x50
 8003568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800356a:	f107 0320 	add.w	r3, r7, #32
 800356e:	2230      	movs	r2, #48	; 0x30
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f00b f9bc 	bl	800e8f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003578:	f107 030c 	add.w	r3, r7, #12
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	4b28      	ldr	r3, [pc, #160]	; (8003630 <SystemClock_Config+0xcc>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	4a27      	ldr	r2, [pc, #156]	; (8003630 <SystemClock_Config+0xcc>)
 8003592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003596:	6413      	str	r3, [r2, #64]	; 0x40
 8003598:	4b25      	ldr	r3, [pc, #148]	; (8003630 <SystemClock_Config+0xcc>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035a4:	2300      	movs	r3, #0
 80035a6:	607b      	str	r3, [r7, #4]
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <SystemClock_Config+0xd0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a21      	ldr	r2, [pc, #132]	; (8003634 <SystemClock_Config+0xd0>)
 80035ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b1f      	ldr	r3, [pc, #124]	; (8003634 <SystemClock_Config+0xd0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035c0:	2301      	movs	r3, #1
 80035c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035ca:	2302      	movs	r3, #2
 80035cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80035d4:	2304      	movs	r3, #4
 80035d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80035d8:	23a8      	movs	r3, #168	; 0xa8
 80035da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035dc:	2302      	movs	r3, #2
 80035de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80035e0:	2307      	movs	r3, #7
 80035e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035e4:	f107 0320 	add.w	r3, r7, #32
 80035e8:	4618      	mov	r0, r3
 80035ea:	f005 f99d 	bl	8008928 <HAL_RCC_OscConfig>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80035f4:	f000 fab6 	bl	8003b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035f8:	230f      	movs	r3, #15
 80035fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035fc:	2302      	movs	r3, #2
 80035fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800360a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800360e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003610:	f107 030c 	add.w	r3, r7, #12
 8003614:	2105      	movs	r1, #5
 8003616:	4618      	mov	r0, r3
 8003618:	f005 fbfe 	bl	8008e18 <HAL_RCC_ClockConfig>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003622:	f000 fa9f 	bl	8003b64 <Error_Handler>
  }
}
 8003626:	bf00      	nop
 8003628:	3750      	adds	r7, #80	; 0x50
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
 8003634:	40007000 	.word	0x40007000

08003638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800363c:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <MX_I2C1_Init+0x74>)
 800363e:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <MX_I2C1_Init+0x78>)
 8003640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003642:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <MX_I2C1_Init+0x74>)
 8003644:	4a1b      	ldr	r2, [pc, #108]	; (80036b4 <MX_I2C1_Init+0x7c>)
 8003646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003648:	4b18      	ldr	r3, [pc, #96]	; (80036ac <MX_I2C1_Init+0x74>)
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800364e:	4b17      	ldr	r3, [pc, #92]	; (80036ac <MX_I2C1_Init+0x74>)
 8003650:	2200      	movs	r2, #0
 8003652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003654:	4b15      	ldr	r3, [pc, #84]	; (80036ac <MX_I2C1_Init+0x74>)
 8003656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800365a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800365c:	4b13      	ldr	r3, [pc, #76]	; (80036ac <MX_I2C1_Init+0x74>)
 800365e:	2200      	movs	r2, #0
 8003660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <MX_I2C1_Init+0x74>)
 8003664:	2200      	movs	r2, #0
 8003666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003668:	4b10      	ldr	r3, [pc, #64]	; (80036ac <MX_I2C1_Init+0x74>)
 800366a:	2200      	movs	r2, #0
 800366c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800366e:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <MX_I2C1_Init+0x74>)
 8003670:	2200      	movs	r2, #0
 8003672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003674:	480d      	ldr	r0, [pc, #52]	; (80036ac <MX_I2C1_Init+0x74>)
 8003676:	f001 f9ef 	bl	8004a58 <HAL_I2C_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003680:	f000 fa70 	bl	8003b64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003684:	2100      	movs	r1, #0
 8003686:	4809      	ldr	r0, [pc, #36]	; (80036ac <MX_I2C1_Init+0x74>)
 8003688:	f003 fe56 	bl	8007338 <HAL_I2CEx_ConfigAnalogFilter>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003692:	f000 fa67 	bl	8003b64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003696:	2100      	movs	r1, #0
 8003698:	4804      	ldr	r0, [pc, #16]	; (80036ac <MX_I2C1_Init+0x74>)
 800369a:	f003 fe89 	bl	80073b0 <HAL_I2CEx_ConfigDigitalFilter>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80036a4:	f000 fa5e 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036a8:	bf00      	nop
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000500 	.word	0x20000500
 80036b0:	40005400 	.word	0x40005400
 80036b4:	000186a0 	.word	0x000186a0

080036b8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <MX_SPI4_Init+0x64>)
 80036be:	4a18      	ldr	r2, [pc, #96]	; (8003720 <MX_SPI4_Init+0x68>)
 80036c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80036c2:	4b16      	ldr	r3, [pc, #88]	; (800371c <MX_SPI4_Init+0x64>)
 80036c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <MX_SPI4_Init+0x64>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <MX_SPI4_Init+0x64>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <MX_SPI4_Init+0x64>)
 80036d8:	2200      	movs	r2, #0
 80036da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <MX_SPI4_Init+0x64>)
 80036de:	2201      	movs	r2, #1
 80036e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80036e2:	4b0e      	ldr	r3, [pc, #56]	; (800371c <MX_SPI4_Init+0x64>)
 80036e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80036ea:	4b0c      	ldr	r3, [pc, #48]	; (800371c <MX_SPI4_Init+0x64>)
 80036ec:	2220      	movs	r2, #32
 80036ee:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <MX_SPI4_Init+0x64>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <MX_SPI4_Init+0x64>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036fc:	4b07      	ldr	r3, [pc, #28]	; (800371c <MX_SPI4_Init+0x64>)
 80036fe:	2200      	movs	r2, #0
 8003700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <MX_SPI4_Init+0x64>)
 8003704:	220a      	movs	r2, #10
 8003706:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003708:	4804      	ldr	r0, [pc, #16]	; (800371c <MX_SPI4_Init+0x64>)
 800370a:	f005 fd91 	bl	8009230 <HAL_SPI_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003714:	f000 fa26 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003718:	bf00      	nop
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000554 	.word	0x20000554
 8003720:	40013400 	.word	0x40013400

08003724 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800372a:	f107 0308 	add.w	r3, r7, #8
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	609a      	str	r2, [r3, #8]
 8003736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003738:	463b      	mov	r3, r7
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003740:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <MX_TIM2_Init+0x94>)
 8003742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003746:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420;
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <MX_TIM2_Init+0x94>)
 800374a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800374e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <MX_TIM2_Init+0x94>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8003756:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <MX_TIM2_Init+0x94>)
 8003758:	2232      	movs	r2, #50	; 0x32
 800375a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800375c:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <MX_TIM2_Init+0x94>)
 800375e:	2200      	movs	r2, #0
 8003760:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <MX_TIM2_Init+0x94>)
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003768:	4813      	ldr	r0, [pc, #76]	; (80037b8 <MX_TIM2_Init+0x94>)
 800376a:	f006 fab1 	bl	8009cd0 <HAL_TIM_Base_Init>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003774:	f000 f9f6 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800377c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800377e:	f107 0308 	add.w	r3, r7, #8
 8003782:	4619      	mov	r1, r3
 8003784:	480c      	ldr	r0, [pc, #48]	; (80037b8 <MX_TIM2_Init+0x94>)
 8003786:	f006 fc6b 	bl	800a060 <HAL_TIM_ConfigClockSource>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003790:	f000 f9e8 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003794:	2300      	movs	r3, #0
 8003796:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003798:	2300      	movs	r3, #0
 800379a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800379c:	463b      	mov	r3, r7
 800379e:	4619      	mov	r1, r3
 80037a0:	4805      	ldr	r0, [pc, #20]	; (80037b8 <MX_TIM2_Init+0x94>)
 80037a2:	f006 fe87 	bl	800a4b4 <HAL_TIMEx_MasterConfigSynchronization>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80037ac:	f000 f9da 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037b0:	bf00      	nop
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	200005ac 	.word	0x200005ac

080037bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037c2:	f107 0308 	add.w	r3, r7, #8
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	609a      	str	r2, [r3, #8]
 80037ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037d0:	463b      	mov	r3, r7
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80037d8:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <MX_TIM4_Init+0x94>)
 80037da:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <MX_TIM4_Init+0x98>)
 80037dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4200;
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <MX_TIM4_Init+0x94>)
 80037e0:	f241 0268 	movw	r2, #4200	; 0x1068
 80037e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e6:	4b1a      	ldr	r3, [pc, #104]	; (8003850 <MX_TIM4_Init+0x94>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80037ec:	4b18      	ldr	r3, [pc, #96]	; (8003850 <MX_TIM4_Init+0x94>)
 80037ee:	2264      	movs	r2, #100	; 0x64
 80037f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80037f2:	4b17      	ldr	r3, [pc, #92]	; (8003850 <MX_TIM4_Init+0x94>)
 80037f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <MX_TIM4_Init+0x94>)
 80037fc:	2280      	movs	r2, #128	; 0x80
 80037fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003800:	4813      	ldr	r0, [pc, #76]	; (8003850 <MX_TIM4_Init+0x94>)
 8003802:	f006 fa65 	bl	8009cd0 <HAL_TIM_Base_Init>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800380c:	f000 f9aa 	bl	8003b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003814:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003816:	f107 0308 	add.w	r3, r7, #8
 800381a:	4619      	mov	r1, r3
 800381c:	480c      	ldr	r0, [pc, #48]	; (8003850 <MX_TIM4_Init+0x94>)
 800381e:	f006 fc1f 	bl	800a060 <HAL_TIM_ConfigClockSource>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003828:	f000 f99c 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800382c:	2300      	movs	r3, #0
 800382e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003830:	2300      	movs	r3, #0
 8003832:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003834:	463b      	mov	r3, r7
 8003836:	4619      	mov	r1, r3
 8003838:	4805      	ldr	r0, [pc, #20]	; (8003850 <MX_TIM4_Init+0x94>)
 800383a:	f006 fe3b 	bl	800a4b4 <HAL_TIMEx_MasterConfigSynchronization>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003844:	f000 f98e 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003848:	bf00      	nop
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	200005f4 	.word	0x200005f4
 8003854:	40000800 	.word	0x40000800

08003858 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800385e:	463b      	mov	r3, r7
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <MX_TIM6_Init+0x64>)
 8003868:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <MX_TIM6_Init+0x68>)
 800386a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1680;
 800386c:	4b13      	ldr	r3, [pc, #76]	; (80038bc <MX_TIM6_Init+0x64>)
 800386e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8003872:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003874:	4b11      	ldr	r3, [pc, #68]	; (80038bc <MX_TIM6_Init+0x64>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <MX_TIM6_Init+0x64>)
 800387c:	2264      	movs	r2, #100	; 0x64
 800387e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003880:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <MX_TIM6_Init+0x64>)
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003886:	480d      	ldr	r0, [pc, #52]	; (80038bc <MX_TIM6_Init+0x64>)
 8003888:	f006 fa22 	bl	8009cd0 <HAL_TIM_Base_Init>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003892:	f000 f967 	bl	8003b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003896:	2300      	movs	r3, #0
 8003898:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800389e:	463b      	mov	r3, r7
 80038a0:	4619      	mov	r1, r3
 80038a2:	4806      	ldr	r0, [pc, #24]	; (80038bc <MX_TIM6_Init+0x64>)
 80038a4:	f006 fe06 	bl	800a4b4 <HAL_TIMEx_MasterConfigSynchronization>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80038ae:	f000 f959 	bl	8003b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	2000063c 	.word	0x2000063c
 80038c0:	40001000 	.word	0x40001000

080038c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08c      	sub	sp, #48	; 0x30
 80038c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ca:	f107 031c 	add.w	r3, r7, #28
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
 80038d4:	609a      	str	r2, [r3, #8]
 80038d6:	60da      	str	r2, [r3, #12]
 80038d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	4b83      	ldr	r3, [pc, #524]	; (8003aec <MX_GPIO_Init+0x228>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	4a82      	ldr	r2, [pc, #520]	; (8003aec <MX_GPIO_Init+0x228>)
 80038e4:	f043 0310 	orr.w	r3, r3, #16
 80038e8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ea:	4b80      	ldr	r3, [pc, #512]	; (8003aec <MX_GPIO_Init+0x228>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	4b7c      	ldr	r3, [pc, #496]	; (8003aec <MX_GPIO_Init+0x228>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	4a7b      	ldr	r2, [pc, #492]	; (8003aec <MX_GPIO_Init+0x228>)
 8003900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003904:	6313      	str	r3, [r2, #48]	; 0x30
 8003906:	4b79      	ldr	r3, [pc, #484]	; (8003aec <MX_GPIO_Init+0x228>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	4b75      	ldr	r3, [pc, #468]	; (8003aec <MX_GPIO_Init+0x228>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	4a74      	ldr	r2, [pc, #464]	; (8003aec <MX_GPIO_Init+0x228>)
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	6313      	str	r3, [r2, #48]	; 0x30
 8003922:	4b72      	ldr	r3, [pc, #456]	; (8003aec <MX_GPIO_Init+0x228>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	4b6e      	ldr	r3, [pc, #440]	; (8003aec <MX_GPIO_Init+0x228>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	4a6d      	ldr	r2, [pc, #436]	; (8003aec <MX_GPIO_Init+0x228>)
 8003938:	f043 0304 	orr.w	r3, r3, #4
 800393c:	6313      	str	r3, [r2, #48]	; 0x30
 800393e:	4b6b      	ldr	r3, [pc, #428]	; (8003aec <MX_GPIO_Init+0x228>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	4b67      	ldr	r3, [pc, #412]	; (8003aec <MX_GPIO_Init+0x228>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a66      	ldr	r2, [pc, #408]	; (8003aec <MX_GPIO_Init+0x228>)
 8003954:	f043 0308 	orr.w	r3, r3, #8
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b64      	ldr	r3, [pc, #400]	; (8003aec <MX_GPIO_Init+0x228>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	4b60      	ldr	r3, [pc, #384]	; (8003aec <MX_GPIO_Init+0x228>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	4a5f      	ldr	r2, [pc, #380]	; (8003aec <MX_GPIO_Init+0x228>)
 8003970:	f043 0302 	orr.w	r3, r3, #2
 8003974:	6313      	str	r3, [r2, #48]	; 0x30
 8003976:	4b5d      	ldr	r3, [pc, #372]	; (8003aec <MX_GPIO_Init+0x228>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	607b      	str	r3, [r7, #4]
 8003980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|nWakeUp_Pin, GPIO_PIN_RESET);
 8003982:	2200      	movs	r2, #0
 8003984:	f44f 7184 	mov.w	r1, #264	; 0x108
 8003988:	4859      	ldr	r0, [pc, #356]	; (8003af0 <MX_GPIO_Init+0x22c>)
 800398a:	f001 f84b 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heater_GPIO_Port, Heater_Pin, GPIO_PIN_RESET);
 800398e:	2200      	movs	r2, #0
 8003990:	2120      	movs	r1, #32
 8003992:	4858      	ldr	r0, [pc, #352]	; (8003af4 <MX_GPIO_Init+0x230>)
 8003994:	f001 f846 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, nRst_Pin|nClr_Pin|nCS_Pin, GPIO_PIN_SET);
 8003998:	2201      	movs	r2, #1
 800399a:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800399e:	4854      	ldr	r0, [pc, #336]	; (8003af0 <MX_GPIO_Init+0x22c>)
 80039a0:	f001 f840 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nLDAC_GPIO_Port, nLDAC_Pin, GPIO_PIN_SET);
 80039a4:	2201      	movs	r2, #1
 80039a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039aa:	4853      	ldr	r0, [pc, #332]	; (8003af8 <MX_GPIO_Init+0x234>)
 80039ac:	f001 f83a 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80039b0:	2200      	movs	r2, #0
 80039b2:	2101      	movs	r1, #1
 80039b4:	4850      	ldr	r0, [pc, #320]	; (8003af8 <MX_GPIO_Init+0x234>)
 80039b6:	f001 f835 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039ba:	2308      	movs	r3, #8
 80039bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039be:	2301      	movs	r3, #1
 80039c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c6:	2300      	movs	r3, #0
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039ca:	f107 031c 	add.w	r3, r7, #28
 80039ce:	4619      	mov	r1, r3
 80039d0:	4847      	ldr	r0, [pc, #284]	; (8003af0 <MX_GPIO_Init+0x22c>)
 80039d2:	f000 fe7b 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039d6:	2303      	movs	r3, #3
 80039d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039da:	2302      	movs	r3, #2
 80039dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e2:	2303      	movs	r3, #3
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80039e6:	2308      	movs	r3, #8
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ea:	f107 031c 	add.w	r3, r7, #28
 80039ee:	4619      	mov	r1, r3
 80039f0:	4842      	ldr	r0, [pc, #264]	; (8003afc <MX_GPIO_Init+0x238>)
 80039f2:	f000 fe6b 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039f6:	23f0      	movs	r3, #240	; 0xf0
 80039f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fa:	2302      	movs	r3, #2
 80039fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a02:	2303      	movs	r3, #3
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a06:	2305      	movs	r3, #5
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0a:	f107 031c 	add.w	r3, r7, #28
 8003a0e:	4619      	mov	r1, r3
 8003a10:	483a      	ldr	r0, [pc, #232]	; (8003afc <MX_GPIO_Init+0x238>)
 8003a12:	f000 fe5b 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a16:	2310      	movs	r3, #16
 8003a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a22:	f107 031c 	add.w	r3, r7, #28
 8003a26:	4619      	mov	r1, r3
 8003a28:	4832      	ldr	r0, [pc, #200]	; (8003af4 <MX_GPIO_Init+0x230>)
 8003a2a:	f000 fe4f 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Heater_Pin */
  GPIO_InitStruct.Pin = Heater_Pin;
 8003a2e:	2320      	movs	r3, #32
 8003a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a32:	2301      	movs	r3, #1
 8003a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Heater_GPIO_Port, &GPIO_InitStruct);
 8003a3e:	f107 031c 	add.w	r3, r7, #28
 8003a42:	4619      	mov	r1, r3
 8003a44:	482b      	ldr	r0, [pc, #172]	; (8003af4 <MX_GPIO_Init+0x230>)
 8003a46:	f000 fe41 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pins : nWakeUp_Pin nRst_Pin nClr_Pin nCS_Pin */
  GPIO_InitStruct.Pin = nWakeUp_Pin|nRst_Pin|nClr_Pin|nCS_Pin;
 8003a4a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a50:	2301      	movs	r3, #1
 8003a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a5c:	f107 031c 	add.w	r3, r7, #28
 8003a60:	4619      	mov	r1, r3
 8003a62:	4823      	ldr	r0, [pc, #140]	; (8003af0 <MX_GPIO_Init+0x22c>)
 8003a64:	f000 fe32 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pin : nLDAC_Pin */
  GPIO_InitStruct.Pin = nLDAC_Pin;
 8003a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a76:	2302      	movs	r3, #2
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nLDAC_GPIO_Port, &GPIO_InitStruct);
 8003a7a:	f107 031c 	add.w	r3, r7, #28
 8003a7e:	4619      	mov	r1, r3
 8003a80:	481d      	ldr	r0, [pc, #116]	; (8003af8 <MX_GPIO_Init+0x234>)
 8003a82:	f000 fe23 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003a86:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003a8a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a94:	2303      	movs	r3, #3
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003a98:	230c      	movs	r3, #12
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a9c:	f107 031c 	add.w	r3, r7, #28
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4814      	ldr	r0, [pc, #80]	; (8003af4 <MX_GPIO_Init+0x230>)
 8003aa4:	f000 fe12 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aac:	2301      	movs	r3, #1
 8003aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ab8:	f107 031c 	add.w	r3, r7, #28
 8003abc:	4619      	mov	r1, r3
 8003abe:	480e      	ldr	r0, [pc, #56]	; (8003af8 <MX_GPIO_Init+0x234>)
 8003ac0:	f000 fe04 	bl	80046cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003ad4:	230c      	movs	r3, #12
 8003ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ad8:	f107 031c 	add.w	r3, r7, #28
 8003adc:	4619      	mov	r1, r3
 8003ade:	4806      	ldr	r0, [pc, #24]	; (8003af8 <MX_GPIO_Init+0x234>)
 8003ae0:	f000 fdf4 	bl	80046cc <HAL_GPIO_Init>

}
 8003ae4:	bf00      	nop
 8003ae6:	3730      	adds	r7, #48	; 0x30
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40020800 	.word	0x40020800
 8003af8:	40020c00 	.word	0x40020c00
 8003afc:	40020000 	.word	0x40020000

08003b00 <_write>:

/* This allows printf to write to the debugger and USB */
/* USB needs #include "usbd_cdc_if.h" */
/* ITM Stimulus port 0 must be enabled in your trace settings */
int _write(int file, char *ptr, int len)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  int i, res;

  for (i=0;i<20; i++)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	e00d      	b.n	8003b2e <_write+0x2e>
  {
    res = CDC_Transmit_FS((uint8_t*) ptr, len);  // USB out
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	4619      	mov	r1, r3
 8003b18:	68b8      	ldr	r0, [r7, #8]
 8003b1a:	f00a fa3b 	bl	800df94 <CDC_Transmit_FS>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	617b      	str	r3, [r7, #20]
    if (res == USBD_OK)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d006      	beq.n	8003b36 <_write+0x36>
  for (i=0;i<20; i++)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	2b13      	cmp	r3, #19
 8003b32:	ddee      	ble.n	8003b12 <_write+0x12>
 8003b34:	e000      	b.n	8003b38 <_write+0x38>
      break;
 8003b36:	bf00      	nop
  }

  for (int i = 0; i < len; i++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e009      	b.n	8003b52 <_write+0x52>
    ITM_SendChar((*ptr++));              // debugger out
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	60ba      	str	r2, [r7, #8]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fb26 	bl	8003198 <ITM_SendChar>
  for (int i = 0; i < len; i++)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	dbf1      	blt.n	8003b3e <_write+0x3e>
  return len;
 8003b5a:	687b      	ldr	r3, [r7, #4]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003b68:	b672      	cpsid	i
}
 8003b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b6c:	e7fe      	b.n	8003b6c <Error_Handler+0x8>
	...

08003b70 <HAL_MspInit>:
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	4a0f      	ldr	r2, [pc, #60]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b84:	6453      	str	r3, [r2, #68]	; 0x44
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8e:	607b      	str	r3, [r7, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2300      	movs	r3, #0
 8003b94:	603b      	str	r3, [r7, #0]
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <HAL_MspInit+0x4c>)
 8003b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <HAL_MspInit+0x4c>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800

08003bc0 <HAL_I2C_MspInit>:
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	f107 0314 	add.w	r3, r7, #20
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a21      	ldr	r2, [pc, #132]	; (8003c64 <HAL_I2C_MspInit+0xa4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d13b      	bne.n	8003c5a <HAL_I2C_MspInit+0x9a>
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	4b20      	ldr	r3, [pc, #128]	; (8003c68 <HAL_I2C_MspInit+0xa8>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	4a1f      	ldr	r2, [pc, #124]	; (8003c68 <HAL_I2C_MspInit+0xa8>)
 8003bec:	f043 0302 	orr.w	r3, r3, #2
 8003bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <HAL_I2C_MspInit+0xa8>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	23c0      	movs	r3, #192	; 0xc0
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	2312      	movs	r3, #18
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	623b      	str	r3, [r7, #32]
 8003c0e:	2304      	movs	r3, #4
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
 8003c12:	f107 0314 	add.w	r3, r7, #20
 8003c16:	4619      	mov	r1, r3
 8003c18:	4814      	ldr	r0, [pc, #80]	; (8003c6c <HAL_I2C_MspInit+0xac>)
 8003c1a:	f000 fd57 	bl	80046cc <HAL_GPIO_Init>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <HAL_I2C_MspInit+0xa8>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	4a10      	ldr	r2, [pc, #64]	; (8003c68 <HAL_I2C_MspInit+0xa8>)
 8003c28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c2e:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <HAL_I2C_MspInit+0xa8>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	201f      	movs	r0, #31
 8003c40:	f000 fcdd 	bl	80045fe <HAL_NVIC_SetPriority>
 8003c44:	201f      	movs	r0, #31
 8003c46:	f000 fcf6 	bl	8004636 <HAL_NVIC_EnableIRQ>
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	2020      	movs	r0, #32
 8003c50:	f000 fcd5 	bl	80045fe <HAL_NVIC_SetPriority>
 8003c54:	2020      	movs	r0, #32
 8003c56:	f000 fcee 	bl	8004636 <HAL_NVIC_EnableIRQ>
 8003c5a:	bf00      	nop
 8003c5c:	3728      	adds	r7, #40	; 0x28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40005400 	.word	0x40005400
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40020400 	.word	0x40020400

08003c70 <HAL_SPI_MspInit>:
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	f107 0314 	add.w	r3, r7, #20
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	60da      	str	r2, [r3, #12]
 8003c86:	611a      	str	r2, [r3, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <HAL_SPI_MspInit+0x94>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d134      	bne.n	8003cfc <HAL_SPI_MspInit+0x8c>
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <HAL_SPI_MspInit+0x98>)
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <HAL_SPI_MspInit+0x98>)
 8003c9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ca2:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <HAL_SPI_MspInit+0x98>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <HAL_SPI_MspInit+0x98>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	4a14      	ldr	r2, [pc, #80]	; (8003d08 <HAL_SPI_MspInit+0x98>)
 8003cb8:	f043 0310 	orr.w	r3, r3, #16
 8003cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_SPI_MspInit+0x98>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	61bb      	str	r3, [r7, #24]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	2303      	movs	r3, #3
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	2305      	movs	r3, #5
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce0:	f107 0314 	add.w	r3, r7, #20
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4809      	ldr	r0, [pc, #36]	; (8003d0c <HAL_SPI_MspInit+0x9c>)
 8003ce8:	f000 fcf0 	bl	80046cc <HAL_GPIO_Init>
 8003cec:	2200      	movs	r2, #0
 8003cee:	2100      	movs	r1, #0
 8003cf0:	2054      	movs	r0, #84	; 0x54
 8003cf2:	f000 fc84 	bl	80045fe <HAL_NVIC_SetPriority>
 8003cf6:	2054      	movs	r0, #84	; 0x54
 8003cf8:	f000 fc9d 	bl	8004636 <HAL_NVIC_EnableIRQ>
 8003cfc:	bf00      	nop
 8003cfe:	3728      	adds	r7, #40	; 0x28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40013400 	.word	0x40013400
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40021000 	.word	0x40021000

08003d10 <HAL_TIM_Base_MspInit>:
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d116      	bne.n	8003d50 <HAL_TIM_Base_MspInit+0x40>
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	4b28      	ldr	r3, [pc, #160]	; (8003dc8 <HAL_TIM_Base_MspInit+0xb8>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	4a27      	ldr	r2, [pc, #156]	; (8003dc8 <HAL_TIM_Base_MspInit+0xb8>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6413      	str	r3, [r2, #64]	; 0x40
 8003d32:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_TIM_Base_MspInit+0xb8>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2100      	movs	r1, #0
 8003d42:	201c      	movs	r0, #28
 8003d44:	f000 fc5b 	bl	80045fe <HAL_NVIC_SetPriority>
 8003d48:	201c      	movs	r0, #28
 8003d4a:	f000 fc74 	bl	8004636 <HAL_NVIC_EnableIRQ>
 8003d4e:	e036      	b.n	8003dbe <HAL_TIM_Base_MspInit+0xae>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a1d      	ldr	r2, [pc, #116]	; (8003dcc <HAL_TIM_Base_MspInit+0xbc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d116      	bne.n	8003d88 <HAL_TIM_Base_MspInit+0x78>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_TIM_Base_MspInit+0xb8>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <HAL_TIM_Base_MspInit+0xb8>)
 8003d64:	f043 0304 	orr.w	r3, r3, #4
 8003d68:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6a:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <HAL_TIM_Base_MspInit+0xb8>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	2200      	movs	r2, #0
 8003d78:	2100      	movs	r1, #0
 8003d7a:	201e      	movs	r0, #30
 8003d7c:	f000 fc3f 	bl	80045fe <HAL_NVIC_SetPriority>
 8003d80:	201e      	movs	r0, #30
 8003d82:	f000 fc58 	bl	8004636 <HAL_NVIC_EnableIRQ>
 8003d86:	e01a      	b.n	8003dbe <HAL_TIM_Base_MspInit+0xae>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a10      	ldr	r2, [pc, #64]	; (8003dd0 <HAL_TIM_Base_MspInit+0xc0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d115      	bne.n	8003dbe <HAL_TIM_Base_MspInit+0xae>
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <HAL_TIM_Base_MspInit+0xb8>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	4a0b      	ldr	r2, [pc, #44]	; (8003dc8 <HAL_TIM_Base_MspInit+0xb8>)
 8003d9c:	f043 0310 	orr.w	r3, r3, #16
 8003da0:	6413      	str	r3, [r2, #64]	; 0x40
 8003da2:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <HAL_TIM_Base_MspInit+0xb8>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	2100      	movs	r1, #0
 8003db2:	2036      	movs	r0, #54	; 0x36
 8003db4:	f000 fc23 	bl	80045fe <HAL_NVIC_SetPriority>
 8003db8:	2036      	movs	r0, #54	; 0x36
 8003dba:	f000 fc3c 	bl	8004636 <HAL_NVIC_EnableIRQ>
 8003dbe:	bf00      	nop
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40001000 	.word	0x40001000

08003dd4 <NMI_Handler>:
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	e7fe      	b.n	8003dd8 <NMI_Handler+0x4>

08003dda <HardFault_Handler>:
 8003dda:	b480      	push	{r7}
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	e7fe      	b.n	8003dde <HardFault_Handler+0x4>

08003de0 <MemManage_Handler>:
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	e7fe      	b.n	8003de4 <MemManage_Handler+0x4>

08003de6 <BusFault_Handler>:
 8003de6:	b480      	push	{r7}
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	e7fe      	b.n	8003dea <BusFault_Handler+0x4>

08003dec <UsageFault_Handler>:
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	e7fe      	b.n	8003df0 <UsageFault_Handler+0x4>

08003df2 <SVC_Handler>:
 8003df2:	b480      	push	{r7}
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	bf00      	nop
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <DebugMon_Handler>:
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <PendSV_Handler>:
 8003e0e:	b480      	push	{r7}
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	bf00      	nop
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <SysTick_Handler>:
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	f000 face 	bl	80043c0 <HAL_IncTick>
 8003e24:	bf00      	nop
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <TIM2_IRQHandler>:
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	4802      	ldr	r0, [pc, #8]	; (8003e38 <TIM2_IRQHandler+0x10>)
 8003e2e:	f006 f80f 	bl	8009e50 <HAL_TIM_IRQHandler>
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	200005ac 	.word	0x200005ac

08003e3c <TIM4_IRQHandler>:
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	4802      	ldr	r0, [pc, #8]	; (8003e4c <TIM4_IRQHandler+0x10>)
 8003e42:	f006 f805 	bl	8009e50 <HAL_TIM_IRQHandler>
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	200005f4 	.word	0x200005f4

08003e50 <I2C1_EV_IRQHandler>:
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	4802      	ldr	r0, [pc, #8]	; (8003e60 <I2C1_EV_IRQHandler+0x10>)
 8003e56:	f001 fa67 	bl	8005328 <HAL_I2C_EV_IRQHandler>
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000500 	.word	0x20000500

08003e64 <I2C1_ER_IRQHandler>:
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	4802      	ldr	r0, [pc, #8]	; (8003e74 <I2C1_ER_IRQHandler+0x10>)
 8003e6a:	f001 fbce 	bl	800560a <HAL_I2C_ER_IRQHandler>
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000500 	.word	0x20000500

08003e78 <TIM6_DAC_IRQHandler>:
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4802      	ldr	r0, [pc, #8]	; (8003e88 <TIM6_DAC_IRQHandler+0x10>)
 8003e7e:	f005 ffe7 	bl	8009e50 <HAL_TIM_IRQHandler>
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	2000063c 	.word	0x2000063c

08003e8c <OTG_FS_IRQHandler>:
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	4802      	ldr	r0, [pc, #8]	; (8003e9c <OTG_FS_IRQHandler+0x10>)
 8003e92:	f003 fc1c 	bl	80076ce <HAL_PCD_IRQHandler>
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20002a14 	.word	0x20002a14

08003ea0 <SPI4_IRQHandler>:
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	4802      	ldr	r0, [pc, #8]	; (8003eb0 <SPI4_IRQHandler+0x10>)
 8003ea6:	f005 fd2b 	bl	8009900 <HAL_SPI_IRQHandler>
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000554 	.word	0x20000554

08003eb4 <StringFIFOInit>:
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 8003ecc:	2300      	movs	r3, #0
 8003ece:	81fb      	strh	r3, [r7, #14]
 8003ed0:	e006      	b.n	8003ee0 <StringFIFOInit+0x2c>
 8003ed2:	89fb      	ldrh	r3, [r7, #14]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	54d1      	strb	r1, [r2, r3]
 8003eda:	89fb      	ldrh	r3, [r7, #14]
 8003edc:	3301      	adds	r3, #1
 8003ede:	81fb      	strh	r3, [r7, #14]
 8003ee0:	89fb      	ldrh	r3, [r7, #14]
 8003ee2:	2bf9      	cmp	r3, #249	; 0xf9
 8003ee4:	d9f5      	bls.n	8003ed2 <StringFIFOInit+0x1e>
 8003ee6:	bf00      	nop
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <StringFIFOUsed>:
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	81fb      	strh	r3, [r7, #14]
 8003f12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	da03      	bge.n	8003f22 <StringFIFOUsed+0x2e>
 8003f1a:	89fb      	ldrh	r3, [r7, #14]
 8003f1c:	33fa      	adds	r3, #250	; 0xfa
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	81fb      	strh	r3, [r7, #14]
 8003f22:	89fb      	ldrh	r3, [r7, #14]
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <StringFIFOAvailable>:
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ffdb 	bl	8003ef4 <StringFIFOUsed>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	81fb      	strh	r3, [r7, #14]
 8003f42:	89fb      	ldrh	r3, [r7, #14]
 8003f44:	f1c3 03f9 	rsb	r3, r3, #249	; 0xf9
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	81bb      	strh	r3, [r7, #12]
 8003f4c:	89bb      	ldrh	r3, [r7, #12]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <StringFIFOAdd>:
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7ff ffe3 	bl	8003f30 <StringFIFOAvailable>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	82fb      	strh	r3, [r7, #22]
 8003f6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d104      	bne.n	8003f80 <StringFIFOAdd+0x28>
 8003f76:	4817      	ldr	r0, [pc, #92]	; (8003fd4 <StringFIFOAdd+0x7c>)
 8003f78:	f00b fbc2 	bl	800f700 <puts>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e025      	b.n	8003fcc <StringFIFOAdd+0x74>
 8003f80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d902      	bls.n	8003f90 <StringFIFOAdd+0x38>
 8003f8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8003f96:	461a      	mov	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f00a fc7d 	bl	800e8a0 <memcpy>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8003fac:	461a      	mov	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	441a      	add	r2, r3
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <StringFIFOAdd+0x80>)
 8003fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	21fa      	movs	r1, #250	; 0xfa
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 8003fca:	2300      	movs	r3, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	08014868 	.word	0x08014868
 8003fd8:	10624dd3 	.word	0x10624dd3

08003fdc <StringFIFORemove>:
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff ff84 	bl	8003ef4 <StringFIFOUsed>
 8003fec:	4603      	mov	r3, r0
 8003fee:	81fb      	strh	r3, [r7, #14]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 20fa 	ldrb.w	r2, [r3, #250]	; 0xfa
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d101      	bne.n	8004004 <StringFIFORemove+0x28>
 8004000:	2303      	movs	r3, #3
 8004002:	e09e      	b.n	8004142 <StringFIFORemove+0x166>
 8004004:	2300      	movs	r3, #0
 8004006:	82fb      	strh	r3, [r7, #22]
 8004008:	e095      	b.n	8004136 <StringFIFORemove+0x15a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004010:	461a      	mov	r2, r3
 8004012:	8afb      	ldrh	r3, [r7, #22]
 8004014:	4413      	add	r3, r2
 8004016:	4a4d      	ldr	r2, [pc, #308]	; (800414c <StringFIFORemove+0x170>)
 8004018:	fb82 1203 	smull	r1, r2, r2, r3
 800401c:	1111      	asrs	r1, r2, #4
 800401e:	17da      	asrs	r2, r3, #31
 8004020:	1a8a      	subs	r2, r1, r2
 8004022:	21fa      	movs	r1, #250	; 0xfa
 8004024:	fb01 f202 	mul.w	r2, r1, r2
 8004028:	1a9a      	subs	r2, r3, r2
 800402a:	4613      	mov	r3, r2
 800402c:	81bb      	strh	r3, [r7, #12]
 800402e:	89bb      	ldrh	r3, [r7, #12]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	5cd3      	ldrb	r3, [r2, r3]
 8004034:	2b0a      	cmp	r3, #10
 8004036:	d004      	beq.n	8004042 <StringFIFORemove+0x66>
 8004038:	89bb      	ldrh	r3, [r7, #12]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	5cd3      	ldrb	r3, [r2, r3]
 800403e:	2b0d      	cmp	r3, #13
 8004040:	d176      	bne.n	8004130 <StringFIFORemove+0x154>
 8004042:	8afb      	ldrh	r3, [r7, #22]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d116      	bne.n	8004076 <StringFIFORemove+0x9a>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800404e:	3301      	adds	r3, #1
 8004050:	4a3e      	ldr	r2, [pc, #248]	; (800414c <StringFIFORemove+0x170>)
 8004052:	fb82 1203 	smull	r1, r2, r2, r3
 8004056:	1111      	asrs	r1, r2, #4
 8004058:	17da      	asrs	r2, r3, #31
 800405a:	1a8a      	subs	r2, r1, r2
 800405c:	21fa      	movs	r1, #250	; 0xfa
 800405e:	fb01 f202 	mul.w	r2, r1, r2
 8004062:	1a9a      	subs	r2, r3, r2
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2200      	movs	r2, #0
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	2301      	movs	r3, #1
 8004074:	e065      	b.n	8004142 <StringFIFORemove+0x166>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800407c:	b29b      	uxth	r3, r3
 800407e:	89ba      	ldrh	r2, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	b29b      	uxth	r3, r3
 8004084:	823b      	strh	r3, [r7, #16]
 8004086:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	da03      	bge.n	8004096 <StringFIFORemove+0xba>
 800408e:	8a3b      	ldrh	r3, [r7, #16]
 8004090:	33fa      	adds	r3, #250	; 0xfa
 8004092:	b29b      	uxth	r3, r3
 8004094:	823b      	strh	r3, [r7, #16]
 8004096:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80040a0:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 80040a4:	429a      	cmp	r2, r3
 80040a6:	dd0b      	ble.n	80040c0 <StringFIFORemove+0xe4>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 80040b4:	82bb      	strh	r3, [r7, #20]
 80040b6:	8a3a      	ldrh	r2, [r7, #16]
 80040b8:	8abb      	ldrh	r3, [r7, #20]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	827b      	strh	r3, [r7, #18]
 80040be:	e003      	b.n	80040c8 <StringFIFORemove+0xec>
 80040c0:	8a3b      	ldrh	r3, [r7, #16]
 80040c2:	82bb      	strh	r3, [r7, #20]
 80040c4:	2300      	movs	r3, #0
 80040c6:	827b      	strh	r3, [r7, #18]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80040ce:	461a      	mov	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4413      	add	r3, r2
 80040d4:	8aba      	ldrh	r2, [r7, #20]
 80040d6:	4619      	mov	r1, r3
 80040d8:	6838      	ldr	r0, [r7, #0]
 80040da:	f00a fbe1 	bl	800e8a0 <memcpy>
 80040de:	8a7b      	ldrh	r3, [r7, #18]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <StringFIFORemove+0x118>
 80040e4:	8abb      	ldrh	r3, [r7, #20]
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	4413      	add	r3, r2
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	8a7a      	ldrh	r2, [r7, #18]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f00a fbd6 	bl	800e8a0 <memcpy>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80040fa:	461a      	mov	r2, r3
 80040fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004100:	4413      	add	r3, r2
 8004102:	3301      	adds	r3, #1
 8004104:	4a11      	ldr	r2, [pc, #68]	; (800414c <StringFIFORemove+0x170>)
 8004106:	fb82 1203 	smull	r1, r2, r2, r3
 800410a:	1111      	asrs	r1, r2, #4
 800410c:	17da      	asrs	r2, r3, #31
 800410e:	1a8a      	subs	r2, r1, r2
 8004110:	21fa      	movs	r1, #250	; 0xfa
 8004112:	fb01 f202 	mul.w	r2, r1, r2
 8004116:	1a9a      	subs	r2, r3, r2
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8004120:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	4413      	add	r3, r2
 8004128:	2200      	movs	r2, #0
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	2300      	movs	r3, #0
 800412e:	e008      	b.n	8004142 <StringFIFORemove+0x166>
 8004130:	8afb      	ldrh	r3, [r7, #22]
 8004132:	3301      	adds	r3, #1
 8004134:	82fb      	strh	r3, [r7, #22]
 8004136:	8afa      	ldrh	r2, [r7, #22]
 8004138:	89fb      	ldrh	r3, [r7, #14]
 800413a:	429a      	cmp	r2, r3
 800413c:	f4ff af65 	bcc.w	800400a <StringFIFORemove+0x2e>
 8004140:	2302      	movs	r3, #2
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	10624dd3 	.word	0x10624dd3

08004150 <_getpid>:
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
 8004154:	2301      	movs	r3, #1
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <_kill>:
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
 800416a:	f00a fb6f 	bl	800e84c <__errno>
 800416e:	4603      	mov	r3, r0
 8004170:	2216      	movs	r2, #22
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	f04f 33ff 	mov.w	r3, #4294967295
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <_exit>:
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	f04f 31ff 	mov.w	r1, #4294967295
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ffe7 	bl	8004160 <_kill>
 8004192:	e7fe      	b.n	8004192 <_exit+0x12>

08004194 <_read>:
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	e00a      	b.n	80041bc <_read+0x28>
 80041a6:	f3af 8000 	nop.w
 80041aa:	4601      	mov	r1, r0
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	60ba      	str	r2, [r7, #8]
 80041b2:	b2ca      	uxtb	r2, r1
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	3301      	adds	r3, #1
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	dbf0      	blt.n	80041a6 <_read+0x12>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <_close>:
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	f04f 33ff 	mov.w	r3, #4294967295
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <_fstat>:
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	2300      	movs	r3, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <_isatty>:
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	2301      	movs	r3, #1
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <_lseek>:
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	2300      	movs	r3, #0
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <_sbrk>:
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	4a14      	ldr	r2, [pc, #80]	; (8004294 <_sbrk+0x5c>)
 8004242:	4b15      	ldr	r3, [pc, #84]	; (8004298 <_sbrk+0x60>)
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <_sbrk+0x64>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <_sbrk+0x22>
 8004254:	4b11      	ldr	r3, [pc, #68]	; (800429c <_sbrk+0x64>)
 8004256:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <_sbrk+0x68>)
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <_sbrk+0x64>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	429a      	cmp	r2, r3
 8004266:	d207      	bcs.n	8004278 <_sbrk+0x40>
 8004268:	f00a faf0 	bl	800e84c <__errno>
 800426c:	4603      	mov	r3, r0
 800426e:	220c      	movs	r2, #12
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	f04f 33ff 	mov.w	r3, #4294967295
 8004276:	e009      	b.n	800428c <_sbrk+0x54>
 8004278:	4b08      	ldr	r3, [pc, #32]	; (800429c <_sbrk+0x64>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	4b07      	ldr	r3, [pc, #28]	; (800429c <_sbrk+0x64>)
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4413      	add	r3, r2
 8004286:	4a05      	ldr	r2, [pc, #20]	; (800429c <_sbrk+0x64>)
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20030000 	.word	0x20030000
 8004298:	00000400 	.word	0x00000400
 800429c:	20001d5c 	.word	0x20001d5c
 80042a0:	20003150 	.word	0x20003150

080042a4 <SystemInit>:
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <SystemInit+0x20>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	4a05      	ldr	r2, [pc, #20]	; (80042c4 <SystemInit+0x20>)
 80042b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <Reset_Handler>:
 80042c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004300 <LoopFillZerobss+0x12>
 80042cc:	480d      	ldr	r0, [pc, #52]	; (8004304 <LoopFillZerobss+0x16>)
 80042ce:	490e      	ldr	r1, [pc, #56]	; (8004308 <LoopFillZerobss+0x1a>)
 80042d0:	4a0e      	ldr	r2, [pc, #56]	; (800430c <LoopFillZerobss+0x1e>)
 80042d2:	2300      	movs	r3, #0
 80042d4:	e002      	b.n	80042dc <LoopCopyDataInit>

080042d6 <CopyDataInit>:
 80042d6:	58d4      	ldr	r4, [r2, r3]
 80042d8:	50c4      	str	r4, [r0, r3]
 80042da:	3304      	adds	r3, #4

080042dc <LoopCopyDataInit>:
 80042dc:	18c4      	adds	r4, r0, r3
 80042de:	428c      	cmp	r4, r1
 80042e0:	d3f9      	bcc.n	80042d6 <CopyDataInit>
 80042e2:	4a0b      	ldr	r2, [pc, #44]	; (8004310 <LoopFillZerobss+0x22>)
 80042e4:	4c0b      	ldr	r4, [pc, #44]	; (8004314 <LoopFillZerobss+0x26>)
 80042e6:	2300      	movs	r3, #0
 80042e8:	e001      	b.n	80042ee <LoopFillZerobss>

080042ea <FillZerobss>:
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	3204      	adds	r2, #4

080042ee <LoopFillZerobss>:
 80042ee:	42a2      	cmp	r2, r4
 80042f0:	d3fb      	bcc.n	80042ea <FillZerobss>
 80042f2:	f7ff ffd7 	bl	80042a4 <SystemInit>
 80042f6:	f00a faaf 	bl	800e858 <__libc_init_array>
 80042fa:	f7ff f873 	bl	80033e4 <main>
 80042fe:	4770      	bx	lr
 8004300:	20030000 	.word	0x20030000
 8004304:	20000000 	.word	0x20000000
 8004308:	200002e4 	.word	0x200002e4
 800430c:	08014dac 	.word	0x08014dac
 8004310:	200002e8 	.word	0x200002e8
 8004314:	20003150 	.word	0x20003150

08004318 <ADC_IRQHandler>:
 8004318:	e7fe      	b.n	8004318 <ADC_IRQHandler>
	...

0800431c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004320:	4b0e      	ldr	r3, [pc, #56]	; (800435c <HAL_Init+0x40>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a0d      	ldr	r2, [pc, #52]	; (800435c <HAL_Init+0x40>)
 8004326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800432a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <HAL_Init+0x40>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a0a      	ldr	r2, [pc, #40]	; (800435c <HAL_Init+0x40>)
 8004332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004336:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004338:	4b08      	ldr	r3, [pc, #32]	; (800435c <HAL_Init+0x40>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a07      	ldr	r2, [pc, #28]	; (800435c <HAL_Init+0x40>)
 800433e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004342:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004344:	2003      	movs	r0, #3
 8004346:	f000 f94f 	bl	80045e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800434a:	200f      	movs	r0, #15
 800434c:	f000 f808 	bl	8004360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004350:	f7ff fc0e 	bl	8003b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40023c00 	.word	0x40023c00

08004360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004368:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_InitTick+0x54>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <HAL_InitTick+0x58>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	4619      	mov	r1, r3
 8004372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004376:	fbb3 f3f1 	udiv	r3, r3, r1
 800437a:	fbb2 f3f3 	udiv	r3, r2, r3
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f967 	bl	8004652 <HAL_SYSTICK_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e00e      	b.n	80043ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b0f      	cmp	r3, #15
 8004392:	d80a      	bhi.n	80043aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004394:	2200      	movs	r2, #0
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	f000 f92f 	bl	80045fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043a0:	4a06      	ldr	r2, [pc, #24]	; (80043bc <HAL_InitTick+0x5c>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e000      	b.n	80043ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000014 	.word	0x20000014
 80043b8:	2000001c 	.word	0x2000001c
 80043bc:	20000018 	.word	0x20000018

080043c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_IncTick+0x20>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_IncTick+0x24>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4413      	add	r3, r2
 80043d0:	4a04      	ldr	r2, [pc, #16]	; (80043e4 <HAL_IncTick+0x24>)
 80043d2:	6013      	str	r3, [r2, #0]
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	2000001c 	.word	0x2000001c
 80043e4:	20001d60 	.word	0x20001d60

080043e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return uwTick;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_GetTick+0x14>)
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20001d60 	.word	0x20001d60

08004400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004408:	f7ff ffee 	bl	80043e8 <HAL_GetTick>
 800440c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d005      	beq.n	8004426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <HAL_Delay+0x44>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004426:	bf00      	nop
 8004428:	f7ff ffde 	bl	80043e8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	429a      	cmp	r2, r3
 8004436:	d8f7      	bhi.n	8004428 <HAL_Delay+0x28>
  {
  }
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	2000001c 	.word	0x2000001c

08004448 <__NVIC_SetPriorityGrouping>:
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <__NVIC_SetPriorityGrouping+0x44>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004464:	4013      	ands	r3, r2
 8004466:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800447a:	4a04      	ldr	r2, [pc, #16]	; (800448c <__NVIC_SetPriorityGrouping+0x44>)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	60d3      	str	r3, [r2, #12]
}
 8004480:	bf00      	nop
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	e000ed00 	.word	0xe000ed00

08004490 <__NVIC_GetPriorityGrouping>:
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	0a1b      	lsrs	r3, r3, #8
 800449a:	f003 0307 	and.w	r3, r3, #7
}
 800449e:	4618      	mov	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	e000ed00 	.word	0xe000ed00

080044ac <__NVIC_EnableIRQ>:
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	db0b      	blt.n	80044d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	f003 021f 	and.w	r2, r3, #31
 80044c4:	4907      	ldr	r1, [pc, #28]	; (80044e4 <__NVIC_EnableIRQ+0x38>)
 80044c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	2001      	movs	r0, #1
 80044ce:	fa00 f202 	lsl.w	r2, r0, r2
 80044d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	e000e100 	.word	0xe000e100

080044e8 <__NVIC_SetPriority>:
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	6039      	str	r1, [r7, #0]
 80044f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	db0a      	blt.n	8004512 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	490c      	ldr	r1, [pc, #48]	; (8004534 <__NVIC_SetPriority+0x4c>)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	0112      	lsls	r2, r2, #4
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	440b      	add	r3, r1
 800450c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004510:	e00a      	b.n	8004528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	4908      	ldr	r1, [pc, #32]	; (8004538 <__NVIC_SetPriority+0x50>)
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	3b04      	subs	r3, #4
 8004520:	0112      	lsls	r2, r2, #4
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	440b      	add	r3, r1
 8004526:	761a      	strb	r2, [r3, #24]
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000e100 	.word	0xe000e100
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <NVIC_EncodePriority>:
{
 800453c:	b480      	push	{r7}
 800453e:	b089      	sub	sp, #36	; 0x24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f1c3 0307 	rsb	r3, r3, #7
 8004556:	2b04      	cmp	r3, #4
 8004558:	bf28      	it	cs
 800455a:	2304      	movcs	r3, #4
 800455c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3304      	adds	r3, #4
 8004562:	2b06      	cmp	r3, #6
 8004564:	d902      	bls.n	800456c <NVIC_EncodePriority+0x30>
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3b03      	subs	r3, #3
 800456a:	e000      	b.n	800456e <NVIC_EncodePriority+0x32>
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004570:	f04f 32ff 	mov.w	r2, #4294967295
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43da      	mvns	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	401a      	ands	r2, r3
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004584:	f04f 31ff 	mov.w	r1, #4294967295
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	fa01 f303 	lsl.w	r3, r1, r3
 800458e:	43d9      	mvns	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004594:	4313      	orrs	r3, r2
}
 8004596:	4618      	mov	r0, r3
 8004598:	3724      	adds	r7, #36	; 0x24
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <SysTick_Config>:
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045b4:	d301      	bcc.n	80045ba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80045b6:	2301      	movs	r3, #1
 80045b8:	e00f      	b.n	80045da <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ba:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <SysTick_Config+0x40>)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3b01      	subs	r3, #1
 80045c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045c2:	210f      	movs	r1, #15
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	f7ff ff8e 	bl	80044e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <SysTick_Config+0x40>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045d2:	4b04      	ldr	r3, [pc, #16]	; (80045e4 <SysTick_Config+0x40>)
 80045d4:	2207      	movs	r2, #7
 80045d6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	e000e010 	.word	0xe000e010

080045e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ff29 	bl	8004448 <__NVIC_SetPriorityGrouping>
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045fe:	b580      	push	{r7, lr}
 8004600:	b086      	sub	sp, #24
 8004602:	af00      	add	r7, sp, #0
 8004604:	4603      	mov	r3, r0
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004610:	f7ff ff3e 	bl	8004490 <__NVIC_GetPriorityGrouping>
 8004614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	6978      	ldr	r0, [r7, #20]
 800461c:	f7ff ff8e 	bl	800453c <NVIC_EncodePriority>
 8004620:	4602      	mov	r2, r0
 8004622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004626:	4611      	mov	r1, r2
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff ff5d 	bl	80044e8 <__NVIC_SetPriority>
}
 800462e:	bf00      	nop
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	4603      	mov	r3, r0
 800463e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff ff31 	bl	80044ac <__NVIC_EnableIRQ>
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff ffa2 	bl	80045a4 <SysTick_Config>
 8004660:	4603      	mov	r3, r0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d004      	beq.n	8004688 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2280      	movs	r2, #128	; 0x80
 8004682:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e00c      	b.n	80046a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2205      	movs	r2, #5
 800468c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046bc:	b2db      	uxtb	r3, r3
}
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b089      	sub	sp, #36	; 0x24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046da:	2300      	movs	r3, #0
 80046dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046de:	2300      	movs	r3, #0
 80046e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046e2:	2300      	movs	r3, #0
 80046e4:	61fb      	str	r3, [r7, #28]
 80046e6:	e177      	b.n	80049d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046e8:	2201      	movs	r2, #1
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4013      	ands	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	429a      	cmp	r2, r3
 8004702:	f040 8166 	bne.w	80049d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b01      	cmp	r3, #1
 8004710:	d005      	beq.n	800471e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800471a:	2b02      	cmp	r3, #2
 800471c:	d130      	bne.n	8004780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	2203      	movs	r2, #3
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	43db      	mvns	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4013      	ands	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004754:	2201      	movs	r2, #1
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	091b      	lsrs	r3, r3, #4
 800476a:	f003 0201 	and.w	r2, r3, #1
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	2b03      	cmp	r3, #3
 800478a:	d017      	beq.n	80047bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	2203      	movs	r2, #3
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d123      	bne.n	8004810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	08da      	lsrs	r2, r3, #3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3208      	adds	r2, #8
 80047d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	220f      	movs	r2, #15
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4013      	ands	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4313      	orrs	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	08da      	lsrs	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3208      	adds	r2, #8
 800480a:	69b9      	ldr	r1, [r7, #24]
 800480c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	2203      	movs	r2, #3
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	43db      	mvns	r3, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4013      	ands	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 0203 	and.w	r2, r3, #3
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80c0 	beq.w	80049d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	4b66      	ldr	r3, [pc, #408]	; (80049f0 <HAL_GPIO_Init+0x324>)
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	4a65      	ldr	r2, [pc, #404]	; (80049f0 <HAL_GPIO_Init+0x324>)
 800485c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004860:	6453      	str	r3, [r2, #68]	; 0x44
 8004862:	4b63      	ldr	r3, [pc, #396]	; (80049f0 <HAL_GPIO_Init+0x324>)
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800486e:	4a61      	ldr	r2, [pc, #388]	; (80049f4 <HAL_GPIO_Init+0x328>)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	089b      	lsrs	r3, r3, #2
 8004874:	3302      	adds	r3, #2
 8004876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800487a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	220f      	movs	r2, #15
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	43db      	mvns	r3, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4013      	ands	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a58      	ldr	r2, [pc, #352]	; (80049f8 <HAL_GPIO_Init+0x32c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d037      	beq.n	800490a <HAL_GPIO_Init+0x23e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a57      	ldr	r2, [pc, #348]	; (80049fc <HAL_GPIO_Init+0x330>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d031      	beq.n	8004906 <HAL_GPIO_Init+0x23a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a56      	ldr	r2, [pc, #344]	; (8004a00 <HAL_GPIO_Init+0x334>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d02b      	beq.n	8004902 <HAL_GPIO_Init+0x236>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a55      	ldr	r2, [pc, #340]	; (8004a04 <HAL_GPIO_Init+0x338>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d025      	beq.n	80048fe <HAL_GPIO_Init+0x232>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a54      	ldr	r2, [pc, #336]	; (8004a08 <HAL_GPIO_Init+0x33c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01f      	beq.n	80048fa <HAL_GPIO_Init+0x22e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a53      	ldr	r2, [pc, #332]	; (8004a0c <HAL_GPIO_Init+0x340>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d019      	beq.n	80048f6 <HAL_GPIO_Init+0x22a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a52      	ldr	r2, [pc, #328]	; (8004a10 <HAL_GPIO_Init+0x344>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d013      	beq.n	80048f2 <HAL_GPIO_Init+0x226>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a51      	ldr	r2, [pc, #324]	; (8004a14 <HAL_GPIO_Init+0x348>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00d      	beq.n	80048ee <HAL_GPIO_Init+0x222>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a50      	ldr	r2, [pc, #320]	; (8004a18 <HAL_GPIO_Init+0x34c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <HAL_GPIO_Init+0x21e>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a4f      	ldr	r2, [pc, #316]	; (8004a1c <HAL_GPIO_Init+0x350>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d101      	bne.n	80048e6 <HAL_GPIO_Init+0x21a>
 80048e2:	2309      	movs	r3, #9
 80048e4:	e012      	b.n	800490c <HAL_GPIO_Init+0x240>
 80048e6:	230a      	movs	r3, #10
 80048e8:	e010      	b.n	800490c <HAL_GPIO_Init+0x240>
 80048ea:	2308      	movs	r3, #8
 80048ec:	e00e      	b.n	800490c <HAL_GPIO_Init+0x240>
 80048ee:	2307      	movs	r3, #7
 80048f0:	e00c      	b.n	800490c <HAL_GPIO_Init+0x240>
 80048f2:	2306      	movs	r3, #6
 80048f4:	e00a      	b.n	800490c <HAL_GPIO_Init+0x240>
 80048f6:	2305      	movs	r3, #5
 80048f8:	e008      	b.n	800490c <HAL_GPIO_Init+0x240>
 80048fa:	2304      	movs	r3, #4
 80048fc:	e006      	b.n	800490c <HAL_GPIO_Init+0x240>
 80048fe:	2303      	movs	r3, #3
 8004900:	e004      	b.n	800490c <HAL_GPIO_Init+0x240>
 8004902:	2302      	movs	r3, #2
 8004904:	e002      	b.n	800490c <HAL_GPIO_Init+0x240>
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <HAL_GPIO_Init+0x240>
 800490a:	2300      	movs	r3, #0
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	f002 0203 	and.w	r2, r2, #3
 8004912:	0092      	lsls	r2, r2, #2
 8004914:	4093      	lsls	r3, r2
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4313      	orrs	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800491c:	4935      	ldr	r1, [pc, #212]	; (80049f4 <HAL_GPIO_Init+0x328>)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	089b      	lsrs	r3, r3, #2
 8004922:	3302      	adds	r3, #2
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800492a:	4b3d      	ldr	r3, [pc, #244]	; (8004a20 <HAL_GPIO_Init+0x354>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	43db      	mvns	r3, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4013      	ands	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800494e:	4a34      	ldr	r2, [pc, #208]	; (8004a20 <HAL_GPIO_Init+0x354>)
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004954:	4b32      	ldr	r3, [pc, #200]	; (8004a20 <HAL_GPIO_Init+0x354>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004978:	4a29      	ldr	r2, [pc, #164]	; (8004a20 <HAL_GPIO_Init+0x354>)
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800497e:	4b28      	ldr	r3, [pc, #160]	; (8004a20 <HAL_GPIO_Init+0x354>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	43db      	mvns	r3, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4013      	ands	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049a2:	4a1f      	ldr	r2, [pc, #124]	; (8004a20 <HAL_GPIO_Init+0x354>)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049a8:	4b1d      	ldr	r3, [pc, #116]	; (8004a20 <HAL_GPIO_Init+0x354>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049cc:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <HAL_GPIO_Init+0x354>)
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3301      	adds	r3, #1
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b0f      	cmp	r3, #15
 80049dc:	f67f ae84 	bls.w	80046e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	3724      	adds	r7, #36	; 0x24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40023800 	.word	0x40023800
 80049f4:	40013800 	.word	0x40013800
 80049f8:	40020000 	.word	0x40020000
 80049fc:	40020400 	.word	0x40020400
 8004a00:	40020800 	.word	0x40020800
 8004a04:	40020c00 	.word	0x40020c00
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40021400 	.word	0x40021400
 8004a10:	40021800 	.word	0x40021800
 8004a14:	40021c00 	.word	0x40021c00
 8004a18:	40022000 	.word	0x40022000
 8004a1c:	40022400 	.word	0x40022400
 8004a20:	40013c00 	.word	0x40013c00

08004a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	807b      	strh	r3, [r7, #2]
 8004a30:	4613      	mov	r3, r2
 8004a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a34:	787b      	ldrb	r3, [r7, #1]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a3a:	887a      	ldrh	r2, [r7, #2]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a40:	e003      	b.n	8004a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a42:	887b      	ldrh	r3, [r7, #2]
 8004a44:	041a      	lsls	r2, r3, #16
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	619a      	str	r2, [r3, #24]
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
	...

08004a58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e12b      	b.n	8004cc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff f89e 	bl	8003bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2224      	movs	r2, #36	; 0x24
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0201 	bic.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004abc:	f004 fba4 	bl	8009208 <HAL_RCC_GetPCLK1Freq>
 8004ac0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	4a81      	ldr	r2, [pc, #516]	; (8004ccc <HAL_I2C_Init+0x274>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d807      	bhi.n	8004adc <HAL_I2C_Init+0x84>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a80      	ldr	r2, [pc, #512]	; (8004cd0 <HAL_I2C_Init+0x278>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	bf94      	ite	ls
 8004ad4:	2301      	movls	r3, #1
 8004ad6:	2300      	movhi	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	e006      	b.n	8004aea <HAL_I2C_Init+0x92>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4a7d      	ldr	r2, [pc, #500]	; (8004cd4 <HAL_I2C_Init+0x27c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	bf94      	ite	ls
 8004ae4:	2301      	movls	r3, #1
 8004ae6:	2300      	movhi	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e0e7      	b.n	8004cc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4a78      	ldr	r2, [pc, #480]	; (8004cd8 <HAL_I2C_Init+0x280>)
 8004af6:	fba2 2303 	umull	r2, r3, r2, r3
 8004afa:	0c9b      	lsrs	r3, r3, #18
 8004afc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4a6a      	ldr	r2, [pc, #424]	; (8004ccc <HAL_I2C_Init+0x274>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d802      	bhi.n	8004b2c <HAL_I2C_Init+0xd4>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	e009      	b.n	8004b40 <HAL_I2C_Init+0xe8>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	4a69      	ldr	r2, [pc, #420]	; (8004cdc <HAL_I2C_Init+0x284>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	099b      	lsrs	r3, r3, #6
 8004b3e:	3301      	adds	r3, #1
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	430b      	orrs	r3, r1
 8004b46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	495c      	ldr	r1, [pc, #368]	; (8004ccc <HAL_I2C_Init+0x274>)
 8004b5c:	428b      	cmp	r3, r1
 8004b5e:	d819      	bhi.n	8004b94 <HAL_I2C_Init+0x13c>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1e59      	subs	r1, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b6e:	1c59      	adds	r1, r3, #1
 8004b70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b74:	400b      	ands	r3, r1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_I2C_Init+0x138>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	1e59      	subs	r1, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b88:	3301      	adds	r3, #1
 8004b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8e:	e051      	b.n	8004c34 <HAL_I2C_Init+0x1dc>
 8004b90:	2304      	movs	r3, #4
 8004b92:	e04f      	b.n	8004c34 <HAL_I2C_Init+0x1dc>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d111      	bne.n	8004bc0 <HAL_I2C_Init+0x168>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1e58      	subs	r0, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	440b      	add	r3, r1
 8004baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	e012      	b.n	8004be6 <HAL_I2C_Init+0x18e>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1e58      	subs	r0, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	0099      	lsls	r1, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	bf0c      	ite	eq
 8004be0:	2301      	moveq	r3, #1
 8004be2:	2300      	movne	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_I2C_Init+0x196>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e022      	b.n	8004c34 <HAL_I2C_Init+0x1dc>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10e      	bne.n	8004c14 <HAL_I2C_Init+0x1bc>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1e58      	subs	r0, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6859      	ldr	r1, [r3, #4]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	440b      	add	r3, r1
 8004c04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c08:	3301      	adds	r3, #1
 8004c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c12:	e00f      	b.n	8004c34 <HAL_I2C_Init+0x1dc>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1e58      	subs	r0, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	0099      	lsls	r1, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	6809      	ldr	r1, [r1, #0]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69da      	ldr	r2, [r3, #28]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6911      	ldr	r1, [r2, #16]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68d2      	ldr	r2, [r2, #12]
 8004c6e:	4311      	orrs	r1, r2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	430b      	orrs	r3, r1
 8004c76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695a      	ldr	r2, [r3, #20]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	000186a0 	.word	0x000186a0
 8004cd0:	001e847f 	.word	0x001e847f
 8004cd4:	003d08ff 	.word	0x003d08ff
 8004cd8:	431bde83 	.word	0x431bde83
 8004cdc:	10624dd3 	.word	0x10624dd3

08004ce0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	461a      	mov	r2, r3
 8004cec:	460b      	mov	r3, r1
 8004cee:	817b      	strh	r3, [r7, #10]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cf4:	f7ff fb78 	bl	80043e8 <HAL_GetTick>
 8004cf8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	f040 80e0 	bne.w	8004ec8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	2319      	movs	r3, #25
 8004d0e:	2201      	movs	r2, #1
 8004d10:	4970      	ldr	r1, [pc, #448]	; (8004ed4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f002 f8e6 	bl	8006ee4 <I2C_WaitOnFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e0d3      	b.n	8004eca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_I2C_Master_Transmit+0x50>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e0cc      	b.n	8004eca <HAL_I2C_Master_Transmit+0x1ea>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d007      	beq.n	8004d56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0201 	orr.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2221      	movs	r2, #33	; 0x21
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2210      	movs	r2, #16
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	893a      	ldrh	r2, [r7, #8]
 8004d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4a50      	ldr	r2, [pc, #320]	; (8004ed8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d98:	8979      	ldrh	r1, [r7, #10]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	6a3a      	ldr	r2, [r7, #32]
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f001 fea8 	bl	8006af4 <I2C_MasterRequestWrite>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e08d      	b.n	8004eca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dae:	2300      	movs	r3, #0
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004dc4:	e066      	b.n	8004e94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	6a39      	ldr	r1, [r7, #32]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f002 f960 	bl	8007090 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00d      	beq.n	8004df2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d107      	bne.n	8004dee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e06b      	b.n	8004eca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	781a      	ldrb	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d11b      	bne.n	8004e68 <HAL_I2C_Master_Transmit+0x188>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d017      	beq.n	8004e68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	781a      	ldrb	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	6a39      	ldr	r1, [r7, #32]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f002 f950 	bl	8007112 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00d      	beq.n	8004e94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d107      	bne.n	8004e90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e01a      	b.n	8004eca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d194      	bne.n	8004dc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e000      	b.n	8004eca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ec8:	2302      	movs	r3, #2
  }
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	00100002 	.word	0x00100002
 8004ed8:	ffff0000 	.word	0xffff0000

08004edc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	; 0x30
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	607a      	str	r2, [r7, #4]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	460b      	mov	r3, r1
 8004eea:	817b      	strh	r3, [r7, #10]
 8004eec:	4613      	mov	r3, r2
 8004eee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ef0:	f7ff fa7a 	bl	80043e8 <HAL_GetTick>
 8004ef4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	f040 820b 	bne.w	800531a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	2319      	movs	r3, #25
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	497c      	ldr	r1, [pc, #496]	; (8005100 <HAL_I2C_Master_Receive+0x224>)
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f001 ffe8 	bl	8006ee4 <I2C_WaitOnFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e1fe      	b.n	800531c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_I2C_Master_Receive+0x50>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e1f7      	b.n	800531c <HAL_I2C_Master_Receive+0x440>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d007      	beq.n	8004f52 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2222      	movs	r2, #34	; 0x22
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	893a      	ldrh	r2, [r7, #8]
 8004f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4a5c      	ldr	r2, [pc, #368]	; (8005104 <HAL_I2C_Master_Receive+0x228>)
 8004f92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f94:	8979      	ldrh	r1, [r7, #10]
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f001 fe2c 	bl	8006bf8 <I2C_MasterRequestRead>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e1b8      	b.n	800531c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d113      	bne.n	8004fda <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	623b      	str	r3, [r7, #32]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e18c      	b.n	80052f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d11b      	bne.n	800501a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e16c      	b.n	80052f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501e:	2b02      	cmp	r3, #2
 8005020:	d11b      	bne.n	800505a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005030:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005040:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005042:	2300      	movs	r3, #0
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	e14c      	b.n	80052f4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005068:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005080:	e138      	b.n	80052f4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005086:	2b03      	cmp	r3, #3
 8005088:	f200 80f1 	bhi.w	800526e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005090:	2b01      	cmp	r3, #1
 8005092:	d123      	bne.n	80050dc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005096:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f002 f8ad 	bl	80071f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e139      	b.n	800531c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050da:	e10b      	b.n	80052f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d14e      	bne.n	8005182 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	2200      	movs	r2, #0
 80050ec:	4906      	ldr	r1, [pc, #24]	; (8005108 <HAL_I2C_Master_Receive+0x22c>)
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f001 fef8 	bl	8006ee4 <I2C_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e10e      	b.n	800531c <HAL_I2C_Master_Receive+0x440>
 80050fe:	bf00      	nop
 8005100:	00100002 	.word	0x00100002
 8005104:	ffff0000 	.word	0xffff0000
 8005108:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005180:	e0b8      	b.n	80052f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	2200      	movs	r2, #0
 800518a:	4966      	ldr	r1, [pc, #408]	; (8005324 <HAL_I2C_Master_Receive+0x448>)
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f001 fea9 	bl	8006ee4 <I2C_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0bf      	b.n	800531c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	2200      	movs	r2, #0
 80051e6:	494f      	ldr	r1, [pc, #316]	; (8005324 <HAL_I2C_Master_Receive+0x448>)
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f001 fe7b 	bl	8006ee4 <I2C_WaitOnFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e091      	b.n	800531c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800526c:	e042      	b.n	80052f4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800526e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005270:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f001 ffc0 	bl	80071f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e04c      	b.n	800531c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d118      	bne.n	80052f4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f47f aec2 	bne.w	8005082 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e000      	b.n	800531c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800531a:	2302      	movs	r3, #2
  }
}
 800531c:	4618      	mov	r0, r3
 800531e:	3728      	adds	r7, #40	; 0x28
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	00010004 	.word	0x00010004

08005328 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005348:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005350:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	2b10      	cmp	r3, #16
 8005356:	d003      	beq.n	8005360 <HAL_I2C_EV_IRQHandler+0x38>
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	2b40      	cmp	r3, #64	; 0x40
 800535c:	f040 80c1 	bne.w	80054e2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10d      	bne.n	8005396 <HAL_I2C_EV_IRQHandler+0x6e>
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005380:	d003      	beq.n	800538a <HAL_I2C_EV_IRQHandler+0x62>
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005388:	d101      	bne.n	800538e <HAL_I2C_EV_IRQHandler+0x66>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <HAL_I2C_EV_IRQHandler+0x68>
 800538e:	2300      	movs	r3, #0
 8005390:	2b01      	cmp	r3, #1
 8005392:	f000 8132 	beq.w	80055fa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00c      	beq.n	80053ba <HAL_I2C_EV_IRQHandler+0x92>
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	0a5b      	lsrs	r3, r3, #9
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d006      	beq.n	80053ba <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f001 ffa8 	bl	8007302 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fd83 	bl	8005ebe <I2C_Master_SB>
 80053b8:	e092      	b.n	80054e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	08db      	lsrs	r3, r3, #3
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d009      	beq.n	80053da <HAL_I2C_EV_IRQHandler+0xb2>
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	0a5b      	lsrs	r3, r3, #9
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fdf9 	bl	8005fca <I2C_Master_ADD10>
 80053d8:	e082      	b.n	80054e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <HAL_I2C_EV_IRQHandler+0xd2>
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	0a5b      	lsrs	r3, r3, #9
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fe13 	bl	800601e <I2C_Master_ADDR>
 80053f8:	e072      	b.n	80054e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	089b      	lsrs	r3, r3, #2
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d03b      	beq.n	800547e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005414:	f000 80f3 	beq.w	80055fe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	09db      	lsrs	r3, r3, #7
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00f      	beq.n	8005444 <HAL_I2C_EV_IRQHandler+0x11c>
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	0a9b      	lsrs	r3, r3, #10
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d009      	beq.n	8005444 <HAL_I2C_EV_IRQHandler+0x11c>
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	089b      	lsrs	r3, r3, #2
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d103      	bne.n	8005444 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f9f3 	bl	8005828 <I2C_MasterTransmit_TXE>
 8005442:	e04d      	b.n	80054e0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	089b      	lsrs	r3, r3, #2
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80d6 	beq.w	80055fe <HAL_I2C_EV_IRQHandler+0x2d6>
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	0a5b      	lsrs	r3, r3, #9
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80cf 	beq.w	80055fe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005460:	7bbb      	ldrb	r3, [r7, #14]
 8005462:	2b21      	cmp	r3, #33	; 0x21
 8005464:	d103      	bne.n	800546e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fa7a 	bl	8005960 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800546c:	e0c7      	b.n	80055fe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	2b40      	cmp	r3, #64	; 0x40
 8005472:	f040 80c4 	bne.w	80055fe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fae8 	bl	8005a4c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800547c:	e0bf      	b.n	80055fe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800548c:	f000 80b7 	beq.w	80055fe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	099b      	lsrs	r3, r3, #6
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00f      	beq.n	80054bc <HAL_I2C_EV_IRQHandler+0x194>
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	0a9b      	lsrs	r3, r3, #10
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d009      	beq.n	80054bc <HAL_I2C_EV_IRQHandler+0x194>
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	089b      	lsrs	r3, r3, #2
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d103      	bne.n	80054bc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fb5d 	bl	8005b74 <I2C_MasterReceive_RXNE>
 80054ba:	e011      	b.n	80054e0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	089b      	lsrs	r3, r3, #2
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 809a 	beq.w	80055fe <HAL_I2C_EV_IRQHandler+0x2d6>
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	0a5b      	lsrs	r3, r3, #9
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 8093 	beq.w	80055fe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fc06 	bl	8005cea <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054de:	e08e      	b.n	80055fe <HAL_I2C_EV_IRQHandler+0x2d6>
 80054e0:	e08d      	b.n	80055fe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d004      	beq.n	80054f4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	e007      	b.n	8005504 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d012      	beq.n	8005536 <HAL_I2C_EV_IRQHandler+0x20e>
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	0a5b      	lsrs	r3, r3, #9
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00c      	beq.n	8005536 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800552c:	69b9      	ldr	r1, [r7, #24]
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 ffc4 	bl	80064bc <I2C_Slave_ADDR>
 8005534:	e066      	b.n	8005604 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d009      	beq.n	8005556 <HAL_I2C_EV_IRQHandler+0x22e>
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	0a5b      	lsrs	r3, r3, #9
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fffe 	bl	8006550 <I2C_Slave_STOPF>
 8005554:	e056      	b.n	8005604 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005556:	7bbb      	ldrb	r3, [r7, #14]
 8005558:	2b21      	cmp	r3, #33	; 0x21
 800555a:	d002      	beq.n	8005562 <HAL_I2C_EV_IRQHandler+0x23a>
 800555c:	7bbb      	ldrb	r3, [r7, #14]
 800555e:	2b29      	cmp	r3, #41	; 0x29
 8005560:	d125      	bne.n	80055ae <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	09db      	lsrs	r3, r3, #7
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00f      	beq.n	800558e <HAL_I2C_EV_IRQHandler+0x266>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	0a9b      	lsrs	r3, r3, #10
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <HAL_I2C_EV_IRQHandler+0x266>
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	089b      	lsrs	r3, r3, #2
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d103      	bne.n	800558e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 feda 	bl	8006340 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800558c:	e039      	b.n	8005602 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	089b      	lsrs	r3, r3, #2
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d033      	beq.n	8005602 <HAL_I2C_EV_IRQHandler+0x2da>
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	0a5b      	lsrs	r3, r3, #9
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d02d      	beq.n	8005602 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 ff07 	bl	80063ba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055ac:	e029      	b.n	8005602 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	099b      	lsrs	r3, r3, #6
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00f      	beq.n	80055da <HAL_I2C_EV_IRQHandler+0x2b2>
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	0a9b      	lsrs	r3, r3, #10
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <HAL_I2C_EV_IRQHandler+0x2b2>
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	089b      	lsrs	r3, r3, #2
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d103      	bne.n	80055da <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 ff12 	bl	80063fc <I2C_SlaveReceive_RXNE>
 80055d8:	e014      	b.n	8005604 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00e      	beq.n	8005604 <HAL_I2C_EV_IRQHandler+0x2dc>
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	0a5b      	lsrs	r3, r3, #9
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d008      	beq.n	8005604 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 ff40 	bl	8006478 <I2C_SlaveReceive_BTF>
 80055f8:	e004      	b.n	8005604 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80055fa:	bf00      	nop
 80055fc:	e002      	b.n	8005604 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055fe:	bf00      	nop
 8005600:	e000      	b.n	8005604 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005602:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b08a      	sub	sp, #40	; 0x28
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005622:	2300      	movs	r3, #0
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800562c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	0a1b      	lsrs	r3, r3, #8
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00e      	beq.n	8005658 <HAL_I2C_ER_IRQHandler+0x4e>
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	0a1b      	lsrs	r3, r3, #8
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	f043 0301 	orr.w	r3, r3, #1
 800564c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005656:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	0a5b      	lsrs	r3, r3, #9
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00e      	beq.n	8005682 <HAL_I2C_ER_IRQHandler+0x78>
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	f043 0302 	orr.w	r3, r3, #2
 8005676:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005680:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	0a9b      	lsrs	r3, r3, #10
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d03f      	beq.n	800570e <HAL_I2C_ER_IRQHandler+0x104>
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	0a1b      	lsrs	r3, r3, #8
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d039      	beq.n	800570e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800569a:	7efb      	ldrb	r3, [r7, #27]
 800569c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ac:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80056b4:	7ebb      	ldrb	r3, [r7, #26]
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d112      	bne.n	80056e0 <HAL_I2C_ER_IRQHandler+0xd6>
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10f      	bne.n	80056e0 <HAL_I2C_ER_IRQHandler+0xd6>
 80056c0:	7cfb      	ldrb	r3, [r7, #19]
 80056c2:	2b21      	cmp	r3, #33	; 0x21
 80056c4:	d008      	beq.n	80056d8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80056c6:	7cfb      	ldrb	r3, [r7, #19]
 80056c8:	2b29      	cmp	r3, #41	; 0x29
 80056ca:	d005      	beq.n	80056d8 <HAL_I2C_ER_IRQHandler+0xce>
 80056cc:	7cfb      	ldrb	r3, [r7, #19]
 80056ce:	2b28      	cmp	r3, #40	; 0x28
 80056d0:	d106      	bne.n	80056e0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b21      	cmp	r3, #33	; 0x21
 80056d6:	d103      	bne.n	80056e0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 f869 	bl	80067b0 <I2C_Slave_AF>
 80056de:	e016      	b.n	800570e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056e8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	f043 0304 	orr.w	r3, r3, #4
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80056f2:	7efb      	ldrb	r3, [r7, #27]
 80056f4:	2b10      	cmp	r3, #16
 80056f6:	d002      	beq.n	80056fe <HAL_I2C_ER_IRQHandler+0xf4>
 80056f8:	7efb      	ldrb	r3, [r7, #27]
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d107      	bne.n	800570e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800570c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	0adb      	lsrs	r3, r3, #11
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00e      	beq.n	8005738 <HAL_I2C_ER_IRQHandler+0x12e>
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	0a1b      	lsrs	r3, r3, #8
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	f043 0308 	orr.w	r3, r3, #8
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005736:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	2b00      	cmp	r3, #0
 800573c:	d008      	beq.n	8005750 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f001 f8a0 	bl	8006890 <I2C_ITError>
  }
}
 8005750:	bf00      	nop
 8005752:	3728      	adds	r7, #40	; 0x28
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	70fb      	strb	r3, [r7, #3]
 80057b4:	4613      	mov	r3, r2
 80057b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005836:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800583e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584a:	2b00      	cmp	r3, #0
 800584c:	d150      	bne.n	80058f0 <I2C_MasterTransmit_TXE+0xc8>
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	2b21      	cmp	r3, #33	; 0x21
 8005852:	d14d      	bne.n	80058f0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b08      	cmp	r3, #8
 8005858:	d01d      	beq.n	8005896 <I2C_MasterTransmit_TXE+0x6e>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b20      	cmp	r3, #32
 800585e:	d01a      	beq.n	8005896 <I2C_MasterTransmit_TXE+0x6e>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005866:	d016      	beq.n	8005896 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005876:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2211      	movs	r2, #17
 800587c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7ff ff62 	bl	8005758 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005894:	e060      	b.n	8005958 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058a4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b40      	cmp	r3, #64	; 0x40
 80058ce:	d107      	bne.n	80058e0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff ff7d 	bl	80057d8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058de:	e03b      	b.n	8005958 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff ff35 	bl	8005758 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058ee:	e033      	b.n	8005958 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2b21      	cmp	r3, #33	; 0x21
 80058f4:	d005      	beq.n	8005902 <I2C_MasterTransmit_TXE+0xda>
 80058f6:	7bbb      	ldrb	r3, [r7, #14]
 80058f8:	2b40      	cmp	r3, #64	; 0x40
 80058fa:	d12d      	bne.n	8005958 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	2b22      	cmp	r3, #34	; 0x22
 8005900:	d12a      	bne.n	8005958 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d108      	bne.n	800591e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800591c:	e01c      	b.n	8005958 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b40      	cmp	r3, #64	; 0x40
 8005928:	d103      	bne.n	8005932 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f88e 	bl	8005a4c <I2C_MemoryTransmit_TXE_BTF>
}
 8005930:	e012      	b.n	8005958 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005956:	e7ff      	b.n	8005958 <I2C_MasterTransmit_TXE+0x130>
 8005958:	bf00      	nop
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b21      	cmp	r3, #33	; 0x21
 8005978:	d164      	bne.n	8005a44 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d012      	beq.n	80059aa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	781a      	ldrb	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80059a8:	e04c      	b.n	8005a44 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d01d      	beq.n	80059ec <I2C_MasterTransmit_BTF+0x8c>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d01a      	beq.n	80059ec <I2C_MasterTransmit_BTF+0x8c>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059bc:	d016      	beq.n	80059ec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059cc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2211      	movs	r2, #17
 80059d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff feb7 	bl	8005758 <HAL_I2C_MasterTxCpltCallback>
}
 80059ea:	e02b      	b.n	8005a44 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059fa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a0a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b40      	cmp	r3, #64	; 0x40
 8005a24:	d107      	bne.n	8005a36 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff fed2 	bl	80057d8 <HAL_I2C_MemTxCpltCallback>
}
 8005a34:	e006      	b.n	8005a44 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff fe8a 	bl	8005758 <HAL_I2C_MasterTxCpltCallback>
}
 8005a44:	bf00      	nop
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d11d      	bne.n	8005aa0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d10b      	bne.n	8005a84 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7c:	1c9a      	adds	r2, r3, #2
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005a82:	e073      	b.n	8005b6c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	121b      	asrs	r3, r3, #8
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a9e:	e065      	b.n	8005b6c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10b      	bne.n	8005ac0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005abe:	e055      	b.n	8005b6c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d151      	bne.n	8005b6c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b22      	cmp	r3, #34	; 0x22
 8005acc:	d10d      	bne.n	8005aea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005adc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ae8:	e040      	b.n	8005b6c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d015      	beq.n	8005b20 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	2b21      	cmp	r3, #33	; 0x21
 8005af8:	d112      	bne.n	8005b20 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	781a      	ldrb	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b1e:	e025      	b.n	8005b6c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d120      	bne.n	8005b6c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	2b21      	cmp	r3, #33	; 0x21
 8005b2e:	d11d      	bne.n	8005b6c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b3e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff fe36 	bl	80057d8 <HAL_I2C_MemTxCpltCallback>
}
 8005b6c:	bf00      	nop
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b22      	cmp	r3, #34	; 0x22
 8005b86:	f040 80ac 	bne.w	8005ce2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d921      	bls.n	8005bdc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691a      	ldr	r2, [r3, #16]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	f040 808c 	bne.w	8005ce2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005bda:	e082      	b.n	8005ce2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d075      	beq.n	8005cd0 <I2C_MasterReceive_RXNE+0x15c>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d002      	beq.n	8005bf0 <I2C_MasterReceive_RXNE+0x7c>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d16f      	bne.n	8005cd0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f001 facf 	bl	8007194 <I2C_WaitOnSTOPRequestThroughIT>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d142      	bne.n	8005c82 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c0a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c1a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691a      	ldr	r2, [r3, #16]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b40      	cmp	r3, #64	; 0x40
 8005c54:	d10a      	bne.n	8005c6c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fdc1 	bl	80057ec <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c6a:	e03a      	b.n	8005ce2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2212      	movs	r2, #18
 8005c78:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff fd76 	bl	800576c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c80:	e02f      	b.n	8005ce2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c90:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff fd99 	bl	8005800 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005cce:	e008      	b.n	8005ce2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cde:	605a      	str	r2, [r3, #4]
}
 8005ce0:	e7ff      	b.n	8005ce2 <I2C_MasterReceive_RXNE+0x16e>
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d11b      	bne.n	8005d3a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d10:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005d38:	e0bd      	b.n	8005eb6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d129      	bne.n	8005d98 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d52:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d00a      	beq.n	8005d70 <I2C_MasterReceive_BTF+0x86>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d007      	beq.n	8005d70 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d6e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d96:	e08e      	b.n	8005eb6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d176      	bne.n	8005e90 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d002      	beq.n	8005dae <I2C_MasterReceive_BTF+0xc4>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b10      	cmp	r3, #16
 8005dac:	d108      	bne.n	8005dc0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	e019      	b.n	8005df4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d002      	beq.n	8005dcc <I2C_MasterReceive_BTF+0xe2>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d108      	bne.n	8005dde <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	e00a      	b.n	8005df4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b10      	cmp	r3, #16
 8005de2:	d007      	beq.n	8005df4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005df2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691a      	ldr	r2, [r3, #16]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e4e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b40      	cmp	r3, #64	; 0x40
 8005e62:	d10a      	bne.n	8005e7a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7ff fcba 	bl	80057ec <HAL_I2C_MemRxCpltCallback>
}
 8005e78:	e01d      	b.n	8005eb6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2212      	movs	r2, #18
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff fc6f 	bl	800576c <HAL_I2C_MasterRxCpltCallback>
}
 8005e8e:	e012      	b.n	8005eb6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691a      	ldr	r2, [r3, #16]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b40      	cmp	r3, #64	; 0x40
 8005ed0:	d117      	bne.n	8005f02 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d109      	bne.n	8005eee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005eea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005eec:	e067      	b.n	8005fbe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f043 0301 	orr.w	r3, r3, #1
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	611a      	str	r2, [r3, #16]
}
 8005f00:	e05d      	b.n	8005fbe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f0a:	d133      	bne.n	8005f74 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b21      	cmp	r3, #33	; 0x21
 8005f16:	d109      	bne.n	8005f2c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f28:	611a      	str	r2, [r3, #16]
 8005f2a:	e008      	b.n	8005f3e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	f043 0301 	orr.w	r3, r3, #1
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <I2C_Master_SB+0x92>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d108      	bne.n	8005f62 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d032      	beq.n	8005fbe <I2C_Master_SB+0x100>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d02d      	beq.n	8005fbe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f70:	605a      	str	r2, [r3, #4]
}
 8005f72:	e024      	b.n	8005fbe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10e      	bne.n	8005f9a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	11db      	asrs	r3, r3, #7
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	f003 0306 	and.w	r3, r3, #6
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f063 030f 	orn	r3, r3, #15
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	611a      	str	r2, [r3, #16]
}
 8005f98:	e011      	b.n	8005fbe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d10d      	bne.n	8005fbe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	11db      	asrs	r3, r3, #7
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f003 0306 	and.w	r3, r3, #6
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	f063 030e 	orn	r3, r3, #14
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	611a      	str	r2, [r3, #16]
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d004      	beq.n	8005ff0 <I2C_Master_ADD10+0x26>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d108      	bne.n	8006002 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00c      	beq.n	8006012 <I2C_Master_ADD10+0x48>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d007      	beq.n	8006012 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006010:	605a      	str	r2, [r3, #4]
  }
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800601e:	b480      	push	{r7}
 8006020:	b091      	sub	sp, #68	; 0x44
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800602c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b22      	cmp	r3, #34	; 0x22
 8006046:	f040 8169 	bne.w	800631c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10f      	bne.n	8006072 <I2C_Master_ADDR+0x54>
 8006052:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	d10b      	bne.n	8006072 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800605a:	2300      	movs	r3, #0
 800605c:	633b      	str	r3, [r7, #48]	; 0x30
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	633b      	str	r3, [r7, #48]	; 0x30
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	633b      	str	r3, [r7, #48]	; 0x30
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	e160      	b.n	8006334 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006076:	2b00      	cmp	r3, #0
 8006078:	d11d      	bne.n	80060b6 <I2C_Master_ADDR+0x98>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006082:	d118      	bne.n	80060b6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006084:	2300      	movs	r3, #0
 8006086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060a8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	651a      	str	r2, [r3, #80]	; 0x50
 80060b4:	e13e      	b.n	8006334 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d113      	bne.n	80060e8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c0:	2300      	movs	r3, #0
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	e115      	b.n	8006314 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	f040 808a 	bne.w	8006208 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80060f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060fa:	d137      	bne.n	800616c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800610a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800611a:	d113      	bne.n	8006144 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612c:	2300      	movs	r3, #0
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	e0e7      	b.n	8006314 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006144:	2300      	movs	r3, #0
 8006146:	623b      	str	r3, [r7, #32]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	623b      	str	r3, [r7, #32]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	623b      	str	r3, [r7, #32]
 8006158:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e0d3      	b.n	8006314 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	2b08      	cmp	r3, #8
 8006170:	d02e      	beq.n	80061d0 <I2C_Master_ADDR+0x1b2>
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	2b20      	cmp	r3, #32
 8006176:	d02b      	beq.n	80061d0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617a:	2b12      	cmp	r3, #18
 800617c:	d102      	bne.n	8006184 <I2C_Master_ADDR+0x166>
 800617e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006180:	2b01      	cmp	r3, #1
 8006182:	d125      	bne.n	80061d0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	2b04      	cmp	r3, #4
 8006188:	d00e      	beq.n	80061a8 <I2C_Master_ADDR+0x18a>
 800618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618c:	2b02      	cmp	r3, #2
 800618e:	d00b      	beq.n	80061a8 <I2C_Master_ADDR+0x18a>
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	2b10      	cmp	r3, #16
 8006194:	d008      	beq.n	80061a8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e007      	b.n	80061b8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061b6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061b8:	2300      	movs	r3, #0
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	e0a1      	b.n	8006314 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061de:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061e0:	2300      	movs	r3, #0
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	61bb      	str	r3, [r7, #24]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	61bb      	str	r3, [r7, #24]
 80061f4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	e085      	b.n	8006314 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d14d      	bne.n	80062ae <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	2b04      	cmp	r3, #4
 8006216:	d016      	beq.n	8006246 <I2C_Master_ADDR+0x228>
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	2b02      	cmp	r3, #2
 800621c:	d013      	beq.n	8006246 <I2C_Master_ADDR+0x228>
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	2b10      	cmp	r3, #16
 8006222:	d010      	beq.n	8006246 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006232:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	e007      	b.n	8006256 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006254:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006264:	d117      	bne.n	8006296 <I2C_Master_ADDR+0x278>
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800626c:	d00b      	beq.n	8006286 <I2C_Master_ADDR+0x268>
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	2b01      	cmp	r3, #1
 8006272:	d008      	beq.n	8006286 <I2C_Master_ADDR+0x268>
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	2b08      	cmp	r3, #8
 8006278:	d005      	beq.n	8006286 <I2C_Master_ADDR+0x268>
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	2b10      	cmp	r3, #16
 800627e:	d002      	beq.n	8006286 <I2C_Master_ADDR+0x268>
 8006280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006282:	2b20      	cmp	r3, #32
 8006284:	d107      	bne.n	8006296 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006294:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006296:	2300      	movs	r3, #0
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	e032      	b.n	8006314 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062bc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062cc:	d117      	bne.n	80062fe <I2C_Master_ADDR+0x2e0>
 80062ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062d4:	d00b      	beq.n	80062ee <I2C_Master_ADDR+0x2d0>
 80062d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d008      	beq.n	80062ee <I2C_Master_ADDR+0x2d0>
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	2b08      	cmp	r3, #8
 80062e0:	d005      	beq.n	80062ee <I2C_Master_ADDR+0x2d0>
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	2b10      	cmp	r3, #16
 80062e6:	d002      	beq.n	80062ee <I2C_Master_ADDR+0x2d0>
 80062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ea:	2b20      	cmp	r3, #32
 80062ec:	d107      	bne.n	80062fe <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062fc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062fe:	2300      	movs	r3, #0
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	613b      	str	r3, [r7, #16]
 8006312:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800631a:	e00b      	b.n	8006334 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800631c:	2300      	movs	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
}
 8006332:	e7ff      	b.n	8006334 <I2C_Master_ADDR+0x316>
 8006334:	bf00      	nop
 8006336:	3744      	adds	r7, #68	; 0x44
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d02b      	beq.n	80063b2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d114      	bne.n	80063b2 <I2C_SlaveTransmit_TXE+0x72>
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	2b29      	cmp	r3, #41	; 0x29
 800638c:	d111      	bne.n	80063b2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2221      	movs	r2, #33	; 0x21
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2228      	movs	r2, #40	; 0x28
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff f9e7 	bl	8005780 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d011      	beq.n	80063f0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	781a      	ldrb	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800640a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006410:	b29b      	uxth	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d02c      	beq.n	8006470 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006432:	b29b      	uxth	r3, r3
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006440:	b29b      	uxth	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d114      	bne.n	8006470 <I2C_SlaveReceive_RXNE+0x74>
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	2b2a      	cmp	r3, #42	; 0x2a
 800644a:	d111      	bne.n	8006470 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800645a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2222      	movs	r2, #34	; 0x22
 8006460:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2228      	movs	r2, #40	; 0x28
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff f992 	bl	8005794 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006470:	bf00      	nop
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006484:	b29b      	uxth	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d012      	beq.n	80064b0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80064c6:	2300      	movs	r3, #0
 80064c8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064d6:	2b28      	cmp	r3, #40	; 0x28
 80064d8:	d127      	bne.n	800652a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	089b      	lsrs	r3, r3, #2
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80064f6:	2301      	movs	r3, #1
 80064f8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	09db      	lsrs	r3, r3, #7
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d103      	bne.n	800650e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	81bb      	strh	r3, [r7, #12]
 800650c:	e002      	b.n	8006514 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800651c:	89ba      	ldrh	r2, [r7, #12]
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7ff f940 	bl	80057a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006528:	e00e      	b.n	8006548 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800652a:	2300      	movs	r3, #0
 800652c:	60bb      	str	r3, [r7, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800656e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006570:	2300      	movs	r3, #0
 8006572:	60bb      	str	r3, [r7, #8]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0201 	orr.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800659c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ac:	d172      	bne.n	8006694 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	2b22      	cmp	r3, #34	; 0x22
 80065b2:	d002      	beq.n	80065ba <I2C_Slave_STOPF+0x6a>
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	2b2a      	cmp	r3, #42	; 0x2a
 80065b8:	d135      	bne.n	8006626 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	f043 0204 	orr.w	r2, r3, #4
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe f85b 	bl	80046ae <HAL_DMA_GetState>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d049      	beq.n	8006692 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	4a69      	ldr	r2, [pc, #420]	; (80067a8 <I2C_Slave_STOPF+0x258>)
 8006604:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe f82d 	bl	800466a <HAL_DMA_Abort_IT>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d03d      	beq.n	8006692 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006620:	4610      	mov	r0, r2
 8006622:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006624:	e035      	b.n	8006692 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	b29a      	uxth	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	f043 0204 	orr.w	r2, r3, #4
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006658:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe f825 	bl	80046ae <HAL_DMA_GetState>
 8006664:	4603      	mov	r3, r0
 8006666:	2b01      	cmp	r3, #1
 8006668:	d014      	beq.n	8006694 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666e:	4a4e      	ldr	r2, [pc, #312]	; (80067a8 <I2C_Slave_STOPF+0x258>)
 8006670:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006676:	4618      	mov	r0, r3
 8006678:	f7fd fff7 	bl	800466a <HAL_DMA_Abort_IT>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d008      	beq.n	8006694 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800668c:	4610      	mov	r0, r2
 800668e:	4798      	blx	r3
 8006690:	e000      	b.n	8006694 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006692:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d03e      	beq.n	800671c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d112      	bne.n	80066d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	3b01      	subs	r3, #1
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066dc:	2b40      	cmp	r3, #64	; 0x40
 80066de:	d112      	bne.n	8006706 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691a      	ldr	r2, [r3, #16]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	3b01      	subs	r3, #1
 8006700:	b29a      	uxth	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670a:	b29b      	uxth	r3, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	d005      	beq.n	800671c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	f043 0204 	orr.w	r2, r3, #4
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f8b3 	bl	8006890 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800672a:	e039      	b.n	80067a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	2b2a      	cmp	r3, #42	; 0x2a
 8006730:	d109      	bne.n	8006746 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2228      	movs	r2, #40	; 0x28
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7ff f827 	bl	8005794 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b28      	cmp	r3, #40	; 0x28
 8006750:	d111      	bne.n	8006776 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a15      	ldr	r2, [pc, #84]	; (80067ac <I2C_Slave_STOPF+0x25c>)
 8006756:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff f828 	bl	80057c4 <HAL_I2C_ListenCpltCallback>
}
 8006774:	e014      	b.n	80067a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677a:	2b22      	cmp	r3, #34	; 0x22
 800677c:	d002      	beq.n	8006784 <I2C_Slave_STOPF+0x234>
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	2b22      	cmp	r3, #34	; 0x22
 8006782:	d10d      	bne.n	80067a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fe fffa 	bl	8005794 <HAL_I2C_SlaveRxCpltCallback>
}
 80067a0:	bf00      	nop
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	08006d95 	.word	0x08006d95
 80067ac:	ffff0000 	.word	0xffff0000

080067b0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067be:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d002      	beq.n	80067d2 <I2C_Slave_AF+0x22>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d129      	bne.n	8006826 <I2C_Slave_AF+0x76>
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	2b28      	cmp	r3, #40	; 0x28
 80067d6:	d126      	bne.n	8006826 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a2c      	ldr	r2, [pc, #176]	; (800688c <I2C_Slave_AF+0xdc>)
 80067dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067ec:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067f6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006806:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7fe ffd0 	bl	80057c4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006824:	e02e      	b.n	8006884 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	2b21      	cmp	r3, #33	; 0x21
 800682a:	d126      	bne.n	800687a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a17      	ldr	r2, [pc, #92]	; (800688c <I2C_Slave_AF+0xdc>)
 8006830:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2221      	movs	r2, #33	; 0x21
 8006836:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006856:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006860:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006870:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7fe ff84 	bl	8005780 <HAL_I2C_SlaveTxCpltCallback>
}
 8006878:	e004      	b.n	8006884 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006882:	615a      	str	r2, [r3, #20]
}
 8006884:	bf00      	nop
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	ffff0000 	.word	0xffff0000

08006890 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80068a8:	7bbb      	ldrb	r3, [r7, #14]
 80068aa:	2b10      	cmp	r3, #16
 80068ac:	d002      	beq.n	80068b4 <I2C_ITError+0x24>
 80068ae:	7bbb      	ldrb	r3, [r7, #14]
 80068b0:	2b40      	cmp	r3, #64	; 0x40
 80068b2:	d10a      	bne.n	80068ca <I2C_ITError+0x3a>
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
 80068b6:	2b22      	cmp	r3, #34	; 0x22
 80068b8:	d107      	bne.n	80068ca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068c8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80068d0:	2b28      	cmp	r3, #40	; 0x28
 80068d2:	d107      	bne.n	80068e4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2228      	movs	r2, #40	; 0x28
 80068de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80068e2:	e015      	b.n	8006910 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f2:	d00a      	beq.n	800690a <I2C_ITError+0x7a>
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	2b60      	cmp	r3, #96	; 0x60
 80068f8:	d007      	beq.n	800690a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800691a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800691e:	d162      	bne.n	80069e6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800692e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b01      	cmp	r3, #1
 800693c:	d020      	beq.n	8006980 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006942:	4a6a      	ldr	r2, [pc, #424]	; (8006aec <I2C_ITError+0x25c>)
 8006944:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694a:	4618      	mov	r0, r3
 800694c:	f7fd fe8d 	bl	800466a <HAL_DMA_Abort_IT>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 8089 	beq.w	8006a6a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0201 	bic.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800697a:	4610      	mov	r0, r2
 800697c:	4798      	blx	r3
 800697e:	e074      	b.n	8006a6a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	4a59      	ldr	r2, [pc, #356]	; (8006aec <I2C_ITError+0x25c>)
 8006986:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	4618      	mov	r0, r3
 800698e:	f7fd fe6c 	bl	800466a <HAL_DMA_Abort_IT>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d068      	beq.n	8006a6a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a2:	2b40      	cmp	r3, #64	; 0x40
 80069a4:	d10b      	bne.n	80069be <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0201 	bic.w	r2, r2, #1
 80069cc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	e041      	b.n	8006a6a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b60      	cmp	r3, #96	; 0x60
 80069f0:	d125      	bne.n	8006a3e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0a:	2b40      	cmp	r3, #64	; 0x40
 8006a0c:	d10b      	bne.n	8006a26 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fe feec 	bl	8005814 <HAL_I2C_AbortCpltCallback>
 8006a3c:	e015      	b.n	8006a6a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a48:	2b40      	cmp	r3, #64	; 0x40
 8006a4a:	d10b      	bne.n	8006a64 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691a      	ldr	r2, [r3, #16]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7fe fecb 	bl	8005800 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10e      	bne.n	8006a98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d109      	bne.n	8006a98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d007      	beq.n	8006aa8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006aa6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d113      	bne.n	8006ae4 <I2C_ITError+0x254>
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	2b28      	cmp	r3, #40	; 0x28
 8006ac0:	d110      	bne.n	8006ae4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a0a      	ldr	r2, [pc, #40]	; (8006af0 <I2C_ITError+0x260>)
 8006ac6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fe fe70 	bl	80057c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ae4:	bf00      	nop
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	08006d95 	.word	0x08006d95
 8006af0:	ffff0000 	.word	0xffff0000

08006af4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	607a      	str	r2, [r7, #4]
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	460b      	mov	r3, r1
 8006b02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d006      	beq.n	8006b1e <I2C_MasterRequestWrite+0x2a>
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d003      	beq.n	8006b1e <I2C_MasterRequestWrite+0x2a>
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b1c:	d108      	bne.n	8006b30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	e00b      	b.n	8006b48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b34:	2b12      	cmp	r3, #18
 8006b36:	d107      	bne.n	8006b48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f9c5 	bl	8006ee4 <I2C_WaitOnFlagUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00d      	beq.n	8006b7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b6e:	d103      	bne.n	8006b78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e035      	b.n	8006be8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b84:	d108      	bne.n	8006b98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b86:	897b      	ldrh	r3, [r7, #10]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b94:	611a      	str	r2, [r3, #16]
 8006b96:	e01b      	b.n	8006bd0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006b98:	897b      	ldrh	r3, [r7, #10]
 8006b9a:	11db      	asrs	r3, r3, #7
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	f003 0306 	and.w	r3, r3, #6
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f063 030f 	orn	r3, r3, #15
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	490e      	ldr	r1, [pc, #56]	; (8006bf0 <I2C_MasterRequestWrite+0xfc>)
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 f9eb 	bl	8006f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e010      	b.n	8006be8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006bc6:	897b      	ldrh	r3, [r7, #10]
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	4907      	ldr	r1, [pc, #28]	; (8006bf4 <I2C_MasterRequestWrite+0x100>)
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 f9db 	bl	8006f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	00010008 	.word	0x00010008
 8006bf4:	00010002 	.word	0x00010002

08006bf8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af02      	add	r7, sp, #8
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	607a      	str	r2, [r7, #4]
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	460b      	mov	r3, r1
 8006c06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c1c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d006      	beq.n	8006c32 <I2C_MasterRequestRead+0x3a>
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d003      	beq.n	8006c32 <I2C_MasterRequestRead+0x3a>
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c30:	d108      	bne.n	8006c44 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	e00b      	b.n	8006c5c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c48:	2b11      	cmp	r3, #17
 8006c4a:	d107      	bne.n	8006c5c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f93b 	bl	8006ee4 <I2C_WaitOnFlagUntilTimeout>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00d      	beq.n	8006c90 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c82:	d103      	bne.n	8006c8c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e079      	b.n	8006d84 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c98:	d108      	bne.n	8006cac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c9a:	897b      	ldrh	r3, [r7, #10]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	f043 0301 	orr.w	r3, r3, #1
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	611a      	str	r2, [r3, #16]
 8006caa:	e05f      	b.n	8006d6c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006cac:	897b      	ldrh	r3, [r7, #10]
 8006cae:	11db      	asrs	r3, r3, #7
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	f003 0306 	and.w	r3, r3, #6
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	f063 030f 	orn	r3, r3, #15
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	4930      	ldr	r1, [pc, #192]	; (8006d8c <I2C_MasterRequestRead+0x194>)
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 f961 	bl	8006f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e054      	b.n	8006d84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006cda:	897b      	ldrh	r3, [r7, #10]
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	4929      	ldr	r1, [pc, #164]	; (8006d90 <I2C_MasterRequestRead+0x198>)
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 f951 	bl	8006f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e044      	b.n	8006d84 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	613b      	str	r3, [r7, #16]
 8006d0e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d1e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 f8d9 	bl	8006ee4 <I2C_WaitOnFlagUntilTimeout>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00d      	beq.n	8006d54 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d46:	d103      	bne.n	8006d50 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e017      	b.n	8006d84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006d54:	897b      	ldrh	r3, [r7, #10]
 8006d56:	11db      	asrs	r3, r3, #7
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	f003 0306 	and.w	r3, r3, #6
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	f063 030e 	orn	r3, r3, #14
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	4907      	ldr	r1, [pc, #28]	; (8006d90 <I2C_MasterRequestRead+0x198>)
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 f90d 	bl	8006f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	00010008 	.word	0x00010008
 8006d90:	00010002 	.word	0x00010002

08006d94 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006dae:	4b4b      	ldr	r3, [pc, #300]	; (8006edc <I2C_DMAAbort+0x148>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	08db      	lsrs	r3, r3, #3
 8006db4:	4a4a      	ldr	r2, [pc, #296]	; (8006ee0 <I2C_DMAAbort+0x14c>)
 8006db6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dba:	0a1a      	lsrs	r2, r3, #8
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	00da      	lsls	r2, r3, #3
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	f043 0220 	orr.w	r2, r3, #32
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006dda:	e00a      	b.n	8006df2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df0:	d0ea      	beq.n	8006dc8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfe:	2200      	movs	r2, #0
 8006e00:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0e:	2200      	movs	r2, #0
 8006e10:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e20:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2200      	movs	r2, #0
 8006e26:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e34:	2200      	movs	r2, #0
 8006e36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e44:	2200      	movs	r2, #0
 8006e46:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 0201 	bic.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b60      	cmp	r3, #96	; 0x60
 8006e62:	d10e      	bne.n	8006e82 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2200      	movs	r2, #0
 8006e78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e7a:	6978      	ldr	r0, [r7, #20]
 8006e7c:	f7fe fcca 	bl	8005814 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e80:	e027      	b.n	8006ed2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e82:	7cfb      	ldrb	r3, [r7, #19]
 8006e84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e88:	2b28      	cmp	r3, #40	; 0x28
 8006e8a:	d117      	bne.n	8006ebc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0201 	orr.w	r2, r2, #1
 8006e9a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006eaa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2228      	movs	r2, #40	; 0x28
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006eba:	e007      	b.n	8006ecc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006ecc:	6978      	ldr	r0, [r7, #20]
 8006ece:	f7fe fc97 	bl	8005800 <HAL_I2C_ErrorCallback>
}
 8006ed2:	bf00      	nop
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	20000014 	.word	0x20000014
 8006ee0:	14f8b589 	.word	0x14f8b589

08006ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	603b      	str	r3, [r7, #0]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ef4:	e025      	b.n	8006f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efc:	d021      	beq.n	8006f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006efe:	f7fd fa73 	bl	80043e8 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d302      	bcc.n	8006f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d116      	bne.n	8006f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	f043 0220 	orr.w	r2, r3, #32
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e023      	b.n	8006f8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	0c1b      	lsrs	r3, r3, #16
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d10d      	bne.n	8006f68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	43da      	mvns	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4013      	ands	r3, r2
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	bf0c      	ite	eq
 8006f5e:	2301      	moveq	r3, #1
 8006f60:	2300      	movne	r3, #0
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	e00c      	b.n	8006f82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	43da      	mvns	r2, r3
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4013      	ands	r3, r2
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	bf0c      	ite	eq
 8006f7a:	2301      	moveq	r3, #1
 8006f7c:	2300      	movne	r3, #0
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d0b6      	beq.n	8006ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	60f8      	str	r0, [r7, #12]
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	607a      	str	r2, [r7, #4]
 8006f9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fa0:	e051      	b.n	8007046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fb0:	d123      	bne.n	8006ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	f043 0204 	orr.w	r2, r3, #4
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e046      	b.n	8007088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007000:	d021      	beq.n	8007046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007002:	f7fd f9f1 	bl	80043e8 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	429a      	cmp	r2, r3
 8007010:	d302      	bcc.n	8007018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d116      	bne.n	8007046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	f043 0220 	orr.w	r2, r3, #32
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e020      	b.n	8007088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	0c1b      	lsrs	r3, r3, #16
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b01      	cmp	r3, #1
 800704e:	d10c      	bne.n	800706a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	43da      	mvns	r2, r3
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	4013      	ands	r3, r2
 800705c:	b29b      	uxth	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	bf14      	ite	ne
 8007062:	2301      	movne	r3, #1
 8007064:	2300      	moveq	r3, #0
 8007066:	b2db      	uxtb	r3, r3
 8007068:	e00b      	b.n	8007082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	43da      	mvns	r2, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	4013      	ands	r3, r2
 8007076:	b29b      	uxth	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	bf14      	ite	ne
 800707c:	2301      	movne	r3, #1
 800707e:	2300      	moveq	r3, #0
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d18d      	bne.n	8006fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800709c:	e02d      	b.n	80070fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 f900 	bl	80072a4 <I2C_IsAcknowledgeFailed>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e02d      	b.n	800710a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b4:	d021      	beq.n	80070fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070b6:	f7fd f997 	bl	80043e8 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d302      	bcc.n	80070cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d116      	bne.n	80070fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	f043 0220 	orr.w	r2, r3, #32
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e007      	b.n	800710a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007104:	2b80      	cmp	r3, #128	; 0x80
 8007106:	d1ca      	bne.n	800709e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800711e:	e02d      	b.n	800717c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f8bf 	bl	80072a4 <I2C_IsAcknowledgeFailed>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e02d      	b.n	800718c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007136:	d021      	beq.n	800717c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007138:	f7fd f956 	bl	80043e8 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	429a      	cmp	r2, r3
 8007146:	d302      	bcc.n	800714e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d116      	bne.n	800717c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	f043 0220 	orr.w	r2, r3, #32
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e007      	b.n	800718c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	2b04      	cmp	r3, #4
 8007188:	d1ca      	bne.n	8007120 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80071a0:	4b13      	ldr	r3, [pc, #76]	; (80071f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	08db      	lsrs	r3, r3, #3
 80071a6:	4a13      	ldr	r2, [pc, #76]	; (80071f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80071a8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ac:	0a1a      	lsrs	r2, r3, #8
 80071ae:	4613      	mov	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d107      	bne.n	80071d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	f043 0220 	orr.w	r2, r3, #32
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e008      	b.n	80071e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071e0:	d0e9      	beq.n	80071b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	20000014 	.word	0x20000014
 80071f4:	14f8b589 	.word	0x14f8b589

080071f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007204:	e042      	b.n	800728c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	2b10      	cmp	r3, #16
 8007212:	d119      	bne.n	8007248 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f06f 0210 	mvn.w	r2, #16
 800721c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2220      	movs	r2, #32
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e029      	b.n	800729c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007248:	f7fd f8ce 	bl	80043e8 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	429a      	cmp	r2, r3
 8007256:	d302      	bcc.n	800725e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d116      	bne.n	800728c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2220      	movs	r2, #32
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	f043 0220 	orr.w	r2, r3, #32
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e007      	b.n	800729c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007296:	2b40      	cmp	r3, #64	; 0x40
 8007298:	d1b5      	bne.n	8007206 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ba:	d11b      	bne.n	80072f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e0:	f043 0204 	orr.w	r2, r3, #4
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007312:	d103      	bne.n	800731c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800731a:	e007      	b.n	800732c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007324:	d102      	bne.n	800732c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2208      	movs	r2, #8
 800732a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b20      	cmp	r3, #32
 800734c:	d129      	bne.n	80073a2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2224      	movs	r2, #36	; 0x24
 8007352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0201 	bic.w	r2, r2, #1
 8007364:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0210 	bic.w	r2, r2, #16
 8007374:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0201 	orr.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2220      	movs	r2, #32
 800739a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	e000      	b.n	80073a4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80073a2:	2302      	movs	r3, #2
  }
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d12a      	bne.n	8007420 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2224      	movs	r2, #36	; 0x24
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0201 	bic.w	r2, r2, #1
 80073e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80073ea:	89fb      	ldrh	r3, [r7, #14]
 80073ec:	f023 030f 	bic.w	r3, r3, #15
 80073f0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	89fb      	ldrh	r3, [r7, #14]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	89fa      	ldrh	r2, [r7, #14]
 8007402:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	e000      	b.n	8007422 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007420:	2302      	movs	r3, #2
  }
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800742e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007430:	b08f      	sub	sp, #60	; 0x3c
 8007432:	af0a      	add	r7, sp, #40	; 0x28
 8007434:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e10f      	b.n	8007660 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d106      	bne.n	8007460 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f006 fee2 	bl	800e224 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2203      	movs	r2, #3
 8007464:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007470:	2b00      	cmp	r3, #0
 8007472:	d102      	bne.n	800747a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4618      	mov	r0, r3
 8007480:	f003 f9bd 	bl	800a7fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	603b      	str	r3, [r7, #0]
 800748a:	687e      	ldr	r6, [r7, #4]
 800748c:	466d      	mov	r5, sp
 800748e:	f106 0410 	add.w	r4, r6, #16
 8007492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800749a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800749e:	e885 0003 	stmia.w	r5, {r0, r1}
 80074a2:	1d33      	adds	r3, r6, #4
 80074a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074a6:	6838      	ldr	r0, [r7, #0]
 80074a8:	f003 f894 	bl	800a5d4 <USB_CoreInit>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2202      	movs	r2, #2
 80074b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e0d0      	b.n	8007660 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2100      	movs	r1, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f003 f9ab 	bl	800a820 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074ca:	2300      	movs	r3, #0
 80074cc:	73fb      	strb	r3, [r7, #15]
 80074ce:	e04a      	b.n	8007566 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80074d0:	7bfa      	ldrb	r2, [r7, #15]
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	4613      	mov	r3, r2
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	440b      	add	r3, r1
 80074de:	333d      	adds	r3, #61	; 0x3d
 80074e0:	2201      	movs	r2, #1
 80074e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80074e4:	7bfa      	ldrb	r2, [r7, #15]
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	333c      	adds	r3, #60	; 0x3c
 80074f4:	7bfa      	ldrb	r2, [r7, #15]
 80074f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80074f8:	7bfa      	ldrb	r2, [r7, #15]
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	b298      	uxth	r0, r3
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	4613      	mov	r3, r2
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	440b      	add	r3, r1
 800750a:	3344      	adds	r3, #68	; 0x44
 800750c:	4602      	mov	r2, r0
 800750e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007510:	7bfa      	ldrb	r2, [r7, #15]
 8007512:	6879      	ldr	r1, [r7, #4]
 8007514:	4613      	mov	r3, r2
 8007516:	00db      	lsls	r3, r3, #3
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	440b      	add	r3, r1
 800751e:	3340      	adds	r3, #64	; 0x40
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007524:	7bfa      	ldrb	r2, [r7, #15]
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	4613      	mov	r3, r2
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	3348      	adds	r3, #72	; 0x48
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007538:	7bfa      	ldrb	r2, [r7, #15]
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	4613      	mov	r3, r2
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	334c      	adds	r3, #76	; 0x4c
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800754c:	7bfa      	ldrb	r2, [r7, #15]
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	4613      	mov	r3, r2
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	440b      	add	r3, r1
 800755a:	3354      	adds	r3, #84	; 0x54
 800755c:	2200      	movs	r2, #0
 800755e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	3301      	adds	r3, #1
 8007564:	73fb      	strb	r3, [r7, #15]
 8007566:	7bfa      	ldrb	r2, [r7, #15]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	429a      	cmp	r2, r3
 800756e:	d3af      	bcc.n	80074d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007570:	2300      	movs	r3, #0
 8007572:	73fb      	strb	r3, [r7, #15]
 8007574:	e044      	b.n	8007600 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007576:	7bfa      	ldrb	r2, [r7, #15]
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	4613      	mov	r3, r2
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	4413      	add	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	440b      	add	r3, r1
 8007584:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800758c:	7bfa      	ldrb	r2, [r7, #15]
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	4613      	mov	r3, r2
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4413      	add	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800759e:	7bfa      	ldrb	r2, [r7, #15]
 80075a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80075a2:	7bfa      	ldrb	r2, [r7, #15]
 80075a4:	6879      	ldr	r1, [r7, #4]
 80075a6:	4613      	mov	r3, r2
 80075a8:	00db      	lsls	r3, r3, #3
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	440b      	add	r3, r1
 80075b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80075b4:	2200      	movs	r2, #0
 80075b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80075b8:	7bfa      	ldrb	r2, [r7, #15]
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	4613      	mov	r3, r2
 80075be:	00db      	lsls	r3, r3, #3
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80075ce:	7bfa      	ldrb	r2, [r7, #15]
 80075d0:	6879      	ldr	r1, [r7, #4]
 80075d2:	4613      	mov	r3, r2
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	4413      	add	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	440b      	add	r3, r1
 80075dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80075e4:	7bfa      	ldrb	r2, [r7, #15]
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	4613      	mov	r3, r2
 80075ea:	00db      	lsls	r3, r3, #3
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80075f6:	2200      	movs	r2, #0
 80075f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	3301      	adds	r3, #1
 80075fe:	73fb      	strb	r3, [r7, #15]
 8007600:	7bfa      	ldrb	r2, [r7, #15]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	429a      	cmp	r2, r3
 8007608:	d3b5      	bcc.n	8007576 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	603b      	str	r3, [r7, #0]
 8007610:	687e      	ldr	r6, [r7, #4]
 8007612:	466d      	mov	r5, sp
 8007614:	f106 0410 	add.w	r4, r6, #16
 8007618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800761a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800761c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800761e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007620:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007624:	e885 0003 	stmia.w	r5, {r0, r1}
 8007628:	1d33      	adds	r3, r6, #4
 800762a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800762c:	6838      	ldr	r0, [r7, #0]
 800762e:	f003 f943 	bl	800a8b8 <USB_DevInit>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d005      	beq.n	8007644 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e00d      	b.n	8007660 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4618      	mov	r0, r3
 800765a:	f004 fa92 	bl	800bb82 <USB_DevDisconnect>

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007668 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800767c:	2b01      	cmp	r3, #1
 800767e:	d101      	bne.n	8007684 <HAL_PCD_Start+0x1c>
 8007680:	2302      	movs	r3, #2
 8007682:	e020      	b.n	80076c6 <HAL_PCD_Start+0x5e>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007690:	2b01      	cmp	r3, #1
 8007692:	d109      	bne.n	80076a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007698:	2b01      	cmp	r3, #1
 800769a:	d005      	beq.n	80076a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f003 f895 	bl	800a7dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f004 fa42 	bl	800bb40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80076ce:	b590      	push	{r4, r7, lr}
 80076d0:	b08d      	sub	sp, #52	; 0x34
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f004 fb00 	bl	800bcea <USB_GetMode>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f040 848a 	bne.w	8008006 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f004 fa64 	bl	800bbc4 <USB_ReadInterrupts>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 8480 	beq.w	8008004 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	0a1b      	lsrs	r3, r3, #8
 800770e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4618      	mov	r0, r3
 800771e:	f004 fa51 	bl	800bbc4 <USB_ReadInterrupts>
 8007722:	4603      	mov	r3, r0
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b02      	cmp	r3, #2
 800772a:	d107      	bne.n	800773c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695a      	ldr	r2, [r3, #20]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f002 0202 	and.w	r2, r2, #2
 800773a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4618      	mov	r0, r3
 8007742:	f004 fa3f 	bl	800bbc4 <USB_ReadInterrupts>
 8007746:	4603      	mov	r3, r0
 8007748:	f003 0310 	and.w	r3, r3, #16
 800774c:	2b10      	cmp	r3, #16
 800774e:	d161      	bne.n	8007814 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	699a      	ldr	r2, [r3, #24]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 0210 	bic.w	r2, r2, #16
 800775e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	f003 020f 	and.w	r2, r3, #15
 800776c:	4613      	mov	r3, r2
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	4413      	add	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	4413      	add	r3, r2
 800777c:	3304      	adds	r3, #4
 800777e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	0c5b      	lsrs	r3, r3, #17
 8007784:	f003 030f 	and.w	r3, r3, #15
 8007788:	2b02      	cmp	r3, #2
 800778a:	d124      	bne.n	80077d6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007792:	4013      	ands	r3, r2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d035      	beq.n	8007804 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	091b      	lsrs	r3, r3, #4
 80077a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80077a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	461a      	mov	r2, r3
 80077aa:	6a38      	ldr	r0, [r7, #32]
 80077ac:	f004 f876 	bl	800b89c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	091b      	lsrs	r3, r3, #4
 80077b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077bc:	441a      	add	r2, r3
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	6a1a      	ldr	r2, [r3, #32]
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	091b      	lsrs	r3, r3, #4
 80077ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077ce:	441a      	add	r2, r3
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	621a      	str	r2, [r3, #32]
 80077d4:	e016      	b.n	8007804 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	0c5b      	lsrs	r3, r3, #17
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	2b06      	cmp	r3, #6
 80077e0:	d110      	bne.n	8007804 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80077e8:	2208      	movs	r2, #8
 80077ea:	4619      	mov	r1, r3
 80077ec:	6a38      	ldr	r0, [r7, #32]
 80077ee:	f004 f855 	bl	800b89c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	6a1a      	ldr	r2, [r3, #32]
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	091b      	lsrs	r3, r3, #4
 80077fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077fe:	441a      	add	r2, r3
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699a      	ldr	r2, [r3, #24]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 0210 	orr.w	r2, r2, #16
 8007812:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4618      	mov	r0, r3
 800781a:	f004 f9d3 	bl	800bbc4 <USB_ReadInterrupts>
 800781e:	4603      	mov	r3, r0
 8007820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007824:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007828:	f040 80a7 	bne.w	800797a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4618      	mov	r0, r3
 8007836:	f004 f9d8 	bl	800bbea <USB_ReadDevAllOutEpInterrupt>
 800783a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800783c:	e099      	b.n	8007972 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 808e 	beq.w	8007966 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007850:	b2d2      	uxtb	r2, r2
 8007852:	4611      	mov	r1, r2
 8007854:	4618      	mov	r0, r3
 8007856:	f004 f9fc 	bl	800bc52 <USB_ReadDevOutEPInterrupt>
 800785a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00c      	beq.n	8007880 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007872:	461a      	mov	r2, r3
 8007874:	2301      	movs	r3, #1
 8007876:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fec2 	bl	8008604 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f003 0308 	and.w	r3, r3, #8
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00c      	beq.n	80078a4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007896:	461a      	mov	r2, r3
 8007898:	2308      	movs	r3, #8
 800789a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800789c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 ff98 	bl	80087d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f003 0310 	and.w	r3, r3, #16
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d008      	beq.n	80078c0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ba:	461a      	mov	r2, r3
 80078bc:	2310      	movs	r3, #16
 80078be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d030      	beq.n	800792c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d2:	2b80      	cmp	r3, #128	; 0x80
 80078d4:	d109      	bne.n	80078ea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078e8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80078ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ec:	4613      	mov	r3, r2
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	4413      	add	r3, r2
 80078fc:	3304      	adds	r3, #4
 80078fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	78db      	ldrb	r3, [r3, #3]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d108      	bne.n	800791a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2200      	movs	r2, #0
 800790c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	b2db      	uxtb	r3, r3
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f006 fd8b 	bl	800e430 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007926:	461a      	mov	r2, r3
 8007928:	2302      	movs	r3, #2
 800792a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b00      	cmp	r3, #0
 8007934:	d008      	beq.n	8007948 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007942:	461a      	mov	r2, r3
 8007944:	2320      	movs	r3, #32
 8007946:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d009      	beq.n	8007966 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795e:	461a      	mov	r2, r3
 8007960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007964:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	3301      	adds	r3, #1
 800796a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	085b      	lsrs	r3, r3, #1
 8007970:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	2b00      	cmp	r3, #0
 8007976:	f47f af62 	bne.w	800783e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4618      	mov	r0, r3
 8007980:	f004 f920 	bl	800bbc4 <USB_ReadInterrupts>
 8007984:	4603      	mov	r3, r0
 8007986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800798a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800798e:	f040 80db 	bne.w	8007b48 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4618      	mov	r0, r3
 8007998:	f004 f941 	bl	800bc1e <USB_ReadDevAllInEpInterrupt>
 800799c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80079a2:	e0cd      	b.n	8007b40 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 80c2 	beq.w	8007b34 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b6:	b2d2      	uxtb	r2, r2
 80079b8:	4611      	mov	r1, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f004 f967 	bl	800bc8e <USB_ReadDevInEPInterrupt>
 80079c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d057      	beq.n	8007a7c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	f003 030f 	and.w	r3, r3, #15
 80079d2:	2201      	movs	r2, #1
 80079d4:	fa02 f303 	lsl.w	r3, r2, r3
 80079d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	43db      	mvns	r3, r3
 80079e6:	69f9      	ldr	r1, [r7, #28]
 80079e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079ec:	4013      	ands	r3, r2
 80079ee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fc:	461a      	mov	r2, r3
 80079fe:	2301      	movs	r3, #1
 8007a00:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d132      	bne.n	8007a70 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0e:	4613      	mov	r3, r2
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	440b      	add	r3, r1
 8007a18:	334c      	adds	r3, #76	; 0x4c
 8007a1a:	6819      	ldr	r1, [r3, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a20:	4613      	mov	r3, r2
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4403      	add	r3, r0
 8007a2a:	3348      	adds	r3, #72	; 0x48
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4419      	add	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a34:	4613      	mov	r3, r2
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4403      	add	r3, r0
 8007a3e:	334c      	adds	r3, #76	; 0x4c
 8007a40:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d113      	bne.n	8007a70 <HAL_PCD_IRQHandler+0x3a2>
 8007a48:	6879      	ldr	r1, [r7, #4]
 8007a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	4413      	add	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	440b      	add	r3, r1
 8007a56:	3354      	adds	r3, #84	; 0x54
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d108      	bne.n	8007a70 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6818      	ldr	r0, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a68:	461a      	mov	r2, r3
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	f004 f96e 	bl	800bd4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f006 fc55 	bl	800e326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f003 0308 	and.w	r3, r3, #8
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d008      	beq.n	8007a98 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a92:	461a      	mov	r2, r3
 8007a94:	2308      	movs	r3, #8
 8007a96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f003 0310 	and.w	r3, r3, #16
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d008      	beq.n	8007ab4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aae:	461a      	mov	r2, r3
 8007ab0:	2310      	movs	r3, #16
 8007ab2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d008      	beq.n	8007ad0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aca:	461a      	mov	r2, r3
 8007acc:	2340      	movs	r3, #64	; 0x40
 8007ace:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d023      	beq.n	8007b22 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007ada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007adc:	6a38      	ldr	r0, [r7, #32]
 8007ade:	f003 f84f 	bl	800ab80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	4413      	add	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	3338      	adds	r3, #56	; 0x38
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	4413      	add	r3, r2
 8007af2:	3304      	adds	r3, #4
 8007af4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	78db      	ldrb	r3, [r3, #3]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d108      	bne.n	8007b10 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2200      	movs	r2, #0
 8007b02:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f006 fca2 	bl	800e454 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	2302      	movs	r3, #2
 8007b20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fcdb 	bl	80084ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	3301      	adds	r3, #1
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	085b      	lsrs	r3, r3, #1
 8007b3e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f47f af2e 	bne.w	80079a4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f004 f839 	bl	800bbc4 <USB_ReadInterrupts>
 8007b52:	4603      	mov	r3, r0
 8007b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b5c:	d122      	bne.n	8007ba4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	69fa      	ldr	r2, [r7, #28]
 8007b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b6c:	f023 0301 	bic.w	r3, r3, #1
 8007b70:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d108      	bne.n	8007b8e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007b84:	2100      	movs	r1, #0
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fec2 	bl	8008910 <HAL_PCDEx_LPM_Callback>
 8007b8c:	e002      	b.n	8007b94 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f006 fc40 	bl	800e414 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695a      	ldr	r2, [r3, #20]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f004 f80b 	bl	800bbc4 <USB_ReadInterrupts>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bb8:	d112      	bne.n	8007be0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d102      	bne.n	8007bd0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f006 fbfc 	bl	800e3c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	695a      	ldr	r2, [r3, #20]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007bde:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f003 ffed 	bl	800bbc4 <USB_ReadInterrupts>
 8007bea:	4603      	mov	r3, r0
 8007bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bf4:	f040 80b7 	bne.w	8007d66 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c06:	f023 0301 	bic.w	r3, r3, #1
 8007c0a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2110      	movs	r1, #16
 8007c12:	4618      	mov	r0, r3
 8007c14:	f002 ffb4 	bl	800ab80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c18:	2300      	movs	r3, #0
 8007c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c1c:	e046      	b.n	8007cac <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c30:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c42:	0151      	lsls	r1, r2, #5
 8007c44:	69fa      	ldr	r2, [r7, #28]
 8007c46:	440a      	add	r2, r1
 8007c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c64:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c76:	0151      	lsls	r1, r2, #5
 8007c78:	69fa      	ldr	r2, [r7, #28]
 8007c7a:	440a      	add	r2, r1
 8007c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c96:	0151      	lsls	r1, r2, #5
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	440a      	add	r2, r1
 8007c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ca4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca8:	3301      	adds	r3, #1
 8007caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d3b3      	bcc.n	8007c1e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cc4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007cc8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d016      	beq.n	8007d00 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cdc:	69fa      	ldr	r2, [r7, #28]
 8007cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ce2:	f043 030b 	orr.w	r3, r3, #11
 8007ce6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf2:	69fa      	ldr	r2, [r7, #28]
 8007cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cf8:	f043 030b 	orr.w	r3, r3, #11
 8007cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8007cfe:	e015      	b.n	8007d2c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	69fa      	ldr	r2, [r7, #28]
 8007d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007d12:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007d16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	69fa      	ldr	r2, [r7, #28]
 8007d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d26:	f043 030b 	orr.w	r3, r3, #11
 8007d2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6818      	ldr	r0, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007d50:	461a      	mov	r2, r3
 8007d52:	f003 fffb 	bl	800bd4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	695a      	ldr	r2, [r3, #20]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f003 ff2a 	bl	800bbc4 <USB_ReadInterrupts>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d7a:	d124      	bne.n	8007dc6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f003 ffc0 	bl	800bd06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f002 ff75 	bl	800ac7a <USB_GetDevSpeed>
 8007d90:	4603      	mov	r3, r0
 8007d92:	461a      	mov	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681c      	ldr	r4, [r3, #0]
 8007d9c:	f001 fa28 	bl	80091f0 <HAL_RCC_GetHCLKFreq>
 8007da0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	4620      	mov	r0, r4
 8007dac:	f002 fc74 	bl	800a698 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f006 fae0 	bl	800e376 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	695a      	ldr	r2, [r3, #20]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f003 fefa 	bl	800bbc4 <USB_ReadInterrupts>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f003 0308 	and.w	r3, r3, #8
 8007dd6:	2b08      	cmp	r3, #8
 8007dd8:	d10a      	bne.n	8007df0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f006 fabd 	bl	800e35a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	695a      	ldr	r2, [r3, #20]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f002 0208 	and.w	r2, r2, #8
 8007dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f003 fee5 	bl	800bbc4 <USB_ReadInterrupts>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e00:	2b80      	cmp	r3, #128	; 0x80
 8007e02:	d122      	bne.n	8007e4a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e10:	2301      	movs	r3, #1
 8007e12:	627b      	str	r3, [r7, #36]	; 0x24
 8007e14:	e014      	b.n	8007e40 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	440b      	add	r3, r1
 8007e24:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d105      	bne.n	8007e3a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fb27 	bl	8008488 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d3e5      	bcc.n	8007e16 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f003 feb8 	bl	800bbc4 <USB_ReadInterrupts>
 8007e54:	4603      	mov	r3, r0
 8007e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e5e:	d13b      	bne.n	8007ed8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e60:	2301      	movs	r3, #1
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
 8007e64:	e02b      	b.n	8007ebe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	440b      	add	r3, r1
 8007e84:	3340      	adds	r3, #64	; 0x40
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d115      	bne.n	8007eb8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007e8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	da12      	bge.n	8007eb8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e96:	4613      	mov	r3, r2
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	440b      	add	r3, r1
 8007ea0:	333f      	adds	r3, #63	; 0x3f
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fae8 	bl	8008488 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	3301      	adds	r3, #1
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d3ce      	bcc.n	8007e66 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	695a      	ldr	r2, [r3, #20]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007ed6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f003 fe71 	bl	800bbc4 <USB_ReadInterrupts>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eec:	d155      	bne.n	8007f9a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007eee:	2301      	movs	r3, #1
 8007ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef2:	e045      	b.n	8007f80 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f08:	4613      	mov	r3, r2
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	440b      	add	r3, r1
 8007f12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d12e      	bne.n	8007f7a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007f1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	da2b      	bge.n	8007f7a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007f2e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d121      	bne.n	8007f7a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	00db      	lsls	r3, r3, #3
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	440b      	add	r3, r1
 8007f44:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007f48:	2201      	movs	r2, #1
 8007f4a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f54:	6a3b      	ldr	r3, [r7, #32]
 8007f56:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10a      	bne.n	8007f7a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	69fa      	ldr	r2, [r7, #28]
 8007f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f76:	6053      	str	r3, [r2, #4]
            break;
 8007f78:	e007      	b.n	8007f8a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d3b4      	bcc.n	8007ef4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	695a      	ldr	r2, [r3, #20]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f003 fe10 	bl	800bbc4 <USB_ReadInterrupts>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fae:	d10a      	bne.n	8007fc6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f006 fa61 	bl	800e478 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	695a      	ldr	r2, [r3, #20]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f003 fdfa 	bl	800bbc4 <USB_ReadInterrupts>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f003 0304 	and.w	r3, r3, #4
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d115      	bne.n	8008006 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f006 fa51 	bl	800e494 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6859      	ldr	r1, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	69ba      	ldr	r2, [r7, #24]
 8007ffe:	430a      	orrs	r2, r1
 8008000:	605a      	str	r2, [r3, #4]
 8008002:	e000      	b.n	8008006 <HAL_PCD_IRQHandler+0x938>
      return;
 8008004:	bf00      	nop
    }
  }
}
 8008006:	3734      	adds	r7, #52	; 0x34
 8008008:	46bd      	mov	sp, r7
 800800a:	bd90      	pop	{r4, r7, pc}

0800800c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <HAL_PCD_SetAddress+0x1a>
 8008022:	2302      	movs	r3, #2
 8008024:	e013      	b.n	800804e <HAL_PCD_SetAddress+0x42>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	78fa      	ldrb	r2, [r7, #3]
 8008032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	78fa      	ldrb	r2, [r7, #3]
 800803c:	4611      	mov	r1, r2
 800803e:	4618      	mov	r0, r3
 8008040:	f003 fd58 	bl	800baf4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	4608      	mov	r0, r1
 8008060:	4611      	mov	r1, r2
 8008062:	461a      	mov	r2, r3
 8008064:	4603      	mov	r3, r0
 8008066:	70fb      	strb	r3, [r7, #3]
 8008068:	460b      	mov	r3, r1
 800806a:	803b      	strh	r3, [r7, #0]
 800806c:	4613      	mov	r3, r2
 800806e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008078:	2b00      	cmp	r3, #0
 800807a:	da0f      	bge.n	800809c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	f003 020f 	and.w	r2, r3, #15
 8008082:	4613      	mov	r3, r2
 8008084:	00db      	lsls	r3, r3, #3
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	3338      	adds	r3, #56	; 0x38
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	4413      	add	r3, r2
 8008090:	3304      	adds	r3, #4
 8008092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	705a      	strb	r2, [r3, #1]
 800809a:	e00f      	b.n	80080bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800809c:	78fb      	ldrb	r3, [r7, #3]
 800809e:	f003 020f 	and.w	r2, r3, #15
 80080a2:	4613      	mov	r3, r2
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	3304      	adds	r3, #4
 80080b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	f003 030f 	and.w	r3, r3, #15
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80080c8:	883a      	ldrh	r2, [r7, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	78ba      	ldrb	r2, [r7, #2]
 80080d2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	785b      	ldrb	r3, [r3, #1]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d004      	beq.n	80080e6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80080e6:	78bb      	ldrb	r3, [r7, #2]
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d102      	bne.n	80080f2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_PCD_EP_Open+0xaa>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e00e      	b.n	800811e <HAL_PCD_EP_Open+0xc8>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68f9      	ldr	r1, [r7, #12]
 800810e:	4618      	mov	r0, r3
 8008110:	f002 fdd8 	bl	800acc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800811c:	7afb      	ldrb	r3, [r7, #11]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008136:	2b00      	cmp	r3, #0
 8008138:	da0f      	bge.n	800815a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	f003 020f 	and.w	r2, r3, #15
 8008140:	4613      	mov	r3, r2
 8008142:	00db      	lsls	r3, r3, #3
 8008144:	4413      	add	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	3338      	adds	r3, #56	; 0x38
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	4413      	add	r3, r2
 800814e:	3304      	adds	r3, #4
 8008150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2201      	movs	r2, #1
 8008156:	705a      	strb	r2, [r3, #1]
 8008158:	e00f      	b.n	800817a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	f003 020f 	and.w	r2, r3, #15
 8008160:	4613      	mov	r3, r2
 8008162:	00db      	lsls	r3, r3, #3
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	4413      	add	r3, r2
 8008170:	3304      	adds	r3, #4
 8008172:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800817a:	78fb      	ldrb	r3, [r7, #3]
 800817c:	f003 030f 	and.w	r3, r3, #15
 8008180:	b2da      	uxtb	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800818c:	2b01      	cmp	r3, #1
 800818e:	d101      	bne.n	8008194 <HAL_PCD_EP_Close+0x6e>
 8008190:	2302      	movs	r3, #2
 8008192:	e00e      	b.n	80081b2 <HAL_PCD_EP_Close+0x8c>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68f9      	ldr	r1, [r7, #12]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f002 fe16 	bl	800add4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b086      	sub	sp, #24
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	603b      	str	r3, [r7, #0]
 80081c6:	460b      	mov	r3, r1
 80081c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081ca:	7afb      	ldrb	r3, [r7, #11]
 80081cc:	f003 020f 	and.w	r2, r3, #15
 80081d0:	4613      	mov	r3, r2
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	4413      	add	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4413      	add	r3, r2
 80081e0:	3304      	adds	r3, #4
 80081e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2200      	movs	r2, #0
 80081f4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2200      	movs	r2, #0
 80081fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80081fc:	7afb      	ldrb	r3, [r7, #11]
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	b2da      	uxtb	r2, r3
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d102      	bne.n	8008216 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008216:	7afb      	ldrb	r3, [r7, #11]
 8008218:	f003 030f 	and.w	r3, r3, #15
 800821c:	2b00      	cmp	r3, #0
 800821e:	d109      	bne.n	8008234 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6818      	ldr	r0, [r3, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	b2db      	uxtb	r3, r3
 800822a:	461a      	mov	r2, r3
 800822c:	6979      	ldr	r1, [r7, #20]
 800822e:	f003 f8f5 	bl	800b41c <USB_EP0StartXfer>
 8008232:	e008      	b.n	8008246 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6818      	ldr	r0, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	461a      	mov	r2, r3
 8008240:	6979      	ldr	r1, [r7, #20]
 8008242:	f002 fea3 	bl	800af8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800825c:	78fb      	ldrb	r3, [r7, #3]
 800825e:	f003 020f 	and.w	r2, r3, #15
 8008262:	6879      	ldr	r1, [r7, #4]
 8008264:	4613      	mov	r3, r2
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	440b      	add	r3, r1
 800826e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008272:	681b      	ldr	r3, [r3, #0]
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	607a      	str	r2, [r7, #4]
 800828a:	603b      	str	r3, [r7, #0]
 800828c:	460b      	mov	r3, r1
 800828e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008290:	7afb      	ldrb	r3, [r7, #11]
 8008292:	f003 020f 	and.w	r2, r3, #15
 8008296:	4613      	mov	r3, r2
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	3338      	adds	r3, #56	; 0x38
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4413      	add	r3, r2
 80082a4:	3304      	adds	r3, #4
 80082a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2200      	movs	r2, #0
 80082b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2201      	movs	r2, #1
 80082be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80082c0:	7afb      	ldrb	r3, [r7, #11]
 80082c2:	f003 030f 	and.w	r3, r3, #15
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d102      	bne.n	80082da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80082da:	7afb      	ldrb	r3, [r7, #11]
 80082dc:	f003 030f 	and.w	r3, r3, #15
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d109      	bne.n	80082f8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6818      	ldr	r0, [r3, #0]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	461a      	mov	r2, r3
 80082f0:	6979      	ldr	r1, [r7, #20]
 80082f2:	f003 f893 	bl	800b41c <USB_EP0StartXfer>
 80082f6:	e008      	b.n	800830a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6818      	ldr	r0, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	461a      	mov	r2, r3
 8008304:	6979      	ldr	r1, [r7, #20]
 8008306:	f002 fe41 	bl	800af8c <USB_EPStartXfer>
  }

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3718      	adds	r7, #24
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	f003 020f 	and.w	r2, r3, #15
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	429a      	cmp	r2, r3
 800832c:	d901      	bls.n	8008332 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e050      	b.n	80083d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008336:	2b00      	cmp	r3, #0
 8008338:	da0f      	bge.n	800835a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800833a:	78fb      	ldrb	r3, [r7, #3]
 800833c:	f003 020f 	and.w	r2, r3, #15
 8008340:	4613      	mov	r3, r2
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	4413      	add	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	3338      	adds	r3, #56	; 0x38
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	4413      	add	r3, r2
 800834e:	3304      	adds	r3, #4
 8008350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2201      	movs	r2, #1
 8008356:	705a      	strb	r2, [r3, #1]
 8008358:	e00d      	b.n	8008376 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800835a:	78fa      	ldrb	r2, [r7, #3]
 800835c:	4613      	mov	r3, r2
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	4413      	add	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	4413      	add	r3, r2
 800836c:	3304      	adds	r3, #4
 800836e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2201      	movs	r2, #1
 800837a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	f003 030f 	and.w	r3, r3, #15
 8008382:	b2da      	uxtb	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800838e:	2b01      	cmp	r3, #1
 8008390:	d101      	bne.n	8008396 <HAL_PCD_EP_SetStall+0x82>
 8008392:	2302      	movs	r3, #2
 8008394:	e01e      	b.n	80083d4 <HAL_PCD_EP_SetStall+0xc0>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68f9      	ldr	r1, [r7, #12]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f003 fad1 	bl	800b94c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80083aa:	78fb      	ldrb	r3, [r7, #3]
 80083ac:	f003 030f 	and.w	r3, r3, #15
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6818      	ldr	r0, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	b2d9      	uxtb	r1, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80083c4:	461a      	mov	r2, r3
 80083c6:	f003 fcc1 	bl	800bd4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	f003 020f 	and.w	r2, r3, #15
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d901      	bls.n	80083fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e042      	b.n	8008480 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80083fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	da0f      	bge.n	8008422 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008402:	78fb      	ldrb	r3, [r7, #3]
 8008404:	f003 020f 	and.w	r2, r3, #15
 8008408:	4613      	mov	r3, r2
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	4413      	add	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	3338      	adds	r3, #56	; 0x38
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	4413      	add	r3, r2
 8008416:	3304      	adds	r3, #4
 8008418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2201      	movs	r2, #1
 800841e:	705a      	strb	r2, [r3, #1]
 8008420:	e00f      	b.n	8008442 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	f003 020f 	and.w	r2, r3, #15
 8008428:	4613      	mov	r3, r2
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	4413      	add	r3, r2
 8008438:	3304      	adds	r3, #4
 800843a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	f003 030f 	and.w	r3, r3, #15
 800844e:	b2da      	uxtb	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800845a:	2b01      	cmp	r3, #1
 800845c:	d101      	bne.n	8008462 <HAL_PCD_EP_ClrStall+0x86>
 800845e:	2302      	movs	r3, #2
 8008460:	e00e      	b.n	8008480 <HAL_PCD_EP_ClrStall+0xa4>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68f9      	ldr	r1, [r7, #12]
 8008470:	4618      	mov	r0, r3
 8008472:	f003 fad9 	bl	800ba28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008498:	2b00      	cmp	r3, #0
 800849a:	da0c      	bge.n	80084b6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800849c:	78fb      	ldrb	r3, [r7, #3]
 800849e:	f003 020f 	and.w	r2, r3, #15
 80084a2:	4613      	mov	r3, r2
 80084a4:	00db      	lsls	r3, r3, #3
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	3338      	adds	r3, #56	; 0x38
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	4413      	add	r3, r2
 80084b0:	3304      	adds	r3, #4
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	e00c      	b.n	80084d0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084b6:	78fb      	ldrb	r3, [r7, #3]
 80084b8:	f003 020f 	and.w	r2, r3, #15
 80084bc:	4613      	mov	r3, r2
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	4413      	add	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	4413      	add	r3, r2
 80084cc:	3304      	adds	r3, #4
 80084ce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68f9      	ldr	r1, [r7, #12]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f003 f8f8 	bl	800b6cc <USB_EPStopXfer>
 80084dc:	4603      	mov	r3, r0
 80084de:	72fb      	strb	r3, [r7, #11]

  return ret;
 80084e0:	7afb      	ldrb	r3, [r7, #11]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b08a      	sub	sp, #40	; 0x28
 80084ee:	af02      	add	r7, sp, #8
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	4613      	mov	r3, r2
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	3338      	adds	r3, #56	; 0x38
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	3304      	adds	r3, #4
 8008510:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a1a      	ldr	r2, [r3, #32]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	429a      	cmp	r2, r3
 800851c:	d901      	bls.n	8008522 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e06c      	b.n	80085fc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	699a      	ldr	r2, [r3, #24]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	69fa      	ldr	r2, [r7, #28]
 8008534:	429a      	cmp	r2, r3
 8008536:	d902      	bls.n	800853e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	3303      	adds	r3, #3
 8008542:	089b      	lsrs	r3, r3, #2
 8008544:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008546:	e02b      	b.n	80085a0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	699a      	ldr	r2, [r3, #24]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	69fa      	ldr	r2, [r7, #28]
 800855a:	429a      	cmp	r2, r3
 800855c:	d902      	bls.n	8008564 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	3303      	adds	r3, #3
 8008568:	089b      	lsrs	r3, r3, #2
 800856a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6919      	ldr	r1, [r3, #16]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	b2da      	uxtb	r2, r3
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800857c:	b2db      	uxtb	r3, r3
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	4603      	mov	r3, r0
 8008582:	6978      	ldr	r0, [r7, #20]
 8008584:	f003 f94c 	bl	800b820 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	691a      	ldr	r2, [r3, #16]
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	441a      	add	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6a1a      	ldr	r2, [r3, #32]
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	441a      	add	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d809      	bhi.n	80085ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6a1a      	ldr	r2, [r3, #32]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80085be:	429a      	cmp	r2, r3
 80085c0:	d203      	bcs.n	80085ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1be      	bne.n	8008548 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	699a      	ldr	r2, [r3, #24]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d811      	bhi.n	80085fa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	f003 030f 	and.w	r3, r3, #15
 80085dc:	2201      	movs	r2, #1
 80085de:	fa02 f303 	lsl.w	r3, r2, r3
 80085e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	43db      	mvns	r3, r3
 80085f0:	6939      	ldr	r1, [r7, #16]
 80085f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085f6:	4013      	ands	r3, r2
 80085f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3720      	adds	r7, #32
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b088      	sub	sp, #32
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	333c      	adds	r3, #60	; 0x3c
 800861c:	3304      	adds	r3, #4
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d17b      	bne.n	8008732 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f003 0308 	and.w	r3, r3, #8
 8008640:	2b00      	cmp	r3, #0
 8008642:	d015      	beq.n	8008670 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	4a61      	ldr	r2, [pc, #388]	; (80087cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008648:	4293      	cmp	r3, r2
 800864a:	f240 80b9 	bls.w	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 80b3 	beq.w	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	4413      	add	r3, r2
 8008662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008666:	461a      	mov	r2, r3
 8008668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800866c:	6093      	str	r3, [r2, #8]
 800866e:	e0a7      	b.n	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f003 0320 	and.w	r3, r3, #32
 8008676:	2b00      	cmp	r3, #0
 8008678:	d009      	beq.n	800868e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	4413      	add	r3, r2
 8008682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008686:	461a      	mov	r2, r3
 8008688:	2320      	movs	r3, #32
 800868a:	6093      	str	r3, [r2, #8]
 800868c:	e098      	b.n	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008694:	2b00      	cmp	r3, #0
 8008696:	f040 8093 	bne.w	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	4a4b      	ldr	r2, [pc, #300]	; (80087cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d90f      	bls.n	80086c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00a      	beq.n	80086c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b8:	461a      	mov	r2, r3
 80086ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086be:	6093      	str	r3, [r2, #8]
 80086c0:	e07e      	b.n	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80086c2:	683a      	ldr	r2, [r7, #0]
 80086c4:	4613      	mov	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	4413      	add	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	4413      	add	r3, r2
 80086d4:	3304      	adds	r3, #4
 80086d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	69da      	ldr	r2, [r3, #28]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	0159      	lsls	r1, r3, #5
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	440b      	add	r3, r1
 80086e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086ee:	1ad2      	subs	r2, r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d114      	bne.n	8008724 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d109      	bne.n	8008716 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800870c:	461a      	mov	r2, r3
 800870e:	2101      	movs	r1, #1
 8008710:	f003 fb1c 	bl	800bd4c <USB_EP0_OutStart>
 8008714:	e006      	b.n	8008724 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	691a      	ldr	r2, [r3, #16]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	441a      	add	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f005 fde0 	bl	800e2f0 <HAL_PCD_DataOutStageCallback>
 8008730:	e046      	b.n	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	4a26      	ldr	r2, [pc, #152]	; (80087d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d124      	bne.n	8008784 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00a      	beq.n	800875a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008750:	461a      	mov	r2, r3
 8008752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008756:	6093      	str	r3, [r2, #8]
 8008758:	e032      	b.n	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b00      	cmp	r3, #0
 8008762:	d008      	beq.n	8008776 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008770:	461a      	mov	r2, r3
 8008772:	2320      	movs	r3, #32
 8008774:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	b2db      	uxtb	r3, r3
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f005 fdb7 	bl	800e2f0 <HAL_PCD_DataOutStageCallback>
 8008782:	e01d      	b.n	80087c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d114      	bne.n	80087b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	4613      	mov	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	440b      	add	r3, r1
 8008798:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d108      	bne.n	80087b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6818      	ldr	r0, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80087ac:	461a      	mov	r2, r3
 80087ae:	2100      	movs	r1, #0
 80087b0:	f003 facc 	bl	800bd4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	4619      	mov	r1, r3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f005 fd98 	bl	800e2f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3720      	adds	r7, #32
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	4f54300a 	.word	0x4f54300a
 80087d0:	4f54310a 	.word	0x4f54310a

080087d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	333c      	adds	r3, #60	; 0x3c
 80087ec:	3304      	adds	r3, #4
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4a15      	ldr	r2, [pc, #84]	; (800885c <PCD_EP_OutSetupPacket_int+0x88>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d90e      	bls.n	8008828 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008810:	2b00      	cmp	r3, #0
 8008812:	d009      	beq.n	8008828 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008820:	461a      	mov	r2, r3
 8008822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008826:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f005 fd4f 	bl	800e2cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	4a0a      	ldr	r2, [pc, #40]	; (800885c <PCD_EP_OutSetupPacket_int+0x88>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d90c      	bls.n	8008850 <PCD_EP_OutSetupPacket_int+0x7c>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d108      	bne.n	8008850 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6818      	ldr	r0, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008848:	461a      	mov	r2, r3
 800884a:	2101      	movs	r1, #1
 800884c:	f003 fa7e 	bl	800bd4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	4f54300a 	.word	0x4f54300a

08008860 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
 800886c:	4613      	mov	r3, r2
 800886e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008876:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d107      	bne.n	800888e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800887e:	883b      	ldrh	r3, [r7, #0]
 8008880:	0419      	lsls	r1, r3, #16
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	430a      	orrs	r2, r1
 800888a:	629a      	str	r2, [r3, #40]	; 0x28
 800888c:	e028      	b.n	80088e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008894:	0c1b      	lsrs	r3, r3, #16
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	4413      	add	r3, r2
 800889a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800889c:	2300      	movs	r3, #0
 800889e:	73fb      	strb	r3, [r7, #15]
 80088a0:	e00d      	b.n	80088be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	3340      	adds	r3, #64	; 0x40
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	0c1b      	lsrs	r3, r3, #16
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	4413      	add	r3, r2
 80088b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	3301      	adds	r3, #1
 80088bc:	73fb      	strb	r3, [r7, #15]
 80088be:	7bfa      	ldrb	r2, [r7, #15]
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d3ec      	bcc.n	80088a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80088c8:	883b      	ldrh	r3, [r7, #0]
 80088ca:	0418      	lsls	r0, r3, #16
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6819      	ldr	r1, [r3, #0]
 80088d0:	78fb      	ldrb	r3, [r7, #3]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	4302      	orrs	r2, r0
 80088d8:	3340      	adds	r3, #64	; 0x40
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	440b      	add	r3, r1
 80088de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	460b      	mov	r3, r1
 80088f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	887a      	ldrh	r2, [r7, #2]
 8008900:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e267      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d075      	beq.n	8008a32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008946:	4b88      	ldr	r3, [pc, #544]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 030c 	and.w	r3, r3, #12
 800894e:	2b04      	cmp	r3, #4
 8008950:	d00c      	beq.n	800896c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008952:	4b85      	ldr	r3, [pc, #532]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800895a:	2b08      	cmp	r3, #8
 800895c:	d112      	bne.n	8008984 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800895e:	4b82      	ldr	r3, [pc, #520]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800896a:	d10b      	bne.n	8008984 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800896c:	4b7e      	ldr	r3, [pc, #504]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d05b      	beq.n	8008a30 <HAL_RCC_OscConfig+0x108>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d157      	bne.n	8008a30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e242      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800898c:	d106      	bne.n	800899c <HAL_RCC_OscConfig+0x74>
 800898e:	4b76      	ldr	r3, [pc, #472]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a75      	ldr	r2, [pc, #468]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	e01d      	b.n	80089d8 <HAL_RCC_OscConfig+0xb0>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089a4:	d10c      	bne.n	80089c0 <HAL_RCC_OscConfig+0x98>
 80089a6:	4b70      	ldr	r3, [pc, #448]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a6f      	ldr	r2, [pc, #444]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 80089ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	4b6d      	ldr	r3, [pc, #436]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a6c      	ldr	r2, [pc, #432]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 80089b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089bc:	6013      	str	r3, [r2, #0]
 80089be:	e00b      	b.n	80089d8 <HAL_RCC_OscConfig+0xb0>
 80089c0:	4b69      	ldr	r3, [pc, #420]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a68      	ldr	r2, [pc, #416]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 80089c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	4b66      	ldr	r3, [pc, #408]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a65      	ldr	r2, [pc, #404]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 80089d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d013      	beq.n	8008a08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089e0:	f7fb fd02 	bl	80043e8 <HAL_GetTick>
 80089e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089e6:	e008      	b.n	80089fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089e8:	f7fb fcfe 	bl	80043e8 <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b64      	cmp	r3, #100	; 0x64
 80089f4:	d901      	bls.n	80089fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e207      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089fa:	4b5b      	ldr	r3, [pc, #364]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d0f0      	beq.n	80089e8 <HAL_RCC_OscConfig+0xc0>
 8008a06:	e014      	b.n	8008a32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a08:	f7fb fcee 	bl	80043e8 <HAL_GetTick>
 8008a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a0e:	e008      	b.n	8008a22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a10:	f7fb fcea 	bl	80043e8 <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	2b64      	cmp	r3, #100	; 0x64
 8008a1c:	d901      	bls.n	8008a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e1f3      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a22:	4b51      	ldr	r3, [pc, #324]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1f0      	bne.n	8008a10 <HAL_RCC_OscConfig+0xe8>
 8008a2e:	e000      	b.n	8008a32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0302 	and.w	r3, r3, #2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d063      	beq.n	8008b06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a3e:	4b4a      	ldr	r3, [pc, #296]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f003 030c 	and.w	r3, r3, #12
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00b      	beq.n	8008a62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a4a:	4b47      	ldr	r3, [pc, #284]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a52:	2b08      	cmp	r3, #8
 8008a54:	d11c      	bne.n	8008a90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a56:	4b44      	ldr	r3, [pc, #272]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d116      	bne.n	8008a90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a62:	4b41      	ldr	r3, [pc, #260]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d005      	beq.n	8008a7a <HAL_RCC_OscConfig+0x152>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d001      	beq.n	8008a7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e1c7      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a7a:	4b3b      	ldr	r3, [pc, #236]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	00db      	lsls	r3, r3, #3
 8008a88:	4937      	ldr	r1, [pc, #220]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a8e:	e03a      	b.n	8008b06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d020      	beq.n	8008ada <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a98:	4b34      	ldr	r3, [pc, #208]	; (8008b6c <HAL_RCC_OscConfig+0x244>)
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a9e:	f7fb fca3 	bl	80043e8 <HAL_GetTick>
 8008aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008aa4:	e008      	b.n	8008ab8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008aa6:	f7fb fc9f 	bl	80043e8 <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d901      	bls.n	8008ab8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e1a8      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ab8:	4b2b      	ldr	r3, [pc, #172]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0302 	and.w	r3, r3, #2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d0f0      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ac4:	4b28      	ldr	r3, [pc, #160]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	00db      	lsls	r3, r3, #3
 8008ad2:	4925      	ldr	r1, [pc, #148]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	600b      	str	r3, [r1, #0]
 8008ad8:	e015      	b.n	8008b06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ada:	4b24      	ldr	r3, [pc, #144]	; (8008b6c <HAL_RCC_OscConfig+0x244>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae0:	f7fb fc82 	bl	80043e8 <HAL_GetTick>
 8008ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ae6:	e008      	b.n	8008afa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ae8:	f7fb fc7e 	bl	80043e8 <HAL_GetTick>
 8008aec:	4602      	mov	r2, r0
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d901      	bls.n	8008afa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e187      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008afa:	4b1b      	ldr	r3, [pc, #108]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0302 	and.w	r3, r3, #2
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1f0      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0308 	and.w	r3, r3, #8
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d036      	beq.n	8008b80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d016      	beq.n	8008b48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b1a:	4b15      	ldr	r3, [pc, #84]	; (8008b70 <HAL_RCC_OscConfig+0x248>)
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b20:	f7fb fc62 	bl	80043e8 <HAL_GetTick>
 8008b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b28:	f7fb fc5e 	bl	80043e8 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e167      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b3a:	4b0b      	ldr	r3, [pc, #44]	; (8008b68 <HAL_RCC_OscConfig+0x240>)
 8008b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0f0      	beq.n	8008b28 <HAL_RCC_OscConfig+0x200>
 8008b46:	e01b      	b.n	8008b80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b48:	4b09      	ldr	r3, [pc, #36]	; (8008b70 <HAL_RCC_OscConfig+0x248>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b4e:	f7fb fc4b 	bl	80043e8 <HAL_GetTick>
 8008b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b54:	e00e      	b.n	8008b74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b56:	f7fb fc47 	bl	80043e8 <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d907      	bls.n	8008b74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e150      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
 8008b68:	40023800 	.word	0x40023800
 8008b6c:	42470000 	.word	0x42470000
 8008b70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b74:	4b88      	ldr	r3, [pc, #544]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b78:	f003 0302 	and.w	r3, r3, #2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1ea      	bne.n	8008b56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0304 	and.w	r3, r3, #4
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 8097 	beq.w	8008cbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b92:	4b81      	ldr	r3, [pc, #516]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10f      	bne.n	8008bbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60bb      	str	r3, [r7, #8]
 8008ba2:	4b7d      	ldr	r3, [pc, #500]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba6:	4a7c      	ldr	r2, [pc, #496]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bac:	6413      	str	r3, [r2, #64]	; 0x40
 8008bae:	4b7a      	ldr	r3, [pc, #488]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bb6:	60bb      	str	r3, [r7, #8]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bbe:	4b77      	ldr	r3, [pc, #476]	; (8008d9c <HAL_RCC_OscConfig+0x474>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d118      	bne.n	8008bfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008bca:	4b74      	ldr	r3, [pc, #464]	; (8008d9c <HAL_RCC_OscConfig+0x474>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a73      	ldr	r2, [pc, #460]	; (8008d9c <HAL_RCC_OscConfig+0x474>)
 8008bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bd6:	f7fb fc07 	bl	80043e8 <HAL_GetTick>
 8008bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bdc:	e008      	b.n	8008bf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bde:	f7fb fc03 	bl	80043e8 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d901      	bls.n	8008bf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e10c      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bf0:	4b6a      	ldr	r3, [pc, #424]	; (8008d9c <HAL_RCC_OscConfig+0x474>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0f0      	beq.n	8008bde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d106      	bne.n	8008c12 <HAL_RCC_OscConfig+0x2ea>
 8008c04:	4b64      	ldr	r3, [pc, #400]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c08:	4a63      	ldr	r2, [pc, #396]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008c0a:	f043 0301 	orr.w	r3, r3, #1
 8008c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8008c10:	e01c      	b.n	8008c4c <HAL_RCC_OscConfig+0x324>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	2b05      	cmp	r3, #5
 8008c18:	d10c      	bne.n	8008c34 <HAL_RCC_OscConfig+0x30c>
 8008c1a:	4b5f      	ldr	r3, [pc, #380]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1e:	4a5e      	ldr	r2, [pc, #376]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008c20:	f043 0304 	orr.w	r3, r3, #4
 8008c24:	6713      	str	r3, [r2, #112]	; 0x70
 8008c26:	4b5c      	ldr	r3, [pc, #368]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2a:	4a5b      	ldr	r2, [pc, #364]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008c2c:	f043 0301 	orr.w	r3, r3, #1
 8008c30:	6713      	str	r3, [r2, #112]	; 0x70
 8008c32:	e00b      	b.n	8008c4c <HAL_RCC_OscConfig+0x324>
 8008c34:	4b58      	ldr	r3, [pc, #352]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c38:	4a57      	ldr	r2, [pc, #348]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008c3a:	f023 0301 	bic.w	r3, r3, #1
 8008c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8008c40:	4b55      	ldr	r3, [pc, #340]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c44:	4a54      	ldr	r2, [pc, #336]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008c46:	f023 0304 	bic.w	r3, r3, #4
 8008c4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d015      	beq.n	8008c80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c54:	f7fb fbc8 	bl	80043e8 <HAL_GetTick>
 8008c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c5a:	e00a      	b.n	8008c72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c5c:	f7fb fbc4 	bl	80043e8 <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d901      	bls.n	8008c72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e0cb      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c72:	4b49      	ldr	r3, [pc, #292]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c76:	f003 0302 	and.w	r3, r3, #2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0ee      	beq.n	8008c5c <HAL_RCC_OscConfig+0x334>
 8008c7e:	e014      	b.n	8008caa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c80:	f7fb fbb2 	bl	80043e8 <HAL_GetTick>
 8008c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c86:	e00a      	b.n	8008c9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c88:	f7fb fbae 	bl	80043e8 <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e0b5      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c9e:	4b3e      	ldr	r3, [pc, #248]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1ee      	bne.n	8008c88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008caa:	7dfb      	ldrb	r3, [r7, #23]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d105      	bne.n	8008cbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cb0:	4b39      	ldr	r3, [pc, #228]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb4:	4a38      	ldr	r2, [pc, #224]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 80a1 	beq.w	8008e08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008cc6:	4b34      	ldr	r3, [pc, #208]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	f003 030c 	and.w	r3, r3, #12
 8008cce:	2b08      	cmp	r3, #8
 8008cd0:	d05c      	beq.n	8008d8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d141      	bne.n	8008d5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cda:	4b31      	ldr	r3, [pc, #196]	; (8008da0 <HAL_RCC_OscConfig+0x478>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ce0:	f7fb fb82 	bl	80043e8 <HAL_GetTick>
 8008ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ce6:	e008      	b.n	8008cfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ce8:	f7fb fb7e 	bl	80043e8 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e087      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cfa:	4b27      	ldr	r3, [pc, #156]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1f0      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	69da      	ldr	r2, [r3, #28]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	431a      	orrs	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d14:	019b      	lsls	r3, r3, #6
 8008d16:	431a      	orrs	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1c:	085b      	lsrs	r3, r3, #1
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	041b      	lsls	r3, r3, #16
 8008d22:	431a      	orrs	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	061b      	lsls	r3, r3, #24
 8008d2a:	491b      	ldr	r1, [pc, #108]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d30:	4b1b      	ldr	r3, [pc, #108]	; (8008da0 <HAL_RCC_OscConfig+0x478>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d36:	f7fb fb57 	bl	80043e8 <HAL_GetTick>
 8008d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d3c:	e008      	b.n	8008d50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d3e:	f7fb fb53 	bl	80043e8 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d901      	bls.n	8008d50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e05c      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d50:	4b11      	ldr	r3, [pc, #68]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d0f0      	beq.n	8008d3e <HAL_RCC_OscConfig+0x416>
 8008d5c:	e054      	b.n	8008e08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d5e:	4b10      	ldr	r3, [pc, #64]	; (8008da0 <HAL_RCC_OscConfig+0x478>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d64:	f7fb fb40 	bl	80043e8 <HAL_GetTick>
 8008d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d6a:	e008      	b.n	8008d7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d6c:	f7fb fb3c 	bl	80043e8 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e045      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d7e:	4b06      	ldr	r3, [pc, #24]	; (8008d98 <HAL_RCC_OscConfig+0x470>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f0      	bne.n	8008d6c <HAL_RCC_OscConfig+0x444>
 8008d8a:	e03d      	b.n	8008e08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d107      	bne.n	8008da4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e038      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
 8008d98:	40023800 	.word	0x40023800
 8008d9c:	40007000 	.word	0x40007000
 8008da0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008da4:	4b1b      	ldr	r3, [pc, #108]	; (8008e14 <HAL_RCC_OscConfig+0x4ec>)
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d028      	beq.n	8008e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d121      	bne.n	8008e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d11a      	bne.n	8008e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008dda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d111      	bne.n	8008e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dea:	085b      	lsrs	r3, r3, #1
 8008dec:	3b01      	subs	r3, #1
 8008dee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d107      	bne.n	8008e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d001      	beq.n	8008e08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e000      	b.n	8008e0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	40023800 	.word	0x40023800

08008e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d101      	bne.n	8008e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e0cc      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e2c:	4b68      	ldr	r3, [pc, #416]	; (8008fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 030f 	and.w	r3, r3, #15
 8008e34:	683a      	ldr	r2, [r7, #0]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d90c      	bls.n	8008e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e3a:	4b65      	ldr	r3, [pc, #404]	; (8008fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e42:	4b63      	ldr	r3, [pc, #396]	; (8008fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 030f 	and.w	r3, r3, #15
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d001      	beq.n	8008e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e0b8      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d020      	beq.n	8008ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0304 	and.w	r3, r3, #4
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d005      	beq.n	8008e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e6c:	4b59      	ldr	r3, [pc, #356]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	4a58      	ldr	r2, [pc, #352]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0308 	and.w	r3, r3, #8
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d005      	beq.n	8008e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e84:	4b53      	ldr	r3, [pc, #332]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	4a52      	ldr	r2, [pc, #328]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e90:	4b50      	ldr	r3, [pc, #320]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	494d      	ldr	r1, [pc, #308]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d044      	beq.n	8008f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d107      	bne.n	8008ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008eb6:	4b47      	ldr	r3, [pc, #284]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d119      	bne.n	8008ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e07f      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d003      	beq.n	8008ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ed2:	2b03      	cmp	r3, #3
 8008ed4:	d107      	bne.n	8008ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ed6:	4b3f      	ldr	r3, [pc, #252]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d109      	bne.n	8008ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e06f      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ee6:	4b3b      	ldr	r3, [pc, #236]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 0302 	and.w	r3, r3, #2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e067      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ef6:	4b37      	ldr	r3, [pc, #220]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f023 0203 	bic.w	r2, r3, #3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	4934      	ldr	r1, [pc, #208]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f08:	f7fb fa6e 	bl	80043e8 <HAL_GetTick>
 8008f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f0e:	e00a      	b.n	8008f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f10:	f7fb fa6a 	bl	80043e8 <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d901      	bls.n	8008f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e04f      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f26:	4b2b      	ldr	r3, [pc, #172]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f003 020c 	and.w	r2, r3, #12
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d1eb      	bne.n	8008f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f38:	4b25      	ldr	r3, [pc, #148]	; (8008fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d20c      	bcs.n	8008f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f46:	4b22      	ldr	r3, [pc, #136]	; (8008fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	b2d2      	uxtb	r2, r2
 8008f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f4e:	4b20      	ldr	r3, [pc, #128]	; (8008fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 030f 	and.w	r3, r3, #15
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d001      	beq.n	8008f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e032      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0304 	and.w	r3, r3, #4
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d008      	beq.n	8008f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f6c:	4b19      	ldr	r3, [pc, #100]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	4916      	ldr	r1, [pc, #88]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0308 	and.w	r3, r3, #8
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d009      	beq.n	8008f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f8a:	4b12      	ldr	r3, [pc, #72]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	490e      	ldr	r1, [pc, #56]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f9e:	f000 f821 	bl	8008fe4 <HAL_RCC_GetSysClockFreq>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	4b0b      	ldr	r3, [pc, #44]	; (8008fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	091b      	lsrs	r3, r3, #4
 8008faa:	f003 030f 	and.w	r3, r3, #15
 8008fae:	490a      	ldr	r1, [pc, #40]	; (8008fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8008fb0:	5ccb      	ldrb	r3, [r1, r3]
 8008fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb6:	4a09      	ldr	r2, [pc, #36]	; (8008fdc <HAL_RCC_ClockConfig+0x1c4>)
 8008fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008fba:	4b09      	ldr	r3, [pc, #36]	; (8008fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fb f9ce 	bl	8004360 <HAL_InitTick>

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	40023c00 	.word	0x40023c00
 8008fd4:	40023800 	.word	0x40023800
 8008fd8:	080148c8 	.word	0x080148c8
 8008fdc:	20000014 	.word	0x20000014
 8008fe0:	20000018 	.word	0x20000018

08008fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fe8:	b094      	sub	sp, #80	; 0x50
 8008fea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	647b      	str	r3, [r7, #68]	; 0x44
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ffc:	4b79      	ldr	r3, [pc, #484]	; (80091e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f003 030c 	and.w	r3, r3, #12
 8009004:	2b08      	cmp	r3, #8
 8009006:	d00d      	beq.n	8009024 <HAL_RCC_GetSysClockFreq+0x40>
 8009008:	2b08      	cmp	r3, #8
 800900a:	f200 80e1 	bhi.w	80091d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800900e:	2b00      	cmp	r3, #0
 8009010:	d002      	beq.n	8009018 <HAL_RCC_GetSysClockFreq+0x34>
 8009012:	2b04      	cmp	r3, #4
 8009014:	d003      	beq.n	800901e <HAL_RCC_GetSysClockFreq+0x3a>
 8009016:	e0db      	b.n	80091d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009018:	4b73      	ldr	r3, [pc, #460]	; (80091e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800901a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800901c:	e0db      	b.n	80091d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800901e:	4b73      	ldr	r3, [pc, #460]	; (80091ec <HAL_RCC_GetSysClockFreq+0x208>)
 8009020:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009022:	e0d8      	b.n	80091d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009024:	4b6f      	ldr	r3, [pc, #444]	; (80091e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800902c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800902e:	4b6d      	ldr	r3, [pc, #436]	; (80091e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d063      	beq.n	8009102 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800903a:	4b6a      	ldr	r3, [pc, #424]	; (80091e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	099b      	lsrs	r3, r3, #6
 8009040:	2200      	movs	r2, #0
 8009042:	63bb      	str	r3, [r7, #56]	; 0x38
 8009044:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800904c:	633b      	str	r3, [r7, #48]	; 0x30
 800904e:	2300      	movs	r3, #0
 8009050:	637b      	str	r3, [r7, #52]	; 0x34
 8009052:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009056:	4622      	mov	r2, r4
 8009058:	462b      	mov	r3, r5
 800905a:	f04f 0000 	mov.w	r0, #0
 800905e:	f04f 0100 	mov.w	r1, #0
 8009062:	0159      	lsls	r1, r3, #5
 8009064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009068:	0150      	lsls	r0, r2, #5
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	4621      	mov	r1, r4
 8009070:	1a51      	subs	r1, r2, r1
 8009072:	6139      	str	r1, [r7, #16]
 8009074:	4629      	mov	r1, r5
 8009076:	eb63 0301 	sbc.w	r3, r3, r1
 800907a:	617b      	str	r3, [r7, #20]
 800907c:	f04f 0200 	mov.w	r2, #0
 8009080:	f04f 0300 	mov.w	r3, #0
 8009084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009088:	4659      	mov	r1, fp
 800908a:	018b      	lsls	r3, r1, #6
 800908c:	4651      	mov	r1, sl
 800908e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009092:	4651      	mov	r1, sl
 8009094:	018a      	lsls	r2, r1, #6
 8009096:	4651      	mov	r1, sl
 8009098:	ebb2 0801 	subs.w	r8, r2, r1
 800909c:	4659      	mov	r1, fp
 800909e:	eb63 0901 	sbc.w	r9, r3, r1
 80090a2:	f04f 0200 	mov.w	r2, #0
 80090a6:	f04f 0300 	mov.w	r3, #0
 80090aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090b6:	4690      	mov	r8, r2
 80090b8:	4699      	mov	r9, r3
 80090ba:	4623      	mov	r3, r4
 80090bc:	eb18 0303 	adds.w	r3, r8, r3
 80090c0:	60bb      	str	r3, [r7, #8]
 80090c2:	462b      	mov	r3, r5
 80090c4:	eb49 0303 	adc.w	r3, r9, r3
 80090c8:	60fb      	str	r3, [r7, #12]
 80090ca:	f04f 0200 	mov.w	r2, #0
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80090d6:	4629      	mov	r1, r5
 80090d8:	024b      	lsls	r3, r1, #9
 80090da:	4621      	mov	r1, r4
 80090dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80090e0:	4621      	mov	r1, r4
 80090e2:	024a      	lsls	r2, r1, #9
 80090e4:	4610      	mov	r0, r2
 80090e6:	4619      	mov	r1, r3
 80090e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ea:	2200      	movs	r2, #0
 80090ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80090ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090f4:	f7f7 fde8 	bl	8000cc8 <__aeabi_uldivmod>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4613      	mov	r3, r2
 80090fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009100:	e058      	b.n	80091b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009102:	4b38      	ldr	r3, [pc, #224]	; (80091e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	099b      	lsrs	r3, r3, #6
 8009108:	2200      	movs	r2, #0
 800910a:	4618      	mov	r0, r3
 800910c:	4611      	mov	r1, r2
 800910e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009112:	623b      	str	r3, [r7, #32]
 8009114:	2300      	movs	r3, #0
 8009116:	627b      	str	r3, [r7, #36]	; 0x24
 8009118:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800911c:	4642      	mov	r2, r8
 800911e:	464b      	mov	r3, r9
 8009120:	f04f 0000 	mov.w	r0, #0
 8009124:	f04f 0100 	mov.w	r1, #0
 8009128:	0159      	lsls	r1, r3, #5
 800912a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800912e:	0150      	lsls	r0, r2, #5
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4641      	mov	r1, r8
 8009136:	ebb2 0a01 	subs.w	sl, r2, r1
 800913a:	4649      	mov	r1, r9
 800913c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009140:	f04f 0200 	mov.w	r2, #0
 8009144:	f04f 0300 	mov.w	r3, #0
 8009148:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800914c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009150:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009154:	ebb2 040a 	subs.w	r4, r2, sl
 8009158:	eb63 050b 	sbc.w	r5, r3, fp
 800915c:	f04f 0200 	mov.w	r2, #0
 8009160:	f04f 0300 	mov.w	r3, #0
 8009164:	00eb      	lsls	r3, r5, #3
 8009166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800916a:	00e2      	lsls	r2, r4, #3
 800916c:	4614      	mov	r4, r2
 800916e:	461d      	mov	r5, r3
 8009170:	4643      	mov	r3, r8
 8009172:	18e3      	adds	r3, r4, r3
 8009174:	603b      	str	r3, [r7, #0]
 8009176:	464b      	mov	r3, r9
 8009178:	eb45 0303 	adc.w	r3, r5, r3
 800917c:	607b      	str	r3, [r7, #4]
 800917e:	f04f 0200 	mov.w	r2, #0
 8009182:	f04f 0300 	mov.w	r3, #0
 8009186:	e9d7 4500 	ldrd	r4, r5, [r7]
 800918a:	4629      	mov	r1, r5
 800918c:	028b      	lsls	r3, r1, #10
 800918e:	4621      	mov	r1, r4
 8009190:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009194:	4621      	mov	r1, r4
 8009196:	028a      	lsls	r2, r1, #10
 8009198:	4610      	mov	r0, r2
 800919a:	4619      	mov	r1, r3
 800919c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800919e:	2200      	movs	r2, #0
 80091a0:	61bb      	str	r3, [r7, #24]
 80091a2:	61fa      	str	r2, [r7, #28]
 80091a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091a8:	f7f7 fd8e 	bl	8000cc8 <__aeabi_uldivmod>
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	4613      	mov	r3, r2
 80091b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80091b4:	4b0b      	ldr	r3, [pc, #44]	; (80091e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	0c1b      	lsrs	r3, r3, #16
 80091ba:	f003 0303 	and.w	r3, r3, #3
 80091be:	3301      	adds	r3, #1
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80091c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80091ce:	e002      	b.n	80091d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80091d0:	4b05      	ldr	r3, [pc, #20]	; (80091e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80091d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80091d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80091d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3750      	adds	r7, #80	; 0x50
 80091dc:	46bd      	mov	sp, r7
 80091de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091e2:	bf00      	nop
 80091e4:	40023800 	.word	0x40023800
 80091e8:	00f42400 	.word	0x00f42400
 80091ec:	007a1200 	.word	0x007a1200

080091f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091f0:	b480      	push	{r7}
 80091f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091f4:	4b03      	ldr	r3, [pc, #12]	; (8009204 <HAL_RCC_GetHCLKFreq+0x14>)
 80091f6:	681b      	ldr	r3, [r3, #0]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	20000014 	.word	0x20000014

08009208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800920c:	f7ff fff0 	bl	80091f0 <HAL_RCC_GetHCLKFreq>
 8009210:	4602      	mov	r2, r0
 8009212:	4b05      	ldr	r3, [pc, #20]	; (8009228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	0a9b      	lsrs	r3, r3, #10
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	4903      	ldr	r1, [pc, #12]	; (800922c <HAL_RCC_GetPCLK1Freq+0x24>)
 800921e:	5ccb      	ldrb	r3, [r1, r3]
 8009220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009224:	4618      	mov	r0, r3
 8009226:	bd80      	pop	{r7, pc}
 8009228:	40023800 	.word	0x40023800
 800922c:	080148d8 	.word	0x080148d8

08009230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e07b      	b.n	800933a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009246:	2b00      	cmp	r3, #0
 8009248:	d108      	bne.n	800925c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009252:	d009      	beq.n	8009268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	61da      	str	r2, [r3, #28]
 800925a:	e005      	b.n	8009268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d106      	bne.n	8009288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7fa fcf4 	bl	8003c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2202      	movs	r2, #2
 800928c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800929e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80092b0:	431a      	orrs	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092ba:	431a      	orrs	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	f003 0302 	and.w	r3, r3, #2
 80092c4:	431a      	orrs	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	431a      	orrs	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092e2:	431a      	orrs	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ec:	ea42 0103 	orr.w	r1, r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	0c1b      	lsrs	r3, r3, #16
 8009306:	f003 0104 	and.w	r1, r3, #4
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	f003 0210 	and.w	r2, r3, #16
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	430a      	orrs	r2, r1
 8009318:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69da      	ldr	r2, [r3, #28]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009328:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b088      	sub	sp, #32
 8009346:	af00      	add	r7, sp, #0
 8009348:	60f8      	str	r0, [r7, #12]
 800934a:	60b9      	str	r1, [r7, #8]
 800934c:	603b      	str	r3, [r7, #0]
 800934e:	4613      	mov	r3, r2
 8009350:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800935c:	2b01      	cmp	r3, #1
 800935e:	d101      	bne.n	8009364 <HAL_SPI_Transmit+0x22>
 8009360:	2302      	movs	r3, #2
 8009362:	e126      	b.n	80095b2 <HAL_SPI_Transmit+0x270>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800936c:	f7fb f83c 	bl	80043e8 <HAL_GetTick>
 8009370:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009372:	88fb      	ldrh	r3, [r7, #6]
 8009374:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b01      	cmp	r3, #1
 8009380:	d002      	beq.n	8009388 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009382:	2302      	movs	r3, #2
 8009384:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009386:	e10b      	b.n	80095a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <HAL_SPI_Transmit+0x52>
 800938e:	88fb      	ldrh	r3, [r7, #6]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009398:	e102      	b.n	80095a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2203      	movs	r2, #3
 800939e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	88fa      	ldrh	r2, [r7, #6]
 80093b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	88fa      	ldrh	r2, [r7, #6]
 80093b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093e0:	d10f      	bne.n	8009402 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009400:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940c:	2b40      	cmp	r3, #64	; 0x40
 800940e:	d007      	beq.n	8009420 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800941e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009428:	d14b      	bne.n	80094c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d002      	beq.n	8009438 <HAL_SPI_Transmit+0xf6>
 8009432:	8afb      	ldrh	r3, [r7, #22]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d13e      	bne.n	80094b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943c:	881a      	ldrh	r2, [r3, #0]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009448:	1c9a      	adds	r2, r3, #2
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009452:	b29b      	uxth	r3, r3
 8009454:	3b01      	subs	r3, #1
 8009456:	b29a      	uxth	r2, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800945c:	e02b      	b.n	80094b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f003 0302 	and.w	r3, r3, #2
 8009468:	2b02      	cmp	r3, #2
 800946a:	d112      	bne.n	8009492 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009470:	881a      	ldrh	r2, [r3, #0]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947c:	1c9a      	adds	r2, r3, #2
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009486:	b29b      	uxth	r3, r3
 8009488:	3b01      	subs	r3, #1
 800948a:	b29a      	uxth	r2, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009490:	e011      	b.n	80094b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009492:	f7fa ffa9 	bl	80043e8 <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d803      	bhi.n	80094aa <HAL_SPI_Transmit+0x168>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a8:	d102      	bne.n	80094b0 <HAL_SPI_Transmit+0x16e>
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d102      	bne.n	80094b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80094b4:	e074      	b.n	80095a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1ce      	bne.n	800945e <HAL_SPI_Transmit+0x11c>
 80094c0:	e04c      	b.n	800955c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <HAL_SPI_Transmit+0x18e>
 80094ca:	8afb      	ldrh	r3, [r7, #22]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d140      	bne.n	8009552 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	330c      	adds	r3, #12
 80094da:	7812      	ldrb	r2, [r2, #0]
 80094dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	3b01      	subs	r3, #1
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80094f6:	e02c      	b.n	8009552 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f003 0302 	and.w	r3, r3, #2
 8009502:	2b02      	cmp	r3, #2
 8009504:	d113      	bne.n	800952e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	330c      	adds	r3, #12
 8009510:	7812      	ldrb	r2, [r2, #0]
 8009512:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009522:	b29b      	uxth	r3, r3
 8009524:	3b01      	subs	r3, #1
 8009526:	b29a      	uxth	r2, r3
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	86da      	strh	r2, [r3, #54]	; 0x36
 800952c:	e011      	b.n	8009552 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800952e:	f7fa ff5b 	bl	80043e8 <HAL_GetTick>
 8009532:	4602      	mov	r2, r0
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	683a      	ldr	r2, [r7, #0]
 800953a:	429a      	cmp	r2, r3
 800953c:	d803      	bhi.n	8009546 <HAL_SPI_Transmit+0x204>
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009544:	d102      	bne.n	800954c <HAL_SPI_Transmit+0x20a>
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009550:	e026      	b.n	80095a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009556:	b29b      	uxth	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1cd      	bne.n	80094f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 fb73 	bl	8009c4c <SPI_EndRxTxTransaction>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2220      	movs	r2, #32
 8009570:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10a      	bne.n	8009590 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800957a:	2300      	movs	r3, #0
 800957c:	613b      	str	r3, [r7, #16]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	613b      	str	r3, [r7, #16]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	613b      	str	r3, [r7, #16]
 800958e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009594:	2b00      	cmp	r3, #0
 8009596:	d002      	beq.n	800959e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	77fb      	strb	r3, [r7, #31]
 800959c:	e000      	b.n	80095a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800959e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80095b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3720      	adds	r7, #32
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b08c      	sub	sp, #48	; 0x30
 80095be:	af00      	add	r7, sp, #0
 80095c0:	60f8      	str	r0, [r7, #12]
 80095c2:	60b9      	str	r1, [r7, #8]
 80095c4:	607a      	str	r2, [r7, #4]
 80095c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80095c8:	2301      	movs	r3, #1
 80095ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d101      	bne.n	80095e0 <HAL_SPI_TransmitReceive+0x26>
 80095dc:	2302      	movs	r3, #2
 80095de:	e18a      	b.n	80098f6 <HAL_SPI_TransmitReceive+0x33c>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095e8:	f7fa fefe 	bl	80043e8 <HAL_GetTick>
 80095ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80095fe:	887b      	ldrh	r3, [r7, #2]
 8009600:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009606:	2b01      	cmp	r3, #1
 8009608:	d00f      	beq.n	800962a <HAL_SPI_TransmitReceive+0x70>
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009610:	d107      	bne.n	8009622 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d103      	bne.n	8009622 <HAL_SPI_TransmitReceive+0x68>
 800961a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800961e:	2b04      	cmp	r3, #4
 8009620:	d003      	beq.n	800962a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009622:	2302      	movs	r3, #2
 8009624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009628:	e15b      	b.n	80098e2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d005      	beq.n	800963c <HAL_SPI_TransmitReceive+0x82>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d002      	beq.n	800963c <HAL_SPI_TransmitReceive+0x82>
 8009636:	887b      	ldrh	r3, [r7, #2]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d103      	bne.n	8009644 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009642:	e14e      	b.n	80098e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800964a:	b2db      	uxtb	r3, r3
 800964c:	2b04      	cmp	r3, #4
 800964e:	d003      	beq.n	8009658 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2205      	movs	r2, #5
 8009654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	887a      	ldrh	r2, [r7, #2]
 8009668:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	887a      	ldrh	r2, [r7, #2]
 800966e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	887a      	ldrh	r2, [r7, #2]
 800967a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	887a      	ldrh	r2, [r7, #2]
 8009680:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009698:	2b40      	cmp	r3, #64	; 0x40
 800969a:	d007      	beq.n	80096ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096b4:	d178      	bne.n	80097a8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d002      	beq.n	80096c4 <HAL_SPI_TransmitReceive+0x10a>
 80096be:	8b7b      	ldrh	r3, [r7, #26]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d166      	bne.n	8009792 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c8:	881a      	ldrh	r2, [r3, #0]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d4:	1c9a      	adds	r2, r3, #2
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096de:	b29b      	uxth	r3, r3
 80096e0:	3b01      	subs	r3, #1
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096e8:	e053      	b.n	8009792 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	f003 0302 	and.w	r3, r3, #2
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d11b      	bne.n	8009730 <HAL_SPI_TransmitReceive+0x176>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d016      	beq.n	8009730 <HAL_SPI_TransmitReceive+0x176>
 8009702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009704:	2b01      	cmp	r3, #1
 8009706:	d113      	bne.n	8009730 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970c:	881a      	ldrh	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009718:	1c9a      	adds	r2, r3, #2
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009722:	b29b      	uxth	r3, r3
 8009724:	3b01      	subs	r3, #1
 8009726:	b29a      	uxth	r2, r3
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800972c:	2300      	movs	r3, #0
 800972e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b01      	cmp	r3, #1
 800973c:	d119      	bne.n	8009772 <HAL_SPI_TransmitReceive+0x1b8>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009742:	b29b      	uxth	r3, r3
 8009744:	2b00      	cmp	r3, #0
 8009746:	d014      	beq.n	8009772 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68da      	ldr	r2, [r3, #12]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009752:	b292      	uxth	r2, r2
 8009754:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975a:	1c9a      	adds	r2, r3, #2
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009764:	b29b      	uxth	r3, r3
 8009766:	3b01      	subs	r3, #1
 8009768:	b29a      	uxth	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800976e:	2301      	movs	r3, #1
 8009770:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009772:	f7fa fe39 	bl	80043e8 <HAL_GetTick>
 8009776:	4602      	mov	r2, r0
 8009778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800977e:	429a      	cmp	r2, r3
 8009780:	d807      	bhi.n	8009792 <HAL_SPI_TransmitReceive+0x1d8>
 8009782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009788:	d003      	beq.n	8009792 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009790:	e0a7      	b.n	80098e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009796:	b29b      	uxth	r3, r3
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1a6      	bne.n	80096ea <HAL_SPI_TransmitReceive+0x130>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1a1      	bne.n	80096ea <HAL_SPI_TransmitReceive+0x130>
 80097a6:	e07c      	b.n	80098a2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <HAL_SPI_TransmitReceive+0x1fc>
 80097b0:	8b7b      	ldrh	r3, [r7, #26]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d16b      	bne.n	800988e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	330c      	adds	r3, #12
 80097c0:	7812      	ldrb	r2, [r2, #0]
 80097c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c8:	1c5a      	adds	r2, r3, #1
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	3b01      	subs	r3, #1
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097dc:	e057      	b.n	800988e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f003 0302 	and.w	r3, r3, #2
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d11c      	bne.n	8009826 <HAL_SPI_TransmitReceive+0x26c>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d017      	beq.n	8009826 <HAL_SPI_TransmitReceive+0x26c>
 80097f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d114      	bne.n	8009826 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	330c      	adds	r3, #12
 8009806:	7812      	ldrb	r2, [r2, #0]
 8009808:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009818:	b29b      	uxth	r3, r3
 800981a:	3b01      	subs	r3, #1
 800981c:	b29a      	uxth	r2, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009822:	2300      	movs	r3, #0
 8009824:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b01      	cmp	r3, #1
 8009832:	d119      	bne.n	8009868 <HAL_SPI_TransmitReceive+0x2ae>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009838:	b29b      	uxth	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d014      	beq.n	8009868 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68da      	ldr	r2, [r3, #12]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009848:	b2d2      	uxtb	r2, r2
 800984a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009850:	1c5a      	adds	r2, r3, #1
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800985a:	b29b      	uxth	r3, r3
 800985c:	3b01      	subs	r3, #1
 800985e:	b29a      	uxth	r2, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009864:	2301      	movs	r3, #1
 8009866:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009868:	f7fa fdbe 	bl	80043e8 <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009874:	429a      	cmp	r2, r3
 8009876:	d803      	bhi.n	8009880 <HAL_SPI_TransmitReceive+0x2c6>
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987e:	d102      	bne.n	8009886 <HAL_SPI_TransmitReceive+0x2cc>
 8009880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009882:	2b00      	cmp	r3, #0
 8009884:	d103      	bne.n	800988e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009886:	2303      	movs	r3, #3
 8009888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800988c:	e029      	b.n	80098e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009892:	b29b      	uxth	r3, r3
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1a2      	bne.n	80097de <HAL_SPI_TransmitReceive+0x224>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800989c:	b29b      	uxth	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d19d      	bne.n	80097de <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f000 f9d0 	bl	8009c4c <SPI_EndRxTxTransaction>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d006      	beq.n	80098c0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2220      	movs	r2, #32
 80098bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80098be:	e010      	b.n	80098e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10b      	bne.n	80098e0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098c8:	2300      	movs	r3, #0
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	617b      	str	r3, [r7, #20]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	617b      	str	r3, [r7, #20]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	e000      	b.n	80098e2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80098e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80098f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3730      	adds	r7, #48	; 0x30
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
	...

08009900 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b088      	sub	sp, #32
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	099b      	lsrs	r3, r3, #6
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10f      	bne.n	8009944 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00a      	beq.n	8009944 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	099b      	lsrs	r3, r3, #6
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	2b00      	cmp	r3, #0
 8009938:	d004      	beq.n	8009944 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	4798      	blx	r3
    return;
 8009942:	e0d7      	b.n	8009af4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	085b      	lsrs	r3, r3, #1
 8009948:	f003 0301 	and.w	r3, r3, #1
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00a      	beq.n	8009966 <HAL_SPI_IRQHandler+0x66>
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	09db      	lsrs	r3, r3, #7
 8009954:	f003 0301 	and.w	r3, r3, #1
 8009958:	2b00      	cmp	r3, #0
 800995a:	d004      	beq.n	8009966 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	4798      	blx	r3
    return;
 8009964:	e0c6      	b.n	8009af4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	095b      	lsrs	r3, r3, #5
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10c      	bne.n	800998c <HAL_SPI_IRQHandler+0x8c>
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	099b      	lsrs	r3, r3, #6
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	d106      	bne.n	800998c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	0a1b      	lsrs	r3, r3, #8
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	2b00      	cmp	r3, #0
 8009988:	f000 80b4 	beq.w	8009af4 <HAL_SPI_IRQHandler+0x1f4>
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	095b      	lsrs	r3, r3, #5
 8009990:	f003 0301 	and.w	r3, r3, #1
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 80ad 	beq.w	8009af4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	099b      	lsrs	r3, r3, #6
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d023      	beq.n	80099ee <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	d011      	beq.n	80099d6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b6:	f043 0204 	orr.w	r2, r3, #4
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099be:	2300      	movs	r3, #0
 80099c0:	617b      	str	r3, [r7, #20]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	617b      	str	r3, [r7, #20]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	617b      	str	r3, [r7, #20]
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	e00b      	b.n	80099ee <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099d6:	2300      	movs	r3, #0
 80099d8:	613b      	str	r3, [r7, #16]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	613b      	str	r3, [r7, #16]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	613b      	str	r3, [r7, #16]
 80099ea:	693b      	ldr	r3, [r7, #16]
        return;
 80099ec:	e082      	b.n	8009af4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	095b      	lsrs	r3, r3, #5
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d014      	beq.n	8009a24 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fe:	f043 0201 	orr.w	r2, r3, #1
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009a06:	2300      	movs	r3, #0
 8009a08:	60fb      	str	r3, [r7, #12]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	60fb      	str	r3, [r7, #12]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a20:	601a      	str	r2, [r3, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	0a1b      	lsrs	r3, r3, #8
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00c      	beq.n	8009a4a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a34:	f043 0208 	orr.w	r2, r3, #8
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60bb      	str	r3, [r7, #8]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	60bb      	str	r3, [r7, #8]
 8009a48:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d04f      	beq.n	8009af2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a60:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	f003 0302 	and.w	r3, r3, #2
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d104      	bne.n	8009a7e <HAL_SPI_IRQHandler+0x17e>
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d034      	beq.n	8009ae8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	685a      	ldr	r2, [r3, #4]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f022 0203 	bic.w	r2, r2, #3
 8009a8c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d011      	beq.n	8009aba <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a9a:	4a18      	ldr	r2, [pc, #96]	; (8009afc <HAL_SPI_IRQHandler+0x1fc>)
 8009a9c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fa fde1 	bl	800466a <HAL_DMA_Abort_IT>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d005      	beq.n	8009aba <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d016      	beq.n	8009af0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ac6:	4a0d      	ldr	r2, [pc, #52]	; (8009afc <HAL_SPI_IRQHandler+0x1fc>)
 8009ac8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fa fdcb 	bl	800466a <HAL_DMA_Abort_IT>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00a      	beq.n	8009af0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ade:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009ae6:	e003      	b.n	8009af0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f809 	bl	8009b00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009aee:	e000      	b.n	8009af2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009af0:	bf00      	nop
    return;
 8009af2:	bf00      	nop
  }
}
 8009af4:	3720      	adds	r7, #32
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	08009b15 	.word	0x08009b15

08009b00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f7ff ffe6 	bl	8009b00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009b34:	bf00      	nop
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b088      	sub	sp, #32
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	603b      	str	r3, [r7, #0]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b4c:	f7fa fc4c 	bl	80043e8 <HAL_GetTick>
 8009b50:	4602      	mov	r2, r0
 8009b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b54:	1a9b      	subs	r3, r3, r2
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	4413      	add	r3, r2
 8009b5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b5c:	f7fa fc44 	bl	80043e8 <HAL_GetTick>
 8009b60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b62:	4b39      	ldr	r3, [pc, #228]	; (8009c48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	015b      	lsls	r3, r3, #5
 8009b68:	0d1b      	lsrs	r3, r3, #20
 8009b6a:	69fa      	ldr	r2, [r7, #28]
 8009b6c:	fb02 f303 	mul.w	r3, r2, r3
 8009b70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b72:	e054      	b.n	8009c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7a:	d050      	beq.n	8009c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b7c:	f7fa fc34 	bl	80043e8 <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	69fa      	ldr	r2, [r7, #28]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d902      	bls.n	8009b92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d13d      	bne.n	8009c0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ba0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009baa:	d111      	bne.n	8009bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bb4:	d004      	beq.n	8009bc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bbe:	d107      	bne.n	8009bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bd8:	d10f      	bne.n	8009bfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009be8:	601a      	str	r2, [r3, #0]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e017      	b.n	8009c3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	4013      	ands	r3, r2
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	bf0c      	ite	eq
 8009c2e:	2301      	moveq	r3, #1
 8009c30:	2300      	movne	r3, #0
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	461a      	mov	r2, r3
 8009c36:	79fb      	ldrb	r3, [r7, #7]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d19b      	bne.n	8009b74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3720      	adds	r7, #32
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20000014 	.word	0x20000014

08009c4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b088      	sub	sp, #32
 8009c50:	af02      	add	r7, sp, #8
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c58:	4b1b      	ldr	r3, [pc, #108]	; (8009cc8 <SPI_EndRxTxTransaction+0x7c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a1b      	ldr	r2, [pc, #108]	; (8009ccc <SPI_EndRxTxTransaction+0x80>)
 8009c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c62:	0d5b      	lsrs	r3, r3, #21
 8009c64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c68:	fb02 f303 	mul.w	r3, r2, r3
 8009c6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c76:	d112      	bne.n	8009c9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2180      	movs	r1, #128	; 0x80
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f7ff ff5a 	bl	8009b3c <SPI_WaitFlagStateUntilTimeout>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d016      	beq.n	8009cbc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c92:	f043 0220 	orr.w	r2, r3, #32
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	e00f      	b.n	8009cbe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00a      	beq.n	8009cba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb4:	2b80      	cmp	r3, #128	; 0x80
 8009cb6:	d0f2      	beq.n	8009c9e <SPI_EndRxTxTransaction+0x52>
 8009cb8:	e000      	b.n	8009cbc <SPI_EndRxTxTransaction+0x70>
        break;
 8009cba:	bf00      	nop
  }

  return HAL_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20000014 	.word	0x20000014
 8009ccc:	165e9f81 	.word	0x165e9f81

08009cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d101      	bne.n	8009ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e041      	b.n	8009d66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d106      	bne.n	8009cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7fa f80a 	bl	8003d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4610      	mov	r0, r2
 8009d10:	f000 fa96 	bl	800a240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
	...

08009d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d001      	beq.n	8009d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e04e      	b.n	8009e26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68da      	ldr	r2, [r3, #12]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f042 0201 	orr.w	r2, r2, #1
 8009d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a23      	ldr	r2, [pc, #140]	; (8009e34 <HAL_TIM_Base_Start_IT+0xc4>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d022      	beq.n	8009df0 <HAL_TIM_Base_Start_IT+0x80>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009db2:	d01d      	beq.n	8009df0 <HAL_TIM_Base_Start_IT+0x80>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a1f      	ldr	r2, [pc, #124]	; (8009e38 <HAL_TIM_Base_Start_IT+0xc8>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d018      	beq.n	8009df0 <HAL_TIM_Base_Start_IT+0x80>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a1e      	ldr	r2, [pc, #120]	; (8009e3c <HAL_TIM_Base_Start_IT+0xcc>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d013      	beq.n	8009df0 <HAL_TIM_Base_Start_IT+0x80>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a1c      	ldr	r2, [pc, #112]	; (8009e40 <HAL_TIM_Base_Start_IT+0xd0>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d00e      	beq.n	8009df0 <HAL_TIM_Base_Start_IT+0x80>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a1b      	ldr	r2, [pc, #108]	; (8009e44 <HAL_TIM_Base_Start_IT+0xd4>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d009      	beq.n	8009df0 <HAL_TIM_Base_Start_IT+0x80>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a19      	ldr	r2, [pc, #100]	; (8009e48 <HAL_TIM_Base_Start_IT+0xd8>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d004      	beq.n	8009df0 <HAL_TIM_Base_Start_IT+0x80>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a18      	ldr	r2, [pc, #96]	; (8009e4c <HAL_TIM_Base_Start_IT+0xdc>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d111      	bne.n	8009e14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2b06      	cmp	r3, #6
 8009e00:	d010      	beq.n	8009e24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f042 0201 	orr.w	r2, r2, #1
 8009e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e12:	e007      	b.n	8009e24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f042 0201 	orr.w	r2, r2, #1
 8009e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	40010000 	.word	0x40010000
 8009e38:	40000400 	.word	0x40000400
 8009e3c:	40000800 	.word	0x40000800
 8009e40:	40000c00 	.word	0x40000c00
 8009e44:	40010400 	.word	0x40010400
 8009e48:	40014000 	.word	0x40014000
 8009e4c:	40001800 	.word	0x40001800

08009e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	f003 0302 	and.w	r3, r3, #2
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d122      	bne.n	8009eac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	f003 0302 	and.w	r3, r3, #2
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d11b      	bne.n	8009eac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f06f 0202 	mvn.w	r2, #2
 8009e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	f003 0303 	and.w	r3, r3, #3
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f9b5 	bl	800a202 <HAL_TIM_IC_CaptureCallback>
 8009e98:	e005      	b.n	8009ea6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f9a7 	bl	800a1ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f9b8 	bl	800a216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	f003 0304 	and.w	r3, r3, #4
 8009eb6:	2b04      	cmp	r3, #4
 8009eb8:	d122      	bne.n	8009f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b04      	cmp	r3, #4
 8009ec6:	d11b      	bne.n	8009f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f06f 0204 	mvn.w	r2, #4
 8009ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d003      	beq.n	8009eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f98b 	bl	800a202 <HAL_TIM_IC_CaptureCallback>
 8009eec:	e005      	b.n	8009efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 f97d 	bl	800a1ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f98e 	bl	800a216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	f003 0308 	and.w	r3, r3, #8
 8009f0a:	2b08      	cmp	r3, #8
 8009f0c:	d122      	bne.n	8009f54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	f003 0308 	and.w	r3, r3, #8
 8009f18:	2b08      	cmp	r3, #8
 8009f1a:	d11b      	bne.n	8009f54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f06f 0208 	mvn.w	r2, #8
 8009f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2204      	movs	r2, #4
 8009f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	69db      	ldr	r3, [r3, #28]
 8009f32:	f003 0303 	and.w	r3, r3, #3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d003      	beq.n	8009f42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f961 	bl	800a202 <HAL_TIM_IC_CaptureCallback>
 8009f40:	e005      	b.n	8009f4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f953 	bl	800a1ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f964 	bl	800a216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	f003 0310 	and.w	r3, r3, #16
 8009f5e:	2b10      	cmp	r3, #16
 8009f60:	d122      	bne.n	8009fa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	f003 0310 	and.w	r3, r3, #16
 8009f6c:	2b10      	cmp	r3, #16
 8009f6e:	d11b      	bne.n	8009fa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f06f 0210 	mvn.w	r2, #16
 8009f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2208      	movs	r2, #8
 8009f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	69db      	ldr	r3, [r3, #28]
 8009f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f937 	bl	800a202 <HAL_TIM_IC_CaptureCallback>
 8009f94:	e005      	b.n	8009fa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f929 	bl	800a1ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f93a 	bl	800a216 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d10e      	bne.n	8009fd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	f003 0301 	and.w	r3, r3, #1
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d107      	bne.n	8009fd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f06f 0201 	mvn.w	r2, #1
 8009fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7f9 f90a 	bl	80031e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fde:	2b80      	cmp	r3, #128	; 0x80
 8009fe0:	d10e      	bne.n	800a000 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fec:	2b80      	cmp	r3, #128	; 0x80
 8009fee:	d107      	bne.n	800a000 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fae0 	bl	800a5c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a00a:	2b40      	cmp	r3, #64	; 0x40
 800a00c:	d10e      	bne.n	800a02c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a018:	2b40      	cmp	r3, #64	; 0x40
 800a01a:	d107      	bne.n	800a02c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f8ff 	bl	800a22a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	f003 0320 	and.w	r3, r3, #32
 800a036:	2b20      	cmp	r3, #32
 800a038:	d10e      	bne.n	800a058 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	f003 0320 	and.w	r3, r3, #32
 800a044:	2b20      	cmp	r3, #32
 800a046:	d107      	bne.n	800a058 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f06f 0220 	mvn.w	r2, #32
 800a050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 faaa 	bl	800a5ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a058:	bf00      	nop
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a06a:	2300      	movs	r3, #0
 800a06c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a074:	2b01      	cmp	r3, #1
 800a076:	d101      	bne.n	800a07c <HAL_TIM_ConfigClockSource+0x1c>
 800a078:	2302      	movs	r3, #2
 800a07a:	e0b4      	b.n	800a1e6 <HAL_TIM_ConfigClockSource+0x186>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2202      	movs	r2, #2
 800a088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a09a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0b4:	d03e      	beq.n	800a134 <HAL_TIM_ConfigClockSource+0xd4>
 800a0b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ba:	f200 8087 	bhi.w	800a1cc <HAL_TIM_ConfigClockSource+0x16c>
 800a0be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0c2:	f000 8086 	beq.w	800a1d2 <HAL_TIM_ConfigClockSource+0x172>
 800a0c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ca:	d87f      	bhi.n	800a1cc <HAL_TIM_ConfigClockSource+0x16c>
 800a0cc:	2b70      	cmp	r3, #112	; 0x70
 800a0ce:	d01a      	beq.n	800a106 <HAL_TIM_ConfigClockSource+0xa6>
 800a0d0:	2b70      	cmp	r3, #112	; 0x70
 800a0d2:	d87b      	bhi.n	800a1cc <HAL_TIM_ConfigClockSource+0x16c>
 800a0d4:	2b60      	cmp	r3, #96	; 0x60
 800a0d6:	d050      	beq.n	800a17a <HAL_TIM_ConfigClockSource+0x11a>
 800a0d8:	2b60      	cmp	r3, #96	; 0x60
 800a0da:	d877      	bhi.n	800a1cc <HAL_TIM_ConfigClockSource+0x16c>
 800a0dc:	2b50      	cmp	r3, #80	; 0x50
 800a0de:	d03c      	beq.n	800a15a <HAL_TIM_ConfigClockSource+0xfa>
 800a0e0:	2b50      	cmp	r3, #80	; 0x50
 800a0e2:	d873      	bhi.n	800a1cc <HAL_TIM_ConfigClockSource+0x16c>
 800a0e4:	2b40      	cmp	r3, #64	; 0x40
 800a0e6:	d058      	beq.n	800a19a <HAL_TIM_ConfigClockSource+0x13a>
 800a0e8:	2b40      	cmp	r3, #64	; 0x40
 800a0ea:	d86f      	bhi.n	800a1cc <HAL_TIM_ConfigClockSource+0x16c>
 800a0ec:	2b30      	cmp	r3, #48	; 0x30
 800a0ee:	d064      	beq.n	800a1ba <HAL_TIM_ConfigClockSource+0x15a>
 800a0f0:	2b30      	cmp	r3, #48	; 0x30
 800a0f2:	d86b      	bhi.n	800a1cc <HAL_TIM_ConfigClockSource+0x16c>
 800a0f4:	2b20      	cmp	r3, #32
 800a0f6:	d060      	beq.n	800a1ba <HAL_TIM_ConfigClockSource+0x15a>
 800a0f8:	2b20      	cmp	r3, #32
 800a0fa:	d867      	bhi.n	800a1cc <HAL_TIM_ConfigClockSource+0x16c>
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d05c      	beq.n	800a1ba <HAL_TIM_ConfigClockSource+0x15a>
 800a100:	2b10      	cmp	r3, #16
 800a102:	d05a      	beq.n	800a1ba <HAL_TIM_ConfigClockSource+0x15a>
 800a104:	e062      	b.n	800a1cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6818      	ldr	r0, [r3, #0]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	6899      	ldr	r1, [r3, #8]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	f000 f9ad 	bl	800a474 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a128:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	609a      	str	r2, [r3, #8]
      break;
 800a132:	e04f      	b.n	800a1d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6818      	ldr	r0, [r3, #0]
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	6899      	ldr	r1, [r3, #8]
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	f000 f996 	bl	800a474 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	689a      	ldr	r2, [r3, #8]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a156:	609a      	str	r2, [r3, #8]
      break;
 800a158:	e03c      	b.n	800a1d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6818      	ldr	r0, [r3, #0]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	6859      	ldr	r1, [r3, #4]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	461a      	mov	r2, r3
 800a168:	f000 f90a 	bl	800a380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2150      	movs	r1, #80	; 0x50
 800a172:	4618      	mov	r0, r3
 800a174:	f000 f963 	bl	800a43e <TIM_ITRx_SetConfig>
      break;
 800a178:	e02c      	b.n	800a1d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6818      	ldr	r0, [r3, #0]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	6859      	ldr	r1, [r3, #4]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	461a      	mov	r2, r3
 800a188:	f000 f929 	bl	800a3de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2160      	movs	r1, #96	; 0x60
 800a192:	4618      	mov	r0, r3
 800a194:	f000 f953 	bl	800a43e <TIM_ITRx_SetConfig>
      break;
 800a198:	e01c      	b.n	800a1d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6818      	ldr	r0, [r3, #0]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	6859      	ldr	r1, [r3, #4]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	f000 f8ea 	bl	800a380 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2140      	movs	r1, #64	; 0x40
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f000 f943 	bl	800a43e <TIM_ITRx_SetConfig>
      break;
 800a1b8:	e00c      	b.n	800a1d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	f000 f93a 	bl	800a43e <TIM_ITRx_SetConfig>
      break;
 800a1ca:	e003      	b.n	800a1d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a1d0:	e000      	b.n	800a1d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a1d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b083      	sub	sp, #12
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a1f6:	bf00      	nop
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a202:	b480      	push	{r7}
 800a204:	b083      	sub	sp, #12
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a20a:	bf00      	nop
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a216:	b480      	push	{r7}
 800a218:	b083      	sub	sp, #12
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a21e:	bf00      	nop
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b083      	sub	sp, #12
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a232:	bf00      	nop
 800a234:	370c      	adds	r7, #12
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
	...

0800a240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4a40      	ldr	r2, [pc, #256]	; (800a354 <TIM_Base_SetConfig+0x114>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d013      	beq.n	800a280 <TIM_Base_SetConfig+0x40>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a25e:	d00f      	beq.n	800a280 <TIM_Base_SetConfig+0x40>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a3d      	ldr	r2, [pc, #244]	; (800a358 <TIM_Base_SetConfig+0x118>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d00b      	beq.n	800a280 <TIM_Base_SetConfig+0x40>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a3c      	ldr	r2, [pc, #240]	; (800a35c <TIM_Base_SetConfig+0x11c>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d007      	beq.n	800a280 <TIM_Base_SetConfig+0x40>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a3b      	ldr	r2, [pc, #236]	; (800a360 <TIM_Base_SetConfig+0x120>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d003      	beq.n	800a280 <TIM_Base_SetConfig+0x40>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a3a      	ldr	r2, [pc, #232]	; (800a364 <TIM_Base_SetConfig+0x124>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d108      	bne.n	800a292 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	4313      	orrs	r3, r2
 800a290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a2f      	ldr	r2, [pc, #188]	; (800a354 <TIM_Base_SetConfig+0x114>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d02b      	beq.n	800a2f2 <TIM_Base_SetConfig+0xb2>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a0:	d027      	beq.n	800a2f2 <TIM_Base_SetConfig+0xb2>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a2c      	ldr	r2, [pc, #176]	; (800a358 <TIM_Base_SetConfig+0x118>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d023      	beq.n	800a2f2 <TIM_Base_SetConfig+0xb2>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a2b      	ldr	r2, [pc, #172]	; (800a35c <TIM_Base_SetConfig+0x11c>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d01f      	beq.n	800a2f2 <TIM_Base_SetConfig+0xb2>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a2a      	ldr	r2, [pc, #168]	; (800a360 <TIM_Base_SetConfig+0x120>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d01b      	beq.n	800a2f2 <TIM_Base_SetConfig+0xb2>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a29      	ldr	r2, [pc, #164]	; (800a364 <TIM_Base_SetConfig+0x124>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d017      	beq.n	800a2f2 <TIM_Base_SetConfig+0xb2>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a28      	ldr	r2, [pc, #160]	; (800a368 <TIM_Base_SetConfig+0x128>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d013      	beq.n	800a2f2 <TIM_Base_SetConfig+0xb2>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a27      	ldr	r2, [pc, #156]	; (800a36c <TIM_Base_SetConfig+0x12c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d00f      	beq.n	800a2f2 <TIM_Base_SetConfig+0xb2>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a26      	ldr	r2, [pc, #152]	; (800a370 <TIM_Base_SetConfig+0x130>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d00b      	beq.n	800a2f2 <TIM_Base_SetConfig+0xb2>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a25      	ldr	r2, [pc, #148]	; (800a374 <TIM_Base_SetConfig+0x134>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d007      	beq.n	800a2f2 <TIM_Base_SetConfig+0xb2>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a24      	ldr	r2, [pc, #144]	; (800a378 <TIM_Base_SetConfig+0x138>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d003      	beq.n	800a2f2 <TIM_Base_SetConfig+0xb2>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a23      	ldr	r2, [pc, #140]	; (800a37c <TIM_Base_SetConfig+0x13c>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d108      	bne.n	800a304 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	4313      	orrs	r3, r2
 800a302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	4313      	orrs	r3, r2
 800a310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	689a      	ldr	r2, [r3, #8]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4a0a      	ldr	r2, [pc, #40]	; (800a354 <TIM_Base_SetConfig+0x114>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d003      	beq.n	800a338 <TIM_Base_SetConfig+0xf8>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4a0c      	ldr	r2, [pc, #48]	; (800a364 <TIM_Base_SetConfig+0x124>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d103      	bne.n	800a340 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	691a      	ldr	r2, [r3, #16]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	615a      	str	r2, [r3, #20]
}
 800a346:	bf00      	nop
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	40010000 	.word	0x40010000
 800a358:	40000400 	.word	0x40000400
 800a35c:	40000800 	.word	0x40000800
 800a360:	40000c00 	.word	0x40000c00
 800a364:	40010400 	.word	0x40010400
 800a368:	40014000 	.word	0x40014000
 800a36c:	40014400 	.word	0x40014400
 800a370:	40014800 	.word	0x40014800
 800a374:	40001800 	.word	0x40001800
 800a378:	40001c00 	.word	0x40001c00
 800a37c:	40002000 	.word	0x40002000

0800a380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a380:	b480      	push	{r7}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6a1b      	ldr	r3, [r3, #32]
 800a390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	f023 0201 	bic.w	r2, r3, #1
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	699b      	ldr	r3, [r3, #24]
 800a3a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	011b      	lsls	r3, r3, #4
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f023 030a 	bic.w	r3, r3, #10
 800a3bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	621a      	str	r2, [r3, #32]
}
 800a3d2:	bf00      	nop
 800a3d4:	371c      	adds	r7, #28
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b087      	sub	sp, #28
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	60f8      	str	r0, [r7, #12]
 800a3e6:	60b9      	str	r1, [r7, #8]
 800a3e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	f023 0210 	bic.w	r2, r3, #16
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6a1b      	ldr	r3, [r3, #32]
 800a400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a408:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	031b      	lsls	r3, r3, #12
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	4313      	orrs	r3, r2
 800a412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a41a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	011b      	lsls	r3, r3, #4
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	4313      	orrs	r3, r2
 800a424:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	621a      	str	r2, [r3, #32]
}
 800a432:	bf00      	nop
 800a434:	371c      	adds	r7, #28
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a43e:	b480      	push	{r7}
 800a440:	b085      	sub	sp, #20
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a454:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	f043 0307 	orr.w	r3, r3, #7
 800a460:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	609a      	str	r2, [r3, #8]
}
 800a468:	bf00      	nop
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a474:	b480      	push	{r7}
 800a476:	b087      	sub	sp, #28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
 800a480:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a48e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	021a      	lsls	r2, r3, #8
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	431a      	orrs	r2, r3
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	697a      	ldr	r2, [r7, #20]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	609a      	str	r2, [r3, #8]
}
 800a4a8:	bf00      	nop
 800a4aa:	371c      	adds	r7, #28
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d101      	bne.n	800a4cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	e05a      	b.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a21      	ldr	r2, [pc, #132]	; (800a590 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d022      	beq.n	800a556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a518:	d01d      	beq.n	800a556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a1d      	ldr	r2, [pc, #116]	; (800a594 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d018      	beq.n	800a556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a1b      	ldr	r2, [pc, #108]	; (800a598 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d013      	beq.n	800a556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a1a      	ldr	r2, [pc, #104]	; (800a59c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d00e      	beq.n	800a556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a18      	ldr	r2, [pc, #96]	; (800a5a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d009      	beq.n	800a556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a17      	ldr	r2, [pc, #92]	; (800a5a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d004      	beq.n	800a556 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a15      	ldr	r2, [pc, #84]	; (800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d10c      	bne.n	800a570 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a55c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	4313      	orrs	r3, r2
 800a566:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3714      	adds	r7, #20
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	40010000 	.word	0x40010000
 800a594:	40000400 	.word	0x40000400
 800a598:	40000800 	.word	0x40000800
 800a59c:	40000c00 	.word	0x40000c00
 800a5a0:	40010400 	.word	0x40010400
 800a5a4:	40014000 	.word	0x40014000
 800a5a8:	40001800 	.word	0x40001800

0800a5ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5b4:	bf00      	nop
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b084      	sub	sp, #16
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	f107 001c 	add.w	r0, r7, #28
 800a5e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d122      	bne.n	800a632 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a616:	2b01      	cmp	r3, #1
 800a618:	d105      	bne.n	800a626 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f001 fbee 	bl	800be08 <USB_CoreReset>
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]
 800a630:	e01a      	b.n	800a668 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f001 fbe2 	bl	800be08 <USB_CoreReset>
 800a644:	4603      	mov	r3, r0
 800a646:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d106      	bne.n	800a65c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a652:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	639a      	str	r2, [r3, #56]	; 0x38
 800a65a:	e005      	b.n	800a668 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a660:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d10b      	bne.n	800a686 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	f043 0206 	orr.w	r2, r3, #6
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f043 0220 	orr.w	r2, r3, #32
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a686:	7bfb      	ldrb	r3, [r7, #15]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a692:	b004      	add	sp, #16
 800a694:	4770      	bx	lr
	...

0800a698 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a698:	b480      	push	{r7}
 800a69a:	b087      	sub	sp, #28
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a6a6:	79fb      	ldrb	r3, [r7, #7]
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d165      	bne.n	800a778 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	4a41      	ldr	r2, [pc, #260]	; (800a7b4 <USB_SetTurnaroundTime+0x11c>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d906      	bls.n	800a6c2 <USB_SetTurnaroundTime+0x2a>
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	4a40      	ldr	r2, [pc, #256]	; (800a7b8 <USB_SetTurnaroundTime+0x120>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d202      	bcs.n	800a6c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a6bc:	230f      	movs	r3, #15
 800a6be:	617b      	str	r3, [r7, #20]
 800a6c0:	e062      	b.n	800a788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	4a3c      	ldr	r2, [pc, #240]	; (800a7b8 <USB_SetTurnaroundTime+0x120>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d306      	bcc.n	800a6d8 <USB_SetTurnaroundTime+0x40>
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	4a3b      	ldr	r2, [pc, #236]	; (800a7bc <USB_SetTurnaroundTime+0x124>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d202      	bcs.n	800a6d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a6d2:	230e      	movs	r3, #14
 800a6d4:	617b      	str	r3, [r7, #20]
 800a6d6:	e057      	b.n	800a788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	4a38      	ldr	r2, [pc, #224]	; (800a7bc <USB_SetTurnaroundTime+0x124>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d306      	bcc.n	800a6ee <USB_SetTurnaroundTime+0x56>
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	4a37      	ldr	r2, [pc, #220]	; (800a7c0 <USB_SetTurnaroundTime+0x128>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d202      	bcs.n	800a6ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a6e8:	230d      	movs	r3, #13
 800a6ea:	617b      	str	r3, [r7, #20]
 800a6ec:	e04c      	b.n	800a788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	4a33      	ldr	r2, [pc, #204]	; (800a7c0 <USB_SetTurnaroundTime+0x128>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d306      	bcc.n	800a704 <USB_SetTurnaroundTime+0x6c>
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	4a32      	ldr	r2, [pc, #200]	; (800a7c4 <USB_SetTurnaroundTime+0x12c>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d802      	bhi.n	800a704 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a6fe:	230c      	movs	r3, #12
 800a700:	617b      	str	r3, [r7, #20]
 800a702:	e041      	b.n	800a788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	4a2f      	ldr	r2, [pc, #188]	; (800a7c4 <USB_SetTurnaroundTime+0x12c>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d906      	bls.n	800a71a <USB_SetTurnaroundTime+0x82>
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	4a2e      	ldr	r2, [pc, #184]	; (800a7c8 <USB_SetTurnaroundTime+0x130>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d802      	bhi.n	800a71a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a714:	230b      	movs	r3, #11
 800a716:	617b      	str	r3, [r7, #20]
 800a718:	e036      	b.n	800a788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	4a2a      	ldr	r2, [pc, #168]	; (800a7c8 <USB_SetTurnaroundTime+0x130>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d906      	bls.n	800a730 <USB_SetTurnaroundTime+0x98>
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	4a29      	ldr	r2, [pc, #164]	; (800a7cc <USB_SetTurnaroundTime+0x134>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d802      	bhi.n	800a730 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a72a:	230a      	movs	r3, #10
 800a72c:	617b      	str	r3, [r7, #20]
 800a72e:	e02b      	b.n	800a788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	4a26      	ldr	r2, [pc, #152]	; (800a7cc <USB_SetTurnaroundTime+0x134>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d906      	bls.n	800a746 <USB_SetTurnaroundTime+0xae>
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	4a25      	ldr	r2, [pc, #148]	; (800a7d0 <USB_SetTurnaroundTime+0x138>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d202      	bcs.n	800a746 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a740:	2309      	movs	r3, #9
 800a742:	617b      	str	r3, [r7, #20]
 800a744:	e020      	b.n	800a788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	4a21      	ldr	r2, [pc, #132]	; (800a7d0 <USB_SetTurnaroundTime+0x138>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d306      	bcc.n	800a75c <USB_SetTurnaroundTime+0xc4>
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	4a20      	ldr	r2, [pc, #128]	; (800a7d4 <USB_SetTurnaroundTime+0x13c>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d802      	bhi.n	800a75c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a756:	2308      	movs	r3, #8
 800a758:	617b      	str	r3, [r7, #20]
 800a75a:	e015      	b.n	800a788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	4a1d      	ldr	r2, [pc, #116]	; (800a7d4 <USB_SetTurnaroundTime+0x13c>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d906      	bls.n	800a772 <USB_SetTurnaroundTime+0xda>
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	4a1c      	ldr	r2, [pc, #112]	; (800a7d8 <USB_SetTurnaroundTime+0x140>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d202      	bcs.n	800a772 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a76c:	2307      	movs	r3, #7
 800a76e:	617b      	str	r3, [r7, #20]
 800a770:	e00a      	b.n	800a788 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a772:	2306      	movs	r3, #6
 800a774:	617b      	str	r3, [r7, #20]
 800a776:	e007      	b.n	800a788 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a778:	79fb      	ldrb	r3, [r7, #7]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d102      	bne.n	800a784 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a77e:	2309      	movs	r3, #9
 800a780:	617b      	str	r3, [r7, #20]
 800a782:	e001      	b.n	800a788 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a784:	2309      	movs	r3, #9
 800a786:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	68da      	ldr	r2, [r3, #12]
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	029b      	lsls	r3, r3, #10
 800a79c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a7a0:	431a      	orrs	r2, r3
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	371c      	adds	r7, #28
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	00d8acbf 	.word	0x00d8acbf
 800a7b8:	00e4e1c0 	.word	0x00e4e1c0
 800a7bc:	00f42400 	.word	0x00f42400
 800a7c0:	01067380 	.word	0x01067380
 800a7c4:	011a499f 	.word	0x011a499f
 800a7c8:	01312cff 	.word	0x01312cff
 800a7cc:	014ca43f 	.word	0x014ca43f
 800a7d0:	016e3600 	.word	0x016e3600
 800a7d4:	01a6ab1f 	.word	0x01a6ab1f
 800a7d8:	01e84800 	.word	0x01e84800

0800a7dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f043 0201 	orr.w	r2, r3, #1
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	f023 0201 	bic.w	r2, r3, #1
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a82c:	2300      	movs	r3, #0
 800a82e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a83c:	78fb      	ldrb	r3, [r7, #3]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d115      	bne.n	800a86e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a84e:	2001      	movs	r0, #1
 800a850:	f7f9 fdd6 	bl	8004400 <HAL_Delay>
      ms++;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	3301      	adds	r3, #1
 800a858:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f001 fa45 	bl	800bcea <USB_GetMode>
 800a860:	4603      	mov	r3, r0
 800a862:	2b01      	cmp	r3, #1
 800a864:	d01e      	beq.n	800a8a4 <USB_SetCurrentMode+0x84>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2b31      	cmp	r3, #49	; 0x31
 800a86a:	d9f0      	bls.n	800a84e <USB_SetCurrentMode+0x2e>
 800a86c:	e01a      	b.n	800a8a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a86e:	78fb      	ldrb	r3, [r7, #3]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d115      	bne.n	800a8a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a880:	2001      	movs	r0, #1
 800a882:	f7f9 fdbd 	bl	8004400 <HAL_Delay>
      ms++;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3301      	adds	r3, #1
 800a88a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f001 fa2c 	bl	800bcea <USB_GetMode>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d005      	beq.n	800a8a4 <USB_SetCurrentMode+0x84>
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2b31      	cmp	r3, #49	; 0x31
 800a89c:	d9f0      	bls.n	800a880 <USB_SetCurrentMode+0x60>
 800a89e:	e001      	b.n	800a8a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e005      	b.n	800a8b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b32      	cmp	r3, #50	; 0x32
 800a8a8:	d101      	bne.n	800a8ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e000      	b.n	800a8b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b086      	sub	sp, #24
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a8c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	613b      	str	r3, [r7, #16]
 800a8d6:	e009      	b.n	800a8ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	3340      	adds	r3, #64	; 0x40
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4413      	add	r3, r2
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	613b      	str	r3, [r7, #16]
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	2b0e      	cmp	r3, #14
 800a8f0:	d9f2      	bls.n	800a8d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a8f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d11c      	bne.n	800a932 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a906:	f043 0302 	orr.w	r3, r3, #2
 800a90a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a910:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a928:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	639a      	str	r2, [r3, #56]	; 0x38
 800a930:	e00b      	b.n	800a94a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a936:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a942:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a950:	461a      	mov	r2, r3
 800a952:	2300      	movs	r3, #0
 800a954:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a95c:	4619      	mov	r1, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a964:	461a      	mov	r2, r3
 800a966:	680b      	ldr	r3, [r1, #0]
 800a968:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d10c      	bne.n	800a98a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	2b00      	cmp	r3, #0
 800a974:	d104      	bne.n	800a980 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a976:	2100      	movs	r1, #0
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f965 	bl	800ac48 <USB_SetDevSpeed>
 800a97e:	e008      	b.n	800a992 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a980:	2101      	movs	r1, #1
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f960 	bl	800ac48 <USB_SetDevSpeed>
 800a988:	e003      	b.n	800a992 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a98a:	2103      	movs	r1, #3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f95b 	bl	800ac48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a992:	2110      	movs	r1, #16
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f8f3 	bl	800ab80 <USB_FlushTxFifo>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 f91f 	bl	800abe8 <USB_FlushRxFifo>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	2300      	movs	r3, #0
 800a9be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9d8:	2300      	movs	r3, #0
 800a9da:	613b      	str	r3, [r7, #16]
 800a9dc:	e043      	b.n	800aa66 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	015a      	lsls	r2, r3, #5
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9f4:	d118      	bne.n	800aa28 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d10a      	bne.n	800aa12 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	015a      	lsls	r2, r3, #5
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4413      	add	r3, r2
 800aa04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa08:	461a      	mov	r2, r3
 800aa0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa0e:	6013      	str	r3, [r2, #0]
 800aa10:	e013      	b.n	800aa3a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	015a      	lsls	r2, r3, #5
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	4413      	add	r3, r2
 800aa1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa24:	6013      	str	r3, [r2, #0]
 800aa26:	e008      	b.n	800aa3a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa34:	461a      	mov	r2, r3
 800aa36:	2300      	movs	r3, #0
 800aa38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa46:	461a      	mov	r2, r3
 800aa48:	2300      	movs	r3, #0
 800aa4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa58:	461a      	mov	r2, r3
 800aa5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	3301      	adds	r3, #1
 800aa64:	613b      	str	r3, [r7, #16]
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d3b7      	bcc.n	800a9de <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa6e:	2300      	movs	r3, #0
 800aa70:	613b      	str	r3, [r7, #16]
 800aa72:	e043      	b.n	800aafc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	015a      	lsls	r2, r3, #5
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa8a:	d118      	bne.n	800aabe <USB_DevInit+0x206>
    {
      if (i == 0U)
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10a      	bne.n	800aaa8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	015a      	lsls	r2, r3, #5
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	4413      	add	r3, r2
 800aa9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aaa4:	6013      	str	r3, [r2, #0]
 800aaa6:	e013      	b.n	800aad0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab4:	461a      	mov	r2, r3
 800aab6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aaba:	6013      	str	r3, [r2, #0]
 800aabc:	e008      	b.n	800aad0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	015a      	lsls	r2, r3, #5
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	4413      	add	r3, r2
 800aac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaca:	461a      	mov	r2, r3
 800aacc:	2300      	movs	r3, #0
 800aace:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	015a      	lsls	r2, r3, #5
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	4413      	add	r3, r2
 800aad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aadc:	461a      	mov	r2, r3
 800aade:	2300      	movs	r3, #0
 800aae0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	015a      	lsls	r2, r3, #5
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	4413      	add	r3, r2
 800aaea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aaf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	613b      	str	r3, [r7, #16]
 800aafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d3b7      	bcc.n	800aa74 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d105      	bne.n	800ab38 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	f043 0210 	orr.w	r2, r3, #16
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	699a      	ldr	r2, [r3, #24]
 800ab3c:	4b0f      	ldr	r3, [pc, #60]	; (800ab7c <USB_DevInit+0x2c4>)
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d005      	beq.n	800ab56 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	f043 0208 	orr.w	r2, r3, #8
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d107      	bne.n	800ab6c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab64:	f043 0304 	orr.w	r3, r3, #4
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab78:	b004      	add	sp, #16
 800ab7a:	4770      	bx	lr
 800ab7c:	803c3800 	.word	0x803c3800

0800ab80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	3301      	adds	r3, #1
 800ab92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	4a13      	ldr	r2, [pc, #76]	; (800abe4 <USB_FlushTxFifo+0x64>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d901      	bls.n	800aba0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	e01b      	b.n	800abd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	daf2      	bge.n	800ab8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aba8:	2300      	movs	r3, #0
 800abaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	019b      	lsls	r3, r3, #6
 800abb0:	f043 0220 	orr.w	r2, r3, #32
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	3301      	adds	r3, #1
 800abbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	4a08      	ldr	r2, [pc, #32]	; (800abe4 <USB_FlushTxFifo+0x64>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d901      	bls.n	800abca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800abc6:	2303      	movs	r3, #3
 800abc8:	e006      	b.n	800abd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	f003 0320 	and.w	r3, r3, #32
 800abd2:	2b20      	cmp	r3, #32
 800abd4:	d0f0      	beq.n	800abb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3714      	adds	r7, #20
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	00030d40 	.word	0x00030d40

0800abe8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abf0:	2300      	movs	r3, #0
 800abf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	3301      	adds	r3, #1
 800abf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	4a11      	ldr	r2, [pc, #68]	; (800ac44 <USB_FlushRxFifo+0x5c>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d901      	bls.n	800ac06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac02:	2303      	movs	r3, #3
 800ac04:	e018      	b.n	800ac38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	daf2      	bge.n	800abf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2210      	movs	r2, #16
 800ac16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	4a08      	ldr	r2, [pc, #32]	; (800ac44 <USB_FlushRxFifo+0x5c>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d901      	bls.n	800ac2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e006      	b.n	800ac38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	f003 0310 	and.w	r3, r3, #16
 800ac32:	2b10      	cmp	r3, #16
 800ac34:	d0f0      	beq.n	800ac18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	00030d40 	.word	0x00030d40

0800ac48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	78fb      	ldrb	r3, [r7, #3]
 800ac62:	68f9      	ldr	r1, [r7, #12]
 800ac64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3714      	adds	r7, #20
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ac7a:	b480      	push	{r7}
 800ac7c:	b087      	sub	sp, #28
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	f003 0306 	and.w	r3, r3, #6
 800ac92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d102      	bne.n	800aca0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	75fb      	strb	r3, [r7, #23]
 800ac9e:	e00a      	b.n	800acb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	d002      	beq.n	800acac <USB_GetDevSpeed+0x32>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b06      	cmp	r3, #6
 800acaa:	d102      	bne.n	800acb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800acac:	2302      	movs	r3, #2
 800acae:	75fb      	strb	r3, [r7, #23]
 800acb0:	e001      	b.n	800acb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800acb2:	230f      	movs	r3, #15
 800acb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800acb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	371c      	adds	r7, #28
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	785b      	ldrb	r3, [r3, #1]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d13a      	bne.n	800ad56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace6:	69da      	ldr	r2, [r3, #28]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	f003 030f 	and.w	r3, r3, #15
 800acf0:	2101      	movs	r1, #1
 800acf2:	fa01 f303 	lsl.w	r3, r1, r3
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	68f9      	ldr	r1, [r7, #12]
 800acfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acfe:	4313      	orrs	r3, r2
 800ad00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	015a      	lsls	r2, r3, #5
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	4413      	add	r3, r2
 800ad0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d155      	bne.n	800adc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	015a      	lsls	r2, r3, #5
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4413      	add	r3, r2
 800ad20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	791b      	ldrb	r3, [r3, #4]
 800ad32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	059b      	lsls	r3, r3, #22
 800ad3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	68ba      	ldr	r2, [r7, #8]
 800ad40:	0151      	lsls	r1, r2, #5
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	440a      	add	r2, r1
 800ad46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad52:	6013      	str	r3, [r2, #0]
 800ad54:	e036      	b.n	800adc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad5c:	69da      	ldr	r2, [r3, #28]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	f003 030f 	and.w	r3, r3, #15
 800ad66:	2101      	movs	r1, #1
 800ad68:	fa01 f303 	lsl.w	r3, r1, r3
 800ad6c:	041b      	lsls	r3, r3, #16
 800ad6e:	68f9      	ldr	r1, [r7, #12]
 800ad70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad74:	4313      	orrs	r3, r2
 800ad76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	015a      	lsls	r2, r3, #5
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	4413      	add	r3, r2
 800ad80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d11a      	bne.n	800adc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	015a      	lsls	r2, r3, #5
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	4413      	add	r3, r2
 800ad96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	791b      	ldrb	r3, [r3, #4]
 800ada8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800adaa:	430b      	orrs	r3, r1
 800adac:	4313      	orrs	r3, r2
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	0151      	lsls	r1, r2, #5
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	440a      	add	r2, r1
 800adb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
	...

0800add4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	785b      	ldrb	r3, [r3, #1]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d161      	bne.n	800aeb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	015a      	lsls	r2, r3, #5
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	4413      	add	r3, r2
 800adf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae06:	d11f      	bne.n	800ae48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	015a      	lsls	r2, r3, #5
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	4413      	add	r3, r2
 800ae10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68ba      	ldr	r2, [r7, #8]
 800ae18:	0151      	lsls	r1, r2, #5
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	440a      	add	r2, r1
 800ae1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	015a      	lsls	r2, r3, #5
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	4413      	add	r3, r2
 800ae30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	0151      	lsls	r1, r2, #5
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	440a      	add	r2, r1
 800ae3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	f003 030f 	and.w	r3, r3, #15
 800ae58:	2101      	movs	r1, #1
 800ae5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	43db      	mvns	r3, r3
 800ae62:	68f9      	ldr	r1, [r7, #12]
 800ae64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae68:	4013      	ands	r3, r2
 800ae6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae72:	69da      	ldr	r2, [r3, #28]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	f003 030f 	and.w	r3, r3, #15
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	43db      	mvns	r3, r3
 800ae86:	68f9      	ldr	r1, [r7, #12]
 800ae88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	015a      	lsls	r2, r3, #5
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	4413      	add	r3, r2
 800ae98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	0159      	lsls	r1, r3, #5
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	440b      	add	r3, r1
 800aea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeaa:	4619      	mov	r1, r3
 800aeac:	4b35      	ldr	r3, [pc, #212]	; (800af84 <USB_DeactivateEndpoint+0x1b0>)
 800aeae:	4013      	ands	r3, r2
 800aeb0:	600b      	str	r3, [r1, #0]
 800aeb2:	e060      	b.n	800af76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	015a      	lsls	r2, r3, #5
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	4413      	add	r3, r2
 800aebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aeca:	d11f      	bne.n	800af0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	015a      	lsls	r2, r3, #5
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	4413      	add	r3, r2
 800aed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	0151      	lsls	r1, r2, #5
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	440a      	add	r2, r1
 800aee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aee6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aeea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	015a      	lsls	r2, r3, #5
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	4413      	add	r3, r2
 800aef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	0151      	lsls	r1, r2, #5
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	440a      	add	r2, r1
 800af02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	f003 030f 	and.w	r3, r3, #15
 800af1c:	2101      	movs	r1, #1
 800af1e:	fa01 f303 	lsl.w	r3, r1, r3
 800af22:	041b      	lsls	r3, r3, #16
 800af24:	43db      	mvns	r3, r3
 800af26:	68f9      	ldr	r1, [r7, #12]
 800af28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af2c:	4013      	ands	r3, r2
 800af2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af36:	69da      	ldr	r2, [r3, #28]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	f003 030f 	and.w	r3, r3, #15
 800af40:	2101      	movs	r1, #1
 800af42:	fa01 f303 	lsl.w	r3, r1, r3
 800af46:	041b      	lsls	r3, r3, #16
 800af48:	43db      	mvns	r3, r3
 800af4a:	68f9      	ldr	r1, [r7, #12]
 800af4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af50:	4013      	ands	r3, r2
 800af52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	015a      	lsls	r2, r3, #5
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	4413      	add	r3, r2
 800af5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	0159      	lsls	r1, r3, #5
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	440b      	add	r3, r1
 800af6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af6e:	4619      	mov	r1, r3
 800af70:	4b05      	ldr	r3, [pc, #20]	; (800af88 <USB_DeactivateEndpoint+0x1b4>)
 800af72:	4013      	ands	r3, r2
 800af74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr
 800af84:	ec337800 	.word	0xec337800
 800af88:	eff37800 	.word	0xeff37800

0800af8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b08a      	sub	sp, #40	; 0x28
 800af90:	af02      	add	r7, sp, #8
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	4613      	mov	r3, r2
 800af98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	785b      	ldrb	r3, [r3, #1]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	f040 815c 	bne.w	800b266 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d132      	bne.n	800b01c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	015a      	lsls	r2, r3, #5
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	4413      	add	r3, r2
 800afbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	0151      	lsls	r1, r2, #5
 800afc8:	69fa      	ldr	r2, [r7, #28]
 800afca:	440a      	add	r2, r1
 800afcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	015a      	lsls	r2, r3, #5
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	4413      	add	r3, r2
 800afe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	69ba      	ldr	r2, [r7, #24]
 800afea:	0151      	lsls	r1, r2, #5
 800afec:	69fa      	ldr	r2, [r7, #28]
 800afee:	440a      	add	r2, r1
 800aff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aff4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aff8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	015a      	lsls	r2, r3, #5
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	4413      	add	r3, r2
 800b002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	69ba      	ldr	r2, [r7, #24]
 800b00a:	0151      	lsls	r1, r2, #5
 800b00c:	69fa      	ldr	r2, [r7, #28]
 800b00e:	440a      	add	r2, r1
 800b010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b014:	0cdb      	lsrs	r3, r3, #19
 800b016:	04db      	lsls	r3, r3, #19
 800b018:	6113      	str	r3, [r2, #16]
 800b01a:	e074      	b.n	800b106 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	015a      	lsls	r2, r3, #5
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	4413      	add	r3, r2
 800b024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	69ba      	ldr	r2, [r7, #24]
 800b02c:	0151      	lsls	r1, r2, #5
 800b02e:	69fa      	ldr	r2, [r7, #28]
 800b030:	440a      	add	r2, r1
 800b032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b036:	0cdb      	lsrs	r3, r3, #19
 800b038:	04db      	lsls	r3, r3, #19
 800b03a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	015a      	lsls	r2, r3, #5
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	4413      	add	r3, r2
 800b044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	0151      	lsls	r1, r2, #5
 800b04e:	69fa      	ldr	r2, [r7, #28]
 800b050:	440a      	add	r2, r1
 800b052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b056:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b05a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b05e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	015a      	lsls	r2, r3, #5
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	4413      	add	r3, r2
 800b068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b06c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	6999      	ldr	r1, [r3, #24]
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	440b      	add	r3, r1
 800b078:	1e59      	subs	r1, r3, #1
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b082:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b084:	4b9d      	ldr	r3, [pc, #628]	; (800b2fc <USB_EPStartXfer+0x370>)
 800b086:	400b      	ands	r3, r1
 800b088:	69b9      	ldr	r1, [r7, #24]
 800b08a:	0148      	lsls	r0, r1, #5
 800b08c:	69f9      	ldr	r1, [r7, #28]
 800b08e:	4401      	add	r1, r0
 800b090:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b094:	4313      	orrs	r3, r2
 800b096:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	015a      	lsls	r2, r3, #5
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	4413      	add	r3, r2
 800b0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a4:	691a      	ldr	r2, [r3, #16]
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0ae:	69b9      	ldr	r1, [r7, #24]
 800b0b0:	0148      	lsls	r0, r1, #5
 800b0b2:	69f9      	ldr	r1, [r7, #28]
 800b0b4:	4401      	add	r1, r0
 800b0b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	791b      	ldrb	r3, [r3, #4]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d11f      	bne.n	800b106 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	015a      	lsls	r2, r3, #5
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	69ba      	ldr	r2, [r7, #24]
 800b0d6:	0151      	lsls	r1, r2, #5
 800b0d8:	69fa      	ldr	r2, [r7, #28]
 800b0da:	440a      	add	r2, r1
 800b0dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b0e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	015a      	lsls	r2, r3, #5
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	69ba      	ldr	r2, [r7, #24]
 800b0f6:	0151      	lsls	r1, r2, #5
 800b0f8:	69fa      	ldr	r2, [r7, #28]
 800b0fa:	440a      	add	r2, r1
 800b0fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b100:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b104:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b106:	79fb      	ldrb	r3, [r7, #7]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d14b      	bne.n	800b1a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	695b      	ldr	r3, [r3, #20]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d009      	beq.n	800b128 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b120:	461a      	mov	r2, r3
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	791b      	ldrb	r3, [r3, #4]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d128      	bne.n	800b182 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d110      	bne.n	800b162 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	015a      	lsls	r2, r3, #5
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	4413      	add	r3, r2
 800b148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	69ba      	ldr	r2, [r7, #24]
 800b150:	0151      	lsls	r1, r2, #5
 800b152:	69fa      	ldr	r2, [r7, #28]
 800b154:	440a      	add	r2, r1
 800b156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b15a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	e00f      	b.n	800b182 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	015a      	lsls	r2, r3, #5
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	4413      	add	r3, r2
 800b16a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	69ba      	ldr	r2, [r7, #24]
 800b172:	0151      	lsls	r1, r2, #5
 800b174:	69fa      	ldr	r2, [r7, #28]
 800b176:	440a      	add	r2, r1
 800b178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b17c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b180:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	015a      	lsls	r2, r3, #5
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	4413      	add	r3, r2
 800b18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	69ba      	ldr	r2, [r7, #24]
 800b192:	0151      	lsls	r1, r2, #5
 800b194:	69fa      	ldr	r2, [r7, #28]
 800b196:	440a      	add	r2, r1
 800b198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b19c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1a0:	6013      	str	r3, [r2, #0]
 800b1a2:	e133      	b.n	800b40c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	015a      	lsls	r2, r3, #5
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	0151      	lsls	r1, r2, #5
 800b1b6:	69fa      	ldr	r2, [r7, #28]
 800b1b8:	440a      	add	r2, r1
 800b1ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	791b      	ldrb	r3, [r3, #4]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d015      	beq.n	800b1f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 811b 	beq.w	800b40c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	f003 030f 	and.w	r3, r3, #15
 800b1e6:	2101      	movs	r1, #1
 800b1e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ec:	69f9      	ldr	r1, [r7, #28]
 800b1ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	634b      	str	r3, [r1, #52]	; 0x34
 800b1f6:	e109      	b.n	800b40c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b204:	2b00      	cmp	r3, #0
 800b206:	d110      	bne.n	800b22a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	015a      	lsls	r2, r3, #5
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	4413      	add	r3, r2
 800b210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	69ba      	ldr	r2, [r7, #24]
 800b218:	0151      	lsls	r1, r2, #5
 800b21a:	69fa      	ldr	r2, [r7, #28]
 800b21c:	440a      	add	r2, r1
 800b21e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b222:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b226:	6013      	str	r3, [r2, #0]
 800b228:	e00f      	b.n	800b24a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	015a      	lsls	r2, r3, #5
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	4413      	add	r3, r2
 800b232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	69ba      	ldr	r2, [r7, #24]
 800b23a:	0151      	lsls	r1, r2, #5
 800b23c:	69fa      	ldr	r2, [r7, #28]
 800b23e:	440a      	add	r2, r1
 800b240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b248:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	6919      	ldr	r1, [r3, #16]
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	781a      	ldrb	r2, [r3, #0]
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	b298      	uxth	r0, r3
 800b258:	79fb      	ldrb	r3, [r7, #7]
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	4603      	mov	r3, r0
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f000 fade 	bl	800b820 <USB_WritePacket>
 800b264:	e0d2      	b.n	800b40c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	015a      	lsls	r2, r3, #5
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	4413      	add	r3, r2
 800b26e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	0151      	lsls	r1, r2, #5
 800b278:	69fa      	ldr	r2, [r7, #28]
 800b27a:	440a      	add	r2, r1
 800b27c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b280:	0cdb      	lsrs	r3, r3, #19
 800b282:	04db      	lsls	r3, r3, #19
 800b284:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	015a      	lsls	r2, r3, #5
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	4413      	add	r3, r2
 800b28e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	69ba      	ldr	r2, [r7, #24]
 800b296:	0151      	lsls	r1, r2, #5
 800b298:	69fa      	ldr	r2, [r7, #28]
 800b29a:	440a      	add	r2, r1
 800b29c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b2a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b2a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d126      	bne.n	800b300 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	015a      	lsls	r2, r3, #5
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2be:	691a      	ldr	r2, [r3, #16]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2c8:	69b9      	ldr	r1, [r7, #24]
 800b2ca:	0148      	lsls	r0, r1, #5
 800b2cc:	69f9      	ldr	r1, [r7, #28]
 800b2ce:	4401      	add	r1, r0
 800b2d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	015a      	lsls	r2, r3, #5
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	4413      	add	r3, r2
 800b2e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	69ba      	ldr	r2, [r7, #24]
 800b2e8:	0151      	lsls	r1, r2, #5
 800b2ea:	69fa      	ldr	r2, [r7, #28]
 800b2ec:	440a      	add	r2, r1
 800b2ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2f6:	6113      	str	r3, [r2, #16]
 800b2f8:	e03a      	b.n	800b370 <USB_EPStartXfer+0x3e4>
 800b2fa:	bf00      	nop
 800b2fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	699a      	ldr	r2, [r3, #24]
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	4413      	add	r3, r2
 800b30a:	1e5a      	subs	r2, r3, #1
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	fbb2 f3f3 	udiv	r3, r2, r3
 800b314:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	8afa      	ldrh	r2, [r7, #22]
 800b31c:	fb03 f202 	mul.w	r2, r3, r2
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b330:	691a      	ldr	r2, [r3, #16]
 800b332:	8afb      	ldrh	r3, [r7, #22]
 800b334:	04d9      	lsls	r1, r3, #19
 800b336:	4b38      	ldr	r3, [pc, #224]	; (800b418 <USB_EPStartXfer+0x48c>)
 800b338:	400b      	ands	r3, r1
 800b33a:	69b9      	ldr	r1, [r7, #24]
 800b33c:	0148      	lsls	r0, r1, #5
 800b33e:	69f9      	ldr	r1, [r7, #28]
 800b340:	4401      	add	r1, r0
 800b342:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b346:	4313      	orrs	r3, r2
 800b348:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	015a      	lsls	r2, r3, #5
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	4413      	add	r3, r2
 800b352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b356:	691a      	ldr	r2, [r3, #16]
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	69db      	ldr	r3, [r3, #28]
 800b35c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b360:	69b9      	ldr	r1, [r7, #24]
 800b362:	0148      	lsls	r0, r1, #5
 800b364:	69f9      	ldr	r1, [r7, #28]
 800b366:	4401      	add	r1, r0
 800b368:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b36c:	4313      	orrs	r3, r2
 800b36e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b370:	79fb      	ldrb	r3, [r7, #7]
 800b372:	2b01      	cmp	r3, #1
 800b374:	d10d      	bne.n	800b392 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d009      	beq.n	800b392 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	6919      	ldr	r1, [r3, #16]
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	015a      	lsls	r2, r3, #5
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	4413      	add	r3, r2
 800b38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b38e:	460a      	mov	r2, r1
 800b390:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	791b      	ldrb	r3, [r3, #4]
 800b396:	2b01      	cmp	r3, #1
 800b398:	d128      	bne.n	800b3ec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d110      	bne.n	800b3cc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	69ba      	ldr	r2, [r7, #24]
 800b3ba:	0151      	lsls	r1, r2, #5
 800b3bc:	69fa      	ldr	r2, [r7, #28]
 800b3be:	440a      	add	r2, r1
 800b3c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3c8:	6013      	str	r3, [r2, #0]
 800b3ca:	e00f      	b.n	800b3ec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	015a      	lsls	r2, r3, #5
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	69ba      	ldr	r2, [r7, #24]
 800b3dc:	0151      	lsls	r1, r2, #5
 800b3de:	69fa      	ldr	r2, [r7, #28]
 800b3e0:	440a      	add	r2, r1
 800b3e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	015a      	lsls	r2, r3, #5
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	69ba      	ldr	r2, [r7, #24]
 800b3fc:	0151      	lsls	r1, r2, #5
 800b3fe:	69fa      	ldr	r2, [r7, #28]
 800b400:	440a      	add	r2, r1
 800b402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b406:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b40a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3720      	adds	r7, #32
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	1ff80000 	.word	0x1ff80000

0800b41c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b087      	sub	sp, #28
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	4613      	mov	r3, r2
 800b428:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	785b      	ldrb	r3, [r3, #1]
 800b438:	2b01      	cmp	r3, #1
 800b43a:	f040 80ce 	bne.w	800b5da <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d132      	bne.n	800b4ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	015a      	lsls	r2, r3, #5
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	4413      	add	r3, r2
 800b44e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b452:	691b      	ldr	r3, [r3, #16]
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	0151      	lsls	r1, r2, #5
 800b458:	697a      	ldr	r2, [r7, #20]
 800b45a:	440a      	add	r2, r1
 800b45c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b460:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b464:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b468:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	4413      	add	r3, r2
 800b472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	0151      	lsls	r1, r2, #5
 800b47c:	697a      	ldr	r2, [r7, #20]
 800b47e:	440a      	add	r2, r1
 800b480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b488:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	015a      	lsls	r2, r3, #5
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	4413      	add	r3, r2
 800b492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	693a      	ldr	r2, [r7, #16]
 800b49a:	0151      	lsls	r1, r2, #5
 800b49c:	697a      	ldr	r2, [r7, #20]
 800b49e:	440a      	add	r2, r1
 800b4a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4a4:	0cdb      	lsrs	r3, r3, #19
 800b4a6:	04db      	lsls	r3, r3, #19
 800b4a8:	6113      	str	r3, [r2, #16]
 800b4aa:	e04e      	b.n	800b54a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	015a      	lsls	r2, r3, #5
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	693a      	ldr	r2, [r7, #16]
 800b4bc:	0151      	lsls	r1, r2, #5
 800b4be:	697a      	ldr	r2, [r7, #20]
 800b4c0:	440a      	add	r2, r1
 800b4c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4c6:	0cdb      	lsrs	r3, r3, #19
 800b4c8:	04db      	lsls	r3, r3, #19
 800b4ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	015a      	lsls	r2, r3, #5
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	693a      	ldr	r2, [r7, #16]
 800b4dc:	0151      	lsls	r1, r2, #5
 800b4de:	697a      	ldr	r2, [r7, #20]
 800b4e0:	440a      	add	r2, r1
 800b4e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b4ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b4ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	699a      	ldr	r2, [r3, #24]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d903      	bls.n	800b504 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	68da      	ldr	r2, [r3, #12]
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	015a      	lsls	r2, r3, #5
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	4413      	add	r3, r2
 800b50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	693a      	ldr	r2, [r7, #16]
 800b514:	0151      	lsls	r1, r2, #5
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	440a      	add	r2, r1
 800b51a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b51e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	015a      	lsls	r2, r3, #5
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	4413      	add	r3, r2
 800b52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b530:	691a      	ldr	r2, [r3, #16]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b53a:	6939      	ldr	r1, [r7, #16]
 800b53c:	0148      	lsls	r0, r1, #5
 800b53e:	6979      	ldr	r1, [r7, #20]
 800b540:	4401      	add	r1, r0
 800b542:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b546:	4313      	orrs	r3, r2
 800b548:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b54a:	79fb      	ldrb	r3, [r7, #7]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d11e      	bne.n	800b58e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	695b      	ldr	r3, [r3, #20]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d009      	beq.n	800b56c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	015a      	lsls	r2, r3, #5
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	4413      	add	r3, r2
 800b560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b564:	461a      	mov	r2, r3
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	695b      	ldr	r3, [r3, #20]
 800b56a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	015a      	lsls	r2, r3, #5
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	4413      	add	r3, r2
 800b574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	693a      	ldr	r2, [r7, #16]
 800b57c:	0151      	lsls	r1, r2, #5
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	440a      	add	r2, r1
 800b582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b586:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b58a:	6013      	str	r3, [r2, #0]
 800b58c:	e097      	b.n	800b6be <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	015a      	lsls	r2, r3, #5
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	4413      	add	r3, r2
 800b596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	0151      	lsls	r1, r2, #5
 800b5a0:	697a      	ldr	r2, [r7, #20]
 800b5a2:	440a      	add	r2, r1
 800b5a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	699b      	ldr	r3, [r3, #24]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f000 8083 	beq.w	800b6be <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	f003 030f 	and.w	r3, r3, #15
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ce:	6979      	ldr	r1, [r7, #20]
 800b5d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	634b      	str	r3, [r1, #52]	; 0x34
 800b5d8:	e071      	b.n	800b6be <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	015a      	lsls	r2, r3, #5
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	0151      	lsls	r1, r2, #5
 800b5ec:	697a      	ldr	r2, [r7, #20]
 800b5ee:	440a      	add	r2, r1
 800b5f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5f4:	0cdb      	lsrs	r3, r3, #19
 800b5f6:	04db      	lsls	r3, r3, #19
 800b5f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	015a      	lsls	r2, r3, #5
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	4413      	add	r3, r2
 800b602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	0151      	lsls	r1, r2, #5
 800b60c:	697a      	ldr	r2, [r7, #20]
 800b60e:	440a      	add	r2, r1
 800b610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b614:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b618:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b61c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	699b      	ldr	r3, [r3, #24]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d003      	beq.n	800b62e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	68da      	ldr	r2, [r3, #12]
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	68da      	ldr	r2, [r3, #12]
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	015a      	lsls	r2, r3, #5
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	4413      	add	r3, r2
 800b63e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	0151      	lsls	r1, r2, #5
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	440a      	add	r2, r1
 800b64c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b654:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	015a      	lsls	r2, r3, #5
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	4413      	add	r3, r2
 800b65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b662:	691a      	ldr	r2, [r3, #16]
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	69db      	ldr	r3, [r3, #28]
 800b668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b66c:	6939      	ldr	r1, [r7, #16]
 800b66e:	0148      	lsls	r0, r1, #5
 800b670:	6979      	ldr	r1, [r7, #20]
 800b672:	4401      	add	r1, r0
 800b674:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b678:	4313      	orrs	r3, r2
 800b67a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b67c:	79fb      	ldrb	r3, [r7, #7]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d10d      	bne.n	800b69e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d009      	beq.n	800b69e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	6919      	ldr	r1, [r3, #16]
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	015a      	lsls	r2, r3, #5
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	4413      	add	r3, r2
 800b696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b69a:	460a      	mov	r2, r1
 800b69c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	015a      	lsls	r2, r3, #5
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	693a      	ldr	r2, [r7, #16]
 800b6ae:	0151      	lsls	r1, r2, #5
 800b6b0:	697a      	ldr	r2, [r7, #20]
 800b6b2:	440a      	add	r2, r1
 800b6b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b6bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	371c      	adds	r7, #28
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	785b      	ldrb	r3, [r3, #1]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d14a      	bne.n	800b780 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	015a      	lsls	r2, r3, #5
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b702:	f040 8086 	bne.w	800b812 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	015a      	lsls	r2, r3, #5
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	4413      	add	r3, r2
 800b710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	7812      	ldrb	r2, [r2, #0]
 800b71a:	0151      	lsls	r1, r2, #5
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	440a      	add	r2, r1
 800b720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b724:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b728:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	015a      	lsls	r2, r3, #5
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	4413      	add	r3, r2
 800b734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	7812      	ldrb	r2, [r2, #0]
 800b73e:	0151      	lsls	r1, r2, #5
 800b740:	693a      	ldr	r2, [r7, #16]
 800b742:	440a      	add	r2, r1
 800b744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b74c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	3301      	adds	r3, #1
 800b752:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f242 7210 	movw	r2, #10000	; 0x2710
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d902      	bls.n	800b764 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b75e:	2301      	movs	r3, #1
 800b760:	75fb      	strb	r3, [r7, #23]
          break;
 800b762:	e056      	b.n	800b812 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	015a      	lsls	r2, r3, #5
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	4413      	add	r3, r2
 800b76e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b77c:	d0e7      	beq.n	800b74e <USB_EPStopXfer+0x82>
 800b77e:	e048      	b.n	800b812 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	015a      	lsls	r2, r3, #5
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	4413      	add	r3, r2
 800b78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b798:	d13b      	bne.n	800b812 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	015a      	lsls	r2, r3, #5
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	7812      	ldrb	r2, [r2, #0]
 800b7ae:	0151      	lsls	r1, r2, #5
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	440a      	add	r2, r1
 800b7b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b7bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	015a      	lsls	r2, r3, #5
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	7812      	ldrb	r2, [r2, #0]
 800b7d2:	0151      	lsls	r1, r2, #5
 800b7d4:	693a      	ldr	r2, [r7, #16]
 800b7d6:	440a      	add	r2, r1
 800b7d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f242 7210 	movw	r2, #10000	; 0x2710
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d902      	bls.n	800b7f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	75fb      	strb	r3, [r7, #23]
          break;
 800b7f6:	e00c      	b.n	800b812 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	015a      	lsls	r2, r3, #5
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	4413      	add	r3, r2
 800b802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b80c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b810:	d0e7      	beq.n	800b7e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b812:	7dfb      	ldrb	r3, [r7, #23]
}
 800b814:	4618      	mov	r0, r3
 800b816:	371c      	adds	r7, #28
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b820:	b480      	push	{r7}
 800b822:	b089      	sub	sp, #36	; 0x24
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	4611      	mov	r1, r2
 800b82c:	461a      	mov	r2, r3
 800b82e:	460b      	mov	r3, r1
 800b830:	71fb      	strb	r3, [r7, #7]
 800b832:	4613      	mov	r3, r2
 800b834:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b83e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b842:	2b00      	cmp	r3, #0
 800b844:	d123      	bne.n	800b88e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b846:	88bb      	ldrh	r3, [r7, #4]
 800b848:	3303      	adds	r3, #3
 800b84a:	089b      	lsrs	r3, r3, #2
 800b84c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b84e:	2300      	movs	r3, #0
 800b850:	61bb      	str	r3, [r7, #24]
 800b852:	e018      	b.n	800b886 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b854:	79fb      	ldrb	r3, [r7, #7]
 800b856:	031a      	lsls	r2, r3, #12
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	4413      	add	r3, r2
 800b85c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b860:	461a      	mov	r2, r3
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	3301      	adds	r3, #1
 800b86c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	3301      	adds	r3, #1
 800b872:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	3301      	adds	r3, #1
 800b878:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	3301      	adds	r3, #1
 800b87e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	3301      	adds	r3, #1
 800b884:	61bb      	str	r3, [r7, #24]
 800b886:	69ba      	ldr	r2, [r7, #24]
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d3e2      	bcc.n	800b854 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3724      	adds	r7, #36	; 0x24
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b08b      	sub	sp, #44	; 0x2c
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b8b2:	88fb      	ldrh	r3, [r7, #6]
 800b8b4:	089b      	lsrs	r3, r3, #2
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b8ba:	88fb      	ldrh	r3, [r7, #6]
 800b8bc:	f003 0303 	and.w	r3, r3, #3
 800b8c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	623b      	str	r3, [r7, #32]
 800b8c6:	e014      	b.n	800b8f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8dc:	3301      	adds	r3, #1
 800b8de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b8ec:	6a3b      	ldr	r3, [r7, #32]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	623b      	str	r3, [r7, #32]
 800b8f2:	6a3a      	ldr	r2, [r7, #32]
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d3e6      	bcc.n	800b8c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b8fa:	8bfb      	ldrh	r3, [r7, #30]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d01e      	beq.n	800b93e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b900:	2300      	movs	r3, #0
 800b902:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b90a:	461a      	mov	r2, r3
 800b90c:	f107 0310 	add.w	r3, r7, #16
 800b910:	6812      	ldr	r2, [r2, #0]
 800b912:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b914:	693a      	ldr	r2, [r7, #16]
 800b916:	6a3b      	ldr	r3, [r7, #32]
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	00db      	lsls	r3, r3, #3
 800b91c:	fa22 f303 	lsr.w	r3, r2, r3
 800b920:	b2da      	uxtb	r2, r3
 800b922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b924:	701a      	strb	r2, [r3, #0]
      i++;
 800b926:	6a3b      	ldr	r3, [r7, #32]
 800b928:	3301      	adds	r3, #1
 800b92a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92e:	3301      	adds	r3, #1
 800b930:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b932:	8bfb      	ldrh	r3, [r7, #30]
 800b934:	3b01      	subs	r3, #1
 800b936:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b938:	8bfb      	ldrh	r3, [r7, #30]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1ea      	bne.n	800b914 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b940:	4618      	mov	r0, r3
 800b942:	372c      	adds	r7, #44	; 0x2c
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	785b      	ldrb	r3, [r3, #1]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d12c      	bne.n	800b9c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	015a      	lsls	r2, r3, #5
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	4413      	add	r3, r2
 800b970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	db12      	blt.n	800b9a0 <USB_EPSetStall+0x54>
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00f      	beq.n	800b9a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	015a      	lsls	r2, r3, #5
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	4413      	add	r3, r2
 800b988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	0151      	lsls	r1, r2, #5
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	440a      	add	r2, r1
 800b996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b99a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b99e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	015a      	lsls	r2, r3, #5
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	68ba      	ldr	r2, [r7, #8]
 800b9b0:	0151      	lsls	r1, r2, #5
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	440a      	add	r2, r1
 800b9b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b9be:	6013      	str	r3, [r2, #0]
 800b9c0:	e02b      	b.n	800ba1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	015a      	lsls	r2, r3, #5
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	db12      	blt.n	800b9fa <USB_EPSetStall+0xae>
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00f      	beq.n	800b9fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	015a      	lsls	r2, r3, #5
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68ba      	ldr	r2, [r7, #8]
 800b9ea:	0151      	lsls	r1, r2, #5
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	440a      	add	r2, r1
 800b9f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b9f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	015a      	lsls	r2, r3, #5
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	4413      	add	r3, r2
 800ba02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	0151      	lsls	r1, r2, #5
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	440a      	add	r2, r1
 800ba10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3714      	adds	r7, #20
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	785b      	ldrb	r3, [r3, #1]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d128      	bne.n	800ba96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	015a      	lsls	r2, r3, #5
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68ba      	ldr	r2, [r7, #8]
 800ba54:	0151      	lsls	r1, r2, #5
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	440a      	add	r2, r1
 800ba5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	791b      	ldrb	r3, [r3, #4]
 800ba68:	2b03      	cmp	r3, #3
 800ba6a:	d003      	beq.n	800ba74 <USB_EPClearStall+0x4c>
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	791b      	ldrb	r3, [r3, #4]
 800ba70:	2b02      	cmp	r3, #2
 800ba72:	d138      	bne.n	800bae6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	015a      	lsls	r2, r3, #5
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	0151      	lsls	r1, r2, #5
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	440a      	add	r2, r1
 800ba8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba92:	6013      	str	r3, [r2, #0]
 800ba94:	e027      	b.n	800bae6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	015a      	lsls	r2, r3, #5
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68ba      	ldr	r2, [r7, #8]
 800baa6:	0151      	lsls	r1, r2, #5
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	440a      	add	r2, r1
 800baac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bab0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bab4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	791b      	ldrb	r3, [r3, #4]
 800baba:	2b03      	cmp	r3, #3
 800babc:	d003      	beq.n	800bac6 <USB_EPClearStall+0x9e>
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	791b      	ldrb	r3, [r3, #4]
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	d10f      	bne.n	800bae6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	015a      	lsls	r2, r3, #5
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	4413      	add	r3, r2
 800bace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68ba      	ldr	r2, [r7, #8]
 800bad6:	0151      	lsls	r1, r2, #5
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	440a      	add	r2, r1
 800badc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bae4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	460b      	mov	r3, r1
 800bafe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bb16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	78fb      	ldrb	r3, [r7, #3]
 800bb22:	011b      	lsls	r3, r3, #4
 800bb24:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bb28:	68f9      	ldr	r1, [r7, #12]
 800bb2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb5a:	f023 0303 	bic.w	r3, r3, #3
 800bb5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb6e:	f023 0302 	bic.w	r3, r3, #2
 800bb72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3714      	adds	r7, #20
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr

0800bb82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bb82:	b480      	push	{r7}
 800bb84:	b085      	sub	sp, #20
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bb9c:	f023 0303 	bic.w	r3, r3, #3
 800bba0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbb0:	f043 0302 	orr.w	r3, r3, #2
 800bbb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bbb6:	2300      	movs	r3, #0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3714      	adds	r7, #20
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b085      	sub	sp, #20
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	695b      	ldr	r3, [r3, #20]
 800bbd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	4013      	ands	r3, r2
 800bbda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3714      	adds	r7, #20
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr

0800bbea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bbea:	b480      	push	{r7}
 800bbec:	b085      	sub	sp, #20
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbfc:	699b      	ldr	r3, [r3, #24]
 800bbfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc06:	69db      	ldr	r3, [r3, #28]
 800bc08:	68ba      	ldr	r2, [r7, #8]
 800bc0a:	4013      	ands	r3, r2
 800bc0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	0c1b      	lsrs	r3, r3, #16
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3714      	adds	r7, #20
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr

0800bc1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc1e:	b480      	push	{r7}
 800bc20:	b085      	sub	sp, #20
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc30:	699b      	ldr	r3, [r3, #24]
 800bc32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc3a:	69db      	ldr	r3, [r3, #28]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	4013      	ands	r3, r2
 800bc40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	b29b      	uxth	r3, r3
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc52:	b480      	push	{r7}
 800bc54:	b085      	sub	sp, #20
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bc62:	78fb      	ldrb	r3, [r7, #3]
 800bc64:	015a      	lsls	r2, r3, #5
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	4413      	add	r3, r2
 800bc6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc78:	695b      	ldr	r3, [r3, #20]
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	4013      	ands	r3, r2
 800bc7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc80:	68bb      	ldr	r3, [r7, #8]
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b087      	sub	sp, #28
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
 800bc96:	460b      	mov	r3, r1
 800bc98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bcb2:	78fb      	ldrb	r3, [r7, #3]
 800bcb4:	f003 030f 	and.w	r3, r3, #15
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	fa22 f303 	lsr.w	r3, r2, r3
 800bcbe:	01db      	lsls	r3, r3, #7
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	693a      	ldr	r2, [r7, #16]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bcc8:	78fb      	ldrb	r3, [r7, #3]
 800bcca:	015a      	lsls	r2, r3, #5
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	4413      	add	r3, r2
 800bcd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	693a      	ldr	r2, [r7, #16]
 800bcd8:	4013      	ands	r3, r2
 800bcda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bcdc:	68bb      	ldr	r3, [r7, #8]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	371c      	adds	r7, #28
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr

0800bcea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bcea:	b480      	push	{r7}
 800bcec:	b083      	sub	sp, #12
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	695b      	ldr	r3, [r3, #20]
 800bcf6:	f003 0301 	and.w	r3, r3, #1
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b085      	sub	sp, #20
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bd24:	f023 0307 	bic.w	r3, r3, #7
 800bd28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3714      	adds	r7, #20
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	460b      	mov	r3, r1
 800bd56:	607a      	str	r2, [r7, #4]
 800bd58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	333c      	adds	r3, #60	; 0x3c
 800bd62:	3304      	adds	r3, #4
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	4a26      	ldr	r2, [pc, #152]	; (800be04 <USB_EP0_OutStart+0xb8>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d90a      	bls.n	800bd86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd80:	d101      	bne.n	800bd86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	e037      	b.n	800bdf6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	2300      	movs	r3, #0
 800bd90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	697a      	ldr	r2, [r7, #20]
 800bd9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bda0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bda4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdac:	691b      	ldr	r3, [r3, #16]
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdb4:	f043 0318 	orr.w	r3, r3, #24
 800bdb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bdcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bdce:	7afb      	ldrb	r3, [r7, #11]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d10f      	bne.n	800bdf4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdda:	461a      	mov	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bdf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	371c      	adds	r7, #28
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	4f54300a 	.word	0x4f54300a

0800be08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be08:	b480      	push	{r7}
 800be0a:	b085      	sub	sp, #20
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be10:	2300      	movs	r3, #0
 800be12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	3301      	adds	r3, #1
 800be18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	4a13      	ldr	r2, [pc, #76]	; (800be6c <USB_CoreReset+0x64>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d901      	bls.n	800be26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be22:	2303      	movs	r3, #3
 800be24:	e01b      	b.n	800be5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	daf2      	bge.n	800be14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be2e:	2300      	movs	r3, #0
 800be30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	f043 0201 	orr.w	r2, r3, #1
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	3301      	adds	r3, #1
 800be42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	4a09      	ldr	r2, [pc, #36]	; (800be6c <USB_CoreReset+0x64>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d901      	bls.n	800be50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800be4c:	2303      	movs	r3, #3
 800be4e:	e006      	b.n	800be5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	691b      	ldr	r3, [r3, #16]
 800be54:	f003 0301 	and.w	r3, r3, #1
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d0f0      	beq.n	800be3e <USB_CoreReset+0x36>

  return HAL_OK;
 800be5c:	2300      	movs	r3, #0
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3714      	adds	r7, #20
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	00030d40 	.word	0x00030d40

0800be70 <USBD_CDC_Init>:
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
 800be7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800be80:	f002 fca0 	bl	800e7c4 <USBD_static_malloc>
 800be84:	60f8      	str	r0, [r7, #12]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d109      	bne.n	800bea0 <USBD_CDC_Init+0x30>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	32b0      	adds	r2, #176	; 0xb0
 800be96:	2100      	movs	r1, #0
 800be98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800be9c:	2302      	movs	r3, #2
 800be9e:	e0d4      	b.n	800c04a <USBD_CDC_Init+0x1da>
 800bea0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bea4:	2100      	movs	r1, #0
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	f002 fd22 	bl	800e8f0 <memset>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	32b0      	adds	r2, #176	; 0xb0
 800beb6:	68f9      	ldr	r1, [r7, #12]
 800beb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	32b0      	adds	r2, #176	; 0xb0
 800bec6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	7c1b      	ldrb	r3, [r3, #16]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d138      	bne.n	800bf4a <USBD_CDC_Init+0xda>
 800bed8:	4b5e      	ldr	r3, [pc, #376]	; (800c054 <USBD_CDC_Init+0x1e4>)
 800beda:	7819      	ldrb	r1, [r3, #0]
 800bedc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bee0:	2202      	movs	r2, #2
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f002 fb4b 	bl	800e57e <USBD_LL_OpenEP>
 800bee8:	4b5a      	ldr	r3, [pc, #360]	; (800c054 <USBD_CDC_Init+0x1e4>)
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	f003 020f 	and.w	r2, r3, #15
 800bef0:	6879      	ldr	r1, [r7, #4]
 800bef2:	4613      	mov	r3, r2
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	4413      	add	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	440b      	add	r3, r1
 800befc:	3324      	adds	r3, #36	; 0x24
 800befe:	2201      	movs	r2, #1
 800bf00:	801a      	strh	r2, [r3, #0]
 800bf02:	4b55      	ldr	r3, [pc, #340]	; (800c058 <USBD_CDC_Init+0x1e8>)
 800bf04:	7819      	ldrb	r1, [r3, #0]
 800bf06:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf0a:	2202      	movs	r2, #2
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f002 fb36 	bl	800e57e <USBD_LL_OpenEP>
 800bf12:	4b51      	ldr	r3, [pc, #324]	; (800c058 <USBD_CDC_Init+0x1e8>)
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	f003 020f 	and.w	r2, r3, #15
 800bf1a:	6879      	ldr	r1, [r7, #4]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	4413      	add	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	440b      	add	r3, r1
 800bf26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	801a      	strh	r2, [r3, #0]
 800bf2e:	4b4b      	ldr	r3, [pc, #300]	; (800c05c <USBD_CDC_Init+0x1ec>)
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	f003 020f 	and.w	r2, r3, #15
 800bf36:	6879      	ldr	r1, [r7, #4]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	440b      	add	r3, r1
 800bf42:	3326      	adds	r3, #38	; 0x26
 800bf44:	2210      	movs	r2, #16
 800bf46:	801a      	strh	r2, [r3, #0]
 800bf48:	e035      	b.n	800bfb6 <USBD_CDC_Init+0x146>
 800bf4a:	4b42      	ldr	r3, [pc, #264]	; (800c054 <USBD_CDC_Init+0x1e4>)
 800bf4c:	7819      	ldrb	r1, [r3, #0]
 800bf4e:	2340      	movs	r3, #64	; 0x40
 800bf50:	2202      	movs	r2, #2
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f002 fb13 	bl	800e57e <USBD_LL_OpenEP>
 800bf58:	4b3e      	ldr	r3, [pc, #248]	; (800c054 <USBD_CDC_Init+0x1e4>)
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	f003 020f 	and.w	r2, r3, #15
 800bf60:	6879      	ldr	r1, [r7, #4]
 800bf62:	4613      	mov	r3, r2
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	4413      	add	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	440b      	add	r3, r1
 800bf6c:	3324      	adds	r3, #36	; 0x24
 800bf6e:	2201      	movs	r2, #1
 800bf70:	801a      	strh	r2, [r3, #0]
 800bf72:	4b39      	ldr	r3, [pc, #228]	; (800c058 <USBD_CDC_Init+0x1e8>)
 800bf74:	7819      	ldrb	r1, [r3, #0]
 800bf76:	2340      	movs	r3, #64	; 0x40
 800bf78:	2202      	movs	r2, #2
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f002 faff 	bl	800e57e <USBD_LL_OpenEP>
 800bf80:	4b35      	ldr	r3, [pc, #212]	; (800c058 <USBD_CDC_Init+0x1e8>)
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	f003 020f 	and.w	r2, r3, #15
 800bf88:	6879      	ldr	r1, [r7, #4]
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	4413      	add	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	440b      	add	r3, r1
 800bf94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf98:	2201      	movs	r2, #1
 800bf9a:	801a      	strh	r2, [r3, #0]
 800bf9c:	4b2f      	ldr	r3, [pc, #188]	; (800c05c <USBD_CDC_Init+0x1ec>)
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	f003 020f 	and.w	r2, r3, #15
 800bfa4:	6879      	ldr	r1, [r7, #4]
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	4413      	add	r3, r2
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	440b      	add	r3, r1
 800bfb0:	3326      	adds	r3, #38	; 0x26
 800bfb2:	2210      	movs	r2, #16
 800bfb4:	801a      	strh	r2, [r3, #0]
 800bfb6:	4b29      	ldr	r3, [pc, #164]	; (800c05c <USBD_CDC_Init+0x1ec>)
 800bfb8:	7819      	ldrb	r1, [r3, #0]
 800bfba:	2308      	movs	r3, #8
 800bfbc:	2203      	movs	r2, #3
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f002 fadd 	bl	800e57e <USBD_LL_OpenEP>
 800bfc4:	4b25      	ldr	r3, [pc, #148]	; (800c05c <USBD_CDC_Init+0x1ec>)
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	f003 020f 	and.w	r2, r3, #15
 800bfcc:	6879      	ldr	r1, [r7, #4]
 800bfce:	4613      	mov	r3, r2
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	4413      	add	r3, r2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	440b      	add	r3, r1
 800bfd8:	3324      	adds	r3, #36	; 0x24
 800bfda:	2201      	movs	r2, #1
 800bfdc:	801a      	strh	r2, [r3, #0]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	33b0      	adds	r3, #176	; 0xb0
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4413      	add	r3, r2
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4798      	blx	r3
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2200      	movs	r2, #0
 800c006:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c010:	2b00      	cmp	r3, #0
 800c012:	d101      	bne.n	800c018 <USBD_CDC_Init+0x1a8>
 800c014:	2302      	movs	r3, #2
 800c016:	e018      	b.n	800c04a <USBD_CDC_Init+0x1da>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	7c1b      	ldrb	r3, [r3, #16]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10a      	bne.n	800c036 <USBD_CDC_Init+0x1c6>
 800c020:	4b0d      	ldr	r3, [pc, #52]	; (800c058 <USBD_CDC_Init+0x1e8>)
 800c022:	7819      	ldrb	r1, [r3, #0]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c02a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f002 fb94 	bl	800e75c <USBD_LL_PrepareReceive>
 800c034:	e008      	b.n	800c048 <USBD_CDC_Init+0x1d8>
 800c036:	4b08      	ldr	r3, [pc, #32]	; (800c058 <USBD_CDC_Init+0x1e8>)
 800c038:	7819      	ldrb	r1, [r3, #0]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c040:	2340      	movs	r3, #64	; 0x40
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f002 fb8a 	bl	800e75c <USBD_LL_PrepareReceive>
 800c048:	2300      	movs	r3, #0
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	200000a7 	.word	0x200000a7
 800c058:	200000a8 	.word	0x200000a8
 800c05c:	200000a9 	.word	0x200000a9

0800c060 <USBD_CDC_DeInit>:
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	460b      	mov	r3, r1
 800c06a:	70fb      	strb	r3, [r7, #3]
 800c06c:	4b3a      	ldr	r3, [pc, #232]	; (800c158 <USBD_CDC_DeInit+0xf8>)
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	4619      	mov	r1, r3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f002 faa9 	bl	800e5ca <USBD_LL_CloseEP>
 800c078:	4b37      	ldr	r3, [pc, #220]	; (800c158 <USBD_CDC_DeInit+0xf8>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	f003 020f 	and.w	r2, r3, #15
 800c080:	6879      	ldr	r1, [r7, #4]
 800c082:	4613      	mov	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	440b      	add	r3, r1
 800c08c:	3324      	adds	r3, #36	; 0x24
 800c08e:	2200      	movs	r2, #0
 800c090:	801a      	strh	r2, [r3, #0]
 800c092:	4b32      	ldr	r3, [pc, #200]	; (800c15c <USBD_CDC_DeInit+0xfc>)
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f002 fa96 	bl	800e5ca <USBD_LL_CloseEP>
 800c09e:	4b2f      	ldr	r3, [pc, #188]	; (800c15c <USBD_CDC_DeInit+0xfc>)
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	f003 020f 	and.w	r2, r3, #15
 800c0a6:	6879      	ldr	r1, [r7, #4]
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4413      	add	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	440b      	add	r3, r1
 800c0b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	801a      	strh	r2, [r3, #0]
 800c0ba:	4b29      	ldr	r3, [pc, #164]	; (800c160 <USBD_CDC_DeInit+0x100>)
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	4619      	mov	r1, r3
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f002 fa82 	bl	800e5ca <USBD_LL_CloseEP>
 800c0c6:	4b26      	ldr	r3, [pc, #152]	; (800c160 <USBD_CDC_DeInit+0x100>)
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	f003 020f 	and.w	r2, r3, #15
 800c0ce:	6879      	ldr	r1, [r7, #4]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	440b      	add	r3, r1
 800c0da:	3324      	adds	r3, #36	; 0x24
 800c0dc:	2200      	movs	r2, #0
 800c0de:	801a      	strh	r2, [r3, #0]
 800c0e0:	4b1f      	ldr	r3, [pc, #124]	; (800c160 <USBD_CDC_DeInit+0x100>)
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	f003 020f 	and.w	r2, r3, #15
 800c0e8:	6879      	ldr	r1, [r7, #4]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	4413      	add	r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	440b      	add	r3, r1
 800c0f4:	3326      	adds	r3, #38	; 0x26
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	801a      	strh	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	32b0      	adds	r2, #176	; 0xb0
 800c104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d01f      	beq.n	800c14c <USBD_CDC_DeInit+0xec>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	33b0      	adds	r3, #176	; 0xb0
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4413      	add	r3, r2
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	4798      	blx	r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	32b0      	adds	r2, #176	; 0xb0
 800c12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c12e:	4618      	mov	r0, r3
 800c130:	f002 fb56 	bl	800e7e0 <USBD_static_free>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	32b0      	adds	r2, #176	; 0xb0
 800c13e:	2100      	movs	r1, #0
 800c140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 800c14c:	2300      	movs	r3, #0
 800c14e:	4618      	mov	r0, r3
 800c150:	3708      	adds	r7, #8
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	200000a7 	.word	0x200000a7
 800c15c:	200000a8 	.word	0x200000a8
 800c160:	200000a9 	.word	0x200000a9

0800c164 <USBD_CDC_Setup>:
 800c164:	b580      	push	{r7, lr}
 800c166:	b086      	sub	sp, #24
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	32b0      	adds	r2, #176	; 0xb0
 800c178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c17c:	613b      	str	r3, [r7, #16]
 800c17e:	2300      	movs	r3, #0
 800c180:	737b      	strb	r3, [r7, #13]
 800c182:	2300      	movs	r3, #0
 800c184:	817b      	strh	r3, [r7, #10]
 800c186:	2300      	movs	r3, #0
 800c188:	75fb      	strb	r3, [r7, #23]
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d101      	bne.n	800c194 <USBD_CDC_Setup+0x30>
 800c190:	2303      	movs	r3, #3
 800c192:	e0bf      	b.n	800c314 <USBD_CDC_Setup+0x1b0>
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d050      	beq.n	800c242 <USBD_CDC_Setup+0xde>
 800c1a0:	2b20      	cmp	r3, #32
 800c1a2:	f040 80af 	bne.w	800c304 <USBD_CDC_Setup+0x1a0>
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	88db      	ldrh	r3, [r3, #6]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d03a      	beq.n	800c224 <USBD_CDC_Setup+0xc0>
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	b25b      	sxtb	r3, r3
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	da1b      	bge.n	800c1f0 <USBD_CDC_Setup+0x8c>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	33b0      	adds	r3, #176	; 0xb0
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	689b      	ldr	r3, [r3, #8]
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	7850      	ldrb	r0, [r2, #1]
 800c1ce:	6939      	ldr	r1, [r7, #16]
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	88d2      	ldrh	r2, [r2, #6]
 800c1d4:	4798      	blx	r3
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	88db      	ldrh	r3, [r3, #6]
 800c1da:	2b07      	cmp	r3, #7
 800c1dc:	bf28      	it	cs
 800c1de:	2307      	movcs	r3, #7
 800c1e0:	81fb      	strh	r3, [r7, #14]
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	89fa      	ldrh	r2, [r7, #14]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f001 fd89 	bl	800dd00 <USBD_CtlSendData>
 800c1ee:	e090      	b.n	800c312 <USBD_CDC_Setup+0x1ae>
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	785a      	ldrb	r2, [r3, #1]
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	88db      	ldrh	r3, [r3, #6]
 800c1fe:	2b3f      	cmp	r3, #63	; 0x3f
 800c200:	d803      	bhi.n	800c20a <USBD_CDC_Setup+0xa6>
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	88db      	ldrh	r3, [r3, #6]
 800c206:	b2da      	uxtb	r2, r3
 800c208:	e000      	b.n	800c20c <USBD_CDC_Setup+0xa8>
 800c20a:	2240      	movs	r2, #64	; 0x40
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 800c212:	6939      	ldr	r1, [r7, #16]
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c21a:	461a      	mov	r2, r3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f001 fd9b 	bl	800dd58 <USBD_CtlPrepareRx>
 800c222:	e076      	b.n	800c312 <USBD_CDC_Setup+0x1ae>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	33b0      	adds	r3, #176	; 0xb0
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4413      	add	r3, r2
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	7850      	ldrb	r0, [r2, #1]
 800c23a:	2200      	movs	r2, #0
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	4798      	blx	r3
 800c240:	e067      	b.n	800c312 <USBD_CDC_Setup+0x1ae>
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	785b      	ldrb	r3, [r3, #1]
 800c246:	2b0b      	cmp	r3, #11
 800c248:	d851      	bhi.n	800c2ee <USBD_CDC_Setup+0x18a>
 800c24a:	a201      	add	r2, pc, #4	; (adr r2, 800c250 <USBD_CDC_Setup+0xec>)
 800c24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c250:	0800c281 	.word	0x0800c281
 800c254:	0800c2fd 	.word	0x0800c2fd
 800c258:	0800c2ef 	.word	0x0800c2ef
 800c25c:	0800c2ef 	.word	0x0800c2ef
 800c260:	0800c2ef 	.word	0x0800c2ef
 800c264:	0800c2ef 	.word	0x0800c2ef
 800c268:	0800c2ef 	.word	0x0800c2ef
 800c26c:	0800c2ef 	.word	0x0800c2ef
 800c270:	0800c2ef 	.word	0x0800c2ef
 800c274:	0800c2ef 	.word	0x0800c2ef
 800c278:	0800c2ab 	.word	0x0800c2ab
 800c27c:	0800c2d5 	.word	0x0800c2d5
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c286:	b2db      	uxtb	r3, r3
 800c288:	2b03      	cmp	r3, #3
 800c28a:	d107      	bne.n	800c29c <USBD_CDC_Setup+0x138>
 800c28c:	f107 030a 	add.w	r3, r7, #10
 800c290:	2202      	movs	r2, #2
 800c292:	4619      	mov	r1, r3
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f001 fd33 	bl	800dd00 <USBD_CtlSendData>
 800c29a:	e032      	b.n	800c302 <USBD_CDC_Setup+0x19e>
 800c29c:	6839      	ldr	r1, [r7, #0]
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f001 fcbd 	bl	800dc1e <USBD_CtlError>
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	75fb      	strb	r3, [r7, #23]
 800c2a8:	e02b      	b.n	800c302 <USBD_CDC_Setup+0x19e>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	2b03      	cmp	r3, #3
 800c2b4:	d107      	bne.n	800c2c6 <USBD_CDC_Setup+0x162>
 800c2b6:	f107 030d 	add.w	r3, r7, #13
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	4619      	mov	r1, r3
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f001 fd1e 	bl	800dd00 <USBD_CtlSendData>
 800c2c4:	e01d      	b.n	800c302 <USBD_CDC_Setup+0x19e>
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f001 fca8 	bl	800dc1e <USBD_CtlError>
 800c2ce:	2303      	movs	r3, #3
 800c2d0:	75fb      	strb	r3, [r7, #23]
 800c2d2:	e016      	b.n	800c302 <USBD_CDC_Setup+0x19e>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	2b03      	cmp	r3, #3
 800c2de:	d00f      	beq.n	800c300 <USBD_CDC_Setup+0x19c>
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f001 fc9b 	bl	800dc1e <USBD_CtlError>
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	75fb      	strb	r3, [r7, #23]
 800c2ec:	e008      	b.n	800c300 <USBD_CDC_Setup+0x19c>
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f001 fc94 	bl	800dc1e <USBD_CtlError>
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	75fb      	strb	r3, [r7, #23]
 800c2fa:	e002      	b.n	800c302 <USBD_CDC_Setup+0x19e>
 800c2fc:	bf00      	nop
 800c2fe:	e008      	b.n	800c312 <USBD_CDC_Setup+0x1ae>
 800c300:	bf00      	nop
 800c302:	e006      	b.n	800c312 <USBD_CDC_Setup+0x1ae>
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f001 fc89 	bl	800dc1e <USBD_CtlError>
 800c30c:	2303      	movs	r3, #3
 800c30e:	75fb      	strb	r3, [r7, #23]
 800c310:	bf00      	nop
 800c312:	7dfb      	ldrb	r3, [r7, #23]
 800c314:	4618      	mov	r0, r3
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <USBD_CDC_DataIn>:
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	460b      	mov	r3, r1
 800c326:	70fb      	strb	r3, [r7, #3]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c32e:	60fb      	str	r3, [r7, #12]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	32b0      	adds	r2, #176	; 0xb0
 800c33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d101      	bne.n	800c346 <USBD_CDC_DataIn+0x2a>
 800c342:	2303      	movs	r3, #3
 800c344:	e065      	b.n	800c412 <USBD_CDC_DataIn+0xf6>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	32b0      	adds	r2, #176	; 0xb0
 800c350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c354:	60bb      	str	r3, [r7, #8]
 800c356:	78fb      	ldrb	r3, [r7, #3]
 800c358:	f003 020f 	and.w	r2, r3, #15
 800c35c:	6879      	ldr	r1, [r7, #4]
 800c35e:	4613      	mov	r3, r2
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	4413      	add	r3, r2
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	440b      	add	r3, r1
 800c368:	3318      	adds	r3, #24
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d02f      	beq.n	800c3d0 <USBD_CDC_DataIn+0xb4>
 800c370:	78fb      	ldrb	r3, [r7, #3]
 800c372:	f003 020f 	and.w	r2, r3, #15
 800c376:	6879      	ldr	r1, [r7, #4]
 800c378:	4613      	mov	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4413      	add	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	440b      	add	r3, r1
 800c382:	3318      	adds	r3, #24
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	78fb      	ldrb	r3, [r7, #3]
 800c388:	f003 010f 	and.w	r1, r3, #15
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	460b      	mov	r3, r1
 800c390:	00db      	lsls	r3, r3, #3
 800c392:	440b      	add	r3, r1
 800c394:	009b      	lsls	r3, r3, #2
 800c396:	4403      	add	r3, r0
 800c398:	3348      	adds	r3, #72	; 0x48
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	fbb2 f1f3 	udiv	r1, r2, r3
 800c3a0:	fb01 f303 	mul.w	r3, r1, r3
 800c3a4:	1ad3      	subs	r3, r2, r3
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d112      	bne.n	800c3d0 <USBD_CDC_DataIn+0xb4>
 800c3aa:	78fb      	ldrb	r3, [r7, #3]
 800c3ac:	f003 020f 	and.w	r2, r3, #15
 800c3b0:	6879      	ldr	r1, [r7, #4]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4413      	add	r3, r2
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	440b      	add	r3, r1
 800c3bc:	3318      	adds	r3, #24
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	78f9      	ldrb	r1, [r7, #3]
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f002 f9a6 	bl	800e71a <USBD_LL_Transmit>
 800c3ce:	e01f      	b.n	800c410 <USBD_CDC_DataIn+0xf4>
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	33b0      	adds	r3, #176	; 0xb0
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4413      	add	r3, r2
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d010      	beq.n	800c410 <USBD_CDC_DataIn+0xf4>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	33b0      	adds	r3, #176	; 0xb0
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	691b      	ldr	r3, [r3, #16]
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c40c:	78fa      	ldrb	r2, [r7, #3]
 800c40e:	4798      	blx	r3
 800c410:	2300      	movs	r3, #0
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBD_CDC_DataOut>:
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	460b      	mov	r3, r1
 800c424:	70fb      	strb	r3, [r7, #3]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	32b0      	adds	r2, #176	; 0xb0
 800c430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c434:	60fb      	str	r3, [r7, #12]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	32b0      	adds	r2, #176	; 0xb0
 800c440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d101      	bne.n	800c44c <USBD_CDC_DataOut+0x32>
 800c448:	2303      	movs	r3, #3
 800c44a:	e01a      	b.n	800c482 <USBD_CDC_DataOut+0x68>
 800c44c:	78fb      	ldrb	r3, [r7, #3]
 800c44e:	4619      	mov	r1, r3
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f002 f9a4 	bl	800e79e <USBD_LL_GetRxDataSize>
 800c456:	4602      	mov	r2, r0
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	33b0      	adds	r3, #176	; 0xb0
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	4413      	add	r3, r2
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c476:	68fa      	ldr	r2, [r7, #12]
 800c478:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c47c:	4611      	mov	r1, r2
 800c47e:	4798      	blx	r3
 800c480:	2300      	movs	r3, #0
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <USBD_CDC_EP0_RxReady>:
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b084      	sub	sp, #16
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	32b0      	adds	r2, #176	; 0xb0
 800c49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4a0:	60fb      	str	r3, [r7, #12]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d101      	bne.n	800c4ac <USBD_CDC_EP0_RxReady+0x22>
 800c4a8:	2303      	movs	r3, #3
 800c4aa:	e025      	b.n	800c4f8 <USBD_CDC_EP0_RxReady+0x6e>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	33b0      	adds	r3, #176	; 0xb0
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d01a      	beq.n	800c4f6 <USBD_CDC_EP0_RxReady+0x6c>
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c4c6:	2bff      	cmp	r3, #255	; 0xff
 800c4c8:	d015      	beq.n	800c4f6 <USBD_CDC_EP0_RxReady+0x6c>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	33b0      	adds	r3, #176	; 0xb0
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	4413      	add	r3, r2
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
 800c4e2:	68f9      	ldr	r1, [r7, #12]
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
 800c4ea:	b292      	uxth	r2, r2
 800c4ec:	4798      	blx	r3
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	22ff      	movs	r2, #255	; 0xff
 800c4f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <USBD_CDC_GetFSCfgDesc>:
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	2182      	movs	r1, #130	; 0x82
 800c50a:	4818      	ldr	r0, [pc, #96]	; (800c56c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c50c:	f000 fd4f 	bl	800cfae <USBD_GetEpDesc>
 800c510:	6178      	str	r0, [r7, #20]
 800c512:	2101      	movs	r1, #1
 800c514:	4815      	ldr	r0, [pc, #84]	; (800c56c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c516:	f000 fd4a 	bl	800cfae <USBD_GetEpDesc>
 800c51a:	6138      	str	r0, [r7, #16]
 800c51c:	2181      	movs	r1, #129	; 0x81
 800c51e:	4813      	ldr	r0, [pc, #76]	; (800c56c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c520:	f000 fd45 	bl	800cfae <USBD_GetEpDesc>
 800c524:	60f8      	str	r0, [r7, #12]
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <USBD_CDC_GetFSCfgDesc+0x32>
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	2210      	movs	r2, #16
 800c530:	719a      	strb	r2, [r3, #6]
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d006      	beq.n	800c546 <USBD_CDC_GetFSCfgDesc+0x46>
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c540:	711a      	strb	r2, [r3, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	715a      	strb	r2, [r3, #5]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d006      	beq.n	800c55a <USBD_CDC_GetFSCfgDesc+0x5a>
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2200      	movs	r2, #0
 800c550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c554:	711a      	strb	r2, [r3, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	715a      	strb	r2, [r3, #5]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2243      	movs	r2, #67	; 0x43
 800c55e:	801a      	strh	r2, [r3, #0]
 800c560:	4b02      	ldr	r3, [pc, #8]	; (800c56c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c562:	4618      	mov	r0, r3
 800c564:	3718      	adds	r7, #24
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	20000064 	.word	0x20000064

0800c570 <USBD_CDC_GetHSCfgDesc>:
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	2182      	movs	r1, #130	; 0x82
 800c57a:	4818      	ldr	r0, [pc, #96]	; (800c5dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c57c:	f000 fd17 	bl	800cfae <USBD_GetEpDesc>
 800c580:	6178      	str	r0, [r7, #20]
 800c582:	2101      	movs	r1, #1
 800c584:	4815      	ldr	r0, [pc, #84]	; (800c5dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c586:	f000 fd12 	bl	800cfae <USBD_GetEpDesc>
 800c58a:	6138      	str	r0, [r7, #16]
 800c58c:	2181      	movs	r1, #129	; 0x81
 800c58e:	4813      	ldr	r0, [pc, #76]	; (800c5dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c590:	f000 fd0d 	bl	800cfae <USBD_GetEpDesc>
 800c594:	60f8      	str	r0, [r7, #12]
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <USBD_CDC_GetHSCfgDesc+0x32>
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	2210      	movs	r2, #16
 800c5a0:	719a      	strb	r2, [r3, #6]
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d006      	beq.n	800c5b6 <USBD_CDC_GetHSCfgDesc+0x46>
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	711a      	strb	r2, [r3, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f042 0202 	orr.w	r2, r2, #2
 800c5b4:	715a      	strb	r2, [r3, #5]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d006      	beq.n	800c5ca <USBD_CDC_GetHSCfgDesc+0x5a>
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	711a      	strb	r2, [r3, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f042 0202 	orr.w	r2, r2, #2
 800c5c8:	715a      	strb	r2, [r3, #5]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2243      	movs	r2, #67	; 0x43
 800c5ce:	801a      	strh	r2, [r3, #0]
 800c5d0:	4b02      	ldr	r3, [pc, #8]	; (800c5dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3718      	adds	r7, #24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	20000064 	.word	0x20000064

0800c5e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b086      	sub	sp, #24
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	2182      	movs	r1, #130	; 0x82
 800c5ea:	4818      	ldr	r0, [pc, #96]	; (800c64c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5ec:	f000 fcdf 	bl	800cfae <USBD_GetEpDesc>
 800c5f0:	6178      	str	r0, [r7, #20]
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	4815      	ldr	r0, [pc, #84]	; (800c64c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c5f6:	f000 fcda 	bl	800cfae <USBD_GetEpDesc>
 800c5fa:	6138      	str	r0, [r7, #16]
 800c5fc:	2181      	movs	r1, #129	; 0x81
 800c5fe:	4813      	ldr	r0, [pc, #76]	; (800c64c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c600:	f000 fcd5 	bl	800cfae <USBD_GetEpDesc>
 800c604:	60f8      	str	r0, [r7, #12]
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d002      	beq.n	800c612 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	2210      	movs	r2, #16
 800c610:	719a      	strb	r2, [r3, #6]
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d006      	beq.n	800c626 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c620:	711a      	strb	r2, [r3, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	715a      	strb	r2, [r3, #5]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d006      	beq.n	800c63a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2200      	movs	r2, #0
 800c630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c634:	711a      	strb	r2, [r3, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	715a      	strb	r2, [r3, #5]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2243      	movs	r2, #67	; 0x43
 800c63e:	801a      	strh	r2, [r3, #0]
 800c640:	4b02      	ldr	r3, [pc, #8]	; (800c64c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c642:	4618      	mov	r0, r3
 800c644:	3718      	adds	r7, #24
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	20000064 	.word	0x20000064

0800c650 <USBD_CDC_GetDeviceQualifierDescriptor>:
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	220a      	movs	r2, #10
 800c65c:	801a      	strh	r2, [r3, #0]
 800c65e:	4b03      	ldr	r3, [pc, #12]	; (800c66c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
 800c660:	4618      	mov	r0, r3
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	20000020 	.word	0x20000020

0800c670 <USBD_CDC_RegisterInterface>:
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d101      	bne.n	800c684 <USBD_CDC_RegisterInterface+0x14>
 800c680:	2303      	movs	r3, #3
 800c682:	e009      	b.n	800c698 <USBD_CDC_RegisterInterface+0x28>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	33b0      	adds	r3, #176	; 0xb0
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4413      	add	r3, r2
 800c692:	683a      	ldr	r2, [r7, #0]
 800c694:	605a      	str	r2, [r3, #4]
 800c696:	2300      	movs	r3, #0
 800c698:	4618      	mov	r0, r3
 800c69a:	370c      	adds	r7, #12
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <USBD_CDC_SetTxBuffer>:
 800c6a4:	b480      	push	{r7}
 800c6a6:	b087      	sub	sp, #28
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	32b0      	adds	r2, #176	; 0xb0
 800c6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6be:	617b      	str	r3, [r7, #20]
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d101      	bne.n	800c6ca <USBD_CDC_SetTxBuffer+0x26>
 800c6c6:	2303      	movs	r3, #3
 800c6c8:	e008      	b.n	800c6dc <USBD_CDC_SetTxBuffer+0x38>
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	68ba      	ldr	r2, [r7, #8]
 800c6ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800c6da:	2300      	movs	r3, #0
 800c6dc:	4618      	mov	r0, r3
 800c6de:	371c      	adds	r7, #28
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <USBD_CDC_SetRxBuffer>:
 800c6e8:	b480      	push	{r7}
 800c6ea:	b085      	sub	sp, #20
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	32b0      	adds	r2, #176	; 0xb0
 800c6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c700:	60fb      	str	r3, [r7, #12]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d101      	bne.n	800c70c <USBD_CDC_SetRxBuffer+0x24>
 800c708:	2303      	movs	r3, #3
 800c70a:	e004      	b.n	800c716 <USBD_CDC_SetRxBuffer+0x2e>
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	683a      	ldr	r2, [r7, #0]
 800c710:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c714:	2300      	movs	r3, #0
 800c716:	4618      	mov	r0, r3
 800c718:	3714      	adds	r7, #20
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
	...

0800c724 <USBD_CDC_TransmitPacket>:
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	32b0      	adds	r2, #176	; 0xb0
 800c736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c73a:	60bb      	str	r3, [r7, #8]
 800c73c:	2301      	movs	r3, #1
 800c73e:	73fb      	strb	r3, [r7, #15]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	32b0      	adds	r2, #176	; 0xb0
 800c74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d101      	bne.n	800c756 <USBD_CDC_TransmitPacket+0x32>
 800c752:	2303      	movs	r3, #3
 800c754:	e025      	b.n	800c7a2 <USBD_CDC_TransmitPacket+0x7e>
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d11f      	bne.n	800c7a0 <USBD_CDC_TransmitPacket+0x7c>
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	2201      	movs	r2, #1
 800c764:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800c768:	4b10      	ldr	r3, [pc, #64]	; (800c7ac <USBD_CDC_TransmitPacket+0x88>)
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	f003 020f 	and.w	r2, r3, #15
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	4613      	mov	r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	4413      	add	r3, r2
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	4403      	add	r3, r0
 800c782:	3318      	adds	r3, #24
 800c784:	6019      	str	r1, [r3, #0]
 800c786:	4b09      	ldr	r3, [pc, #36]	; (800c7ac <USBD_CDC_TransmitPacket+0x88>)
 800c788:	7819      	ldrb	r1, [r3, #0]
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f001 ffbf 	bl	800e71a <USBD_LL_Transmit>
 800c79c:	2300      	movs	r3, #0
 800c79e:	73fb      	strb	r3, [r7, #15]
 800c7a0:	7bfb      	ldrb	r3, [r7, #15]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	200000a7 	.word	0x200000a7

0800c7b0 <USBD_CDC_ReceivePacket>:
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	32b0      	adds	r2, #176	; 0xb0
 800c7c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7c6:	60fb      	str	r3, [r7, #12]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	32b0      	adds	r2, #176	; 0xb0
 800c7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d101      	bne.n	800c7de <USBD_CDC_ReceivePacket+0x2e>
 800c7da:	2303      	movs	r3, #3
 800c7dc:	e018      	b.n	800c810 <USBD_CDC_ReceivePacket+0x60>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	7c1b      	ldrb	r3, [r3, #16]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10a      	bne.n	800c7fc <USBD_CDC_ReceivePacket+0x4c>
 800c7e6:	4b0c      	ldr	r3, [pc, #48]	; (800c818 <USBD_CDC_ReceivePacket+0x68>)
 800c7e8:	7819      	ldrb	r1, [r3, #0]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c7f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f001 ffb1 	bl	800e75c <USBD_LL_PrepareReceive>
 800c7fa:	e008      	b.n	800c80e <USBD_CDC_ReceivePacket+0x5e>
 800c7fc:	4b06      	ldr	r3, [pc, #24]	; (800c818 <USBD_CDC_ReceivePacket+0x68>)
 800c7fe:	7819      	ldrb	r1, [r3, #0]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c806:	2340      	movs	r3, #64	; 0x40
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f001 ffa7 	bl	800e75c <USBD_LL_PrepareReceive>
 800c80e:	2300      	movs	r3, #0
 800c810:	4618      	mov	r0, r3
 800c812:	3710      	adds	r7, #16
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	200000a8 	.word	0x200000a8

0800c81c <USBD_Init>:
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	4613      	mov	r3, r2
 800c828:	71fb      	strb	r3, [r7, #7]
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d101      	bne.n	800c834 <USBD_Init+0x18>
 800c830:	2303      	movs	r3, #3
 800c832:	e01f      	b.n	800c874 <USBD_Init+0x58>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2200      	movs	r2, #0
 800c838:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2200      	movs	r2, #0
 800c840:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2200      	movs	r2, #0
 800c848:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d003      	beq.n	800c85a <USBD_Init+0x3e>
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2201      	movs	r2, #1
 800c85e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	79fa      	ldrb	r2, [r7, #7]
 800c866:	701a      	strb	r2, [r3, #0]
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f001 fe21 	bl	800e4b0 <USBD_LL_Init>
 800c86e:	4603      	mov	r3, r0
 800c870:	75fb      	strb	r3, [r7, #23]
 800c872:	7dfb      	ldrb	r3, [r7, #23]
 800c874:	4618      	mov	r0, r3
 800c876:	3718      	adds	r7, #24
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <USBD_RegisterClass>:
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
 800c886:	2300      	movs	r3, #0
 800c888:	81fb      	strh	r3, [r7, #14]
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d101      	bne.n	800c894 <USBD_RegisterClass+0x18>
 800c890:	2303      	movs	r3, #3
 800c892:	e025      	b.n	800c8e0 <USBD_RegisterClass+0x64>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	32ae      	adds	r2, #174	; 0xae
 800c8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00f      	beq.n	800c8d0 <USBD_RegisterClass+0x54>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	32ae      	adds	r2, #174	; 0xae
 800c8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c0:	f107 020e 	add.w	r2, r7, #14
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	4798      	blx	r3
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c8d6:	1c5a      	adds	r2, r3, #1
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
 800c8de:	2300      	movs	r3, #0
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3710      	adds	r7, #16
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <USBD_Start>:
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f001 fe29 	bl	800e548 <USBD_LL_Start>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3708      	adds	r7, #8
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <USBD_RunTestMode>:
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	2300      	movs	r3, #0
 800c90a:	4618      	mov	r0, r3
 800c90c:	370c      	adds	r7, #12
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <USBD_SetClassConfig>:
 800c916:	b580      	push	{r7, lr}
 800c918:	b084      	sub	sp, #16
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	460b      	mov	r3, r1
 800c920:	70fb      	strb	r3, [r7, #3]
 800c922:	2300      	movs	r3, #0
 800c924:	73fb      	strb	r3, [r7, #15]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d009      	beq.n	800c944 <USBD_SetClassConfig+0x2e>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	78fa      	ldrb	r2, [r7, #3]
 800c93a:	4611      	mov	r1, r2
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	4798      	blx	r3
 800c940:	4603      	mov	r3, r0
 800c942:	73fb      	strb	r3, [r7, #15]
 800c944:	7bfb      	ldrb	r3, [r7, #15]
 800c946:	4618      	mov	r0, r3
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <USBD_ClrClassConfig>:
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	460b      	mov	r3, r1
 800c958:	70fb      	strb	r3, [r7, #3]
 800c95a:	2300      	movs	r3, #0
 800c95c:	73fb      	strb	r3, [r7, #15]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	78fa      	ldrb	r2, [r7, #3]
 800c968:	4611      	mov	r1, r2
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	4798      	blx	r3
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <USBD_ClrClassConfig+0x2a>
 800c974:	2303      	movs	r3, #3
 800c976:	73fb      	strb	r3, [r7, #15]
 800c978:	7bfb      	ldrb	r3, [r7, #15]
 800c97a:	4618      	mov	r0, r3
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <USBD_LL_SetupStage>:
 800c982:	b580      	push	{r7, lr}
 800c984:	b084      	sub	sp, #16
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	6039      	str	r1, [r7, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c992:	6839      	ldr	r1, [r7, #0]
 800c994:	4618      	mov	r0, r3
 800c996:	f001 f908 	bl	800dbaa <USBD_ParseSetupRequest>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2201      	movs	r2, #1
 800c99e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c9b6:	f003 031f 	and.w	r3, r3, #31
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d01a      	beq.n	800c9f4 <USBD_LL_SetupStage+0x72>
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d822      	bhi.n	800ca08 <USBD_LL_SetupStage+0x86>
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d002      	beq.n	800c9cc <USBD_LL_SetupStage+0x4a>
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d00a      	beq.n	800c9e0 <USBD_LL_SetupStage+0x5e>
 800c9ca:	e01d      	b.n	800ca08 <USBD_LL_SetupStage+0x86>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 fb5f 	bl	800d098 <USBD_StdDevReq>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	73fb      	strb	r3, [r7, #15]
 800c9de:	e020      	b.n	800ca22 <USBD_LL_SetupStage+0xa0>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 fbc7 	bl	800d17c <USBD_StdItfReq>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	73fb      	strb	r3, [r7, #15]
 800c9f2:	e016      	b.n	800ca22 <USBD_LL_SetupStage+0xa0>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 fc29 	bl	800d254 <USBD_StdEPReq>
 800ca02:	4603      	mov	r3, r0
 800ca04:	73fb      	strb	r3, [r7, #15]
 800ca06:	e00c      	b.n	800ca22 <USBD_LL_SetupStage+0xa0>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ca0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	4619      	mov	r1, r3
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f001 fdf6 	bl	800e608 <USBD_LL_StallEP>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	73fb      	strb	r3, [r7, #15]
 800ca20:	bf00      	nop
 800ca22:	7bfb      	ldrb	r3, [r7, #15]
 800ca24:	4618      	mov	r0, r3
 800ca26:	3710      	adds	r7, #16
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <USBD_LL_DataOutStage>:
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b086      	sub	sp, #24
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	460b      	mov	r3, r1
 800ca36:	607a      	str	r2, [r7, #4]
 800ca38:	72fb      	strb	r3, [r7, #11]
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	75fb      	strb	r3, [r7, #23]
 800ca3e:	7afb      	ldrb	r3, [r7, #11]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d16e      	bne.n	800cb22 <USBD_LL_DataOutStage+0xf6>
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ca4a:	613b      	str	r3, [r7, #16]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca52:	2b03      	cmp	r3, #3
 800ca54:	f040 8098 	bne.w	800cb88 <USBD_LL_DataOutStage+0x15c>
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	689a      	ldr	r2, [r3, #8]
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d913      	bls.n	800ca8c <USBD_LL_DataOutStage+0x60>
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	689a      	ldr	r2, [r3, #8]
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	1ad2      	subs	r2, r2, r3
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	609a      	str	r2, [r3, #8]
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	68da      	ldr	r2, [r3, #12]
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	bf28      	it	cs
 800ca7e:	4613      	movcs	r3, r2
 800ca80:	461a      	mov	r2, r3
 800ca82:	6879      	ldr	r1, [r7, #4]
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f001 f984 	bl	800dd92 <USBD_CtlContinueRx>
 800ca8a:	e07d      	b.n	800cb88 <USBD_LL_DataOutStage+0x15c>
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ca92:	f003 031f 	and.w	r3, r3, #31
 800ca96:	2b02      	cmp	r3, #2
 800ca98:	d014      	beq.n	800cac4 <USBD_LL_DataOutStage+0x98>
 800ca9a:	2b02      	cmp	r3, #2
 800ca9c:	d81d      	bhi.n	800cada <USBD_LL_DataOutStage+0xae>
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d002      	beq.n	800caa8 <USBD_LL_DataOutStage+0x7c>
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d003      	beq.n	800caae <USBD_LL_DataOutStage+0x82>
 800caa6:	e018      	b.n	800cada <USBD_LL_DataOutStage+0xae>
 800caa8:	2300      	movs	r3, #0
 800caaa:	75bb      	strb	r3, [r7, #22]
 800caac:	e018      	b.n	800cae0 <USBD_LL_DataOutStage+0xb4>
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	4619      	mov	r1, r3
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f000 fa5e 	bl	800cf7a <USBD_CoreFindIF>
 800cabe:	4603      	mov	r3, r0
 800cac0:	75bb      	strb	r3, [r7, #22]
 800cac2:	e00d      	b.n	800cae0 <USBD_LL_DataOutStage+0xb4>
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	4619      	mov	r1, r3
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f000 fa60 	bl	800cf94 <USBD_CoreFindEP>
 800cad4:	4603      	mov	r3, r0
 800cad6:	75bb      	strb	r3, [r7, #22]
 800cad8:	e002      	b.n	800cae0 <USBD_LL_DataOutStage+0xb4>
 800cada:	2300      	movs	r3, #0
 800cadc:	75bb      	strb	r3, [r7, #22]
 800cade:	bf00      	nop
 800cae0:	7dbb      	ldrb	r3, [r7, #22]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d119      	bne.n	800cb1a <USBD_LL_DataOutStage+0xee>
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caec:	b2db      	uxtb	r3, r3
 800caee:	2b03      	cmp	r3, #3
 800caf0:	d113      	bne.n	800cb1a <USBD_LL_DataOutStage+0xee>
 800caf2:	7dba      	ldrb	r2, [r7, #22]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	32ae      	adds	r2, #174	; 0xae
 800caf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00b      	beq.n	800cb1a <USBD_LL_DataOutStage+0xee>
 800cb02:	7dba      	ldrb	r2, [r7, #22]
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800cb0a:	7dba      	ldrb	r2, [r7, #22]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	32ae      	adds	r2, #174	; 0xae
 800cb10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	4798      	blx	r3
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	f001 f94a 	bl	800ddb4 <USBD_CtlSendStatus>
 800cb20:	e032      	b.n	800cb88 <USBD_LL_DataOutStage+0x15c>
 800cb22:	7afb      	ldrb	r3, [r7, #11]
 800cb24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f000 fa31 	bl	800cf94 <USBD_CoreFindEP>
 800cb32:	4603      	mov	r3, r0
 800cb34:	75bb      	strb	r3, [r7, #22]
 800cb36:	7dbb      	ldrb	r3, [r7, #22]
 800cb38:	2bff      	cmp	r3, #255	; 0xff
 800cb3a:	d025      	beq.n	800cb88 <USBD_LL_DataOutStage+0x15c>
 800cb3c:	7dbb      	ldrb	r3, [r7, #22]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d122      	bne.n	800cb88 <USBD_LL_DataOutStage+0x15c>
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	2b03      	cmp	r3, #3
 800cb4c:	d117      	bne.n	800cb7e <USBD_LL_DataOutStage+0x152>
 800cb4e:	7dba      	ldrb	r2, [r7, #22]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	32ae      	adds	r2, #174	; 0xae
 800cb54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb58:	699b      	ldr	r3, [r3, #24]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00f      	beq.n	800cb7e <USBD_LL_DataOutStage+0x152>
 800cb5e:	7dba      	ldrb	r2, [r7, #22]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800cb66:	7dba      	ldrb	r2, [r7, #22]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	32ae      	adds	r2, #174	; 0xae
 800cb6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb70:	699b      	ldr	r3, [r3, #24]
 800cb72:	7afa      	ldrb	r2, [r7, #11]
 800cb74:	4611      	mov	r1, r2
 800cb76:	68f8      	ldr	r0, [r7, #12]
 800cb78:	4798      	blx	r3
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	75fb      	strb	r3, [r7, #23]
 800cb7e:	7dfb      	ldrb	r3, [r7, #23]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d001      	beq.n	800cb88 <USBD_LL_DataOutStage+0x15c>
 800cb84:	7dfb      	ldrb	r3, [r7, #23]
 800cb86:	e000      	b.n	800cb8a <USBD_LL_DataOutStage+0x15e>
 800cb88:	2300      	movs	r3, #0
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3718      	adds	r7, #24
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <USBD_LL_DataInStage>:
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b086      	sub	sp, #24
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	60f8      	str	r0, [r7, #12]
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	607a      	str	r2, [r7, #4]
 800cb9e:	72fb      	strb	r3, [r7, #11]
 800cba0:	7afb      	ldrb	r3, [r7, #11]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d16f      	bne.n	800cc86 <USBD_LL_DataInStage+0xf4>
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	3314      	adds	r3, #20
 800cbaa:	613b      	str	r3, [r7, #16]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cbb2:	2b02      	cmp	r3, #2
 800cbb4:	d15a      	bne.n	800cc6c <USBD_LL_DataInStage+0xda>
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	689a      	ldr	r2, [r3, #8]
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d914      	bls.n	800cbec <USBD_LL_DataInStage+0x5a>
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	689a      	ldr	r2, [r3, #8]
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	1ad2      	subs	r2, r2, r3
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	609a      	str	r2, [r3, #8]
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	6879      	ldr	r1, [r7, #4]
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f001 f8ac 	bl	800dd36 <USBD_CtlContinueSendData>
 800cbde:	2300      	movs	r3, #0
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	68f8      	ldr	r0, [r7, #12]
 800cbe6:	f001 fdb9 	bl	800e75c <USBD_LL_PrepareReceive>
 800cbea:	e03f      	b.n	800cc6c <USBD_LL_DataInStage+0xda>
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	68da      	ldr	r2, [r3, #12]
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d11c      	bne.n	800cc32 <USBD_LL_DataInStage+0xa0>
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d316      	bcc.n	800cc32 <USBD_LL_DataInStage+0xa0>
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	685a      	ldr	r2, [r3, #4]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d20f      	bcs.n	800cc32 <USBD_LL_DataInStage+0xa0>
 800cc12:	2200      	movs	r2, #0
 800cc14:	2100      	movs	r1, #0
 800cc16:	68f8      	ldr	r0, [r7, #12]
 800cc18:	f001 f88d 	bl	800dd36 <USBD_CtlContinueSendData>
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 800cc24:	2300      	movs	r3, #0
 800cc26:	2200      	movs	r2, #0
 800cc28:	2100      	movs	r1, #0
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f001 fd96 	bl	800e75c <USBD_LL_PrepareReceive>
 800cc30:	e01c      	b.n	800cc6c <USBD_LL_DataInStage+0xda>
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	2b03      	cmp	r3, #3
 800cc3c:	d10f      	bne.n	800cc5e <USBD_LL_DataInStage+0xcc>
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d009      	beq.n	800cc5e <USBD_LL_DataInStage+0xcc>
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	68f8      	ldr	r0, [r7, #12]
 800cc5c:	4798      	blx	r3
 800cc5e:	2180      	movs	r1, #128	; 0x80
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f001 fcd1 	bl	800e608 <USBD_LL_StallEP>
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f001 f8b7 	bl	800ddda <USBD_CtlReceiveStatus>
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d03a      	beq.n	800ccec <USBD_LL_DataInStage+0x15a>
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f7ff fe42 	bl	800c900 <USBD_RunTestMode>
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cc84:	e032      	b.n	800ccec <USBD_LL_DataInStage+0x15a>
 800cc86:	7afb      	ldrb	r3, [r7, #11]
 800cc88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	4619      	mov	r1, r3
 800cc90:	68f8      	ldr	r0, [r7, #12]
 800cc92:	f000 f97f 	bl	800cf94 <USBD_CoreFindEP>
 800cc96:	4603      	mov	r3, r0
 800cc98:	75fb      	strb	r3, [r7, #23]
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
 800cc9c:	2bff      	cmp	r3, #255	; 0xff
 800cc9e:	d025      	beq.n	800ccec <USBD_LL_DataInStage+0x15a>
 800cca0:	7dfb      	ldrb	r3, [r7, #23]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d122      	bne.n	800ccec <USBD_LL_DataInStage+0x15a>
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	2b03      	cmp	r3, #3
 800ccb0:	d11c      	bne.n	800ccec <USBD_LL_DataInStage+0x15a>
 800ccb2:	7dfa      	ldrb	r2, [r7, #23]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	32ae      	adds	r2, #174	; 0xae
 800ccb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccbc:	695b      	ldr	r3, [r3, #20]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d014      	beq.n	800ccec <USBD_LL_DataInStage+0x15a>
 800ccc2:	7dfa      	ldrb	r2, [r7, #23]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800ccca:	7dfa      	ldrb	r2, [r7, #23]
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	32ae      	adds	r2, #174	; 0xae
 800ccd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccd4:	695b      	ldr	r3, [r3, #20]
 800ccd6:	7afa      	ldrb	r2, [r7, #11]
 800ccd8:	4611      	mov	r1, r2
 800ccda:	68f8      	ldr	r0, [r7, #12]
 800ccdc:	4798      	blx	r3
 800ccde:	4603      	mov	r3, r0
 800cce0:	75bb      	strb	r3, [r7, #22]
 800cce2:	7dbb      	ldrb	r3, [r7, #22]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d001      	beq.n	800ccec <USBD_LL_DataInStage+0x15a>
 800cce8:	7dbb      	ldrb	r3, [r7, #22]
 800ccea:	e000      	b.n	800ccee <USBD_LL_DataInStage+0x15c>
 800ccec:	2300      	movs	r3, #0
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3718      	adds	r7, #24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <USBD_LL_Reset>:
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b084      	sub	sp, #16
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
 800ccfe:	2300      	movs	r3, #0
 800cd00:	73fb      	strb	r3, [r7, #15]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2201      	movs	r2, #1
 800cd06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2200      	movs	r2, #0
 800cd16:	605a      	str	r2, [r3, #4]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d014      	beq.n	800cd5c <USBD_LL_Reset+0x66>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d00e      	beq.n	800cd5c <USBD_LL_Reset+0x66>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	6852      	ldr	r2, [r2, #4]
 800cd4a:	b2d2      	uxtb	r2, r2
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	4798      	blx	r3
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d001      	beq.n	800cd5c <USBD_LL_Reset+0x66>
 800cd58:	2303      	movs	r3, #3
 800cd5a:	73fb      	strb	r3, [r7, #15]
 800cd5c:	2340      	movs	r3, #64	; 0x40
 800cd5e:	2200      	movs	r2, #0
 800cd60:	2100      	movs	r1, #0
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f001 fc0b 	bl	800e57e <USBD_LL_OpenEP>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2240      	movs	r2, #64	; 0x40
 800cd74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 800cd78:	2340      	movs	r3, #64	; 0x40
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	2180      	movs	r1, #128	; 0x80
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f001 fbfd 	bl	800e57e <USBD_LL_OpenEP>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2201      	movs	r2, #1
 800cd88:	849a      	strh	r2, [r3, #36]	; 0x24
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2240      	movs	r2, #64	; 0x40
 800cd8e:	621a      	str	r2, [r3, #32]
 800cd90:	7bfb      	ldrb	r3, [r7, #15]
 800cd92:	4618      	mov	r0, r3
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <USBD_LL_SetSpeed>:
 800cd9a:	b480      	push	{r7}
 800cd9c:	b083      	sub	sp, #12
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	460b      	mov	r3, r1
 800cda4:	70fb      	strb	r3, [r7, #3]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	78fa      	ldrb	r2, [r7, #3]
 800cdaa:	741a      	strb	r2, [r3, #16]
 800cdac:	2300      	movs	r3, #0
 800cdae:	4618      	mov	r0, r3
 800cdb0:	370c      	adds	r7, #12
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr

0800cdba <USBD_LL_Suspend>:
 800cdba:	b480      	push	{r7}
 800cdbc:	b083      	sub	sp, #12
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2204      	movs	r2, #4
 800cdd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800cdd8:	2300      	movs	r3, #0
 800cdda:	4618      	mov	r0, r3
 800cddc:	370c      	adds	r7, #12
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <USBD_LL_Resume>:
 800cde6:	b480      	push	{r7}
 800cde8:	b083      	sub	sp, #12
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	d106      	bne.n	800ce08 <USBD_LL_Resume+0x22>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800ce08:	2300      	movs	r3, #0
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	370c      	adds	r7, #12
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr

0800ce16 <USBD_LL_SOF>:
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b082      	sub	sp, #8
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	2b03      	cmp	r3, #3
 800ce28:	d110      	bne.n	800ce4c <USBD_LL_SOF+0x36>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00b      	beq.n	800ce4c <USBD_LL_SOF+0x36>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce3a:	69db      	ldr	r3, [r3, #28]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d005      	beq.n	800ce4c <USBD_LL_SOF+0x36>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce46:	69db      	ldr	r3, [r3, #28]
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	4798      	blx	r3
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3708      	adds	r7, #8
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <USBD_LL_IsoINIncomplete>:
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b082      	sub	sp, #8
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	460b      	mov	r3, r1
 800ce60:	70fb      	strb	r3, [r7, #3]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	32ae      	adds	r2, #174	; 0xae
 800ce6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d101      	bne.n	800ce78 <USBD_LL_IsoINIncomplete+0x22>
 800ce74:	2303      	movs	r3, #3
 800ce76:	e01c      	b.n	800ceb2 <USBD_LL_IsoINIncomplete+0x5c>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	2b03      	cmp	r3, #3
 800ce82:	d115      	bne.n	800ceb0 <USBD_LL_IsoINIncomplete+0x5a>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	32ae      	adds	r2, #174	; 0xae
 800ce8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce92:	6a1b      	ldr	r3, [r3, #32]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00b      	beq.n	800ceb0 <USBD_LL_IsoINIncomplete+0x5a>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	32ae      	adds	r2, #174	; 0xae
 800cea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cea6:	6a1b      	ldr	r3, [r3, #32]
 800cea8:	78fa      	ldrb	r2, [r7, #3]
 800ceaa:	4611      	mov	r1, r2
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	4798      	blx	r3
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <USBD_LL_IsoOUTIncomplete>:
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b082      	sub	sp, #8
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
 800cec2:	460b      	mov	r3, r1
 800cec4:	70fb      	strb	r3, [r7, #3]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	32ae      	adds	r2, #174	; 0xae
 800ced0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d101      	bne.n	800cedc <USBD_LL_IsoOUTIncomplete+0x22>
 800ced8:	2303      	movs	r3, #3
 800ceda:	e01c      	b.n	800cf16 <USBD_LL_IsoOUTIncomplete+0x5c>
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	2b03      	cmp	r3, #3
 800cee6:	d115      	bne.n	800cf14 <USBD_LL_IsoOUTIncomplete+0x5a>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	32ae      	adds	r2, #174	; 0xae
 800cef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00b      	beq.n	800cf14 <USBD_LL_IsoOUTIncomplete+0x5a>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	32ae      	adds	r2, #174	; 0xae
 800cf06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0c:	78fa      	ldrb	r2, [r7, #3]
 800cf0e:	4611      	mov	r1, r2
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	4798      	blx	r3
 800cf14:	2300      	movs	r3, #0
 800cf16:	4618      	mov	r0, r3
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <USBD_LL_DevConnected>:
 800cf1e:	b480      	push	{r7}
 800cf20:	b083      	sub	sp, #12
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
 800cf26:	2300      	movs	r3, #0
 800cf28:	4618      	mov	r0, r3
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <USBD_LL_DevDisconnected>:
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	73fb      	strb	r3, [r7, #15]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00e      	beq.n	800cf70 <USBD_LL_DevDisconnected+0x3c>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	6852      	ldr	r2, [r2, #4]
 800cf5e:	b2d2      	uxtb	r2, r2
 800cf60:	4611      	mov	r1, r2
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	4798      	blx	r3
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d001      	beq.n	800cf70 <USBD_LL_DevDisconnected+0x3c>
 800cf6c:	2303      	movs	r3, #3
 800cf6e:	73fb      	strb	r3, [r7, #15]
 800cf70:	7bfb      	ldrb	r3, [r7, #15]
 800cf72:	4618      	mov	r0, r3
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <USBD_CoreFindIF>:
 800cf7a:	b480      	push	{r7}
 800cf7c:	b083      	sub	sp, #12
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	460b      	mov	r3, r1
 800cf84:	70fb      	strb	r3, [r7, #3]
 800cf86:	2300      	movs	r3, #0
 800cf88:	4618      	mov	r0, r3
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <USBD_CoreFindEP>:
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	70fb      	strb	r3, [r7, #3]
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	370c      	adds	r7, #12
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <USBD_GetEpDesc>:
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b086      	sub	sp, #24
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	70fb      	strb	r3, [r7, #3]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	617b      	str	r3, [r7, #20]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	60fb      	str	r3, [r7, #12]
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	613b      	str	r3, [r7, #16]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	885b      	ldrh	r3, [r3, #2]
 800cfca:	b29a      	uxth	r2, r3
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d920      	bls.n	800d018 <USBD_GetEpDesc+0x6a>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	817b      	strh	r3, [r7, #10]
 800cfde:	e013      	b.n	800d008 <USBD_GetEpDesc+0x5a>
 800cfe0:	f107 030a 	add.w	r3, r7, #10
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	6978      	ldr	r0, [r7, #20]
 800cfe8:	f000 f81b 	bl	800d022 <USBD_GetNextDesc>
 800cfec:	6178      	str	r0, [r7, #20]
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	785b      	ldrb	r3, [r3, #1]
 800cff2:	2b05      	cmp	r3, #5
 800cff4:	d108      	bne.n	800d008 <USBD_GetEpDesc+0x5a>
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	613b      	str	r3, [r7, #16]
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	789b      	ldrb	r3, [r3, #2]
 800cffe:	78fa      	ldrb	r2, [r7, #3]
 800d000:	429a      	cmp	r2, r3
 800d002:	d008      	beq.n	800d016 <USBD_GetEpDesc+0x68>
 800d004:	2300      	movs	r3, #0
 800d006:	613b      	str	r3, [r7, #16]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	885b      	ldrh	r3, [r3, #2]
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	897b      	ldrh	r3, [r7, #10]
 800d010:	429a      	cmp	r2, r3
 800d012:	d8e5      	bhi.n	800cfe0 <USBD_GetEpDesc+0x32>
 800d014:	e000      	b.n	800d018 <USBD_GetEpDesc+0x6a>
 800d016:	bf00      	nop
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	4618      	mov	r0, r3
 800d01c:	3718      	adds	r7, #24
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <USBD_GetNextDesc>:
 800d022:	b480      	push	{r7}
 800d024:	b085      	sub	sp, #20
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
 800d02a:	6039      	str	r1, [r7, #0]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	60fb      	str	r3, [r7, #12]
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	881a      	ldrh	r2, [r3, #0]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	b29b      	uxth	r3, r3
 800d03a:	4413      	add	r3, r2
 800d03c:	b29a      	uxth	r2, r3
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	801a      	strh	r2, [r3, #0]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	461a      	mov	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4413      	add	r3, r2
 800d04c:	60fb      	str	r3, [r7, #12]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	4618      	mov	r0, r3
 800d052:	3714      	adds	r7, #20
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <SWAPBYTE>:
 800d05c:	b480      	push	{r7}
 800d05e:	b087      	sub	sp, #28
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	617b      	str	r3, [r7, #20]
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	827b      	strh	r3, [r7, #18]
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	3301      	adds	r3, #1
 800d072:	617b      	str	r3, [r7, #20]
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	823b      	strh	r3, [r7, #16]
 800d07a:	8a3b      	ldrh	r3, [r7, #16]
 800d07c:	021b      	lsls	r3, r3, #8
 800d07e:	b21a      	sxth	r2, r3
 800d080:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d084:	4313      	orrs	r3, r2
 800d086:	b21b      	sxth	r3, r3
 800d088:	81fb      	strh	r3, [r7, #14]
 800d08a:	89fb      	ldrh	r3, [r7, #14]
 800d08c:	4618      	mov	r0, r3
 800d08e:	371c      	adds	r7, #28
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <USBD_StdDevReq>:
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	73fb      	strb	r3, [r7, #15]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0ae:	2b40      	cmp	r3, #64	; 0x40
 800d0b0:	d005      	beq.n	800d0be <USBD_StdDevReq+0x26>
 800d0b2:	2b40      	cmp	r3, #64	; 0x40
 800d0b4:	d857      	bhi.n	800d166 <USBD_StdDevReq+0xce>
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d00f      	beq.n	800d0da <USBD_StdDevReq+0x42>
 800d0ba:	2b20      	cmp	r3, #32
 800d0bc:	d153      	bne.n	800d166 <USBD_StdDevReq+0xce>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	32ae      	adds	r2, #174	; 0xae
 800d0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0cc:	689b      	ldr	r3, [r3, #8]
 800d0ce:	6839      	ldr	r1, [r7, #0]
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	4798      	blx	r3
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	73fb      	strb	r3, [r7, #15]
 800d0d8:	e04a      	b.n	800d170 <USBD_StdDevReq+0xd8>
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	785b      	ldrb	r3, [r3, #1]
 800d0de:	2b09      	cmp	r3, #9
 800d0e0:	d83b      	bhi.n	800d15a <USBD_StdDevReq+0xc2>
 800d0e2:	a201      	add	r2, pc, #4	; (adr r2, 800d0e8 <USBD_StdDevReq+0x50>)
 800d0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e8:	0800d13d 	.word	0x0800d13d
 800d0ec:	0800d151 	.word	0x0800d151
 800d0f0:	0800d15b 	.word	0x0800d15b
 800d0f4:	0800d147 	.word	0x0800d147
 800d0f8:	0800d15b 	.word	0x0800d15b
 800d0fc:	0800d11b 	.word	0x0800d11b
 800d100:	0800d111 	.word	0x0800d111
 800d104:	0800d15b 	.word	0x0800d15b
 800d108:	0800d133 	.word	0x0800d133
 800d10c:	0800d125 	.word	0x0800d125
 800d110:	6839      	ldr	r1, [r7, #0]
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 fa3c 	bl	800d590 <USBD_GetDescriptor>
 800d118:	e024      	b.n	800d164 <USBD_StdDevReq+0xcc>
 800d11a:	6839      	ldr	r1, [r7, #0]
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 fba1 	bl	800d864 <USBD_SetAddress>
 800d122:	e01f      	b.n	800d164 <USBD_StdDevReq+0xcc>
 800d124:	6839      	ldr	r1, [r7, #0]
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 fbe0 	bl	800d8ec <USBD_SetConfig>
 800d12c:	4603      	mov	r3, r0
 800d12e:	73fb      	strb	r3, [r7, #15]
 800d130:	e018      	b.n	800d164 <USBD_StdDevReq+0xcc>
 800d132:	6839      	ldr	r1, [r7, #0]
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 fc83 	bl	800da40 <USBD_GetConfig>
 800d13a:	e013      	b.n	800d164 <USBD_StdDevReq+0xcc>
 800d13c:	6839      	ldr	r1, [r7, #0]
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 fcb4 	bl	800daac <USBD_GetStatus>
 800d144:	e00e      	b.n	800d164 <USBD_StdDevReq+0xcc>
 800d146:	6839      	ldr	r1, [r7, #0]
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 fce3 	bl	800db14 <USBD_SetFeature>
 800d14e:	e009      	b.n	800d164 <USBD_StdDevReq+0xcc>
 800d150:	6839      	ldr	r1, [r7, #0]
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 fd07 	bl	800db66 <USBD_ClrFeature>
 800d158:	e004      	b.n	800d164 <USBD_StdDevReq+0xcc>
 800d15a:	6839      	ldr	r1, [r7, #0]
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 fd5e 	bl	800dc1e <USBD_CtlError>
 800d162:	bf00      	nop
 800d164:	e004      	b.n	800d170 <USBD_StdDevReq+0xd8>
 800d166:	6839      	ldr	r1, [r7, #0]
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 fd58 	bl	800dc1e <USBD_CtlError>
 800d16e:	bf00      	nop
 800d170:	7bfb      	ldrb	r3, [r7, #15]
 800d172:	4618      	mov	r0, r3
 800d174:	3710      	adds	r7, #16
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop

0800d17c <USBD_StdItfReq>:
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
 800d186:	2300      	movs	r3, #0
 800d188:	73fb      	strb	r3, [r7, #15]
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d192:	2b40      	cmp	r3, #64	; 0x40
 800d194:	d005      	beq.n	800d1a2 <USBD_StdItfReq+0x26>
 800d196:	2b40      	cmp	r3, #64	; 0x40
 800d198:	d852      	bhi.n	800d240 <USBD_StdItfReq+0xc4>
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d001      	beq.n	800d1a2 <USBD_StdItfReq+0x26>
 800d19e:	2b20      	cmp	r3, #32
 800d1a0:	d14e      	bne.n	800d240 <USBD_StdItfReq+0xc4>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	2b02      	cmp	r3, #2
 800d1ae:	d840      	bhi.n	800d232 <USBD_StdItfReq+0xb6>
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	889b      	ldrh	r3, [r3, #4]
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d836      	bhi.n	800d228 <USBD_StdItfReq+0xac>
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	889b      	ldrh	r3, [r3, #4]
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f7ff fed9 	bl	800cf7a <USBD_CoreFindIF>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	73bb      	strb	r3, [r7, #14]
 800d1cc:	7bbb      	ldrb	r3, [r7, #14]
 800d1ce:	2bff      	cmp	r3, #255	; 0xff
 800d1d0:	d01d      	beq.n	800d20e <USBD_StdItfReq+0x92>
 800d1d2:	7bbb      	ldrb	r3, [r7, #14]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d11a      	bne.n	800d20e <USBD_StdItfReq+0x92>
 800d1d8:	7bba      	ldrb	r2, [r7, #14]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	32ae      	adds	r2, #174	; 0xae
 800d1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1e2:	689b      	ldr	r3, [r3, #8]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d00f      	beq.n	800d208 <USBD_StdItfReq+0x8c>
 800d1e8:	7bba      	ldrb	r2, [r7, #14]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800d1f0:	7bba      	ldrb	r2, [r7, #14]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	32ae      	adds	r2, #174	; 0xae
 800d1f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	6839      	ldr	r1, [r7, #0]
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	4798      	blx	r3
 800d202:	4603      	mov	r3, r0
 800d204:	73fb      	strb	r3, [r7, #15]
 800d206:	e004      	b.n	800d212 <USBD_StdItfReq+0x96>
 800d208:	2303      	movs	r3, #3
 800d20a:	73fb      	strb	r3, [r7, #15]
 800d20c:	e001      	b.n	800d212 <USBD_StdItfReq+0x96>
 800d20e:	2303      	movs	r3, #3
 800d210:	73fb      	strb	r3, [r7, #15]
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	88db      	ldrh	r3, [r3, #6]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d110      	bne.n	800d23c <USBD_StdItfReq+0xc0>
 800d21a:	7bfb      	ldrb	r3, [r7, #15]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d10d      	bne.n	800d23c <USBD_StdItfReq+0xc0>
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 fdc7 	bl	800ddb4 <USBD_CtlSendStatus>
 800d226:	e009      	b.n	800d23c <USBD_StdItfReq+0xc0>
 800d228:	6839      	ldr	r1, [r7, #0]
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 fcf7 	bl	800dc1e <USBD_CtlError>
 800d230:	e004      	b.n	800d23c <USBD_StdItfReq+0xc0>
 800d232:	6839      	ldr	r1, [r7, #0]
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 fcf2 	bl	800dc1e <USBD_CtlError>
 800d23a:	e000      	b.n	800d23e <USBD_StdItfReq+0xc2>
 800d23c:	bf00      	nop
 800d23e:	e004      	b.n	800d24a <USBD_StdItfReq+0xce>
 800d240:	6839      	ldr	r1, [r7, #0]
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 fceb 	bl	800dc1e <USBD_CtlError>
 800d248:	bf00      	nop
 800d24a:	7bfb      	ldrb	r3, [r7, #15]
 800d24c:	4618      	mov	r0, r3
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <USBD_StdEPReq>:
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
 800d25e:	2300      	movs	r3, #0
 800d260:	73fb      	strb	r3, [r7, #15]
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	889b      	ldrh	r3, [r3, #4]
 800d266:	73bb      	strb	r3, [r7, #14]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d270:	2b40      	cmp	r3, #64	; 0x40
 800d272:	d007      	beq.n	800d284 <USBD_StdEPReq+0x30>
 800d274:	2b40      	cmp	r3, #64	; 0x40
 800d276:	f200 817f 	bhi.w	800d578 <USBD_StdEPReq+0x324>
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d02a      	beq.n	800d2d4 <USBD_StdEPReq+0x80>
 800d27e:	2b20      	cmp	r3, #32
 800d280:	f040 817a 	bne.w	800d578 <USBD_StdEPReq+0x324>
 800d284:	7bbb      	ldrb	r3, [r7, #14]
 800d286:	4619      	mov	r1, r3
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7ff fe83 	bl	800cf94 <USBD_CoreFindEP>
 800d28e:	4603      	mov	r3, r0
 800d290:	737b      	strb	r3, [r7, #13]
 800d292:	7b7b      	ldrb	r3, [r7, #13]
 800d294:	2bff      	cmp	r3, #255	; 0xff
 800d296:	f000 8174 	beq.w	800d582 <USBD_StdEPReq+0x32e>
 800d29a:	7b7b      	ldrb	r3, [r7, #13]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	f040 8170 	bne.w	800d582 <USBD_StdEPReq+0x32e>
 800d2a2:	7b7a      	ldrb	r2, [r7, #13]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800d2aa:	7b7a      	ldrb	r2, [r7, #13]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	32ae      	adds	r2, #174	; 0xae
 800d2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2b4:	689b      	ldr	r3, [r3, #8]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	f000 8163 	beq.w	800d582 <USBD_StdEPReq+0x32e>
 800d2bc:	7b7a      	ldrb	r2, [r7, #13]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	32ae      	adds	r2, #174	; 0xae
 800d2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	6839      	ldr	r1, [r7, #0]
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	4798      	blx	r3
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	73fb      	strb	r3, [r7, #15]
 800d2d2:	e156      	b.n	800d582 <USBD_StdEPReq+0x32e>
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	785b      	ldrb	r3, [r3, #1]
 800d2d8:	2b03      	cmp	r3, #3
 800d2da:	d008      	beq.n	800d2ee <USBD_StdEPReq+0x9a>
 800d2dc:	2b03      	cmp	r3, #3
 800d2de:	f300 8145 	bgt.w	800d56c <USBD_StdEPReq+0x318>
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f000 809b 	beq.w	800d41e <USBD_StdEPReq+0x1ca>
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d03c      	beq.n	800d366 <USBD_StdEPReq+0x112>
 800d2ec:	e13e      	b.n	800d56c <USBD_StdEPReq+0x318>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	2b02      	cmp	r3, #2
 800d2f8:	d002      	beq.n	800d300 <USBD_StdEPReq+0xac>
 800d2fa:	2b03      	cmp	r3, #3
 800d2fc:	d016      	beq.n	800d32c <USBD_StdEPReq+0xd8>
 800d2fe:	e02c      	b.n	800d35a <USBD_StdEPReq+0x106>
 800d300:	7bbb      	ldrb	r3, [r7, #14]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00d      	beq.n	800d322 <USBD_StdEPReq+0xce>
 800d306:	7bbb      	ldrb	r3, [r7, #14]
 800d308:	2b80      	cmp	r3, #128	; 0x80
 800d30a:	d00a      	beq.n	800d322 <USBD_StdEPReq+0xce>
 800d30c:	7bbb      	ldrb	r3, [r7, #14]
 800d30e:	4619      	mov	r1, r3
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f001 f979 	bl	800e608 <USBD_LL_StallEP>
 800d316:	2180      	movs	r1, #128	; 0x80
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f001 f975 	bl	800e608 <USBD_LL_StallEP>
 800d31e:	bf00      	nop
 800d320:	e020      	b.n	800d364 <USBD_StdEPReq+0x110>
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fc7a 	bl	800dc1e <USBD_CtlError>
 800d32a:	e01b      	b.n	800d364 <USBD_StdEPReq+0x110>
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	885b      	ldrh	r3, [r3, #2]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d10e      	bne.n	800d352 <USBD_StdEPReq+0xfe>
 800d334:	7bbb      	ldrb	r3, [r7, #14]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00b      	beq.n	800d352 <USBD_StdEPReq+0xfe>
 800d33a:	7bbb      	ldrb	r3, [r7, #14]
 800d33c:	2b80      	cmp	r3, #128	; 0x80
 800d33e:	d008      	beq.n	800d352 <USBD_StdEPReq+0xfe>
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	88db      	ldrh	r3, [r3, #6]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d104      	bne.n	800d352 <USBD_StdEPReq+0xfe>
 800d348:	7bbb      	ldrb	r3, [r7, #14]
 800d34a:	4619      	mov	r1, r3
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f001 f95b 	bl	800e608 <USBD_LL_StallEP>
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 fd2e 	bl	800ddb4 <USBD_CtlSendStatus>
 800d358:	e004      	b.n	800d364 <USBD_StdEPReq+0x110>
 800d35a:	6839      	ldr	r1, [r7, #0]
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 fc5e 	bl	800dc1e <USBD_CtlError>
 800d362:	bf00      	nop
 800d364:	e107      	b.n	800d576 <USBD_StdEPReq+0x322>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	2b02      	cmp	r3, #2
 800d370:	d002      	beq.n	800d378 <USBD_StdEPReq+0x124>
 800d372:	2b03      	cmp	r3, #3
 800d374:	d016      	beq.n	800d3a4 <USBD_StdEPReq+0x150>
 800d376:	e04b      	b.n	800d410 <USBD_StdEPReq+0x1bc>
 800d378:	7bbb      	ldrb	r3, [r7, #14]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00d      	beq.n	800d39a <USBD_StdEPReq+0x146>
 800d37e:	7bbb      	ldrb	r3, [r7, #14]
 800d380:	2b80      	cmp	r3, #128	; 0x80
 800d382:	d00a      	beq.n	800d39a <USBD_StdEPReq+0x146>
 800d384:	7bbb      	ldrb	r3, [r7, #14]
 800d386:	4619      	mov	r1, r3
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f001 f93d 	bl	800e608 <USBD_LL_StallEP>
 800d38e:	2180      	movs	r1, #128	; 0x80
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f001 f939 	bl	800e608 <USBD_LL_StallEP>
 800d396:	bf00      	nop
 800d398:	e040      	b.n	800d41c <USBD_StdEPReq+0x1c8>
 800d39a:	6839      	ldr	r1, [r7, #0]
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 fc3e 	bl	800dc1e <USBD_CtlError>
 800d3a2:	e03b      	b.n	800d41c <USBD_StdEPReq+0x1c8>
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	885b      	ldrh	r3, [r3, #2]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d136      	bne.n	800d41a <USBD_StdEPReq+0x1c6>
 800d3ac:	7bbb      	ldrb	r3, [r7, #14]
 800d3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d004      	beq.n	800d3c0 <USBD_StdEPReq+0x16c>
 800d3b6:	7bbb      	ldrb	r3, [r7, #14]
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f001 f943 	bl	800e646 <USBD_LL_ClearStallEP>
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 fcf7 	bl	800ddb4 <USBD_CtlSendStatus>
 800d3c6:	7bbb      	ldrb	r3, [r7, #14]
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f7ff fde2 	bl	800cf94 <USBD_CoreFindEP>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	737b      	strb	r3, [r7, #13]
 800d3d4:	7b7b      	ldrb	r3, [r7, #13]
 800d3d6:	2bff      	cmp	r3, #255	; 0xff
 800d3d8:	d01f      	beq.n	800d41a <USBD_StdEPReq+0x1c6>
 800d3da:	7b7b      	ldrb	r3, [r7, #13]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d11c      	bne.n	800d41a <USBD_StdEPReq+0x1c6>
 800d3e0:	7b7a      	ldrb	r2, [r7, #13]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800d3e8:	7b7a      	ldrb	r2, [r7, #13]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	32ae      	adds	r2, #174	; 0xae
 800d3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d010      	beq.n	800d41a <USBD_StdEPReq+0x1c6>
 800d3f8:	7b7a      	ldrb	r2, [r7, #13]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	32ae      	adds	r2, #174	; 0xae
 800d3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d402:	689b      	ldr	r3, [r3, #8]
 800d404:	6839      	ldr	r1, [r7, #0]
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	4798      	blx	r3
 800d40a:	4603      	mov	r3, r0
 800d40c:	73fb      	strb	r3, [r7, #15]
 800d40e:	e004      	b.n	800d41a <USBD_StdEPReq+0x1c6>
 800d410:	6839      	ldr	r1, [r7, #0]
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 fc03 	bl	800dc1e <USBD_CtlError>
 800d418:	e000      	b.n	800d41c <USBD_StdEPReq+0x1c8>
 800d41a:	bf00      	nop
 800d41c:	e0ab      	b.n	800d576 <USBD_StdEPReq+0x322>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d424:	b2db      	uxtb	r3, r3
 800d426:	2b02      	cmp	r3, #2
 800d428:	d002      	beq.n	800d430 <USBD_StdEPReq+0x1dc>
 800d42a:	2b03      	cmp	r3, #3
 800d42c:	d032      	beq.n	800d494 <USBD_StdEPReq+0x240>
 800d42e:	e097      	b.n	800d560 <USBD_StdEPReq+0x30c>
 800d430:	7bbb      	ldrb	r3, [r7, #14]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d007      	beq.n	800d446 <USBD_StdEPReq+0x1f2>
 800d436:	7bbb      	ldrb	r3, [r7, #14]
 800d438:	2b80      	cmp	r3, #128	; 0x80
 800d43a:	d004      	beq.n	800d446 <USBD_StdEPReq+0x1f2>
 800d43c:	6839      	ldr	r1, [r7, #0]
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 fbed 	bl	800dc1e <USBD_CtlError>
 800d444:	e091      	b.n	800d56a <USBD_StdEPReq+0x316>
 800d446:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	da0b      	bge.n	800d466 <USBD_StdEPReq+0x212>
 800d44e:	7bbb      	ldrb	r3, [r7, #14]
 800d450:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d454:	4613      	mov	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	4413      	add	r3, r2
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	3310      	adds	r3, #16
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	4413      	add	r3, r2
 800d462:	3304      	adds	r3, #4
 800d464:	e00b      	b.n	800d47e <USBD_StdEPReq+0x22a>
 800d466:	7bbb      	ldrb	r3, [r7, #14]
 800d468:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d46c:	4613      	mov	r3, r2
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	4413      	add	r3, r2
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	4413      	add	r3, r2
 800d47c:	3304      	adds	r3, #4
 800d47e:	60bb      	str	r3, [r7, #8]
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	2200      	movs	r2, #0
 800d484:	601a      	str	r2, [r3, #0]
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	2202      	movs	r2, #2
 800d48a:	4619      	mov	r1, r3
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 fc37 	bl	800dd00 <USBD_CtlSendData>
 800d492:	e06a      	b.n	800d56a <USBD_StdEPReq+0x316>
 800d494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	da11      	bge.n	800d4c0 <USBD_StdEPReq+0x26c>
 800d49c:	7bbb      	ldrb	r3, [r7, #14]
 800d49e:	f003 020f 	and.w	r2, r3, #15
 800d4a2:	6879      	ldr	r1, [r7, #4]
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	4413      	add	r3, r2
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	440b      	add	r3, r1
 800d4ae:	3324      	adds	r3, #36	; 0x24
 800d4b0:	881b      	ldrh	r3, [r3, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d117      	bne.n	800d4e6 <USBD_StdEPReq+0x292>
 800d4b6:	6839      	ldr	r1, [r7, #0]
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 fbb0 	bl	800dc1e <USBD_CtlError>
 800d4be:	e054      	b.n	800d56a <USBD_StdEPReq+0x316>
 800d4c0:	7bbb      	ldrb	r3, [r7, #14]
 800d4c2:	f003 020f 	and.w	r2, r3, #15
 800d4c6:	6879      	ldr	r1, [r7, #4]
 800d4c8:	4613      	mov	r3, r2
 800d4ca:	009b      	lsls	r3, r3, #2
 800d4cc:	4413      	add	r3, r2
 800d4ce:	009b      	lsls	r3, r3, #2
 800d4d0:	440b      	add	r3, r1
 800d4d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d4d6:	881b      	ldrh	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d104      	bne.n	800d4e6 <USBD_StdEPReq+0x292>
 800d4dc:	6839      	ldr	r1, [r7, #0]
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 fb9d 	bl	800dc1e <USBD_CtlError>
 800d4e4:	e041      	b.n	800d56a <USBD_StdEPReq+0x316>
 800d4e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	da0b      	bge.n	800d506 <USBD_StdEPReq+0x2b2>
 800d4ee:	7bbb      	ldrb	r3, [r7, #14]
 800d4f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4f4:	4613      	mov	r3, r2
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	4413      	add	r3, r2
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	3310      	adds	r3, #16
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	4413      	add	r3, r2
 800d502:	3304      	adds	r3, #4
 800d504:	e00b      	b.n	800d51e <USBD_StdEPReq+0x2ca>
 800d506:	7bbb      	ldrb	r3, [r7, #14]
 800d508:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d50c:	4613      	mov	r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	4413      	add	r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	4413      	add	r3, r2
 800d51c:	3304      	adds	r3, #4
 800d51e:	60bb      	str	r3, [r7, #8]
 800d520:	7bbb      	ldrb	r3, [r7, #14]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d002      	beq.n	800d52c <USBD_StdEPReq+0x2d8>
 800d526:	7bbb      	ldrb	r3, [r7, #14]
 800d528:	2b80      	cmp	r3, #128	; 0x80
 800d52a:	d103      	bne.n	800d534 <USBD_StdEPReq+0x2e0>
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	2200      	movs	r2, #0
 800d530:	601a      	str	r2, [r3, #0]
 800d532:	e00e      	b.n	800d552 <USBD_StdEPReq+0x2fe>
 800d534:	7bbb      	ldrb	r3, [r7, #14]
 800d536:	4619      	mov	r1, r3
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f001 f8a3 	bl	800e684 <USBD_LL_IsStallEP>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	d003      	beq.n	800d54c <USBD_StdEPReq+0x2f8>
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	2201      	movs	r2, #1
 800d548:	601a      	str	r2, [r3, #0]
 800d54a:	e002      	b.n	800d552 <USBD_StdEPReq+0x2fe>
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	2200      	movs	r2, #0
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	2202      	movs	r2, #2
 800d556:	4619      	mov	r1, r3
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 fbd1 	bl	800dd00 <USBD_CtlSendData>
 800d55e:	e004      	b.n	800d56a <USBD_StdEPReq+0x316>
 800d560:	6839      	ldr	r1, [r7, #0]
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fb5b 	bl	800dc1e <USBD_CtlError>
 800d568:	bf00      	nop
 800d56a:	e004      	b.n	800d576 <USBD_StdEPReq+0x322>
 800d56c:	6839      	ldr	r1, [r7, #0]
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 fb55 	bl	800dc1e <USBD_CtlError>
 800d574:	bf00      	nop
 800d576:	e005      	b.n	800d584 <USBD_StdEPReq+0x330>
 800d578:	6839      	ldr	r1, [r7, #0]
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 fb4f 	bl	800dc1e <USBD_CtlError>
 800d580:	e000      	b.n	800d584 <USBD_StdEPReq+0x330>
 800d582:	bf00      	nop
 800d584:	7bfb      	ldrb	r3, [r7, #15]
 800d586:	4618      	mov	r0, r3
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
	...

0800d590 <USBD_GetDescriptor>:
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
 800d59a:	2300      	movs	r3, #0
 800d59c:	813b      	strh	r3, [r7, #8]
 800d59e:	2300      	movs	r3, #0
 800d5a0:	60fb      	str	r3, [r7, #12]
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	72fb      	strb	r3, [r7, #11]
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	885b      	ldrh	r3, [r3, #2]
 800d5aa:	0a1b      	lsrs	r3, r3, #8
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	3b01      	subs	r3, #1
 800d5b0:	2b06      	cmp	r3, #6
 800d5b2:	f200 8128 	bhi.w	800d806 <USBD_GetDescriptor+0x276>
 800d5b6:	a201      	add	r2, pc, #4	; (adr r2, 800d5bc <USBD_GetDescriptor+0x2c>)
 800d5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5bc:	0800d5d9 	.word	0x0800d5d9
 800d5c0:	0800d5f1 	.word	0x0800d5f1
 800d5c4:	0800d631 	.word	0x0800d631
 800d5c8:	0800d807 	.word	0x0800d807
 800d5cc:	0800d807 	.word	0x0800d807
 800d5d0:	0800d7a7 	.word	0x0800d7a7
 800d5d4:	0800d7d3 	.word	0x0800d7d3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	7c12      	ldrb	r2, [r2, #16]
 800d5e4:	f107 0108 	add.w	r1, r7, #8
 800d5e8:	4610      	mov	r0, r2
 800d5ea:	4798      	blx	r3
 800d5ec:	60f8      	str	r0, [r7, #12]
 800d5ee:	e112      	b.n	800d816 <USBD_GetDescriptor+0x286>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	7c1b      	ldrb	r3, [r3, #16]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d10d      	bne.n	800d614 <USBD_GetDescriptor+0x84>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d600:	f107 0208 	add.w	r2, r7, #8
 800d604:	4610      	mov	r0, r2
 800d606:	4798      	blx	r3
 800d608:	60f8      	str	r0, [r7, #12]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	3301      	adds	r3, #1
 800d60e:	2202      	movs	r2, #2
 800d610:	701a      	strb	r2, [r3, #0]
 800d612:	e100      	b.n	800d816 <USBD_GetDescriptor+0x286>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61c:	f107 0208 	add.w	r2, r7, #8
 800d620:	4610      	mov	r0, r2
 800d622:	4798      	blx	r3
 800d624:	60f8      	str	r0, [r7, #12]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	3301      	adds	r3, #1
 800d62a:	2202      	movs	r2, #2
 800d62c:	701a      	strb	r2, [r3, #0]
 800d62e:	e0f2      	b.n	800d816 <USBD_GetDescriptor+0x286>
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	885b      	ldrh	r3, [r3, #2]
 800d634:	b2db      	uxtb	r3, r3
 800d636:	2b05      	cmp	r3, #5
 800d638:	f200 80ac 	bhi.w	800d794 <USBD_GetDescriptor+0x204>
 800d63c:	a201      	add	r2, pc, #4	; (adr r2, 800d644 <USBD_GetDescriptor+0xb4>)
 800d63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d642:	bf00      	nop
 800d644:	0800d65d 	.word	0x0800d65d
 800d648:	0800d691 	.word	0x0800d691
 800d64c:	0800d6c5 	.word	0x0800d6c5
 800d650:	0800d6f9 	.word	0x0800d6f9
 800d654:	0800d72d 	.word	0x0800d72d
 800d658:	0800d761 	.word	0x0800d761
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00b      	beq.n	800d680 <USBD_GetDescriptor+0xf0>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	7c12      	ldrb	r2, [r2, #16]
 800d674:	f107 0108 	add.w	r1, r7, #8
 800d678:	4610      	mov	r0, r2
 800d67a:	4798      	blx	r3
 800d67c:	60f8      	str	r0, [r7, #12]
 800d67e:	e091      	b.n	800d7a4 <USBD_GetDescriptor+0x214>
 800d680:	6839      	ldr	r1, [r7, #0]
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 facb 	bl	800dc1e <USBD_CtlError>
 800d688:	7afb      	ldrb	r3, [r7, #11]
 800d68a:	3301      	adds	r3, #1
 800d68c:	72fb      	strb	r3, [r7, #11]
 800d68e:	e089      	b.n	800d7a4 <USBD_GetDescriptor+0x214>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d00b      	beq.n	800d6b4 <USBD_GetDescriptor+0x124>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	7c12      	ldrb	r2, [r2, #16]
 800d6a8:	f107 0108 	add.w	r1, r7, #8
 800d6ac:	4610      	mov	r0, r2
 800d6ae:	4798      	blx	r3
 800d6b0:	60f8      	str	r0, [r7, #12]
 800d6b2:	e077      	b.n	800d7a4 <USBD_GetDescriptor+0x214>
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 fab1 	bl	800dc1e <USBD_CtlError>
 800d6bc:	7afb      	ldrb	r3, [r7, #11]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	72fb      	strb	r3, [r7, #11]
 800d6c2:	e06f      	b.n	800d7a4 <USBD_GetDescriptor+0x214>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00b      	beq.n	800d6e8 <USBD_GetDescriptor+0x158>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	7c12      	ldrb	r2, [r2, #16]
 800d6dc:	f107 0108 	add.w	r1, r7, #8
 800d6e0:	4610      	mov	r0, r2
 800d6e2:	4798      	blx	r3
 800d6e4:	60f8      	str	r0, [r7, #12]
 800d6e6:	e05d      	b.n	800d7a4 <USBD_GetDescriptor+0x214>
 800d6e8:	6839      	ldr	r1, [r7, #0]
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 fa97 	bl	800dc1e <USBD_CtlError>
 800d6f0:	7afb      	ldrb	r3, [r7, #11]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	72fb      	strb	r3, [r7, #11]
 800d6f6:	e055      	b.n	800d7a4 <USBD_GetDescriptor+0x214>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6fe:	691b      	ldr	r3, [r3, #16]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d00b      	beq.n	800d71c <USBD_GetDescriptor+0x18c>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d70a:	691b      	ldr	r3, [r3, #16]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	7c12      	ldrb	r2, [r2, #16]
 800d710:	f107 0108 	add.w	r1, r7, #8
 800d714:	4610      	mov	r0, r2
 800d716:	4798      	blx	r3
 800d718:	60f8      	str	r0, [r7, #12]
 800d71a:	e043      	b.n	800d7a4 <USBD_GetDescriptor+0x214>
 800d71c:	6839      	ldr	r1, [r7, #0]
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 fa7d 	bl	800dc1e <USBD_CtlError>
 800d724:	7afb      	ldrb	r3, [r7, #11]
 800d726:	3301      	adds	r3, #1
 800d728:	72fb      	strb	r3, [r7, #11]
 800d72a:	e03b      	b.n	800d7a4 <USBD_GetDescriptor+0x214>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d732:	695b      	ldr	r3, [r3, #20]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d00b      	beq.n	800d750 <USBD_GetDescriptor+0x1c0>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d73e:	695b      	ldr	r3, [r3, #20]
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	7c12      	ldrb	r2, [r2, #16]
 800d744:	f107 0108 	add.w	r1, r7, #8
 800d748:	4610      	mov	r0, r2
 800d74a:	4798      	blx	r3
 800d74c:	60f8      	str	r0, [r7, #12]
 800d74e:	e029      	b.n	800d7a4 <USBD_GetDescriptor+0x214>
 800d750:	6839      	ldr	r1, [r7, #0]
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 fa63 	bl	800dc1e <USBD_CtlError>
 800d758:	7afb      	ldrb	r3, [r7, #11]
 800d75a:	3301      	adds	r3, #1
 800d75c:	72fb      	strb	r3, [r7, #11]
 800d75e:	e021      	b.n	800d7a4 <USBD_GetDescriptor+0x214>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d766:	699b      	ldr	r3, [r3, #24]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d00b      	beq.n	800d784 <USBD_GetDescriptor+0x1f4>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d772:	699b      	ldr	r3, [r3, #24]
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	7c12      	ldrb	r2, [r2, #16]
 800d778:	f107 0108 	add.w	r1, r7, #8
 800d77c:	4610      	mov	r0, r2
 800d77e:	4798      	blx	r3
 800d780:	60f8      	str	r0, [r7, #12]
 800d782:	e00f      	b.n	800d7a4 <USBD_GetDescriptor+0x214>
 800d784:	6839      	ldr	r1, [r7, #0]
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 fa49 	bl	800dc1e <USBD_CtlError>
 800d78c:	7afb      	ldrb	r3, [r7, #11]
 800d78e:	3301      	adds	r3, #1
 800d790:	72fb      	strb	r3, [r7, #11]
 800d792:	e007      	b.n	800d7a4 <USBD_GetDescriptor+0x214>
 800d794:	6839      	ldr	r1, [r7, #0]
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 fa41 	bl	800dc1e <USBD_CtlError>
 800d79c:	7afb      	ldrb	r3, [r7, #11]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	72fb      	strb	r3, [r7, #11]
 800d7a2:	bf00      	nop
 800d7a4:	e037      	b.n	800d816 <USBD_GetDescriptor+0x286>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	7c1b      	ldrb	r3, [r3, #16]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d109      	bne.n	800d7c2 <USBD_GetDescriptor+0x232>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7b6:	f107 0208 	add.w	r2, r7, #8
 800d7ba:	4610      	mov	r0, r2
 800d7bc:	4798      	blx	r3
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	e029      	b.n	800d816 <USBD_GetDescriptor+0x286>
 800d7c2:	6839      	ldr	r1, [r7, #0]
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 fa2a 	bl	800dc1e <USBD_CtlError>
 800d7ca:	7afb      	ldrb	r3, [r7, #11]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	72fb      	strb	r3, [r7, #11]
 800d7d0:	e021      	b.n	800d816 <USBD_GetDescriptor+0x286>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	7c1b      	ldrb	r3, [r3, #16]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d10d      	bne.n	800d7f6 <USBD_GetDescriptor+0x266>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7e2:	f107 0208 	add.w	r2, r7, #8
 800d7e6:	4610      	mov	r0, r2
 800d7e8:	4798      	blx	r3
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	2207      	movs	r2, #7
 800d7f2:	701a      	strb	r2, [r3, #0]
 800d7f4:	e00f      	b.n	800d816 <USBD_GetDescriptor+0x286>
 800d7f6:	6839      	ldr	r1, [r7, #0]
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 fa10 	bl	800dc1e <USBD_CtlError>
 800d7fe:	7afb      	ldrb	r3, [r7, #11]
 800d800:	3301      	adds	r3, #1
 800d802:	72fb      	strb	r3, [r7, #11]
 800d804:	e007      	b.n	800d816 <USBD_GetDescriptor+0x286>
 800d806:	6839      	ldr	r1, [r7, #0]
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 fa08 	bl	800dc1e <USBD_CtlError>
 800d80e:	7afb      	ldrb	r3, [r7, #11]
 800d810:	3301      	adds	r3, #1
 800d812:	72fb      	strb	r3, [r7, #11]
 800d814:	bf00      	nop
 800d816:	7afb      	ldrb	r3, [r7, #11]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d11e      	bne.n	800d85a <USBD_GetDescriptor+0x2ca>
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	88db      	ldrh	r3, [r3, #6]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d016      	beq.n	800d852 <USBD_GetDescriptor+0x2c2>
 800d824:	893b      	ldrh	r3, [r7, #8]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d00e      	beq.n	800d848 <USBD_GetDescriptor+0x2b8>
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	88da      	ldrh	r2, [r3, #6]
 800d82e:	893b      	ldrh	r3, [r7, #8]
 800d830:	4293      	cmp	r3, r2
 800d832:	bf28      	it	cs
 800d834:	4613      	movcs	r3, r2
 800d836:	b29b      	uxth	r3, r3
 800d838:	813b      	strh	r3, [r7, #8]
 800d83a:	893b      	ldrh	r3, [r7, #8]
 800d83c:	461a      	mov	r2, r3
 800d83e:	68f9      	ldr	r1, [r7, #12]
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f000 fa5d 	bl	800dd00 <USBD_CtlSendData>
 800d846:	e009      	b.n	800d85c <USBD_GetDescriptor+0x2cc>
 800d848:	6839      	ldr	r1, [r7, #0]
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 f9e7 	bl	800dc1e <USBD_CtlError>
 800d850:	e004      	b.n	800d85c <USBD_GetDescriptor+0x2cc>
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 faae 	bl	800ddb4 <USBD_CtlSendStatus>
 800d858:	e000      	b.n	800d85c <USBD_GetDescriptor+0x2cc>
 800d85a:	bf00      	nop
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop

0800d864 <USBD_SetAddress>:
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	889b      	ldrh	r3, [r3, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d131      	bne.n	800d8da <USBD_SetAddress+0x76>
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	88db      	ldrh	r3, [r3, #6]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d12d      	bne.n	800d8da <USBD_SetAddress+0x76>
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	885b      	ldrh	r3, [r3, #2]
 800d882:	2b7f      	cmp	r3, #127	; 0x7f
 800d884:	d829      	bhi.n	800d8da <USBD_SetAddress+0x76>
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	885b      	ldrh	r3, [r3, #2]
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d890:	73fb      	strb	r3, [r7, #15]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	2b03      	cmp	r3, #3
 800d89c:	d104      	bne.n	800d8a8 <USBD_SetAddress+0x44>
 800d89e:	6839      	ldr	r1, [r7, #0]
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 f9bc 	bl	800dc1e <USBD_CtlError>
 800d8a6:	e01d      	b.n	800d8e4 <USBD_SetAddress+0x80>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	7bfa      	ldrb	r2, [r7, #15]
 800d8ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 800d8b0:	7bfb      	ldrb	r3, [r7, #15]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 ff11 	bl	800e6dc <USBD_LL_SetUSBAddress>
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 fa7a 	bl	800ddb4 <USBD_CtlSendStatus>
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d004      	beq.n	800d8d0 <USBD_SetAddress+0x6c>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2202      	movs	r2, #2
 800d8ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800d8ce:	e009      	b.n	800d8e4 <USBD_SetAddress+0x80>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800d8d8:	e004      	b.n	800d8e4 <USBD_SetAddress+0x80>
 800d8da:	6839      	ldr	r1, [r7, #0]
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 f99e 	bl	800dc1e <USBD_CtlError>
 800d8e2:	bf00      	nop
 800d8e4:	bf00      	nop
 800d8e6:	3710      	adds	r7, #16
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <USBD_SetConfig>:
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	73fb      	strb	r3, [r7, #15]
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	885b      	ldrh	r3, [r3, #2]
 800d8fe:	b2da      	uxtb	r2, r3
 800d900:	4b4e      	ldr	r3, [pc, #312]	; (800da3c <USBD_SetConfig+0x150>)
 800d902:	701a      	strb	r2, [r3, #0]
 800d904:	4b4d      	ldr	r3, [pc, #308]	; (800da3c <USBD_SetConfig+0x150>)
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d905      	bls.n	800d918 <USBD_SetConfig+0x2c>
 800d90c:	6839      	ldr	r1, [r7, #0]
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 f985 	bl	800dc1e <USBD_CtlError>
 800d914:	2303      	movs	r3, #3
 800d916:	e08c      	b.n	800da32 <USBD_SetConfig+0x146>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	2b02      	cmp	r3, #2
 800d922:	d002      	beq.n	800d92a <USBD_SetConfig+0x3e>
 800d924:	2b03      	cmp	r3, #3
 800d926:	d029      	beq.n	800d97c <USBD_SetConfig+0x90>
 800d928:	e075      	b.n	800da16 <USBD_SetConfig+0x12a>
 800d92a:	4b44      	ldr	r3, [pc, #272]	; (800da3c <USBD_SetConfig+0x150>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d020      	beq.n	800d974 <USBD_SetConfig+0x88>
 800d932:	4b42      	ldr	r3, [pc, #264]	; (800da3c <USBD_SetConfig+0x150>)
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	461a      	mov	r2, r3
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	605a      	str	r2, [r3, #4]
 800d93c:	4b3f      	ldr	r3, [pc, #252]	; (800da3c <USBD_SetConfig+0x150>)
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	4619      	mov	r1, r3
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f7fe ffe7 	bl	800c916 <USBD_SetClassConfig>
 800d948:	4603      	mov	r3, r0
 800d94a:	73fb      	strb	r3, [r7, #15]
 800d94c:	7bfb      	ldrb	r3, [r7, #15]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d008      	beq.n	800d964 <USBD_SetConfig+0x78>
 800d952:	6839      	ldr	r1, [r7, #0]
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 f962 	bl	800dc1e <USBD_CtlError>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2202      	movs	r2, #2
 800d95e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800d962:	e065      	b.n	800da30 <USBD_SetConfig+0x144>
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f000 fa25 	bl	800ddb4 <USBD_CtlSendStatus>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2203      	movs	r2, #3
 800d96e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800d972:	e05d      	b.n	800da30 <USBD_SetConfig+0x144>
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 fa1d 	bl	800ddb4 <USBD_CtlSendStatus>
 800d97a:	e059      	b.n	800da30 <USBD_SetConfig+0x144>
 800d97c:	4b2f      	ldr	r3, [pc, #188]	; (800da3c <USBD_SetConfig+0x150>)
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d112      	bne.n	800d9aa <USBD_SetConfig+0xbe>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2202      	movs	r2, #2
 800d988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800d98c:	4b2b      	ldr	r3, [pc, #172]	; (800da3c <USBD_SetConfig+0x150>)
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	461a      	mov	r2, r3
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	605a      	str	r2, [r3, #4]
 800d996:	4b29      	ldr	r3, [pc, #164]	; (800da3c <USBD_SetConfig+0x150>)
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	4619      	mov	r1, r3
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7fe ffd6 	bl	800c94e <USBD_ClrClassConfig>
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 fa06 	bl	800ddb4 <USBD_CtlSendStatus>
 800d9a8:	e042      	b.n	800da30 <USBD_SetConfig+0x144>
 800d9aa:	4b24      	ldr	r3, [pc, #144]	; (800da3c <USBD_SetConfig+0x150>)
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d02a      	beq.n	800da0e <USBD_SetConfig+0x122>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	4619      	mov	r1, r3
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7fe ffc4 	bl	800c94e <USBD_ClrClassConfig>
 800d9c6:	4b1d      	ldr	r3, [pc, #116]	; (800da3c <USBD_SetConfig+0x150>)
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	605a      	str	r2, [r3, #4]
 800d9d0:	4b1a      	ldr	r3, [pc, #104]	; (800da3c <USBD_SetConfig+0x150>)
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f7fe ff9d 	bl	800c916 <USBD_SetClassConfig>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	73fb      	strb	r3, [r7, #15]
 800d9e0:	7bfb      	ldrb	r3, [r7, #15]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d00f      	beq.n	800da06 <USBD_SetConfig+0x11a>
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 f918 	bl	800dc1e <USBD_CtlError>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f7fe ffa9 	bl	800c94e <USBD_ClrClassConfig>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2202      	movs	r2, #2
 800da00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800da04:	e014      	b.n	800da30 <USBD_SetConfig+0x144>
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 f9d4 	bl	800ddb4 <USBD_CtlSendStatus>
 800da0c:	e010      	b.n	800da30 <USBD_SetConfig+0x144>
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f000 f9d0 	bl	800ddb4 <USBD_CtlSendStatus>
 800da14:	e00c      	b.n	800da30 <USBD_SetConfig+0x144>
 800da16:	6839      	ldr	r1, [r7, #0]
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 f900 	bl	800dc1e <USBD_CtlError>
 800da1e:	4b07      	ldr	r3, [pc, #28]	; (800da3c <USBD_SetConfig+0x150>)
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	4619      	mov	r1, r3
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f7fe ff92 	bl	800c94e <USBD_ClrClassConfig>
 800da2a:	2303      	movs	r3, #3
 800da2c:	73fb      	strb	r3, [r7, #15]
 800da2e:	bf00      	nop
 800da30:	7bfb      	ldrb	r3, [r7, #15]
 800da32:	4618      	mov	r0, r3
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	20001d64 	.word	0x20001d64

0800da40 <USBD_GetConfig>:
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	88db      	ldrh	r3, [r3, #6]
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d004      	beq.n	800da5c <USBD_GetConfig+0x1c>
 800da52:	6839      	ldr	r1, [r7, #0]
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f000 f8e2 	bl	800dc1e <USBD_CtlError>
 800da5a:	e023      	b.n	800daa4 <USBD_GetConfig+0x64>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da62:	b2db      	uxtb	r3, r3
 800da64:	2b02      	cmp	r3, #2
 800da66:	dc02      	bgt.n	800da6e <USBD_GetConfig+0x2e>
 800da68:	2b00      	cmp	r3, #0
 800da6a:	dc03      	bgt.n	800da74 <USBD_GetConfig+0x34>
 800da6c:	e015      	b.n	800da9a <USBD_GetConfig+0x5a>
 800da6e:	2b03      	cmp	r3, #3
 800da70:	d00b      	beq.n	800da8a <USBD_GetConfig+0x4a>
 800da72:	e012      	b.n	800da9a <USBD_GetConfig+0x5a>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2200      	movs	r2, #0
 800da78:	609a      	str	r2, [r3, #8]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	3308      	adds	r3, #8
 800da7e:	2201      	movs	r2, #1
 800da80:	4619      	mov	r1, r3
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f93c 	bl	800dd00 <USBD_CtlSendData>
 800da88:	e00c      	b.n	800daa4 <USBD_GetConfig+0x64>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	3304      	adds	r3, #4
 800da8e:	2201      	movs	r2, #1
 800da90:	4619      	mov	r1, r3
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 f934 	bl	800dd00 <USBD_CtlSendData>
 800da98:	e004      	b.n	800daa4 <USBD_GetConfig+0x64>
 800da9a:	6839      	ldr	r1, [r7, #0]
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 f8be 	bl	800dc1e <USBD_CtlError>
 800daa2:	bf00      	nop
 800daa4:	bf00      	nop
 800daa6:	3708      	adds	r7, #8
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <USBD_GetStatus>:
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	3b01      	subs	r3, #1
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	d81e      	bhi.n	800db02 <USBD_GetStatus+0x56>
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	88db      	ldrh	r3, [r3, #6]
 800dac8:	2b02      	cmp	r3, #2
 800daca:	d004      	beq.n	800dad6 <USBD_GetStatus+0x2a>
 800dacc:	6839      	ldr	r1, [r7, #0]
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 f8a5 	bl	800dc1e <USBD_CtlError>
 800dad4:	e01a      	b.n	800db0c <USBD_GetStatus+0x60>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2201      	movs	r2, #1
 800dada:	60da      	str	r2, [r3, #12]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d005      	beq.n	800daf2 <USBD_GetStatus+0x46>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	f043 0202 	orr.w	r2, r3, #2
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	60da      	str	r2, [r3, #12]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	330c      	adds	r3, #12
 800daf6:	2202      	movs	r2, #2
 800daf8:	4619      	mov	r1, r3
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f900 	bl	800dd00 <USBD_CtlSendData>
 800db00:	e004      	b.n	800db0c <USBD_GetStatus+0x60>
 800db02:	6839      	ldr	r1, [r7, #0]
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 f88a 	bl	800dc1e <USBD_CtlError>
 800db0a:	bf00      	nop
 800db0c:	bf00      	nop
 800db0e:	3708      	adds	r7, #8
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}

0800db14 <USBD_SetFeature>:
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	885b      	ldrh	r3, [r3, #2]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d107      	bne.n	800db36 <USBD_SetFeature+0x22>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2201      	movs	r2, #1
 800db2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 f940 	bl	800ddb4 <USBD_CtlSendStatus>
 800db34:	e013      	b.n	800db5e <USBD_SetFeature+0x4a>
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	885b      	ldrh	r3, [r3, #2]
 800db3a:	2b02      	cmp	r3, #2
 800db3c:	d10b      	bne.n	800db56 <USBD_SetFeature+0x42>
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	889b      	ldrh	r3, [r3, #4]
 800db42:	0a1b      	lsrs	r3, r3, #8
 800db44:	b29b      	uxth	r3, r3
 800db46:	b2da      	uxtb	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 f930 	bl	800ddb4 <USBD_CtlSendStatus>
 800db54:	e003      	b.n	800db5e <USBD_SetFeature+0x4a>
 800db56:	6839      	ldr	r1, [r7, #0]
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f000 f860 	bl	800dc1e <USBD_CtlError>
 800db5e:	bf00      	nop
 800db60:	3708      	adds	r7, #8
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <USBD_ClrFeature>:
 800db66:	b580      	push	{r7, lr}
 800db68:	b082      	sub	sp, #8
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
 800db6e:	6039      	str	r1, [r7, #0]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db76:	b2db      	uxtb	r3, r3
 800db78:	3b01      	subs	r3, #1
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	d80b      	bhi.n	800db96 <USBD_ClrFeature+0x30>
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	885b      	ldrh	r3, [r3, #2]
 800db82:	2b01      	cmp	r3, #1
 800db84:	d10c      	bne.n	800dba0 <USBD_ClrFeature+0x3a>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2200      	movs	r2, #0
 800db8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 f910 	bl	800ddb4 <USBD_CtlSendStatus>
 800db94:	e004      	b.n	800dba0 <USBD_ClrFeature+0x3a>
 800db96:	6839      	ldr	r1, [r7, #0]
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 f840 	bl	800dc1e <USBD_CtlError>
 800db9e:	e000      	b.n	800dba2 <USBD_ClrFeature+0x3c>
 800dba0:	bf00      	nop
 800dba2:	bf00      	nop
 800dba4:	3708      	adds	r7, #8
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <USBD_ParseSetupRequest>:
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b084      	sub	sp, #16
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
 800dbb2:	6039      	str	r1, [r7, #0]
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	60fb      	str	r3, [r7, #12]
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	781a      	ldrb	r2, [r3, #0]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	701a      	strb	r2, [r3, #0]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	60fb      	str	r3, [r7, #12]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	781a      	ldrb	r2, [r3, #0]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	705a      	strb	r2, [r3, #1]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	60fb      	str	r3, [r7, #12]
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f7ff fa41 	bl	800d05c <SWAPBYTE>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	461a      	mov	r2, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	805a      	strh	r2, [r3, #2]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	60fb      	str	r3, [r7, #12]
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	3301      	adds	r3, #1
 800dbec:	60fb      	str	r3, [r7, #12]
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f7ff fa34 	bl	800d05c <SWAPBYTE>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	809a      	strh	r2, [r3, #4]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	3301      	adds	r3, #1
 800dc00:	60fb      	str	r3, [r7, #12]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	3301      	adds	r3, #1
 800dc06:	60fb      	str	r3, [r7, #12]
 800dc08:	68f8      	ldr	r0, [r7, #12]
 800dc0a:	f7ff fa27 	bl	800d05c <SWAPBYTE>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	461a      	mov	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	80da      	strh	r2, [r3, #6]
 800dc16:	bf00      	nop
 800dc18:	3710      	adds	r7, #16
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}

0800dc1e <USBD_CtlError>:
 800dc1e:	b580      	push	{r7, lr}
 800dc20:	b082      	sub	sp, #8
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
 800dc26:	6039      	str	r1, [r7, #0]
 800dc28:	2180      	movs	r1, #128	; 0x80
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 fcec 	bl	800e608 <USBD_LL_StallEP>
 800dc30:	2100      	movs	r1, #0
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 fce8 	bl	800e608 <USBD_LL_StallEP>
 800dc38:	bf00      	nop
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <USBD_GetString>:
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b086      	sub	sp, #24
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	607a      	str	r2, [r7, #4]
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	75fb      	strb	r3, [r7, #23]
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d036      	beq.n	800dcc4 <USBD_GetString+0x84>
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	613b      	str	r3, [r7, #16]
 800dc5a:	6938      	ldr	r0, [r7, #16]
 800dc5c:	f000 f836 	bl	800dccc <USBD_GetLen>
 800dc60:	4603      	mov	r3, r0
 800dc62:	3301      	adds	r3, #1
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	005b      	lsls	r3, r3, #1
 800dc68:	b29a      	uxth	r2, r3
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	801a      	strh	r2, [r3, #0]
 800dc6e:	7dfb      	ldrb	r3, [r7, #23]
 800dc70:	68ba      	ldr	r2, [r7, #8]
 800dc72:	4413      	add	r3, r2
 800dc74:	687a      	ldr	r2, [r7, #4]
 800dc76:	7812      	ldrb	r2, [r2, #0]
 800dc78:	701a      	strb	r2, [r3, #0]
 800dc7a:	7dfb      	ldrb	r3, [r7, #23]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	75fb      	strb	r3, [r7, #23]
 800dc80:	7dfb      	ldrb	r3, [r7, #23]
 800dc82:	68ba      	ldr	r2, [r7, #8]
 800dc84:	4413      	add	r3, r2
 800dc86:	2203      	movs	r2, #3
 800dc88:	701a      	strb	r2, [r3, #0]
 800dc8a:	7dfb      	ldrb	r3, [r7, #23]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	75fb      	strb	r3, [r7, #23]
 800dc90:	e013      	b.n	800dcba <USBD_GetString+0x7a>
 800dc92:	7dfb      	ldrb	r3, [r7, #23]
 800dc94:	68ba      	ldr	r2, [r7, #8]
 800dc96:	4413      	add	r3, r2
 800dc98:	693a      	ldr	r2, [r7, #16]
 800dc9a:	7812      	ldrb	r2, [r2, #0]
 800dc9c:	701a      	strb	r2, [r3, #0]
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	3301      	adds	r3, #1
 800dca2:	613b      	str	r3, [r7, #16]
 800dca4:	7dfb      	ldrb	r3, [r7, #23]
 800dca6:	3301      	adds	r3, #1
 800dca8:	75fb      	strb	r3, [r7, #23]
 800dcaa:	7dfb      	ldrb	r3, [r7, #23]
 800dcac:	68ba      	ldr	r2, [r7, #8]
 800dcae:	4413      	add	r3, r2
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	701a      	strb	r2, [r3, #0]
 800dcb4:	7dfb      	ldrb	r3, [r7, #23]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	75fb      	strb	r3, [r7, #23]
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1e7      	bne.n	800dc92 <USBD_GetString+0x52>
 800dcc2:	e000      	b.n	800dcc6 <USBD_GetString+0x86>
 800dcc4:	bf00      	nop
 800dcc6:	3718      	adds	r7, #24
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <USBD_GetLen>:
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	73fb      	strb	r3, [r7, #15]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	60bb      	str	r3, [r7, #8]
 800dcdc:	e005      	b.n	800dcea <USBD_GetLen+0x1e>
 800dcde:	7bfb      	ldrb	r3, [r7, #15]
 800dce0:	3301      	adds	r3, #1
 800dce2:	73fb      	strb	r3, [r7, #15]
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	3301      	adds	r3, #1
 800dce8:	60bb      	str	r3, [r7, #8]
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1f5      	bne.n	800dcde <USBD_GetLen+0x12>
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3714      	adds	r7, #20
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <USBD_CtlSendData>:
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2202      	movs	r2, #2
 800dd10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	619a      	str	r2, [r3, #24]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	61da      	str	r2, [r3, #28]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	68ba      	ldr	r2, [r7, #8]
 800dd24:	2100      	movs	r1, #0
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	f000 fcf7 	bl	800e71a <USBD_LL_Transmit>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <USBD_CtlContinueSendData>:
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b084      	sub	sp, #16
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	60f8      	str	r0, [r7, #12]
 800dd3e:	60b9      	str	r1, [r7, #8]
 800dd40:	607a      	str	r2, [r7, #4]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	2100      	movs	r1, #0
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f000 fce6 	bl	800e71a <USBD_LL_Transmit>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	4618      	mov	r0, r3
 800dd52:	3710      	adds	r7, #16
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <USBD_CtlPrepareRx>:
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2203      	movs	r2, #3
 800dd68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	68ba      	ldr	r2, [r7, #8]
 800dd80:	2100      	movs	r1, #0
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	f000 fcea 	bl	800e75c <USBD_LL_PrepareReceive>
 800dd88:	2300      	movs	r3, #0
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <USBD_CtlContinueRx>:
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b084      	sub	sp, #16
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	60f8      	str	r0, [r7, #12]
 800dd9a:	60b9      	str	r1, [r7, #8]
 800dd9c:	607a      	str	r2, [r7, #4]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	2100      	movs	r1, #0
 800dda4:	68f8      	ldr	r0, [r7, #12]
 800dda6:	f000 fcd9 	bl	800e75c <USBD_LL_PrepareReceive>
 800ddaa:	2300      	movs	r3, #0
 800ddac:	4618      	mov	r0, r3
 800ddae:	3710      	adds	r7, #16
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <USBD_CtlSendStatus>:
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2204      	movs	r2, #4
 800ddc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	2100      	movs	r1, #0
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 fca5 	bl	800e71a <USBD_LL_Transmit>
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <USBD_CtlReceiveStatus>:
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b082      	sub	sp, #8
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2205      	movs	r2, #5
 800dde6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800ddea:	2300      	movs	r3, #0
 800ddec:	2200      	movs	r2, #0
 800ddee:	2100      	movs	r1, #0
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 fcb3 	bl	800e75c <USBD_LL_PrepareReceive>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3708      	adds	r7, #8
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <MX_USB_DEVICE_Init>:
 800de00:	b580      	push	{r7, lr}
 800de02:	af00      	add	r7, sp, #0
 800de04:	2200      	movs	r2, #0
 800de06:	4912      	ldr	r1, [pc, #72]	; (800de50 <MX_USB_DEVICE_Init+0x50>)
 800de08:	4812      	ldr	r0, [pc, #72]	; (800de54 <MX_USB_DEVICE_Init+0x54>)
 800de0a:	f7fe fd07 	bl	800c81c <USBD_Init>
 800de0e:	4603      	mov	r3, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d001      	beq.n	800de18 <MX_USB_DEVICE_Init+0x18>
 800de14:	f7f5 fea6 	bl	8003b64 <Error_Handler>
 800de18:	490f      	ldr	r1, [pc, #60]	; (800de58 <MX_USB_DEVICE_Init+0x58>)
 800de1a:	480e      	ldr	r0, [pc, #56]	; (800de54 <MX_USB_DEVICE_Init+0x54>)
 800de1c:	f7fe fd2e 	bl	800c87c <USBD_RegisterClass>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d001      	beq.n	800de2a <MX_USB_DEVICE_Init+0x2a>
 800de26:	f7f5 fe9d 	bl	8003b64 <Error_Handler>
 800de2a:	490c      	ldr	r1, [pc, #48]	; (800de5c <MX_USB_DEVICE_Init+0x5c>)
 800de2c:	4809      	ldr	r0, [pc, #36]	; (800de54 <MX_USB_DEVICE_Init+0x54>)
 800de2e:	f7fe fc1f 	bl	800c670 <USBD_CDC_RegisterInterface>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d001      	beq.n	800de3c <MX_USB_DEVICE_Init+0x3c>
 800de38:	f7f5 fe94 	bl	8003b64 <Error_Handler>
 800de3c:	4805      	ldr	r0, [pc, #20]	; (800de54 <MX_USB_DEVICE_Init+0x54>)
 800de3e:	f7fe fd53 	bl	800c8e8 <USBD_Start>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <MX_USB_DEVICE_Init+0x4c>
 800de48:	f7f5 fe8c 	bl	8003b64 <Error_Handler>
 800de4c:	bf00      	nop
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	200000c0 	.word	0x200000c0
 800de54:	20001d68 	.word	0x20001d68
 800de58:	2000002c 	.word	0x2000002c
 800de5c:	200000ac 	.word	0x200000ac

0800de60 <CDC_Init_FS>:
 800de60:	b580      	push	{r7, lr}
 800de62:	af00      	add	r7, sp, #0
 800de64:	2200      	movs	r2, #0
 800de66:	4905      	ldr	r1, [pc, #20]	; (800de7c <CDC_Init_FS+0x1c>)
 800de68:	4805      	ldr	r0, [pc, #20]	; (800de80 <CDC_Init_FS+0x20>)
 800de6a:	f7fe fc1b 	bl	800c6a4 <USBD_CDC_SetTxBuffer>
 800de6e:	4905      	ldr	r1, [pc, #20]	; (800de84 <CDC_Init_FS+0x24>)
 800de70:	4803      	ldr	r0, [pc, #12]	; (800de80 <CDC_Init_FS+0x20>)
 800de72:	f7fe fc39 	bl	800c6e8 <USBD_CDC_SetRxBuffer>
 800de76:	2300      	movs	r3, #0
 800de78:	4618      	mov	r0, r3
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	2000242c 	.word	0x2000242c
 800de80:	20001d68 	.word	0x20001d68
 800de84:	20002044 	.word	0x20002044

0800de88 <CDC_DeInit_FS>:
 800de88:	b480      	push	{r7}
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	2300      	movs	r3, #0
 800de8e:	4618      	mov	r0, r3
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <CDC_Control_FS>:
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	4603      	mov	r3, r0
 800dea0:	6039      	str	r1, [r7, #0]
 800dea2:	71fb      	strb	r3, [r7, #7]
 800dea4:	4613      	mov	r3, r2
 800dea6:	80bb      	strh	r3, [r7, #4]
 800dea8:	79fb      	ldrb	r3, [r7, #7]
 800deaa:	2b23      	cmp	r3, #35	; 0x23
 800deac:	d84a      	bhi.n	800df44 <CDC_Control_FS+0xac>
 800deae:	a201      	add	r2, pc, #4	; (adr r2, 800deb4 <CDC_Control_FS+0x1c>)
 800deb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb4:	0800df45 	.word	0x0800df45
 800deb8:	0800df45 	.word	0x0800df45
 800debc:	0800df45 	.word	0x0800df45
 800dec0:	0800df45 	.word	0x0800df45
 800dec4:	0800df45 	.word	0x0800df45
 800dec8:	0800df45 	.word	0x0800df45
 800decc:	0800df45 	.word	0x0800df45
 800ded0:	0800df45 	.word	0x0800df45
 800ded4:	0800df45 	.word	0x0800df45
 800ded8:	0800df45 	.word	0x0800df45
 800dedc:	0800df45 	.word	0x0800df45
 800dee0:	0800df45 	.word	0x0800df45
 800dee4:	0800df45 	.word	0x0800df45
 800dee8:	0800df45 	.word	0x0800df45
 800deec:	0800df45 	.word	0x0800df45
 800def0:	0800df45 	.word	0x0800df45
 800def4:	0800df45 	.word	0x0800df45
 800def8:	0800df45 	.word	0x0800df45
 800defc:	0800df45 	.word	0x0800df45
 800df00:	0800df45 	.word	0x0800df45
 800df04:	0800df45 	.word	0x0800df45
 800df08:	0800df45 	.word	0x0800df45
 800df0c:	0800df45 	.word	0x0800df45
 800df10:	0800df45 	.word	0x0800df45
 800df14:	0800df45 	.word	0x0800df45
 800df18:	0800df45 	.word	0x0800df45
 800df1c:	0800df45 	.word	0x0800df45
 800df20:	0800df45 	.word	0x0800df45
 800df24:	0800df45 	.word	0x0800df45
 800df28:	0800df45 	.word	0x0800df45
 800df2c:	0800df45 	.word	0x0800df45
 800df30:	0800df45 	.word	0x0800df45
 800df34:	0800df45 	.word	0x0800df45
 800df38:	0800df45 	.word	0x0800df45
 800df3c:	0800df45 	.word	0x0800df45
 800df40:	0800df45 	.word	0x0800df45
 800df44:	bf00      	nop
 800df46:	2300      	movs	r3, #0
 800df48:	4618      	mov	r0, r3
 800df4a:	370c      	adds	r7, #12
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr

0800df54 <CDC_Receive_FS>:
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	b2db      	uxtb	r3, r3
 800df64:	81fb      	strh	r3, [r7, #14]
 800df66:	89fb      	ldrh	r3, [r7, #14]
 800df68:	461a      	mov	r2, r3
 800df6a:	6879      	ldr	r1, [r7, #4]
 800df6c:	4807      	ldr	r0, [pc, #28]	; (800df8c <CDC_Receive_FS+0x38>)
 800df6e:	f7f5 fff3 	bl	8003f58 <StringFIFOAdd>
 800df72:	6879      	ldr	r1, [r7, #4]
 800df74:	4806      	ldr	r0, [pc, #24]	; (800df90 <CDC_Receive_FS+0x3c>)
 800df76:	f7fe fbb7 	bl	800c6e8 <USBD_CDC_SetRxBuffer>
 800df7a:	4805      	ldr	r0, [pc, #20]	; (800df90 <CDC_Receive_FS+0x3c>)
 800df7c:	f7fe fc18 	bl	800c7b0 <USBD_CDC_ReceivePacket>
 800df80:	2300      	movs	r3, #0
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	20001c60 	.word	0x20001c60
 800df90:	20001d68 	.word	0x20001d68

0800df94 <CDC_Transmit_FS>:
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	460b      	mov	r3, r1
 800df9e:	807b      	strh	r3, [r7, #2]
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	73fb      	strb	r3, [r7, #15]
 800dfa4:	4b0d      	ldr	r3, [pc, #52]	; (800dfdc <CDC_Transmit_FS+0x48>)
 800dfa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfaa:	60bb      	str	r3, [r7, #8]
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <CDC_Transmit_FS+0x26>
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	e00b      	b.n	800dfd2 <CDC_Transmit_FS+0x3e>
 800dfba:	887b      	ldrh	r3, [r7, #2]
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	6879      	ldr	r1, [r7, #4]
 800dfc0:	4806      	ldr	r0, [pc, #24]	; (800dfdc <CDC_Transmit_FS+0x48>)
 800dfc2:	f7fe fb6f 	bl	800c6a4 <USBD_CDC_SetTxBuffer>
 800dfc6:	4805      	ldr	r0, [pc, #20]	; (800dfdc <CDC_Transmit_FS+0x48>)
 800dfc8:	f7fe fbac 	bl	800c724 <USBD_CDC_TransmitPacket>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	73fb      	strb	r3, [r7, #15]
 800dfd0:	7bfb      	ldrb	r3, [r7, #15]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3710      	adds	r7, #16
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	20001d68 	.word	0x20001d68

0800dfe0 <CDC_TransmitCplt_FS>:
 800dfe0:	b480      	push	{r7}
 800dfe2:	b087      	sub	sp, #28
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	4613      	mov	r3, r2
 800dfec:	71fb      	strb	r3, [r7, #7]
 800dfee:	2300      	movs	r3, #0
 800dff0:	75fb      	strb	r3, [r7, #23]
 800dff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dff6:	4618      	mov	r0, r3
 800dff8:	371c      	adds	r7, #28
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr
	...

0800e004 <USBD_FS_DeviceDescriptor>:
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	4603      	mov	r3, r0
 800e00c:	6039      	str	r1, [r7, #0]
 800e00e:	71fb      	strb	r3, [r7, #7]
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	2212      	movs	r2, #18
 800e014:	801a      	strh	r2, [r3, #0]
 800e016:	4b03      	ldr	r3, [pc, #12]	; (800e024 <USBD_FS_DeviceDescriptor+0x20>)
 800e018:	4618      	mov	r0, r3
 800e01a:	370c      	adds	r7, #12
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr
 800e024:	200000dc 	.word	0x200000dc

0800e028 <USBD_FS_LangIDStrDescriptor>:
 800e028:	b480      	push	{r7}
 800e02a:	b083      	sub	sp, #12
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	4603      	mov	r3, r0
 800e030:	6039      	str	r1, [r7, #0]
 800e032:	71fb      	strb	r3, [r7, #7]
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	2204      	movs	r2, #4
 800e038:	801a      	strh	r2, [r3, #0]
 800e03a:	4b03      	ldr	r3, [pc, #12]	; (800e048 <USBD_FS_LangIDStrDescriptor+0x20>)
 800e03c:	4618      	mov	r0, r3
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr
 800e048:	200000f0 	.word	0x200000f0

0800e04c <USBD_FS_ProductStrDescriptor>:
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	4603      	mov	r3, r0
 800e054:	6039      	str	r1, [r7, #0]
 800e056:	71fb      	strb	r3, [r7, #7]
 800e058:	79fb      	ldrb	r3, [r7, #7]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d105      	bne.n	800e06a <USBD_FS_ProductStrDescriptor+0x1e>
 800e05e:	683a      	ldr	r2, [r7, #0]
 800e060:	4907      	ldr	r1, [pc, #28]	; (800e080 <USBD_FS_ProductStrDescriptor+0x34>)
 800e062:	4808      	ldr	r0, [pc, #32]	; (800e084 <USBD_FS_ProductStrDescriptor+0x38>)
 800e064:	f7ff fdec 	bl	800dc40 <USBD_GetString>
 800e068:	e004      	b.n	800e074 <USBD_FS_ProductStrDescriptor+0x28>
 800e06a:	683a      	ldr	r2, [r7, #0]
 800e06c:	4904      	ldr	r1, [pc, #16]	; (800e080 <USBD_FS_ProductStrDescriptor+0x34>)
 800e06e:	4805      	ldr	r0, [pc, #20]	; (800e084 <USBD_FS_ProductStrDescriptor+0x38>)
 800e070:	f7ff fde6 	bl	800dc40 <USBD_GetString>
 800e074:	4b02      	ldr	r3, [pc, #8]	; (800e080 <USBD_FS_ProductStrDescriptor+0x34>)
 800e076:	4618      	mov	r0, r3
 800e078:	3708      	adds	r7, #8
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	20002814 	.word	0x20002814
 800e084:	08014874 	.word	0x08014874

0800e088 <USBD_FS_ManufacturerStrDescriptor>:
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	4603      	mov	r3, r0
 800e090:	6039      	str	r1, [r7, #0]
 800e092:	71fb      	strb	r3, [r7, #7]
 800e094:	683a      	ldr	r2, [r7, #0]
 800e096:	4904      	ldr	r1, [pc, #16]	; (800e0a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e098:	4804      	ldr	r0, [pc, #16]	; (800e0ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e09a:	f7ff fdd1 	bl	800dc40 <USBD_GetString>
 800e09e:	4b02      	ldr	r3, [pc, #8]	; (800e0a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3708      	adds	r7, #8
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	20002814 	.word	0x20002814
 800e0ac:	0801488c 	.word	0x0801488c

0800e0b0 <USBD_FS_SerialStrDescriptor>:
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	6039      	str	r1, [r7, #0]
 800e0ba:	71fb      	strb	r3, [r7, #7]
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	221a      	movs	r2, #26
 800e0c0:	801a      	strh	r2, [r3, #0]
 800e0c2:	f000 f843 	bl	800e14c <Get_SerialNum>
 800e0c6:	4b02      	ldr	r3, [pc, #8]	; (800e0d0 <USBD_FS_SerialStrDescriptor+0x20>)
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3708      	adds	r7, #8
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	200000f4 	.word	0x200000f4

0800e0d4 <USBD_FS_ConfigStrDescriptor>:
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	4603      	mov	r3, r0
 800e0dc:	6039      	str	r1, [r7, #0]
 800e0de:	71fb      	strb	r3, [r7, #7]
 800e0e0:	79fb      	ldrb	r3, [r7, #7]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d105      	bne.n	800e0f2 <USBD_FS_ConfigStrDescriptor+0x1e>
 800e0e6:	683a      	ldr	r2, [r7, #0]
 800e0e8:	4907      	ldr	r1, [pc, #28]	; (800e108 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e0ea:	4808      	ldr	r0, [pc, #32]	; (800e10c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e0ec:	f7ff fda8 	bl	800dc40 <USBD_GetString>
 800e0f0:	e004      	b.n	800e0fc <USBD_FS_ConfigStrDescriptor+0x28>
 800e0f2:	683a      	ldr	r2, [r7, #0]
 800e0f4:	4904      	ldr	r1, [pc, #16]	; (800e108 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e0f6:	4805      	ldr	r0, [pc, #20]	; (800e10c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e0f8:	f7ff fda2 	bl	800dc40 <USBD_GetString>
 800e0fc:	4b02      	ldr	r3, [pc, #8]	; (800e108 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e0fe:	4618      	mov	r0, r3
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	20002814 	.word	0x20002814
 800e10c:	080148a0 	.word	0x080148a0

0800e110 <USBD_FS_InterfaceStrDescriptor>:
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	4603      	mov	r3, r0
 800e118:	6039      	str	r1, [r7, #0]
 800e11a:	71fb      	strb	r3, [r7, #7]
 800e11c:	79fb      	ldrb	r3, [r7, #7]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d105      	bne.n	800e12e <USBD_FS_InterfaceStrDescriptor+0x1e>
 800e122:	683a      	ldr	r2, [r7, #0]
 800e124:	4907      	ldr	r1, [pc, #28]	; (800e144 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e126:	4808      	ldr	r0, [pc, #32]	; (800e148 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e128:	f7ff fd8a 	bl	800dc40 <USBD_GetString>
 800e12c:	e004      	b.n	800e138 <USBD_FS_InterfaceStrDescriptor+0x28>
 800e12e:	683a      	ldr	r2, [r7, #0]
 800e130:	4904      	ldr	r1, [pc, #16]	; (800e144 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e132:	4805      	ldr	r0, [pc, #20]	; (800e148 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e134:	f7ff fd84 	bl	800dc40 <USBD_GetString>
 800e138:	4b02      	ldr	r3, [pc, #8]	; (800e144 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e13a:	4618      	mov	r0, r3
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	20002814 	.word	0x20002814
 800e148:	080148ac 	.word	0x080148ac

0800e14c <Get_SerialNum>:
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	4b0f      	ldr	r3, [pc, #60]	; (800e190 <Get_SerialNum+0x44>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	60fb      	str	r3, [r7, #12]
 800e158:	4b0e      	ldr	r3, [pc, #56]	; (800e194 <Get_SerialNum+0x48>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	60bb      	str	r3, [r7, #8]
 800e15e:	4b0e      	ldr	r3, [pc, #56]	; (800e198 <Get_SerialNum+0x4c>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	607b      	str	r3, [r7, #4]
 800e164:	68fa      	ldr	r2, [r7, #12]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4413      	add	r3, r2
 800e16a:	60fb      	str	r3, [r7, #12]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d009      	beq.n	800e186 <Get_SerialNum+0x3a>
 800e172:	2208      	movs	r2, #8
 800e174:	4909      	ldr	r1, [pc, #36]	; (800e19c <Get_SerialNum+0x50>)
 800e176:	68f8      	ldr	r0, [r7, #12]
 800e178:	f000 f814 	bl	800e1a4 <IntToUnicode>
 800e17c:	2204      	movs	r2, #4
 800e17e:	4908      	ldr	r1, [pc, #32]	; (800e1a0 <Get_SerialNum+0x54>)
 800e180:	68b8      	ldr	r0, [r7, #8]
 800e182:	f000 f80f 	bl	800e1a4 <IntToUnicode>
 800e186:	bf00      	nop
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	1fff7a10 	.word	0x1fff7a10
 800e194:	1fff7a14 	.word	0x1fff7a14
 800e198:	1fff7a18 	.word	0x1fff7a18
 800e19c:	200000f6 	.word	0x200000f6
 800e1a0:	20000106 	.word	0x20000106

0800e1a4 <IntToUnicode>:
 800e1a4:	b480      	push	{r7}
 800e1a6:	b087      	sub	sp, #28
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	60b9      	str	r1, [r7, #8]
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	71fb      	strb	r3, [r7, #7]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	75fb      	strb	r3, [r7, #23]
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	75fb      	strb	r3, [r7, #23]
 800e1ba:	e027      	b.n	800e20c <IntToUnicode+0x68>
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	0f1b      	lsrs	r3, r3, #28
 800e1c0:	2b09      	cmp	r3, #9
 800e1c2:	d80b      	bhi.n	800e1dc <IntToUnicode+0x38>
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	0f1b      	lsrs	r3, r3, #28
 800e1c8:	b2da      	uxtb	r2, r3
 800e1ca:	7dfb      	ldrb	r3, [r7, #23]
 800e1cc:	005b      	lsls	r3, r3, #1
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	440b      	add	r3, r1
 800e1d4:	3230      	adds	r2, #48	; 0x30
 800e1d6:	b2d2      	uxtb	r2, r2
 800e1d8:	701a      	strb	r2, [r3, #0]
 800e1da:	e00a      	b.n	800e1f2 <IntToUnicode+0x4e>
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	0f1b      	lsrs	r3, r3, #28
 800e1e0:	b2da      	uxtb	r2, r3
 800e1e2:	7dfb      	ldrb	r3, [r7, #23]
 800e1e4:	005b      	lsls	r3, r3, #1
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	440b      	add	r3, r1
 800e1ec:	3237      	adds	r2, #55	; 0x37
 800e1ee:	b2d2      	uxtb	r2, r2
 800e1f0:	701a      	strb	r2, [r3, #0]
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	011b      	lsls	r3, r3, #4
 800e1f6:	60fb      	str	r3, [r7, #12]
 800e1f8:	7dfb      	ldrb	r3, [r7, #23]
 800e1fa:	005b      	lsls	r3, r3, #1
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	68ba      	ldr	r2, [r7, #8]
 800e200:	4413      	add	r3, r2
 800e202:	2200      	movs	r2, #0
 800e204:	701a      	strb	r2, [r3, #0]
 800e206:	7dfb      	ldrb	r3, [r7, #23]
 800e208:	3301      	adds	r3, #1
 800e20a:	75fb      	strb	r3, [r7, #23]
 800e20c:	7dfa      	ldrb	r2, [r7, #23]
 800e20e:	79fb      	ldrb	r3, [r7, #7]
 800e210:	429a      	cmp	r2, r3
 800e212:	d3d3      	bcc.n	800e1bc <IntToUnicode+0x18>
 800e214:	bf00      	nop
 800e216:	bf00      	nop
 800e218:	371c      	adds	r7, #28
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr
	...

0800e224 <HAL_PCD_MspInit>:
 800e224:	b580      	push	{r7, lr}
 800e226:	b08a      	sub	sp, #40	; 0x28
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	f107 0314 	add.w	r3, r7, #20
 800e230:	2200      	movs	r2, #0
 800e232:	601a      	str	r2, [r3, #0]
 800e234:	605a      	str	r2, [r3, #4]
 800e236:	609a      	str	r2, [r3, #8]
 800e238:	60da      	str	r2, [r3, #12]
 800e23a:	611a      	str	r2, [r3, #16]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e244:	d13a      	bne.n	800e2bc <HAL_PCD_MspInit+0x98>
 800e246:	2300      	movs	r3, #0
 800e248:	613b      	str	r3, [r7, #16]
 800e24a:	4b1e      	ldr	r3, [pc, #120]	; (800e2c4 <HAL_PCD_MspInit+0xa0>)
 800e24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e24e:	4a1d      	ldr	r2, [pc, #116]	; (800e2c4 <HAL_PCD_MspInit+0xa0>)
 800e250:	f043 0301 	orr.w	r3, r3, #1
 800e254:	6313      	str	r3, [r2, #48]	; 0x30
 800e256:	4b1b      	ldr	r3, [pc, #108]	; (800e2c4 <HAL_PCD_MspInit+0xa0>)
 800e258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e25a:	f003 0301 	and.w	r3, r3, #1
 800e25e:	613b      	str	r3, [r7, #16]
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800e266:	617b      	str	r3, [r7, #20]
 800e268:	2302      	movs	r3, #2
 800e26a:	61bb      	str	r3, [r7, #24]
 800e26c:	2300      	movs	r3, #0
 800e26e:	61fb      	str	r3, [r7, #28]
 800e270:	2303      	movs	r3, #3
 800e272:	623b      	str	r3, [r7, #32]
 800e274:	230a      	movs	r3, #10
 800e276:	627b      	str	r3, [r7, #36]	; 0x24
 800e278:	f107 0314 	add.w	r3, r7, #20
 800e27c:	4619      	mov	r1, r3
 800e27e:	4812      	ldr	r0, [pc, #72]	; (800e2c8 <HAL_PCD_MspInit+0xa4>)
 800e280:	f7f6 fa24 	bl	80046cc <HAL_GPIO_Init>
 800e284:	4b0f      	ldr	r3, [pc, #60]	; (800e2c4 <HAL_PCD_MspInit+0xa0>)
 800e286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e288:	4a0e      	ldr	r2, [pc, #56]	; (800e2c4 <HAL_PCD_MspInit+0xa0>)
 800e28a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e28e:	6353      	str	r3, [r2, #52]	; 0x34
 800e290:	2300      	movs	r3, #0
 800e292:	60fb      	str	r3, [r7, #12]
 800e294:	4b0b      	ldr	r3, [pc, #44]	; (800e2c4 <HAL_PCD_MspInit+0xa0>)
 800e296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e298:	4a0a      	ldr	r2, [pc, #40]	; (800e2c4 <HAL_PCD_MspInit+0xa0>)
 800e29a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e29e:	6453      	str	r3, [r2, #68]	; 0x44
 800e2a0:	4b08      	ldr	r3, [pc, #32]	; (800e2c4 <HAL_PCD_MspInit+0xa0>)
 800e2a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2a8:	60fb      	str	r3, [r7, #12]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	2043      	movs	r0, #67	; 0x43
 800e2b2:	f7f6 f9a4 	bl	80045fe <HAL_NVIC_SetPriority>
 800e2b6:	2043      	movs	r0, #67	; 0x43
 800e2b8:	f7f6 f9bd 	bl	8004636 <HAL_NVIC_EnableIRQ>
 800e2bc:	bf00      	nop
 800e2be:	3728      	adds	r7, #40	; 0x28
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}
 800e2c4:	40023800 	.word	0x40023800
 800e2c8:	40020000 	.word	0x40020000

0800e2cc <HAL_PCD_SetupStageCallback>:
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b082      	sub	sp, #8
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	4610      	mov	r0, r2
 800e2e4:	f7fe fb4d 	bl	800c982 <USBD_LL_SetupStage>
 800e2e8:	bf00      	nop
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <HAL_PCD_DataOutStageCallback>:
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	70fb      	strb	r3, [r7, #3]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e302:	78fa      	ldrb	r2, [r7, #3]
 800e304:	6879      	ldr	r1, [r7, #4]
 800e306:	4613      	mov	r3, r2
 800e308:	00db      	lsls	r3, r3, #3
 800e30a:	4413      	add	r3, r2
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	440b      	add	r3, r1
 800e310:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e314:	681a      	ldr	r2, [r3, #0]
 800e316:	78fb      	ldrb	r3, [r7, #3]
 800e318:	4619      	mov	r1, r3
 800e31a:	f7fe fb87 	bl	800ca2c <USBD_LL_DataOutStage>
 800e31e:	bf00      	nop
 800e320:	3708      	adds	r7, #8
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}

0800e326 <HAL_PCD_DataInStageCallback>:
 800e326:	b580      	push	{r7, lr}
 800e328:	b082      	sub	sp, #8
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	6078      	str	r0, [r7, #4]
 800e32e:	460b      	mov	r3, r1
 800e330:	70fb      	strb	r3, [r7, #3]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e338:	78fa      	ldrb	r2, [r7, #3]
 800e33a:	6879      	ldr	r1, [r7, #4]
 800e33c:	4613      	mov	r3, r2
 800e33e:	00db      	lsls	r3, r3, #3
 800e340:	4413      	add	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	440b      	add	r3, r1
 800e346:	334c      	adds	r3, #76	; 0x4c
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	78fb      	ldrb	r3, [r7, #3]
 800e34c:	4619      	mov	r1, r3
 800e34e:	f7fe fc20 	bl	800cb92 <USBD_LL_DataInStage>
 800e352:	bf00      	nop
 800e354:	3708      	adds	r7, #8
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <HAL_PCD_SOFCallback>:
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b082      	sub	sp, #8
 800e35e:	af00      	add	r7, sp, #0
 800e360:	6078      	str	r0, [r7, #4]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e368:	4618      	mov	r0, r3
 800e36a:	f7fe fd54 	bl	800ce16 <USBD_LL_SOF>
 800e36e:	bf00      	nop
 800e370:	3708      	adds	r7, #8
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}

0800e376 <HAL_PCD_ResetCallback>:
 800e376:	b580      	push	{r7, lr}
 800e378:	b084      	sub	sp, #16
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	6078      	str	r0, [r7, #4]
 800e37e:	2301      	movs	r3, #1
 800e380:	73fb      	strb	r3, [r7, #15]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d102      	bne.n	800e390 <HAL_PCD_ResetCallback+0x1a>
 800e38a:	2300      	movs	r3, #0
 800e38c:	73fb      	strb	r3, [r7, #15]
 800e38e:	e008      	b.n	800e3a2 <HAL_PCD_ResetCallback+0x2c>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	2b02      	cmp	r3, #2
 800e396:	d102      	bne.n	800e39e <HAL_PCD_ResetCallback+0x28>
 800e398:	2301      	movs	r3, #1
 800e39a:	73fb      	strb	r3, [r7, #15]
 800e39c:	e001      	b.n	800e3a2 <HAL_PCD_ResetCallback+0x2c>
 800e39e:	f7f5 fbe1 	bl	8003b64 <Error_Handler>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3a8:	7bfa      	ldrb	r2, [r7, #15]
 800e3aa:	4611      	mov	r1, r2
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fe fcf4 	bl	800cd9a <USBD_LL_SetSpeed>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fe fc9c 	bl	800ccf6 <USBD_LL_Reset>
 800e3be:	bf00      	nop
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
	...

0800e3c8 <HAL_PCD_SuspendCallback>:
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fe fcef 	bl	800cdba <USBD_LL_Suspend>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	6812      	ldr	r2, [r2, #0]
 800e3ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e3ee:	f043 0301 	orr.w	r3, r3, #1
 800e3f2:	6013      	str	r3, [r2, #0]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6a1b      	ldr	r3, [r3, #32]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d005      	beq.n	800e408 <HAL_PCD_SuspendCallback+0x40>
 800e3fc:	4b04      	ldr	r3, [pc, #16]	; (800e410 <HAL_PCD_SuspendCallback+0x48>)
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	4a03      	ldr	r2, [pc, #12]	; (800e410 <HAL_PCD_SuspendCallback+0x48>)
 800e402:	f043 0306 	orr.w	r3, r3, #6
 800e406:	6113      	str	r3, [r2, #16]
 800e408:	bf00      	nop
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	e000ed00 	.word	0xe000ed00

0800e414 <HAL_PCD_ResumeCallback>:
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e422:	4618      	mov	r0, r3
 800e424:	f7fe fcdf 	bl	800cde6 <USBD_LL_Resume>
 800e428:	bf00      	nop
 800e42a:	3708      	adds	r7, #8
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <HAL_PCD_ISOOUTIncompleteCallback>:
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	460b      	mov	r3, r1
 800e43a:	70fb      	strb	r3, [r7, #3]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e442:	78fa      	ldrb	r2, [r7, #3]
 800e444:	4611      	mov	r1, r2
 800e446:	4618      	mov	r0, r3
 800e448:	f7fe fd37 	bl	800ceba <USBD_LL_IsoOUTIncomplete>
 800e44c:	bf00      	nop
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <HAL_PCD_ISOINIncompleteCallback>:
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	70fb      	strb	r3, [r7, #3]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e466:	78fa      	ldrb	r2, [r7, #3]
 800e468:	4611      	mov	r1, r2
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fe fcf3 	bl	800ce56 <USBD_LL_IsoINIncomplete>
 800e470:	bf00      	nop
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <HAL_PCD_ConnectCallback>:
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e486:	4618      	mov	r0, r3
 800e488:	f7fe fd49 	bl	800cf1e <USBD_LL_DevConnected>
 800e48c:	bf00      	nop
 800e48e:	3708      	adds	r7, #8
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <HAL_PCD_DisconnectCallback>:
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7fe fd46 	bl	800cf34 <USBD_LL_DevDisconnected>
 800e4a8:	bf00      	nop
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <USBD_LL_Init>:
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d13c      	bne.n	800e53a <USBD_LL_Init+0x8a>
 800e4c0:	4a20      	ldr	r2, [pc, #128]	; (800e544 <USBD_LL_Init+0x94>)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	4a1e      	ldr	r2, [pc, #120]	; (800e544 <USBD_LL_Init+0x94>)
 800e4cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 800e4d0:	4b1c      	ldr	r3, [pc, #112]	; (800e544 <USBD_LL_Init+0x94>)
 800e4d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e4d6:	601a      	str	r2, [r3, #0]
 800e4d8:	4b1a      	ldr	r3, [pc, #104]	; (800e544 <USBD_LL_Init+0x94>)
 800e4da:	2204      	movs	r2, #4
 800e4dc:	605a      	str	r2, [r3, #4]
 800e4de:	4b19      	ldr	r3, [pc, #100]	; (800e544 <USBD_LL_Init+0x94>)
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	60da      	str	r2, [r3, #12]
 800e4e4:	4b17      	ldr	r3, [pc, #92]	; (800e544 <USBD_LL_Init+0x94>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	611a      	str	r2, [r3, #16]
 800e4ea:	4b16      	ldr	r3, [pc, #88]	; (800e544 <USBD_LL_Init+0x94>)
 800e4ec:	2202      	movs	r2, #2
 800e4ee:	619a      	str	r2, [r3, #24]
 800e4f0:	4b14      	ldr	r3, [pc, #80]	; (800e544 <USBD_LL_Init+0x94>)
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	61da      	str	r2, [r3, #28]
 800e4f6:	4b13      	ldr	r3, [pc, #76]	; (800e544 <USBD_LL_Init+0x94>)
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	621a      	str	r2, [r3, #32]
 800e4fc:	4b11      	ldr	r3, [pc, #68]	; (800e544 <USBD_LL_Init+0x94>)
 800e4fe:	2200      	movs	r2, #0
 800e500:	625a      	str	r2, [r3, #36]	; 0x24
 800e502:	4b10      	ldr	r3, [pc, #64]	; (800e544 <USBD_LL_Init+0x94>)
 800e504:	2200      	movs	r2, #0
 800e506:	62da      	str	r2, [r3, #44]	; 0x2c
 800e508:	4b0e      	ldr	r3, [pc, #56]	; (800e544 <USBD_LL_Init+0x94>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	631a      	str	r2, [r3, #48]	; 0x30
 800e50e:	480d      	ldr	r0, [pc, #52]	; (800e544 <USBD_LL_Init+0x94>)
 800e510:	f7f8 ff8d 	bl	800742e <HAL_PCD_Init>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d001      	beq.n	800e51e <USBD_LL_Init+0x6e>
 800e51a:	f7f5 fb23 	bl	8003b64 <Error_Handler>
 800e51e:	2180      	movs	r1, #128	; 0x80
 800e520:	4808      	ldr	r0, [pc, #32]	; (800e544 <USBD_LL_Init+0x94>)
 800e522:	f7fa f9e4 	bl	80088ee <HAL_PCDEx_SetRxFiFo>
 800e526:	2240      	movs	r2, #64	; 0x40
 800e528:	2100      	movs	r1, #0
 800e52a:	4806      	ldr	r0, [pc, #24]	; (800e544 <USBD_LL_Init+0x94>)
 800e52c:	f7fa f998 	bl	8008860 <HAL_PCDEx_SetTxFiFo>
 800e530:	2280      	movs	r2, #128	; 0x80
 800e532:	2101      	movs	r1, #1
 800e534:	4803      	ldr	r0, [pc, #12]	; (800e544 <USBD_LL_Init+0x94>)
 800e536:	f7fa f993 	bl	8008860 <HAL_PCDEx_SetTxFiFo>
 800e53a:	2300      	movs	r3, #0
 800e53c:	4618      	mov	r0, r3
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	20002a14 	.word	0x20002a14

0800e548 <USBD_LL_Start>:
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	2300      	movs	r3, #0
 800e552:	73fb      	strb	r3, [r7, #15]
 800e554:	2300      	movs	r3, #0
 800e556:	73bb      	strb	r3, [r7, #14]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e55e:	4618      	mov	r0, r3
 800e560:	f7f9 f882 	bl	8007668 <HAL_PCD_Start>
 800e564:	4603      	mov	r3, r0
 800e566:	73fb      	strb	r3, [r7, #15]
 800e568:	7bfb      	ldrb	r3, [r7, #15]
 800e56a:	4618      	mov	r0, r3
 800e56c:	f000 f942 	bl	800e7f4 <USBD_Get_USB_Status>
 800e570:	4603      	mov	r3, r0
 800e572:	73bb      	strb	r3, [r7, #14]
 800e574:	7bbb      	ldrb	r3, [r7, #14]
 800e576:	4618      	mov	r0, r3
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <USBD_LL_OpenEP>:
 800e57e:	b580      	push	{r7, lr}
 800e580:	b084      	sub	sp, #16
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
 800e586:	4608      	mov	r0, r1
 800e588:	4611      	mov	r1, r2
 800e58a:	461a      	mov	r2, r3
 800e58c:	4603      	mov	r3, r0
 800e58e:	70fb      	strb	r3, [r7, #3]
 800e590:	460b      	mov	r3, r1
 800e592:	70bb      	strb	r3, [r7, #2]
 800e594:	4613      	mov	r3, r2
 800e596:	803b      	strh	r3, [r7, #0]
 800e598:	2300      	movs	r3, #0
 800e59a:	73fb      	strb	r3, [r7, #15]
 800e59c:	2300      	movs	r3, #0
 800e59e:	73bb      	strb	r3, [r7, #14]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e5a6:	78bb      	ldrb	r3, [r7, #2]
 800e5a8:	883a      	ldrh	r2, [r7, #0]
 800e5aa:	78f9      	ldrb	r1, [r7, #3]
 800e5ac:	f7f9 fd53 	bl	8008056 <HAL_PCD_EP_Open>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	73fb      	strb	r3, [r7, #15]
 800e5b4:	7bfb      	ldrb	r3, [r7, #15]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f000 f91c 	bl	800e7f4 <USBD_Get_USB_Status>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	73bb      	strb	r3, [r7, #14]
 800e5c0:	7bbb      	ldrb	r3, [r7, #14]
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}

0800e5ca <USBD_LL_CloseEP>:
 800e5ca:	b580      	push	{r7, lr}
 800e5cc:	b084      	sub	sp, #16
 800e5ce:	af00      	add	r7, sp, #0
 800e5d0:	6078      	str	r0, [r7, #4]
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	70fb      	strb	r3, [r7, #3]
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	73fb      	strb	r3, [r7, #15]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	73bb      	strb	r3, [r7, #14]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e5e4:	78fa      	ldrb	r2, [r7, #3]
 800e5e6:	4611      	mov	r1, r2
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7f9 fd9c 	bl	8008126 <HAL_PCD_EP_Close>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	73fb      	strb	r3, [r7, #15]
 800e5f2:	7bfb      	ldrb	r3, [r7, #15]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f000 f8fd 	bl	800e7f4 <USBD_Get_USB_Status>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	73bb      	strb	r3, [r7, #14]
 800e5fe:	7bbb      	ldrb	r3, [r7, #14]
 800e600:	4618      	mov	r0, r3
 800e602:	3710      	adds	r7, #16
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <USBD_LL_StallEP>:
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	460b      	mov	r3, r1
 800e612:	70fb      	strb	r3, [r7, #3]
 800e614:	2300      	movs	r3, #0
 800e616:	73fb      	strb	r3, [r7, #15]
 800e618:	2300      	movs	r3, #0
 800e61a:	73bb      	strb	r3, [r7, #14]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e622:	78fa      	ldrb	r2, [r7, #3]
 800e624:	4611      	mov	r1, r2
 800e626:	4618      	mov	r0, r3
 800e628:	f7f9 fe74 	bl	8008314 <HAL_PCD_EP_SetStall>
 800e62c:	4603      	mov	r3, r0
 800e62e:	73fb      	strb	r3, [r7, #15]
 800e630:	7bfb      	ldrb	r3, [r7, #15]
 800e632:	4618      	mov	r0, r3
 800e634:	f000 f8de 	bl	800e7f4 <USBD_Get_USB_Status>
 800e638:	4603      	mov	r3, r0
 800e63a:	73bb      	strb	r3, [r7, #14]
 800e63c:	7bbb      	ldrb	r3, [r7, #14]
 800e63e:	4618      	mov	r0, r3
 800e640:	3710      	adds	r7, #16
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}

0800e646 <USBD_LL_ClearStallEP>:
 800e646:	b580      	push	{r7, lr}
 800e648:	b084      	sub	sp, #16
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
 800e64e:	460b      	mov	r3, r1
 800e650:	70fb      	strb	r3, [r7, #3]
 800e652:	2300      	movs	r3, #0
 800e654:	73fb      	strb	r3, [r7, #15]
 800e656:	2300      	movs	r3, #0
 800e658:	73bb      	strb	r3, [r7, #14]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e660:	78fa      	ldrb	r2, [r7, #3]
 800e662:	4611      	mov	r1, r2
 800e664:	4618      	mov	r0, r3
 800e666:	f7f9 feb9 	bl	80083dc <HAL_PCD_EP_ClrStall>
 800e66a:	4603      	mov	r3, r0
 800e66c:	73fb      	strb	r3, [r7, #15]
 800e66e:	7bfb      	ldrb	r3, [r7, #15]
 800e670:	4618      	mov	r0, r3
 800e672:	f000 f8bf 	bl	800e7f4 <USBD_Get_USB_Status>
 800e676:	4603      	mov	r3, r0
 800e678:	73bb      	strb	r3, [r7, #14]
 800e67a:	7bbb      	ldrb	r3, [r7, #14]
 800e67c:	4618      	mov	r0, r3
 800e67e:	3710      	adds	r7, #16
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <USBD_LL_IsStallEP>:
 800e684:	b480      	push	{r7}
 800e686:	b085      	sub	sp, #20
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	460b      	mov	r3, r1
 800e68e:	70fb      	strb	r3, [r7, #3]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e696:	60fb      	str	r3, [r7, #12]
 800e698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	da0b      	bge.n	800e6b8 <USBD_LL_IsStallEP+0x34>
 800e6a0:	78fb      	ldrb	r3, [r7, #3]
 800e6a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6a6:	68f9      	ldr	r1, [r7, #12]
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	00db      	lsls	r3, r3, #3
 800e6ac:	4413      	add	r3, r2
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	440b      	add	r3, r1
 800e6b2:	333e      	adds	r3, #62	; 0x3e
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	e00b      	b.n	800e6d0 <USBD_LL_IsStallEP+0x4c>
 800e6b8:	78fb      	ldrb	r3, [r7, #3]
 800e6ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6be:	68f9      	ldr	r1, [r7, #12]
 800e6c0:	4613      	mov	r3, r2
 800e6c2:	00db      	lsls	r3, r3, #3
 800e6c4:	4413      	add	r3, r2
 800e6c6:	009b      	lsls	r3, r3, #2
 800e6c8:	440b      	add	r3, r1
 800e6ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3714      	adds	r7, #20
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <USBD_LL_SetUSBAddress>:
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	70fb      	strb	r3, [r7, #3]
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	73fb      	strb	r3, [r7, #15]
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	73bb      	strb	r3, [r7, #14]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6f6:	78fa      	ldrb	r2, [r7, #3]
 800e6f8:	4611      	mov	r1, r2
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7f9 fc86 	bl	800800c <HAL_PCD_SetAddress>
 800e700:	4603      	mov	r3, r0
 800e702:	73fb      	strb	r3, [r7, #15]
 800e704:	7bfb      	ldrb	r3, [r7, #15]
 800e706:	4618      	mov	r0, r3
 800e708:	f000 f874 	bl	800e7f4 <USBD_Get_USB_Status>
 800e70c:	4603      	mov	r3, r0
 800e70e:	73bb      	strb	r3, [r7, #14]
 800e710:	7bbb      	ldrb	r3, [r7, #14]
 800e712:	4618      	mov	r0, r3
 800e714:	3710      	adds	r7, #16
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}

0800e71a <USBD_LL_Transmit>:
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b086      	sub	sp, #24
 800e71e:	af00      	add	r7, sp, #0
 800e720:	60f8      	str	r0, [r7, #12]
 800e722:	607a      	str	r2, [r7, #4]
 800e724:	603b      	str	r3, [r7, #0]
 800e726:	460b      	mov	r3, r1
 800e728:	72fb      	strb	r3, [r7, #11]
 800e72a:	2300      	movs	r3, #0
 800e72c:	75fb      	strb	r3, [r7, #23]
 800e72e:	2300      	movs	r3, #0
 800e730:	75bb      	strb	r3, [r7, #22]
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e738:	7af9      	ldrb	r1, [r7, #11]
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	f7f9 fd9f 	bl	8008280 <HAL_PCD_EP_Transmit>
 800e742:	4603      	mov	r3, r0
 800e744:	75fb      	strb	r3, [r7, #23]
 800e746:	7dfb      	ldrb	r3, [r7, #23]
 800e748:	4618      	mov	r0, r3
 800e74a:	f000 f853 	bl	800e7f4 <USBD_Get_USB_Status>
 800e74e:	4603      	mov	r3, r0
 800e750:	75bb      	strb	r3, [r7, #22]
 800e752:	7dbb      	ldrb	r3, [r7, #22]
 800e754:	4618      	mov	r0, r3
 800e756:	3718      	adds	r7, #24
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <USBD_LL_PrepareReceive>:
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b086      	sub	sp, #24
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	607a      	str	r2, [r7, #4]
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	460b      	mov	r3, r1
 800e76a:	72fb      	strb	r3, [r7, #11]
 800e76c:	2300      	movs	r3, #0
 800e76e:	75fb      	strb	r3, [r7, #23]
 800e770:	2300      	movs	r3, #0
 800e772:	75bb      	strb	r3, [r7, #22]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e77a:	7af9      	ldrb	r1, [r7, #11]
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	f7f9 fd1b 	bl	80081ba <HAL_PCD_EP_Receive>
 800e784:	4603      	mov	r3, r0
 800e786:	75fb      	strb	r3, [r7, #23]
 800e788:	7dfb      	ldrb	r3, [r7, #23]
 800e78a:	4618      	mov	r0, r3
 800e78c:	f000 f832 	bl	800e7f4 <USBD_Get_USB_Status>
 800e790:	4603      	mov	r3, r0
 800e792:	75bb      	strb	r3, [r7, #22]
 800e794:	7dbb      	ldrb	r3, [r7, #22]
 800e796:	4618      	mov	r0, r3
 800e798:	3718      	adds	r7, #24
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <USBD_LL_GetRxDataSize>:
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b082      	sub	sp, #8
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	70fb      	strb	r3, [r7, #3]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7b0:	78fa      	ldrb	r2, [r7, #3]
 800e7b2:	4611      	mov	r1, r2
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7f9 fd4b 	bl	8008250 <HAL_PCD_EP_GetRxCount>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3708      	adds	r7, #8
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <USBD_static_malloc>:
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	4b03      	ldr	r3, [pc, #12]	; (800e7dc <USBD_static_malloc+0x18>)
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	370c      	adds	r7, #12
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr
 800e7da:	bf00      	nop
 800e7dc:	20002f20 	.word	0x20002f20

0800e7e0 <USBD_static_free>:
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	bf00      	nop
 800e7ea:	370c      	adds	r7, #12
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <USBD_Get_USB_Status>:
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	71fb      	strb	r3, [r7, #7]
 800e7fe:	2300      	movs	r3, #0
 800e800:	73fb      	strb	r3, [r7, #15]
 800e802:	79fb      	ldrb	r3, [r7, #7]
 800e804:	2b03      	cmp	r3, #3
 800e806:	d817      	bhi.n	800e838 <USBD_Get_USB_Status+0x44>
 800e808:	a201      	add	r2, pc, #4	; (adr r2, 800e810 <USBD_Get_USB_Status+0x1c>)
 800e80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e80e:	bf00      	nop
 800e810:	0800e821 	.word	0x0800e821
 800e814:	0800e827 	.word	0x0800e827
 800e818:	0800e82d 	.word	0x0800e82d
 800e81c:	0800e833 	.word	0x0800e833
 800e820:	2300      	movs	r3, #0
 800e822:	73fb      	strb	r3, [r7, #15]
 800e824:	e00b      	b.n	800e83e <USBD_Get_USB_Status+0x4a>
 800e826:	2303      	movs	r3, #3
 800e828:	73fb      	strb	r3, [r7, #15]
 800e82a:	e008      	b.n	800e83e <USBD_Get_USB_Status+0x4a>
 800e82c:	2301      	movs	r3, #1
 800e82e:	73fb      	strb	r3, [r7, #15]
 800e830:	e005      	b.n	800e83e <USBD_Get_USB_Status+0x4a>
 800e832:	2303      	movs	r3, #3
 800e834:	73fb      	strb	r3, [r7, #15]
 800e836:	e002      	b.n	800e83e <USBD_Get_USB_Status+0x4a>
 800e838:	2303      	movs	r3, #3
 800e83a:	73fb      	strb	r3, [r7, #15]
 800e83c:	bf00      	nop
 800e83e:	7bfb      	ldrb	r3, [r7, #15]
 800e840:	4618      	mov	r0, r3
 800e842:	3714      	adds	r7, #20
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <__errno>:
 800e84c:	4b01      	ldr	r3, [pc, #4]	; (800e854 <__errno+0x8>)
 800e84e:	6818      	ldr	r0, [r3, #0]
 800e850:	4770      	bx	lr
 800e852:	bf00      	nop
 800e854:	20000110 	.word	0x20000110

0800e858 <__libc_init_array>:
 800e858:	b570      	push	{r4, r5, r6, lr}
 800e85a:	4d0d      	ldr	r5, [pc, #52]	; (800e890 <__libc_init_array+0x38>)
 800e85c:	4c0d      	ldr	r4, [pc, #52]	; (800e894 <__libc_init_array+0x3c>)
 800e85e:	1b64      	subs	r4, r4, r5
 800e860:	10a4      	asrs	r4, r4, #2
 800e862:	2600      	movs	r6, #0
 800e864:	42a6      	cmp	r6, r4
 800e866:	d109      	bne.n	800e87c <__libc_init_array+0x24>
 800e868:	4d0b      	ldr	r5, [pc, #44]	; (800e898 <__libc_init_array+0x40>)
 800e86a:	4c0c      	ldr	r4, [pc, #48]	; (800e89c <__libc_init_array+0x44>)
 800e86c:	f005 f9a4 	bl	8013bb8 <_init>
 800e870:	1b64      	subs	r4, r4, r5
 800e872:	10a4      	asrs	r4, r4, #2
 800e874:	2600      	movs	r6, #0
 800e876:	42a6      	cmp	r6, r4
 800e878:	d105      	bne.n	800e886 <__libc_init_array+0x2e>
 800e87a:	bd70      	pop	{r4, r5, r6, pc}
 800e87c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e880:	4798      	blx	r3
 800e882:	3601      	adds	r6, #1
 800e884:	e7ee      	b.n	800e864 <__libc_init_array+0xc>
 800e886:	f855 3b04 	ldr.w	r3, [r5], #4
 800e88a:	4798      	blx	r3
 800e88c:	3601      	adds	r6, #1
 800e88e:	e7f2      	b.n	800e876 <__libc_init_array+0x1e>
 800e890:	08014da4 	.word	0x08014da4
 800e894:	08014da4 	.word	0x08014da4
 800e898:	08014da4 	.word	0x08014da4
 800e89c:	08014da8 	.word	0x08014da8

0800e8a0 <memcpy>:
 800e8a0:	440a      	add	r2, r1
 800e8a2:	4291      	cmp	r1, r2
 800e8a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8a8:	d100      	bne.n	800e8ac <memcpy+0xc>
 800e8aa:	4770      	bx	lr
 800e8ac:	b510      	push	{r4, lr}
 800e8ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8b6:	4291      	cmp	r1, r2
 800e8b8:	d1f9      	bne.n	800e8ae <memcpy+0xe>
 800e8ba:	bd10      	pop	{r4, pc}

0800e8bc <memmove>:
 800e8bc:	4288      	cmp	r0, r1
 800e8be:	b510      	push	{r4, lr}
 800e8c0:	eb01 0402 	add.w	r4, r1, r2
 800e8c4:	d902      	bls.n	800e8cc <memmove+0x10>
 800e8c6:	4284      	cmp	r4, r0
 800e8c8:	4623      	mov	r3, r4
 800e8ca:	d807      	bhi.n	800e8dc <memmove+0x20>
 800e8cc:	1e43      	subs	r3, r0, #1
 800e8ce:	42a1      	cmp	r1, r4
 800e8d0:	d008      	beq.n	800e8e4 <memmove+0x28>
 800e8d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8da:	e7f8      	b.n	800e8ce <memmove+0x12>
 800e8dc:	4402      	add	r2, r0
 800e8de:	4601      	mov	r1, r0
 800e8e0:	428a      	cmp	r2, r1
 800e8e2:	d100      	bne.n	800e8e6 <memmove+0x2a>
 800e8e4:	bd10      	pop	{r4, pc}
 800e8e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e8ee:	e7f7      	b.n	800e8e0 <memmove+0x24>

0800e8f0 <memset>:
 800e8f0:	4402      	add	r2, r0
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d100      	bne.n	800e8fa <memset+0xa>
 800e8f8:	4770      	bx	lr
 800e8fa:	f803 1b01 	strb.w	r1, [r3], #1
 800e8fe:	e7f9      	b.n	800e8f4 <memset+0x4>

0800e900 <__cvt>:
 800e900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e904:	ec55 4b10 	vmov	r4, r5, d0
 800e908:	2d00      	cmp	r5, #0
 800e90a:	460e      	mov	r6, r1
 800e90c:	4619      	mov	r1, r3
 800e90e:	462b      	mov	r3, r5
 800e910:	bfbb      	ittet	lt
 800e912:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e916:	461d      	movlt	r5, r3
 800e918:	2300      	movge	r3, #0
 800e91a:	232d      	movlt	r3, #45	; 0x2d
 800e91c:	700b      	strb	r3, [r1, #0]
 800e91e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e920:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e924:	4691      	mov	r9, r2
 800e926:	f023 0820 	bic.w	r8, r3, #32
 800e92a:	bfbc      	itt	lt
 800e92c:	4622      	movlt	r2, r4
 800e92e:	4614      	movlt	r4, r2
 800e930:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e934:	d005      	beq.n	800e942 <__cvt+0x42>
 800e936:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e93a:	d100      	bne.n	800e93e <__cvt+0x3e>
 800e93c:	3601      	adds	r6, #1
 800e93e:	2102      	movs	r1, #2
 800e940:	e000      	b.n	800e944 <__cvt+0x44>
 800e942:	2103      	movs	r1, #3
 800e944:	ab03      	add	r3, sp, #12
 800e946:	9301      	str	r3, [sp, #4]
 800e948:	ab02      	add	r3, sp, #8
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	ec45 4b10 	vmov	d0, r4, r5
 800e950:	4653      	mov	r3, sl
 800e952:	4632      	mov	r2, r6
 800e954:	f001 ffdc 	bl	8010910 <_dtoa_r>
 800e958:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e95c:	4607      	mov	r7, r0
 800e95e:	d102      	bne.n	800e966 <__cvt+0x66>
 800e960:	f019 0f01 	tst.w	r9, #1
 800e964:	d022      	beq.n	800e9ac <__cvt+0xac>
 800e966:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e96a:	eb07 0906 	add.w	r9, r7, r6
 800e96e:	d110      	bne.n	800e992 <__cvt+0x92>
 800e970:	783b      	ldrb	r3, [r7, #0]
 800e972:	2b30      	cmp	r3, #48	; 0x30
 800e974:	d10a      	bne.n	800e98c <__cvt+0x8c>
 800e976:	2200      	movs	r2, #0
 800e978:	2300      	movs	r3, #0
 800e97a:	4620      	mov	r0, r4
 800e97c:	4629      	mov	r1, r5
 800e97e:	f7f2 f8c3 	bl	8000b08 <__aeabi_dcmpeq>
 800e982:	b918      	cbnz	r0, 800e98c <__cvt+0x8c>
 800e984:	f1c6 0601 	rsb	r6, r6, #1
 800e988:	f8ca 6000 	str.w	r6, [sl]
 800e98c:	f8da 3000 	ldr.w	r3, [sl]
 800e990:	4499      	add	r9, r3
 800e992:	2200      	movs	r2, #0
 800e994:	2300      	movs	r3, #0
 800e996:	4620      	mov	r0, r4
 800e998:	4629      	mov	r1, r5
 800e99a:	f7f2 f8b5 	bl	8000b08 <__aeabi_dcmpeq>
 800e99e:	b108      	cbz	r0, 800e9a4 <__cvt+0xa4>
 800e9a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e9a4:	2230      	movs	r2, #48	; 0x30
 800e9a6:	9b03      	ldr	r3, [sp, #12]
 800e9a8:	454b      	cmp	r3, r9
 800e9aa:	d307      	bcc.n	800e9bc <__cvt+0xbc>
 800e9ac:	9b03      	ldr	r3, [sp, #12]
 800e9ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9b0:	1bdb      	subs	r3, r3, r7
 800e9b2:	4638      	mov	r0, r7
 800e9b4:	6013      	str	r3, [r2, #0]
 800e9b6:	b004      	add	sp, #16
 800e9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9bc:	1c59      	adds	r1, r3, #1
 800e9be:	9103      	str	r1, [sp, #12]
 800e9c0:	701a      	strb	r2, [r3, #0]
 800e9c2:	e7f0      	b.n	800e9a6 <__cvt+0xa6>

0800e9c4 <__exponent>:
 800e9c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2900      	cmp	r1, #0
 800e9ca:	bfb8      	it	lt
 800e9cc:	4249      	neglt	r1, r1
 800e9ce:	f803 2b02 	strb.w	r2, [r3], #2
 800e9d2:	bfb4      	ite	lt
 800e9d4:	222d      	movlt	r2, #45	; 0x2d
 800e9d6:	222b      	movge	r2, #43	; 0x2b
 800e9d8:	2909      	cmp	r1, #9
 800e9da:	7042      	strb	r2, [r0, #1]
 800e9dc:	dd2a      	ble.n	800ea34 <__exponent+0x70>
 800e9de:	f10d 0407 	add.w	r4, sp, #7
 800e9e2:	46a4      	mov	ip, r4
 800e9e4:	270a      	movs	r7, #10
 800e9e6:	46a6      	mov	lr, r4
 800e9e8:	460a      	mov	r2, r1
 800e9ea:	fb91 f6f7 	sdiv	r6, r1, r7
 800e9ee:	fb07 1516 	mls	r5, r7, r6, r1
 800e9f2:	3530      	adds	r5, #48	; 0x30
 800e9f4:	2a63      	cmp	r2, #99	; 0x63
 800e9f6:	f104 34ff 	add.w	r4, r4, #4294967295
 800e9fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e9fe:	4631      	mov	r1, r6
 800ea00:	dcf1      	bgt.n	800e9e6 <__exponent+0x22>
 800ea02:	3130      	adds	r1, #48	; 0x30
 800ea04:	f1ae 0502 	sub.w	r5, lr, #2
 800ea08:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ea0c:	1c44      	adds	r4, r0, #1
 800ea0e:	4629      	mov	r1, r5
 800ea10:	4561      	cmp	r1, ip
 800ea12:	d30a      	bcc.n	800ea2a <__exponent+0x66>
 800ea14:	f10d 0209 	add.w	r2, sp, #9
 800ea18:	eba2 020e 	sub.w	r2, r2, lr
 800ea1c:	4565      	cmp	r5, ip
 800ea1e:	bf88      	it	hi
 800ea20:	2200      	movhi	r2, #0
 800ea22:	4413      	add	r3, r2
 800ea24:	1a18      	subs	r0, r3, r0
 800ea26:	b003      	add	sp, #12
 800ea28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ea32:	e7ed      	b.n	800ea10 <__exponent+0x4c>
 800ea34:	2330      	movs	r3, #48	; 0x30
 800ea36:	3130      	adds	r1, #48	; 0x30
 800ea38:	7083      	strb	r3, [r0, #2]
 800ea3a:	70c1      	strb	r1, [r0, #3]
 800ea3c:	1d03      	adds	r3, r0, #4
 800ea3e:	e7f1      	b.n	800ea24 <__exponent+0x60>

0800ea40 <_printf_float>:
 800ea40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea44:	ed2d 8b02 	vpush	{d8}
 800ea48:	b08d      	sub	sp, #52	; 0x34
 800ea4a:	460c      	mov	r4, r1
 800ea4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ea50:	4616      	mov	r6, r2
 800ea52:	461f      	mov	r7, r3
 800ea54:	4605      	mov	r5, r0
 800ea56:	f003 fa6f 	bl	8011f38 <_localeconv_r>
 800ea5a:	f8d0 a000 	ldr.w	sl, [r0]
 800ea5e:	4650      	mov	r0, sl
 800ea60:	f7f1 fbd0 	bl	8000204 <strlen>
 800ea64:	2300      	movs	r3, #0
 800ea66:	930a      	str	r3, [sp, #40]	; 0x28
 800ea68:	6823      	ldr	r3, [r4, #0]
 800ea6a:	9305      	str	r3, [sp, #20]
 800ea6c:	f8d8 3000 	ldr.w	r3, [r8]
 800ea70:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ea74:	3307      	adds	r3, #7
 800ea76:	f023 0307 	bic.w	r3, r3, #7
 800ea7a:	f103 0208 	add.w	r2, r3, #8
 800ea7e:	f8c8 2000 	str.w	r2, [r8]
 800ea82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ea8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ea8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea92:	9307      	str	r3, [sp, #28]
 800ea94:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea98:	ee08 0a10 	vmov	s16, r0
 800ea9c:	4b9f      	ldr	r3, [pc, #636]	; (800ed1c <_printf_float+0x2dc>)
 800ea9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eaa2:	f04f 32ff 	mov.w	r2, #4294967295
 800eaa6:	f7f2 f861 	bl	8000b6c <__aeabi_dcmpun>
 800eaaa:	bb88      	cbnz	r0, 800eb10 <_printf_float+0xd0>
 800eaac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eab0:	4b9a      	ldr	r3, [pc, #616]	; (800ed1c <_printf_float+0x2dc>)
 800eab2:	f04f 32ff 	mov.w	r2, #4294967295
 800eab6:	f7f2 f83b 	bl	8000b30 <__aeabi_dcmple>
 800eaba:	bb48      	cbnz	r0, 800eb10 <_printf_float+0xd0>
 800eabc:	2200      	movs	r2, #0
 800eabe:	2300      	movs	r3, #0
 800eac0:	4640      	mov	r0, r8
 800eac2:	4649      	mov	r1, r9
 800eac4:	f7f2 f82a 	bl	8000b1c <__aeabi_dcmplt>
 800eac8:	b110      	cbz	r0, 800ead0 <_printf_float+0x90>
 800eaca:	232d      	movs	r3, #45	; 0x2d
 800eacc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ead0:	4b93      	ldr	r3, [pc, #588]	; (800ed20 <_printf_float+0x2e0>)
 800ead2:	4894      	ldr	r0, [pc, #592]	; (800ed24 <_printf_float+0x2e4>)
 800ead4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ead8:	bf94      	ite	ls
 800eada:	4698      	movls	r8, r3
 800eadc:	4680      	movhi	r8, r0
 800eade:	2303      	movs	r3, #3
 800eae0:	6123      	str	r3, [r4, #16]
 800eae2:	9b05      	ldr	r3, [sp, #20]
 800eae4:	f023 0204 	bic.w	r2, r3, #4
 800eae8:	6022      	str	r2, [r4, #0]
 800eaea:	f04f 0900 	mov.w	r9, #0
 800eaee:	9700      	str	r7, [sp, #0]
 800eaf0:	4633      	mov	r3, r6
 800eaf2:	aa0b      	add	r2, sp, #44	; 0x2c
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f000 f9d8 	bl	800eeac <_printf_common>
 800eafc:	3001      	adds	r0, #1
 800eafe:	f040 8090 	bne.w	800ec22 <_printf_float+0x1e2>
 800eb02:	f04f 30ff 	mov.w	r0, #4294967295
 800eb06:	b00d      	add	sp, #52	; 0x34
 800eb08:	ecbd 8b02 	vpop	{d8}
 800eb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb10:	4642      	mov	r2, r8
 800eb12:	464b      	mov	r3, r9
 800eb14:	4640      	mov	r0, r8
 800eb16:	4649      	mov	r1, r9
 800eb18:	f7f2 f828 	bl	8000b6c <__aeabi_dcmpun>
 800eb1c:	b140      	cbz	r0, 800eb30 <_printf_float+0xf0>
 800eb1e:	464b      	mov	r3, r9
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	bfbc      	itt	lt
 800eb24:	232d      	movlt	r3, #45	; 0x2d
 800eb26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eb2a:	487f      	ldr	r0, [pc, #508]	; (800ed28 <_printf_float+0x2e8>)
 800eb2c:	4b7f      	ldr	r3, [pc, #508]	; (800ed2c <_printf_float+0x2ec>)
 800eb2e:	e7d1      	b.n	800ead4 <_printf_float+0x94>
 800eb30:	6863      	ldr	r3, [r4, #4]
 800eb32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eb36:	9206      	str	r2, [sp, #24]
 800eb38:	1c5a      	adds	r2, r3, #1
 800eb3a:	d13f      	bne.n	800ebbc <_printf_float+0x17c>
 800eb3c:	2306      	movs	r3, #6
 800eb3e:	6063      	str	r3, [r4, #4]
 800eb40:	9b05      	ldr	r3, [sp, #20]
 800eb42:	6861      	ldr	r1, [r4, #4]
 800eb44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eb48:	2300      	movs	r3, #0
 800eb4a:	9303      	str	r3, [sp, #12]
 800eb4c:	ab0a      	add	r3, sp, #40	; 0x28
 800eb4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800eb52:	ab09      	add	r3, sp, #36	; 0x24
 800eb54:	ec49 8b10 	vmov	d0, r8, r9
 800eb58:	9300      	str	r3, [sp, #0]
 800eb5a:	6022      	str	r2, [r4, #0]
 800eb5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eb60:	4628      	mov	r0, r5
 800eb62:	f7ff fecd 	bl	800e900 <__cvt>
 800eb66:	9b06      	ldr	r3, [sp, #24]
 800eb68:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb6a:	2b47      	cmp	r3, #71	; 0x47
 800eb6c:	4680      	mov	r8, r0
 800eb6e:	d108      	bne.n	800eb82 <_printf_float+0x142>
 800eb70:	1cc8      	adds	r0, r1, #3
 800eb72:	db02      	blt.n	800eb7a <_printf_float+0x13a>
 800eb74:	6863      	ldr	r3, [r4, #4]
 800eb76:	4299      	cmp	r1, r3
 800eb78:	dd41      	ble.n	800ebfe <_printf_float+0x1be>
 800eb7a:	f1ab 0b02 	sub.w	fp, fp, #2
 800eb7e:	fa5f fb8b 	uxtb.w	fp, fp
 800eb82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eb86:	d820      	bhi.n	800ebca <_printf_float+0x18a>
 800eb88:	3901      	subs	r1, #1
 800eb8a:	465a      	mov	r2, fp
 800eb8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eb90:	9109      	str	r1, [sp, #36]	; 0x24
 800eb92:	f7ff ff17 	bl	800e9c4 <__exponent>
 800eb96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb98:	1813      	adds	r3, r2, r0
 800eb9a:	2a01      	cmp	r2, #1
 800eb9c:	4681      	mov	r9, r0
 800eb9e:	6123      	str	r3, [r4, #16]
 800eba0:	dc02      	bgt.n	800eba8 <_printf_float+0x168>
 800eba2:	6822      	ldr	r2, [r4, #0]
 800eba4:	07d2      	lsls	r2, r2, #31
 800eba6:	d501      	bpl.n	800ebac <_printf_float+0x16c>
 800eba8:	3301      	adds	r3, #1
 800ebaa:	6123      	str	r3, [r4, #16]
 800ebac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d09c      	beq.n	800eaee <_printf_float+0xae>
 800ebb4:	232d      	movs	r3, #45	; 0x2d
 800ebb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebba:	e798      	b.n	800eaee <_printf_float+0xae>
 800ebbc:	9a06      	ldr	r2, [sp, #24]
 800ebbe:	2a47      	cmp	r2, #71	; 0x47
 800ebc0:	d1be      	bne.n	800eb40 <_printf_float+0x100>
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d1bc      	bne.n	800eb40 <_printf_float+0x100>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e7b9      	b.n	800eb3e <_printf_float+0xfe>
 800ebca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ebce:	d118      	bne.n	800ec02 <_printf_float+0x1c2>
 800ebd0:	2900      	cmp	r1, #0
 800ebd2:	6863      	ldr	r3, [r4, #4]
 800ebd4:	dd0b      	ble.n	800ebee <_printf_float+0x1ae>
 800ebd6:	6121      	str	r1, [r4, #16]
 800ebd8:	b913      	cbnz	r3, 800ebe0 <_printf_float+0x1a0>
 800ebda:	6822      	ldr	r2, [r4, #0]
 800ebdc:	07d0      	lsls	r0, r2, #31
 800ebde:	d502      	bpl.n	800ebe6 <_printf_float+0x1a6>
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	440b      	add	r3, r1
 800ebe4:	6123      	str	r3, [r4, #16]
 800ebe6:	65a1      	str	r1, [r4, #88]	; 0x58
 800ebe8:	f04f 0900 	mov.w	r9, #0
 800ebec:	e7de      	b.n	800ebac <_printf_float+0x16c>
 800ebee:	b913      	cbnz	r3, 800ebf6 <_printf_float+0x1b6>
 800ebf0:	6822      	ldr	r2, [r4, #0]
 800ebf2:	07d2      	lsls	r2, r2, #31
 800ebf4:	d501      	bpl.n	800ebfa <_printf_float+0x1ba>
 800ebf6:	3302      	adds	r3, #2
 800ebf8:	e7f4      	b.n	800ebe4 <_printf_float+0x1a4>
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e7f2      	b.n	800ebe4 <_printf_float+0x1a4>
 800ebfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ec02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec04:	4299      	cmp	r1, r3
 800ec06:	db05      	blt.n	800ec14 <_printf_float+0x1d4>
 800ec08:	6823      	ldr	r3, [r4, #0]
 800ec0a:	6121      	str	r1, [r4, #16]
 800ec0c:	07d8      	lsls	r0, r3, #31
 800ec0e:	d5ea      	bpl.n	800ebe6 <_printf_float+0x1a6>
 800ec10:	1c4b      	adds	r3, r1, #1
 800ec12:	e7e7      	b.n	800ebe4 <_printf_float+0x1a4>
 800ec14:	2900      	cmp	r1, #0
 800ec16:	bfd4      	ite	le
 800ec18:	f1c1 0202 	rsble	r2, r1, #2
 800ec1c:	2201      	movgt	r2, #1
 800ec1e:	4413      	add	r3, r2
 800ec20:	e7e0      	b.n	800ebe4 <_printf_float+0x1a4>
 800ec22:	6823      	ldr	r3, [r4, #0]
 800ec24:	055a      	lsls	r2, r3, #21
 800ec26:	d407      	bmi.n	800ec38 <_printf_float+0x1f8>
 800ec28:	6923      	ldr	r3, [r4, #16]
 800ec2a:	4642      	mov	r2, r8
 800ec2c:	4631      	mov	r1, r6
 800ec2e:	4628      	mov	r0, r5
 800ec30:	47b8      	blx	r7
 800ec32:	3001      	adds	r0, #1
 800ec34:	d12c      	bne.n	800ec90 <_printf_float+0x250>
 800ec36:	e764      	b.n	800eb02 <_printf_float+0xc2>
 800ec38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec3c:	f240 80e0 	bls.w	800ee00 <_printf_float+0x3c0>
 800ec40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec44:	2200      	movs	r2, #0
 800ec46:	2300      	movs	r3, #0
 800ec48:	f7f1 ff5e 	bl	8000b08 <__aeabi_dcmpeq>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d034      	beq.n	800ecba <_printf_float+0x27a>
 800ec50:	4a37      	ldr	r2, [pc, #220]	; (800ed30 <_printf_float+0x2f0>)
 800ec52:	2301      	movs	r3, #1
 800ec54:	4631      	mov	r1, r6
 800ec56:	4628      	mov	r0, r5
 800ec58:	47b8      	blx	r7
 800ec5a:	3001      	adds	r0, #1
 800ec5c:	f43f af51 	beq.w	800eb02 <_printf_float+0xc2>
 800ec60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec64:	429a      	cmp	r2, r3
 800ec66:	db02      	blt.n	800ec6e <_printf_float+0x22e>
 800ec68:	6823      	ldr	r3, [r4, #0]
 800ec6a:	07d8      	lsls	r0, r3, #31
 800ec6c:	d510      	bpl.n	800ec90 <_printf_float+0x250>
 800ec6e:	ee18 3a10 	vmov	r3, s16
 800ec72:	4652      	mov	r2, sl
 800ec74:	4631      	mov	r1, r6
 800ec76:	4628      	mov	r0, r5
 800ec78:	47b8      	blx	r7
 800ec7a:	3001      	adds	r0, #1
 800ec7c:	f43f af41 	beq.w	800eb02 <_printf_float+0xc2>
 800ec80:	f04f 0800 	mov.w	r8, #0
 800ec84:	f104 091a 	add.w	r9, r4, #26
 800ec88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec8a:	3b01      	subs	r3, #1
 800ec8c:	4543      	cmp	r3, r8
 800ec8e:	dc09      	bgt.n	800eca4 <_printf_float+0x264>
 800ec90:	6823      	ldr	r3, [r4, #0]
 800ec92:	079b      	lsls	r3, r3, #30
 800ec94:	f100 8105 	bmi.w	800eea2 <_printf_float+0x462>
 800ec98:	68e0      	ldr	r0, [r4, #12]
 800ec9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec9c:	4298      	cmp	r0, r3
 800ec9e:	bfb8      	it	lt
 800eca0:	4618      	movlt	r0, r3
 800eca2:	e730      	b.n	800eb06 <_printf_float+0xc6>
 800eca4:	2301      	movs	r3, #1
 800eca6:	464a      	mov	r2, r9
 800eca8:	4631      	mov	r1, r6
 800ecaa:	4628      	mov	r0, r5
 800ecac:	47b8      	blx	r7
 800ecae:	3001      	adds	r0, #1
 800ecb0:	f43f af27 	beq.w	800eb02 <_printf_float+0xc2>
 800ecb4:	f108 0801 	add.w	r8, r8, #1
 800ecb8:	e7e6      	b.n	800ec88 <_printf_float+0x248>
 800ecba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	dc39      	bgt.n	800ed34 <_printf_float+0x2f4>
 800ecc0:	4a1b      	ldr	r2, [pc, #108]	; (800ed30 <_printf_float+0x2f0>)
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	4631      	mov	r1, r6
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	47b8      	blx	r7
 800ecca:	3001      	adds	r0, #1
 800eccc:	f43f af19 	beq.w	800eb02 <_printf_float+0xc2>
 800ecd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecd4:	4313      	orrs	r3, r2
 800ecd6:	d102      	bne.n	800ecde <_printf_float+0x29e>
 800ecd8:	6823      	ldr	r3, [r4, #0]
 800ecda:	07d9      	lsls	r1, r3, #31
 800ecdc:	d5d8      	bpl.n	800ec90 <_printf_float+0x250>
 800ecde:	ee18 3a10 	vmov	r3, s16
 800ece2:	4652      	mov	r2, sl
 800ece4:	4631      	mov	r1, r6
 800ece6:	4628      	mov	r0, r5
 800ece8:	47b8      	blx	r7
 800ecea:	3001      	adds	r0, #1
 800ecec:	f43f af09 	beq.w	800eb02 <_printf_float+0xc2>
 800ecf0:	f04f 0900 	mov.w	r9, #0
 800ecf4:	f104 0a1a 	add.w	sl, r4, #26
 800ecf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecfa:	425b      	negs	r3, r3
 800ecfc:	454b      	cmp	r3, r9
 800ecfe:	dc01      	bgt.n	800ed04 <_printf_float+0x2c4>
 800ed00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed02:	e792      	b.n	800ec2a <_printf_float+0x1ea>
 800ed04:	2301      	movs	r3, #1
 800ed06:	4652      	mov	r2, sl
 800ed08:	4631      	mov	r1, r6
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	47b8      	blx	r7
 800ed0e:	3001      	adds	r0, #1
 800ed10:	f43f aef7 	beq.w	800eb02 <_printf_float+0xc2>
 800ed14:	f109 0901 	add.w	r9, r9, #1
 800ed18:	e7ee      	b.n	800ecf8 <_printf_float+0x2b8>
 800ed1a:	bf00      	nop
 800ed1c:	7fefffff 	.word	0x7fefffff
 800ed20:	080149e8 	.word	0x080149e8
 800ed24:	080149ec 	.word	0x080149ec
 800ed28:	080149f4 	.word	0x080149f4
 800ed2c:	080149f0 	.word	0x080149f0
 800ed30:	08014d49 	.word	0x08014d49
 800ed34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	bfa8      	it	ge
 800ed3c:	461a      	movge	r2, r3
 800ed3e:	2a00      	cmp	r2, #0
 800ed40:	4691      	mov	r9, r2
 800ed42:	dc37      	bgt.n	800edb4 <_printf_float+0x374>
 800ed44:	f04f 0b00 	mov.w	fp, #0
 800ed48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed4c:	f104 021a 	add.w	r2, r4, #26
 800ed50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed52:	9305      	str	r3, [sp, #20]
 800ed54:	eba3 0309 	sub.w	r3, r3, r9
 800ed58:	455b      	cmp	r3, fp
 800ed5a:	dc33      	bgt.n	800edc4 <_printf_float+0x384>
 800ed5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed60:	429a      	cmp	r2, r3
 800ed62:	db3b      	blt.n	800eddc <_printf_float+0x39c>
 800ed64:	6823      	ldr	r3, [r4, #0]
 800ed66:	07da      	lsls	r2, r3, #31
 800ed68:	d438      	bmi.n	800eddc <_printf_float+0x39c>
 800ed6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed6c:	9a05      	ldr	r2, [sp, #20]
 800ed6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed70:	1a9a      	subs	r2, r3, r2
 800ed72:	eba3 0901 	sub.w	r9, r3, r1
 800ed76:	4591      	cmp	r9, r2
 800ed78:	bfa8      	it	ge
 800ed7a:	4691      	movge	r9, r2
 800ed7c:	f1b9 0f00 	cmp.w	r9, #0
 800ed80:	dc35      	bgt.n	800edee <_printf_float+0x3ae>
 800ed82:	f04f 0800 	mov.w	r8, #0
 800ed86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed8a:	f104 0a1a 	add.w	sl, r4, #26
 800ed8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed92:	1a9b      	subs	r3, r3, r2
 800ed94:	eba3 0309 	sub.w	r3, r3, r9
 800ed98:	4543      	cmp	r3, r8
 800ed9a:	f77f af79 	ble.w	800ec90 <_printf_float+0x250>
 800ed9e:	2301      	movs	r3, #1
 800eda0:	4652      	mov	r2, sl
 800eda2:	4631      	mov	r1, r6
 800eda4:	4628      	mov	r0, r5
 800eda6:	47b8      	blx	r7
 800eda8:	3001      	adds	r0, #1
 800edaa:	f43f aeaa 	beq.w	800eb02 <_printf_float+0xc2>
 800edae:	f108 0801 	add.w	r8, r8, #1
 800edb2:	e7ec      	b.n	800ed8e <_printf_float+0x34e>
 800edb4:	4613      	mov	r3, r2
 800edb6:	4631      	mov	r1, r6
 800edb8:	4642      	mov	r2, r8
 800edba:	4628      	mov	r0, r5
 800edbc:	47b8      	blx	r7
 800edbe:	3001      	adds	r0, #1
 800edc0:	d1c0      	bne.n	800ed44 <_printf_float+0x304>
 800edc2:	e69e      	b.n	800eb02 <_printf_float+0xc2>
 800edc4:	2301      	movs	r3, #1
 800edc6:	4631      	mov	r1, r6
 800edc8:	4628      	mov	r0, r5
 800edca:	9205      	str	r2, [sp, #20]
 800edcc:	47b8      	blx	r7
 800edce:	3001      	adds	r0, #1
 800edd0:	f43f ae97 	beq.w	800eb02 <_printf_float+0xc2>
 800edd4:	9a05      	ldr	r2, [sp, #20]
 800edd6:	f10b 0b01 	add.w	fp, fp, #1
 800edda:	e7b9      	b.n	800ed50 <_printf_float+0x310>
 800eddc:	ee18 3a10 	vmov	r3, s16
 800ede0:	4652      	mov	r2, sl
 800ede2:	4631      	mov	r1, r6
 800ede4:	4628      	mov	r0, r5
 800ede6:	47b8      	blx	r7
 800ede8:	3001      	adds	r0, #1
 800edea:	d1be      	bne.n	800ed6a <_printf_float+0x32a>
 800edec:	e689      	b.n	800eb02 <_printf_float+0xc2>
 800edee:	9a05      	ldr	r2, [sp, #20]
 800edf0:	464b      	mov	r3, r9
 800edf2:	4442      	add	r2, r8
 800edf4:	4631      	mov	r1, r6
 800edf6:	4628      	mov	r0, r5
 800edf8:	47b8      	blx	r7
 800edfa:	3001      	adds	r0, #1
 800edfc:	d1c1      	bne.n	800ed82 <_printf_float+0x342>
 800edfe:	e680      	b.n	800eb02 <_printf_float+0xc2>
 800ee00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee02:	2a01      	cmp	r2, #1
 800ee04:	dc01      	bgt.n	800ee0a <_printf_float+0x3ca>
 800ee06:	07db      	lsls	r3, r3, #31
 800ee08:	d538      	bpl.n	800ee7c <_printf_float+0x43c>
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	4642      	mov	r2, r8
 800ee0e:	4631      	mov	r1, r6
 800ee10:	4628      	mov	r0, r5
 800ee12:	47b8      	blx	r7
 800ee14:	3001      	adds	r0, #1
 800ee16:	f43f ae74 	beq.w	800eb02 <_printf_float+0xc2>
 800ee1a:	ee18 3a10 	vmov	r3, s16
 800ee1e:	4652      	mov	r2, sl
 800ee20:	4631      	mov	r1, r6
 800ee22:	4628      	mov	r0, r5
 800ee24:	47b8      	blx	r7
 800ee26:	3001      	adds	r0, #1
 800ee28:	f43f ae6b 	beq.w	800eb02 <_printf_float+0xc2>
 800ee2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ee30:	2200      	movs	r2, #0
 800ee32:	2300      	movs	r3, #0
 800ee34:	f7f1 fe68 	bl	8000b08 <__aeabi_dcmpeq>
 800ee38:	b9d8      	cbnz	r0, 800ee72 <_printf_float+0x432>
 800ee3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee3c:	f108 0201 	add.w	r2, r8, #1
 800ee40:	3b01      	subs	r3, #1
 800ee42:	4631      	mov	r1, r6
 800ee44:	4628      	mov	r0, r5
 800ee46:	47b8      	blx	r7
 800ee48:	3001      	adds	r0, #1
 800ee4a:	d10e      	bne.n	800ee6a <_printf_float+0x42a>
 800ee4c:	e659      	b.n	800eb02 <_printf_float+0xc2>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	4652      	mov	r2, sl
 800ee52:	4631      	mov	r1, r6
 800ee54:	4628      	mov	r0, r5
 800ee56:	47b8      	blx	r7
 800ee58:	3001      	adds	r0, #1
 800ee5a:	f43f ae52 	beq.w	800eb02 <_printf_float+0xc2>
 800ee5e:	f108 0801 	add.w	r8, r8, #1
 800ee62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee64:	3b01      	subs	r3, #1
 800ee66:	4543      	cmp	r3, r8
 800ee68:	dcf1      	bgt.n	800ee4e <_printf_float+0x40e>
 800ee6a:	464b      	mov	r3, r9
 800ee6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ee70:	e6dc      	b.n	800ec2c <_printf_float+0x1ec>
 800ee72:	f04f 0800 	mov.w	r8, #0
 800ee76:	f104 0a1a 	add.w	sl, r4, #26
 800ee7a:	e7f2      	b.n	800ee62 <_printf_float+0x422>
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	4642      	mov	r2, r8
 800ee80:	e7df      	b.n	800ee42 <_printf_float+0x402>
 800ee82:	2301      	movs	r3, #1
 800ee84:	464a      	mov	r2, r9
 800ee86:	4631      	mov	r1, r6
 800ee88:	4628      	mov	r0, r5
 800ee8a:	47b8      	blx	r7
 800ee8c:	3001      	adds	r0, #1
 800ee8e:	f43f ae38 	beq.w	800eb02 <_printf_float+0xc2>
 800ee92:	f108 0801 	add.w	r8, r8, #1
 800ee96:	68e3      	ldr	r3, [r4, #12]
 800ee98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee9a:	1a5b      	subs	r3, r3, r1
 800ee9c:	4543      	cmp	r3, r8
 800ee9e:	dcf0      	bgt.n	800ee82 <_printf_float+0x442>
 800eea0:	e6fa      	b.n	800ec98 <_printf_float+0x258>
 800eea2:	f04f 0800 	mov.w	r8, #0
 800eea6:	f104 0919 	add.w	r9, r4, #25
 800eeaa:	e7f4      	b.n	800ee96 <_printf_float+0x456>

0800eeac <_printf_common>:
 800eeac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeb0:	4616      	mov	r6, r2
 800eeb2:	4699      	mov	r9, r3
 800eeb4:	688a      	ldr	r2, [r1, #8]
 800eeb6:	690b      	ldr	r3, [r1, #16]
 800eeb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eebc:	4293      	cmp	r3, r2
 800eebe:	bfb8      	it	lt
 800eec0:	4613      	movlt	r3, r2
 800eec2:	6033      	str	r3, [r6, #0]
 800eec4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eec8:	4607      	mov	r7, r0
 800eeca:	460c      	mov	r4, r1
 800eecc:	b10a      	cbz	r2, 800eed2 <_printf_common+0x26>
 800eece:	3301      	adds	r3, #1
 800eed0:	6033      	str	r3, [r6, #0]
 800eed2:	6823      	ldr	r3, [r4, #0]
 800eed4:	0699      	lsls	r1, r3, #26
 800eed6:	bf42      	ittt	mi
 800eed8:	6833      	ldrmi	r3, [r6, #0]
 800eeda:	3302      	addmi	r3, #2
 800eedc:	6033      	strmi	r3, [r6, #0]
 800eede:	6825      	ldr	r5, [r4, #0]
 800eee0:	f015 0506 	ands.w	r5, r5, #6
 800eee4:	d106      	bne.n	800eef4 <_printf_common+0x48>
 800eee6:	f104 0a19 	add.w	sl, r4, #25
 800eeea:	68e3      	ldr	r3, [r4, #12]
 800eeec:	6832      	ldr	r2, [r6, #0]
 800eeee:	1a9b      	subs	r3, r3, r2
 800eef0:	42ab      	cmp	r3, r5
 800eef2:	dc26      	bgt.n	800ef42 <_printf_common+0x96>
 800eef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eef8:	1e13      	subs	r3, r2, #0
 800eefa:	6822      	ldr	r2, [r4, #0]
 800eefc:	bf18      	it	ne
 800eefe:	2301      	movne	r3, #1
 800ef00:	0692      	lsls	r2, r2, #26
 800ef02:	d42b      	bmi.n	800ef5c <_printf_common+0xb0>
 800ef04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef08:	4649      	mov	r1, r9
 800ef0a:	4638      	mov	r0, r7
 800ef0c:	47c0      	blx	r8
 800ef0e:	3001      	adds	r0, #1
 800ef10:	d01e      	beq.n	800ef50 <_printf_common+0xa4>
 800ef12:	6823      	ldr	r3, [r4, #0]
 800ef14:	68e5      	ldr	r5, [r4, #12]
 800ef16:	6832      	ldr	r2, [r6, #0]
 800ef18:	f003 0306 	and.w	r3, r3, #6
 800ef1c:	2b04      	cmp	r3, #4
 800ef1e:	bf08      	it	eq
 800ef20:	1aad      	subeq	r5, r5, r2
 800ef22:	68a3      	ldr	r3, [r4, #8]
 800ef24:	6922      	ldr	r2, [r4, #16]
 800ef26:	bf0c      	ite	eq
 800ef28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef2c:	2500      	movne	r5, #0
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	bfc4      	itt	gt
 800ef32:	1a9b      	subgt	r3, r3, r2
 800ef34:	18ed      	addgt	r5, r5, r3
 800ef36:	2600      	movs	r6, #0
 800ef38:	341a      	adds	r4, #26
 800ef3a:	42b5      	cmp	r5, r6
 800ef3c:	d11a      	bne.n	800ef74 <_printf_common+0xc8>
 800ef3e:	2000      	movs	r0, #0
 800ef40:	e008      	b.n	800ef54 <_printf_common+0xa8>
 800ef42:	2301      	movs	r3, #1
 800ef44:	4652      	mov	r2, sl
 800ef46:	4649      	mov	r1, r9
 800ef48:	4638      	mov	r0, r7
 800ef4a:	47c0      	blx	r8
 800ef4c:	3001      	adds	r0, #1
 800ef4e:	d103      	bne.n	800ef58 <_printf_common+0xac>
 800ef50:	f04f 30ff 	mov.w	r0, #4294967295
 800ef54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef58:	3501      	adds	r5, #1
 800ef5a:	e7c6      	b.n	800eeea <_printf_common+0x3e>
 800ef5c:	18e1      	adds	r1, r4, r3
 800ef5e:	1c5a      	adds	r2, r3, #1
 800ef60:	2030      	movs	r0, #48	; 0x30
 800ef62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef66:	4422      	add	r2, r4
 800ef68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef70:	3302      	adds	r3, #2
 800ef72:	e7c7      	b.n	800ef04 <_printf_common+0x58>
 800ef74:	2301      	movs	r3, #1
 800ef76:	4622      	mov	r2, r4
 800ef78:	4649      	mov	r1, r9
 800ef7a:	4638      	mov	r0, r7
 800ef7c:	47c0      	blx	r8
 800ef7e:	3001      	adds	r0, #1
 800ef80:	d0e6      	beq.n	800ef50 <_printf_common+0xa4>
 800ef82:	3601      	adds	r6, #1
 800ef84:	e7d9      	b.n	800ef3a <_printf_common+0x8e>
	...

0800ef88 <_printf_i>:
 800ef88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef8c:	7e0f      	ldrb	r7, [r1, #24]
 800ef8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ef90:	2f78      	cmp	r7, #120	; 0x78
 800ef92:	4691      	mov	r9, r2
 800ef94:	4680      	mov	r8, r0
 800ef96:	460c      	mov	r4, r1
 800ef98:	469a      	mov	sl, r3
 800ef9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ef9e:	d807      	bhi.n	800efb0 <_printf_i+0x28>
 800efa0:	2f62      	cmp	r7, #98	; 0x62
 800efa2:	d80a      	bhi.n	800efba <_printf_i+0x32>
 800efa4:	2f00      	cmp	r7, #0
 800efa6:	f000 80d8 	beq.w	800f15a <_printf_i+0x1d2>
 800efaa:	2f58      	cmp	r7, #88	; 0x58
 800efac:	f000 80a3 	beq.w	800f0f6 <_printf_i+0x16e>
 800efb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efb8:	e03a      	b.n	800f030 <_printf_i+0xa8>
 800efba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800efbe:	2b15      	cmp	r3, #21
 800efc0:	d8f6      	bhi.n	800efb0 <_printf_i+0x28>
 800efc2:	a101      	add	r1, pc, #4	; (adr r1, 800efc8 <_printf_i+0x40>)
 800efc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800efc8:	0800f021 	.word	0x0800f021
 800efcc:	0800f035 	.word	0x0800f035
 800efd0:	0800efb1 	.word	0x0800efb1
 800efd4:	0800efb1 	.word	0x0800efb1
 800efd8:	0800efb1 	.word	0x0800efb1
 800efdc:	0800efb1 	.word	0x0800efb1
 800efe0:	0800f035 	.word	0x0800f035
 800efe4:	0800efb1 	.word	0x0800efb1
 800efe8:	0800efb1 	.word	0x0800efb1
 800efec:	0800efb1 	.word	0x0800efb1
 800eff0:	0800efb1 	.word	0x0800efb1
 800eff4:	0800f141 	.word	0x0800f141
 800eff8:	0800f065 	.word	0x0800f065
 800effc:	0800f123 	.word	0x0800f123
 800f000:	0800efb1 	.word	0x0800efb1
 800f004:	0800efb1 	.word	0x0800efb1
 800f008:	0800f163 	.word	0x0800f163
 800f00c:	0800efb1 	.word	0x0800efb1
 800f010:	0800f065 	.word	0x0800f065
 800f014:	0800efb1 	.word	0x0800efb1
 800f018:	0800efb1 	.word	0x0800efb1
 800f01c:	0800f12b 	.word	0x0800f12b
 800f020:	682b      	ldr	r3, [r5, #0]
 800f022:	1d1a      	adds	r2, r3, #4
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	602a      	str	r2, [r5, #0]
 800f028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f02c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f030:	2301      	movs	r3, #1
 800f032:	e0a3      	b.n	800f17c <_printf_i+0x1f4>
 800f034:	6820      	ldr	r0, [r4, #0]
 800f036:	6829      	ldr	r1, [r5, #0]
 800f038:	0606      	lsls	r6, r0, #24
 800f03a:	f101 0304 	add.w	r3, r1, #4
 800f03e:	d50a      	bpl.n	800f056 <_printf_i+0xce>
 800f040:	680e      	ldr	r6, [r1, #0]
 800f042:	602b      	str	r3, [r5, #0]
 800f044:	2e00      	cmp	r6, #0
 800f046:	da03      	bge.n	800f050 <_printf_i+0xc8>
 800f048:	232d      	movs	r3, #45	; 0x2d
 800f04a:	4276      	negs	r6, r6
 800f04c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f050:	485e      	ldr	r0, [pc, #376]	; (800f1cc <_printf_i+0x244>)
 800f052:	230a      	movs	r3, #10
 800f054:	e019      	b.n	800f08a <_printf_i+0x102>
 800f056:	680e      	ldr	r6, [r1, #0]
 800f058:	602b      	str	r3, [r5, #0]
 800f05a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f05e:	bf18      	it	ne
 800f060:	b236      	sxthne	r6, r6
 800f062:	e7ef      	b.n	800f044 <_printf_i+0xbc>
 800f064:	682b      	ldr	r3, [r5, #0]
 800f066:	6820      	ldr	r0, [r4, #0]
 800f068:	1d19      	adds	r1, r3, #4
 800f06a:	6029      	str	r1, [r5, #0]
 800f06c:	0601      	lsls	r1, r0, #24
 800f06e:	d501      	bpl.n	800f074 <_printf_i+0xec>
 800f070:	681e      	ldr	r6, [r3, #0]
 800f072:	e002      	b.n	800f07a <_printf_i+0xf2>
 800f074:	0646      	lsls	r6, r0, #25
 800f076:	d5fb      	bpl.n	800f070 <_printf_i+0xe8>
 800f078:	881e      	ldrh	r6, [r3, #0]
 800f07a:	4854      	ldr	r0, [pc, #336]	; (800f1cc <_printf_i+0x244>)
 800f07c:	2f6f      	cmp	r7, #111	; 0x6f
 800f07e:	bf0c      	ite	eq
 800f080:	2308      	moveq	r3, #8
 800f082:	230a      	movne	r3, #10
 800f084:	2100      	movs	r1, #0
 800f086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f08a:	6865      	ldr	r5, [r4, #4]
 800f08c:	60a5      	str	r5, [r4, #8]
 800f08e:	2d00      	cmp	r5, #0
 800f090:	bfa2      	ittt	ge
 800f092:	6821      	ldrge	r1, [r4, #0]
 800f094:	f021 0104 	bicge.w	r1, r1, #4
 800f098:	6021      	strge	r1, [r4, #0]
 800f09a:	b90e      	cbnz	r6, 800f0a0 <_printf_i+0x118>
 800f09c:	2d00      	cmp	r5, #0
 800f09e:	d04d      	beq.n	800f13c <_printf_i+0x1b4>
 800f0a0:	4615      	mov	r5, r2
 800f0a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f0a6:	fb03 6711 	mls	r7, r3, r1, r6
 800f0aa:	5dc7      	ldrb	r7, [r0, r7]
 800f0ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f0b0:	4637      	mov	r7, r6
 800f0b2:	42bb      	cmp	r3, r7
 800f0b4:	460e      	mov	r6, r1
 800f0b6:	d9f4      	bls.n	800f0a2 <_printf_i+0x11a>
 800f0b8:	2b08      	cmp	r3, #8
 800f0ba:	d10b      	bne.n	800f0d4 <_printf_i+0x14c>
 800f0bc:	6823      	ldr	r3, [r4, #0]
 800f0be:	07de      	lsls	r6, r3, #31
 800f0c0:	d508      	bpl.n	800f0d4 <_printf_i+0x14c>
 800f0c2:	6923      	ldr	r3, [r4, #16]
 800f0c4:	6861      	ldr	r1, [r4, #4]
 800f0c6:	4299      	cmp	r1, r3
 800f0c8:	bfde      	ittt	le
 800f0ca:	2330      	movle	r3, #48	; 0x30
 800f0cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f0d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f0d4:	1b52      	subs	r2, r2, r5
 800f0d6:	6122      	str	r2, [r4, #16]
 800f0d8:	f8cd a000 	str.w	sl, [sp]
 800f0dc:	464b      	mov	r3, r9
 800f0de:	aa03      	add	r2, sp, #12
 800f0e0:	4621      	mov	r1, r4
 800f0e2:	4640      	mov	r0, r8
 800f0e4:	f7ff fee2 	bl	800eeac <_printf_common>
 800f0e8:	3001      	adds	r0, #1
 800f0ea:	d14c      	bne.n	800f186 <_printf_i+0x1fe>
 800f0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f0:	b004      	add	sp, #16
 800f0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0f6:	4835      	ldr	r0, [pc, #212]	; (800f1cc <_printf_i+0x244>)
 800f0f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f0fc:	6829      	ldr	r1, [r5, #0]
 800f0fe:	6823      	ldr	r3, [r4, #0]
 800f100:	f851 6b04 	ldr.w	r6, [r1], #4
 800f104:	6029      	str	r1, [r5, #0]
 800f106:	061d      	lsls	r5, r3, #24
 800f108:	d514      	bpl.n	800f134 <_printf_i+0x1ac>
 800f10a:	07df      	lsls	r7, r3, #31
 800f10c:	bf44      	itt	mi
 800f10e:	f043 0320 	orrmi.w	r3, r3, #32
 800f112:	6023      	strmi	r3, [r4, #0]
 800f114:	b91e      	cbnz	r6, 800f11e <_printf_i+0x196>
 800f116:	6823      	ldr	r3, [r4, #0]
 800f118:	f023 0320 	bic.w	r3, r3, #32
 800f11c:	6023      	str	r3, [r4, #0]
 800f11e:	2310      	movs	r3, #16
 800f120:	e7b0      	b.n	800f084 <_printf_i+0xfc>
 800f122:	6823      	ldr	r3, [r4, #0]
 800f124:	f043 0320 	orr.w	r3, r3, #32
 800f128:	6023      	str	r3, [r4, #0]
 800f12a:	2378      	movs	r3, #120	; 0x78
 800f12c:	4828      	ldr	r0, [pc, #160]	; (800f1d0 <_printf_i+0x248>)
 800f12e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f132:	e7e3      	b.n	800f0fc <_printf_i+0x174>
 800f134:	0659      	lsls	r1, r3, #25
 800f136:	bf48      	it	mi
 800f138:	b2b6      	uxthmi	r6, r6
 800f13a:	e7e6      	b.n	800f10a <_printf_i+0x182>
 800f13c:	4615      	mov	r5, r2
 800f13e:	e7bb      	b.n	800f0b8 <_printf_i+0x130>
 800f140:	682b      	ldr	r3, [r5, #0]
 800f142:	6826      	ldr	r6, [r4, #0]
 800f144:	6961      	ldr	r1, [r4, #20]
 800f146:	1d18      	adds	r0, r3, #4
 800f148:	6028      	str	r0, [r5, #0]
 800f14a:	0635      	lsls	r5, r6, #24
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	d501      	bpl.n	800f154 <_printf_i+0x1cc>
 800f150:	6019      	str	r1, [r3, #0]
 800f152:	e002      	b.n	800f15a <_printf_i+0x1d2>
 800f154:	0670      	lsls	r0, r6, #25
 800f156:	d5fb      	bpl.n	800f150 <_printf_i+0x1c8>
 800f158:	8019      	strh	r1, [r3, #0]
 800f15a:	2300      	movs	r3, #0
 800f15c:	6123      	str	r3, [r4, #16]
 800f15e:	4615      	mov	r5, r2
 800f160:	e7ba      	b.n	800f0d8 <_printf_i+0x150>
 800f162:	682b      	ldr	r3, [r5, #0]
 800f164:	1d1a      	adds	r2, r3, #4
 800f166:	602a      	str	r2, [r5, #0]
 800f168:	681d      	ldr	r5, [r3, #0]
 800f16a:	6862      	ldr	r2, [r4, #4]
 800f16c:	2100      	movs	r1, #0
 800f16e:	4628      	mov	r0, r5
 800f170:	f7f1 f856 	bl	8000220 <memchr>
 800f174:	b108      	cbz	r0, 800f17a <_printf_i+0x1f2>
 800f176:	1b40      	subs	r0, r0, r5
 800f178:	6060      	str	r0, [r4, #4]
 800f17a:	6863      	ldr	r3, [r4, #4]
 800f17c:	6123      	str	r3, [r4, #16]
 800f17e:	2300      	movs	r3, #0
 800f180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f184:	e7a8      	b.n	800f0d8 <_printf_i+0x150>
 800f186:	6923      	ldr	r3, [r4, #16]
 800f188:	462a      	mov	r2, r5
 800f18a:	4649      	mov	r1, r9
 800f18c:	4640      	mov	r0, r8
 800f18e:	47d0      	blx	sl
 800f190:	3001      	adds	r0, #1
 800f192:	d0ab      	beq.n	800f0ec <_printf_i+0x164>
 800f194:	6823      	ldr	r3, [r4, #0]
 800f196:	079b      	lsls	r3, r3, #30
 800f198:	d413      	bmi.n	800f1c2 <_printf_i+0x23a>
 800f19a:	68e0      	ldr	r0, [r4, #12]
 800f19c:	9b03      	ldr	r3, [sp, #12]
 800f19e:	4298      	cmp	r0, r3
 800f1a0:	bfb8      	it	lt
 800f1a2:	4618      	movlt	r0, r3
 800f1a4:	e7a4      	b.n	800f0f0 <_printf_i+0x168>
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	4632      	mov	r2, r6
 800f1aa:	4649      	mov	r1, r9
 800f1ac:	4640      	mov	r0, r8
 800f1ae:	47d0      	blx	sl
 800f1b0:	3001      	adds	r0, #1
 800f1b2:	d09b      	beq.n	800f0ec <_printf_i+0x164>
 800f1b4:	3501      	adds	r5, #1
 800f1b6:	68e3      	ldr	r3, [r4, #12]
 800f1b8:	9903      	ldr	r1, [sp, #12]
 800f1ba:	1a5b      	subs	r3, r3, r1
 800f1bc:	42ab      	cmp	r3, r5
 800f1be:	dcf2      	bgt.n	800f1a6 <_printf_i+0x21e>
 800f1c0:	e7eb      	b.n	800f19a <_printf_i+0x212>
 800f1c2:	2500      	movs	r5, #0
 800f1c4:	f104 0619 	add.w	r6, r4, #25
 800f1c8:	e7f5      	b.n	800f1b6 <_printf_i+0x22e>
 800f1ca:	bf00      	nop
 800f1cc:	080149f8 	.word	0x080149f8
 800f1d0:	08014a09 	.word	0x08014a09

0800f1d4 <_scanf_float>:
 800f1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d8:	b087      	sub	sp, #28
 800f1da:	4617      	mov	r7, r2
 800f1dc:	9303      	str	r3, [sp, #12]
 800f1de:	688b      	ldr	r3, [r1, #8]
 800f1e0:	1e5a      	subs	r2, r3, #1
 800f1e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f1e6:	bf83      	ittte	hi
 800f1e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f1ec:	195b      	addhi	r3, r3, r5
 800f1ee:	9302      	strhi	r3, [sp, #8]
 800f1f0:	2300      	movls	r3, #0
 800f1f2:	bf86      	itte	hi
 800f1f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f1f8:	608b      	strhi	r3, [r1, #8]
 800f1fa:	9302      	strls	r3, [sp, #8]
 800f1fc:	680b      	ldr	r3, [r1, #0]
 800f1fe:	468b      	mov	fp, r1
 800f200:	2500      	movs	r5, #0
 800f202:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f206:	f84b 3b1c 	str.w	r3, [fp], #28
 800f20a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f20e:	4680      	mov	r8, r0
 800f210:	460c      	mov	r4, r1
 800f212:	465e      	mov	r6, fp
 800f214:	46aa      	mov	sl, r5
 800f216:	46a9      	mov	r9, r5
 800f218:	9501      	str	r5, [sp, #4]
 800f21a:	68a2      	ldr	r2, [r4, #8]
 800f21c:	b152      	cbz	r2, 800f234 <_scanf_float+0x60>
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	2b4e      	cmp	r3, #78	; 0x4e
 800f224:	d864      	bhi.n	800f2f0 <_scanf_float+0x11c>
 800f226:	2b40      	cmp	r3, #64	; 0x40
 800f228:	d83c      	bhi.n	800f2a4 <_scanf_float+0xd0>
 800f22a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f22e:	b2c8      	uxtb	r0, r1
 800f230:	280e      	cmp	r0, #14
 800f232:	d93a      	bls.n	800f2aa <_scanf_float+0xd6>
 800f234:	f1b9 0f00 	cmp.w	r9, #0
 800f238:	d003      	beq.n	800f242 <_scanf_float+0x6e>
 800f23a:	6823      	ldr	r3, [r4, #0]
 800f23c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f240:	6023      	str	r3, [r4, #0]
 800f242:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f246:	f1ba 0f01 	cmp.w	sl, #1
 800f24a:	f200 8113 	bhi.w	800f474 <_scanf_float+0x2a0>
 800f24e:	455e      	cmp	r6, fp
 800f250:	f200 8105 	bhi.w	800f45e <_scanf_float+0x28a>
 800f254:	2501      	movs	r5, #1
 800f256:	4628      	mov	r0, r5
 800f258:	b007      	add	sp, #28
 800f25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f25e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f262:	2a0d      	cmp	r2, #13
 800f264:	d8e6      	bhi.n	800f234 <_scanf_float+0x60>
 800f266:	a101      	add	r1, pc, #4	; (adr r1, 800f26c <_scanf_float+0x98>)
 800f268:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f26c:	0800f3ab 	.word	0x0800f3ab
 800f270:	0800f235 	.word	0x0800f235
 800f274:	0800f235 	.word	0x0800f235
 800f278:	0800f235 	.word	0x0800f235
 800f27c:	0800f40b 	.word	0x0800f40b
 800f280:	0800f3e3 	.word	0x0800f3e3
 800f284:	0800f235 	.word	0x0800f235
 800f288:	0800f235 	.word	0x0800f235
 800f28c:	0800f3b9 	.word	0x0800f3b9
 800f290:	0800f235 	.word	0x0800f235
 800f294:	0800f235 	.word	0x0800f235
 800f298:	0800f235 	.word	0x0800f235
 800f29c:	0800f235 	.word	0x0800f235
 800f2a0:	0800f371 	.word	0x0800f371
 800f2a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f2a8:	e7db      	b.n	800f262 <_scanf_float+0x8e>
 800f2aa:	290e      	cmp	r1, #14
 800f2ac:	d8c2      	bhi.n	800f234 <_scanf_float+0x60>
 800f2ae:	a001      	add	r0, pc, #4	; (adr r0, 800f2b4 <_scanf_float+0xe0>)
 800f2b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f2b4:	0800f363 	.word	0x0800f363
 800f2b8:	0800f235 	.word	0x0800f235
 800f2bc:	0800f363 	.word	0x0800f363
 800f2c0:	0800f3f7 	.word	0x0800f3f7
 800f2c4:	0800f235 	.word	0x0800f235
 800f2c8:	0800f311 	.word	0x0800f311
 800f2cc:	0800f34d 	.word	0x0800f34d
 800f2d0:	0800f34d 	.word	0x0800f34d
 800f2d4:	0800f34d 	.word	0x0800f34d
 800f2d8:	0800f34d 	.word	0x0800f34d
 800f2dc:	0800f34d 	.word	0x0800f34d
 800f2e0:	0800f34d 	.word	0x0800f34d
 800f2e4:	0800f34d 	.word	0x0800f34d
 800f2e8:	0800f34d 	.word	0x0800f34d
 800f2ec:	0800f34d 	.word	0x0800f34d
 800f2f0:	2b6e      	cmp	r3, #110	; 0x6e
 800f2f2:	d809      	bhi.n	800f308 <_scanf_float+0x134>
 800f2f4:	2b60      	cmp	r3, #96	; 0x60
 800f2f6:	d8b2      	bhi.n	800f25e <_scanf_float+0x8a>
 800f2f8:	2b54      	cmp	r3, #84	; 0x54
 800f2fa:	d077      	beq.n	800f3ec <_scanf_float+0x218>
 800f2fc:	2b59      	cmp	r3, #89	; 0x59
 800f2fe:	d199      	bne.n	800f234 <_scanf_float+0x60>
 800f300:	2d07      	cmp	r5, #7
 800f302:	d197      	bne.n	800f234 <_scanf_float+0x60>
 800f304:	2508      	movs	r5, #8
 800f306:	e029      	b.n	800f35c <_scanf_float+0x188>
 800f308:	2b74      	cmp	r3, #116	; 0x74
 800f30a:	d06f      	beq.n	800f3ec <_scanf_float+0x218>
 800f30c:	2b79      	cmp	r3, #121	; 0x79
 800f30e:	e7f6      	b.n	800f2fe <_scanf_float+0x12a>
 800f310:	6821      	ldr	r1, [r4, #0]
 800f312:	05c8      	lsls	r0, r1, #23
 800f314:	d51a      	bpl.n	800f34c <_scanf_float+0x178>
 800f316:	9b02      	ldr	r3, [sp, #8]
 800f318:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f31c:	6021      	str	r1, [r4, #0]
 800f31e:	f109 0901 	add.w	r9, r9, #1
 800f322:	b11b      	cbz	r3, 800f32c <_scanf_float+0x158>
 800f324:	3b01      	subs	r3, #1
 800f326:	3201      	adds	r2, #1
 800f328:	9302      	str	r3, [sp, #8]
 800f32a:	60a2      	str	r2, [r4, #8]
 800f32c:	68a3      	ldr	r3, [r4, #8]
 800f32e:	3b01      	subs	r3, #1
 800f330:	60a3      	str	r3, [r4, #8]
 800f332:	6923      	ldr	r3, [r4, #16]
 800f334:	3301      	adds	r3, #1
 800f336:	6123      	str	r3, [r4, #16]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	3b01      	subs	r3, #1
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	607b      	str	r3, [r7, #4]
 800f340:	f340 8084 	ble.w	800f44c <_scanf_float+0x278>
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	3301      	adds	r3, #1
 800f348:	603b      	str	r3, [r7, #0]
 800f34a:	e766      	b.n	800f21a <_scanf_float+0x46>
 800f34c:	eb1a 0f05 	cmn.w	sl, r5
 800f350:	f47f af70 	bne.w	800f234 <_scanf_float+0x60>
 800f354:	6822      	ldr	r2, [r4, #0]
 800f356:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f35a:	6022      	str	r2, [r4, #0]
 800f35c:	f806 3b01 	strb.w	r3, [r6], #1
 800f360:	e7e4      	b.n	800f32c <_scanf_float+0x158>
 800f362:	6822      	ldr	r2, [r4, #0]
 800f364:	0610      	lsls	r0, r2, #24
 800f366:	f57f af65 	bpl.w	800f234 <_scanf_float+0x60>
 800f36a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f36e:	e7f4      	b.n	800f35a <_scanf_float+0x186>
 800f370:	f1ba 0f00 	cmp.w	sl, #0
 800f374:	d10e      	bne.n	800f394 <_scanf_float+0x1c0>
 800f376:	f1b9 0f00 	cmp.w	r9, #0
 800f37a:	d10e      	bne.n	800f39a <_scanf_float+0x1c6>
 800f37c:	6822      	ldr	r2, [r4, #0]
 800f37e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f382:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f386:	d108      	bne.n	800f39a <_scanf_float+0x1c6>
 800f388:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f38c:	6022      	str	r2, [r4, #0]
 800f38e:	f04f 0a01 	mov.w	sl, #1
 800f392:	e7e3      	b.n	800f35c <_scanf_float+0x188>
 800f394:	f1ba 0f02 	cmp.w	sl, #2
 800f398:	d055      	beq.n	800f446 <_scanf_float+0x272>
 800f39a:	2d01      	cmp	r5, #1
 800f39c:	d002      	beq.n	800f3a4 <_scanf_float+0x1d0>
 800f39e:	2d04      	cmp	r5, #4
 800f3a0:	f47f af48 	bne.w	800f234 <_scanf_float+0x60>
 800f3a4:	3501      	adds	r5, #1
 800f3a6:	b2ed      	uxtb	r5, r5
 800f3a8:	e7d8      	b.n	800f35c <_scanf_float+0x188>
 800f3aa:	f1ba 0f01 	cmp.w	sl, #1
 800f3ae:	f47f af41 	bne.w	800f234 <_scanf_float+0x60>
 800f3b2:	f04f 0a02 	mov.w	sl, #2
 800f3b6:	e7d1      	b.n	800f35c <_scanf_float+0x188>
 800f3b8:	b97d      	cbnz	r5, 800f3da <_scanf_float+0x206>
 800f3ba:	f1b9 0f00 	cmp.w	r9, #0
 800f3be:	f47f af3c 	bne.w	800f23a <_scanf_float+0x66>
 800f3c2:	6822      	ldr	r2, [r4, #0]
 800f3c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f3c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f3cc:	f47f af39 	bne.w	800f242 <_scanf_float+0x6e>
 800f3d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f3d4:	6022      	str	r2, [r4, #0]
 800f3d6:	2501      	movs	r5, #1
 800f3d8:	e7c0      	b.n	800f35c <_scanf_float+0x188>
 800f3da:	2d03      	cmp	r5, #3
 800f3dc:	d0e2      	beq.n	800f3a4 <_scanf_float+0x1d0>
 800f3de:	2d05      	cmp	r5, #5
 800f3e0:	e7de      	b.n	800f3a0 <_scanf_float+0x1cc>
 800f3e2:	2d02      	cmp	r5, #2
 800f3e4:	f47f af26 	bne.w	800f234 <_scanf_float+0x60>
 800f3e8:	2503      	movs	r5, #3
 800f3ea:	e7b7      	b.n	800f35c <_scanf_float+0x188>
 800f3ec:	2d06      	cmp	r5, #6
 800f3ee:	f47f af21 	bne.w	800f234 <_scanf_float+0x60>
 800f3f2:	2507      	movs	r5, #7
 800f3f4:	e7b2      	b.n	800f35c <_scanf_float+0x188>
 800f3f6:	6822      	ldr	r2, [r4, #0]
 800f3f8:	0591      	lsls	r1, r2, #22
 800f3fa:	f57f af1b 	bpl.w	800f234 <_scanf_float+0x60>
 800f3fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f402:	6022      	str	r2, [r4, #0]
 800f404:	f8cd 9004 	str.w	r9, [sp, #4]
 800f408:	e7a8      	b.n	800f35c <_scanf_float+0x188>
 800f40a:	6822      	ldr	r2, [r4, #0]
 800f40c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f410:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f414:	d006      	beq.n	800f424 <_scanf_float+0x250>
 800f416:	0550      	lsls	r0, r2, #21
 800f418:	f57f af0c 	bpl.w	800f234 <_scanf_float+0x60>
 800f41c:	f1b9 0f00 	cmp.w	r9, #0
 800f420:	f43f af0f 	beq.w	800f242 <_scanf_float+0x6e>
 800f424:	0591      	lsls	r1, r2, #22
 800f426:	bf58      	it	pl
 800f428:	9901      	ldrpl	r1, [sp, #4]
 800f42a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f42e:	bf58      	it	pl
 800f430:	eba9 0101 	subpl.w	r1, r9, r1
 800f434:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f438:	bf58      	it	pl
 800f43a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f43e:	6022      	str	r2, [r4, #0]
 800f440:	f04f 0900 	mov.w	r9, #0
 800f444:	e78a      	b.n	800f35c <_scanf_float+0x188>
 800f446:	f04f 0a03 	mov.w	sl, #3
 800f44a:	e787      	b.n	800f35c <_scanf_float+0x188>
 800f44c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f450:	4639      	mov	r1, r7
 800f452:	4640      	mov	r0, r8
 800f454:	4798      	blx	r3
 800f456:	2800      	cmp	r0, #0
 800f458:	f43f aedf 	beq.w	800f21a <_scanf_float+0x46>
 800f45c:	e6ea      	b.n	800f234 <_scanf_float+0x60>
 800f45e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f462:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f466:	463a      	mov	r2, r7
 800f468:	4640      	mov	r0, r8
 800f46a:	4798      	blx	r3
 800f46c:	6923      	ldr	r3, [r4, #16]
 800f46e:	3b01      	subs	r3, #1
 800f470:	6123      	str	r3, [r4, #16]
 800f472:	e6ec      	b.n	800f24e <_scanf_float+0x7a>
 800f474:	1e6b      	subs	r3, r5, #1
 800f476:	2b06      	cmp	r3, #6
 800f478:	d825      	bhi.n	800f4c6 <_scanf_float+0x2f2>
 800f47a:	2d02      	cmp	r5, #2
 800f47c:	d836      	bhi.n	800f4ec <_scanf_float+0x318>
 800f47e:	455e      	cmp	r6, fp
 800f480:	f67f aee8 	bls.w	800f254 <_scanf_float+0x80>
 800f484:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f488:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f48c:	463a      	mov	r2, r7
 800f48e:	4640      	mov	r0, r8
 800f490:	4798      	blx	r3
 800f492:	6923      	ldr	r3, [r4, #16]
 800f494:	3b01      	subs	r3, #1
 800f496:	6123      	str	r3, [r4, #16]
 800f498:	e7f1      	b.n	800f47e <_scanf_float+0x2aa>
 800f49a:	9802      	ldr	r0, [sp, #8]
 800f49c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f4a4:	9002      	str	r0, [sp, #8]
 800f4a6:	463a      	mov	r2, r7
 800f4a8:	4640      	mov	r0, r8
 800f4aa:	4798      	blx	r3
 800f4ac:	6923      	ldr	r3, [r4, #16]
 800f4ae:	3b01      	subs	r3, #1
 800f4b0:	6123      	str	r3, [r4, #16]
 800f4b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f4b6:	fa5f fa8a 	uxtb.w	sl, sl
 800f4ba:	f1ba 0f02 	cmp.w	sl, #2
 800f4be:	d1ec      	bne.n	800f49a <_scanf_float+0x2c6>
 800f4c0:	3d03      	subs	r5, #3
 800f4c2:	b2ed      	uxtb	r5, r5
 800f4c4:	1b76      	subs	r6, r6, r5
 800f4c6:	6823      	ldr	r3, [r4, #0]
 800f4c8:	05da      	lsls	r2, r3, #23
 800f4ca:	d52f      	bpl.n	800f52c <_scanf_float+0x358>
 800f4cc:	055b      	lsls	r3, r3, #21
 800f4ce:	d510      	bpl.n	800f4f2 <_scanf_float+0x31e>
 800f4d0:	455e      	cmp	r6, fp
 800f4d2:	f67f aebf 	bls.w	800f254 <_scanf_float+0x80>
 800f4d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f4de:	463a      	mov	r2, r7
 800f4e0:	4640      	mov	r0, r8
 800f4e2:	4798      	blx	r3
 800f4e4:	6923      	ldr	r3, [r4, #16]
 800f4e6:	3b01      	subs	r3, #1
 800f4e8:	6123      	str	r3, [r4, #16]
 800f4ea:	e7f1      	b.n	800f4d0 <_scanf_float+0x2fc>
 800f4ec:	46aa      	mov	sl, r5
 800f4ee:	9602      	str	r6, [sp, #8]
 800f4f0:	e7df      	b.n	800f4b2 <_scanf_float+0x2de>
 800f4f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f4f6:	6923      	ldr	r3, [r4, #16]
 800f4f8:	2965      	cmp	r1, #101	; 0x65
 800f4fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800f4fe:	f106 35ff 	add.w	r5, r6, #4294967295
 800f502:	6123      	str	r3, [r4, #16]
 800f504:	d00c      	beq.n	800f520 <_scanf_float+0x34c>
 800f506:	2945      	cmp	r1, #69	; 0x45
 800f508:	d00a      	beq.n	800f520 <_scanf_float+0x34c>
 800f50a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f50e:	463a      	mov	r2, r7
 800f510:	4640      	mov	r0, r8
 800f512:	4798      	blx	r3
 800f514:	6923      	ldr	r3, [r4, #16]
 800f516:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f51a:	3b01      	subs	r3, #1
 800f51c:	1eb5      	subs	r5, r6, #2
 800f51e:	6123      	str	r3, [r4, #16]
 800f520:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f524:	463a      	mov	r2, r7
 800f526:	4640      	mov	r0, r8
 800f528:	4798      	blx	r3
 800f52a:	462e      	mov	r6, r5
 800f52c:	6825      	ldr	r5, [r4, #0]
 800f52e:	f015 0510 	ands.w	r5, r5, #16
 800f532:	d159      	bne.n	800f5e8 <_scanf_float+0x414>
 800f534:	7035      	strb	r5, [r6, #0]
 800f536:	6823      	ldr	r3, [r4, #0]
 800f538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f53c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f540:	d11b      	bne.n	800f57a <_scanf_float+0x3a6>
 800f542:	9b01      	ldr	r3, [sp, #4]
 800f544:	454b      	cmp	r3, r9
 800f546:	eba3 0209 	sub.w	r2, r3, r9
 800f54a:	d123      	bne.n	800f594 <_scanf_float+0x3c0>
 800f54c:	2200      	movs	r2, #0
 800f54e:	4659      	mov	r1, fp
 800f550:	4640      	mov	r0, r8
 800f552:	f000 ffe3 	bl	801051c <_strtod_r>
 800f556:	6822      	ldr	r2, [r4, #0]
 800f558:	9b03      	ldr	r3, [sp, #12]
 800f55a:	f012 0f02 	tst.w	r2, #2
 800f55e:	ec57 6b10 	vmov	r6, r7, d0
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	d021      	beq.n	800f5aa <_scanf_float+0x3d6>
 800f566:	9903      	ldr	r1, [sp, #12]
 800f568:	1d1a      	adds	r2, r3, #4
 800f56a:	600a      	str	r2, [r1, #0]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	e9c3 6700 	strd	r6, r7, [r3]
 800f572:	68e3      	ldr	r3, [r4, #12]
 800f574:	3301      	adds	r3, #1
 800f576:	60e3      	str	r3, [r4, #12]
 800f578:	e66d      	b.n	800f256 <_scanf_float+0x82>
 800f57a:	9b04      	ldr	r3, [sp, #16]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d0e5      	beq.n	800f54c <_scanf_float+0x378>
 800f580:	9905      	ldr	r1, [sp, #20]
 800f582:	230a      	movs	r3, #10
 800f584:	462a      	mov	r2, r5
 800f586:	3101      	adds	r1, #1
 800f588:	4640      	mov	r0, r8
 800f58a:	f001 f84f 	bl	801062c <_strtol_r>
 800f58e:	9b04      	ldr	r3, [sp, #16]
 800f590:	9e05      	ldr	r6, [sp, #20]
 800f592:	1ac2      	subs	r2, r0, r3
 800f594:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f598:	429e      	cmp	r6, r3
 800f59a:	bf28      	it	cs
 800f59c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f5a0:	4912      	ldr	r1, [pc, #72]	; (800f5ec <_scanf_float+0x418>)
 800f5a2:	4630      	mov	r0, r6
 800f5a4:	f000 f8ee 	bl	800f784 <siprintf>
 800f5a8:	e7d0      	b.n	800f54c <_scanf_float+0x378>
 800f5aa:	9903      	ldr	r1, [sp, #12]
 800f5ac:	f012 0f04 	tst.w	r2, #4
 800f5b0:	f103 0204 	add.w	r2, r3, #4
 800f5b4:	600a      	str	r2, [r1, #0]
 800f5b6:	d1d9      	bne.n	800f56c <_scanf_float+0x398>
 800f5b8:	f8d3 8000 	ldr.w	r8, [r3]
 800f5bc:	ee10 2a10 	vmov	r2, s0
 800f5c0:	ee10 0a10 	vmov	r0, s0
 800f5c4:	463b      	mov	r3, r7
 800f5c6:	4639      	mov	r1, r7
 800f5c8:	f7f1 fad0 	bl	8000b6c <__aeabi_dcmpun>
 800f5cc:	b128      	cbz	r0, 800f5da <_scanf_float+0x406>
 800f5ce:	4808      	ldr	r0, [pc, #32]	; (800f5f0 <_scanf_float+0x41c>)
 800f5d0:	f000 f89e 	bl	800f710 <nanf>
 800f5d4:	ed88 0a00 	vstr	s0, [r8]
 800f5d8:	e7cb      	b.n	800f572 <_scanf_float+0x39e>
 800f5da:	4630      	mov	r0, r6
 800f5dc:	4639      	mov	r1, r7
 800f5de:	f7f1 fb23 	bl	8000c28 <__aeabi_d2f>
 800f5e2:	f8c8 0000 	str.w	r0, [r8]
 800f5e6:	e7c4      	b.n	800f572 <_scanf_float+0x39e>
 800f5e8:	2500      	movs	r5, #0
 800f5ea:	e634      	b.n	800f256 <_scanf_float+0x82>
 800f5ec:	08014a1a 	.word	0x08014a1a
 800f5f0:	08014d9b 	.word	0x08014d9b

0800f5f4 <iprintf>:
 800f5f4:	b40f      	push	{r0, r1, r2, r3}
 800f5f6:	4b0a      	ldr	r3, [pc, #40]	; (800f620 <iprintf+0x2c>)
 800f5f8:	b513      	push	{r0, r1, r4, lr}
 800f5fa:	681c      	ldr	r4, [r3, #0]
 800f5fc:	b124      	cbz	r4, 800f608 <iprintf+0x14>
 800f5fe:	69a3      	ldr	r3, [r4, #24]
 800f600:	b913      	cbnz	r3, 800f608 <iprintf+0x14>
 800f602:	4620      	mov	r0, r4
 800f604:	f002 f88c 	bl	8011720 <__sinit>
 800f608:	ab05      	add	r3, sp, #20
 800f60a:	9a04      	ldr	r2, [sp, #16]
 800f60c:	68a1      	ldr	r1, [r4, #8]
 800f60e:	9301      	str	r3, [sp, #4]
 800f610:	4620      	mov	r0, r4
 800f612:	f003 fe3b 	bl	801328c <_vfiprintf_r>
 800f616:	b002      	add	sp, #8
 800f618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f61c:	b004      	add	sp, #16
 800f61e:	4770      	bx	lr
 800f620:	20000110 	.word	0x20000110

0800f624 <_puts_r>:
 800f624:	b570      	push	{r4, r5, r6, lr}
 800f626:	460e      	mov	r6, r1
 800f628:	4605      	mov	r5, r0
 800f62a:	b118      	cbz	r0, 800f634 <_puts_r+0x10>
 800f62c:	6983      	ldr	r3, [r0, #24]
 800f62e:	b90b      	cbnz	r3, 800f634 <_puts_r+0x10>
 800f630:	f002 f876 	bl	8011720 <__sinit>
 800f634:	69ab      	ldr	r3, [r5, #24]
 800f636:	68ac      	ldr	r4, [r5, #8]
 800f638:	b913      	cbnz	r3, 800f640 <_puts_r+0x1c>
 800f63a:	4628      	mov	r0, r5
 800f63c:	f002 f870 	bl	8011720 <__sinit>
 800f640:	4b2c      	ldr	r3, [pc, #176]	; (800f6f4 <_puts_r+0xd0>)
 800f642:	429c      	cmp	r4, r3
 800f644:	d120      	bne.n	800f688 <_puts_r+0x64>
 800f646:	686c      	ldr	r4, [r5, #4]
 800f648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f64a:	07db      	lsls	r3, r3, #31
 800f64c:	d405      	bmi.n	800f65a <_puts_r+0x36>
 800f64e:	89a3      	ldrh	r3, [r4, #12]
 800f650:	0598      	lsls	r0, r3, #22
 800f652:	d402      	bmi.n	800f65a <_puts_r+0x36>
 800f654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f656:	f002 fc74 	bl	8011f42 <__retarget_lock_acquire_recursive>
 800f65a:	89a3      	ldrh	r3, [r4, #12]
 800f65c:	0719      	lsls	r1, r3, #28
 800f65e:	d51d      	bpl.n	800f69c <_puts_r+0x78>
 800f660:	6923      	ldr	r3, [r4, #16]
 800f662:	b1db      	cbz	r3, 800f69c <_puts_r+0x78>
 800f664:	3e01      	subs	r6, #1
 800f666:	68a3      	ldr	r3, [r4, #8]
 800f668:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f66c:	3b01      	subs	r3, #1
 800f66e:	60a3      	str	r3, [r4, #8]
 800f670:	bb39      	cbnz	r1, 800f6c2 <_puts_r+0x9e>
 800f672:	2b00      	cmp	r3, #0
 800f674:	da38      	bge.n	800f6e8 <_puts_r+0xc4>
 800f676:	4622      	mov	r2, r4
 800f678:	210a      	movs	r1, #10
 800f67a:	4628      	mov	r0, r5
 800f67c:	f000 ffd8 	bl	8010630 <__swbuf_r>
 800f680:	3001      	adds	r0, #1
 800f682:	d011      	beq.n	800f6a8 <_puts_r+0x84>
 800f684:	250a      	movs	r5, #10
 800f686:	e011      	b.n	800f6ac <_puts_r+0x88>
 800f688:	4b1b      	ldr	r3, [pc, #108]	; (800f6f8 <_puts_r+0xd4>)
 800f68a:	429c      	cmp	r4, r3
 800f68c:	d101      	bne.n	800f692 <_puts_r+0x6e>
 800f68e:	68ac      	ldr	r4, [r5, #8]
 800f690:	e7da      	b.n	800f648 <_puts_r+0x24>
 800f692:	4b1a      	ldr	r3, [pc, #104]	; (800f6fc <_puts_r+0xd8>)
 800f694:	429c      	cmp	r4, r3
 800f696:	bf08      	it	eq
 800f698:	68ec      	ldreq	r4, [r5, #12]
 800f69a:	e7d5      	b.n	800f648 <_puts_r+0x24>
 800f69c:	4621      	mov	r1, r4
 800f69e:	4628      	mov	r0, r5
 800f6a0:	f001 f82a 	bl	80106f8 <__swsetup_r>
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	d0dd      	beq.n	800f664 <_puts_r+0x40>
 800f6a8:	f04f 35ff 	mov.w	r5, #4294967295
 800f6ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6ae:	07da      	lsls	r2, r3, #31
 800f6b0:	d405      	bmi.n	800f6be <_puts_r+0x9a>
 800f6b2:	89a3      	ldrh	r3, [r4, #12]
 800f6b4:	059b      	lsls	r3, r3, #22
 800f6b6:	d402      	bmi.n	800f6be <_puts_r+0x9a>
 800f6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6ba:	f002 fc43 	bl	8011f44 <__retarget_lock_release_recursive>
 800f6be:	4628      	mov	r0, r5
 800f6c0:	bd70      	pop	{r4, r5, r6, pc}
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	da04      	bge.n	800f6d0 <_puts_r+0xac>
 800f6c6:	69a2      	ldr	r2, [r4, #24]
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	dc06      	bgt.n	800f6da <_puts_r+0xb6>
 800f6cc:	290a      	cmp	r1, #10
 800f6ce:	d004      	beq.n	800f6da <_puts_r+0xb6>
 800f6d0:	6823      	ldr	r3, [r4, #0]
 800f6d2:	1c5a      	adds	r2, r3, #1
 800f6d4:	6022      	str	r2, [r4, #0]
 800f6d6:	7019      	strb	r1, [r3, #0]
 800f6d8:	e7c5      	b.n	800f666 <_puts_r+0x42>
 800f6da:	4622      	mov	r2, r4
 800f6dc:	4628      	mov	r0, r5
 800f6de:	f000 ffa7 	bl	8010630 <__swbuf_r>
 800f6e2:	3001      	adds	r0, #1
 800f6e4:	d1bf      	bne.n	800f666 <_puts_r+0x42>
 800f6e6:	e7df      	b.n	800f6a8 <_puts_r+0x84>
 800f6e8:	6823      	ldr	r3, [r4, #0]
 800f6ea:	250a      	movs	r5, #10
 800f6ec:	1c5a      	adds	r2, r3, #1
 800f6ee:	6022      	str	r2, [r4, #0]
 800f6f0:	701d      	strb	r5, [r3, #0]
 800f6f2:	e7db      	b.n	800f6ac <_puts_r+0x88>
 800f6f4:	08014b20 	.word	0x08014b20
 800f6f8:	08014b40 	.word	0x08014b40
 800f6fc:	08014b00 	.word	0x08014b00

0800f700 <puts>:
 800f700:	4b02      	ldr	r3, [pc, #8]	; (800f70c <puts+0xc>)
 800f702:	4601      	mov	r1, r0
 800f704:	6818      	ldr	r0, [r3, #0]
 800f706:	f7ff bf8d 	b.w	800f624 <_puts_r>
 800f70a:	bf00      	nop
 800f70c:	20000110 	.word	0x20000110

0800f710 <nanf>:
 800f710:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f718 <nanf+0x8>
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop
 800f718:	7fc00000 	.word	0x7fc00000

0800f71c <sniprintf>:
 800f71c:	b40c      	push	{r2, r3}
 800f71e:	b530      	push	{r4, r5, lr}
 800f720:	4b17      	ldr	r3, [pc, #92]	; (800f780 <sniprintf+0x64>)
 800f722:	1e0c      	subs	r4, r1, #0
 800f724:	681d      	ldr	r5, [r3, #0]
 800f726:	b09d      	sub	sp, #116	; 0x74
 800f728:	da08      	bge.n	800f73c <sniprintf+0x20>
 800f72a:	238b      	movs	r3, #139	; 0x8b
 800f72c:	602b      	str	r3, [r5, #0]
 800f72e:	f04f 30ff 	mov.w	r0, #4294967295
 800f732:	b01d      	add	sp, #116	; 0x74
 800f734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f738:	b002      	add	sp, #8
 800f73a:	4770      	bx	lr
 800f73c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f740:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f744:	bf14      	ite	ne
 800f746:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f74a:	4623      	moveq	r3, r4
 800f74c:	9304      	str	r3, [sp, #16]
 800f74e:	9307      	str	r3, [sp, #28]
 800f750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f754:	9002      	str	r0, [sp, #8]
 800f756:	9006      	str	r0, [sp, #24]
 800f758:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f75c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f75e:	ab21      	add	r3, sp, #132	; 0x84
 800f760:	a902      	add	r1, sp, #8
 800f762:	4628      	mov	r0, r5
 800f764:	9301      	str	r3, [sp, #4]
 800f766:	f003 fa95 	bl	8012c94 <_svfiprintf_r>
 800f76a:	1c43      	adds	r3, r0, #1
 800f76c:	bfbc      	itt	lt
 800f76e:	238b      	movlt	r3, #139	; 0x8b
 800f770:	602b      	strlt	r3, [r5, #0]
 800f772:	2c00      	cmp	r4, #0
 800f774:	d0dd      	beq.n	800f732 <sniprintf+0x16>
 800f776:	9b02      	ldr	r3, [sp, #8]
 800f778:	2200      	movs	r2, #0
 800f77a:	701a      	strb	r2, [r3, #0]
 800f77c:	e7d9      	b.n	800f732 <sniprintf+0x16>
 800f77e:	bf00      	nop
 800f780:	20000110 	.word	0x20000110

0800f784 <siprintf>:
 800f784:	b40e      	push	{r1, r2, r3}
 800f786:	b500      	push	{lr}
 800f788:	b09c      	sub	sp, #112	; 0x70
 800f78a:	ab1d      	add	r3, sp, #116	; 0x74
 800f78c:	9002      	str	r0, [sp, #8]
 800f78e:	9006      	str	r0, [sp, #24]
 800f790:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f794:	4809      	ldr	r0, [pc, #36]	; (800f7bc <siprintf+0x38>)
 800f796:	9107      	str	r1, [sp, #28]
 800f798:	9104      	str	r1, [sp, #16]
 800f79a:	4909      	ldr	r1, [pc, #36]	; (800f7c0 <siprintf+0x3c>)
 800f79c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7a0:	9105      	str	r1, [sp, #20]
 800f7a2:	6800      	ldr	r0, [r0, #0]
 800f7a4:	9301      	str	r3, [sp, #4]
 800f7a6:	a902      	add	r1, sp, #8
 800f7a8:	f003 fa74 	bl	8012c94 <_svfiprintf_r>
 800f7ac:	9b02      	ldr	r3, [sp, #8]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	701a      	strb	r2, [r3, #0]
 800f7b2:	b01c      	add	sp, #112	; 0x70
 800f7b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7b8:	b003      	add	sp, #12
 800f7ba:	4770      	bx	lr
 800f7bc:	20000110 	.word	0x20000110
 800f7c0:	ffff0208 	.word	0xffff0208

0800f7c4 <siscanf>:
 800f7c4:	b40e      	push	{r1, r2, r3}
 800f7c6:	b510      	push	{r4, lr}
 800f7c8:	b09f      	sub	sp, #124	; 0x7c
 800f7ca:	ac21      	add	r4, sp, #132	; 0x84
 800f7cc:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f7d0:	f854 2b04 	ldr.w	r2, [r4], #4
 800f7d4:	9201      	str	r2, [sp, #4]
 800f7d6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f7da:	9004      	str	r0, [sp, #16]
 800f7dc:	9008      	str	r0, [sp, #32]
 800f7de:	f7f0 fd11 	bl	8000204 <strlen>
 800f7e2:	4b0c      	ldr	r3, [pc, #48]	; (800f814 <siscanf+0x50>)
 800f7e4:	9005      	str	r0, [sp, #20]
 800f7e6:	9009      	str	r0, [sp, #36]	; 0x24
 800f7e8:	930d      	str	r3, [sp, #52]	; 0x34
 800f7ea:	480b      	ldr	r0, [pc, #44]	; (800f818 <siscanf+0x54>)
 800f7ec:	9a01      	ldr	r2, [sp, #4]
 800f7ee:	6800      	ldr	r0, [r0, #0]
 800f7f0:	9403      	str	r4, [sp, #12]
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	9311      	str	r3, [sp, #68]	; 0x44
 800f7f6:	9316      	str	r3, [sp, #88]	; 0x58
 800f7f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7fc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f800:	a904      	add	r1, sp, #16
 800f802:	4623      	mov	r3, r4
 800f804:	f003 fba0 	bl	8012f48 <__ssvfiscanf_r>
 800f808:	b01f      	add	sp, #124	; 0x7c
 800f80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f80e:	b003      	add	sp, #12
 800f810:	4770      	bx	lr
 800f812:	bf00      	nop
 800f814:	0800f83f 	.word	0x0800f83f
 800f818:	20000110 	.word	0x20000110

0800f81c <__sread>:
 800f81c:	b510      	push	{r4, lr}
 800f81e:	460c      	mov	r4, r1
 800f820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f824:	f003 ffb4 	bl	8013790 <_read_r>
 800f828:	2800      	cmp	r0, #0
 800f82a:	bfab      	itete	ge
 800f82c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f82e:	89a3      	ldrhlt	r3, [r4, #12]
 800f830:	181b      	addge	r3, r3, r0
 800f832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f836:	bfac      	ite	ge
 800f838:	6563      	strge	r3, [r4, #84]	; 0x54
 800f83a:	81a3      	strhlt	r3, [r4, #12]
 800f83c:	bd10      	pop	{r4, pc}

0800f83e <__seofread>:
 800f83e:	2000      	movs	r0, #0
 800f840:	4770      	bx	lr

0800f842 <__swrite>:
 800f842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f846:	461f      	mov	r7, r3
 800f848:	898b      	ldrh	r3, [r1, #12]
 800f84a:	05db      	lsls	r3, r3, #23
 800f84c:	4605      	mov	r5, r0
 800f84e:	460c      	mov	r4, r1
 800f850:	4616      	mov	r6, r2
 800f852:	d505      	bpl.n	800f860 <__swrite+0x1e>
 800f854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f858:	2302      	movs	r3, #2
 800f85a:	2200      	movs	r2, #0
 800f85c:	f002 fb74 	bl	8011f48 <_lseek_r>
 800f860:	89a3      	ldrh	r3, [r4, #12]
 800f862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f86a:	81a3      	strh	r3, [r4, #12]
 800f86c:	4632      	mov	r2, r6
 800f86e:	463b      	mov	r3, r7
 800f870:	4628      	mov	r0, r5
 800f872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f876:	f000 bf2d 	b.w	80106d4 <_write_r>

0800f87a <__sseek>:
 800f87a:	b510      	push	{r4, lr}
 800f87c:	460c      	mov	r4, r1
 800f87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f882:	f002 fb61 	bl	8011f48 <_lseek_r>
 800f886:	1c43      	adds	r3, r0, #1
 800f888:	89a3      	ldrh	r3, [r4, #12]
 800f88a:	bf15      	itete	ne
 800f88c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f88e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f892:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f896:	81a3      	strheq	r3, [r4, #12]
 800f898:	bf18      	it	ne
 800f89a:	81a3      	strhne	r3, [r4, #12]
 800f89c:	bd10      	pop	{r4, pc}

0800f89e <__sclose>:
 800f89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8a2:	f000 bf97 	b.w	80107d4 <_close_r>

0800f8a6 <strstr>:
 800f8a6:	780a      	ldrb	r2, [r1, #0]
 800f8a8:	b570      	push	{r4, r5, r6, lr}
 800f8aa:	b96a      	cbnz	r2, 800f8c8 <strstr+0x22>
 800f8ac:	bd70      	pop	{r4, r5, r6, pc}
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d109      	bne.n	800f8c6 <strstr+0x20>
 800f8b2:	460c      	mov	r4, r1
 800f8b4:	4605      	mov	r5, r0
 800f8b6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d0f6      	beq.n	800f8ac <strstr+0x6>
 800f8be:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f8c2:	429e      	cmp	r6, r3
 800f8c4:	d0f7      	beq.n	800f8b6 <strstr+0x10>
 800f8c6:	3001      	adds	r0, #1
 800f8c8:	7803      	ldrb	r3, [r0, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d1ef      	bne.n	800f8ae <strstr+0x8>
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	e7ec      	b.n	800f8ac <strstr+0x6>

0800f8d2 <sulp>:
 800f8d2:	b570      	push	{r4, r5, r6, lr}
 800f8d4:	4604      	mov	r4, r0
 800f8d6:	460d      	mov	r5, r1
 800f8d8:	ec45 4b10 	vmov	d0, r4, r5
 800f8dc:	4616      	mov	r6, r2
 800f8de:	f002 ff37 	bl	8012750 <__ulp>
 800f8e2:	ec51 0b10 	vmov	r0, r1, d0
 800f8e6:	b17e      	cbz	r6, 800f908 <sulp+0x36>
 800f8e8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f8ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	dd09      	ble.n	800f908 <sulp+0x36>
 800f8f4:	051b      	lsls	r3, r3, #20
 800f8f6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f8fa:	2400      	movs	r4, #0
 800f8fc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f900:	4622      	mov	r2, r4
 800f902:	462b      	mov	r3, r5
 800f904:	f7f0 fe98 	bl	8000638 <__aeabi_dmul>
 800f908:	bd70      	pop	{r4, r5, r6, pc}
 800f90a:	0000      	movs	r0, r0
 800f90c:	0000      	movs	r0, r0
	...

0800f910 <_strtod_l>:
 800f910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f914:	ed2d 8b02 	vpush	{d8}
 800f918:	b09d      	sub	sp, #116	; 0x74
 800f91a:	461f      	mov	r7, r3
 800f91c:	2300      	movs	r3, #0
 800f91e:	9318      	str	r3, [sp, #96]	; 0x60
 800f920:	4ba2      	ldr	r3, [pc, #648]	; (800fbac <_strtod_l+0x29c>)
 800f922:	9213      	str	r2, [sp, #76]	; 0x4c
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	9305      	str	r3, [sp, #20]
 800f928:	4604      	mov	r4, r0
 800f92a:	4618      	mov	r0, r3
 800f92c:	4688      	mov	r8, r1
 800f92e:	f7f0 fc69 	bl	8000204 <strlen>
 800f932:	f04f 0a00 	mov.w	sl, #0
 800f936:	4605      	mov	r5, r0
 800f938:	f04f 0b00 	mov.w	fp, #0
 800f93c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f942:	781a      	ldrb	r2, [r3, #0]
 800f944:	2a2b      	cmp	r2, #43	; 0x2b
 800f946:	d04e      	beq.n	800f9e6 <_strtod_l+0xd6>
 800f948:	d83b      	bhi.n	800f9c2 <_strtod_l+0xb2>
 800f94a:	2a0d      	cmp	r2, #13
 800f94c:	d834      	bhi.n	800f9b8 <_strtod_l+0xa8>
 800f94e:	2a08      	cmp	r2, #8
 800f950:	d834      	bhi.n	800f9bc <_strtod_l+0xac>
 800f952:	2a00      	cmp	r2, #0
 800f954:	d03e      	beq.n	800f9d4 <_strtod_l+0xc4>
 800f956:	2300      	movs	r3, #0
 800f958:	930a      	str	r3, [sp, #40]	; 0x28
 800f95a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f95c:	7833      	ldrb	r3, [r6, #0]
 800f95e:	2b30      	cmp	r3, #48	; 0x30
 800f960:	f040 80b0 	bne.w	800fac4 <_strtod_l+0x1b4>
 800f964:	7873      	ldrb	r3, [r6, #1]
 800f966:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f96a:	2b58      	cmp	r3, #88	; 0x58
 800f96c:	d168      	bne.n	800fa40 <_strtod_l+0x130>
 800f96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f970:	9301      	str	r3, [sp, #4]
 800f972:	ab18      	add	r3, sp, #96	; 0x60
 800f974:	9702      	str	r7, [sp, #8]
 800f976:	9300      	str	r3, [sp, #0]
 800f978:	4a8d      	ldr	r2, [pc, #564]	; (800fbb0 <_strtod_l+0x2a0>)
 800f97a:	ab19      	add	r3, sp, #100	; 0x64
 800f97c:	a917      	add	r1, sp, #92	; 0x5c
 800f97e:	4620      	mov	r0, r4
 800f980:	f001 ffd2 	bl	8011928 <__gethex>
 800f984:	f010 0707 	ands.w	r7, r0, #7
 800f988:	4605      	mov	r5, r0
 800f98a:	d005      	beq.n	800f998 <_strtod_l+0x88>
 800f98c:	2f06      	cmp	r7, #6
 800f98e:	d12c      	bne.n	800f9ea <_strtod_l+0xda>
 800f990:	3601      	adds	r6, #1
 800f992:	2300      	movs	r3, #0
 800f994:	9617      	str	r6, [sp, #92]	; 0x5c
 800f996:	930a      	str	r3, [sp, #40]	; 0x28
 800f998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f040 8590 	bne.w	80104c0 <_strtod_l+0xbb0>
 800f9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9a2:	b1eb      	cbz	r3, 800f9e0 <_strtod_l+0xd0>
 800f9a4:	4652      	mov	r2, sl
 800f9a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f9aa:	ec43 2b10 	vmov	d0, r2, r3
 800f9ae:	b01d      	add	sp, #116	; 0x74
 800f9b0:	ecbd 8b02 	vpop	{d8}
 800f9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b8:	2a20      	cmp	r2, #32
 800f9ba:	d1cc      	bne.n	800f956 <_strtod_l+0x46>
 800f9bc:	3301      	adds	r3, #1
 800f9be:	9317      	str	r3, [sp, #92]	; 0x5c
 800f9c0:	e7be      	b.n	800f940 <_strtod_l+0x30>
 800f9c2:	2a2d      	cmp	r2, #45	; 0x2d
 800f9c4:	d1c7      	bne.n	800f956 <_strtod_l+0x46>
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	920a      	str	r2, [sp, #40]	; 0x28
 800f9ca:	1c5a      	adds	r2, r3, #1
 800f9cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800f9ce:	785b      	ldrb	r3, [r3, #1]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d1c2      	bne.n	800f95a <_strtod_l+0x4a>
 800f9d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f9d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	f040 856e 	bne.w	80104bc <_strtod_l+0xbac>
 800f9e0:	4652      	mov	r2, sl
 800f9e2:	465b      	mov	r3, fp
 800f9e4:	e7e1      	b.n	800f9aa <_strtod_l+0x9a>
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	e7ee      	b.n	800f9c8 <_strtod_l+0xb8>
 800f9ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f9ec:	b13a      	cbz	r2, 800f9fe <_strtod_l+0xee>
 800f9ee:	2135      	movs	r1, #53	; 0x35
 800f9f0:	a81a      	add	r0, sp, #104	; 0x68
 800f9f2:	f002 ffb8 	bl	8012966 <__copybits>
 800f9f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f9f8:	4620      	mov	r0, r4
 800f9fa:	f002 fb77 	bl	80120ec <_Bfree>
 800f9fe:	3f01      	subs	r7, #1
 800fa00:	2f04      	cmp	r7, #4
 800fa02:	d806      	bhi.n	800fa12 <_strtod_l+0x102>
 800fa04:	e8df f007 	tbb	[pc, r7]
 800fa08:	1714030a 	.word	0x1714030a
 800fa0c:	0a          	.byte	0x0a
 800fa0d:	00          	.byte	0x00
 800fa0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800fa12:	0728      	lsls	r0, r5, #28
 800fa14:	d5c0      	bpl.n	800f998 <_strtod_l+0x88>
 800fa16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fa1a:	e7bd      	b.n	800f998 <_strtod_l+0x88>
 800fa1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800fa20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fa22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fa26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fa2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fa2e:	e7f0      	b.n	800fa12 <_strtod_l+0x102>
 800fa30:	f8df b180 	ldr.w	fp, [pc, #384]	; 800fbb4 <_strtod_l+0x2a4>
 800fa34:	e7ed      	b.n	800fa12 <_strtod_l+0x102>
 800fa36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fa3a:	f04f 3aff 	mov.w	sl, #4294967295
 800fa3e:	e7e8      	b.n	800fa12 <_strtod_l+0x102>
 800fa40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa42:	1c5a      	adds	r2, r3, #1
 800fa44:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa46:	785b      	ldrb	r3, [r3, #1]
 800fa48:	2b30      	cmp	r3, #48	; 0x30
 800fa4a:	d0f9      	beq.n	800fa40 <_strtod_l+0x130>
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d0a3      	beq.n	800f998 <_strtod_l+0x88>
 800fa50:	2301      	movs	r3, #1
 800fa52:	f04f 0900 	mov.w	r9, #0
 800fa56:	9304      	str	r3, [sp, #16]
 800fa58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa5a:	9308      	str	r3, [sp, #32]
 800fa5c:	f8cd 901c 	str.w	r9, [sp, #28]
 800fa60:	464f      	mov	r7, r9
 800fa62:	220a      	movs	r2, #10
 800fa64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fa66:	7806      	ldrb	r6, [r0, #0]
 800fa68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fa6c:	b2d9      	uxtb	r1, r3
 800fa6e:	2909      	cmp	r1, #9
 800fa70:	d92a      	bls.n	800fac8 <_strtod_l+0x1b8>
 800fa72:	9905      	ldr	r1, [sp, #20]
 800fa74:	462a      	mov	r2, r5
 800fa76:	f003 feef 	bl	8013858 <strncmp>
 800fa7a:	b398      	cbz	r0, 800fae4 <_strtod_l+0x1d4>
 800fa7c:	2000      	movs	r0, #0
 800fa7e:	4632      	mov	r2, r6
 800fa80:	463d      	mov	r5, r7
 800fa82:	9005      	str	r0, [sp, #20]
 800fa84:	4603      	mov	r3, r0
 800fa86:	2a65      	cmp	r2, #101	; 0x65
 800fa88:	d001      	beq.n	800fa8e <_strtod_l+0x17e>
 800fa8a:	2a45      	cmp	r2, #69	; 0x45
 800fa8c:	d118      	bne.n	800fac0 <_strtod_l+0x1b0>
 800fa8e:	b91d      	cbnz	r5, 800fa98 <_strtod_l+0x188>
 800fa90:	9a04      	ldr	r2, [sp, #16]
 800fa92:	4302      	orrs	r2, r0
 800fa94:	d09e      	beq.n	800f9d4 <_strtod_l+0xc4>
 800fa96:	2500      	movs	r5, #0
 800fa98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800fa9c:	f108 0201 	add.w	r2, r8, #1
 800faa0:	9217      	str	r2, [sp, #92]	; 0x5c
 800faa2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800faa6:	2a2b      	cmp	r2, #43	; 0x2b
 800faa8:	d075      	beq.n	800fb96 <_strtod_l+0x286>
 800faaa:	2a2d      	cmp	r2, #45	; 0x2d
 800faac:	d07b      	beq.n	800fba6 <_strtod_l+0x296>
 800faae:	f04f 0c00 	mov.w	ip, #0
 800fab2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fab6:	2909      	cmp	r1, #9
 800fab8:	f240 8082 	bls.w	800fbc0 <_strtod_l+0x2b0>
 800fabc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fac0:	2600      	movs	r6, #0
 800fac2:	e09d      	b.n	800fc00 <_strtod_l+0x2f0>
 800fac4:	2300      	movs	r3, #0
 800fac6:	e7c4      	b.n	800fa52 <_strtod_l+0x142>
 800fac8:	2f08      	cmp	r7, #8
 800faca:	bfd8      	it	le
 800facc:	9907      	ldrle	r1, [sp, #28]
 800face:	f100 0001 	add.w	r0, r0, #1
 800fad2:	bfda      	itte	le
 800fad4:	fb02 3301 	mlale	r3, r2, r1, r3
 800fad8:	9307      	strle	r3, [sp, #28]
 800fada:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fade:	3701      	adds	r7, #1
 800fae0:	9017      	str	r0, [sp, #92]	; 0x5c
 800fae2:	e7bf      	b.n	800fa64 <_strtod_l+0x154>
 800fae4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fae6:	195a      	adds	r2, r3, r5
 800fae8:	9217      	str	r2, [sp, #92]	; 0x5c
 800faea:	5d5a      	ldrb	r2, [r3, r5]
 800faec:	2f00      	cmp	r7, #0
 800faee:	d037      	beq.n	800fb60 <_strtod_l+0x250>
 800faf0:	9005      	str	r0, [sp, #20]
 800faf2:	463d      	mov	r5, r7
 800faf4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800faf8:	2b09      	cmp	r3, #9
 800fafa:	d912      	bls.n	800fb22 <_strtod_l+0x212>
 800fafc:	2301      	movs	r3, #1
 800fafe:	e7c2      	b.n	800fa86 <_strtod_l+0x176>
 800fb00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb02:	1c5a      	adds	r2, r3, #1
 800fb04:	9217      	str	r2, [sp, #92]	; 0x5c
 800fb06:	785a      	ldrb	r2, [r3, #1]
 800fb08:	3001      	adds	r0, #1
 800fb0a:	2a30      	cmp	r2, #48	; 0x30
 800fb0c:	d0f8      	beq.n	800fb00 <_strtod_l+0x1f0>
 800fb0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fb12:	2b08      	cmp	r3, #8
 800fb14:	f200 84d9 	bhi.w	80104ca <_strtod_l+0xbba>
 800fb18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb1a:	9005      	str	r0, [sp, #20]
 800fb1c:	2000      	movs	r0, #0
 800fb1e:	9308      	str	r3, [sp, #32]
 800fb20:	4605      	mov	r5, r0
 800fb22:	3a30      	subs	r2, #48	; 0x30
 800fb24:	f100 0301 	add.w	r3, r0, #1
 800fb28:	d014      	beq.n	800fb54 <_strtod_l+0x244>
 800fb2a:	9905      	ldr	r1, [sp, #20]
 800fb2c:	4419      	add	r1, r3
 800fb2e:	9105      	str	r1, [sp, #20]
 800fb30:	462b      	mov	r3, r5
 800fb32:	eb00 0e05 	add.w	lr, r0, r5
 800fb36:	210a      	movs	r1, #10
 800fb38:	4573      	cmp	r3, lr
 800fb3a:	d113      	bne.n	800fb64 <_strtod_l+0x254>
 800fb3c:	182b      	adds	r3, r5, r0
 800fb3e:	2b08      	cmp	r3, #8
 800fb40:	f105 0501 	add.w	r5, r5, #1
 800fb44:	4405      	add	r5, r0
 800fb46:	dc1c      	bgt.n	800fb82 <_strtod_l+0x272>
 800fb48:	9907      	ldr	r1, [sp, #28]
 800fb4a:	230a      	movs	r3, #10
 800fb4c:	fb03 2301 	mla	r3, r3, r1, r2
 800fb50:	9307      	str	r3, [sp, #28]
 800fb52:	2300      	movs	r3, #0
 800fb54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fb56:	1c51      	adds	r1, r2, #1
 800fb58:	9117      	str	r1, [sp, #92]	; 0x5c
 800fb5a:	7852      	ldrb	r2, [r2, #1]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	e7c9      	b.n	800faf4 <_strtod_l+0x1e4>
 800fb60:	4638      	mov	r0, r7
 800fb62:	e7d2      	b.n	800fb0a <_strtod_l+0x1fa>
 800fb64:	2b08      	cmp	r3, #8
 800fb66:	dc04      	bgt.n	800fb72 <_strtod_l+0x262>
 800fb68:	9e07      	ldr	r6, [sp, #28]
 800fb6a:	434e      	muls	r6, r1
 800fb6c:	9607      	str	r6, [sp, #28]
 800fb6e:	3301      	adds	r3, #1
 800fb70:	e7e2      	b.n	800fb38 <_strtod_l+0x228>
 800fb72:	f103 0c01 	add.w	ip, r3, #1
 800fb76:	f1bc 0f10 	cmp.w	ip, #16
 800fb7a:	bfd8      	it	le
 800fb7c:	fb01 f909 	mulle.w	r9, r1, r9
 800fb80:	e7f5      	b.n	800fb6e <_strtod_l+0x25e>
 800fb82:	2d10      	cmp	r5, #16
 800fb84:	bfdc      	itt	le
 800fb86:	230a      	movle	r3, #10
 800fb88:	fb03 2909 	mlale	r9, r3, r9, r2
 800fb8c:	e7e1      	b.n	800fb52 <_strtod_l+0x242>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	9305      	str	r3, [sp, #20]
 800fb92:	2301      	movs	r3, #1
 800fb94:	e77c      	b.n	800fa90 <_strtod_l+0x180>
 800fb96:	f04f 0c00 	mov.w	ip, #0
 800fb9a:	f108 0202 	add.w	r2, r8, #2
 800fb9e:	9217      	str	r2, [sp, #92]	; 0x5c
 800fba0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800fba4:	e785      	b.n	800fab2 <_strtod_l+0x1a2>
 800fba6:	f04f 0c01 	mov.w	ip, #1
 800fbaa:	e7f6      	b.n	800fb9a <_strtod_l+0x28a>
 800fbac:	08014bc8 	.word	0x08014bc8
 800fbb0:	08014a20 	.word	0x08014a20
 800fbb4:	7ff00000 	.word	0x7ff00000
 800fbb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fbba:	1c51      	adds	r1, r2, #1
 800fbbc:	9117      	str	r1, [sp, #92]	; 0x5c
 800fbbe:	7852      	ldrb	r2, [r2, #1]
 800fbc0:	2a30      	cmp	r2, #48	; 0x30
 800fbc2:	d0f9      	beq.n	800fbb8 <_strtod_l+0x2a8>
 800fbc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fbc8:	2908      	cmp	r1, #8
 800fbca:	f63f af79 	bhi.w	800fac0 <_strtod_l+0x1b0>
 800fbce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fbd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fbd4:	9206      	str	r2, [sp, #24]
 800fbd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fbd8:	1c51      	adds	r1, r2, #1
 800fbda:	9117      	str	r1, [sp, #92]	; 0x5c
 800fbdc:	7852      	ldrb	r2, [r2, #1]
 800fbde:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800fbe2:	2e09      	cmp	r6, #9
 800fbe4:	d937      	bls.n	800fc56 <_strtod_l+0x346>
 800fbe6:	9e06      	ldr	r6, [sp, #24]
 800fbe8:	1b89      	subs	r1, r1, r6
 800fbea:	2908      	cmp	r1, #8
 800fbec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fbf0:	dc02      	bgt.n	800fbf8 <_strtod_l+0x2e8>
 800fbf2:	4576      	cmp	r6, lr
 800fbf4:	bfa8      	it	ge
 800fbf6:	4676      	movge	r6, lr
 800fbf8:	f1bc 0f00 	cmp.w	ip, #0
 800fbfc:	d000      	beq.n	800fc00 <_strtod_l+0x2f0>
 800fbfe:	4276      	negs	r6, r6
 800fc00:	2d00      	cmp	r5, #0
 800fc02:	d14d      	bne.n	800fca0 <_strtod_l+0x390>
 800fc04:	9904      	ldr	r1, [sp, #16]
 800fc06:	4301      	orrs	r1, r0
 800fc08:	f47f aec6 	bne.w	800f998 <_strtod_l+0x88>
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	f47f aee1 	bne.w	800f9d4 <_strtod_l+0xc4>
 800fc12:	2a69      	cmp	r2, #105	; 0x69
 800fc14:	d027      	beq.n	800fc66 <_strtod_l+0x356>
 800fc16:	dc24      	bgt.n	800fc62 <_strtod_l+0x352>
 800fc18:	2a49      	cmp	r2, #73	; 0x49
 800fc1a:	d024      	beq.n	800fc66 <_strtod_l+0x356>
 800fc1c:	2a4e      	cmp	r2, #78	; 0x4e
 800fc1e:	f47f aed9 	bne.w	800f9d4 <_strtod_l+0xc4>
 800fc22:	499f      	ldr	r1, [pc, #636]	; (800fea0 <_strtod_l+0x590>)
 800fc24:	a817      	add	r0, sp, #92	; 0x5c
 800fc26:	f002 f8d7 	bl	8011dd8 <__match>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	f43f aed2 	beq.w	800f9d4 <_strtod_l+0xc4>
 800fc30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	2b28      	cmp	r3, #40	; 0x28
 800fc36:	d12d      	bne.n	800fc94 <_strtod_l+0x384>
 800fc38:	499a      	ldr	r1, [pc, #616]	; (800fea4 <_strtod_l+0x594>)
 800fc3a:	aa1a      	add	r2, sp, #104	; 0x68
 800fc3c:	a817      	add	r0, sp, #92	; 0x5c
 800fc3e:	f002 f8df 	bl	8011e00 <__hexnan>
 800fc42:	2805      	cmp	r0, #5
 800fc44:	d126      	bne.n	800fc94 <_strtod_l+0x384>
 800fc46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800fc4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fc50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fc54:	e6a0      	b.n	800f998 <_strtod_l+0x88>
 800fc56:	210a      	movs	r1, #10
 800fc58:	fb01 2e0e 	mla	lr, r1, lr, r2
 800fc5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fc60:	e7b9      	b.n	800fbd6 <_strtod_l+0x2c6>
 800fc62:	2a6e      	cmp	r2, #110	; 0x6e
 800fc64:	e7db      	b.n	800fc1e <_strtod_l+0x30e>
 800fc66:	4990      	ldr	r1, [pc, #576]	; (800fea8 <_strtod_l+0x598>)
 800fc68:	a817      	add	r0, sp, #92	; 0x5c
 800fc6a:	f002 f8b5 	bl	8011dd8 <__match>
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	f43f aeb0 	beq.w	800f9d4 <_strtod_l+0xc4>
 800fc74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc76:	498d      	ldr	r1, [pc, #564]	; (800feac <_strtod_l+0x59c>)
 800fc78:	3b01      	subs	r3, #1
 800fc7a:	a817      	add	r0, sp, #92	; 0x5c
 800fc7c:	9317      	str	r3, [sp, #92]	; 0x5c
 800fc7e:	f002 f8ab 	bl	8011dd8 <__match>
 800fc82:	b910      	cbnz	r0, 800fc8a <_strtod_l+0x37a>
 800fc84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc86:	3301      	adds	r3, #1
 800fc88:	9317      	str	r3, [sp, #92]	; 0x5c
 800fc8a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800febc <_strtod_l+0x5ac>
 800fc8e:	f04f 0a00 	mov.w	sl, #0
 800fc92:	e681      	b.n	800f998 <_strtod_l+0x88>
 800fc94:	4886      	ldr	r0, [pc, #536]	; (800feb0 <_strtod_l+0x5a0>)
 800fc96:	f003 fd8f 	bl	80137b8 <nan>
 800fc9a:	ec5b ab10 	vmov	sl, fp, d0
 800fc9e:	e67b      	b.n	800f998 <_strtod_l+0x88>
 800fca0:	9b05      	ldr	r3, [sp, #20]
 800fca2:	9807      	ldr	r0, [sp, #28]
 800fca4:	1af3      	subs	r3, r6, r3
 800fca6:	2f00      	cmp	r7, #0
 800fca8:	bf08      	it	eq
 800fcaa:	462f      	moveq	r7, r5
 800fcac:	2d10      	cmp	r5, #16
 800fcae:	9306      	str	r3, [sp, #24]
 800fcb0:	46a8      	mov	r8, r5
 800fcb2:	bfa8      	it	ge
 800fcb4:	f04f 0810 	movge.w	r8, #16
 800fcb8:	f7f0 fc44 	bl	8000544 <__aeabi_ui2d>
 800fcbc:	2d09      	cmp	r5, #9
 800fcbe:	4682      	mov	sl, r0
 800fcc0:	468b      	mov	fp, r1
 800fcc2:	dd13      	ble.n	800fcec <_strtod_l+0x3dc>
 800fcc4:	4b7b      	ldr	r3, [pc, #492]	; (800feb4 <_strtod_l+0x5a4>)
 800fcc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fcca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fcce:	f7f0 fcb3 	bl	8000638 <__aeabi_dmul>
 800fcd2:	4682      	mov	sl, r0
 800fcd4:	4648      	mov	r0, r9
 800fcd6:	468b      	mov	fp, r1
 800fcd8:	f7f0 fc34 	bl	8000544 <__aeabi_ui2d>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	460b      	mov	r3, r1
 800fce0:	4650      	mov	r0, sl
 800fce2:	4659      	mov	r1, fp
 800fce4:	f7f0 faf2 	bl	80002cc <__adddf3>
 800fce8:	4682      	mov	sl, r0
 800fcea:	468b      	mov	fp, r1
 800fcec:	2d0f      	cmp	r5, #15
 800fcee:	dc38      	bgt.n	800fd62 <_strtod_l+0x452>
 800fcf0:	9b06      	ldr	r3, [sp, #24]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	f43f ae50 	beq.w	800f998 <_strtod_l+0x88>
 800fcf8:	dd24      	ble.n	800fd44 <_strtod_l+0x434>
 800fcfa:	2b16      	cmp	r3, #22
 800fcfc:	dc0b      	bgt.n	800fd16 <_strtod_l+0x406>
 800fcfe:	496d      	ldr	r1, [pc, #436]	; (800feb4 <_strtod_l+0x5a4>)
 800fd00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd08:	4652      	mov	r2, sl
 800fd0a:	465b      	mov	r3, fp
 800fd0c:	f7f0 fc94 	bl	8000638 <__aeabi_dmul>
 800fd10:	4682      	mov	sl, r0
 800fd12:	468b      	mov	fp, r1
 800fd14:	e640      	b.n	800f998 <_strtod_l+0x88>
 800fd16:	9a06      	ldr	r2, [sp, #24]
 800fd18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	db20      	blt.n	800fd62 <_strtod_l+0x452>
 800fd20:	4c64      	ldr	r4, [pc, #400]	; (800feb4 <_strtod_l+0x5a4>)
 800fd22:	f1c5 050f 	rsb	r5, r5, #15
 800fd26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fd2a:	4652      	mov	r2, sl
 800fd2c:	465b      	mov	r3, fp
 800fd2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd32:	f7f0 fc81 	bl	8000638 <__aeabi_dmul>
 800fd36:	9b06      	ldr	r3, [sp, #24]
 800fd38:	1b5d      	subs	r5, r3, r5
 800fd3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fd3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fd42:	e7e3      	b.n	800fd0c <_strtod_l+0x3fc>
 800fd44:	9b06      	ldr	r3, [sp, #24]
 800fd46:	3316      	adds	r3, #22
 800fd48:	db0b      	blt.n	800fd62 <_strtod_l+0x452>
 800fd4a:	9b05      	ldr	r3, [sp, #20]
 800fd4c:	1b9e      	subs	r6, r3, r6
 800fd4e:	4b59      	ldr	r3, [pc, #356]	; (800feb4 <_strtod_l+0x5a4>)
 800fd50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800fd54:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fd58:	4650      	mov	r0, sl
 800fd5a:	4659      	mov	r1, fp
 800fd5c:	f7f0 fd96 	bl	800088c <__aeabi_ddiv>
 800fd60:	e7d6      	b.n	800fd10 <_strtod_l+0x400>
 800fd62:	9b06      	ldr	r3, [sp, #24]
 800fd64:	eba5 0808 	sub.w	r8, r5, r8
 800fd68:	4498      	add	r8, r3
 800fd6a:	f1b8 0f00 	cmp.w	r8, #0
 800fd6e:	dd74      	ble.n	800fe5a <_strtod_l+0x54a>
 800fd70:	f018 030f 	ands.w	r3, r8, #15
 800fd74:	d00a      	beq.n	800fd8c <_strtod_l+0x47c>
 800fd76:	494f      	ldr	r1, [pc, #316]	; (800feb4 <_strtod_l+0x5a4>)
 800fd78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd7c:	4652      	mov	r2, sl
 800fd7e:	465b      	mov	r3, fp
 800fd80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd84:	f7f0 fc58 	bl	8000638 <__aeabi_dmul>
 800fd88:	4682      	mov	sl, r0
 800fd8a:	468b      	mov	fp, r1
 800fd8c:	f038 080f 	bics.w	r8, r8, #15
 800fd90:	d04f      	beq.n	800fe32 <_strtod_l+0x522>
 800fd92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fd96:	dd22      	ble.n	800fdde <_strtod_l+0x4ce>
 800fd98:	2500      	movs	r5, #0
 800fd9a:	462e      	mov	r6, r5
 800fd9c:	9507      	str	r5, [sp, #28]
 800fd9e:	9505      	str	r5, [sp, #20]
 800fda0:	2322      	movs	r3, #34	; 0x22
 800fda2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800febc <_strtod_l+0x5ac>
 800fda6:	6023      	str	r3, [r4, #0]
 800fda8:	f04f 0a00 	mov.w	sl, #0
 800fdac:	9b07      	ldr	r3, [sp, #28]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	f43f adf2 	beq.w	800f998 <_strtod_l+0x88>
 800fdb4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	f002 f998 	bl	80120ec <_Bfree>
 800fdbc:	9905      	ldr	r1, [sp, #20]
 800fdbe:	4620      	mov	r0, r4
 800fdc0:	f002 f994 	bl	80120ec <_Bfree>
 800fdc4:	4631      	mov	r1, r6
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	f002 f990 	bl	80120ec <_Bfree>
 800fdcc:	9907      	ldr	r1, [sp, #28]
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f002 f98c 	bl	80120ec <_Bfree>
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	f002 f988 	bl	80120ec <_Bfree>
 800fddc:	e5dc      	b.n	800f998 <_strtod_l+0x88>
 800fdde:	4b36      	ldr	r3, [pc, #216]	; (800feb8 <_strtod_l+0x5a8>)
 800fde0:	9304      	str	r3, [sp, #16]
 800fde2:	2300      	movs	r3, #0
 800fde4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fde8:	4650      	mov	r0, sl
 800fdea:	4659      	mov	r1, fp
 800fdec:	4699      	mov	r9, r3
 800fdee:	f1b8 0f01 	cmp.w	r8, #1
 800fdf2:	dc21      	bgt.n	800fe38 <_strtod_l+0x528>
 800fdf4:	b10b      	cbz	r3, 800fdfa <_strtod_l+0x4ea>
 800fdf6:	4682      	mov	sl, r0
 800fdf8:	468b      	mov	fp, r1
 800fdfa:	4b2f      	ldr	r3, [pc, #188]	; (800feb8 <_strtod_l+0x5a8>)
 800fdfc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fe00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fe04:	4652      	mov	r2, sl
 800fe06:	465b      	mov	r3, fp
 800fe08:	e9d9 0100 	ldrd	r0, r1, [r9]
 800fe0c:	f7f0 fc14 	bl	8000638 <__aeabi_dmul>
 800fe10:	4b2a      	ldr	r3, [pc, #168]	; (800febc <_strtod_l+0x5ac>)
 800fe12:	460a      	mov	r2, r1
 800fe14:	400b      	ands	r3, r1
 800fe16:	492a      	ldr	r1, [pc, #168]	; (800fec0 <_strtod_l+0x5b0>)
 800fe18:	428b      	cmp	r3, r1
 800fe1a:	4682      	mov	sl, r0
 800fe1c:	d8bc      	bhi.n	800fd98 <_strtod_l+0x488>
 800fe1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fe22:	428b      	cmp	r3, r1
 800fe24:	bf86      	itte	hi
 800fe26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800fec4 <_strtod_l+0x5b4>
 800fe2a:	f04f 3aff 	movhi.w	sl, #4294967295
 800fe2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fe32:	2300      	movs	r3, #0
 800fe34:	9304      	str	r3, [sp, #16]
 800fe36:	e084      	b.n	800ff42 <_strtod_l+0x632>
 800fe38:	f018 0f01 	tst.w	r8, #1
 800fe3c:	d005      	beq.n	800fe4a <_strtod_l+0x53a>
 800fe3e:	9b04      	ldr	r3, [sp, #16]
 800fe40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe44:	f7f0 fbf8 	bl	8000638 <__aeabi_dmul>
 800fe48:	2301      	movs	r3, #1
 800fe4a:	9a04      	ldr	r2, [sp, #16]
 800fe4c:	3208      	adds	r2, #8
 800fe4e:	f109 0901 	add.w	r9, r9, #1
 800fe52:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fe56:	9204      	str	r2, [sp, #16]
 800fe58:	e7c9      	b.n	800fdee <_strtod_l+0x4de>
 800fe5a:	d0ea      	beq.n	800fe32 <_strtod_l+0x522>
 800fe5c:	f1c8 0800 	rsb	r8, r8, #0
 800fe60:	f018 020f 	ands.w	r2, r8, #15
 800fe64:	d00a      	beq.n	800fe7c <_strtod_l+0x56c>
 800fe66:	4b13      	ldr	r3, [pc, #76]	; (800feb4 <_strtod_l+0x5a4>)
 800fe68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe6c:	4650      	mov	r0, sl
 800fe6e:	4659      	mov	r1, fp
 800fe70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe74:	f7f0 fd0a 	bl	800088c <__aeabi_ddiv>
 800fe78:	4682      	mov	sl, r0
 800fe7a:	468b      	mov	fp, r1
 800fe7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fe80:	d0d7      	beq.n	800fe32 <_strtod_l+0x522>
 800fe82:	f1b8 0f1f 	cmp.w	r8, #31
 800fe86:	dd1f      	ble.n	800fec8 <_strtod_l+0x5b8>
 800fe88:	2500      	movs	r5, #0
 800fe8a:	462e      	mov	r6, r5
 800fe8c:	9507      	str	r5, [sp, #28]
 800fe8e:	9505      	str	r5, [sp, #20]
 800fe90:	2322      	movs	r3, #34	; 0x22
 800fe92:	f04f 0a00 	mov.w	sl, #0
 800fe96:	f04f 0b00 	mov.w	fp, #0
 800fe9a:	6023      	str	r3, [r4, #0]
 800fe9c:	e786      	b.n	800fdac <_strtod_l+0x49c>
 800fe9e:	bf00      	nop
 800fea0:	080149f5 	.word	0x080149f5
 800fea4:	08014a34 	.word	0x08014a34
 800fea8:	080149ed 	.word	0x080149ed
 800feac:	08014a73 	.word	0x08014a73
 800feb0:	08014d9b 	.word	0x08014d9b
 800feb4:	08014c60 	.word	0x08014c60
 800feb8:	08014c38 	.word	0x08014c38
 800febc:	7ff00000 	.word	0x7ff00000
 800fec0:	7ca00000 	.word	0x7ca00000
 800fec4:	7fefffff 	.word	0x7fefffff
 800fec8:	f018 0310 	ands.w	r3, r8, #16
 800fecc:	bf18      	it	ne
 800fece:	236a      	movne	r3, #106	; 0x6a
 800fed0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010280 <_strtod_l+0x970>
 800fed4:	9304      	str	r3, [sp, #16]
 800fed6:	4650      	mov	r0, sl
 800fed8:	4659      	mov	r1, fp
 800feda:	2300      	movs	r3, #0
 800fedc:	f018 0f01 	tst.w	r8, #1
 800fee0:	d004      	beq.n	800feec <_strtod_l+0x5dc>
 800fee2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fee6:	f7f0 fba7 	bl	8000638 <__aeabi_dmul>
 800feea:	2301      	movs	r3, #1
 800feec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fef0:	f109 0908 	add.w	r9, r9, #8
 800fef4:	d1f2      	bne.n	800fedc <_strtod_l+0x5cc>
 800fef6:	b10b      	cbz	r3, 800fefc <_strtod_l+0x5ec>
 800fef8:	4682      	mov	sl, r0
 800fefa:	468b      	mov	fp, r1
 800fefc:	9b04      	ldr	r3, [sp, #16]
 800fefe:	b1c3      	cbz	r3, 800ff32 <_strtod_l+0x622>
 800ff00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ff04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	4659      	mov	r1, fp
 800ff0c:	dd11      	ble.n	800ff32 <_strtod_l+0x622>
 800ff0e:	2b1f      	cmp	r3, #31
 800ff10:	f340 8124 	ble.w	801015c <_strtod_l+0x84c>
 800ff14:	2b34      	cmp	r3, #52	; 0x34
 800ff16:	bfde      	ittt	le
 800ff18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ff1c:	f04f 33ff 	movle.w	r3, #4294967295
 800ff20:	fa03 f202 	lslle.w	r2, r3, r2
 800ff24:	f04f 0a00 	mov.w	sl, #0
 800ff28:	bfcc      	ite	gt
 800ff2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ff2e:	ea02 0b01 	andle.w	fp, r2, r1
 800ff32:	2200      	movs	r2, #0
 800ff34:	2300      	movs	r3, #0
 800ff36:	4650      	mov	r0, sl
 800ff38:	4659      	mov	r1, fp
 800ff3a:	f7f0 fde5 	bl	8000b08 <__aeabi_dcmpeq>
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d1a2      	bne.n	800fe88 <_strtod_l+0x578>
 800ff42:	9b07      	ldr	r3, [sp, #28]
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	9908      	ldr	r1, [sp, #32]
 800ff48:	462b      	mov	r3, r5
 800ff4a:	463a      	mov	r2, r7
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	f002 f935 	bl	80121bc <__s2b>
 800ff52:	9007      	str	r0, [sp, #28]
 800ff54:	2800      	cmp	r0, #0
 800ff56:	f43f af1f 	beq.w	800fd98 <_strtod_l+0x488>
 800ff5a:	9b05      	ldr	r3, [sp, #20]
 800ff5c:	1b9e      	subs	r6, r3, r6
 800ff5e:	9b06      	ldr	r3, [sp, #24]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	bfb4      	ite	lt
 800ff64:	4633      	movlt	r3, r6
 800ff66:	2300      	movge	r3, #0
 800ff68:	930c      	str	r3, [sp, #48]	; 0x30
 800ff6a:	9b06      	ldr	r3, [sp, #24]
 800ff6c:	2500      	movs	r5, #0
 800ff6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ff72:	9312      	str	r3, [sp, #72]	; 0x48
 800ff74:	462e      	mov	r6, r5
 800ff76:	9b07      	ldr	r3, [sp, #28]
 800ff78:	4620      	mov	r0, r4
 800ff7a:	6859      	ldr	r1, [r3, #4]
 800ff7c:	f002 f876 	bl	801206c <_Balloc>
 800ff80:	9005      	str	r0, [sp, #20]
 800ff82:	2800      	cmp	r0, #0
 800ff84:	f43f af0c 	beq.w	800fda0 <_strtod_l+0x490>
 800ff88:	9b07      	ldr	r3, [sp, #28]
 800ff8a:	691a      	ldr	r2, [r3, #16]
 800ff8c:	3202      	adds	r2, #2
 800ff8e:	f103 010c 	add.w	r1, r3, #12
 800ff92:	0092      	lsls	r2, r2, #2
 800ff94:	300c      	adds	r0, #12
 800ff96:	f7fe fc83 	bl	800e8a0 <memcpy>
 800ff9a:	ec4b ab10 	vmov	d0, sl, fp
 800ff9e:	aa1a      	add	r2, sp, #104	; 0x68
 800ffa0:	a919      	add	r1, sp, #100	; 0x64
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f002 fc50 	bl	8012848 <__d2b>
 800ffa8:	ec4b ab18 	vmov	d8, sl, fp
 800ffac:	9018      	str	r0, [sp, #96]	; 0x60
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	f43f aef6 	beq.w	800fda0 <_strtod_l+0x490>
 800ffb4:	2101      	movs	r1, #1
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	f002 f99a 	bl	80122f0 <__i2b>
 800ffbc:	4606      	mov	r6, r0
 800ffbe:	2800      	cmp	r0, #0
 800ffc0:	f43f aeee 	beq.w	800fda0 <_strtod_l+0x490>
 800ffc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ffc6:	9904      	ldr	r1, [sp, #16]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	bfab      	itete	ge
 800ffcc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ffce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ffd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ffd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ffd6:	bfac      	ite	ge
 800ffd8:	eb03 0902 	addge.w	r9, r3, r2
 800ffdc:	1ad7      	sublt	r7, r2, r3
 800ffde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ffe0:	eba3 0801 	sub.w	r8, r3, r1
 800ffe4:	4490      	add	r8, r2
 800ffe6:	4ba1      	ldr	r3, [pc, #644]	; (801026c <_strtod_l+0x95c>)
 800ffe8:	f108 38ff 	add.w	r8, r8, #4294967295
 800ffec:	4598      	cmp	r8, r3
 800ffee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fff2:	f280 80c7 	bge.w	8010184 <_strtod_l+0x874>
 800fff6:	eba3 0308 	sub.w	r3, r3, r8
 800fffa:	2b1f      	cmp	r3, #31
 800fffc:	eba2 0203 	sub.w	r2, r2, r3
 8010000:	f04f 0101 	mov.w	r1, #1
 8010004:	f300 80b1 	bgt.w	801016a <_strtod_l+0x85a>
 8010008:	fa01 f303 	lsl.w	r3, r1, r3
 801000c:	930d      	str	r3, [sp, #52]	; 0x34
 801000e:	2300      	movs	r3, #0
 8010010:	9308      	str	r3, [sp, #32]
 8010012:	eb09 0802 	add.w	r8, r9, r2
 8010016:	9b04      	ldr	r3, [sp, #16]
 8010018:	45c1      	cmp	r9, r8
 801001a:	4417      	add	r7, r2
 801001c:	441f      	add	r7, r3
 801001e:	464b      	mov	r3, r9
 8010020:	bfa8      	it	ge
 8010022:	4643      	movge	r3, r8
 8010024:	42bb      	cmp	r3, r7
 8010026:	bfa8      	it	ge
 8010028:	463b      	movge	r3, r7
 801002a:	2b00      	cmp	r3, #0
 801002c:	bfc2      	ittt	gt
 801002e:	eba8 0803 	subgt.w	r8, r8, r3
 8010032:	1aff      	subgt	r7, r7, r3
 8010034:	eba9 0903 	subgt.w	r9, r9, r3
 8010038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801003a:	2b00      	cmp	r3, #0
 801003c:	dd17      	ble.n	801006e <_strtod_l+0x75e>
 801003e:	4631      	mov	r1, r6
 8010040:	461a      	mov	r2, r3
 8010042:	4620      	mov	r0, r4
 8010044:	f002 fa14 	bl	8012470 <__pow5mult>
 8010048:	4606      	mov	r6, r0
 801004a:	2800      	cmp	r0, #0
 801004c:	f43f aea8 	beq.w	800fda0 <_strtod_l+0x490>
 8010050:	4601      	mov	r1, r0
 8010052:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010054:	4620      	mov	r0, r4
 8010056:	f002 f961 	bl	801231c <__multiply>
 801005a:	900b      	str	r0, [sp, #44]	; 0x2c
 801005c:	2800      	cmp	r0, #0
 801005e:	f43f ae9f 	beq.w	800fda0 <_strtod_l+0x490>
 8010062:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010064:	4620      	mov	r0, r4
 8010066:	f002 f841 	bl	80120ec <_Bfree>
 801006a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801006c:	9318      	str	r3, [sp, #96]	; 0x60
 801006e:	f1b8 0f00 	cmp.w	r8, #0
 8010072:	f300 808c 	bgt.w	801018e <_strtod_l+0x87e>
 8010076:	9b06      	ldr	r3, [sp, #24]
 8010078:	2b00      	cmp	r3, #0
 801007a:	dd08      	ble.n	801008e <_strtod_l+0x77e>
 801007c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801007e:	9905      	ldr	r1, [sp, #20]
 8010080:	4620      	mov	r0, r4
 8010082:	f002 f9f5 	bl	8012470 <__pow5mult>
 8010086:	9005      	str	r0, [sp, #20]
 8010088:	2800      	cmp	r0, #0
 801008a:	f43f ae89 	beq.w	800fda0 <_strtod_l+0x490>
 801008e:	2f00      	cmp	r7, #0
 8010090:	dd08      	ble.n	80100a4 <_strtod_l+0x794>
 8010092:	9905      	ldr	r1, [sp, #20]
 8010094:	463a      	mov	r2, r7
 8010096:	4620      	mov	r0, r4
 8010098:	f002 fa44 	bl	8012524 <__lshift>
 801009c:	9005      	str	r0, [sp, #20]
 801009e:	2800      	cmp	r0, #0
 80100a0:	f43f ae7e 	beq.w	800fda0 <_strtod_l+0x490>
 80100a4:	f1b9 0f00 	cmp.w	r9, #0
 80100a8:	dd08      	ble.n	80100bc <_strtod_l+0x7ac>
 80100aa:	4631      	mov	r1, r6
 80100ac:	464a      	mov	r2, r9
 80100ae:	4620      	mov	r0, r4
 80100b0:	f002 fa38 	bl	8012524 <__lshift>
 80100b4:	4606      	mov	r6, r0
 80100b6:	2800      	cmp	r0, #0
 80100b8:	f43f ae72 	beq.w	800fda0 <_strtod_l+0x490>
 80100bc:	9a05      	ldr	r2, [sp, #20]
 80100be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80100c0:	4620      	mov	r0, r4
 80100c2:	f002 fabb 	bl	801263c <__mdiff>
 80100c6:	4605      	mov	r5, r0
 80100c8:	2800      	cmp	r0, #0
 80100ca:	f43f ae69 	beq.w	800fda0 <_strtod_l+0x490>
 80100ce:	68c3      	ldr	r3, [r0, #12]
 80100d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80100d2:	2300      	movs	r3, #0
 80100d4:	60c3      	str	r3, [r0, #12]
 80100d6:	4631      	mov	r1, r6
 80100d8:	f002 fa94 	bl	8012604 <__mcmp>
 80100dc:	2800      	cmp	r0, #0
 80100de:	da60      	bge.n	80101a2 <_strtod_l+0x892>
 80100e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100e2:	ea53 030a 	orrs.w	r3, r3, sl
 80100e6:	f040 8082 	bne.w	80101ee <_strtod_l+0x8de>
 80100ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d17d      	bne.n	80101ee <_strtod_l+0x8de>
 80100f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80100f6:	0d1b      	lsrs	r3, r3, #20
 80100f8:	051b      	lsls	r3, r3, #20
 80100fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80100fe:	d976      	bls.n	80101ee <_strtod_l+0x8de>
 8010100:	696b      	ldr	r3, [r5, #20]
 8010102:	b913      	cbnz	r3, 801010a <_strtod_l+0x7fa>
 8010104:	692b      	ldr	r3, [r5, #16]
 8010106:	2b01      	cmp	r3, #1
 8010108:	dd71      	ble.n	80101ee <_strtod_l+0x8de>
 801010a:	4629      	mov	r1, r5
 801010c:	2201      	movs	r2, #1
 801010e:	4620      	mov	r0, r4
 8010110:	f002 fa08 	bl	8012524 <__lshift>
 8010114:	4631      	mov	r1, r6
 8010116:	4605      	mov	r5, r0
 8010118:	f002 fa74 	bl	8012604 <__mcmp>
 801011c:	2800      	cmp	r0, #0
 801011e:	dd66      	ble.n	80101ee <_strtod_l+0x8de>
 8010120:	9904      	ldr	r1, [sp, #16]
 8010122:	4a53      	ldr	r2, [pc, #332]	; (8010270 <_strtod_l+0x960>)
 8010124:	465b      	mov	r3, fp
 8010126:	2900      	cmp	r1, #0
 8010128:	f000 8081 	beq.w	801022e <_strtod_l+0x91e>
 801012c:	ea02 010b 	and.w	r1, r2, fp
 8010130:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010134:	dc7b      	bgt.n	801022e <_strtod_l+0x91e>
 8010136:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801013a:	f77f aea9 	ble.w	800fe90 <_strtod_l+0x580>
 801013e:	4b4d      	ldr	r3, [pc, #308]	; (8010274 <_strtod_l+0x964>)
 8010140:	4650      	mov	r0, sl
 8010142:	4659      	mov	r1, fp
 8010144:	2200      	movs	r2, #0
 8010146:	f7f0 fa77 	bl	8000638 <__aeabi_dmul>
 801014a:	460b      	mov	r3, r1
 801014c:	4303      	orrs	r3, r0
 801014e:	bf08      	it	eq
 8010150:	2322      	moveq	r3, #34	; 0x22
 8010152:	4682      	mov	sl, r0
 8010154:	468b      	mov	fp, r1
 8010156:	bf08      	it	eq
 8010158:	6023      	streq	r3, [r4, #0]
 801015a:	e62b      	b.n	800fdb4 <_strtod_l+0x4a4>
 801015c:	f04f 32ff 	mov.w	r2, #4294967295
 8010160:	fa02 f303 	lsl.w	r3, r2, r3
 8010164:	ea03 0a0a 	and.w	sl, r3, sl
 8010168:	e6e3      	b.n	800ff32 <_strtod_l+0x622>
 801016a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801016e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010172:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010176:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801017a:	fa01 f308 	lsl.w	r3, r1, r8
 801017e:	9308      	str	r3, [sp, #32]
 8010180:	910d      	str	r1, [sp, #52]	; 0x34
 8010182:	e746      	b.n	8010012 <_strtod_l+0x702>
 8010184:	2300      	movs	r3, #0
 8010186:	9308      	str	r3, [sp, #32]
 8010188:	2301      	movs	r3, #1
 801018a:	930d      	str	r3, [sp, #52]	; 0x34
 801018c:	e741      	b.n	8010012 <_strtod_l+0x702>
 801018e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010190:	4642      	mov	r2, r8
 8010192:	4620      	mov	r0, r4
 8010194:	f002 f9c6 	bl	8012524 <__lshift>
 8010198:	9018      	str	r0, [sp, #96]	; 0x60
 801019a:	2800      	cmp	r0, #0
 801019c:	f47f af6b 	bne.w	8010076 <_strtod_l+0x766>
 80101a0:	e5fe      	b.n	800fda0 <_strtod_l+0x490>
 80101a2:	465f      	mov	r7, fp
 80101a4:	d16e      	bne.n	8010284 <_strtod_l+0x974>
 80101a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80101a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80101ac:	b342      	cbz	r2, 8010200 <_strtod_l+0x8f0>
 80101ae:	4a32      	ldr	r2, [pc, #200]	; (8010278 <_strtod_l+0x968>)
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d128      	bne.n	8010206 <_strtod_l+0x8f6>
 80101b4:	9b04      	ldr	r3, [sp, #16]
 80101b6:	4651      	mov	r1, sl
 80101b8:	b1eb      	cbz	r3, 80101f6 <_strtod_l+0x8e6>
 80101ba:	4b2d      	ldr	r3, [pc, #180]	; (8010270 <_strtod_l+0x960>)
 80101bc:	403b      	ands	r3, r7
 80101be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80101c2:	f04f 32ff 	mov.w	r2, #4294967295
 80101c6:	d819      	bhi.n	80101fc <_strtod_l+0x8ec>
 80101c8:	0d1b      	lsrs	r3, r3, #20
 80101ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80101ce:	fa02 f303 	lsl.w	r3, r2, r3
 80101d2:	4299      	cmp	r1, r3
 80101d4:	d117      	bne.n	8010206 <_strtod_l+0x8f6>
 80101d6:	4b29      	ldr	r3, [pc, #164]	; (801027c <_strtod_l+0x96c>)
 80101d8:	429f      	cmp	r7, r3
 80101da:	d102      	bne.n	80101e2 <_strtod_l+0x8d2>
 80101dc:	3101      	adds	r1, #1
 80101de:	f43f addf 	beq.w	800fda0 <_strtod_l+0x490>
 80101e2:	4b23      	ldr	r3, [pc, #140]	; (8010270 <_strtod_l+0x960>)
 80101e4:	403b      	ands	r3, r7
 80101e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80101ea:	f04f 0a00 	mov.w	sl, #0
 80101ee:	9b04      	ldr	r3, [sp, #16]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d1a4      	bne.n	801013e <_strtod_l+0x82e>
 80101f4:	e5de      	b.n	800fdb4 <_strtod_l+0x4a4>
 80101f6:	f04f 33ff 	mov.w	r3, #4294967295
 80101fa:	e7ea      	b.n	80101d2 <_strtod_l+0x8c2>
 80101fc:	4613      	mov	r3, r2
 80101fe:	e7e8      	b.n	80101d2 <_strtod_l+0x8c2>
 8010200:	ea53 030a 	orrs.w	r3, r3, sl
 8010204:	d08c      	beq.n	8010120 <_strtod_l+0x810>
 8010206:	9b08      	ldr	r3, [sp, #32]
 8010208:	b1db      	cbz	r3, 8010242 <_strtod_l+0x932>
 801020a:	423b      	tst	r3, r7
 801020c:	d0ef      	beq.n	80101ee <_strtod_l+0x8de>
 801020e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010210:	9a04      	ldr	r2, [sp, #16]
 8010212:	4650      	mov	r0, sl
 8010214:	4659      	mov	r1, fp
 8010216:	b1c3      	cbz	r3, 801024a <_strtod_l+0x93a>
 8010218:	f7ff fb5b 	bl	800f8d2 <sulp>
 801021c:	4602      	mov	r2, r0
 801021e:	460b      	mov	r3, r1
 8010220:	ec51 0b18 	vmov	r0, r1, d8
 8010224:	f7f0 f852 	bl	80002cc <__adddf3>
 8010228:	4682      	mov	sl, r0
 801022a:	468b      	mov	fp, r1
 801022c:	e7df      	b.n	80101ee <_strtod_l+0x8de>
 801022e:	4013      	ands	r3, r2
 8010230:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010234:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010238:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801023c:	f04f 3aff 	mov.w	sl, #4294967295
 8010240:	e7d5      	b.n	80101ee <_strtod_l+0x8de>
 8010242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010244:	ea13 0f0a 	tst.w	r3, sl
 8010248:	e7e0      	b.n	801020c <_strtod_l+0x8fc>
 801024a:	f7ff fb42 	bl	800f8d2 <sulp>
 801024e:	4602      	mov	r2, r0
 8010250:	460b      	mov	r3, r1
 8010252:	ec51 0b18 	vmov	r0, r1, d8
 8010256:	f7f0 f837 	bl	80002c8 <__aeabi_dsub>
 801025a:	2200      	movs	r2, #0
 801025c:	2300      	movs	r3, #0
 801025e:	4682      	mov	sl, r0
 8010260:	468b      	mov	fp, r1
 8010262:	f7f0 fc51 	bl	8000b08 <__aeabi_dcmpeq>
 8010266:	2800      	cmp	r0, #0
 8010268:	d0c1      	beq.n	80101ee <_strtod_l+0x8de>
 801026a:	e611      	b.n	800fe90 <_strtod_l+0x580>
 801026c:	fffffc02 	.word	0xfffffc02
 8010270:	7ff00000 	.word	0x7ff00000
 8010274:	39500000 	.word	0x39500000
 8010278:	000fffff 	.word	0x000fffff
 801027c:	7fefffff 	.word	0x7fefffff
 8010280:	08014a48 	.word	0x08014a48
 8010284:	4631      	mov	r1, r6
 8010286:	4628      	mov	r0, r5
 8010288:	f002 fb3a 	bl	8012900 <__ratio>
 801028c:	ec59 8b10 	vmov	r8, r9, d0
 8010290:	ee10 0a10 	vmov	r0, s0
 8010294:	2200      	movs	r2, #0
 8010296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801029a:	4649      	mov	r1, r9
 801029c:	f7f0 fc48 	bl	8000b30 <__aeabi_dcmple>
 80102a0:	2800      	cmp	r0, #0
 80102a2:	d07a      	beq.n	801039a <_strtod_l+0xa8a>
 80102a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d04a      	beq.n	8010340 <_strtod_l+0xa30>
 80102aa:	4b95      	ldr	r3, [pc, #596]	; (8010500 <_strtod_l+0xbf0>)
 80102ac:	2200      	movs	r2, #0
 80102ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80102b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010500 <_strtod_l+0xbf0>
 80102b6:	f04f 0800 	mov.w	r8, #0
 80102ba:	4b92      	ldr	r3, [pc, #584]	; (8010504 <_strtod_l+0xbf4>)
 80102bc:	403b      	ands	r3, r7
 80102be:	930d      	str	r3, [sp, #52]	; 0x34
 80102c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80102c2:	4b91      	ldr	r3, [pc, #580]	; (8010508 <_strtod_l+0xbf8>)
 80102c4:	429a      	cmp	r2, r3
 80102c6:	f040 80b0 	bne.w	801042a <_strtod_l+0xb1a>
 80102ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80102ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80102d2:	ec4b ab10 	vmov	d0, sl, fp
 80102d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80102da:	f002 fa39 	bl	8012750 <__ulp>
 80102de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80102e2:	ec53 2b10 	vmov	r2, r3, d0
 80102e6:	f7f0 f9a7 	bl	8000638 <__aeabi_dmul>
 80102ea:	4652      	mov	r2, sl
 80102ec:	465b      	mov	r3, fp
 80102ee:	f7ef ffed 	bl	80002cc <__adddf3>
 80102f2:	460b      	mov	r3, r1
 80102f4:	4983      	ldr	r1, [pc, #524]	; (8010504 <_strtod_l+0xbf4>)
 80102f6:	4a85      	ldr	r2, [pc, #532]	; (801050c <_strtod_l+0xbfc>)
 80102f8:	4019      	ands	r1, r3
 80102fa:	4291      	cmp	r1, r2
 80102fc:	4682      	mov	sl, r0
 80102fe:	d960      	bls.n	80103c2 <_strtod_l+0xab2>
 8010300:	ee18 3a90 	vmov	r3, s17
 8010304:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010308:	4293      	cmp	r3, r2
 801030a:	d104      	bne.n	8010316 <_strtod_l+0xa06>
 801030c:	ee18 3a10 	vmov	r3, s16
 8010310:	3301      	adds	r3, #1
 8010312:	f43f ad45 	beq.w	800fda0 <_strtod_l+0x490>
 8010316:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010518 <_strtod_l+0xc08>
 801031a:	f04f 3aff 	mov.w	sl, #4294967295
 801031e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010320:	4620      	mov	r0, r4
 8010322:	f001 fee3 	bl	80120ec <_Bfree>
 8010326:	9905      	ldr	r1, [sp, #20]
 8010328:	4620      	mov	r0, r4
 801032a:	f001 fedf 	bl	80120ec <_Bfree>
 801032e:	4631      	mov	r1, r6
 8010330:	4620      	mov	r0, r4
 8010332:	f001 fedb 	bl	80120ec <_Bfree>
 8010336:	4629      	mov	r1, r5
 8010338:	4620      	mov	r0, r4
 801033a:	f001 fed7 	bl	80120ec <_Bfree>
 801033e:	e61a      	b.n	800ff76 <_strtod_l+0x666>
 8010340:	f1ba 0f00 	cmp.w	sl, #0
 8010344:	d11b      	bne.n	801037e <_strtod_l+0xa6e>
 8010346:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801034a:	b9f3      	cbnz	r3, 801038a <_strtod_l+0xa7a>
 801034c:	4b6c      	ldr	r3, [pc, #432]	; (8010500 <_strtod_l+0xbf0>)
 801034e:	2200      	movs	r2, #0
 8010350:	4640      	mov	r0, r8
 8010352:	4649      	mov	r1, r9
 8010354:	f7f0 fbe2 	bl	8000b1c <__aeabi_dcmplt>
 8010358:	b9d0      	cbnz	r0, 8010390 <_strtod_l+0xa80>
 801035a:	4640      	mov	r0, r8
 801035c:	4649      	mov	r1, r9
 801035e:	4b6c      	ldr	r3, [pc, #432]	; (8010510 <_strtod_l+0xc00>)
 8010360:	2200      	movs	r2, #0
 8010362:	f7f0 f969 	bl	8000638 <__aeabi_dmul>
 8010366:	4680      	mov	r8, r0
 8010368:	4689      	mov	r9, r1
 801036a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801036e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010372:	9315      	str	r3, [sp, #84]	; 0x54
 8010374:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010378:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801037c:	e79d      	b.n	80102ba <_strtod_l+0x9aa>
 801037e:	f1ba 0f01 	cmp.w	sl, #1
 8010382:	d102      	bne.n	801038a <_strtod_l+0xa7a>
 8010384:	2f00      	cmp	r7, #0
 8010386:	f43f ad83 	beq.w	800fe90 <_strtod_l+0x580>
 801038a:	4b62      	ldr	r3, [pc, #392]	; (8010514 <_strtod_l+0xc04>)
 801038c:	2200      	movs	r2, #0
 801038e:	e78e      	b.n	80102ae <_strtod_l+0x99e>
 8010390:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010510 <_strtod_l+0xc00>
 8010394:	f04f 0800 	mov.w	r8, #0
 8010398:	e7e7      	b.n	801036a <_strtod_l+0xa5a>
 801039a:	4b5d      	ldr	r3, [pc, #372]	; (8010510 <_strtod_l+0xc00>)
 801039c:	4640      	mov	r0, r8
 801039e:	4649      	mov	r1, r9
 80103a0:	2200      	movs	r2, #0
 80103a2:	f7f0 f949 	bl	8000638 <__aeabi_dmul>
 80103a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103a8:	4680      	mov	r8, r0
 80103aa:	4689      	mov	r9, r1
 80103ac:	b933      	cbnz	r3, 80103bc <_strtod_l+0xaac>
 80103ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80103b2:	900e      	str	r0, [sp, #56]	; 0x38
 80103b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80103b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80103ba:	e7dd      	b.n	8010378 <_strtod_l+0xa68>
 80103bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80103c0:	e7f9      	b.n	80103b6 <_strtod_l+0xaa6>
 80103c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80103c6:	9b04      	ldr	r3, [sp, #16]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d1a8      	bne.n	801031e <_strtod_l+0xa0e>
 80103cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80103d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80103d2:	0d1b      	lsrs	r3, r3, #20
 80103d4:	051b      	lsls	r3, r3, #20
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d1a1      	bne.n	801031e <_strtod_l+0xa0e>
 80103da:	4640      	mov	r0, r8
 80103dc:	4649      	mov	r1, r9
 80103de:	f7f0 fc8b 	bl	8000cf8 <__aeabi_d2lz>
 80103e2:	f7f0 f8fb 	bl	80005dc <__aeabi_l2d>
 80103e6:	4602      	mov	r2, r0
 80103e8:	460b      	mov	r3, r1
 80103ea:	4640      	mov	r0, r8
 80103ec:	4649      	mov	r1, r9
 80103ee:	f7ef ff6b 	bl	80002c8 <__aeabi_dsub>
 80103f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80103f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80103f8:	ea43 030a 	orr.w	r3, r3, sl
 80103fc:	4313      	orrs	r3, r2
 80103fe:	4680      	mov	r8, r0
 8010400:	4689      	mov	r9, r1
 8010402:	d055      	beq.n	80104b0 <_strtod_l+0xba0>
 8010404:	a336      	add	r3, pc, #216	; (adr r3, 80104e0 <_strtod_l+0xbd0>)
 8010406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040a:	f7f0 fb87 	bl	8000b1c <__aeabi_dcmplt>
 801040e:	2800      	cmp	r0, #0
 8010410:	f47f acd0 	bne.w	800fdb4 <_strtod_l+0x4a4>
 8010414:	a334      	add	r3, pc, #208	; (adr r3, 80104e8 <_strtod_l+0xbd8>)
 8010416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041a:	4640      	mov	r0, r8
 801041c:	4649      	mov	r1, r9
 801041e:	f7f0 fb9b 	bl	8000b58 <__aeabi_dcmpgt>
 8010422:	2800      	cmp	r0, #0
 8010424:	f43f af7b 	beq.w	801031e <_strtod_l+0xa0e>
 8010428:	e4c4      	b.n	800fdb4 <_strtod_l+0x4a4>
 801042a:	9b04      	ldr	r3, [sp, #16]
 801042c:	b333      	cbz	r3, 801047c <_strtod_l+0xb6c>
 801042e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010430:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010434:	d822      	bhi.n	801047c <_strtod_l+0xb6c>
 8010436:	a32e      	add	r3, pc, #184	; (adr r3, 80104f0 <_strtod_l+0xbe0>)
 8010438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043c:	4640      	mov	r0, r8
 801043e:	4649      	mov	r1, r9
 8010440:	f7f0 fb76 	bl	8000b30 <__aeabi_dcmple>
 8010444:	b1a0      	cbz	r0, 8010470 <_strtod_l+0xb60>
 8010446:	4649      	mov	r1, r9
 8010448:	4640      	mov	r0, r8
 801044a:	f7f0 fbcd 	bl	8000be8 <__aeabi_d2uiz>
 801044e:	2801      	cmp	r0, #1
 8010450:	bf38      	it	cc
 8010452:	2001      	movcc	r0, #1
 8010454:	f7f0 f876 	bl	8000544 <__aeabi_ui2d>
 8010458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801045a:	4680      	mov	r8, r0
 801045c:	4689      	mov	r9, r1
 801045e:	bb23      	cbnz	r3, 80104aa <_strtod_l+0xb9a>
 8010460:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010464:	9010      	str	r0, [sp, #64]	; 0x40
 8010466:	9311      	str	r3, [sp, #68]	; 0x44
 8010468:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801046c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010472:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010474:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010478:	1a9b      	subs	r3, r3, r2
 801047a:	9309      	str	r3, [sp, #36]	; 0x24
 801047c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010480:	eeb0 0a48 	vmov.f32	s0, s16
 8010484:	eef0 0a68 	vmov.f32	s1, s17
 8010488:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801048c:	f002 f960 	bl	8012750 <__ulp>
 8010490:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010494:	ec53 2b10 	vmov	r2, r3, d0
 8010498:	f7f0 f8ce 	bl	8000638 <__aeabi_dmul>
 801049c:	ec53 2b18 	vmov	r2, r3, d8
 80104a0:	f7ef ff14 	bl	80002cc <__adddf3>
 80104a4:	4682      	mov	sl, r0
 80104a6:	468b      	mov	fp, r1
 80104a8:	e78d      	b.n	80103c6 <_strtod_l+0xab6>
 80104aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80104ae:	e7db      	b.n	8010468 <_strtod_l+0xb58>
 80104b0:	a311      	add	r3, pc, #68	; (adr r3, 80104f8 <_strtod_l+0xbe8>)
 80104b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b6:	f7f0 fb31 	bl	8000b1c <__aeabi_dcmplt>
 80104ba:	e7b2      	b.n	8010422 <_strtod_l+0xb12>
 80104bc:	2300      	movs	r3, #0
 80104be:	930a      	str	r3, [sp, #40]	; 0x28
 80104c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80104c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80104c4:	6013      	str	r3, [r2, #0]
 80104c6:	f7ff ba6b 	b.w	800f9a0 <_strtod_l+0x90>
 80104ca:	2a65      	cmp	r2, #101	; 0x65
 80104cc:	f43f ab5f 	beq.w	800fb8e <_strtod_l+0x27e>
 80104d0:	2a45      	cmp	r2, #69	; 0x45
 80104d2:	f43f ab5c 	beq.w	800fb8e <_strtod_l+0x27e>
 80104d6:	2301      	movs	r3, #1
 80104d8:	f7ff bb94 	b.w	800fc04 <_strtod_l+0x2f4>
 80104dc:	f3af 8000 	nop.w
 80104e0:	94a03595 	.word	0x94a03595
 80104e4:	3fdfffff 	.word	0x3fdfffff
 80104e8:	35afe535 	.word	0x35afe535
 80104ec:	3fe00000 	.word	0x3fe00000
 80104f0:	ffc00000 	.word	0xffc00000
 80104f4:	41dfffff 	.word	0x41dfffff
 80104f8:	94a03595 	.word	0x94a03595
 80104fc:	3fcfffff 	.word	0x3fcfffff
 8010500:	3ff00000 	.word	0x3ff00000
 8010504:	7ff00000 	.word	0x7ff00000
 8010508:	7fe00000 	.word	0x7fe00000
 801050c:	7c9fffff 	.word	0x7c9fffff
 8010510:	3fe00000 	.word	0x3fe00000
 8010514:	bff00000 	.word	0xbff00000
 8010518:	7fefffff 	.word	0x7fefffff

0801051c <_strtod_r>:
 801051c:	4b01      	ldr	r3, [pc, #4]	; (8010524 <_strtod_r+0x8>)
 801051e:	f7ff b9f7 	b.w	800f910 <_strtod_l>
 8010522:	bf00      	nop
 8010524:	20000178 	.word	0x20000178

08010528 <_strtol_l.constprop.0>:
 8010528:	2b01      	cmp	r3, #1
 801052a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801052e:	d001      	beq.n	8010534 <_strtol_l.constprop.0+0xc>
 8010530:	2b24      	cmp	r3, #36	; 0x24
 8010532:	d906      	bls.n	8010542 <_strtol_l.constprop.0+0x1a>
 8010534:	f7fe f98a 	bl	800e84c <__errno>
 8010538:	2316      	movs	r3, #22
 801053a:	6003      	str	r3, [r0, #0]
 801053c:	2000      	movs	r0, #0
 801053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010542:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010628 <_strtol_l.constprop.0+0x100>
 8010546:	460d      	mov	r5, r1
 8010548:	462e      	mov	r6, r5
 801054a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801054e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010552:	f017 0708 	ands.w	r7, r7, #8
 8010556:	d1f7      	bne.n	8010548 <_strtol_l.constprop.0+0x20>
 8010558:	2c2d      	cmp	r4, #45	; 0x2d
 801055a:	d132      	bne.n	80105c2 <_strtol_l.constprop.0+0x9a>
 801055c:	782c      	ldrb	r4, [r5, #0]
 801055e:	2701      	movs	r7, #1
 8010560:	1cb5      	adds	r5, r6, #2
 8010562:	2b00      	cmp	r3, #0
 8010564:	d05b      	beq.n	801061e <_strtol_l.constprop.0+0xf6>
 8010566:	2b10      	cmp	r3, #16
 8010568:	d109      	bne.n	801057e <_strtol_l.constprop.0+0x56>
 801056a:	2c30      	cmp	r4, #48	; 0x30
 801056c:	d107      	bne.n	801057e <_strtol_l.constprop.0+0x56>
 801056e:	782c      	ldrb	r4, [r5, #0]
 8010570:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010574:	2c58      	cmp	r4, #88	; 0x58
 8010576:	d14d      	bne.n	8010614 <_strtol_l.constprop.0+0xec>
 8010578:	786c      	ldrb	r4, [r5, #1]
 801057a:	2310      	movs	r3, #16
 801057c:	3502      	adds	r5, #2
 801057e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010582:	f108 38ff 	add.w	r8, r8, #4294967295
 8010586:	f04f 0c00 	mov.w	ip, #0
 801058a:	fbb8 f9f3 	udiv	r9, r8, r3
 801058e:	4666      	mov	r6, ip
 8010590:	fb03 8a19 	mls	sl, r3, r9, r8
 8010594:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010598:	f1be 0f09 	cmp.w	lr, #9
 801059c:	d816      	bhi.n	80105cc <_strtol_l.constprop.0+0xa4>
 801059e:	4674      	mov	r4, lr
 80105a0:	42a3      	cmp	r3, r4
 80105a2:	dd24      	ble.n	80105ee <_strtol_l.constprop.0+0xc6>
 80105a4:	f1bc 0f00 	cmp.w	ip, #0
 80105a8:	db1e      	blt.n	80105e8 <_strtol_l.constprop.0+0xc0>
 80105aa:	45b1      	cmp	r9, r6
 80105ac:	d31c      	bcc.n	80105e8 <_strtol_l.constprop.0+0xc0>
 80105ae:	d101      	bne.n	80105b4 <_strtol_l.constprop.0+0x8c>
 80105b0:	45a2      	cmp	sl, r4
 80105b2:	db19      	blt.n	80105e8 <_strtol_l.constprop.0+0xc0>
 80105b4:	fb06 4603 	mla	r6, r6, r3, r4
 80105b8:	f04f 0c01 	mov.w	ip, #1
 80105bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80105c0:	e7e8      	b.n	8010594 <_strtol_l.constprop.0+0x6c>
 80105c2:	2c2b      	cmp	r4, #43	; 0x2b
 80105c4:	bf04      	itt	eq
 80105c6:	782c      	ldrbeq	r4, [r5, #0]
 80105c8:	1cb5      	addeq	r5, r6, #2
 80105ca:	e7ca      	b.n	8010562 <_strtol_l.constprop.0+0x3a>
 80105cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80105d0:	f1be 0f19 	cmp.w	lr, #25
 80105d4:	d801      	bhi.n	80105da <_strtol_l.constprop.0+0xb2>
 80105d6:	3c37      	subs	r4, #55	; 0x37
 80105d8:	e7e2      	b.n	80105a0 <_strtol_l.constprop.0+0x78>
 80105da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80105de:	f1be 0f19 	cmp.w	lr, #25
 80105e2:	d804      	bhi.n	80105ee <_strtol_l.constprop.0+0xc6>
 80105e4:	3c57      	subs	r4, #87	; 0x57
 80105e6:	e7db      	b.n	80105a0 <_strtol_l.constprop.0+0x78>
 80105e8:	f04f 3cff 	mov.w	ip, #4294967295
 80105ec:	e7e6      	b.n	80105bc <_strtol_l.constprop.0+0x94>
 80105ee:	f1bc 0f00 	cmp.w	ip, #0
 80105f2:	da05      	bge.n	8010600 <_strtol_l.constprop.0+0xd8>
 80105f4:	2322      	movs	r3, #34	; 0x22
 80105f6:	6003      	str	r3, [r0, #0]
 80105f8:	4646      	mov	r6, r8
 80105fa:	b942      	cbnz	r2, 801060e <_strtol_l.constprop.0+0xe6>
 80105fc:	4630      	mov	r0, r6
 80105fe:	e79e      	b.n	801053e <_strtol_l.constprop.0+0x16>
 8010600:	b107      	cbz	r7, 8010604 <_strtol_l.constprop.0+0xdc>
 8010602:	4276      	negs	r6, r6
 8010604:	2a00      	cmp	r2, #0
 8010606:	d0f9      	beq.n	80105fc <_strtol_l.constprop.0+0xd4>
 8010608:	f1bc 0f00 	cmp.w	ip, #0
 801060c:	d000      	beq.n	8010610 <_strtol_l.constprop.0+0xe8>
 801060e:	1e69      	subs	r1, r5, #1
 8010610:	6011      	str	r1, [r2, #0]
 8010612:	e7f3      	b.n	80105fc <_strtol_l.constprop.0+0xd4>
 8010614:	2430      	movs	r4, #48	; 0x30
 8010616:	2b00      	cmp	r3, #0
 8010618:	d1b1      	bne.n	801057e <_strtol_l.constprop.0+0x56>
 801061a:	2308      	movs	r3, #8
 801061c:	e7af      	b.n	801057e <_strtol_l.constprop.0+0x56>
 801061e:	2c30      	cmp	r4, #48	; 0x30
 8010620:	d0a5      	beq.n	801056e <_strtol_l.constprop.0+0x46>
 8010622:	230a      	movs	r3, #10
 8010624:	e7ab      	b.n	801057e <_strtol_l.constprop.0+0x56>
 8010626:	bf00      	nop
 8010628:	080148e1 	.word	0x080148e1

0801062c <_strtol_r>:
 801062c:	f7ff bf7c 	b.w	8010528 <_strtol_l.constprop.0>

08010630 <__swbuf_r>:
 8010630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010632:	460e      	mov	r6, r1
 8010634:	4614      	mov	r4, r2
 8010636:	4605      	mov	r5, r0
 8010638:	b118      	cbz	r0, 8010642 <__swbuf_r+0x12>
 801063a:	6983      	ldr	r3, [r0, #24]
 801063c:	b90b      	cbnz	r3, 8010642 <__swbuf_r+0x12>
 801063e:	f001 f86f 	bl	8011720 <__sinit>
 8010642:	4b21      	ldr	r3, [pc, #132]	; (80106c8 <__swbuf_r+0x98>)
 8010644:	429c      	cmp	r4, r3
 8010646:	d12b      	bne.n	80106a0 <__swbuf_r+0x70>
 8010648:	686c      	ldr	r4, [r5, #4]
 801064a:	69a3      	ldr	r3, [r4, #24]
 801064c:	60a3      	str	r3, [r4, #8]
 801064e:	89a3      	ldrh	r3, [r4, #12]
 8010650:	071a      	lsls	r2, r3, #28
 8010652:	d52f      	bpl.n	80106b4 <__swbuf_r+0x84>
 8010654:	6923      	ldr	r3, [r4, #16]
 8010656:	b36b      	cbz	r3, 80106b4 <__swbuf_r+0x84>
 8010658:	6923      	ldr	r3, [r4, #16]
 801065a:	6820      	ldr	r0, [r4, #0]
 801065c:	1ac0      	subs	r0, r0, r3
 801065e:	6963      	ldr	r3, [r4, #20]
 8010660:	b2f6      	uxtb	r6, r6
 8010662:	4283      	cmp	r3, r0
 8010664:	4637      	mov	r7, r6
 8010666:	dc04      	bgt.n	8010672 <__swbuf_r+0x42>
 8010668:	4621      	mov	r1, r4
 801066a:	4628      	mov	r0, r5
 801066c:	f000 ffc4 	bl	80115f8 <_fflush_r>
 8010670:	bb30      	cbnz	r0, 80106c0 <__swbuf_r+0x90>
 8010672:	68a3      	ldr	r3, [r4, #8]
 8010674:	3b01      	subs	r3, #1
 8010676:	60a3      	str	r3, [r4, #8]
 8010678:	6823      	ldr	r3, [r4, #0]
 801067a:	1c5a      	adds	r2, r3, #1
 801067c:	6022      	str	r2, [r4, #0]
 801067e:	701e      	strb	r6, [r3, #0]
 8010680:	6963      	ldr	r3, [r4, #20]
 8010682:	3001      	adds	r0, #1
 8010684:	4283      	cmp	r3, r0
 8010686:	d004      	beq.n	8010692 <__swbuf_r+0x62>
 8010688:	89a3      	ldrh	r3, [r4, #12]
 801068a:	07db      	lsls	r3, r3, #31
 801068c:	d506      	bpl.n	801069c <__swbuf_r+0x6c>
 801068e:	2e0a      	cmp	r6, #10
 8010690:	d104      	bne.n	801069c <__swbuf_r+0x6c>
 8010692:	4621      	mov	r1, r4
 8010694:	4628      	mov	r0, r5
 8010696:	f000 ffaf 	bl	80115f8 <_fflush_r>
 801069a:	b988      	cbnz	r0, 80106c0 <__swbuf_r+0x90>
 801069c:	4638      	mov	r0, r7
 801069e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106a0:	4b0a      	ldr	r3, [pc, #40]	; (80106cc <__swbuf_r+0x9c>)
 80106a2:	429c      	cmp	r4, r3
 80106a4:	d101      	bne.n	80106aa <__swbuf_r+0x7a>
 80106a6:	68ac      	ldr	r4, [r5, #8]
 80106a8:	e7cf      	b.n	801064a <__swbuf_r+0x1a>
 80106aa:	4b09      	ldr	r3, [pc, #36]	; (80106d0 <__swbuf_r+0xa0>)
 80106ac:	429c      	cmp	r4, r3
 80106ae:	bf08      	it	eq
 80106b0:	68ec      	ldreq	r4, [r5, #12]
 80106b2:	e7ca      	b.n	801064a <__swbuf_r+0x1a>
 80106b4:	4621      	mov	r1, r4
 80106b6:	4628      	mov	r0, r5
 80106b8:	f000 f81e 	bl	80106f8 <__swsetup_r>
 80106bc:	2800      	cmp	r0, #0
 80106be:	d0cb      	beq.n	8010658 <__swbuf_r+0x28>
 80106c0:	f04f 37ff 	mov.w	r7, #4294967295
 80106c4:	e7ea      	b.n	801069c <__swbuf_r+0x6c>
 80106c6:	bf00      	nop
 80106c8:	08014b20 	.word	0x08014b20
 80106cc:	08014b40 	.word	0x08014b40
 80106d0:	08014b00 	.word	0x08014b00

080106d4 <_write_r>:
 80106d4:	b538      	push	{r3, r4, r5, lr}
 80106d6:	4d07      	ldr	r5, [pc, #28]	; (80106f4 <_write_r+0x20>)
 80106d8:	4604      	mov	r4, r0
 80106da:	4608      	mov	r0, r1
 80106dc:	4611      	mov	r1, r2
 80106de:	2200      	movs	r2, #0
 80106e0:	602a      	str	r2, [r5, #0]
 80106e2:	461a      	mov	r2, r3
 80106e4:	f7f3 fa0c 	bl	8003b00 <_write>
 80106e8:	1c43      	adds	r3, r0, #1
 80106ea:	d102      	bne.n	80106f2 <_write_r+0x1e>
 80106ec:	682b      	ldr	r3, [r5, #0]
 80106ee:	b103      	cbz	r3, 80106f2 <_write_r+0x1e>
 80106f0:	6023      	str	r3, [r4, #0]
 80106f2:	bd38      	pop	{r3, r4, r5, pc}
 80106f4:	2000314c 	.word	0x2000314c

080106f8 <__swsetup_r>:
 80106f8:	4b32      	ldr	r3, [pc, #200]	; (80107c4 <__swsetup_r+0xcc>)
 80106fa:	b570      	push	{r4, r5, r6, lr}
 80106fc:	681d      	ldr	r5, [r3, #0]
 80106fe:	4606      	mov	r6, r0
 8010700:	460c      	mov	r4, r1
 8010702:	b125      	cbz	r5, 801070e <__swsetup_r+0x16>
 8010704:	69ab      	ldr	r3, [r5, #24]
 8010706:	b913      	cbnz	r3, 801070e <__swsetup_r+0x16>
 8010708:	4628      	mov	r0, r5
 801070a:	f001 f809 	bl	8011720 <__sinit>
 801070e:	4b2e      	ldr	r3, [pc, #184]	; (80107c8 <__swsetup_r+0xd0>)
 8010710:	429c      	cmp	r4, r3
 8010712:	d10f      	bne.n	8010734 <__swsetup_r+0x3c>
 8010714:	686c      	ldr	r4, [r5, #4]
 8010716:	89a3      	ldrh	r3, [r4, #12]
 8010718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801071c:	0719      	lsls	r1, r3, #28
 801071e:	d42c      	bmi.n	801077a <__swsetup_r+0x82>
 8010720:	06dd      	lsls	r5, r3, #27
 8010722:	d411      	bmi.n	8010748 <__swsetup_r+0x50>
 8010724:	2309      	movs	r3, #9
 8010726:	6033      	str	r3, [r6, #0]
 8010728:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801072c:	81a3      	strh	r3, [r4, #12]
 801072e:	f04f 30ff 	mov.w	r0, #4294967295
 8010732:	e03e      	b.n	80107b2 <__swsetup_r+0xba>
 8010734:	4b25      	ldr	r3, [pc, #148]	; (80107cc <__swsetup_r+0xd4>)
 8010736:	429c      	cmp	r4, r3
 8010738:	d101      	bne.n	801073e <__swsetup_r+0x46>
 801073a:	68ac      	ldr	r4, [r5, #8]
 801073c:	e7eb      	b.n	8010716 <__swsetup_r+0x1e>
 801073e:	4b24      	ldr	r3, [pc, #144]	; (80107d0 <__swsetup_r+0xd8>)
 8010740:	429c      	cmp	r4, r3
 8010742:	bf08      	it	eq
 8010744:	68ec      	ldreq	r4, [r5, #12]
 8010746:	e7e6      	b.n	8010716 <__swsetup_r+0x1e>
 8010748:	0758      	lsls	r0, r3, #29
 801074a:	d512      	bpl.n	8010772 <__swsetup_r+0x7a>
 801074c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801074e:	b141      	cbz	r1, 8010762 <__swsetup_r+0x6a>
 8010750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010754:	4299      	cmp	r1, r3
 8010756:	d002      	beq.n	801075e <__swsetup_r+0x66>
 8010758:	4630      	mov	r0, r6
 801075a:	f002 f95f 	bl	8012a1c <_free_r>
 801075e:	2300      	movs	r3, #0
 8010760:	6363      	str	r3, [r4, #52]	; 0x34
 8010762:	89a3      	ldrh	r3, [r4, #12]
 8010764:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010768:	81a3      	strh	r3, [r4, #12]
 801076a:	2300      	movs	r3, #0
 801076c:	6063      	str	r3, [r4, #4]
 801076e:	6923      	ldr	r3, [r4, #16]
 8010770:	6023      	str	r3, [r4, #0]
 8010772:	89a3      	ldrh	r3, [r4, #12]
 8010774:	f043 0308 	orr.w	r3, r3, #8
 8010778:	81a3      	strh	r3, [r4, #12]
 801077a:	6923      	ldr	r3, [r4, #16]
 801077c:	b94b      	cbnz	r3, 8010792 <__swsetup_r+0x9a>
 801077e:	89a3      	ldrh	r3, [r4, #12]
 8010780:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010788:	d003      	beq.n	8010792 <__swsetup_r+0x9a>
 801078a:	4621      	mov	r1, r4
 801078c:	4630      	mov	r0, r6
 801078e:	f001 fc13 	bl	8011fb8 <__smakebuf_r>
 8010792:	89a0      	ldrh	r0, [r4, #12]
 8010794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010798:	f010 0301 	ands.w	r3, r0, #1
 801079c:	d00a      	beq.n	80107b4 <__swsetup_r+0xbc>
 801079e:	2300      	movs	r3, #0
 80107a0:	60a3      	str	r3, [r4, #8]
 80107a2:	6963      	ldr	r3, [r4, #20]
 80107a4:	425b      	negs	r3, r3
 80107a6:	61a3      	str	r3, [r4, #24]
 80107a8:	6923      	ldr	r3, [r4, #16]
 80107aa:	b943      	cbnz	r3, 80107be <__swsetup_r+0xc6>
 80107ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80107b0:	d1ba      	bne.n	8010728 <__swsetup_r+0x30>
 80107b2:	bd70      	pop	{r4, r5, r6, pc}
 80107b4:	0781      	lsls	r1, r0, #30
 80107b6:	bf58      	it	pl
 80107b8:	6963      	ldrpl	r3, [r4, #20]
 80107ba:	60a3      	str	r3, [r4, #8]
 80107bc:	e7f4      	b.n	80107a8 <__swsetup_r+0xb0>
 80107be:	2000      	movs	r0, #0
 80107c0:	e7f7      	b.n	80107b2 <__swsetup_r+0xba>
 80107c2:	bf00      	nop
 80107c4:	20000110 	.word	0x20000110
 80107c8:	08014b20 	.word	0x08014b20
 80107cc:	08014b40 	.word	0x08014b40
 80107d0:	08014b00 	.word	0x08014b00

080107d4 <_close_r>:
 80107d4:	b538      	push	{r3, r4, r5, lr}
 80107d6:	4d06      	ldr	r5, [pc, #24]	; (80107f0 <_close_r+0x1c>)
 80107d8:	2300      	movs	r3, #0
 80107da:	4604      	mov	r4, r0
 80107dc:	4608      	mov	r0, r1
 80107de:	602b      	str	r3, [r5, #0]
 80107e0:	f7f3 fcf5 	bl	80041ce <_close>
 80107e4:	1c43      	adds	r3, r0, #1
 80107e6:	d102      	bne.n	80107ee <_close_r+0x1a>
 80107e8:	682b      	ldr	r3, [r5, #0]
 80107ea:	b103      	cbz	r3, 80107ee <_close_r+0x1a>
 80107ec:	6023      	str	r3, [r4, #0]
 80107ee:	bd38      	pop	{r3, r4, r5, pc}
 80107f0:	2000314c 	.word	0x2000314c

080107f4 <quorem>:
 80107f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f8:	6903      	ldr	r3, [r0, #16]
 80107fa:	690c      	ldr	r4, [r1, #16]
 80107fc:	42a3      	cmp	r3, r4
 80107fe:	4607      	mov	r7, r0
 8010800:	f2c0 8081 	blt.w	8010906 <quorem+0x112>
 8010804:	3c01      	subs	r4, #1
 8010806:	f101 0814 	add.w	r8, r1, #20
 801080a:	f100 0514 	add.w	r5, r0, #20
 801080e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010812:	9301      	str	r3, [sp, #4]
 8010814:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010818:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801081c:	3301      	adds	r3, #1
 801081e:	429a      	cmp	r2, r3
 8010820:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010824:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010828:	fbb2 f6f3 	udiv	r6, r2, r3
 801082c:	d331      	bcc.n	8010892 <quorem+0x9e>
 801082e:	f04f 0e00 	mov.w	lr, #0
 8010832:	4640      	mov	r0, r8
 8010834:	46ac      	mov	ip, r5
 8010836:	46f2      	mov	sl, lr
 8010838:	f850 2b04 	ldr.w	r2, [r0], #4
 801083c:	b293      	uxth	r3, r2
 801083e:	fb06 e303 	mla	r3, r6, r3, lr
 8010842:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010846:	b29b      	uxth	r3, r3
 8010848:	ebaa 0303 	sub.w	r3, sl, r3
 801084c:	f8dc a000 	ldr.w	sl, [ip]
 8010850:	0c12      	lsrs	r2, r2, #16
 8010852:	fa13 f38a 	uxtah	r3, r3, sl
 8010856:	fb06 e202 	mla	r2, r6, r2, lr
 801085a:	9300      	str	r3, [sp, #0]
 801085c:	9b00      	ldr	r3, [sp, #0]
 801085e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010862:	b292      	uxth	r2, r2
 8010864:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010868:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801086c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010870:	4581      	cmp	r9, r0
 8010872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010876:	f84c 3b04 	str.w	r3, [ip], #4
 801087a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801087e:	d2db      	bcs.n	8010838 <quorem+0x44>
 8010880:	f855 300b 	ldr.w	r3, [r5, fp]
 8010884:	b92b      	cbnz	r3, 8010892 <quorem+0x9e>
 8010886:	9b01      	ldr	r3, [sp, #4]
 8010888:	3b04      	subs	r3, #4
 801088a:	429d      	cmp	r5, r3
 801088c:	461a      	mov	r2, r3
 801088e:	d32e      	bcc.n	80108ee <quorem+0xfa>
 8010890:	613c      	str	r4, [r7, #16]
 8010892:	4638      	mov	r0, r7
 8010894:	f001 feb6 	bl	8012604 <__mcmp>
 8010898:	2800      	cmp	r0, #0
 801089a:	db24      	blt.n	80108e6 <quorem+0xf2>
 801089c:	3601      	adds	r6, #1
 801089e:	4628      	mov	r0, r5
 80108a0:	f04f 0c00 	mov.w	ip, #0
 80108a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80108a8:	f8d0 e000 	ldr.w	lr, [r0]
 80108ac:	b293      	uxth	r3, r2
 80108ae:	ebac 0303 	sub.w	r3, ip, r3
 80108b2:	0c12      	lsrs	r2, r2, #16
 80108b4:	fa13 f38e 	uxtah	r3, r3, lr
 80108b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80108bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108c6:	45c1      	cmp	r9, r8
 80108c8:	f840 3b04 	str.w	r3, [r0], #4
 80108cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80108d0:	d2e8      	bcs.n	80108a4 <quorem+0xb0>
 80108d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80108d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80108da:	b922      	cbnz	r2, 80108e6 <quorem+0xf2>
 80108dc:	3b04      	subs	r3, #4
 80108de:	429d      	cmp	r5, r3
 80108e0:	461a      	mov	r2, r3
 80108e2:	d30a      	bcc.n	80108fa <quorem+0x106>
 80108e4:	613c      	str	r4, [r7, #16]
 80108e6:	4630      	mov	r0, r6
 80108e8:	b003      	add	sp, #12
 80108ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ee:	6812      	ldr	r2, [r2, #0]
 80108f0:	3b04      	subs	r3, #4
 80108f2:	2a00      	cmp	r2, #0
 80108f4:	d1cc      	bne.n	8010890 <quorem+0x9c>
 80108f6:	3c01      	subs	r4, #1
 80108f8:	e7c7      	b.n	801088a <quorem+0x96>
 80108fa:	6812      	ldr	r2, [r2, #0]
 80108fc:	3b04      	subs	r3, #4
 80108fe:	2a00      	cmp	r2, #0
 8010900:	d1f0      	bne.n	80108e4 <quorem+0xf0>
 8010902:	3c01      	subs	r4, #1
 8010904:	e7eb      	b.n	80108de <quorem+0xea>
 8010906:	2000      	movs	r0, #0
 8010908:	e7ee      	b.n	80108e8 <quorem+0xf4>
 801090a:	0000      	movs	r0, r0
 801090c:	0000      	movs	r0, r0
	...

08010910 <_dtoa_r>:
 8010910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010914:	ed2d 8b04 	vpush	{d8-d9}
 8010918:	ec57 6b10 	vmov	r6, r7, d0
 801091c:	b093      	sub	sp, #76	; 0x4c
 801091e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010920:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010924:	9106      	str	r1, [sp, #24]
 8010926:	ee10 aa10 	vmov	sl, s0
 801092a:	4604      	mov	r4, r0
 801092c:	9209      	str	r2, [sp, #36]	; 0x24
 801092e:	930c      	str	r3, [sp, #48]	; 0x30
 8010930:	46bb      	mov	fp, r7
 8010932:	b975      	cbnz	r5, 8010952 <_dtoa_r+0x42>
 8010934:	2010      	movs	r0, #16
 8010936:	f001 fb7f 	bl	8012038 <malloc>
 801093a:	4602      	mov	r2, r0
 801093c:	6260      	str	r0, [r4, #36]	; 0x24
 801093e:	b920      	cbnz	r0, 801094a <_dtoa_r+0x3a>
 8010940:	4ba7      	ldr	r3, [pc, #668]	; (8010be0 <_dtoa_r+0x2d0>)
 8010942:	21ea      	movs	r1, #234	; 0xea
 8010944:	48a7      	ldr	r0, [pc, #668]	; (8010be4 <_dtoa_r+0x2d4>)
 8010946:	f003 f857 	bl	80139f8 <__assert_func>
 801094a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801094e:	6005      	str	r5, [r0, #0]
 8010950:	60c5      	str	r5, [r0, #12]
 8010952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010954:	6819      	ldr	r1, [r3, #0]
 8010956:	b151      	cbz	r1, 801096e <_dtoa_r+0x5e>
 8010958:	685a      	ldr	r2, [r3, #4]
 801095a:	604a      	str	r2, [r1, #4]
 801095c:	2301      	movs	r3, #1
 801095e:	4093      	lsls	r3, r2
 8010960:	608b      	str	r3, [r1, #8]
 8010962:	4620      	mov	r0, r4
 8010964:	f001 fbc2 	bl	80120ec <_Bfree>
 8010968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801096a:	2200      	movs	r2, #0
 801096c:	601a      	str	r2, [r3, #0]
 801096e:	1e3b      	subs	r3, r7, #0
 8010970:	bfaa      	itet	ge
 8010972:	2300      	movge	r3, #0
 8010974:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010978:	f8c8 3000 	strge.w	r3, [r8]
 801097c:	4b9a      	ldr	r3, [pc, #616]	; (8010be8 <_dtoa_r+0x2d8>)
 801097e:	bfbc      	itt	lt
 8010980:	2201      	movlt	r2, #1
 8010982:	f8c8 2000 	strlt.w	r2, [r8]
 8010986:	ea33 030b 	bics.w	r3, r3, fp
 801098a:	d11b      	bne.n	80109c4 <_dtoa_r+0xb4>
 801098c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801098e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010992:	6013      	str	r3, [r2, #0]
 8010994:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010998:	4333      	orrs	r3, r6
 801099a:	f000 8592 	beq.w	80114c2 <_dtoa_r+0xbb2>
 801099e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109a0:	b963      	cbnz	r3, 80109bc <_dtoa_r+0xac>
 80109a2:	4b92      	ldr	r3, [pc, #584]	; (8010bec <_dtoa_r+0x2dc>)
 80109a4:	e022      	b.n	80109ec <_dtoa_r+0xdc>
 80109a6:	4b92      	ldr	r3, [pc, #584]	; (8010bf0 <_dtoa_r+0x2e0>)
 80109a8:	9301      	str	r3, [sp, #4]
 80109aa:	3308      	adds	r3, #8
 80109ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80109ae:	6013      	str	r3, [r2, #0]
 80109b0:	9801      	ldr	r0, [sp, #4]
 80109b2:	b013      	add	sp, #76	; 0x4c
 80109b4:	ecbd 8b04 	vpop	{d8-d9}
 80109b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109bc:	4b8b      	ldr	r3, [pc, #556]	; (8010bec <_dtoa_r+0x2dc>)
 80109be:	9301      	str	r3, [sp, #4]
 80109c0:	3303      	adds	r3, #3
 80109c2:	e7f3      	b.n	80109ac <_dtoa_r+0x9c>
 80109c4:	2200      	movs	r2, #0
 80109c6:	2300      	movs	r3, #0
 80109c8:	4650      	mov	r0, sl
 80109ca:	4659      	mov	r1, fp
 80109cc:	f7f0 f89c 	bl	8000b08 <__aeabi_dcmpeq>
 80109d0:	ec4b ab19 	vmov	d9, sl, fp
 80109d4:	4680      	mov	r8, r0
 80109d6:	b158      	cbz	r0, 80109f0 <_dtoa_r+0xe0>
 80109d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109da:	2301      	movs	r3, #1
 80109dc:	6013      	str	r3, [r2, #0]
 80109de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	f000 856b 	beq.w	80114bc <_dtoa_r+0xbac>
 80109e6:	4883      	ldr	r0, [pc, #524]	; (8010bf4 <_dtoa_r+0x2e4>)
 80109e8:	6018      	str	r0, [r3, #0]
 80109ea:	1e43      	subs	r3, r0, #1
 80109ec:	9301      	str	r3, [sp, #4]
 80109ee:	e7df      	b.n	80109b0 <_dtoa_r+0xa0>
 80109f0:	ec4b ab10 	vmov	d0, sl, fp
 80109f4:	aa10      	add	r2, sp, #64	; 0x40
 80109f6:	a911      	add	r1, sp, #68	; 0x44
 80109f8:	4620      	mov	r0, r4
 80109fa:	f001 ff25 	bl	8012848 <__d2b>
 80109fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010a02:	ee08 0a10 	vmov	s16, r0
 8010a06:	2d00      	cmp	r5, #0
 8010a08:	f000 8084 	beq.w	8010b14 <_dtoa_r+0x204>
 8010a0c:	ee19 3a90 	vmov	r3, s19
 8010a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010a18:	4656      	mov	r6, sl
 8010a1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010a1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010a22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010a26:	4b74      	ldr	r3, [pc, #464]	; (8010bf8 <_dtoa_r+0x2e8>)
 8010a28:	2200      	movs	r2, #0
 8010a2a:	4630      	mov	r0, r6
 8010a2c:	4639      	mov	r1, r7
 8010a2e:	f7ef fc4b 	bl	80002c8 <__aeabi_dsub>
 8010a32:	a365      	add	r3, pc, #404	; (adr r3, 8010bc8 <_dtoa_r+0x2b8>)
 8010a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a38:	f7ef fdfe 	bl	8000638 <__aeabi_dmul>
 8010a3c:	a364      	add	r3, pc, #400	; (adr r3, 8010bd0 <_dtoa_r+0x2c0>)
 8010a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a42:	f7ef fc43 	bl	80002cc <__adddf3>
 8010a46:	4606      	mov	r6, r0
 8010a48:	4628      	mov	r0, r5
 8010a4a:	460f      	mov	r7, r1
 8010a4c:	f7ef fd8a 	bl	8000564 <__aeabi_i2d>
 8010a50:	a361      	add	r3, pc, #388	; (adr r3, 8010bd8 <_dtoa_r+0x2c8>)
 8010a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a56:	f7ef fdef 	bl	8000638 <__aeabi_dmul>
 8010a5a:	4602      	mov	r2, r0
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	4630      	mov	r0, r6
 8010a60:	4639      	mov	r1, r7
 8010a62:	f7ef fc33 	bl	80002cc <__adddf3>
 8010a66:	4606      	mov	r6, r0
 8010a68:	460f      	mov	r7, r1
 8010a6a:	f7f0 f895 	bl	8000b98 <__aeabi_d2iz>
 8010a6e:	2200      	movs	r2, #0
 8010a70:	9000      	str	r0, [sp, #0]
 8010a72:	2300      	movs	r3, #0
 8010a74:	4630      	mov	r0, r6
 8010a76:	4639      	mov	r1, r7
 8010a78:	f7f0 f850 	bl	8000b1c <__aeabi_dcmplt>
 8010a7c:	b150      	cbz	r0, 8010a94 <_dtoa_r+0x184>
 8010a7e:	9800      	ldr	r0, [sp, #0]
 8010a80:	f7ef fd70 	bl	8000564 <__aeabi_i2d>
 8010a84:	4632      	mov	r2, r6
 8010a86:	463b      	mov	r3, r7
 8010a88:	f7f0 f83e 	bl	8000b08 <__aeabi_dcmpeq>
 8010a8c:	b910      	cbnz	r0, 8010a94 <_dtoa_r+0x184>
 8010a8e:	9b00      	ldr	r3, [sp, #0]
 8010a90:	3b01      	subs	r3, #1
 8010a92:	9300      	str	r3, [sp, #0]
 8010a94:	9b00      	ldr	r3, [sp, #0]
 8010a96:	2b16      	cmp	r3, #22
 8010a98:	d85a      	bhi.n	8010b50 <_dtoa_r+0x240>
 8010a9a:	9a00      	ldr	r2, [sp, #0]
 8010a9c:	4b57      	ldr	r3, [pc, #348]	; (8010bfc <_dtoa_r+0x2ec>)
 8010a9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa6:	ec51 0b19 	vmov	r0, r1, d9
 8010aaa:	f7f0 f837 	bl	8000b1c <__aeabi_dcmplt>
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	d050      	beq.n	8010b54 <_dtoa_r+0x244>
 8010ab2:	9b00      	ldr	r3, [sp, #0]
 8010ab4:	3b01      	subs	r3, #1
 8010ab6:	9300      	str	r3, [sp, #0]
 8010ab8:	2300      	movs	r3, #0
 8010aba:	930b      	str	r3, [sp, #44]	; 0x2c
 8010abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010abe:	1b5d      	subs	r5, r3, r5
 8010ac0:	1e6b      	subs	r3, r5, #1
 8010ac2:	9305      	str	r3, [sp, #20]
 8010ac4:	bf45      	ittet	mi
 8010ac6:	f1c5 0301 	rsbmi	r3, r5, #1
 8010aca:	9304      	strmi	r3, [sp, #16]
 8010acc:	2300      	movpl	r3, #0
 8010ace:	2300      	movmi	r3, #0
 8010ad0:	bf4c      	ite	mi
 8010ad2:	9305      	strmi	r3, [sp, #20]
 8010ad4:	9304      	strpl	r3, [sp, #16]
 8010ad6:	9b00      	ldr	r3, [sp, #0]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	db3d      	blt.n	8010b58 <_dtoa_r+0x248>
 8010adc:	9b05      	ldr	r3, [sp, #20]
 8010ade:	9a00      	ldr	r2, [sp, #0]
 8010ae0:	920a      	str	r2, [sp, #40]	; 0x28
 8010ae2:	4413      	add	r3, r2
 8010ae4:	9305      	str	r3, [sp, #20]
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	9307      	str	r3, [sp, #28]
 8010aea:	9b06      	ldr	r3, [sp, #24]
 8010aec:	2b09      	cmp	r3, #9
 8010aee:	f200 8089 	bhi.w	8010c04 <_dtoa_r+0x2f4>
 8010af2:	2b05      	cmp	r3, #5
 8010af4:	bfc4      	itt	gt
 8010af6:	3b04      	subgt	r3, #4
 8010af8:	9306      	strgt	r3, [sp, #24]
 8010afa:	9b06      	ldr	r3, [sp, #24]
 8010afc:	f1a3 0302 	sub.w	r3, r3, #2
 8010b00:	bfcc      	ite	gt
 8010b02:	2500      	movgt	r5, #0
 8010b04:	2501      	movle	r5, #1
 8010b06:	2b03      	cmp	r3, #3
 8010b08:	f200 8087 	bhi.w	8010c1a <_dtoa_r+0x30a>
 8010b0c:	e8df f003 	tbb	[pc, r3]
 8010b10:	59383a2d 	.word	0x59383a2d
 8010b14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010b18:	441d      	add	r5, r3
 8010b1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010b1e:	2b20      	cmp	r3, #32
 8010b20:	bfc1      	itttt	gt
 8010b22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010b26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010b2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8010b2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010b32:	bfda      	itte	le
 8010b34:	f1c3 0320 	rsble	r3, r3, #32
 8010b38:	fa06 f003 	lslle.w	r0, r6, r3
 8010b3c:	4318      	orrgt	r0, r3
 8010b3e:	f7ef fd01 	bl	8000544 <__aeabi_ui2d>
 8010b42:	2301      	movs	r3, #1
 8010b44:	4606      	mov	r6, r0
 8010b46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010b4a:	3d01      	subs	r5, #1
 8010b4c:	930e      	str	r3, [sp, #56]	; 0x38
 8010b4e:	e76a      	b.n	8010a26 <_dtoa_r+0x116>
 8010b50:	2301      	movs	r3, #1
 8010b52:	e7b2      	b.n	8010aba <_dtoa_r+0x1aa>
 8010b54:	900b      	str	r0, [sp, #44]	; 0x2c
 8010b56:	e7b1      	b.n	8010abc <_dtoa_r+0x1ac>
 8010b58:	9b04      	ldr	r3, [sp, #16]
 8010b5a:	9a00      	ldr	r2, [sp, #0]
 8010b5c:	1a9b      	subs	r3, r3, r2
 8010b5e:	9304      	str	r3, [sp, #16]
 8010b60:	4253      	negs	r3, r2
 8010b62:	9307      	str	r3, [sp, #28]
 8010b64:	2300      	movs	r3, #0
 8010b66:	930a      	str	r3, [sp, #40]	; 0x28
 8010b68:	e7bf      	b.n	8010aea <_dtoa_r+0x1da>
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	9308      	str	r3, [sp, #32]
 8010b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	dc55      	bgt.n	8010c20 <_dtoa_r+0x310>
 8010b74:	2301      	movs	r3, #1
 8010b76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8010b7e:	e00c      	b.n	8010b9a <_dtoa_r+0x28a>
 8010b80:	2301      	movs	r3, #1
 8010b82:	e7f3      	b.n	8010b6c <_dtoa_r+0x25c>
 8010b84:	2300      	movs	r3, #0
 8010b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b88:	9308      	str	r3, [sp, #32]
 8010b8a:	9b00      	ldr	r3, [sp, #0]
 8010b8c:	4413      	add	r3, r2
 8010b8e:	9302      	str	r3, [sp, #8]
 8010b90:	3301      	adds	r3, #1
 8010b92:	2b01      	cmp	r3, #1
 8010b94:	9303      	str	r3, [sp, #12]
 8010b96:	bfb8      	it	lt
 8010b98:	2301      	movlt	r3, #1
 8010b9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	6042      	str	r2, [r0, #4]
 8010ba0:	2204      	movs	r2, #4
 8010ba2:	f102 0614 	add.w	r6, r2, #20
 8010ba6:	429e      	cmp	r6, r3
 8010ba8:	6841      	ldr	r1, [r0, #4]
 8010baa:	d93d      	bls.n	8010c28 <_dtoa_r+0x318>
 8010bac:	4620      	mov	r0, r4
 8010bae:	f001 fa5d 	bl	801206c <_Balloc>
 8010bb2:	9001      	str	r0, [sp, #4]
 8010bb4:	2800      	cmp	r0, #0
 8010bb6:	d13b      	bne.n	8010c30 <_dtoa_r+0x320>
 8010bb8:	4b11      	ldr	r3, [pc, #68]	; (8010c00 <_dtoa_r+0x2f0>)
 8010bba:	4602      	mov	r2, r0
 8010bbc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010bc0:	e6c0      	b.n	8010944 <_dtoa_r+0x34>
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	e7df      	b.n	8010b86 <_dtoa_r+0x276>
 8010bc6:	bf00      	nop
 8010bc8:	636f4361 	.word	0x636f4361
 8010bcc:	3fd287a7 	.word	0x3fd287a7
 8010bd0:	8b60c8b3 	.word	0x8b60c8b3
 8010bd4:	3fc68a28 	.word	0x3fc68a28
 8010bd8:	509f79fb 	.word	0x509f79fb
 8010bdc:	3fd34413 	.word	0x3fd34413
 8010be0:	08014a7d 	.word	0x08014a7d
 8010be4:	08014a94 	.word	0x08014a94
 8010be8:	7ff00000 	.word	0x7ff00000
 8010bec:	08014a79 	.word	0x08014a79
 8010bf0:	08014a70 	.word	0x08014a70
 8010bf4:	08014d4a 	.word	0x08014d4a
 8010bf8:	3ff80000 	.word	0x3ff80000
 8010bfc:	08014c60 	.word	0x08014c60
 8010c00:	08014aef 	.word	0x08014aef
 8010c04:	2501      	movs	r5, #1
 8010c06:	2300      	movs	r3, #0
 8010c08:	9306      	str	r3, [sp, #24]
 8010c0a:	9508      	str	r5, [sp, #32]
 8010c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c14:	2200      	movs	r2, #0
 8010c16:	2312      	movs	r3, #18
 8010c18:	e7b0      	b.n	8010b7c <_dtoa_r+0x26c>
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	9308      	str	r3, [sp, #32]
 8010c1e:	e7f5      	b.n	8010c0c <_dtoa_r+0x2fc>
 8010c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c26:	e7b8      	b.n	8010b9a <_dtoa_r+0x28a>
 8010c28:	3101      	adds	r1, #1
 8010c2a:	6041      	str	r1, [r0, #4]
 8010c2c:	0052      	lsls	r2, r2, #1
 8010c2e:	e7b8      	b.n	8010ba2 <_dtoa_r+0x292>
 8010c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c32:	9a01      	ldr	r2, [sp, #4]
 8010c34:	601a      	str	r2, [r3, #0]
 8010c36:	9b03      	ldr	r3, [sp, #12]
 8010c38:	2b0e      	cmp	r3, #14
 8010c3a:	f200 809d 	bhi.w	8010d78 <_dtoa_r+0x468>
 8010c3e:	2d00      	cmp	r5, #0
 8010c40:	f000 809a 	beq.w	8010d78 <_dtoa_r+0x468>
 8010c44:	9b00      	ldr	r3, [sp, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	dd32      	ble.n	8010cb0 <_dtoa_r+0x3a0>
 8010c4a:	4ab7      	ldr	r2, [pc, #732]	; (8010f28 <_dtoa_r+0x618>)
 8010c4c:	f003 030f 	and.w	r3, r3, #15
 8010c50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010c54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010c58:	9b00      	ldr	r3, [sp, #0]
 8010c5a:	05d8      	lsls	r0, r3, #23
 8010c5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010c60:	d516      	bpl.n	8010c90 <_dtoa_r+0x380>
 8010c62:	4bb2      	ldr	r3, [pc, #712]	; (8010f2c <_dtoa_r+0x61c>)
 8010c64:	ec51 0b19 	vmov	r0, r1, d9
 8010c68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010c6c:	f7ef fe0e 	bl	800088c <__aeabi_ddiv>
 8010c70:	f007 070f 	and.w	r7, r7, #15
 8010c74:	4682      	mov	sl, r0
 8010c76:	468b      	mov	fp, r1
 8010c78:	2503      	movs	r5, #3
 8010c7a:	4eac      	ldr	r6, [pc, #688]	; (8010f2c <_dtoa_r+0x61c>)
 8010c7c:	b957      	cbnz	r7, 8010c94 <_dtoa_r+0x384>
 8010c7e:	4642      	mov	r2, r8
 8010c80:	464b      	mov	r3, r9
 8010c82:	4650      	mov	r0, sl
 8010c84:	4659      	mov	r1, fp
 8010c86:	f7ef fe01 	bl	800088c <__aeabi_ddiv>
 8010c8a:	4682      	mov	sl, r0
 8010c8c:	468b      	mov	fp, r1
 8010c8e:	e028      	b.n	8010ce2 <_dtoa_r+0x3d2>
 8010c90:	2502      	movs	r5, #2
 8010c92:	e7f2      	b.n	8010c7a <_dtoa_r+0x36a>
 8010c94:	07f9      	lsls	r1, r7, #31
 8010c96:	d508      	bpl.n	8010caa <_dtoa_r+0x39a>
 8010c98:	4640      	mov	r0, r8
 8010c9a:	4649      	mov	r1, r9
 8010c9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010ca0:	f7ef fcca 	bl	8000638 <__aeabi_dmul>
 8010ca4:	3501      	adds	r5, #1
 8010ca6:	4680      	mov	r8, r0
 8010ca8:	4689      	mov	r9, r1
 8010caa:	107f      	asrs	r7, r7, #1
 8010cac:	3608      	adds	r6, #8
 8010cae:	e7e5      	b.n	8010c7c <_dtoa_r+0x36c>
 8010cb0:	f000 809b 	beq.w	8010dea <_dtoa_r+0x4da>
 8010cb4:	9b00      	ldr	r3, [sp, #0]
 8010cb6:	4f9d      	ldr	r7, [pc, #628]	; (8010f2c <_dtoa_r+0x61c>)
 8010cb8:	425e      	negs	r6, r3
 8010cba:	4b9b      	ldr	r3, [pc, #620]	; (8010f28 <_dtoa_r+0x618>)
 8010cbc:	f006 020f 	and.w	r2, r6, #15
 8010cc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc8:	ec51 0b19 	vmov	r0, r1, d9
 8010ccc:	f7ef fcb4 	bl	8000638 <__aeabi_dmul>
 8010cd0:	1136      	asrs	r6, r6, #4
 8010cd2:	4682      	mov	sl, r0
 8010cd4:	468b      	mov	fp, r1
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	2502      	movs	r5, #2
 8010cda:	2e00      	cmp	r6, #0
 8010cdc:	d17a      	bne.n	8010dd4 <_dtoa_r+0x4c4>
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d1d3      	bne.n	8010c8a <_dtoa_r+0x37a>
 8010ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	f000 8082 	beq.w	8010dee <_dtoa_r+0x4de>
 8010cea:	4b91      	ldr	r3, [pc, #580]	; (8010f30 <_dtoa_r+0x620>)
 8010cec:	2200      	movs	r2, #0
 8010cee:	4650      	mov	r0, sl
 8010cf0:	4659      	mov	r1, fp
 8010cf2:	f7ef ff13 	bl	8000b1c <__aeabi_dcmplt>
 8010cf6:	2800      	cmp	r0, #0
 8010cf8:	d079      	beq.n	8010dee <_dtoa_r+0x4de>
 8010cfa:	9b03      	ldr	r3, [sp, #12]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d076      	beq.n	8010dee <_dtoa_r+0x4de>
 8010d00:	9b02      	ldr	r3, [sp, #8]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	dd36      	ble.n	8010d74 <_dtoa_r+0x464>
 8010d06:	9b00      	ldr	r3, [sp, #0]
 8010d08:	4650      	mov	r0, sl
 8010d0a:	4659      	mov	r1, fp
 8010d0c:	1e5f      	subs	r7, r3, #1
 8010d0e:	2200      	movs	r2, #0
 8010d10:	4b88      	ldr	r3, [pc, #544]	; (8010f34 <_dtoa_r+0x624>)
 8010d12:	f7ef fc91 	bl	8000638 <__aeabi_dmul>
 8010d16:	9e02      	ldr	r6, [sp, #8]
 8010d18:	4682      	mov	sl, r0
 8010d1a:	468b      	mov	fp, r1
 8010d1c:	3501      	adds	r5, #1
 8010d1e:	4628      	mov	r0, r5
 8010d20:	f7ef fc20 	bl	8000564 <__aeabi_i2d>
 8010d24:	4652      	mov	r2, sl
 8010d26:	465b      	mov	r3, fp
 8010d28:	f7ef fc86 	bl	8000638 <__aeabi_dmul>
 8010d2c:	4b82      	ldr	r3, [pc, #520]	; (8010f38 <_dtoa_r+0x628>)
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f7ef facc 	bl	80002cc <__adddf3>
 8010d34:	46d0      	mov	r8, sl
 8010d36:	46d9      	mov	r9, fp
 8010d38:	4682      	mov	sl, r0
 8010d3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010d3e:	2e00      	cmp	r6, #0
 8010d40:	d158      	bne.n	8010df4 <_dtoa_r+0x4e4>
 8010d42:	4b7e      	ldr	r3, [pc, #504]	; (8010f3c <_dtoa_r+0x62c>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	4640      	mov	r0, r8
 8010d48:	4649      	mov	r1, r9
 8010d4a:	f7ef fabd 	bl	80002c8 <__aeabi_dsub>
 8010d4e:	4652      	mov	r2, sl
 8010d50:	465b      	mov	r3, fp
 8010d52:	4680      	mov	r8, r0
 8010d54:	4689      	mov	r9, r1
 8010d56:	f7ef feff 	bl	8000b58 <__aeabi_dcmpgt>
 8010d5a:	2800      	cmp	r0, #0
 8010d5c:	f040 8295 	bne.w	801128a <_dtoa_r+0x97a>
 8010d60:	4652      	mov	r2, sl
 8010d62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010d66:	4640      	mov	r0, r8
 8010d68:	4649      	mov	r1, r9
 8010d6a:	f7ef fed7 	bl	8000b1c <__aeabi_dcmplt>
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	f040 8289 	bne.w	8011286 <_dtoa_r+0x976>
 8010d74:	ec5b ab19 	vmov	sl, fp, d9
 8010d78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	f2c0 8148 	blt.w	8011010 <_dtoa_r+0x700>
 8010d80:	9a00      	ldr	r2, [sp, #0]
 8010d82:	2a0e      	cmp	r2, #14
 8010d84:	f300 8144 	bgt.w	8011010 <_dtoa_r+0x700>
 8010d88:	4b67      	ldr	r3, [pc, #412]	; (8010f28 <_dtoa_r+0x618>)
 8010d8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	f280 80d5 	bge.w	8010f44 <_dtoa_r+0x634>
 8010d9a:	9b03      	ldr	r3, [sp, #12]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	f300 80d1 	bgt.w	8010f44 <_dtoa_r+0x634>
 8010da2:	f040 826f 	bne.w	8011284 <_dtoa_r+0x974>
 8010da6:	4b65      	ldr	r3, [pc, #404]	; (8010f3c <_dtoa_r+0x62c>)
 8010da8:	2200      	movs	r2, #0
 8010daa:	4640      	mov	r0, r8
 8010dac:	4649      	mov	r1, r9
 8010dae:	f7ef fc43 	bl	8000638 <__aeabi_dmul>
 8010db2:	4652      	mov	r2, sl
 8010db4:	465b      	mov	r3, fp
 8010db6:	f7ef fec5 	bl	8000b44 <__aeabi_dcmpge>
 8010dba:	9e03      	ldr	r6, [sp, #12]
 8010dbc:	4637      	mov	r7, r6
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	f040 8245 	bne.w	801124e <_dtoa_r+0x93e>
 8010dc4:	9d01      	ldr	r5, [sp, #4]
 8010dc6:	2331      	movs	r3, #49	; 0x31
 8010dc8:	f805 3b01 	strb.w	r3, [r5], #1
 8010dcc:	9b00      	ldr	r3, [sp, #0]
 8010dce:	3301      	adds	r3, #1
 8010dd0:	9300      	str	r3, [sp, #0]
 8010dd2:	e240      	b.n	8011256 <_dtoa_r+0x946>
 8010dd4:	07f2      	lsls	r2, r6, #31
 8010dd6:	d505      	bpl.n	8010de4 <_dtoa_r+0x4d4>
 8010dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ddc:	f7ef fc2c 	bl	8000638 <__aeabi_dmul>
 8010de0:	3501      	adds	r5, #1
 8010de2:	2301      	movs	r3, #1
 8010de4:	1076      	asrs	r6, r6, #1
 8010de6:	3708      	adds	r7, #8
 8010de8:	e777      	b.n	8010cda <_dtoa_r+0x3ca>
 8010dea:	2502      	movs	r5, #2
 8010dec:	e779      	b.n	8010ce2 <_dtoa_r+0x3d2>
 8010dee:	9f00      	ldr	r7, [sp, #0]
 8010df0:	9e03      	ldr	r6, [sp, #12]
 8010df2:	e794      	b.n	8010d1e <_dtoa_r+0x40e>
 8010df4:	9901      	ldr	r1, [sp, #4]
 8010df6:	4b4c      	ldr	r3, [pc, #304]	; (8010f28 <_dtoa_r+0x618>)
 8010df8:	4431      	add	r1, r6
 8010dfa:	910d      	str	r1, [sp, #52]	; 0x34
 8010dfc:	9908      	ldr	r1, [sp, #32]
 8010dfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010e02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010e06:	2900      	cmp	r1, #0
 8010e08:	d043      	beq.n	8010e92 <_dtoa_r+0x582>
 8010e0a:	494d      	ldr	r1, [pc, #308]	; (8010f40 <_dtoa_r+0x630>)
 8010e0c:	2000      	movs	r0, #0
 8010e0e:	f7ef fd3d 	bl	800088c <__aeabi_ddiv>
 8010e12:	4652      	mov	r2, sl
 8010e14:	465b      	mov	r3, fp
 8010e16:	f7ef fa57 	bl	80002c8 <__aeabi_dsub>
 8010e1a:	9d01      	ldr	r5, [sp, #4]
 8010e1c:	4682      	mov	sl, r0
 8010e1e:	468b      	mov	fp, r1
 8010e20:	4649      	mov	r1, r9
 8010e22:	4640      	mov	r0, r8
 8010e24:	f7ef feb8 	bl	8000b98 <__aeabi_d2iz>
 8010e28:	4606      	mov	r6, r0
 8010e2a:	f7ef fb9b 	bl	8000564 <__aeabi_i2d>
 8010e2e:	4602      	mov	r2, r0
 8010e30:	460b      	mov	r3, r1
 8010e32:	4640      	mov	r0, r8
 8010e34:	4649      	mov	r1, r9
 8010e36:	f7ef fa47 	bl	80002c8 <__aeabi_dsub>
 8010e3a:	3630      	adds	r6, #48	; 0x30
 8010e3c:	f805 6b01 	strb.w	r6, [r5], #1
 8010e40:	4652      	mov	r2, sl
 8010e42:	465b      	mov	r3, fp
 8010e44:	4680      	mov	r8, r0
 8010e46:	4689      	mov	r9, r1
 8010e48:	f7ef fe68 	bl	8000b1c <__aeabi_dcmplt>
 8010e4c:	2800      	cmp	r0, #0
 8010e4e:	d163      	bne.n	8010f18 <_dtoa_r+0x608>
 8010e50:	4642      	mov	r2, r8
 8010e52:	464b      	mov	r3, r9
 8010e54:	4936      	ldr	r1, [pc, #216]	; (8010f30 <_dtoa_r+0x620>)
 8010e56:	2000      	movs	r0, #0
 8010e58:	f7ef fa36 	bl	80002c8 <__aeabi_dsub>
 8010e5c:	4652      	mov	r2, sl
 8010e5e:	465b      	mov	r3, fp
 8010e60:	f7ef fe5c 	bl	8000b1c <__aeabi_dcmplt>
 8010e64:	2800      	cmp	r0, #0
 8010e66:	f040 80b5 	bne.w	8010fd4 <_dtoa_r+0x6c4>
 8010e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e6c:	429d      	cmp	r5, r3
 8010e6e:	d081      	beq.n	8010d74 <_dtoa_r+0x464>
 8010e70:	4b30      	ldr	r3, [pc, #192]	; (8010f34 <_dtoa_r+0x624>)
 8010e72:	2200      	movs	r2, #0
 8010e74:	4650      	mov	r0, sl
 8010e76:	4659      	mov	r1, fp
 8010e78:	f7ef fbde 	bl	8000638 <__aeabi_dmul>
 8010e7c:	4b2d      	ldr	r3, [pc, #180]	; (8010f34 <_dtoa_r+0x624>)
 8010e7e:	4682      	mov	sl, r0
 8010e80:	468b      	mov	fp, r1
 8010e82:	4640      	mov	r0, r8
 8010e84:	4649      	mov	r1, r9
 8010e86:	2200      	movs	r2, #0
 8010e88:	f7ef fbd6 	bl	8000638 <__aeabi_dmul>
 8010e8c:	4680      	mov	r8, r0
 8010e8e:	4689      	mov	r9, r1
 8010e90:	e7c6      	b.n	8010e20 <_dtoa_r+0x510>
 8010e92:	4650      	mov	r0, sl
 8010e94:	4659      	mov	r1, fp
 8010e96:	f7ef fbcf 	bl	8000638 <__aeabi_dmul>
 8010e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e9c:	9d01      	ldr	r5, [sp, #4]
 8010e9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ea0:	4682      	mov	sl, r0
 8010ea2:	468b      	mov	fp, r1
 8010ea4:	4649      	mov	r1, r9
 8010ea6:	4640      	mov	r0, r8
 8010ea8:	f7ef fe76 	bl	8000b98 <__aeabi_d2iz>
 8010eac:	4606      	mov	r6, r0
 8010eae:	f7ef fb59 	bl	8000564 <__aeabi_i2d>
 8010eb2:	3630      	adds	r6, #48	; 0x30
 8010eb4:	4602      	mov	r2, r0
 8010eb6:	460b      	mov	r3, r1
 8010eb8:	4640      	mov	r0, r8
 8010eba:	4649      	mov	r1, r9
 8010ebc:	f7ef fa04 	bl	80002c8 <__aeabi_dsub>
 8010ec0:	f805 6b01 	strb.w	r6, [r5], #1
 8010ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ec6:	429d      	cmp	r5, r3
 8010ec8:	4680      	mov	r8, r0
 8010eca:	4689      	mov	r9, r1
 8010ecc:	f04f 0200 	mov.w	r2, #0
 8010ed0:	d124      	bne.n	8010f1c <_dtoa_r+0x60c>
 8010ed2:	4b1b      	ldr	r3, [pc, #108]	; (8010f40 <_dtoa_r+0x630>)
 8010ed4:	4650      	mov	r0, sl
 8010ed6:	4659      	mov	r1, fp
 8010ed8:	f7ef f9f8 	bl	80002cc <__adddf3>
 8010edc:	4602      	mov	r2, r0
 8010ede:	460b      	mov	r3, r1
 8010ee0:	4640      	mov	r0, r8
 8010ee2:	4649      	mov	r1, r9
 8010ee4:	f7ef fe38 	bl	8000b58 <__aeabi_dcmpgt>
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	d173      	bne.n	8010fd4 <_dtoa_r+0x6c4>
 8010eec:	4652      	mov	r2, sl
 8010eee:	465b      	mov	r3, fp
 8010ef0:	4913      	ldr	r1, [pc, #76]	; (8010f40 <_dtoa_r+0x630>)
 8010ef2:	2000      	movs	r0, #0
 8010ef4:	f7ef f9e8 	bl	80002c8 <__aeabi_dsub>
 8010ef8:	4602      	mov	r2, r0
 8010efa:	460b      	mov	r3, r1
 8010efc:	4640      	mov	r0, r8
 8010efe:	4649      	mov	r1, r9
 8010f00:	f7ef fe0c 	bl	8000b1c <__aeabi_dcmplt>
 8010f04:	2800      	cmp	r0, #0
 8010f06:	f43f af35 	beq.w	8010d74 <_dtoa_r+0x464>
 8010f0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010f0c:	1e6b      	subs	r3, r5, #1
 8010f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010f14:	2b30      	cmp	r3, #48	; 0x30
 8010f16:	d0f8      	beq.n	8010f0a <_dtoa_r+0x5fa>
 8010f18:	9700      	str	r7, [sp, #0]
 8010f1a:	e049      	b.n	8010fb0 <_dtoa_r+0x6a0>
 8010f1c:	4b05      	ldr	r3, [pc, #20]	; (8010f34 <_dtoa_r+0x624>)
 8010f1e:	f7ef fb8b 	bl	8000638 <__aeabi_dmul>
 8010f22:	4680      	mov	r8, r0
 8010f24:	4689      	mov	r9, r1
 8010f26:	e7bd      	b.n	8010ea4 <_dtoa_r+0x594>
 8010f28:	08014c60 	.word	0x08014c60
 8010f2c:	08014c38 	.word	0x08014c38
 8010f30:	3ff00000 	.word	0x3ff00000
 8010f34:	40240000 	.word	0x40240000
 8010f38:	401c0000 	.word	0x401c0000
 8010f3c:	40140000 	.word	0x40140000
 8010f40:	3fe00000 	.word	0x3fe00000
 8010f44:	9d01      	ldr	r5, [sp, #4]
 8010f46:	4656      	mov	r6, sl
 8010f48:	465f      	mov	r7, fp
 8010f4a:	4642      	mov	r2, r8
 8010f4c:	464b      	mov	r3, r9
 8010f4e:	4630      	mov	r0, r6
 8010f50:	4639      	mov	r1, r7
 8010f52:	f7ef fc9b 	bl	800088c <__aeabi_ddiv>
 8010f56:	f7ef fe1f 	bl	8000b98 <__aeabi_d2iz>
 8010f5a:	4682      	mov	sl, r0
 8010f5c:	f7ef fb02 	bl	8000564 <__aeabi_i2d>
 8010f60:	4642      	mov	r2, r8
 8010f62:	464b      	mov	r3, r9
 8010f64:	f7ef fb68 	bl	8000638 <__aeabi_dmul>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	4630      	mov	r0, r6
 8010f6e:	4639      	mov	r1, r7
 8010f70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010f74:	f7ef f9a8 	bl	80002c8 <__aeabi_dsub>
 8010f78:	f805 6b01 	strb.w	r6, [r5], #1
 8010f7c:	9e01      	ldr	r6, [sp, #4]
 8010f7e:	9f03      	ldr	r7, [sp, #12]
 8010f80:	1bae      	subs	r6, r5, r6
 8010f82:	42b7      	cmp	r7, r6
 8010f84:	4602      	mov	r2, r0
 8010f86:	460b      	mov	r3, r1
 8010f88:	d135      	bne.n	8010ff6 <_dtoa_r+0x6e6>
 8010f8a:	f7ef f99f 	bl	80002cc <__adddf3>
 8010f8e:	4642      	mov	r2, r8
 8010f90:	464b      	mov	r3, r9
 8010f92:	4606      	mov	r6, r0
 8010f94:	460f      	mov	r7, r1
 8010f96:	f7ef fddf 	bl	8000b58 <__aeabi_dcmpgt>
 8010f9a:	b9d0      	cbnz	r0, 8010fd2 <_dtoa_r+0x6c2>
 8010f9c:	4642      	mov	r2, r8
 8010f9e:	464b      	mov	r3, r9
 8010fa0:	4630      	mov	r0, r6
 8010fa2:	4639      	mov	r1, r7
 8010fa4:	f7ef fdb0 	bl	8000b08 <__aeabi_dcmpeq>
 8010fa8:	b110      	cbz	r0, 8010fb0 <_dtoa_r+0x6a0>
 8010faa:	f01a 0f01 	tst.w	sl, #1
 8010fae:	d110      	bne.n	8010fd2 <_dtoa_r+0x6c2>
 8010fb0:	4620      	mov	r0, r4
 8010fb2:	ee18 1a10 	vmov	r1, s16
 8010fb6:	f001 f899 	bl	80120ec <_Bfree>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	9800      	ldr	r0, [sp, #0]
 8010fbe:	702b      	strb	r3, [r5, #0]
 8010fc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010fc2:	3001      	adds	r0, #1
 8010fc4:	6018      	str	r0, [r3, #0]
 8010fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	f43f acf1 	beq.w	80109b0 <_dtoa_r+0xa0>
 8010fce:	601d      	str	r5, [r3, #0]
 8010fd0:	e4ee      	b.n	80109b0 <_dtoa_r+0xa0>
 8010fd2:	9f00      	ldr	r7, [sp, #0]
 8010fd4:	462b      	mov	r3, r5
 8010fd6:	461d      	mov	r5, r3
 8010fd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010fdc:	2a39      	cmp	r2, #57	; 0x39
 8010fde:	d106      	bne.n	8010fee <_dtoa_r+0x6de>
 8010fe0:	9a01      	ldr	r2, [sp, #4]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d1f7      	bne.n	8010fd6 <_dtoa_r+0x6c6>
 8010fe6:	9901      	ldr	r1, [sp, #4]
 8010fe8:	2230      	movs	r2, #48	; 0x30
 8010fea:	3701      	adds	r7, #1
 8010fec:	700a      	strb	r2, [r1, #0]
 8010fee:	781a      	ldrb	r2, [r3, #0]
 8010ff0:	3201      	adds	r2, #1
 8010ff2:	701a      	strb	r2, [r3, #0]
 8010ff4:	e790      	b.n	8010f18 <_dtoa_r+0x608>
 8010ff6:	4ba6      	ldr	r3, [pc, #664]	; (8011290 <_dtoa_r+0x980>)
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	f7ef fb1d 	bl	8000638 <__aeabi_dmul>
 8010ffe:	2200      	movs	r2, #0
 8011000:	2300      	movs	r3, #0
 8011002:	4606      	mov	r6, r0
 8011004:	460f      	mov	r7, r1
 8011006:	f7ef fd7f 	bl	8000b08 <__aeabi_dcmpeq>
 801100a:	2800      	cmp	r0, #0
 801100c:	d09d      	beq.n	8010f4a <_dtoa_r+0x63a>
 801100e:	e7cf      	b.n	8010fb0 <_dtoa_r+0x6a0>
 8011010:	9a08      	ldr	r2, [sp, #32]
 8011012:	2a00      	cmp	r2, #0
 8011014:	f000 80d7 	beq.w	80111c6 <_dtoa_r+0x8b6>
 8011018:	9a06      	ldr	r2, [sp, #24]
 801101a:	2a01      	cmp	r2, #1
 801101c:	f300 80ba 	bgt.w	8011194 <_dtoa_r+0x884>
 8011020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011022:	2a00      	cmp	r2, #0
 8011024:	f000 80b2 	beq.w	801118c <_dtoa_r+0x87c>
 8011028:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801102c:	9e07      	ldr	r6, [sp, #28]
 801102e:	9d04      	ldr	r5, [sp, #16]
 8011030:	9a04      	ldr	r2, [sp, #16]
 8011032:	441a      	add	r2, r3
 8011034:	9204      	str	r2, [sp, #16]
 8011036:	9a05      	ldr	r2, [sp, #20]
 8011038:	2101      	movs	r1, #1
 801103a:	441a      	add	r2, r3
 801103c:	4620      	mov	r0, r4
 801103e:	9205      	str	r2, [sp, #20]
 8011040:	f001 f956 	bl	80122f0 <__i2b>
 8011044:	4607      	mov	r7, r0
 8011046:	2d00      	cmp	r5, #0
 8011048:	dd0c      	ble.n	8011064 <_dtoa_r+0x754>
 801104a:	9b05      	ldr	r3, [sp, #20]
 801104c:	2b00      	cmp	r3, #0
 801104e:	dd09      	ble.n	8011064 <_dtoa_r+0x754>
 8011050:	42ab      	cmp	r3, r5
 8011052:	9a04      	ldr	r2, [sp, #16]
 8011054:	bfa8      	it	ge
 8011056:	462b      	movge	r3, r5
 8011058:	1ad2      	subs	r2, r2, r3
 801105a:	9204      	str	r2, [sp, #16]
 801105c:	9a05      	ldr	r2, [sp, #20]
 801105e:	1aed      	subs	r5, r5, r3
 8011060:	1ad3      	subs	r3, r2, r3
 8011062:	9305      	str	r3, [sp, #20]
 8011064:	9b07      	ldr	r3, [sp, #28]
 8011066:	b31b      	cbz	r3, 80110b0 <_dtoa_r+0x7a0>
 8011068:	9b08      	ldr	r3, [sp, #32]
 801106a:	2b00      	cmp	r3, #0
 801106c:	f000 80af 	beq.w	80111ce <_dtoa_r+0x8be>
 8011070:	2e00      	cmp	r6, #0
 8011072:	dd13      	ble.n	801109c <_dtoa_r+0x78c>
 8011074:	4639      	mov	r1, r7
 8011076:	4632      	mov	r2, r6
 8011078:	4620      	mov	r0, r4
 801107a:	f001 f9f9 	bl	8012470 <__pow5mult>
 801107e:	ee18 2a10 	vmov	r2, s16
 8011082:	4601      	mov	r1, r0
 8011084:	4607      	mov	r7, r0
 8011086:	4620      	mov	r0, r4
 8011088:	f001 f948 	bl	801231c <__multiply>
 801108c:	ee18 1a10 	vmov	r1, s16
 8011090:	4680      	mov	r8, r0
 8011092:	4620      	mov	r0, r4
 8011094:	f001 f82a 	bl	80120ec <_Bfree>
 8011098:	ee08 8a10 	vmov	s16, r8
 801109c:	9b07      	ldr	r3, [sp, #28]
 801109e:	1b9a      	subs	r2, r3, r6
 80110a0:	d006      	beq.n	80110b0 <_dtoa_r+0x7a0>
 80110a2:	ee18 1a10 	vmov	r1, s16
 80110a6:	4620      	mov	r0, r4
 80110a8:	f001 f9e2 	bl	8012470 <__pow5mult>
 80110ac:	ee08 0a10 	vmov	s16, r0
 80110b0:	2101      	movs	r1, #1
 80110b2:	4620      	mov	r0, r4
 80110b4:	f001 f91c 	bl	80122f0 <__i2b>
 80110b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	4606      	mov	r6, r0
 80110be:	f340 8088 	ble.w	80111d2 <_dtoa_r+0x8c2>
 80110c2:	461a      	mov	r2, r3
 80110c4:	4601      	mov	r1, r0
 80110c6:	4620      	mov	r0, r4
 80110c8:	f001 f9d2 	bl	8012470 <__pow5mult>
 80110cc:	9b06      	ldr	r3, [sp, #24]
 80110ce:	2b01      	cmp	r3, #1
 80110d0:	4606      	mov	r6, r0
 80110d2:	f340 8081 	ble.w	80111d8 <_dtoa_r+0x8c8>
 80110d6:	f04f 0800 	mov.w	r8, #0
 80110da:	6933      	ldr	r3, [r6, #16]
 80110dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80110e0:	6918      	ldr	r0, [r3, #16]
 80110e2:	f001 f8b5 	bl	8012250 <__hi0bits>
 80110e6:	f1c0 0020 	rsb	r0, r0, #32
 80110ea:	9b05      	ldr	r3, [sp, #20]
 80110ec:	4418      	add	r0, r3
 80110ee:	f010 001f 	ands.w	r0, r0, #31
 80110f2:	f000 8092 	beq.w	801121a <_dtoa_r+0x90a>
 80110f6:	f1c0 0320 	rsb	r3, r0, #32
 80110fa:	2b04      	cmp	r3, #4
 80110fc:	f340 808a 	ble.w	8011214 <_dtoa_r+0x904>
 8011100:	f1c0 001c 	rsb	r0, r0, #28
 8011104:	9b04      	ldr	r3, [sp, #16]
 8011106:	4403      	add	r3, r0
 8011108:	9304      	str	r3, [sp, #16]
 801110a:	9b05      	ldr	r3, [sp, #20]
 801110c:	4403      	add	r3, r0
 801110e:	4405      	add	r5, r0
 8011110:	9305      	str	r3, [sp, #20]
 8011112:	9b04      	ldr	r3, [sp, #16]
 8011114:	2b00      	cmp	r3, #0
 8011116:	dd07      	ble.n	8011128 <_dtoa_r+0x818>
 8011118:	ee18 1a10 	vmov	r1, s16
 801111c:	461a      	mov	r2, r3
 801111e:	4620      	mov	r0, r4
 8011120:	f001 fa00 	bl	8012524 <__lshift>
 8011124:	ee08 0a10 	vmov	s16, r0
 8011128:	9b05      	ldr	r3, [sp, #20]
 801112a:	2b00      	cmp	r3, #0
 801112c:	dd05      	ble.n	801113a <_dtoa_r+0x82a>
 801112e:	4631      	mov	r1, r6
 8011130:	461a      	mov	r2, r3
 8011132:	4620      	mov	r0, r4
 8011134:	f001 f9f6 	bl	8012524 <__lshift>
 8011138:	4606      	mov	r6, r0
 801113a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801113c:	2b00      	cmp	r3, #0
 801113e:	d06e      	beq.n	801121e <_dtoa_r+0x90e>
 8011140:	ee18 0a10 	vmov	r0, s16
 8011144:	4631      	mov	r1, r6
 8011146:	f001 fa5d 	bl	8012604 <__mcmp>
 801114a:	2800      	cmp	r0, #0
 801114c:	da67      	bge.n	801121e <_dtoa_r+0x90e>
 801114e:	9b00      	ldr	r3, [sp, #0]
 8011150:	3b01      	subs	r3, #1
 8011152:	ee18 1a10 	vmov	r1, s16
 8011156:	9300      	str	r3, [sp, #0]
 8011158:	220a      	movs	r2, #10
 801115a:	2300      	movs	r3, #0
 801115c:	4620      	mov	r0, r4
 801115e:	f000 ffe7 	bl	8012130 <__multadd>
 8011162:	9b08      	ldr	r3, [sp, #32]
 8011164:	ee08 0a10 	vmov	s16, r0
 8011168:	2b00      	cmp	r3, #0
 801116a:	f000 81b1 	beq.w	80114d0 <_dtoa_r+0xbc0>
 801116e:	2300      	movs	r3, #0
 8011170:	4639      	mov	r1, r7
 8011172:	220a      	movs	r2, #10
 8011174:	4620      	mov	r0, r4
 8011176:	f000 ffdb 	bl	8012130 <__multadd>
 801117a:	9b02      	ldr	r3, [sp, #8]
 801117c:	2b00      	cmp	r3, #0
 801117e:	4607      	mov	r7, r0
 8011180:	f300 808e 	bgt.w	80112a0 <_dtoa_r+0x990>
 8011184:	9b06      	ldr	r3, [sp, #24]
 8011186:	2b02      	cmp	r3, #2
 8011188:	dc51      	bgt.n	801122e <_dtoa_r+0x91e>
 801118a:	e089      	b.n	80112a0 <_dtoa_r+0x990>
 801118c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801118e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011192:	e74b      	b.n	801102c <_dtoa_r+0x71c>
 8011194:	9b03      	ldr	r3, [sp, #12]
 8011196:	1e5e      	subs	r6, r3, #1
 8011198:	9b07      	ldr	r3, [sp, #28]
 801119a:	42b3      	cmp	r3, r6
 801119c:	bfbf      	itttt	lt
 801119e:	9b07      	ldrlt	r3, [sp, #28]
 80111a0:	9607      	strlt	r6, [sp, #28]
 80111a2:	1af2      	sublt	r2, r6, r3
 80111a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80111a6:	bfb6      	itet	lt
 80111a8:	189b      	addlt	r3, r3, r2
 80111aa:	1b9e      	subge	r6, r3, r6
 80111ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80111ae:	9b03      	ldr	r3, [sp, #12]
 80111b0:	bfb8      	it	lt
 80111b2:	2600      	movlt	r6, #0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	bfb7      	itett	lt
 80111b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80111bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80111c0:	1a9d      	sublt	r5, r3, r2
 80111c2:	2300      	movlt	r3, #0
 80111c4:	e734      	b.n	8011030 <_dtoa_r+0x720>
 80111c6:	9e07      	ldr	r6, [sp, #28]
 80111c8:	9d04      	ldr	r5, [sp, #16]
 80111ca:	9f08      	ldr	r7, [sp, #32]
 80111cc:	e73b      	b.n	8011046 <_dtoa_r+0x736>
 80111ce:	9a07      	ldr	r2, [sp, #28]
 80111d0:	e767      	b.n	80110a2 <_dtoa_r+0x792>
 80111d2:	9b06      	ldr	r3, [sp, #24]
 80111d4:	2b01      	cmp	r3, #1
 80111d6:	dc18      	bgt.n	801120a <_dtoa_r+0x8fa>
 80111d8:	f1ba 0f00 	cmp.w	sl, #0
 80111dc:	d115      	bne.n	801120a <_dtoa_r+0x8fa>
 80111de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80111e2:	b993      	cbnz	r3, 801120a <_dtoa_r+0x8fa>
 80111e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80111e8:	0d1b      	lsrs	r3, r3, #20
 80111ea:	051b      	lsls	r3, r3, #20
 80111ec:	b183      	cbz	r3, 8011210 <_dtoa_r+0x900>
 80111ee:	9b04      	ldr	r3, [sp, #16]
 80111f0:	3301      	adds	r3, #1
 80111f2:	9304      	str	r3, [sp, #16]
 80111f4:	9b05      	ldr	r3, [sp, #20]
 80111f6:	3301      	adds	r3, #1
 80111f8:	9305      	str	r3, [sp, #20]
 80111fa:	f04f 0801 	mov.w	r8, #1
 80111fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011200:	2b00      	cmp	r3, #0
 8011202:	f47f af6a 	bne.w	80110da <_dtoa_r+0x7ca>
 8011206:	2001      	movs	r0, #1
 8011208:	e76f      	b.n	80110ea <_dtoa_r+0x7da>
 801120a:	f04f 0800 	mov.w	r8, #0
 801120e:	e7f6      	b.n	80111fe <_dtoa_r+0x8ee>
 8011210:	4698      	mov	r8, r3
 8011212:	e7f4      	b.n	80111fe <_dtoa_r+0x8ee>
 8011214:	f43f af7d 	beq.w	8011112 <_dtoa_r+0x802>
 8011218:	4618      	mov	r0, r3
 801121a:	301c      	adds	r0, #28
 801121c:	e772      	b.n	8011104 <_dtoa_r+0x7f4>
 801121e:	9b03      	ldr	r3, [sp, #12]
 8011220:	2b00      	cmp	r3, #0
 8011222:	dc37      	bgt.n	8011294 <_dtoa_r+0x984>
 8011224:	9b06      	ldr	r3, [sp, #24]
 8011226:	2b02      	cmp	r3, #2
 8011228:	dd34      	ble.n	8011294 <_dtoa_r+0x984>
 801122a:	9b03      	ldr	r3, [sp, #12]
 801122c:	9302      	str	r3, [sp, #8]
 801122e:	9b02      	ldr	r3, [sp, #8]
 8011230:	b96b      	cbnz	r3, 801124e <_dtoa_r+0x93e>
 8011232:	4631      	mov	r1, r6
 8011234:	2205      	movs	r2, #5
 8011236:	4620      	mov	r0, r4
 8011238:	f000 ff7a 	bl	8012130 <__multadd>
 801123c:	4601      	mov	r1, r0
 801123e:	4606      	mov	r6, r0
 8011240:	ee18 0a10 	vmov	r0, s16
 8011244:	f001 f9de 	bl	8012604 <__mcmp>
 8011248:	2800      	cmp	r0, #0
 801124a:	f73f adbb 	bgt.w	8010dc4 <_dtoa_r+0x4b4>
 801124e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011250:	9d01      	ldr	r5, [sp, #4]
 8011252:	43db      	mvns	r3, r3
 8011254:	9300      	str	r3, [sp, #0]
 8011256:	f04f 0800 	mov.w	r8, #0
 801125a:	4631      	mov	r1, r6
 801125c:	4620      	mov	r0, r4
 801125e:	f000 ff45 	bl	80120ec <_Bfree>
 8011262:	2f00      	cmp	r7, #0
 8011264:	f43f aea4 	beq.w	8010fb0 <_dtoa_r+0x6a0>
 8011268:	f1b8 0f00 	cmp.w	r8, #0
 801126c:	d005      	beq.n	801127a <_dtoa_r+0x96a>
 801126e:	45b8      	cmp	r8, r7
 8011270:	d003      	beq.n	801127a <_dtoa_r+0x96a>
 8011272:	4641      	mov	r1, r8
 8011274:	4620      	mov	r0, r4
 8011276:	f000 ff39 	bl	80120ec <_Bfree>
 801127a:	4639      	mov	r1, r7
 801127c:	4620      	mov	r0, r4
 801127e:	f000 ff35 	bl	80120ec <_Bfree>
 8011282:	e695      	b.n	8010fb0 <_dtoa_r+0x6a0>
 8011284:	2600      	movs	r6, #0
 8011286:	4637      	mov	r7, r6
 8011288:	e7e1      	b.n	801124e <_dtoa_r+0x93e>
 801128a:	9700      	str	r7, [sp, #0]
 801128c:	4637      	mov	r7, r6
 801128e:	e599      	b.n	8010dc4 <_dtoa_r+0x4b4>
 8011290:	40240000 	.word	0x40240000
 8011294:	9b08      	ldr	r3, [sp, #32]
 8011296:	2b00      	cmp	r3, #0
 8011298:	f000 80ca 	beq.w	8011430 <_dtoa_r+0xb20>
 801129c:	9b03      	ldr	r3, [sp, #12]
 801129e:	9302      	str	r3, [sp, #8]
 80112a0:	2d00      	cmp	r5, #0
 80112a2:	dd05      	ble.n	80112b0 <_dtoa_r+0x9a0>
 80112a4:	4639      	mov	r1, r7
 80112a6:	462a      	mov	r2, r5
 80112a8:	4620      	mov	r0, r4
 80112aa:	f001 f93b 	bl	8012524 <__lshift>
 80112ae:	4607      	mov	r7, r0
 80112b0:	f1b8 0f00 	cmp.w	r8, #0
 80112b4:	d05b      	beq.n	801136e <_dtoa_r+0xa5e>
 80112b6:	6879      	ldr	r1, [r7, #4]
 80112b8:	4620      	mov	r0, r4
 80112ba:	f000 fed7 	bl	801206c <_Balloc>
 80112be:	4605      	mov	r5, r0
 80112c0:	b928      	cbnz	r0, 80112ce <_dtoa_r+0x9be>
 80112c2:	4b87      	ldr	r3, [pc, #540]	; (80114e0 <_dtoa_r+0xbd0>)
 80112c4:	4602      	mov	r2, r0
 80112c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80112ca:	f7ff bb3b 	b.w	8010944 <_dtoa_r+0x34>
 80112ce:	693a      	ldr	r2, [r7, #16]
 80112d0:	3202      	adds	r2, #2
 80112d2:	0092      	lsls	r2, r2, #2
 80112d4:	f107 010c 	add.w	r1, r7, #12
 80112d8:	300c      	adds	r0, #12
 80112da:	f7fd fae1 	bl	800e8a0 <memcpy>
 80112de:	2201      	movs	r2, #1
 80112e0:	4629      	mov	r1, r5
 80112e2:	4620      	mov	r0, r4
 80112e4:	f001 f91e 	bl	8012524 <__lshift>
 80112e8:	9b01      	ldr	r3, [sp, #4]
 80112ea:	f103 0901 	add.w	r9, r3, #1
 80112ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80112f2:	4413      	add	r3, r2
 80112f4:	9305      	str	r3, [sp, #20]
 80112f6:	f00a 0301 	and.w	r3, sl, #1
 80112fa:	46b8      	mov	r8, r7
 80112fc:	9304      	str	r3, [sp, #16]
 80112fe:	4607      	mov	r7, r0
 8011300:	4631      	mov	r1, r6
 8011302:	ee18 0a10 	vmov	r0, s16
 8011306:	f7ff fa75 	bl	80107f4 <quorem>
 801130a:	4641      	mov	r1, r8
 801130c:	9002      	str	r0, [sp, #8]
 801130e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011312:	ee18 0a10 	vmov	r0, s16
 8011316:	f001 f975 	bl	8012604 <__mcmp>
 801131a:	463a      	mov	r2, r7
 801131c:	9003      	str	r0, [sp, #12]
 801131e:	4631      	mov	r1, r6
 8011320:	4620      	mov	r0, r4
 8011322:	f001 f98b 	bl	801263c <__mdiff>
 8011326:	68c2      	ldr	r2, [r0, #12]
 8011328:	f109 3bff 	add.w	fp, r9, #4294967295
 801132c:	4605      	mov	r5, r0
 801132e:	bb02      	cbnz	r2, 8011372 <_dtoa_r+0xa62>
 8011330:	4601      	mov	r1, r0
 8011332:	ee18 0a10 	vmov	r0, s16
 8011336:	f001 f965 	bl	8012604 <__mcmp>
 801133a:	4602      	mov	r2, r0
 801133c:	4629      	mov	r1, r5
 801133e:	4620      	mov	r0, r4
 8011340:	9207      	str	r2, [sp, #28]
 8011342:	f000 fed3 	bl	80120ec <_Bfree>
 8011346:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801134a:	ea43 0102 	orr.w	r1, r3, r2
 801134e:	9b04      	ldr	r3, [sp, #16]
 8011350:	430b      	orrs	r3, r1
 8011352:	464d      	mov	r5, r9
 8011354:	d10f      	bne.n	8011376 <_dtoa_r+0xa66>
 8011356:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801135a:	d02a      	beq.n	80113b2 <_dtoa_r+0xaa2>
 801135c:	9b03      	ldr	r3, [sp, #12]
 801135e:	2b00      	cmp	r3, #0
 8011360:	dd02      	ble.n	8011368 <_dtoa_r+0xa58>
 8011362:	9b02      	ldr	r3, [sp, #8]
 8011364:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011368:	f88b a000 	strb.w	sl, [fp]
 801136c:	e775      	b.n	801125a <_dtoa_r+0x94a>
 801136e:	4638      	mov	r0, r7
 8011370:	e7ba      	b.n	80112e8 <_dtoa_r+0x9d8>
 8011372:	2201      	movs	r2, #1
 8011374:	e7e2      	b.n	801133c <_dtoa_r+0xa2c>
 8011376:	9b03      	ldr	r3, [sp, #12]
 8011378:	2b00      	cmp	r3, #0
 801137a:	db04      	blt.n	8011386 <_dtoa_r+0xa76>
 801137c:	9906      	ldr	r1, [sp, #24]
 801137e:	430b      	orrs	r3, r1
 8011380:	9904      	ldr	r1, [sp, #16]
 8011382:	430b      	orrs	r3, r1
 8011384:	d122      	bne.n	80113cc <_dtoa_r+0xabc>
 8011386:	2a00      	cmp	r2, #0
 8011388:	ddee      	ble.n	8011368 <_dtoa_r+0xa58>
 801138a:	ee18 1a10 	vmov	r1, s16
 801138e:	2201      	movs	r2, #1
 8011390:	4620      	mov	r0, r4
 8011392:	f001 f8c7 	bl	8012524 <__lshift>
 8011396:	4631      	mov	r1, r6
 8011398:	ee08 0a10 	vmov	s16, r0
 801139c:	f001 f932 	bl	8012604 <__mcmp>
 80113a0:	2800      	cmp	r0, #0
 80113a2:	dc03      	bgt.n	80113ac <_dtoa_r+0xa9c>
 80113a4:	d1e0      	bne.n	8011368 <_dtoa_r+0xa58>
 80113a6:	f01a 0f01 	tst.w	sl, #1
 80113aa:	d0dd      	beq.n	8011368 <_dtoa_r+0xa58>
 80113ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80113b0:	d1d7      	bne.n	8011362 <_dtoa_r+0xa52>
 80113b2:	2339      	movs	r3, #57	; 0x39
 80113b4:	f88b 3000 	strb.w	r3, [fp]
 80113b8:	462b      	mov	r3, r5
 80113ba:	461d      	mov	r5, r3
 80113bc:	3b01      	subs	r3, #1
 80113be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80113c2:	2a39      	cmp	r2, #57	; 0x39
 80113c4:	d071      	beq.n	80114aa <_dtoa_r+0xb9a>
 80113c6:	3201      	adds	r2, #1
 80113c8:	701a      	strb	r2, [r3, #0]
 80113ca:	e746      	b.n	801125a <_dtoa_r+0x94a>
 80113cc:	2a00      	cmp	r2, #0
 80113ce:	dd07      	ble.n	80113e0 <_dtoa_r+0xad0>
 80113d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80113d4:	d0ed      	beq.n	80113b2 <_dtoa_r+0xaa2>
 80113d6:	f10a 0301 	add.w	r3, sl, #1
 80113da:	f88b 3000 	strb.w	r3, [fp]
 80113de:	e73c      	b.n	801125a <_dtoa_r+0x94a>
 80113e0:	9b05      	ldr	r3, [sp, #20]
 80113e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80113e6:	4599      	cmp	r9, r3
 80113e8:	d047      	beq.n	801147a <_dtoa_r+0xb6a>
 80113ea:	ee18 1a10 	vmov	r1, s16
 80113ee:	2300      	movs	r3, #0
 80113f0:	220a      	movs	r2, #10
 80113f2:	4620      	mov	r0, r4
 80113f4:	f000 fe9c 	bl	8012130 <__multadd>
 80113f8:	45b8      	cmp	r8, r7
 80113fa:	ee08 0a10 	vmov	s16, r0
 80113fe:	f04f 0300 	mov.w	r3, #0
 8011402:	f04f 020a 	mov.w	r2, #10
 8011406:	4641      	mov	r1, r8
 8011408:	4620      	mov	r0, r4
 801140a:	d106      	bne.n	801141a <_dtoa_r+0xb0a>
 801140c:	f000 fe90 	bl	8012130 <__multadd>
 8011410:	4680      	mov	r8, r0
 8011412:	4607      	mov	r7, r0
 8011414:	f109 0901 	add.w	r9, r9, #1
 8011418:	e772      	b.n	8011300 <_dtoa_r+0x9f0>
 801141a:	f000 fe89 	bl	8012130 <__multadd>
 801141e:	4639      	mov	r1, r7
 8011420:	4680      	mov	r8, r0
 8011422:	2300      	movs	r3, #0
 8011424:	220a      	movs	r2, #10
 8011426:	4620      	mov	r0, r4
 8011428:	f000 fe82 	bl	8012130 <__multadd>
 801142c:	4607      	mov	r7, r0
 801142e:	e7f1      	b.n	8011414 <_dtoa_r+0xb04>
 8011430:	9b03      	ldr	r3, [sp, #12]
 8011432:	9302      	str	r3, [sp, #8]
 8011434:	9d01      	ldr	r5, [sp, #4]
 8011436:	ee18 0a10 	vmov	r0, s16
 801143a:	4631      	mov	r1, r6
 801143c:	f7ff f9da 	bl	80107f4 <quorem>
 8011440:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011444:	9b01      	ldr	r3, [sp, #4]
 8011446:	f805 ab01 	strb.w	sl, [r5], #1
 801144a:	1aea      	subs	r2, r5, r3
 801144c:	9b02      	ldr	r3, [sp, #8]
 801144e:	4293      	cmp	r3, r2
 8011450:	dd09      	ble.n	8011466 <_dtoa_r+0xb56>
 8011452:	ee18 1a10 	vmov	r1, s16
 8011456:	2300      	movs	r3, #0
 8011458:	220a      	movs	r2, #10
 801145a:	4620      	mov	r0, r4
 801145c:	f000 fe68 	bl	8012130 <__multadd>
 8011460:	ee08 0a10 	vmov	s16, r0
 8011464:	e7e7      	b.n	8011436 <_dtoa_r+0xb26>
 8011466:	9b02      	ldr	r3, [sp, #8]
 8011468:	2b00      	cmp	r3, #0
 801146a:	bfc8      	it	gt
 801146c:	461d      	movgt	r5, r3
 801146e:	9b01      	ldr	r3, [sp, #4]
 8011470:	bfd8      	it	le
 8011472:	2501      	movle	r5, #1
 8011474:	441d      	add	r5, r3
 8011476:	f04f 0800 	mov.w	r8, #0
 801147a:	ee18 1a10 	vmov	r1, s16
 801147e:	2201      	movs	r2, #1
 8011480:	4620      	mov	r0, r4
 8011482:	f001 f84f 	bl	8012524 <__lshift>
 8011486:	4631      	mov	r1, r6
 8011488:	ee08 0a10 	vmov	s16, r0
 801148c:	f001 f8ba 	bl	8012604 <__mcmp>
 8011490:	2800      	cmp	r0, #0
 8011492:	dc91      	bgt.n	80113b8 <_dtoa_r+0xaa8>
 8011494:	d102      	bne.n	801149c <_dtoa_r+0xb8c>
 8011496:	f01a 0f01 	tst.w	sl, #1
 801149a:	d18d      	bne.n	80113b8 <_dtoa_r+0xaa8>
 801149c:	462b      	mov	r3, r5
 801149e:	461d      	mov	r5, r3
 80114a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80114a4:	2a30      	cmp	r2, #48	; 0x30
 80114a6:	d0fa      	beq.n	801149e <_dtoa_r+0xb8e>
 80114a8:	e6d7      	b.n	801125a <_dtoa_r+0x94a>
 80114aa:	9a01      	ldr	r2, [sp, #4]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d184      	bne.n	80113ba <_dtoa_r+0xaaa>
 80114b0:	9b00      	ldr	r3, [sp, #0]
 80114b2:	3301      	adds	r3, #1
 80114b4:	9300      	str	r3, [sp, #0]
 80114b6:	2331      	movs	r3, #49	; 0x31
 80114b8:	7013      	strb	r3, [r2, #0]
 80114ba:	e6ce      	b.n	801125a <_dtoa_r+0x94a>
 80114bc:	4b09      	ldr	r3, [pc, #36]	; (80114e4 <_dtoa_r+0xbd4>)
 80114be:	f7ff ba95 	b.w	80109ec <_dtoa_r+0xdc>
 80114c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	f47f aa6e 	bne.w	80109a6 <_dtoa_r+0x96>
 80114ca:	4b07      	ldr	r3, [pc, #28]	; (80114e8 <_dtoa_r+0xbd8>)
 80114cc:	f7ff ba8e 	b.w	80109ec <_dtoa_r+0xdc>
 80114d0:	9b02      	ldr	r3, [sp, #8]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	dcae      	bgt.n	8011434 <_dtoa_r+0xb24>
 80114d6:	9b06      	ldr	r3, [sp, #24]
 80114d8:	2b02      	cmp	r3, #2
 80114da:	f73f aea8 	bgt.w	801122e <_dtoa_r+0x91e>
 80114de:	e7a9      	b.n	8011434 <_dtoa_r+0xb24>
 80114e0:	08014aef 	.word	0x08014aef
 80114e4:	08014d49 	.word	0x08014d49
 80114e8:	08014a70 	.word	0x08014a70

080114ec <__sflush_r>:
 80114ec:	898a      	ldrh	r2, [r1, #12]
 80114ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114f2:	4605      	mov	r5, r0
 80114f4:	0710      	lsls	r0, r2, #28
 80114f6:	460c      	mov	r4, r1
 80114f8:	d458      	bmi.n	80115ac <__sflush_r+0xc0>
 80114fa:	684b      	ldr	r3, [r1, #4]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	dc05      	bgt.n	801150c <__sflush_r+0x20>
 8011500:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011502:	2b00      	cmp	r3, #0
 8011504:	dc02      	bgt.n	801150c <__sflush_r+0x20>
 8011506:	2000      	movs	r0, #0
 8011508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801150c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801150e:	2e00      	cmp	r6, #0
 8011510:	d0f9      	beq.n	8011506 <__sflush_r+0x1a>
 8011512:	2300      	movs	r3, #0
 8011514:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011518:	682f      	ldr	r7, [r5, #0]
 801151a:	602b      	str	r3, [r5, #0]
 801151c:	d032      	beq.n	8011584 <__sflush_r+0x98>
 801151e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011520:	89a3      	ldrh	r3, [r4, #12]
 8011522:	075a      	lsls	r2, r3, #29
 8011524:	d505      	bpl.n	8011532 <__sflush_r+0x46>
 8011526:	6863      	ldr	r3, [r4, #4]
 8011528:	1ac0      	subs	r0, r0, r3
 801152a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801152c:	b10b      	cbz	r3, 8011532 <__sflush_r+0x46>
 801152e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011530:	1ac0      	subs	r0, r0, r3
 8011532:	2300      	movs	r3, #0
 8011534:	4602      	mov	r2, r0
 8011536:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011538:	6a21      	ldr	r1, [r4, #32]
 801153a:	4628      	mov	r0, r5
 801153c:	47b0      	blx	r6
 801153e:	1c43      	adds	r3, r0, #1
 8011540:	89a3      	ldrh	r3, [r4, #12]
 8011542:	d106      	bne.n	8011552 <__sflush_r+0x66>
 8011544:	6829      	ldr	r1, [r5, #0]
 8011546:	291d      	cmp	r1, #29
 8011548:	d82c      	bhi.n	80115a4 <__sflush_r+0xb8>
 801154a:	4a2a      	ldr	r2, [pc, #168]	; (80115f4 <__sflush_r+0x108>)
 801154c:	40ca      	lsrs	r2, r1
 801154e:	07d6      	lsls	r6, r2, #31
 8011550:	d528      	bpl.n	80115a4 <__sflush_r+0xb8>
 8011552:	2200      	movs	r2, #0
 8011554:	6062      	str	r2, [r4, #4]
 8011556:	04d9      	lsls	r1, r3, #19
 8011558:	6922      	ldr	r2, [r4, #16]
 801155a:	6022      	str	r2, [r4, #0]
 801155c:	d504      	bpl.n	8011568 <__sflush_r+0x7c>
 801155e:	1c42      	adds	r2, r0, #1
 8011560:	d101      	bne.n	8011566 <__sflush_r+0x7a>
 8011562:	682b      	ldr	r3, [r5, #0]
 8011564:	b903      	cbnz	r3, 8011568 <__sflush_r+0x7c>
 8011566:	6560      	str	r0, [r4, #84]	; 0x54
 8011568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801156a:	602f      	str	r7, [r5, #0]
 801156c:	2900      	cmp	r1, #0
 801156e:	d0ca      	beq.n	8011506 <__sflush_r+0x1a>
 8011570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011574:	4299      	cmp	r1, r3
 8011576:	d002      	beq.n	801157e <__sflush_r+0x92>
 8011578:	4628      	mov	r0, r5
 801157a:	f001 fa4f 	bl	8012a1c <_free_r>
 801157e:	2000      	movs	r0, #0
 8011580:	6360      	str	r0, [r4, #52]	; 0x34
 8011582:	e7c1      	b.n	8011508 <__sflush_r+0x1c>
 8011584:	6a21      	ldr	r1, [r4, #32]
 8011586:	2301      	movs	r3, #1
 8011588:	4628      	mov	r0, r5
 801158a:	47b0      	blx	r6
 801158c:	1c41      	adds	r1, r0, #1
 801158e:	d1c7      	bne.n	8011520 <__sflush_r+0x34>
 8011590:	682b      	ldr	r3, [r5, #0]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d0c4      	beq.n	8011520 <__sflush_r+0x34>
 8011596:	2b1d      	cmp	r3, #29
 8011598:	d001      	beq.n	801159e <__sflush_r+0xb2>
 801159a:	2b16      	cmp	r3, #22
 801159c:	d101      	bne.n	80115a2 <__sflush_r+0xb6>
 801159e:	602f      	str	r7, [r5, #0]
 80115a0:	e7b1      	b.n	8011506 <__sflush_r+0x1a>
 80115a2:	89a3      	ldrh	r3, [r4, #12]
 80115a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115a8:	81a3      	strh	r3, [r4, #12]
 80115aa:	e7ad      	b.n	8011508 <__sflush_r+0x1c>
 80115ac:	690f      	ldr	r7, [r1, #16]
 80115ae:	2f00      	cmp	r7, #0
 80115b0:	d0a9      	beq.n	8011506 <__sflush_r+0x1a>
 80115b2:	0793      	lsls	r3, r2, #30
 80115b4:	680e      	ldr	r6, [r1, #0]
 80115b6:	bf08      	it	eq
 80115b8:	694b      	ldreq	r3, [r1, #20]
 80115ba:	600f      	str	r7, [r1, #0]
 80115bc:	bf18      	it	ne
 80115be:	2300      	movne	r3, #0
 80115c0:	eba6 0807 	sub.w	r8, r6, r7
 80115c4:	608b      	str	r3, [r1, #8]
 80115c6:	f1b8 0f00 	cmp.w	r8, #0
 80115ca:	dd9c      	ble.n	8011506 <__sflush_r+0x1a>
 80115cc:	6a21      	ldr	r1, [r4, #32]
 80115ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80115d0:	4643      	mov	r3, r8
 80115d2:	463a      	mov	r2, r7
 80115d4:	4628      	mov	r0, r5
 80115d6:	47b0      	blx	r6
 80115d8:	2800      	cmp	r0, #0
 80115da:	dc06      	bgt.n	80115ea <__sflush_r+0xfe>
 80115dc:	89a3      	ldrh	r3, [r4, #12]
 80115de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115e2:	81a3      	strh	r3, [r4, #12]
 80115e4:	f04f 30ff 	mov.w	r0, #4294967295
 80115e8:	e78e      	b.n	8011508 <__sflush_r+0x1c>
 80115ea:	4407      	add	r7, r0
 80115ec:	eba8 0800 	sub.w	r8, r8, r0
 80115f0:	e7e9      	b.n	80115c6 <__sflush_r+0xda>
 80115f2:	bf00      	nop
 80115f4:	20400001 	.word	0x20400001

080115f8 <_fflush_r>:
 80115f8:	b538      	push	{r3, r4, r5, lr}
 80115fa:	690b      	ldr	r3, [r1, #16]
 80115fc:	4605      	mov	r5, r0
 80115fe:	460c      	mov	r4, r1
 8011600:	b913      	cbnz	r3, 8011608 <_fflush_r+0x10>
 8011602:	2500      	movs	r5, #0
 8011604:	4628      	mov	r0, r5
 8011606:	bd38      	pop	{r3, r4, r5, pc}
 8011608:	b118      	cbz	r0, 8011612 <_fflush_r+0x1a>
 801160a:	6983      	ldr	r3, [r0, #24]
 801160c:	b90b      	cbnz	r3, 8011612 <_fflush_r+0x1a>
 801160e:	f000 f887 	bl	8011720 <__sinit>
 8011612:	4b14      	ldr	r3, [pc, #80]	; (8011664 <_fflush_r+0x6c>)
 8011614:	429c      	cmp	r4, r3
 8011616:	d11b      	bne.n	8011650 <_fflush_r+0x58>
 8011618:	686c      	ldr	r4, [r5, #4]
 801161a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d0ef      	beq.n	8011602 <_fflush_r+0xa>
 8011622:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011624:	07d0      	lsls	r0, r2, #31
 8011626:	d404      	bmi.n	8011632 <_fflush_r+0x3a>
 8011628:	0599      	lsls	r1, r3, #22
 801162a:	d402      	bmi.n	8011632 <_fflush_r+0x3a>
 801162c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801162e:	f000 fc88 	bl	8011f42 <__retarget_lock_acquire_recursive>
 8011632:	4628      	mov	r0, r5
 8011634:	4621      	mov	r1, r4
 8011636:	f7ff ff59 	bl	80114ec <__sflush_r>
 801163a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801163c:	07da      	lsls	r2, r3, #31
 801163e:	4605      	mov	r5, r0
 8011640:	d4e0      	bmi.n	8011604 <_fflush_r+0xc>
 8011642:	89a3      	ldrh	r3, [r4, #12]
 8011644:	059b      	lsls	r3, r3, #22
 8011646:	d4dd      	bmi.n	8011604 <_fflush_r+0xc>
 8011648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801164a:	f000 fc7b 	bl	8011f44 <__retarget_lock_release_recursive>
 801164e:	e7d9      	b.n	8011604 <_fflush_r+0xc>
 8011650:	4b05      	ldr	r3, [pc, #20]	; (8011668 <_fflush_r+0x70>)
 8011652:	429c      	cmp	r4, r3
 8011654:	d101      	bne.n	801165a <_fflush_r+0x62>
 8011656:	68ac      	ldr	r4, [r5, #8]
 8011658:	e7df      	b.n	801161a <_fflush_r+0x22>
 801165a:	4b04      	ldr	r3, [pc, #16]	; (801166c <_fflush_r+0x74>)
 801165c:	429c      	cmp	r4, r3
 801165e:	bf08      	it	eq
 8011660:	68ec      	ldreq	r4, [r5, #12]
 8011662:	e7da      	b.n	801161a <_fflush_r+0x22>
 8011664:	08014b20 	.word	0x08014b20
 8011668:	08014b40 	.word	0x08014b40
 801166c:	08014b00 	.word	0x08014b00

08011670 <std>:
 8011670:	2300      	movs	r3, #0
 8011672:	b510      	push	{r4, lr}
 8011674:	4604      	mov	r4, r0
 8011676:	e9c0 3300 	strd	r3, r3, [r0]
 801167a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801167e:	6083      	str	r3, [r0, #8]
 8011680:	8181      	strh	r1, [r0, #12]
 8011682:	6643      	str	r3, [r0, #100]	; 0x64
 8011684:	81c2      	strh	r2, [r0, #14]
 8011686:	6183      	str	r3, [r0, #24]
 8011688:	4619      	mov	r1, r3
 801168a:	2208      	movs	r2, #8
 801168c:	305c      	adds	r0, #92	; 0x5c
 801168e:	f7fd f92f 	bl	800e8f0 <memset>
 8011692:	4b05      	ldr	r3, [pc, #20]	; (80116a8 <std+0x38>)
 8011694:	6263      	str	r3, [r4, #36]	; 0x24
 8011696:	4b05      	ldr	r3, [pc, #20]	; (80116ac <std+0x3c>)
 8011698:	62a3      	str	r3, [r4, #40]	; 0x28
 801169a:	4b05      	ldr	r3, [pc, #20]	; (80116b0 <std+0x40>)
 801169c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801169e:	4b05      	ldr	r3, [pc, #20]	; (80116b4 <std+0x44>)
 80116a0:	6224      	str	r4, [r4, #32]
 80116a2:	6323      	str	r3, [r4, #48]	; 0x30
 80116a4:	bd10      	pop	{r4, pc}
 80116a6:	bf00      	nop
 80116a8:	0800f81d 	.word	0x0800f81d
 80116ac:	0800f843 	.word	0x0800f843
 80116b0:	0800f87b 	.word	0x0800f87b
 80116b4:	0800f89f 	.word	0x0800f89f

080116b8 <_cleanup_r>:
 80116b8:	4901      	ldr	r1, [pc, #4]	; (80116c0 <_cleanup_r+0x8>)
 80116ba:	f000 b8af 	b.w	801181c <_fwalk_reent>
 80116be:	bf00      	nop
 80116c0:	080115f9 	.word	0x080115f9

080116c4 <__sfmoreglue>:
 80116c4:	b570      	push	{r4, r5, r6, lr}
 80116c6:	2268      	movs	r2, #104	; 0x68
 80116c8:	1e4d      	subs	r5, r1, #1
 80116ca:	4355      	muls	r5, r2
 80116cc:	460e      	mov	r6, r1
 80116ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80116d2:	f001 fa0f 	bl	8012af4 <_malloc_r>
 80116d6:	4604      	mov	r4, r0
 80116d8:	b140      	cbz	r0, 80116ec <__sfmoreglue+0x28>
 80116da:	2100      	movs	r1, #0
 80116dc:	e9c0 1600 	strd	r1, r6, [r0]
 80116e0:	300c      	adds	r0, #12
 80116e2:	60a0      	str	r0, [r4, #8]
 80116e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80116e8:	f7fd f902 	bl	800e8f0 <memset>
 80116ec:	4620      	mov	r0, r4
 80116ee:	bd70      	pop	{r4, r5, r6, pc}

080116f0 <__sfp_lock_acquire>:
 80116f0:	4801      	ldr	r0, [pc, #4]	; (80116f8 <__sfp_lock_acquire+0x8>)
 80116f2:	f000 bc26 	b.w	8011f42 <__retarget_lock_acquire_recursive>
 80116f6:	bf00      	nop
 80116f8:	20003141 	.word	0x20003141

080116fc <__sfp_lock_release>:
 80116fc:	4801      	ldr	r0, [pc, #4]	; (8011704 <__sfp_lock_release+0x8>)
 80116fe:	f000 bc21 	b.w	8011f44 <__retarget_lock_release_recursive>
 8011702:	bf00      	nop
 8011704:	20003141 	.word	0x20003141

08011708 <__sinit_lock_acquire>:
 8011708:	4801      	ldr	r0, [pc, #4]	; (8011710 <__sinit_lock_acquire+0x8>)
 801170a:	f000 bc1a 	b.w	8011f42 <__retarget_lock_acquire_recursive>
 801170e:	bf00      	nop
 8011710:	20003142 	.word	0x20003142

08011714 <__sinit_lock_release>:
 8011714:	4801      	ldr	r0, [pc, #4]	; (801171c <__sinit_lock_release+0x8>)
 8011716:	f000 bc15 	b.w	8011f44 <__retarget_lock_release_recursive>
 801171a:	bf00      	nop
 801171c:	20003142 	.word	0x20003142

08011720 <__sinit>:
 8011720:	b510      	push	{r4, lr}
 8011722:	4604      	mov	r4, r0
 8011724:	f7ff fff0 	bl	8011708 <__sinit_lock_acquire>
 8011728:	69a3      	ldr	r3, [r4, #24]
 801172a:	b11b      	cbz	r3, 8011734 <__sinit+0x14>
 801172c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011730:	f7ff bff0 	b.w	8011714 <__sinit_lock_release>
 8011734:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011738:	6523      	str	r3, [r4, #80]	; 0x50
 801173a:	4b13      	ldr	r3, [pc, #76]	; (8011788 <__sinit+0x68>)
 801173c:	4a13      	ldr	r2, [pc, #76]	; (801178c <__sinit+0x6c>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	62a2      	str	r2, [r4, #40]	; 0x28
 8011742:	42a3      	cmp	r3, r4
 8011744:	bf04      	itt	eq
 8011746:	2301      	moveq	r3, #1
 8011748:	61a3      	streq	r3, [r4, #24]
 801174a:	4620      	mov	r0, r4
 801174c:	f000 f820 	bl	8011790 <__sfp>
 8011750:	6060      	str	r0, [r4, #4]
 8011752:	4620      	mov	r0, r4
 8011754:	f000 f81c 	bl	8011790 <__sfp>
 8011758:	60a0      	str	r0, [r4, #8]
 801175a:	4620      	mov	r0, r4
 801175c:	f000 f818 	bl	8011790 <__sfp>
 8011760:	2200      	movs	r2, #0
 8011762:	60e0      	str	r0, [r4, #12]
 8011764:	2104      	movs	r1, #4
 8011766:	6860      	ldr	r0, [r4, #4]
 8011768:	f7ff ff82 	bl	8011670 <std>
 801176c:	68a0      	ldr	r0, [r4, #8]
 801176e:	2201      	movs	r2, #1
 8011770:	2109      	movs	r1, #9
 8011772:	f7ff ff7d 	bl	8011670 <std>
 8011776:	68e0      	ldr	r0, [r4, #12]
 8011778:	2202      	movs	r2, #2
 801177a:	2112      	movs	r1, #18
 801177c:	f7ff ff78 	bl	8011670 <std>
 8011780:	2301      	movs	r3, #1
 8011782:	61a3      	str	r3, [r4, #24]
 8011784:	e7d2      	b.n	801172c <__sinit+0xc>
 8011786:	bf00      	nop
 8011788:	080149e4 	.word	0x080149e4
 801178c:	080116b9 	.word	0x080116b9

08011790 <__sfp>:
 8011790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011792:	4607      	mov	r7, r0
 8011794:	f7ff ffac 	bl	80116f0 <__sfp_lock_acquire>
 8011798:	4b1e      	ldr	r3, [pc, #120]	; (8011814 <__sfp+0x84>)
 801179a:	681e      	ldr	r6, [r3, #0]
 801179c:	69b3      	ldr	r3, [r6, #24]
 801179e:	b913      	cbnz	r3, 80117a6 <__sfp+0x16>
 80117a0:	4630      	mov	r0, r6
 80117a2:	f7ff ffbd 	bl	8011720 <__sinit>
 80117a6:	3648      	adds	r6, #72	; 0x48
 80117a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80117ac:	3b01      	subs	r3, #1
 80117ae:	d503      	bpl.n	80117b8 <__sfp+0x28>
 80117b0:	6833      	ldr	r3, [r6, #0]
 80117b2:	b30b      	cbz	r3, 80117f8 <__sfp+0x68>
 80117b4:	6836      	ldr	r6, [r6, #0]
 80117b6:	e7f7      	b.n	80117a8 <__sfp+0x18>
 80117b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80117bc:	b9d5      	cbnz	r5, 80117f4 <__sfp+0x64>
 80117be:	4b16      	ldr	r3, [pc, #88]	; (8011818 <__sfp+0x88>)
 80117c0:	60e3      	str	r3, [r4, #12]
 80117c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80117c6:	6665      	str	r5, [r4, #100]	; 0x64
 80117c8:	f000 fbba 	bl	8011f40 <__retarget_lock_init_recursive>
 80117cc:	f7ff ff96 	bl	80116fc <__sfp_lock_release>
 80117d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80117d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80117d8:	6025      	str	r5, [r4, #0]
 80117da:	61a5      	str	r5, [r4, #24]
 80117dc:	2208      	movs	r2, #8
 80117de:	4629      	mov	r1, r5
 80117e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80117e4:	f7fd f884 	bl	800e8f0 <memset>
 80117e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80117ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80117f0:	4620      	mov	r0, r4
 80117f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117f4:	3468      	adds	r4, #104	; 0x68
 80117f6:	e7d9      	b.n	80117ac <__sfp+0x1c>
 80117f8:	2104      	movs	r1, #4
 80117fa:	4638      	mov	r0, r7
 80117fc:	f7ff ff62 	bl	80116c4 <__sfmoreglue>
 8011800:	4604      	mov	r4, r0
 8011802:	6030      	str	r0, [r6, #0]
 8011804:	2800      	cmp	r0, #0
 8011806:	d1d5      	bne.n	80117b4 <__sfp+0x24>
 8011808:	f7ff ff78 	bl	80116fc <__sfp_lock_release>
 801180c:	230c      	movs	r3, #12
 801180e:	603b      	str	r3, [r7, #0]
 8011810:	e7ee      	b.n	80117f0 <__sfp+0x60>
 8011812:	bf00      	nop
 8011814:	080149e4 	.word	0x080149e4
 8011818:	ffff0001 	.word	0xffff0001

0801181c <_fwalk_reent>:
 801181c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011820:	4606      	mov	r6, r0
 8011822:	4688      	mov	r8, r1
 8011824:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011828:	2700      	movs	r7, #0
 801182a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801182e:	f1b9 0901 	subs.w	r9, r9, #1
 8011832:	d505      	bpl.n	8011840 <_fwalk_reent+0x24>
 8011834:	6824      	ldr	r4, [r4, #0]
 8011836:	2c00      	cmp	r4, #0
 8011838:	d1f7      	bne.n	801182a <_fwalk_reent+0xe>
 801183a:	4638      	mov	r0, r7
 801183c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011840:	89ab      	ldrh	r3, [r5, #12]
 8011842:	2b01      	cmp	r3, #1
 8011844:	d907      	bls.n	8011856 <_fwalk_reent+0x3a>
 8011846:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801184a:	3301      	adds	r3, #1
 801184c:	d003      	beq.n	8011856 <_fwalk_reent+0x3a>
 801184e:	4629      	mov	r1, r5
 8011850:	4630      	mov	r0, r6
 8011852:	47c0      	blx	r8
 8011854:	4307      	orrs	r7, r0
 8011856:	3568      	adds	r5, #104	; 0x68
 8011858:	e7e9      	b.n	801182e <_fwalk_reent+0x12>

0801185a <rshift>:
 801185a:	6903      	ldr	r3, [r0, #16]
 801185c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011864:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011868:	f100 0414 	add.w	r4, r0, #20
 801186c:	dd45      	ble.n	80118fa <rshift+0xa0>
 801186e:	f011 011f 	ands.w	r1, r1, #31
 8011872:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011876:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801187a:	d10c      	bne.n	8011896 <rshift+0x3c>
 801187c:	f100 0710 	add.w	r7, r0, #16
 8011880:	4629      	mov	r1, r5
 8011882:	42b1      	cmp	r1, r6
 8011884:	d334      	bcc.n	80118f0 <rshift+0x96>
 8011886:	1a9b      	subs	r3, r3, r2
 8011888:	009b      	lsls	r3, r3, #2
 801188a:	1eea      	subs	r2, r5, #3
 801188c:	4296      	cmp	r6, r2
 801188e:	bf38      	it	cc
 8011890:	2300      	movcc	r3, #0
 8011892:	4423      	add	r3, r4
 8011894:	e015      	b.n	80118c2 <rshift+0x68>
 8011896:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801189a:	f1c1 0820 	rsb	r8, r1, #32
 801189e:	40cf      	lsrs	r7, r1
 80118a0:	f105 0e04 	add.w	lr, r5, #4
 80118a4:	46a1      	mov	r9, r4
 80118a6:	4576      	cmp	r6, lr
 80118a8:	46f4      	mov	ip, lr
 80118aa:	d815      	bhi.n	80118d8 <rshift+0x7e>
 80118ac:	1a9a      	subs	r2, r3, r2
 80118ae:	0092      	lsls	r2, r2, #2
 80118b0:	3a04      	subs	r2, #4
 80118b2:	3501      	adds	r5, #1
 80118b4:	42ae      	cmp	r6, r5
 80118b6:	bf38      	it	cc
 80118b8:	2200      	movcc	r2, #0
 80118ba:	18a3      	adds	r3, r4, r2
 80118bc:	50a7      	str	r7, [r4, r2]
 80118be:	b107      	cbz	r7, 80118c2 <rshift+0x68>
 80118c0:	3304      	adds	r3, #4
 80118c2:	1b1a      	subs	r2, r3, r4
 80118c4:	42a3      	cmp	r3, r4
 80118c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80118ca:	bf08      	it	eq
 80118cc:	2300      	moveq	r3, #0
 80118ce:	6102      	str	r2, [r0, #16]
 80118d0:	bf08      	it	eq
 80118d2:	6143      	streq	r3, [r0, #20]
 80118d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118d8:	f8dc c000 	ldr.w	ip, [ip]
 80118dc:	fa0c fc08 	lsl.w	ip, ip, r8
 80118e0:	ea4c 0707 	orr.w	r7, ip, r7
 80118e4:	f849 7b04 	str.w	r7, [r9], #4
 80118e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80118ec:	40cf      	lsrs	r7, r1
 80118ee:	e7da      	b.n	80118a6 <rshift+0x4c>
 80118f0:	f851 cb04 	ldr.w	ip, [r1], #4
 80118f4:	f847 cf04 	str.w	ip, [r7, #4]!
 80118f8:	e7c3      	b.n	8011882 <rshift+0x28>
 80118fa:	4623      	mov	r3, r4
 80118fc:	e7e1      	b.n	80118c2 <rshift+0x68>

080118fe <__hexdig_fun>:
 80118fe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011902:	2b09      	cmp	r3, #9
 8011904:	d802      	bhi.n	801190c <__hexdig_fun+0xe>
 8011906:	3820      	subs	r0, #32
 8011908:	b2c0      	uxtb	r0, r0
 801190a:	4770      	bx	lr
 801190c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011910:	2b05      	cmp	r3, #5
 8011912:	d801      	bhi.n	8011918 <__hexdig_fun+0x1a>
 8011914:	3847      	subs	r0, #71	; 0x47
 8011916:	e7f7      	b.n	8011908 <__hexdig_fun+0xa>
 8011918:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801191c:	2b05      	cmp	r3, #5
 801191e:	d801      	bhi.n	8011924 <__hexdig_fun+0x26>
 8011920:	3827      	subs	r0, #39	; 0x27
 8011922:	e7f1      	b.n	8011908 <__hexdig_fun+0xa>
 8011924:	2000      	movs	r0, #0
 8011926:	4770      	bx	lr

08011928 <__gethex>:
 8011928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801192c:	ed2d 8b02 	vpush	{d8}
 8011930:	b089      	sub	sp, #36	; 0x24
 8011932:	ee08 0a10 	vmov	s16, r0
 8011936:	9304      	str	r3, [sp, #16]
 8011938:	4bb4      	ldr	r3, [pc, #720]	; (8011c0c <__gethex+0x2e4>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	9301      	str	r3, [sp, #4]
 801193e:	4618      	mov	r0, r3
 8011940:	468b      	mov	fp, r1
 8011942:	4690      	mov	r8, r2
 8011944:	f7ee fc5e 	bl	8000204 <strlen>
 8011948:	9b01      	ldr	r3, [sp, #4]
 801194a:	f8db 2000 	ldr.w	r2, [fp]
 801194e:	4403      	add	r3, r0
 8011950:	4682      	mov	sl, r0
 8011952:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011956:	9305      	str	r3, [sp, #20]
 8011958:	1c93      	adds	r3, r2, #2
 801195a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801195e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011962:	32fe      	adds	r2, #254	; 0xfe
 8011964:	18d1      	adds	r1, r2, r3
 8011966:	461f      	mov	r7, r3
 8011968:	f813 0b01 	ldrb.w	r0, [r3], #1
 801196c:	9100      	str	r1, [sp, #0]
 801196e:	2830      	cmp	r0, #48	; 0x30
 8011970:	d0f8      	beq.n	8011964 <__gethex+0x3c>
 8011972:	f7ff ffc4 	bl	80118fe <__hexdig_fun>
 8011976:	4604      	mov	r4, r0
 8011978:	2800      	cmp	r0, #0
 801197a:	d13a      	bne.n	80119f2 <__gethex+0xca>
 801197c:	9901      	ldr	r1, [sp, #4]
 801197e:	4652      	mov	r2, sl
 8011980:	4638      	mov	r0, r7
 8011982:	f001 ff69 	bl	8013858 <strncmp>
 8011986:	4605      	mov	r5, r0
 8011988:	2800      	cmp	r0, #0
 801198a:	d168      	bne.n	8011a5e <__gethex+0x136>
 801198c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011990:	eb07 060a 	add.w	r6, r7, sl
 8011994:	f7ff ffb3 	bl	80118fe <__hexdig_fun>
 8011998:	2800      	cmp	r0, #0
 801199a:	d062      	beq.n	8011a62 <__gethex+0x13a>
 801199c:	4633      	mov	r3, r6
 801199e:	7818      	ldrb	r0, [r3, #0]
 80119a0:	2830      	cmp	r0, #48	; 0x30
 80119a2:	461f      	mov	r7, r3
 80119a4:	f103 0301 	add.w	r3, r3, #1
 80119a8:	d0f9      	beq.n	801199e <__gethex+0x76>
 80119aa:	f7ff ffa8 	bl	80118fe <__hexdig_fun>
 80119ae:	2301      	movs	r3, #1
 80119b0:	fab0 f480 	clz	r4, r0
 80119b4:	0964      	lsrs	r4, r4, #5
 80119b6:	4635      	mov	r5, r6
 80119b8:	9300      	str	r3, [sp, #0]
 80119ba:	463a      	mov	r2, r7
 80119bc:	4616      	mov	r6, r2
 80119be:	3201      	adds	r2, #1
 80119c0:	7830      	ldrb	r0, [r6, #0]
 80119c2:	f7ff ff9c 	bl	80118fe <__hexdig_fun>
 80119c6:	2800      	cmp	r0, #0
 80119c8:	d1f8      	bne.n	80119bc <__gethex+0x94>
 80119ca:	9901      	ldr	r1, [sp, #4]
 80119cc:	4652      	mov	r2, sl
 80119ce:	4630      	mov	r0, r6
 80119d0:	f001 ff42 	bl	8013858 <strncmp>
 80119d4:	b980      	cbnz	r0, 80119f8 <__gethex+0xd0>
 80119d6:	b94d      	cbnz	r5, 80119ec <__gethex+0xc4>
 80119d8:	eb06 050a 	add.w	r5, r6, sl
 80119dc:	462a      	mov	r2, r5
 80119de:	4616      	mov	r6, r2
 80119e0:	3201      	adds	r2, #1
 80119e2:	7830      	ldrb	r0, [r6, #0]
 80119e4:	f7ff ff8b 	bl	80118fe <__hexdig_fun>
 80119e8:	2800      	cmp	r0, #0
 80119ea:	d1f8      	bne.n	80119de <__gethex+0xb6>
 80119ec:	1bad      	subs	r5, r5, r6
 80119ee:	00ad      	lsls	r5, r5, #2
 80119f0:	e004      	b.n	80119fc <__gethex+0xd4>
 80119f2:	2400      	movs	r4, #0
 80119f4:	4625      	mov	r5, r4
 80119f6:	e7e0      	b.n	80119ba <__gethex+0x92>
 80119f8:	2d00      	cmp	r5, #0
 80119fa:	d1f7      	bne.n	80119ec <__gethex+0xc4>
 80119fc:	7833      	ldrb	r3, [r6, #0]
 80119fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011a02:	2b50      	cmp	r3, #80	; 0x50
 8011a04:	d13b      	bne.n	8011a7e <__gethex+0x156>
 8011a06:	7873      	ldrb	r3, [r6, #1]
 8011a08:	2b2b      	cmp	r3, #43	; 0x2b
 8011a0a:	d02c      	beq.n	8011a66 <__gethex+0x13e>
 8011a0c:	2b2d      	cmp	r3, #45	; 0x2d
 8011a0e:	d02e      	beq.n	8011a6e <__gethex+0x146>
 8011a10:	1c71      	adds	r1, r6, #1
 8011a12:	f04f 0900 	mov.w	r9, #0
 8011a16:	7808      	ldrb	r0, [r1, #0]
 8011a18:	f7ff ff71 	bl	80118fe <__hexdig_fun>
 8011a1c:	1e43      	subs	r3, r0, #1
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	2b18      	cmp	r3, #24
 8011a22:	d82c      	bhi.n	8011a7e <__gethex+0x156>
 8011a24:	f1a0 0210 	sub.w	r2, r0, #16
 8011a28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011a2c:	f7ff ff67 	bl	80118fe <__hexdig_fun>
 8011a30:	1e43      	subs	r3, r0, #1
 8011a32:	b2db      	uxtb	r3, r3
 8011a34:	2b18      	cmp	r3, #24
 8011a36:	d91d      	bls.n	8011a74 <__gethex+0x14c>
 8011a38:	f1b9 0f00 	cmp.w	r9, #0
 8011a3c:	d000      	beq.n	8011a40 <__gethex+0x118>
 8011a3e:	4252      	negs	r2, r2
 8011a40:	4415      	add	r5, r2
 8011a42:	f8cb 1000 	str.w	r1, [fp]
 8011a46:	b1e4      	cbz	r4, 8011a82 <__gethex+0x15a>
 8011a48:	9b00      	ldr	r3, [sp, #0]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	bf14      	ite	ne
 8011a4e:	2700      	movne	r7, #0
 8011a50:	2706      	moveq	r7, #6
 8011a52:	4638      	mov	r0, r7
 8011a54:	b009      	add	sp, #36	; 0x24
 8011a56:	ecbd 8b02 	vpop	{d8}
 8011a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a5e:	463e      	mov	r6, r7
 8011a60:	4625      	mov	r5, r4
 8011a62:	2401      	movs	r4, #1
 8011a64:	e7ca      	b.n	80119fc <__gethex+0xd4>
 8011a66:	f04f 0900 	mov.w	r9, #0
 8011a6a:	1cb1      	adds	r1, r6, #2
 8011a6c:	e7d3      	b.n	8011a16 <__gethex+0xee>
 8011a6e:	f04f 0901 	mov.w	r9, #1
 8011a72:	e7fa      	b.n	8011a6a <__gethex+0x142>
 8011a74:	230a      	movs	r3, #10
 8011a76:	fb03 0202 	mla	r2, r3, r2, r0
 8011a7a:	3a10      	subs	r2, #16
 8011a7c:	e7d4      	b.n	8011a28 <__gethex+0x100>
 8011a7e:	4631      	mov	r1, r6
 8011a80:	e7df      	b.n	8011a42 <__gethex+0x11a>
 8011a82:	1bf3      	subs	r3, r6, r7
 8011a84:	3b01      	subs	r3, #1
 8011a86:	4621      	mov	r1, r4
 8011a88:	2b07      	cmp	r3, #7
 8011a8a:	dc0b      	bgt.n	8011aa4 <__gethex+0x17c>
 8011a8c:	ee18 0a10 	vmov	r0, s16
 8011a90:	f000 faec 	bl	801206c <_Balloc>
 8011a94:	4604      	mov	r4, r0
 8011a96:	b940      	cbnz	r0, 8011aaa <__gethex+0x182>
 8011a98:	4b5d      	ldr	r3, [pc, #372]	; (8011c10 <__gethex+0x2e8>)
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	21de      	movs	r1, #222	; 0xde
 8011a9e:	485d      	ldr	r0, [pc, #372]	; (8011c14 <__gethex+0x2ec>)
 8011aa0:	f001 ffaa 	bl	80139f8 <__assert_func>
 8011aa4:	3101      	adds	r1, #1
 8011aa6:	105b      	asrs	r3, r3, #1
 8011aa8:	e7ee      	b.n	8011a88 <__gethex+0x160>
 8011aaa:	f100 0914 	add.w	r9, r0, #20
 8011aae:	f04f 0b00 	mov.w	fp, #0
 8011ab2:	f1ca 0301 	rsb	r3, sl, #1
 8011ab6:	f8cd 9008 	str.w	r9, [sp, #8]
 8011aba:	f8cd b000 	str.w	fp, [sp]
 8011abe:	9306      	str	r3, [sp, #24]
 8011ac0:	42b7      	cmp	r7, r6
 8011ac2:	d340      	bcc.n	8011b46 <__gethex+0x21e>
 8011ac4:	9802      	ldr	r0, [sp, #8]
 8011ac6:	9b00      	ldr	r3, [sp, #0]
 8011ac8:	f840 3b04 	str.w	r3, [r0], #4
 8011acc:	eba0 0009 	sub.w	r0, r0, r9
 8011ad0:	1080      	asrs	r0, r0, #2
 8011ad2:	0146      	lsls	r6, r0, #5
 8011ad4:	6120      	str	r0, [r4, #16]
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f000 fbba 	bl	8012250 <__hi0bits>
 8011adc:	1a30      	subs	r0, r6, r0
 8011ade:	f8d8 6000 	ldr.w	r6, [r8]
 8011ae2:	42b0      	cmp	r0, r6
 8011ae4:	dd63      	ble.n	8011bae <__gethex+0x286>
 8011ae6:	1b87      	subs	r7, r0, r6
 8011ae8:	4639      	mov	r1, r7
 8011aea:	4620      	mov	r0, r4
 8011aec:	f000 ff5e 	bl	80129ac <__any_on>
 8011af0:	4682      	mov	sl, r0
 8011af2:	b1a8      	cbz	r0, 8011b20 <__gethex+0x1f8>
 8011af4:	1e7b      	subs	r3, r7, #1
 8011af6:	1159      	asrs	r1, r3, #5
 8011af8:	f003 021f 	and.w	r2, r3, #31
 8011afc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011b00:	f04f 0a01 	mov.w	sl, #1
 8011b04:	fa0a f202 	lsl.w	r2, sl, r2
 8011b08:	420a      	tst	r2, r1
 8011b0a:	d009      	beq.n	8011b20 <__gethex+0x1f8>
 8011b0c:	4553      	cmp	r3, sl
 8011b0e:	dd05      	ble.n	8011b1c <__gethex+0x1f4>
 8011b10:	1eb9      	subs	r1, r7, #2
 8011b12:	4620      	mov	r0, r4
 8011b14:	f000 ff4a 	bl	80129ac <__any_on>
 8011b18:	2800      	cmp	r0, #0
 8011b1a:	d145      	bne.n	8011ba8 <__gethex+0x280>
 8011b1c:	f04f 0a02 	mov.w	sl, #2
 8011b20:	4639      	mov	r1, r7
 8011b22:	4620      	mov	r0, r4
 8011b24:	f7ff fe99 	bl	801185a <rshift>
 8011b28:	443d      	add	r5, r7
 8011b2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b2e:	42ab      	cmp	r3, r5
 8011b30:	da4c      	bge.n	8011bcc <__gethex+0x2a4>
 8011b32:	ee18 0a10 	vmov	r0, s16
 8011b36:	4621      	mov	r1, r4
 8011b38:	f000 fad8 	bl	80120ec <_Bfree>
 8011b3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011b3e:	2300      	movs	r3, #0
 8011b40:	6013      	str	r3, [r2, #0]
 8011b42:	27a3      	movs	r7, #163	; 0xa3
 8011b44:	e785      	b.n	8011a52 <__gethex+0x12a>
 8011b46:	1e73      	subs	r3, r6, #1
 8011b48:	9a05      	ldr	r2, [sp, #20]
 8011b4a:	9303      	str	r3, [sp, #12]
 8011b4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011b50:	4293      	cmp	r3, r2
 8011b52:	d019      	beq.n	8011b88 <__gethex+0x260>
 8011b54:	f1bb 0f20 	cmp.w	fp, #32
 8011b58:	d107      	bne.n	8011b6a <__gethex+0x242>
 8011b5a:	9b02      	ldr	r3, [sp, #8]
 8011b5c:	9a00      	ldr	r2, [sp, #0]
 8011b5e:	f843 2b04 	str.w	r2, [r3], #4
 8011b62:	9302      	str	r3, [sp, #8]
 8011b64:	2300      	movs	r3, #0
 8011b66:	9300      	str	r3, [sp, #0]
 8011b68:	469b      	mov	fp, r3
 8011b6a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011b6e:	f7ff fec6 	bl	80118fe <__hexdig_fun>
 8011b72:	9b00      	ldr	r3, [sp, #0]
 8011b74:	f000 000f 	and.w	r0, r0, #15
 8011b78:	fa00 f00b 	lsl.w	r0, r0, fp
 8011b7c:	4303      	orrs	r3, r0
 8011b7e:	9300      	str	r3, [sp, #0]
 8011b80:	f10b 0b04 	add.w	fp, fp, #4
 8011b84:	9b03      	ldr	r3, [sp, #12]
 8011b86:	e00d      	b.n	8011ba4 <__gethex+0x27c>
 8011b88:	9b03      	ldr	r3, [sp, #12]
 8011b8a:	9a06      	ldr	r2, [sp, #24]
 8011b8c:	4413      	add	r3, r2
 8011b8e:	42bb      	cmp	r3, r7
 8011b90:	d3e0      	bcc.n	8011b54 <__gethex+0x22c>
 8011b92:	4618      	mov	r0, r3
 8011b94:	9901      	ldr	r1, [sp, #4]
 8011b96:	9307      	str	r3, [sp, #28]
 8011b98:	4652      	mov	r2, sl
 8011b9a:	f001 fe5d 	bl	8013858 <strncmp>
 8011b9e:	9b07      	ldr	r3, [sp, #28]
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	d1d7      	bne.n	8011b54 <__gethex+0x22c>
 8011ba4:	461e      	mov	r6, r3
 8011ba6:	e78b      	b.n	8011ac0 <__gethex+0x198>
 8011ba8:	f04f 0a03 	mov.w	sl, #3
 8011bac:	e7b8      	b.n	8011b20 <__gethex+0x1f8>
 8011bae:	da0a      	bge.n	8011bc6 <__gethex+0x29e>
 8011bb0:	1a37      	subs	r7, r6, r0
 8011bb2:	4621      	mov	r1, r4
 8011bb4:	ee18 0a10 	vmov	r0, s16
 8011bb8:	463a      	mov	r2, r7
 8011bba:	f000 fcb3 	bl	8012524 <__lshift>
 8011bbe:	1bed      	subs	r5, r5, r7
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	f100 0914 	add.w	r9, r0, #20
 8011bc6:	f04f 0a00 	mov.w	sl, #0
 8011bca:	e7ae      	b.n	8011b2a <__gethex+0x202>
 8011bcc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011bd0:	42a8      	cmp	r0, r5
 8011bd2:	dd72      	ble.n	8011cba <__gethex+0x392>
 8011bd4:	1b45      	subs	r5, r0, r5
 8011bd6:	42ae      	cmp	r6, r5
 8011bd8:	dc36      	bgt.n	8011c48 <__gethex+0x320>
 8011bda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011bde:	2b02      	cmp	r3, #2
 8011be0:	d02a      	beq.n	8011c38 <__gethex+0x310>
 8011be2:	2b03      	cmp	r3, #3
 8011be4:	d02c      	beq.n	8011c40 <__gethex+0x318>
 8011be6:	2b01      	cmp	r3, #1
 8011be8:	d11c      	bne.n	8011c24 <__gethex+0x2fc>
 8011bea:	42ae      	cmp	r6, r5
 8011bec:	d11a      	bne.n	8011c24 <__gethex+0x2fc>
 8011bee:	2e01      	cmp	r6, #1
 8011bf0:	d112      	bne.n	8011c18 <__gethex+0x2f0>
 8011bf2:	9a04      	ldr	r2, [sp, #16]
 8011bf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011bf8:	6013      	str	r3, [r2, #0]
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	6123      	str	r3, [r4, #16]
 8011bfe:	f8c9 3000 	str.w	r3, [r9]
 8011c02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c04:	2762      	movs	r7, #98	; 0x62
 8011c06:	601c      	str	r4, [r3, #0]
 8011c08:	e723      	b.n	8011a52 <__gethex+0x12a>
 8011c0a:	bf00      	nop
 8011c0c:	08014bc8 	.word	0x08014bc8
 8011c10:	08014aef 	.word	0x08014aef
 8011c14:	08014b60 	.word	0x08014b60
 8011c18:	1e71      	subs	r1, r6, #1
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	f000 fec6 	bl	80129ac <__any_on>
 8011c20:	2800      	cmp	r0, #0
 8011c22:	d1e6      	bne.n	8011bf2 <__gethex+0x2ca>
 8011c24:	ee18 0a10 	vmov	r0, s16
 8011c28:	4621      	mov	r1, r4
 8011c2a:	f000 fa5f 	bl	80120ec <_Bfree>
 8011c2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c30:	2300      	movs	r3, #0
 8011c32:	6013      	str	r3, [r2, #0]
 8011c34:	2750      	movs	r7, #80	; 0x50
 8011c36:	e70c      	b.n	8011a52 <__gethex+0x12a>
 8011c38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d1f2      	bne.n	8011c24 <__gethex+0x2fc>
 8011c3e:	e7d8      	b.n	8011bf2 <__gethex+0x2ca>
 8011c40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d1d5      	bne.n	8011bf2 <__gethex+0x2ca>
 8011c46:	e7ed      	b.n	8011c24 <__gethex+0x2fc>
 8011c48:	1e6f      	subs	r7, r5, #1
 8011c4a:	f1ba 0f00 	cmp.w	sl, #0
 8011c4e:	d131      	bne.n	8011cb4 <__gethex+0x38c>
 8011c50:	b127      	cbz	r7, 8011c5c <__gethex+0x334>
 8011c52:	4639      	mov	r1, r7
 8011c54:	4620      	mov	r0, r4
 8011c56:	f000 fea9 	bl	80129ac <__any_on>
 8011c5a:	4682      	mov	sl, r0
 8011c5c:	117b      	asrs	r3, r7, #5
 8011c5e:	2101      	movs	r1, #1
 8011c60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011c64:	f007 071f 	and.w	r7, r7, #31
 8011c68:	fa01 f707 	lsl.w	r7, r1, r7
 8011c6c:	421f      	tst	r7, r3
 8011c6e:	4629      	mov	r1, r5
 8011c70:	4620      	mov	r0, r4
 8011c72:	bf18      	it	ne
 8011c74:	f04a 0a02 	orrne.w	sl, sl, #2
 8011c78:	1b76      	subs	r6, r6, r5
 8011c7a:	f7ff fdee 	bl	801185a <rshift>
 8011c7e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011c82:	2702      	movs	r7, #2
 8011c84:	f1ba 0f00 	cmp.w	sl, #0
 8011c88:	d048      	beq.n	8011d1c <__gethex+0x3f4>
 8011c8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011c8e:	2b02      	cmp	r3, #2
 8011c90:	d015      	beq.n	8011cbe <__gethex+0x396>
 8011c92:	2b03      	cmp	r3, #3
 8011c94:	d017      	beq.n	8011cc6 <__gethex+0x39e>
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d109      	bne.n	8011cae <__gethex+0x386>
 8011c9a:	f01a 0f02 	tst.w	sl, #2
 8011c9e:	d006      	beq.n	8011cae <__gethex+0x386>
 8011ca0:	f8d9 0000 	ldr.w	r0, [r9]
 8011ca4:	ea4a 0a00 	orr.w	sl, sl, r0
 8011ca8:	f01a 0f01 	tst.w	sl, #1
 8011cac:	d10e      	bne.n	8011ccc <__gethex+0x3a4>
 8011cae:	f047 0710 	orr.w	r7, r7, #16
 8011cb2:	e033      	b.n	8011d1c <__gethex+0x3f4>
 8011cb4:	f04f 0a01 	mov.w	sl, #1
 8011cb8:	e7d0      	b.n	8011c5c <__gethex+0x334>
 8011cba:	2701      	movs	r7, #1
 8011cbc:	e7e2      	b.n	8011c84 <__gethex+0x35c>
 8011cbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cc0:	f1c3 0301 	rsb	r3, r3, #1
 8011cc4:	9315      	str	r3, [sp, #84]	; 0x54
 8011cc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d0f0      	beq.n	8011cae <__gethex+0x386>
 8011ccc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011cd0:	f104 0314 	add.w	r3, r4, #20
 8011cd4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011cd8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011cdc:	f04f 0c00 	mov.w	ip, #0
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ce6:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011cea:	d01c      	beq.n	8011d26 <__gethex+0x3fe>
 8011cec:	3201      	adds	r2, #1
 8011cee:	6002      	str	r2, [r0, #0]
 8011cf0:	2f02      	cmp	r7, #2
 8011cf2:	f104 0314 	add.w	r3, r4, #20
 8011cf6:	d13f      	bne.n	8011d78 <__gethex+0x450>
 8011cf8:	f8d8 2000 	ldr.w	r2, [r8]
 8011cfc:	3a01      	subs	r2, #1
 8011cfe:	42b2      	cmp	r2, r6
 8011d00:	d10a      	bne.n	8011d18 <__gethex+0x3f0>
 8011d02:	1171      	asrs	r1, r6, #5
 8011d04:	2201      	movs	r2, #1
 8011d06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d0a:	f006 061f 	and.w	r6, r6, #31
 8011d0e:	fa02 f606 	lsl.w	r6, r2, r6
 8011d12:	421e      	tst	r6, r3
 8011d14:	bf18      	it	ne
 8011d16:	4617      	movne	r7, r2
 8011d18:	f047 0720 	orr.w	r7, r7, #32
 8011d1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d1e:	601c      	str	r4, [r3, #0]
 8011d20:	9b04      	ldr	r3, [sp, #16]
 8011d22:	601d      	str	r5, [r3, #0]
 8011d24:	e695      	b.n	8011a52 <__gethex+0x12a>
 8011d26:	4299      	cmp	r1, r3
 8011d28:	f843 cc04 	str.w	ip, [r3, #-4]
 8011d2c:	d8d8      	bhi.n	8011ce0 <__gethex+0x3b8>
 8011d2e:	68a3      	ldr	r3, [r4, #8]
 8011d30:	459b      	cmp	fp, r3
 8011d32:	db19      	blt.n	8011d68 <__gethex+0x440>
 8011d34:	6861      	ldr	r1, [r4, #4]
 8011d36:	ee18 0a10 	vmov	r0, s16
 8011d3a:	3101      	adds	r1, #1
 8011d3c:	f000 f996 	bl	801206c <_Balloc>
 8011d40:	4681      	mov	r9, r0
 8011d42:	b918      	cbnz	r0, 8011d4c <__gethex+0x424>
 8011d44:	4b1a      	ldr	r3, [pc, #104]	; (8011db0 <__gethex+0x488>)
 8011d46:	4602      	mov	r2, r0
 8011d48:	2184      	movs	r1, #132	; 0x84
 8011d4a:	e6a8      	b.n	8011a9e <__gethex+0x176>
 8011d4c:	6922      	ldr	r2, [r4, #16]
 8011d4e:	3202      	adds	r2, #2
 8011d50:	f104 010c 	add.w	r1, r4, #12
 8011d54:	0092      	lsls	r2, r2, #2
 8011d56:	300c      	adds	r0, #12
 8011d58:	f7fc fda2 	bl	800e8a0 <memcpy>
 8011d5c:	4621      	mov	r1, r4
 8011d5e:	ee18 0a10 	vmov	r0, s16
 8011d62:	f000 f9c3 	bl	80120ec <_Bfree>
 8011d66:	464c      	mov	r4, r9
 8011d68:	6923      	ldr	r3, [r4, #16]
 8011d6a:	1c5a      	adds	r2, r3, #1
 8011d6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011d70:	6122      	str	r2, [r4, #16]
 8011d72:	2201      	movs	r2, #1
 8011d74:	615a      	str	r2, [r3, #20]
 8011d76:	e7bb      	b.n	8011cf0 <__gethex+0x3c8>
 8011d78:	6922      	ldr	r2, [r4, #16]
 8011d7a:	455a      	cmp	r2, fp
 8011d7c:	dd0b      	ble.n	8011d96 <__gethex+0x46e>
 8011d7e:	2101      	movs	r1, #1
 8011d80:	4620      	mov	r0, r4
 8011d82:	f7ff fd6a 	bl	801185a <rshift>
 8011d86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011d8a:	3501      	adds	r5, #1
 8011d8c:	42ab      	cmp	r3, r5
 8011d8e:	f6ff aed0 	blt.w	8011b32 <__gethex+0x20a>
 8011d92:	2701      	movs	r7, #1
 8011d94:	e7c0      	b.n	8011d18 <__gethex+0x3f0>
 8011d96:	f016 061f 	ands.w	r6, r6, #31
 8011d9a:	d0fa      	beq.n	8011d92 <__gethex+0x46a>
 8011d9c:	4453      	add	r3, sl
 8011d9e:	f1c6 0620 	rsb	r6, r6, #32
 8011da2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011da6:	f000 fa53 	bl	8012250 <__hi0bits>
 8011daa:	42b0      	cmp	r0, r6
 8011dac:	dbe7      	blt.n	8011d7e <__gethex+0x456>
 8011dae:	e7f0      	b.n	8011d92 <__gethex+0x46a>
 8011db0:	08014aef 	.word	0x08014aef

08011db4 <L_shift>:
 8011db4:	f1c2 0208 	rsb	r2, r2, #8
 8011db8:	0092      	lsls	r2, r2, #2
 8011dba:	b570      	push	{r4, r5, r6, lr}
 8011dbc:	f1c2 0620 	rsb	r6, r2, #32
 8011dc0:	6843      	ldr	r3, [r0, #4]
 8011dc2:	6804      	ldr	r4, [r0, #0]
 8011dc4:	fa03 f506 	lsl.w	r5, r3, r6
 8011dc8:	432c      	orrs	r4, r5
 8011dca:	40d3      	lsrs	r3, r2
 8011dcc:	6004      	str	r4, [r0, #0]
 8011dce:	f840 3f04 	str.w	r3, [r0, #4]!
 8011dd2:	4288      	cmp	r0, r1
 8011dd4:	d3f4      	bcc.n	8011dc0 <L_shift+0xc>
 8011dd6:	bd70      	pop	{r4, r5, r6, pc}

08011dd8 <__match>:
 8011dd8:	b530      	push	{r4, r5, lr}
 8011dda:	6803      	ldr	r3, [r0, #0]
 8011ddc:	3301      	adds	r3, #1
 8011dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011de2:	b914      	cbnz	r4, 8011dea <__match+0x12>
 8011de4:	6003      	str	r3, [r0, #0]
 8011de6:	2001      	movs	r0, #1
 8011de8:	bd30      	pop	{r4, r5, pc}
 8011dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011df2:	2d19      	cmp	r5, #25
 8011df4:	bf98      	it	ls
 8011df6:	3220      	addls	r2, #32
 8011df8:	42a2      	cmp	r2, r4
 8011dfa:	d0f0      	beq.n	8011dde <__match+0x6>
 8011dfc:	2000      	movs	r0, #0
 8011dfe:	e7f3      	b.n	8011de8 <__match+0x10>

08011e00 <__hexnan>:
 8011e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e04:	680b      	ldr	r3, [r1, #0]
 8011e06:	115e      	asrs	r6, r3, #5
 8011e08:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011e0c:	f013 031f 	ands.w	r3, r3, #31
 8011e10:	b087      	sub	sp, #28
 8011e12:	bf18      	it	ne
 8011e14:	3604      	addne	r6, #4
 8011e16:	2500      	movs	r5, #0
 8011e18:	1f37      	subs	r7, r6, #4
 8011e1a:	4690      	mov	r8, r2
 8011e1c:	6802      	ldr	r2, [r0, #0]
 8011e1e:	9301      	str	r3, [sp, #4]
 8011e20:	4682      	mov	sl, r0
 8011e22:	f846 5c04 	str.w	r5, [r6, #-4]
 8011e26:	46b9      	mov	r9, r7
 8011e28:	463c      	mov	r4, r7
 8011e2a:	9502      	str	r5, [sp, #8]
 8011e2c:	46ab      	mov	fp, r5
 8011e2e:	7851      	ldrb	r1, [r2, #1]
 8011e30:	1c53      	adds	r3, r2, #1
 8011e32:	9303      	str	r3, [sp, #12]
 8011e34:	b341      	cbz	r1, 8011e88 <__hexnan+0x88>
 8011e36:	4608      	mov	r0, r1
 8011e38:	9205      	str	r2, [sp, #20]
 8011e3a:	9104      	str	r1, [sp, #16]
 8011e3c:	f7ff fd5f 	bl	80118fe <__hexdig_fun>
 8011e40:	2800      	cmp	r0, #0
 8011e42:	d14f      	bne.n	8011ee4 <__hexnan+0xe4>
 8011e44:	9904      	ldr	r1, [sp, #16]
 8011e46:	9a05      	ldr	r2, [sp, #20]
 8011e48:	2920      	cmp	r1, #32
 8011e4a:	d818      	bhi.n	8011e7e <__hexnan+0x7e>
 8011e4c:	9b02      	ldr	r3, [sp, #8]
 8011e4e:	459b      	cmp	fp, r3
 8011e50:	dd13      	ble.n	8011e7a <__hexnan+0x7a>
 8011e52:	454c      	cmp	r4, r9
 8011e54:	d206      	bcs.n	8011e64 <__hexnan+0x64>
 8011e56:	2d07      	cmp	r5, #7
 8011e58:	dc04      	bgt.n	8011e64 <__hexnan+0x64>
 8011e5a:	462a      	mov	r2, r5
 8011e5c:	4649      	mov	r1, r9
 8011e5e:	4620      	mov	r0, r4
 8011e60:	f7ff ffa8 	bl	8011db4 <L_shift>
 8011e64:	4544      	cmp	r4, r8
 8011e66:	d950      	bls.n	8011f0a <__hexnan+0x10a>
 8011e68:	2300      	movs	r3, #0
 8011e6a:	f1a4 0904 	sub.w	r9, r4, #4
 8011e6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e72:	f8cd b008 	str.w	fp, [sp, #8]
 8011e76:	464c      	mov	r4, r9
 8011e78:	461d      	mov	r5, r3
 8011e7a:	9a03      	ldr	r2, [sp, #12]
 8011e7c:	e7d7      	b.n	8011e2e <__hexnan+0x2e>
 8011e7e:	2929      	cmp	r1, #41	; 0x29
 8011e80:	d156      	bne.n	8011f30 <__hexnan+0x130>
 8011e82:	3202      	adds	r2, #2
 8011e84:	f8ca 2000 	str.w	r2, [sl]
 8011e88:	f1bb 0f00 	cmp.w	fp, #0
 8011e8c:	d050      	beq.n	8011f30 <__hexnan+0x130>
 8011e8e:	454c      	cmp	r4, r9
 8011e90:	d206      	bcs.n	8011ea0 <__hexnan+0xa0>
 8011e92:	2d07      	cmp	r5, #7
 8011e94:	dc04      	bgt.n	8011ea0 <__hexnan+0xa0>
 8011e96:	462a      	mov	r2, r5
 8011e98:	4649      	mov	r1, r9
 8011e9a:	4620      	mov	r0, r4
 8011e9c:	f7ff ff8a 	bl	8011db4 <L_shift>
 8011ea0:	4544      	cmp	r4, r8
 8011ea2:	d934      	bls.n	8011f0e <__hexnan+0x10e>
 8011ea4:	f1a8 0204 	sub.w	r2, r8, #4
 8011ea8:	4623      	mov	r3, r4
 8011eaa:	f853 1b04 	ldr.w	r1, [r3], #4
 8011eae:	f842 1f04 	str.w	r1, [r2, #4]!
 8011eb2:	429f      	cmp	r7, r3
 8011eb4:	d2f9      	bcs.n	8011eaa <__hexnan+0xaa>
 8011eb6:	1b3b      	subs	r3, r7, r4
 8011eb8:	f023 0303 	bic.w	r3, r3, #3
 8011ebc:	3304      	adds	r3, #4
 8011ebe:	3401      	adds	r4, #1
 8011ec0:	3e03      	subs	r6, #3
 8011ec2:	42b4      	cmp	r4, r6
 8011ec4:	bf88      	it	hi
 8011ec6:	2304      	movhi	r3, #4
 8011ec8:	4443      	add	r3, r8
 8011eca:	2200      	movs	r2, #0
 8011ecc:	f843 2b04 	str.w	r2, [r3], #4
 8011ed0:	429f      	cmp	r7, r3
 8011ed2:	d2fb      	bcs.n	8011ecc <__hexnan+0xcc>
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	b91b      	cbnz	r3, 8011ee0 <__hexnan+0xe0>
 8011ed8:	4547      	cmp	r7, r8
 8011eda:	d127      	bne.n	8011f2c <__hexnan+0x12c>
 8011edc:	2301      	movs	r3, #1
 8011ede:	603b      	str	r3, [r7, #0]
 8011ee0:	2005      	movs	r0, #5
 8011ee2:	e026      	b.n	8011f32 <__hexnan+0x132>
 8011ee4:	3501      	adds	r5, #1
 8011ee6:	2d08      	cmp	r5, #8
 8011ee8:	f10b 0b01 	add.w	fp, fp, #1
 8011eec:	dd06      	ble.n	8011efc <__hexnan+0xfc>
 8011eee:	4544      	cmp	r4, r8
 8011ef0:	d9c3      	bls.n	8011e7a <__hexnan+0x7a>
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ef8:	2501      	movs	r5, #1
 8011efa:	3c04      	subs	r4, #4
 8011efc:	6822      	ldr	r2, [r4, #0]
 8011efe:	f000 000f 	and.w	r0, r0, #15
 8011f02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011f06:	6022      	str	r2, [r4, #0]
 8011f08:	e7b7      	b.n	8011e7a <__hexnan+0x7a>
 8011f0a:	2508      	movs	r5, #8
 8011f0c:	e7b5      	b.n	8011e7a <__hexnan+0x7a>
 8011f0e:	9b01      	ldr	r3, [sp, #4]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d0df      	beq.n	8011ed4 <__hexnan+0xd4>
 8011f14:	f04f 32ff 	mov.w	r2, #4294967295
 8011f18:	f1c3 0320 	rsb	r3, r3, #32
 8011f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8011f20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011f24:	401a      	ands	r2, r3
 8011f26:	f846 2c04 	str.w	r2, [r6, #-4]
 8011f2a:	e7d3      	b.n	8011ed4 <__hexnan+0xd4>
 8011f2c:	3f04      	subs	r7, #4
 8011f2e:	e7d1      	b.n	8011ed4 <__hexnan+0xd4>
 8011f30:	2004      	movs	r0, #4
 8011f32:	b007      	add	sp, #28
 8011f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f38 <_localeconv_r>:
 8011f38:	4800      	ldr	r0, [pc, #0]	; (8011f3c <_localeconv_r+0x4>)
 8011f3a:	4770      	bx	lr
 8011f3c:	20000268 	.word	0x20000268

08011f40 <__retarget_lock_init_recursive>:
 8011f40:	4770      	bx	lr

08011f42 <__retarget_lock_acquire_recursive>:
 8011f42:	4770      	bx	lr

08011f44 <__retarget_lock_release_recursive>:
 8011f44:	4770      	bx	lr
	...

08011f48 <_lseek_r>:
 8011f48:	b538      	push	{r3, r4, r5, lr}
 8011f4a:	4d07      	ldr	r5, [pc, #28]	; (8011f68 <_lseek_r+0x20>)
 8011f4c:	4604      	mov	r4, r0
 8011f4e:	4608      	mov	r0, r1
 8011f50:	4611      	mov	r1, r2
 8011f52:	2200      	movs	r2, #0
 8011f54:	602a      	str	r2, [r5, #0]
 8011f56:	461a      	mov	r2, r3
 8011f58:	f7f2 f960 	bl	800421c <_lseek>
 8011f5c:	1c43      	adds	r3, r0, #1
 8011f5e:	d102      	bne.n	8011f66 <_lseek_r+0x1e>
 8011f60:	682b      	ldr	r3, [r5, #0]
 8011f62:	b103      	cbz	r3, 8011f66 <_lseek_r+0x1e>
 8011f64:	6023      	str	r3, [r4, #0]
 8011f66:	bd38      	pop	{r3, r4, r5, pc}
 8011f68:	2000314c 	.word	0x2000314c

08011f6c <__swhatbuf_r>:
 8011f6c:	b570      	push	{r4, r5, r6, lr}
 8011f6e:	460e      	mov	r6, r1
 8011f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f74:	2900      	cmp	r1, #0
 8011f76:	b096      	sub	sp, #88	; 0x58
 8011f78:	4614      	mov	r4, r2
 8011f7a:	461d      	mov	r5, r3
 8011f7c:	da08      	bge.n	8011f90 <__swhatbuf_r+0x24>
 8011f7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011f82:	2200      	movs	r2, #0
 8011f84:	602a      	str	r2, [r5, #0]
 8011f86:	061a      	lsls	r2, r3, #24
 8011f88:	d410      	bmi.n	8011fac <__swhatbuf_r+0x40>
 8011f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f8e:	e00e      	b.n	8011fae <__swhatbuf_r+0x42>
 8011f90:	466a      	mov	r2, sp
 8011f92:	f001 fd61 	bl	8013a58 <_fstat_r>
 8011f96:	2800      	cmp	r0, #0
 8011f98:	dbf1      	blt.n	8011f7e <__swhatbuf_r+0x12>
 8011f9a:	9a01      	ldr	r2, [sp, #4]
 8011f9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011fa0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011fa4:	425a      	negs	r2, r3
 8011fa6:	415a      	adcs	r2, r3
 8011fa8:	602a      	str	r2, [r5, #0]
 8011faa:	e7ee      	b.n	8011f8a <__swhatbuf_r+0x1e>
 8011fac:	2340      	movs	r3, #64	; 0x40
 8011fae:	2000      	movs	r0, #0
 8011fb0:	6023      	str	r3, [r4, #0]
 8011fb2:	b016      	add	sp, #88	; 0x58
 8011fb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08011fb8 <__smakebuf_r>:
 8011fb8:	898b      	ldrh	r3, [r1, #12]
 8011fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011fbc:	079d      	lsls	r5, r3, #30
 8011fbe:	4606      	mov	r6, r0
 8011fc0:	460c      	mov	r4, r1
 8011fc2:	d507      	bpl.n	8011fd4 <__smakebuf_r+0x1c>
 8011fc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011fc8:	6023      	str	r3, [r4, #0]
 8011fca:	6123      	str	r3, [r4, #16]
 8011fcc:	2301      	movs	r3, #1
 8011fce:	6163      	str	r3, [r4, #20]
 8011fd0:	b002      	add	sp, #8
 8011fd2:	bd70      	pop	{r4, r5, r6, pc}
 8011fd4:	ab01      	add	r3, sp, #4
 8011fd6:	466a      	mov	r2, sp
 8011fd8:	f7ff ffc8 	bl	8011f6c <__swhatbuf_r>
 8011fdc:	9900      	ldr	r1, [sp, #0]
 8011fde:	4605      	mov	r5, r0
 8011fe0:	4630      	mov	r0, r6
 8011fe2:	f000 fd87 	bl	8012af4 <_malloc_r>
 8011fe6:	b948      	cbnz	r0, 8011ffc <__smakebuf_r+0x44>
 8011fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fec:	059a      	lsls	r2, r3, #22
 8011fee:	d4ef      	bmi.n	8011fd0 <__smakebuf_r+0x18>
 8011ff0:	f023 0303 	bic.w	r3, r3, #3
 8011ff4:	f043 0302 	orr.w	r3, r3, #2
 8011ff8:	81a3      	strh	r3, [r4, #12]
 8011ffa:	e7e3      	b.n	8011fc4 <__smakebuf_r+0xc>
 8011ffc:	4b0d      	ldr	r3, [pc, #52]	; (8012034 <__smakebuf_r+0x7c>)
 8011ffe:	62b3      	str	r3, [r6, #40]	; 0x28
 8012000:	89a3      	ldrh	r3, [r4, #12]
 8012002:	6020      	str	r0, [r4, #0]
 8012004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012008:	81a3      	strh	r3, [r4, #12]
 801200a:	9b00      	ldr	r3, [sp, #0]
 801200c:	6163      	str	r3, [r4, #20]
 801200e:	9b01      	ldr	r3, [sp, #4]
 8012010:	6120      	str	r0, [r4, #16]
 8012012:	b15b      	cbz	r3, 801202c <__smakebuf_r+0x74>
 8012014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012018:	4630      	mov	r0, r6
 801201a:	f001 fd2f 	bl	8013a7c <_isatty_r>
 801201e:	b128      	cbz	r0, 801202c <__smakebuf_r+0x74>
 8012020:	89a3      	ldrh	r3, [r4, #12]
 8012022:	f023 0303 	bic.w	r3, r3, #3
 8012026:	f043 0301 	orr.w	r3, r3, #1
 801202a:	81a3      	strh	r3, [r4, #12]
 801202c:	89a0      	ldrh	r0, [r4, #12]
 801202e:	4305      	orrs	r5, r0
 8012030:	81a5      	strh	r5, [r4, #12]
 8012032:	e7cd      	b.n	8011fd0 <__smakebuf_r+0x18>
 8012034:	080116b9 	.word	0x080116b9

08012038 <malloc>:
 8012038:	4b02      	ldr	r3, [pc, #8]	; (8012044 <malloc+0xc>)
 801203a:	4601      	mov	r1, r0
 801203c:	6818      	ldr	r0, [r3, #0]
 801203e:	f000 bd59 	b.w	8012af4 <_malloc_r>
 8012042:	bf00      	nop
 8012044:	20000110 	.word	0x20000110

08012048 <__ascii_mbtowc>:
 8012048:	b082      	sub	sp, #8
 801204a:	b901      	cbnz	r1, 801204e <__ascii_mbtowc+0x6>
 801204c:	a901      	add	r1, sp, #4
 801204e:	b142      	cbz	r2, 8012062 <__ascii_mbtowc+0x1a>
 8012050:	b14b      	cbz	r3, 8012066 <__ascii_mbtowc+0x1e>
 8012052:	7813      	ldrb	r3, [r2, #0]
 8012054:	600b      	str	r3, [r1, #0]
 8012056:	7812      	ldrb	r2, [r2, #0]
 8012058:	1e10      	subs	r0, r2, #0
 801205a:	bf18      	it	ne
 801205c:	2001      	movne	r0, #1
 801205e:	b002      	add	sp, #8
 8012060:	4770      	bx	lr
 8012062:	4610      	mov	r0, r2
 8012064:	e7fb      	b.n	801205e <__ascii_mbtowc+0x16>
 8012066:	f06f 0001 	mvn.w	r0, #1
 801206a:	e7f8      	b.n	801205e <__ascii_mbtowc+0x16>

0801206c <_Balloc>:
 801206c:	b570      	push	{r4, r5, r6, lr}
 801206e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012070:	4604      	mov	r4, r0
 8012072:	460d      	mov	r5, r1
 8012074:	b976      	cbnz	r6, 8012094 <_Balloc+0x28>
 8012076:	2010      	movs	r0, #16
 8012078:	f7ff ffde 	bl	8012038 <malloc>
 801207c:	4602      	mov	r2, r0
 801207e:	6260      	str	r0, [r4, #36]	; 0x24
 8012080:	b920      	cbnz	r0, 801208c <_Balloc+0x20>
 8012082:	4b18      	ldr	r3, [pc, #96]	; (80120e4 <_Balloc+0x78>)
 8012084:	4818      	ldr	r0, [pc, #96]	; (80120e8 <_Balloc+0x7c>)
 8012086:	2166      	movs	r1, #102	; 0x66
 8012088:	f001 fcb6 	bl	80139f8 <__assert_func>
 801208c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012090:	6006      	str	r6, [r0, #0]
 8012092:	60c6      	str	r6, [r0, #12]
 8012094:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012096:	68f3      	ldr	r3, [r6, #12]
 8012098:	b183      	cbz	r3, 80120bc <_Balloc+0x50>
 801209a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801209c:	68db      	ldr	r3, [r3, #12]
 801209e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80120a2:	b9b8      	cbnz	r0, 80120d4 <_Balloc+0x68>
 80120a4:	2101      	movs	r1, #1
 80120a6:	fa01 f605 	lsl.w	r6, r1, r5
 80120aa:	1d72      	adds	r2, r6, #5
 80120ac:	0092      	lsls	r2, r2, #2
 80120ae:	4620      	mov	r0, r4
 80120b0:	f000 fc9d 	bl	80129ee <_calloc_r>
 80120b4:	b160      	cbz	r0, 80120d0 <_Balloc+0x64>
 80120b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80120ba:	e00e      	b.n	80120da <_Balloc+0x6e>
 80120bc:	2221      	movs	r2, #33	; 0x21
 80120be:	2104      	movs	r1, #4
 80120c0:	4620      	mov	r0, r4
 80120c2:	f000 fc94 	bl	80129ee <_calloc_r>
 80120c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80120c8:	60f0      	str	r0, [r6, #12]
 80120ca:	68db      	ldr	r3, [r3, #12]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d1e4      	bne.n	801209a <_Balloc+0x2e>
 80120d0:	2000      	movs	r0, #0
 80120d2:	bd70      	pop	{r4, r5, r6, pc}
 80120d4:	6802      	ldr	r2, [r0, #0]
 80120d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80120da:	2300      	movs	r3, #0
 80120dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80120e0:	e7f7      	b.n	80120d2 <_Balloc+0x66>
 80120e2:	bf00      	nop
 80120e4:	08014a7d 	.word	0x08014a7d
 80120e8:	08014bdc 	.word	0x08014bdc

080120ec <_Bfree>:
 80120ec:	b570      	push	{r4, r5, r6, lr}
 80120ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80120f0:	4605      	mov	r5, r0
 80120f2:	460c      	mov	r4, r1
 80120f4:	b976      	cbnz	r6, 8012114 <_Bfree+0x28>
 80120f6:	2010      	movs	r0, #16
 80120f8:	f7ff ff9e 	bl	8012038 <malloc>
 80120fc:	4602      	mov	r2, r0
 80120fe:	6268      	str	r0, [r5, #36]	; 0x24
 8012100:	b920      	cbnz	r0, 801210c <_Bfree+0x20>
 8012102:	4b09      	ldr	r3, [pc, #36]	; (8012128 <_Bfree+0x3c>)
 8012104:	4809      	ldr	r0, [pc, #36]	; (801212c <_Bfree+0x40>)
 8012106:	218a      	movs	r1, #138	; 0x8a
 8012108:	f001 fc76 	bl	80139f8 <__assert_func>
 801210c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012110:	6006      	str	r6, [r0, #0]
 8012112:	60c6      	str	r6, [r0, #12]
 8012114:	b13c      	cbz	r4, 8012126 <_Bfree+0x3a>
 8012116:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012118:	6862      	ldr	r2, [r4, #4]
 801211a:	68db      	ldr	r3, [r3, #12]
 801211c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012120:	6021      	str	r1, [r4, #0]
 8012122:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012126:	bd70      	pop	{r4, r5, r6, pc}
 8012128:	08014a7d 	.word	0x08014a7d
 801212c:	08014bdc 	.word	0x08014bdc

08012130 <__multadd>:
 8012130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012134:	690d      	ldr	r5, [r1, #16]
 8012136:	4607      	mov	r7, r0
 8012138:	460c      	mov	r4, r1
 801213a:	461e      	mov	r6, r3
 801213c:	f101 0c14 	add.w	ip, r1, #20
 8012140:	2000      	movs	r0, #0
 8012142:	f8dc 3000 	ldr.w	r3, [ip]
 8012146:	b299      	uxth	r1, r3
 8012148:	fb02 6101 	mla	r1, r2, r1, r6
 801214c:	0c1e      	lsrs	r6, r3, #16
 801214e:	0c0b      	lsrs	r3, r1, #16
 8012150:	fb02 3306 	mla	r3, r2, r6, r3
 8012154:	b289      	uxth	r1, r1
 8012156:	3001      	adds	r0, #1
 8012158:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801215c:	4285      	cmp	r5, r0
 801215e:	f84c 1b04 	str.w	r1, [ip], #4
 8012162:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012166:	dcec      	bgt.n	8012142 <__multadd+0x12>
 8012168:	b30e      	cbz	r6, 80121ae <__multadd+0x7e>
 801216a:	68a3      	ldr	r3, [r4, #8]
 801216c:	42ab      	cmp	r3, r5
 801216e:	dc19      	bgt.n	80121a4 <__multadd+0x74>
 8012170:	6861      	ldr	r1, [r4, #4]
 8012172:	4638      	mov	r0, r7
 8012174:	3101      	adds	r1, #1
 8012176:	f7ff ff79 	bl	801206c <_Balloc>
 801217a:	4680      	mov	r8, r0
 801217c:	b928      	cbnz	r0, 801218a <__multadd+0x5a>
 801217e:	4602      	mov	r2, r0
 8012180:	4b0c      	ldr	r3, [pc, #48]	; (80121b4 <__multadd+0x84>)
 8012182:	480d      	ldr	r0, [pc, #52]	; (80121b8 <__multadd+0x88>)
 8012184:	21b5      	movs	r1, #181	; 0xb5
 8012186:	f001 fc37 	bl	80139f8 <__assert_func>
 801218a:	6922      	ldr	r2, [r4, #16]
 801218c:	3202      	adds	r2, #2
 801218e:	f104 010c 	add.w	r1, r4, #12
 8012192:	0092      	lsls	r2, r2, #2
 8012194:	300c      	adds	r0, #12
 8012196:	f7fc fb83 	bl	800e8a0 <memcpy>
 801219a:	4621      	mov	r1, r4
 801219c:	4638      	mov	r0, r7
 801219e:	f7ff ffa5 	bl	80120ec <_Bfree>
 80121a2:	4644      	mov	r4, r8
 80121a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80121a8:	3501      	adds	r5, #1
 80121aa:	615e      	str	r6, [r3, #20]
 80121ac:	6125      	str	r5, [r4, #16]
 80121ae:	4620      	mov	r0, r4
 80121b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121b4:	08014aef 	.word	0x08014aef
 80121b8:	08014bdc 	.word	0x08014bdc

080121bc <__s2b>:
 80121bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121c0:	460c      	mov	r4, r1
 80121c2:	4615      	mov	r5, r2
 80121c4:	461f      	mov	r7, r3
 80121c6:	2209      	movs	r2, #9
 80121c8:	3308      	adds	r3, #8
 80121ca:	4606      	mov	r6, r0
 80121cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80121d0:	2100      	movs	r1, #0
 80121d2:	2201      	movs	r2, #1
 80121d4:	429a      	cmp	r2, r3
 80121d6:	db09      	blt.n	80121ec <__s2b+0x30>
 80121d8:	4630      	mov	r0, r6
 80121da:	f7ff ff47 	bl	801206c <_Balloc>
 80121de:	b940      	cbnz	r0, 80121f2 <__s2b+0x36>
 80121e0:	4602      	mov	r2, r0
 80121e2:	4b19      	ldr	r3, [pc, #100]	; (8012248 <__s2b+0x8c>)
 80121e4:	4819      	ldr	r0, [pc, #100]	; (801224c <__s2b+0x90>)
 80121e6:	21ce      	movs	r1, #206	; 0xce
 80121e8:	f001 fc06 	bl	80139f8 <__assert_func>
 80121ec:	0052      	lsls	r2, r2, #1
 80121ee:	3101      	adds	r1, #1
 80121f0:	e7f0      	b.n	80121d4 <__s2b+0x18>
 80121f2:	9b08      	ldr	r3, [sp, #32]
 80121f4:	6143      	str	r3, [r0, #20]
 80121f6:	2d09      	cmp	r5, #9
 80121f8:	f04f 0301 	mov.w	r3, #1
 80121fc:	6103      	str	r3, [r0, #16]
 80121fe:	dd16      	ble.n	801222e <__s2b+0x72>
 8012200:	f104 0909 	add.w	r9, r4, #9
 8012204:	46c8      	mov	r8, r9
 8012206:	442c      	add	r4, r5
 8012208:	f818 3b01 	ldrb.w	r3, [r8], #1
 801220c:	4601      	mov	r1, r0
 801220e:	3b30      	subs	r3, #48	; 0x30
 8012210:	220a      	movs	r2, #10
 8012212:	4630      	mov	r0, r6
 8012214:	f7ff ff8c 	bl	8012130 <__multadd>
 8012218:	45a0      	cmp	r8, r4
 801221a:	d1f5      	bne.n	8012208 <__s2b+0x4c>
 801221c:	f1a5 0408 	sub.w	r4, r5, #8
 8012220:	444c      	add	r4, r9
 8012222:	1b2d      	subs	r5, r5, r4
 8012224:	1963      	adds	r3, r4, r5
 8012226:	42bb      	cmp	r3, r7
 8012228:	db04      	blt.n	8012234 <__s2b+0x78>
 801222a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801222e:	340a      	adds	r4, #10
 8012230:	2509      	movs	r5, #9
 8012232:	e7f6      	b.n	8012222 <__s2b+0x66>
 8012234:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012238:	4601      	mov	r1, r0
 801223a:	3b30      	subs	r3, #48	; 0x30
 801223c:	220a      	movs	r2, #10
 801223e:	4630      	mov	r0, r6
 8012240:	f7ff ff76 	bl	8012130 <__multadd>
 8012244:	e7ee      	b.n	8012224 <__s2b+0x68>
 8012246:	bf00      	nop
 8012248:	08014aef 	.word	0x08014aef
 801224c:	08014bdc 	.word	0x08014bdc

08012250 <__hi0bits>:
 8012250:	0c03      	lsrs	r3, r0, #16
 8012252:	041b      	lsls	r3, r3, #16
 8012254:	b9d3      	cbnz	r3, 801228c <__hi0bits+0x3c>
 8012256:	0400      	lsls	r0, r0, #16
 8012258:	2310      	movs	r3, #16
 801225a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801225e:	bf04      	itt	eq
 8012260:	0200      	lsleq	r0, r0, #8
 8012262:	3308      	addeq	r3, #8
 8012264:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012268:	bf04      	itt	eq
 801226a:	0100      	lsleq	r0, r0, #4
 801226c:	3304      	addeq	r3, #4
 801226e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012272:	bf04      	itt	eq
 8012274:	0080      	lsleq	r0, r0, #2
 8012276:	3302      	addeq	r3, #2
 8012278:	2800      	cmp	r0, #0
 801227a:	db05      	blt.n	8012288 <__hi0bits+0x38>
 801227c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012280:	f103 0301 	add.w	r3, r3, #1
 8012284:	bf08      	it	eq
 8012286:	2320      	moveq	r3, #32
 8012288:	4618      	mov	r0, r3
 801228a:	4770      	bx	lr
 801228c:	2300      	movs	r3, #0
 801228e:	e7e4      	b.n	801225a <__hi0bits+0xa>

08012290 <__lo0bits>:
 8012290:	6803      	ldr	r3, [r0, #0]
 8012292:	f013 0207 	ands.w	r2, r3, #7
 8012296:	4601      	mov	r1, r0
 8012298:	d00b      	beq.n	80122b2 <__lo0bits+0x22>
 801229a:	07da      	lsls	r2, r3, #31
 801229c:	d423      	bmi.n	80122e6 <__lo0bits+0x56>
 801229e:	0798      	lsls	r0, r3, #30
 80122a0:	bf49      	itett	mi
 80122a2:	085b      	lsrmi	r3, r3, #1
 80122a4:	089b      	lsrpl	r3, r3, #2
 80122a6:	2001      	movmi	r0, #1
 80122a8:	600b      	strmi	r3, [r1, #0]
 80122aa:	bf5c      	itt	pl
 80122ac:	600b      	strpl	r3, [r1, #0]
 80122ae:	2002      	movpl	r0, #2
 80122b0:	4770      	bx	lr
 80122b2:	b298      	uxth	r0, r3
 80122b4:	b9a8      	cbnz	r0, 80122e2 <__lo0bits+0x52>
 80122b6:	0c1b      	lsrs	r3, r3, #16
 80122b8:	2010      	movs	r0, #16
 80122ba:	b2da      	uxtb	r2, r3
 80122bc:	b90a      	cbnz	r2, 80122c2 <__lo0bits+0x32>
 80122be:	3008      	adds	r0, #8
 80122c0:	0a1b      	lsrs	r3, r3, #8
 80122c2:	071a      	lsls	r2, r3, #28
 80122c4:	bf04      	itt	eq
 80122c6:	091b      	lsreq	r3, r3, #4
 80122c8:	3004      	addeq	r0, #4
 80122ca:	079a      	lsls	r2, r3, #30
 80122cc:	bf04      	itt	eq
 80122ce:	089b      	lsreq	r3, r3, #2
 80122d0:	3002      	addeq	r0, #2
 80122d2:	07da      	lsls	r2, r3, #31
 80122d4:	d403      	bmi.n	80122de <__lo0bits+0x4e>
 80122d6:	085b      	lsrs	r3, r3, #1
 80122d8:	f100 0001 	add.w	r0, r0, #1
 80122dc:	d005      	beq.n	80122ea <__lo0bits+0x5a>
 80122de:	600b      	str	r3, [r1, #0]
 80122e0:	4770      	bx	lr
 80122e2:	4610      	mov	r0, r2
 80122e4:	e7e9      	b.n	80122ba <__lo0bits+0x2a>
 80122e6:	2000      	movs	r0, #0
 80122e8:	4770      	bx	lr
 80122ea:	2020      	movs	r0, #32
 80122ec:	4770      	bx	lr
	...

080122f0 <__i2b>:
 80122f0:	b510      	push	{r4, lr}
 80122f2:	460c      	mov	r4, r1
 80122f4:	2101      	movs	r1, #1
 80122f6:	f7ff feb9 	bl	801206c <_Balloc>
 80122fa:	4602      	mov	r2, r0
 80122fc:	b928      	cbnz	r0, 801230a <__i2b+0x1a>
 80122fe:	4b05      	ldr	r3, [pc, #20]	; (8012314 <__i2b+0x24>)
 8012300:	4805      	ldr	r0, [pc, #20]	; (8012318 <__i2b+0x28>)
 8012302:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012306:	f001 fb77 	bl	80139f8 <__assert_func>
 801230a:	2301      	movs	r3, #1
 801230c:	6144      	str	r4, [r0, #20]
 801230e:	6103      	str	r3, [r0, #16]
 8012310:	bd10      	pop	{r4, pc}
 8012312:	bf00      	nop
 8012314:	08014aef 	.word	0x08014aef
 8012318:	08014bdc 	.word	0x08014bdc

0801231c <__multiply>:
 801231c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012320:	4691      	mov	r9, r2
 8012322:	690a      	ldr	r2, [r1, #16]
 8012324:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012328:	429a      	cmp	r2, r3
 801232a:	bfb8      	it	lt
 801232c:	460b      	movlt	r3, r1
 801232e:	460c      	mov	r4, r1
 8012330:	bfbc      	itt	lt
 8012332:	464c      	movlt	r4, r9
 8012334:	4699      	movlt	r9, r3
 8012336:	6927      	ldr	r7, [r4, #16]
 8012338:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801233c:	68a3      	ldr	r3, [r4, #8]
 801233e:	6861      	ldr	r1, [r4, #4]
 8012340:	eb07 060a 	add.w	r6, r7, sl
 8012344:	42b3      	cmp	r3, r6
 8012346:	b085      	sub	sp, #20
 8012348:	bfb8      	it	lt
 801234a:	3101      	addlt	r1, #1
 801234c:	f7ff fe8e 	bl	801206c <_Balloc>
 8012350:	b930      	cbnz	r0, 8012360 <__multiply+0x44>
 8012352:	4602      	mov	r2, r0
 8012354:	4b44      	ldr	r3, [pc, #272]	; (8012468 <__multiply+0x14c>)
 8012356:	4845      	ldr	r0, [pc, #276]	; (801246c <__multiply+0x150>)
 8012358:	f240 115d 	movw	r1, #349	; 0x15d
 801235c:	f001 fb4c 	bl	80139f8 <__assert_func>
 8012360:	f100 0514 	add.w	r5, r0, #20
 8012364:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012368:	462b      	mov	r3, r5
 801236a:	2200      	movs	r2, #0
 801236c:	4543      	cmp	r3, r8
 801236e:	d321      	bcc.n	80123b4 <__multiply+0x98>
 8012370:	f104 0314 	add.w	r3, r4, #20
 8012374:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012378:	f109 0314 	add.w	r3, r9, #20
 801237c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012380:	9202      	str	r2, [sp, #8]
 8012382:	1b3a      	subs	r2, r7, r4
 8012384:	3a15      	subs	r2, #21
 8012386:	f022 0203 	bic.w	r2, r2, #3
 801238a:	3204      	adds	r2, #4
 801238c:	f104 0115 	add.w	r1, r4, #21
 8012390:	428f      	cmp	r7, r1
 8012392:	bf38      	it	cc
 8012394:	2204      	movcc	r2, #4
 8012396:	9201      	str	r2, [sp, #4]
 8012398:	9a02      	ldr	r2, [sp, #8]
 801239a:	9303      	str	r3, [sp, #12]
 801239c:	429a      	cmp	r2, r3
 801239e:	d80c      	bhi.n	80123ba <__multiply+0x9e>
 80123a0:	2e00      	cmp	r6, #0
 80123a2:	dd03      	ble.n	80123ac <__multiply+0x90>
 80123a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d05a      	beq.n	8012462 <__multiply+0x146>
 80123ac:	6106      	str	r6, [r0, #16]
 80123ae:	b005      	add	sp, #20
 80123b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b4:	f843 2b04 	str.w	r2, [r3], #4
 80123b8:	e7d8      	b.n	801236c <__multiply+0x50>
 80123ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80123be:	f1ba 0f00 	cmp.w	sl, #0
 80123c2:	d024      	beq.n	801240e <__multiply+0xf2>
 80123c4:	f104 0e14 	add.w	lr, r4, #20
 80123c8:	46a9      	mov	r9, r5
 80123ca:	f04f 0c00 	mov.w	ip, #0
 80123ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80123d2:	f8d9 1000 	ldr.w	r1, [r9]
 80123d6:	fa1f fb82 	uxth.w	fp, r2
 80123da:	b289      	uxth	r1, r1
 80123dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80123e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80123e4:	f8d9 2000 	ldr.w	r2, [r9]
 80123e8:	4461      	add	r1, ip
 80123ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80123ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80123f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80123f6:	b289      	uxth	r1, r1
 80123f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80123fc:	4577      	cmp	r7, lr
 80123fe:	f849 1b04 	str.w	r1, [r9], #4
 8012402:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012406:	d8e2      	bhi.n	80123ce <__multiply+0xb2>
 8012408:	9a01      	ldr	r2, [sp, #4]
 801240a:	f845 c002 	str.w	ip, [r5, r2]
 801240e:	9a03      	ldr	r2, [sp, #12]
 8012410:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012414:	3304      	adds	r3, #4
 8012416:	f1b9 0f00 	cmp.w	r9, #0
 801241a:	d020      	beq.n	801245e <__multiply+0x142>
 801241c:	6829      	ldr	r1, [r5, #0]
 801241e:	f104 0c14 	add.w	ip, r4, #20
 8012422:	46ae      	mov	lr, r5
 8012424:	f04f 0a00 	mov.w	sl, #0
 8012428:	f8bc b000 	ldrh.w	fp, [ip]
 801242c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012430:	fb09 220b 	mla	r2, r9, fp, r2
 8012434:	4492      	add	sl, r2
 8012436:	b289      	uxth	r1, r1
 8012438:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801243c:	f84e 1b04 	str.w	r1, [lr], #4
 8012440:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012444:	f8be 1000 	ldrh.w	r1, [lr]
 8012448:	0c12      	lsrs	r2, r2, #16
 801244a:	fb09 1102 	mla	r1, r9, r2, r1
 801244e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012452:	4567      	cmp	r7, ip
 8012454:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012458:	d8e6      	bhi.n	8012428 <__multiply+0x10c>
 801245a:	9a01      	ldr	r2, [sp, #4]
 801245c:	50a9      	str	r1, [r5, r2]
 801245e:	3504      	adds	r5, #4
 8012460:	e79a      	b.n	8012398 <__multiply+0x7c>
 8012462:	3e01      	subs	r6, #1
 8012464:	e79c      	b.n	80123a0 <__multiply+0x84>
 8012466:	bf00      	nop
 8012468:	08014aef 	.word	0x08014aef
 801246c:	08014bdc 	.word	0x08014bdc

08012470 <__pow5mult>:
 8012470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012474:	4615      	mov	r5, r2
 8012476:	f012 0203 	ands.w	r2, r2, #3
 801247a:	4606      	mov	r6, r0
 801247c:	460f      	mov	r7, r1
 801247e:	d007      	beq.n	8012490 <__pow5mult+0x20>
 8012480:	4c25      	ldr	r4, [pc, #148]	; (8012518 <__pow5mult+0xa8>)
 8012482:	3a01      	subs	r2, #1
 8012484:	2300      	movs	r3, #0
 8012486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801248a:	f7ff fe51 	bl	8012130 <__multadd>
 801248e:	4607      	mov	r7, r0
 8012490:	10ad      	asrs	r5, r5, #2
 8012492:	d03d      	beq.n	8012510 <__pow5mult+0xa0>
 8012494:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012496:	b97c      	cbnz	r4, 80124b8 <__pow5mult+0x48>
 8012498:	2010      	movs	r0, #16
 801249a:	f7ff fdcd 	bl	8012038 <malloc>
 801249e:	4602      	mov	r2, r0
 80124a0:	6270      	str	r0, [r6, #36]	; 0x24
 80124a2:	b928      	cbnz	r0, 80124b0 <__pow5mult+0x40>
 80124a4:	4b1d      	ldr	r3, [pc, #116]	; (801251c <__pow5mult+0xac>)
 80124a6:	481e      	ldr	r0, [pc, #120]	; (8012520 <__pow5mult+0xb0>)
 80124a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80124ac:	f001 faa4 	bl	80139f8 <__assert_func>
 80124b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80124b4:	6004      	str	r4, [r0, #0]
 80124b6:	60c4      	str	r4, [r0, #12]
 80124b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80124bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124c0:	b94c      	cbnz	r4, 80124d6 <__pow5mult+0x66>
 80124c2:	f240 2171 	movw	r1, #625	; 0x271
 80124c6:	4630      	mov	r0, r6
 80124c8:	f7ff ff12 	bl	80122f0 <__i2b>
 80124cc:	2300      	movs	r3, #0
 80124ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80124d2:	4604      	mov	r4, r0
 80124d4:	6003      	str	r3, [r0, #0]
 80124d6:	f04f 0900 	mov.w	r9, #0
 80124da:	07eb      	lsls	r3, r5, #31
 80124dc:	d50a      	bpl.n	80124f4 <__pow5mult+0x84>
 80124de:	4639      	mov	r1, r7
 80124e0:	4622      	mov	r2, r4
 80124e2:	4630      	mov	r0, r6
 80124e4:	f7ff ff1a 	bl	801231c <__multiply>
 80124e8:	4639      	mov	r1, r7
 80124ea:	4680      	mov	r8, r0
 80124ec:	4630      	mov	r0, r6
 80124ee:	f7ff fdfd 	bl	80120ec <_Bfree>
 80124f2:	4647      	mov	r7, r8
 80124f4:	106d      	asrs	r5, r5, #1
 80124f6:	d00b      	beq.n	8012510 <__pow5mult+0xa0>
 80124f8:	6820      	ldr	r0, [r4, #0]
 80124fa:	b938      	cbnz	r0, 801250c <__pow5mult+0x9c>
 80124fc:	4622      	mov	r2, r4
 80124fe:	4621      	mov	r1, r4
 8012500:	4630      	mov	r0, r6
 8012502:	f7ff ff0b 	bl	801231c <__multiply>
 8012506:	6020      	str	r0, [r4, #0]
 8012508:	f8c0 9000 	str.w	r9, [r0]
 801250c:	4604      	mov	r4, r0
 801250e:	e7e4      	b.n	80124da <__pow5mult+0x6a>
 8012510:	4638      	mov	r0, r7
 8012512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012516:	bf00      	nop
 8012518:	08014d28 	.word	0x08014d28
 801251c:	08014a7d 	.word	0x08014a7d
 8012520:	08014bdc 	.word	0x08014bdc

08012524 <__lshift>:
 8012524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012528:	460c      	mov	r4, r1
 801252a:	6849      	ldr	r1, [r1, #4]
 801252c:	6923      	ldr	r3, [r4, #16]
 801252e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012532:	68a3      	ldr	r3, [r4, #8]
 8012534:	4607      	mov	r7, r0
 8012536:	4691      	mov	r9, r2
 8012538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801253c:	f108 0601 	add.w	r6, r8, #1
 8012540:	42b3      	cmp	r3, r6
 8012542:	db0b      	blt.n	801255c <__lshift+0x38>
 8012544:	4638      	mov	r0, r7
 8012546:	f7ff fd91 	bl	801206c <_Balloc>
 801254a:	4605      	mov	r5, r0
 801254c:	b948      	cbnz	r0, 8012562 <__lshift+0x3e>
 801254e:	4602      	mov	r2, r0
 8012550:	4b2a      	ldr	r3, [pc, #168]	; (80125fc <__lshift+0xd8>)
 8012552:	482b      	ldr	r0, [pc, #172]	; (8012600 <__lshift+0xdc>)
 8012554:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012558:	f001 fa4e 	bl	80139f8 <__assert_func>
 801255c:	3101      	adds	r1, #1
 801255e:	005b      	lsls	r3, r3, #1
 8012560:	e7ee      	b.n	8012540 <__lshift+0x1c>
 8012562:	2300      	movs	r3, #0
 8012564:	f100 0114 	add.w	r1, r0, #20
 8012568:	f100 0210 	add.w	r2, r0, #16
 801256c:	4618      	mov	r0, r3
 801256e:	4553      	cmp	r3, sl
 8012570:	db37      	blt.n	80125e2 <__lshift+0xbe>
 8012572:	6920      	ldr	r0, [r4, #16]
 8012574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012578:	f104 0314 	add.w	r3, r4, #20
 801257c:	f019 091f 	ands.w	r9, r9, #31
 8012580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012584:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012588:	d02f      	beq.n	80125ea <__lshift+0xc6>
 801258a:	f1c9 0e20 	rsb	lr, r9, #32
 801258e:	468a      	mov	sl, r1
 8012590:	f04f 0c00 	mov.w	ip, #0
 8012594:	681a      	ldr	r2, [r3, #0]
 8012596:	fa02 f209 	lsl.w	r2, r2, r9
 801259a:	ea42 020c 	orr.w	r2, r2, ip
 801259e:	f84a 2b04 	str.w	r2, [sl], #4
 80125a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80125a6:	4298      	cmp	r0, r3
 80125a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80125ac:	d8f2      	bhi.n	8012594 <__lshift+0x70>
 80125ae:	1b03      	subs	r3, r0, r4
 80125b0:	3b15      	subs	r3, #21
 80125b2:	f023 0303 	bic.w	r3, r3, #3
 80125b6:	3304      	adds	r3, #4
 80125b8:	f104 0215 	add.w	r2, r4, #21
 80125bc:	4290      	cmp	r0, r2
 80125be:	bf38      	it	cc
 80125c0:	2304      	movcc	r3, #4
 80125c2:	f841 c003 	str.w	ip, [r1, r3]
 80125c6:	f1bc 0f00 	cmp.w	ip, #0
 80125ca:	d001      	beq.n	80125d0 <__lshift+0xac>
 80125cc:	f108 0602 	add.w	r6, r8, #2
 80125d0:	3e01      	subs	r6, #1
 80125d2:	4638      	mov	r0, r7
 80125d4:	612e      	str	r6, [r5, #16]
 80125d6:	4621      	mov	r1, r4
 80125d8:	f7ff fd88 	bl	80120ec <_Bfree>
 80125dc:	4628      	mov	r0, r5
 80125de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80125e6:	3301      	adds	r3, #1
 80125e8:	e7c1      	b.n	801256e <__lshift+0x4a>
 80125ea:	3904      	subs	r1, #4
 80125ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80125f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80125f4:	4298      	cmp	r0, r3
 80125f6:	d8f9      	bhi.n	80125ec <__lshift+0xc8>
 80125f8:	e7ea      	b.n	80125d0 <__lshift+0xac>
 80125fa:	bf00      	nop
 80125fc:	08014aef 	.word	0x08014aef
 8012600:	08014bdc 	.word	0x08014bdc

08012604 <__mcmp>:
 8012604:	b530      	push	{r4, r5, lr}
 8012606:	6902      	ldr	r2, [r0, #16]
 8012608:	690c      	ldr	r4, [r1, #16]
 801260a:	1b12      	subs	r2, r2, r4
 801260c:	d10e      	bne.n	801262c <__mcmp+0x28>
 801260e:	f100 0314 	add.w	r3, r0, #20
 8012612:	3114      	adds	r1, #20
 8012614:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012618:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801261c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012620:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012624:	42a5      	cmp	r5, r4
 8012626:	d003      	beq.n	8012630 <__mcmp+0x2c>
 8012628:	d305      	bcc.n	8012636 <__mcmp+0x32>
 801262a:	2201      	movs	r2, #1
 801262c:	4610      	mov	r0, r2
 801262e:	bd30      	pop	{r4, r5, pc}
 8012630:	4283      	cmp	r3, r0
 8012632:	d3f3      	bcc.n	801261c <__mcmp+0x18>
 8012634:	e7fa      	b.n	801262c <__mcmp+0x28>
 8012636:	f04f 32ff 	mov.w	r2, #4294967295
 801263a:	e7f7      	b.n	801262c <__mcmp+0x28>

0801263c <__mdiff>:
 801263c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012640:	460c      	mov	r4, r1
 8012642:	4606      	mov	r6, r0
 8012644:	4611      	mov	r1, r2
 8012646:	4620      	mov	r0, r4
 8012648:	4690      	mov	r8, r2
 801264a:	f7ff ffdb 	bl	8012604 <__mcmp>
 801264e:	1e05      	subs	r5, r0, #0
 8012650:	d110      	bne.n	8012674 <__mdiff+0x38>
 8012652:	4629      	mov	r1, r5
 8012654:	4630      	mov	r0, r6
 8012656:	f7ff fd09 	bl	801206c <_Balloc>
 801265a:	b930      	cbnz	r0, 801266a <__mdiff+0x2e>
 801265c:	4b3a      	ldr	r3, [pc, #232]	; (8012748 <__mdiff+0x10c>)
 801265e:	4602      	mov	r2, r0
 8012660:	f240 2132 	movw	r1, #562	; 0x232
 8012664:	4839      	ldr	r0, [pc, #228]	; (801274c <__mdiff+0x110>)
 8012666:	f001 f9c7 	bl	80139f8 <__assert_func>
 801266a:	2301      	movs	r3, #1
 801266c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012674:	bfa4      	itt	ge
 8012676:	4643      	movge	r3, r8
 8012678:	46a0      	movge	r8, r4
 801267a:	4630      	mov	r0, r6
 801267c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012680:	bfa6      	itte	ge
 8012682:	461c      	movge	r4, r3
 8012684:	2500      	movge	r5, #0
 8012686:	2501      	movlt	r5, #1
 8012688:	f7ff fcf0 	bl	801206c <_Balloc>
 801268c:	b920      	cbnz	r0, 8012698 <__mdiff+0x5c>
 801268e:	4b2e      	ldr	r3, [pc, #184]	; (8012748 <__mdiff+0x10c>)
 8012690:	4602      	mov	r2, r0
 8012692:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012696:	e7e5      	b.n	8012664 <__mdiff+0x28>
 8012698:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801269c:	6926      	ldr	r6, [r4, #16]
 801269e:	60c5      	str	r5, [r0, #12]
 80126a0:	f104 0914 	add.w	r9, r4, #20
 80126a4:	f108 0514 	add.w	r5, r8, #20
 80126a8:	f100 0e14 	add.w	lr, r0, #20
 80126ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80126b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80126b4:	f108 0210 	add.w	r2, r8, #16
 80126b8:	46f2      	mov	sl, lr
 80126ba:	2100      	movs	r1, #0
 80126bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80126c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80126c4:	fa1f f883 	uxth.w	r8, r3
 80126c8:	fa11 f18b 	uxtah	r1, r1, fp
 80126cc:	0c1b      	lsrs	r3, r3, #16
 80126ce:	eba1 0808 	sub.w	r8, r1, r8
 80126d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80126d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80126da:	fa1f f888 	uxth.w	r8, r8
 80126de:	1419      	asrs	r1, r3, #16
 80126e0:	454e      	cmp	r6, r9
 80126e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80126e6:	f84a 3b04 	str.w	r3, [sl], #4
 80126ea:	d8e7      	bhi.n	80126bc <__mdiff+0x80>
 80126ec:	1b33      	subs	r3, r6, r4
 80126ee:	3b15      	subs	r3, #21
 80126f0:	f023 0303 	bic.w	r3, r3, #3
 80126f4:	3304      	adds	r3, #4
 80126f6:	3415      	adds	r4, #21
 80126f8:	42a6      	cmp	r6, r4
 80126fa:	bf38      	it	cc
 80126fc:	2304      	movcc	r3, #4
 80126fe:	441d      	add	r5, r3
 8012700:	4473      	add	r3, lr
 8012702:	469e      	mov	lr, r3
 8012704:	462e      	mov	r6, r5
 8012706:	4566      	cmp	r6, ip
 8012708:	d30e      	bcc.n	8012728 <__mdiff+0xec>
 801270a:	f10c 0203 	add.w	r2, ip, #3
 801270e:	1b52      	subs	r2, r2, r5
 8012710:	f022 0203 	bic.w	r2, r2, #3
 8012714:	3d03      	subs	r5, #3
 8012716:	45ac      	cmp	ip, r5
 8012718:	bf38      	it	cc
 801271a:	2200      	movcc	r2, #0
 801271c:	441a      	add	r2, r3
 801271e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012722:	b17b      	cbz	r3, 8012744 <__mdiff+0x108>
 8012724:	6107      	str	r7, [r0, #16]
 8012726:	e7a3      	b.n	8012670 <__mdiff+0x34>
 8012728:	f856 8b04 	ldr.w	r8, [r6], #4
 801272c:	fa11 f288 	uxtah	r2, r1, r8
 8012730:	1414      	asrs	r4, r2, #16
 8012732:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012736:	b292      	uxth	r2, r2
 8012738:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801273c:	f84e 2b04 	str.w	r2, [lr], #4
 8012740:	1421      	asrs	r1, r4, #16
 8012742:	e7e0      	b.n	8012706 <__mdiff+0xca>
 8012744:	3f01      	subs	r7, #1
 8012746:	e7ea      	b.n	801271e <__mdiff+0xe2>
 8012748:	08014aef 	.word	0x08014aef
 801274c:	08014bdc 	.word	0x08014bdc

08012750 <__ulp>:
 8012750:	b082      	sub	sp, #8
 8012752:	ed8d 0b00 	vstr	d0, [sp]
 8012756:	9b01      	ldr	r3, [sp, #4]
 8012758:	4912      	ldr	r1, [pc, #72]	; (80127a4 <__ulp+0x54>)
 801275a:	4019      	ands	r1, r3
 801275c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012760:	2900      	cmp	r1, #0
 8012762:	dd05      	ble.n	8012770 <__ulp+0x20>
 8012764:	2200      	movs	r2, #0
 8012766:	460b      	mov	r3, r1
 8012768:	ec43 2b10 	vmov	d0, r2, r3
 801276c:	b002      	add	sp, #8
 801276e:	4770      	bx	lr
 8012770:	4249      	negs	r1, r1
 8012772:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012776:	ea4f 5021 	mov.w	r0, r1, asr #20
 801277a:	f04f 0200 	mov.w	r2, #0
 801277e:	f04f 0300 	mov.w	r3, #0
 8012782:	da04      	bge.n	801278e <__ulp+0x3e>
 8012784:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012788:	fa41 f300 	asr.w	r3, r1, r0
 801278c:	e7ec      	b.n	8012768 <__ulp+0x18>
 801278e:	f1a0 0114 	sub.w	r1, r0, #20
 8012792:	291e      	cmp	r1, #30
 8012794:	bfda      	itte	le
 8012796:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801279a:	fa20 f101 	lsrle.w	r1, r0, r1
 801279e:	2101      	movgt	r1, #1
 80127a0:	460a      	mov	r2, r1
 80127a2:	e7e1      	b.n	8012768 <__ulp+0x18>
 80127a4:	7ff00000 	.word	0x7ff00000

080127a8 <__b2d>:
 80127a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127aa:	6905      	ldr	r5, [r0, #16]
 80127ac:	f100 0714 	add.w	r7, r0, #20
 80127b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80127b4:	1f2e      	subs	r6, r5, #4
 80127b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80127ba:	4620      	mov	r0, r4
 80127bc:	f7ff fd48 	bl	8012250 <__hi0bits>
 80127c0:	f1c0 0320 	rsb	r3, r0, #32
 80127c4:	280a      	cmp	r0, #10
 80127c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012844 <__b2d+0x9c>
 80127ca:	600b      	str	r3, [r1, #0]
 80127cc:	dc14      	bgt.n	80127f8 <__b2d+0x50>
 80127ce:	f1c0 0e0b 	rsb	lr, r0, #11
 80127d2:	fa24 f10e 	lsr.w	r1, r4, lr
 80127d6:	42b7      	cmp	r7, r6
 80127d8:	ea41 030c 	orr.w	r3, r1, ip
 80127dc:	bf34      	ite	cc
 80127de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80127e2:	2100      	movcs	r1, #0
 80127e4:	3015      	adds	r0, #21
 80127e6:	fa04 f000 	lsl.w	r0, r4, r0
 80127ea:	fa21 f10e 	lsr.w	r1, r1, lr
 80127ee:	ea40 0201 	orr.w	r2, r0, r1
 80127f2:	ec43 2b10 	vmov	d0, r2, r3
 80127f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127f8:	42b7      	cmp	r7, r6
 80127fa:	bf3a      	itte	cc
 80127fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012800:	f1a5 0608 	subcc.w	r6, r5, #8
 8012804:	2100      	movcs	r1, #0
 8012806:	380b      	subs	r0, #11
 8012808:	d017      	beq.n	801283a <__b2d+0x92>
 801280a:	f1c0 0c20 	rsb	ip, r0, #32
 801280e:	fa04 f500 	lsl.w	r5, r4, r0
 8012812:	42be      	cmp	r6, r7
 8012814:	fa21 f40c 	lsr.w	r4, r1, ip
 8012818:	ea45 0504 	orr.w	r5, r5, r4
 801281c:	bf8c      	ite	hi
 801281e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012822:	2400      	movls	r4, #0
 8012824:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012828:	fa01 f000 	lsl.w	r0, r1, r0
 801282c:	fa24 f40c 	lsr.w	r4, r4, ip
 8012830:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012834:	ea40 0204 	orr.w	r2, r0, r4
 8012838:	e7db      	b.n	80127f2 <__b2d+0x4a>
 801283a:	ea44 030c 	orr.w	r3, r4, ip
 801283e:	460a      	mov	r2, r1
 8012840:	e7d7      	b.n	80127f2 <__b2d+0x4a>
 8012842:	bf00      	nop
 8012844:	3ff00000 	.word	0x3ff00000

08012848 <__d2b>:
 8012848:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801284c:	4689      	mov	r9, r1
 801284e:	2101      	movs	r1, #1
 8012850:	ec57 6b10 	vmov	r6, r7, d0
 8012854:	4690      	mov	r8, r2
 8012856:	f7ff fc09 	bl	801206c <_Balloc>
 801285a:	4604      	mov	r4, r0
 801285c:	b930      	cbnz	r0, 801286c <__d2b+0x24>
 801285e:	4602      	mov	r2, r0
 8012860:	4b25      	ldr	r3, [pc, #148]	; (80128f8 <__d2b+0xb0>)
 8012862:	4826      	ldr	r0, [pc, #152]	; (80128fc <__d2b+0xb4>)
 8012864:	f240 310a 	movw	r1, #778	; 0x30a
 8012868:	f001 f8c6 	bl	80139f8 <__assert_func>
 801286c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012870:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012874:	bb35      	cbnz	r5, 80128c4 <__d2b+0x7c>
 8012876:	2e00      	cmp	r6, #0
 8012878:	9301      	str	r3, [sp, #4]
 801287a:	d028      	beq.n	80128ce <__d2b+0x86>
 801287c:	4668      	mov	r0, sp
 801287e:	9600      	str	r6, [sp, #0]
 8012880:	f7ff fd06 	bl	8012290 <__lo0bits>
 8012884:	9900      	ldr	r1, [sp, #0]
 8012886:	b300      	cbz	r0, 80128ca <__d2b+0x82>
 8012888:	9a01      	ldr	r2, [sp, #4]
 801288a:	f1c0 0320 	rsb	r3, r0, #32
 801288e:	fa02 f303 	lsl.w	r3, r2, r3
 8012892:	430b      	orrs	r3, r1
 8012894:	40c2      	lsrs	r2, r0
 8012896:	6163      	str	r3, [r4, #20]
 8012898:	9201      	str	r2, [sp, #4]
 801289a:	9b01      	ldr	r3, [sp, #4]
 801289c:	61a3      	str	r3, [r4, #24]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	bf14      	ite	ne
 80128a2:	2202      	movne	r2, #2
 80128a4:	2201      	moveq	r2, #1
 80128a6:	6122      	str	r2, [r4, #16]
 80128a8:	b1d5      	cbz	r5, 80128e0 <__d2b+0x98>
 80128aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80128ae:	4405      	add	r5, r0
 80128b0:	f8c9 5000 	str.w	r5, [r9]
 80128b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80128b8:	f8c8 0000 	str.w	r0, [r8]
 80128bc:	4620      	mov	r0, r4
 80128be:	b003      	add	sp, #12
 80128c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80128c8:	e7d5      	b.n	8012876 <__d2b+0x2e>
 80128ca:	6161      	str	r1, [r4, #20]
 80128cc:	e7e5      	b.n	801289a <__d2b+0x52>
 80128ce:	a801      	add	r0, sp, #4
 80128d0:	f7ff fcde 	bl	8012290 <__lo0bits>
 80128d4:	9b01      	ldr	r3, [sp, #4]
 80128d6:	6163      	str	r3, [r4, #20]
 80128d8:	2201      	movs	r2, #1
 80128da:	6122      	str	r2, [r4, #16]
 80128dc:	3020      	adds	r0, #32
 80128de:	e7e3      	b.n	80128a8 <__d2b+0x60>
 80128e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80128e8:	f8c9 0000 	str.w	r0, [r9]
 80128ec:	6918      	ldr	r0, [r3, #16]
 80128ee:	f7ff fcaf 	bl	8012250 <__hi0bits>
 80128f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128f6:	e7df      	b.n	80128b8 <__d2b+0x70>
 80128f8:	08014aef 	.word	0x08014aef
 80128fc:	08014bdc 	.word	0x08014bdc

08012900 <__ratio>:
 8012900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012904:	4688      	mov	r8, r1
 8012906:	4669      	mov	r1, sp
 8012908:	4681      	mov	r9, r0
 801290a:	f7ff ff4d 	bl	80127a8 <__b2d>
 801290e:	a901      	add	r1, sp, #4
 8012910:	4640      	mov	r0, r8
 8012912:	ec55 4b10 	vmov	r4, r5, d0
 8012916:	f7ff ff47 	bl	80127a8 <__b2d>
 801291a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801291e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012922:	eba3 0c02 	sub.w	ip, r3, r2
 8012926:	e9dd 3200 	ldrd	r3, r2, [sp]
 801292a:	1a9b      	subs	r3, r3, r2
 801292c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012930:	ec51 0b10 	vmov	r0, r1, d0
 8012934:	2b00      	cmp	r3, #0
 8012936:	bfd6      	itet	le
 8012938:	460a      	movle	r2, r1
 801293a:	462a      	movgt	r2, r5
 801293c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012940:	468b      	mov	fp, r1
 8012942:	462f      	mov	r7, r5
 8012944:	bfd4      	ite	le
 8012946:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801294a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801294e:	4620      	mov	r0, r4
 8012950:	ee10 2a10 	vmov	r2, s0
 8012954:	465b      	mov	r3, fp
 8012956:	4639      	mov	r1, r7
 8012958:	f7ed ff98 	bl	800088c <__aeabi_ddiv>
 801295c:	ec41 0b10 	vmov	d0, r0, r1
 8012960:	b003      	add	sp, #12
 8012962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012966 <__copybits>:
 8012966:	3901      	subs	r1, #1
 8012968:	b570      	push	{r4, r5, r6, lr}
 801296a:	1149      	asrs	r1, r1, #5
 801296c:	6914      	ldr	r4, [r2, #16]
 801296e:	3101      	adds	r1, #1
 8012970:	f102 0314 	add.w	r3, r2, #20
 8012974:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012978:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801297c:	1f05      	subs	r5, r0, #4
 801297e:	42a3      	cmp	r3, r4
 8012980:	d30c      	bcc.n	801299c <__copybits+0x36>
 8012982:	1aa3      	subs	r3, r4, r2
 8012984:	3b11      	subs	r3, #17
 8012986:	f023 0303 	bic.w	r3, r3, #3
 801298a:	3211      	adds	r2, #17
 801298c:	42a2      	cmp	r2, r4
 801298e:	bf88      	it	hi
 8012990:	2300      	movhi	r3, #0
 8012992:	4418      	add	r0, r3
 8012994:	2300      	movs	r3, #0
 8012996:	4288      	cmp	r0, r1
 8012998:	d305      	bcc.n	80129a6 <__copybits+0x40>
 801299a:	bd70      	pop	{r4, r5, r6, pc}
 801299c:	f853 6b04 	ldr.w	r6, [r3], #4
 80129a0:	f845 6f04 	str.w	r6, [r5, #4]!
 80129a4:	e7eb      	b.n	801297e <__copybits+0x18>
 80129a6:	f840 3b04 	str.w	r3, [r0], #4
 80129aa:	e7f4      	b.n	8012996 <__copybits+0x30>

080129ac <__any_on>:
 80129ac:	f100 0214 	add.w	r2, r0, #20
 80129b0:	6900      	ldr	r0, [r0, #16]
 80129b2:	114b      	asrs	r3, r1, #5
 80129b4:	4298      	cmp	r0, r3
 80129b6:	b510      	push	{r4, lr}
 80129b8:	db11      	blt.n	80129de <__any_on+0x32>
 80129ba:	dd0a      	ble.n	80129d2 <__any_on+0x26>
 80129bc:	f011 011f 	ands.w	r1, r1, #31
 80129c0:	d007      	beq.n	80129d2 <__any_on+0x26>
 80129c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80129c6:	fa24 f001 	lsr.w	r0, r4, r1
 80129ca:	fa00 f101 	lsl.w	r1, r0, r1
 80129ce:	428c      	cmp	r4, r1
 80129d0:	d10b      	bne.n	80129ea <__any_on+0x3e>
 80129d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d803      	bhi.n	80129e2 <__any_on+0x36>
 80129da:	2000      	movs	r0, #0
 80129dc:	bd10      	pop	{r4, pc}
 80129de:	4603      	mov	r3, r0
 80129e0:	e7f7      	b.n	80129d2 <__any_on+0x26>
 80129e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80129e6:	2900      	cmp	r1, #0
 80129e8:	d0f5      	beq.n	80129d6 <__any_on+0x2a>
 80129ea:	2001      	movs	r0, #1
 80129ec:	e7f6      	b.n	80129dc <__any_on+0x30>

080129ee <_calloc_r>:
 80129ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129f0:	fba1 2402 	umull	r2, r4, r1, r2
 80129f4:	b94c      	cbnz	r4, 8012a0a <_calloc_r+0x1c>
 80129f6:	4611      	mov	r1, r2
 80129f8:	9201      	str	r2, [sp, #4]
 80129fa:	f000 f87b 	bl	8012af4 <_malloc_r>
 80129fe:	9a01      	ldr	r2, [sp, #4]
 8012a00:	4605      	mov	r5, r0
 8012a02:	b930      	cbnz	r0, 8012a12 <_calloc_r+0x24>
 8012a04:	4628      	mov	r0, r5
 8012a06:	b003      	add	sp, #12
 8012a08:	bd30      	pop	{r4, r5, pc}
 8012a0a:	220c      	movs	r2, #12
 8012a0c:	6002      	str	r2, [r0, #0]
 8012a0e:	2500      	movs	r5, #0
 8012a10:	e7f8      	b.n	8012a04 <_calloc_r+0x16>
 8012a12:	4621      	mov	r1, r4
 8012a14:	f7fb ff6c 	bl	800e8f0 <memset>
 8012a18:	e7f4      	b.n	8012a04 <_calloc_r+0x16>
	...

08012a1c <_free_r>:
 8012a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a1e:	2900      	cmp	r1, #0
 8012a20:	d044      	beq.n	8012aac <_free_r+0x90>
 8012a22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a26:	9001      	str	r0, [sp, #4]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	f1a1 0404 	sub.w	r4, r1, #4
 8012a2e:	bfb8      	it	lt
 8012a30:	18e4      	addlt	r4, r4, r3
 8012a32:	f001 f833 	bl	8013a9c <__malloc_lock>
 8012a36:	4a1e      	ldr	r2, [pc, #120]	; (8012ab0 <_free_r+0x94>)
 8012a38:	9801      	ldr	r0, [sp, #4]
 8012a3a:	6813      	ldr	r3, [r2, #0]
 8012a3c:	b933      	cbnz	r3, 8012a4c <_free_r+0x30>
 8012a3e:	6063      	str	r3, [r4, #4]
 8012a40:	6014      	str	r4, [r2, #0]
 8012a42:	b003      	add	sp, #12
 8012a44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a48:	f001 b82e 	b.w	8013aa8 <__malloc_unlock>
 8012a4c:	42a3      	cmp	r3, r4
 8012a4e:	d908      	bls.n	8012a62 <_free_r+0x46>
 8012a50:	6825      	ldr	r5, [r4, #0]
 8012a52:	1961      	adds	r1, r4, r5
 8012a54:	428b      	cmp	r3, r1
 8012a56:	bf01      	itttt	eq
 8012a58:	6819      	ldreq	r1, [r3, #0]
 8012a5a:	685b      	ldreq	r3, [r3, #4]
 8012a5c:	1949      	addeq	r1, r1, r5
 8012a5e:	6021      	streq	r1, [r4, #0]
 8012a60:	e7ed      	b.n	8012a3e <_free_r+0x22>
 8012a62:	461a      	mov	r2, r3
 8012a64:	685b      	ldr	r3, [r3, #4]
 8012a66:	b10b      	cbz	r3, 8012a6c <_free_r+0x50>
 8012a68:	42a3      	cmp	r3, r4
 8012a6a:	d9fa      	bls.n	8012a62 <_free_r+0x46>
 8012a6c:	6811      	ldr	r1, [r2, #0]
 8012a6e:	1855      	adds	r5, r2, r1
 8012a70:	42a5      	cmp	r5, r4
 8012a72:	d10b      	bne.n	8012a8c <_free_r+0x70>
 8012a74:	6824      	ldr	r4, [r4, #0]
 8012a76:	4421      	add	r1, r4
 8012a78:	1854      	adds	r4, r2, r1
 8012a7a:	42a3      	cmp	r3, r4
 8012a7c:	6011      	str	r1, [r2, #0]
 8012a7e:	d1e0      	bne.n	8012a42 <_free_r+0x26>
 8012a80:	681c      	ldr	r4, [r3, #0]
 8012a82:	685b      	ldr	r3, [r3, #4]
 8012a84:	6053      	str	r3, [r2, #4]
 8012a86:	4421      	add	r1, r4
 8012a88:	6011      	str	r1, [r2, #0]
 8012a8a:	e7da      	b.n	8012a42 <_free_r+0x26>
 8012a8c:	d902      	bls.n	8012a94 <_free_r+0x78>
 8012a8e:	230c      	movs	r3, #12
 8012a90:	6003      	str	r3, [r0, #0]
 8012a92:	e7d6      	b.n	8012a42 <_free_r+0x26>
 8012a94:	6825      	ldr	r5, [r4, #0]
 8012a96:	1961      	adds	r1, r4, r5
 8012a98:	428b      	cmp	r3, r1
 8012a9a:	bf04      	itt	eq
 8012a9c:	6819      	ldreq	r1, [r3, #0]
 8012a9e:	685b      	ldreq	r3, [r3, #4]
 8012aa0:	6063      	str	r3, [r4, #4]
 8012aa2:	bf04      	itt	eq
 8012aa4:	1949      	addeq	r1, r1, r5
 8012aa6:	6021      	streq	r1, [r4, #0]
 8012aa8:	6054      	str	r4, [r2, #4]
 8012aaa:	e7ca      	b.n	8012a42 <_free_r+0x26>
 8012aac:	b003      	add	sp, #12
 8012aae:	bd30      	pop	{r4, r5, pc}
 8012ab0:	20003144 	.word	0x20003144

08012ab4 <sbrk_aligned>:
 8012ab4:	b570      	push	{r4, r5, r6, lr}
 8012ab6:	4e0e      	ldr	r6, [pc, #56]	; (8012af0 <sbrk_aligned+0x3c>)
 8012ab8:	460c      	mov	r4, r1
 8012aba:	6831      	ldr	r1, [r6, #0]
 8012abc:	4605      	mov	r5, r0
 8012abe:	b911      	cbnz	r1, 8012ac6 <sbrk_aligned+0x12>
 8012ac0:	f000 fe82 	bl	80137c8 <_sbrk_r>
 8012ac4:	6030      	str	r0, [r6, #0]
 8012ac6:	4621      	mov	r1, r4
 8012ac8:	4628      	mov	r0, r5
 8012aca:	f000 fe7d 	bl	80137c8 <_sbrk_r>
 8012ace:	1c43      	adds	r3, r0, #1
 8012ad0:	d00a      	beq.n	8012ae8 <sbrk_aligned+0x34>
 8012ad2:	1cc4      	adds	r4, r0, #3
 8012ad4:	f024 0403 	bic.w	r4, r4, #3
 8012ad8:	42a0      	cmp	r0, r4
 8012ada:	d007      	beq.n	8012aec <sbrk_aligned+0x38>
 8012adc:	1a21      	subs	r1, r4, r0
 8012ade:	4628      	mov	r0, r5
 8012ae0:	f000 fe72 	bl	80137c8 <_sbrk_r>
 8012ae4:	3001      	adds	r0, #1
 8012ae6:	d101      	bne.n	8012aec <sbrk_aligned+0x38>
 8012ae8:	f04f 34ff 	mov.w	r4, #4294967295
 8012aec:	4620      	mov	r0, r4
 8012aee:	bd70      	pop	{r4, r5, r6, pc}
 8012af0:	20003148 	.word	0x20003148

08012af4 <_malloc_r>:
 8012af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012af8:	1ccd      	adds	r5, r1, #3
 8012afa:	f025 0503 	bic.w	r5, r5, #3
 8012afe:	3508      	adds	r5, #8
 8012b00:	2d0c      	cmp	r5, #12
 8012b02:	bf38      	it	cc
 8012b04:	250c      	movcc	r5, #12
 8012b06:	2d00      	cmp	r5, #0
 8012b08:	4607      	mov	r7, r0
 8012b0a:	db01      	blt.n	8012b10 <_malloc_r+0x1c>
 8012b0c:	42a9      	cmp	r1, r5
 8012b0e:	d905      	bls.n	8012b1c <_malloc_r+0x28>
 8012b10:	230c      	movs	r3, #12
 8012b12:	603b      	str	r3, [r7, #0]
 8012b14:	2600      	movs	r6, #0
 8012b16:	4630      	mov	r0, r6
 8012b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b1c:	4e2e      	ldr	r6, [pc, #184]	; (8012bd8 <_malloc_r+0xe4>)
 8012b1e:	f000 ffbd 	bl	8013a9c <__malloc_lock>
 8012b22:	6833      	ldr	r3, [r6, #0]
 8012b24:	461c      	mov	r4, r3
 8012b26:	bb34      	cbnz	r4, 8012b76 <_malloc_r+0x82>
 8012b28:	4629      	mov	r1, r5
 8012b2a:	4638      	mov	r0, r7
 8012b2c:	f7ff ffc2 	bl	8012ab4 <sbrk_aligned>
 8012b30:	1c43      	adds	r3, r0, #1
 8012b32:	4604      	mov	r4, r0
 8012b34:	d14d      	bne.n	8012bd2 <_malloc_r+0xde>
 8012b36:	6834      	ldr	r4, [r6, #0]
 8012b38:	4626      	mov	r6, r4
 8012b3a:	2e00      	cmp	r6, #0
 8012b3c:	d140      	bne.n	8012bc0 <_malloc_r+0xcc>
 8012b3e:	6823      	ldr	r3, [r4, #0]
 8012b40:	4631      	mov	r1, r6
 8012b42:	4638      	mov	r0, r7
 8012b44:	eb04 0803 	add.w	r8, r4, r3
 8012b48:	f000 fe3e 	bl	80137c8 <_sbrk_r>
 8012b4c:	4580      	cmp	r8, r0
 8012b4e:	d13a      	bne.n	8012bc6 <_malloc_r+0xd2>
 8012b50:	6821      	ldr	r1, [r4, #0]
 8012b52:	3503      	adds	r5, #3
 8012b54:	1a6d      	subs	r5, r5, r1
 8012b56:	f025 0503 	bic.w	r5, r5, #3
 8012b5a:	3508      	adds	r5, #8
 8012b5c:	2d0c      	cmp	r5, #12
 8012b5e:	bf38      	it	cc
 8012b60:	250c      	movcc	r5, #12
 8012b62:	4629      	mov	r1, r5
 8012b64:	4638      	mov	r0, r7
 8012b66:	f7ff ffa5 	bl	8012ab4 <sbrk_aligned>
 8012b6a:	3001      	adds	r0, #1
 8012b6c:	d02b      	beq.n	8012bc6 <_malloc_r+0xd2>
 8012b6e:	6823      	ldr	r3, [r4, #0]
 8012b70:	442b      	add	r3, r5
 8012b72:	6023      	str	r3, [r4, #0]
 8012b74:	e00e      	b.n	8012b94 <_malloc_r+0xa0>
 8012b76:	6822      	ldr	r2, [r4, #0]
 8012b78:	1b52      	subs	r2, r2, r5
 8012b7a:	d41e      	bmi.n	8012bba <_malloc_r+0xc6>
 8012b7c:	2a0b      	cmp	r2, #11
 8012b7e:	d916      	bls.n	8012bae <_malloc_r+0xba>
 8012b80:	1961      	adds	r1, r4, r5
 8012b82:	42a3      	cmp	r3, r4
 8012b84:	6025      	str	r5, [r4, #0]
 8012b86:	bf18      	it	ne
 8012b88:	6059      	strne	r1, [r3, #4]
 8012b8a:	6863      	ldr	r3, [r4, #4]
 8012b8c:	bf08      	it	eq
 8012b8e:	6031      	streq	r1, [r6, #0]
 8012b90:	5162      	str	r2, [r4, r5]
 8012b92:	604b      	str	r3, [r1, #4]
 8012b94:	4638      	mov	r0, r7
 8012b96:	f104 060b 	add.w	r6, r4, #11
 8012b9a:	f000 ff85 	bl	8013aa8 <__malloc_unlock>
 8012b9e:	f026 0607 	bic.w	r6, r6, #7
 8012ba2:	1d23      	adds	r3, r4, #4
 8012ba4:	1af2      	subs	r2, r6, r3
 8012ba6:	d0b6      	beq.n	8012b16 <_malloc_r+0x22>
 8012ba8:	1b9b      	subs	r3, r3, r6
 8012baa:	50a3      	str	r3, [r4, r2]
 8012bac:	e7b3      	b.n	8012b16 <_malloc_r+0x22>
 8012bae:	6862      	ldr	r2, [r4, #4]
 8012bb0:	42a3      	cmp	r3, r4
 8012bb2:	bf0c      	ite	eq
 8012bb4:	6032      	streq	r2, [r6, #0]
 8012bb6:	605a      	strne	r2, [r3, #4]
 8012bb8:	e7ec      	b.n	8012b94 <_malloc_r+0xa0>
 8012bba:	4623      	mov	r3, r4
 8012bbc:	6864      	ldr	r4, [r4, #4]
 8012bbe:	e7b2      	b.n	8012b26 <_malloc_r+0x32>
 8012bc0:	4634      	mov	r4, r6
 8012bc2:	6876      	ldr	r6, [r6, #4]
 8012bc4:	e7b9      	b.n	8012b3a <_malloc_r+0x46>
 8012bc6:	230c      	movs	r3, #12
 8012bc8:	603b      	str	r3, [r7, #0]
 8012bca:	4638      	mov	r0, r7
 8012bcc:	f000 ff6c 	bl	8013aa8 <__malloc_unlock>
 8012bd0:	e7a1      	b.n	8012b16 <_malloc_r+0x22>
 8012bd2:	6025      	str	r5, [r4, #0]
 8012bd4:	e7de      	b.n	8012b94 <_malloc_r+0xa0>
 8012bd6:	bf00      	nop
 8012bd8:	20003144 	.word	0x20003144

08012bdc <__ssputs_r>:
 8012bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012be0:	688e      	ldr	r6, [r1, #8]
 8012be2:	429e      	cmp	r6, r3
 8012be4:	4682      	mov	sl, r0
 8012be6:	460c      	mov	r4, r1
 8012be8:	4690      	mov	r8, r2
 8012bea:	461f      	mov	r7, r3
 8012bec:	d838      	bhi.n	8012c60 <__ssputs_r+0x84>
 8012bee:	898a      	ldrh	r2, [r1, #12]
 8012bf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012bf4:	d032      	beq.n	8012c5c <__ssputs_r+0x80>
 8012bf6:	6825      	ldr	r5, [r4, #0]
 8012bf8:	6909      	ldr	r1, [r1, #16]
 8012bfa:	eba5 0901 	sub.w	r9, r5, r1
 8012bfe:	6965      	ldr	r5, [r4, #20]
 8012c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012c08:	3301      	adds	r3, #1
 8012c0a:	444b      	add	r3, r9
 8012c0c:	106d      	asrs	r5, r5, #1
 8012c0e:	429d      	cmp	r5, r3
 8012c10:	bf38      	it	cc
 8012c12:	461d      	movcc	r5, r3
 8012c14:	0553      	lsls	r3, r2, #21
 8012c16:	d531      	bpl.n	8012c7c <__ssputs_r+0xa0>
 8012c18:	4629      	mov	r1, r5
 8012c1a:	f7ff ff6b 	bl	8012af4 <_malloc_r>
 8012c1e:	4606      	mov	r6, r0
 8012c20:	b950      	cbnz	r0, 8012c38 <__ssputs_r+0x5c>
 8012c22:	230c      	movs	r3, #12
 8012c24:	f8ca 3000 	str.w	r3, [sl]
 8012c28:	89a3      	ldrh	r3, [r4, #12]
 8012c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c2e:	81a3      	strh	r3, [r4, #12]
 8012c30:	f04f 30ff 	mov.w	r0, #4294967295
 8012c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c38:	6921      	ldr	r1, [r4, #16]
 8012c3a:	464a      	mov	r2, r9
 8012c3c:	f7fb fe30 	bl	800e8a0 <memcpy>
 8012c40:	89a3      	ldrh	r3, [r4, #12]
 8012c42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c4a:	81a3      	strh	r3, [r4, #12]
 8012c4c:	6126      	str	r6, [r4, #16]
 8012c4e:	6165      	str	r5, [r4, #20]
 8012c50:	444e      	add	r6, r9
 8012c52:	eba5 0509 	sub.w	r5, r5, r9
 8012c56:	6026      	str	r6, [r4, #0]
 8012c58:	60a5      	str	r5, [r4, #8]
 8012c5a:	463e      	mov	r6, r7
 8012c5c:	42be      	cmp	r6, r7
 8012c5e:	d900      	bls.n	8012c62 <__ssputs_r+0x86>
 8012c60:	463e      	mov	r6, r7
 8012c62:	6820      	ldr	r0, [r4, #0]
 8012c64:	4632      	mov	r2, r6
 8012c66:	4641      	mov	r1, r8
 8012c68:	f7fb fe28 	bl	800e8bc <memmove>
 8012c6c:	68a3      	ldr	r3, [r4, #8]
 8012c6e:	1b9b      	subs	r3, r3, r6
 8012c70:	60a3      	str	r3, [r4, #8]
 8012c72:	6823      	ldr	r3, [r4, #0]
 8012c74:	4433      	add	r3, r6
 8012c76:	6023      	str	r3, [r4, #0]
 8012c78:	2000      	movs	r0, #0
 8012c7a:	e7db      	b.n	8012c34 <__ssputs_r+0x58>
 8012c7c:	462a      	mov	r2, r5
 8012c7e:	f000 ff19 	bl	8013ab4 <_realloc_r>
 8012c82:	4606      	mov	r6, r0
 8012c84:	2800      	cmp	r0, #0
 8012c86:	d1e1      	bne.n	8012c4c <__ssputs_r+0x70>
 8012c88:	6921      	ldr	r1, [r4, #16]
 8012c8a:	4650      	mov	r0, sl
 8012c8c:	f7ff fec6 	bl	8012a1c <_free_r>
 8012c90:	e7c7      	b.n	8012c22 <__ssputs_r+0x46>
	...

08012c94 <_svfiprintf_r>:
 8012c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c98:	4698      	mov	r8, r3
 8012c9a:	898b      	ldrh	r3, [r1, #12]
 8012c9c:	061b      	lsls	r3, r3, #24
 8012c9e:	b09d      	sub	sp, #116	; 0x74
 8012ca0:	4607      	mov	r7, r0
 8012ca2:	460d      	mov	r5, r1
 8012ca4:	4614      	mov	r4, r2
 8012ca6:	d50e      	bpl.n	8012cc6 <_svfiprintf_r+0x32>
 8012ca8:	690b      	ldr	r3, [r1, #16]
 8012caa:	b963      	cbnz	r3, 8012cc6 <_svfiprintf_r+0x32>
 8012cac:	2140      	movs	r1, #64	; 0x40
 8012cae:	f7ff ff21 	bl	8012af4 <_malloc_r>
 8012cb2:	6028      	str	r0, [r5, #0]
 8012cb4:	6128      	str	r0, [r5, #16]
 8012cb6:	b920      	cbnz	r0, 8012cc2 <_svfiprintf_r+0x2e>
 8012cb8:	230c      	movs	r3, #12
 8012cba:	603b      	str	r3, [r7, #0]
 8012cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8012cc0:	e0d1      	b.n	8012e66 <_svfiprintf_r+0x1d2>
 8012cc2:	2340      	movs	r3, #64	; 0x40
 8012cc4:	616b      	str	r3, [r5, #20]
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8012cca:	2320      	movs	r3, #32
 8012ccc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8012cd4:	2330      	movs	r3, #48	; 0x30
 8012cd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012e80 <_svfiprintf_r+0x1ec>
 8012cda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012cde:	f04f 0901 	mov.w	r9, #1
 8012ce2:	4623      	mov	r3, r4
 8012ce4:	469a      	mov	sl, r3
 8012ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cea:	b10a      	cbz	r2, 8012cf0 <_svfiprintf_r+0x5c>
 8012cec:	2a25      	cmp	r2, #37	; 0x25
 8012cee:	d1f9      	bne.n	8012ce4 <_svfiprintf_r+0x50>
 8012cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8012cf4:	d00b      	beq.n	8012d0e <_svfiprintf_r+0x7a>
 8012cf6:	465b      	mov	r3, fp
 8012cf8:	4622      	mov	r2, r4
 8012cfa:	4629      	mov	r1, r5
 8012cfc:	4638      	mov	r0, r7
 8012cfe:	f7ff ff6d 	bl	8012bdc <__ssputs_r>
 8012d02:	3001      	adds	r0, #1
 8012d04:	f000 80aa 	beq.w	8012e5c <_svfiprintf_r+0x1c8>
 8012d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d0a:	445a      	add	r2, fp
 8012d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8012d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	f000 80a2 	beq.w	8012e5c <_svfiprintf_r+0x1c8>
 8012d18:	2300      	movs	r3, #0
 8012d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8012d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d22:	f10a 0a01 	add.w	sl, sl, #1
 8012d26:	9304      	str	r3, [sp, #16]
 8012d28:	9307      	str	r3, [sp, #28]
 8012d2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d2e:	931a      	str	r3, [sp, #104]	; 0x68
 8012d30:	4654      	mov	r4, sl
 8012d32:	2205      	movs	r2, #5
 8012d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d38:	4851      	ldr	r0, [pc, #324]	; (8012e80 <_svfiprintf_r+0x1ec>)
 8012d3a:	f7ed fa71 	bl	8000220 <memchr>
 8012d3e:	9a04      	ldr	r2, [sp, #16]
 8012d40:	b9d8      	cbnz	r0, 8012d7a <_svfiprintf_r+0xe6>
 8012d42:	06d0      	lsls	r0, r2, #27
 8012d44:	bf44      	itt	mi
 8012d46:	2320      	movmi	r3, #32
 8012d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d4c:	0711      	lsls	r1, r2, #28
 8012d4e:	bf44      	itt	mi
 8012d50:	232b      	movmi	r3, #43	; 0x2b
 8012d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d56:	f89a 3000 	ldrb.w	r3, [sl]
 8012d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8012d5c:	d015      	beq.n	8012d8a <_svfiprintf_r+0xf6>
 8012d5e:	9a07      	ldr	r2, [sp, #28]
 8012d60:	4654      	mov	r4, sl
 8012d62:	2000      	movs	r0, #0
 8012d64:	f04f 0c0a 	mov.w	ip, #10
 8012d68:	4621      	mov	r1, r4
 8012d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d6e:	3b30      	subs	r3, #48	; 0x30
 8012d70:	2b09      	cmp	r3, #9
 8012d72:	d94e      	bls.n	8012e12 <_svfiprintf_r+0x17e>
 8012d74:	b1b0      	cbz	r0, 8012da4 <_svfiprintf_r+0x110>
 8012d76:	9207      	str	r2, [sp, #28]
 8012d78:	e014      	b.n	8012da4 <_svfiprintf_r+0x110>
 8012d7a:	eba0 0308 	sub.w	r3, r0, r8
 8012d7e:	fa09 f303 	lsl.w	r3, r9, r3
 8012d82:	4313      	orrs	r3, r2
 8012d84:	9304      	str	r3, [sp, #16]
 8012d86:	46a2      	mov	sl, r4
 8012d88:	e7d2      	b.n	8012d30 <_svfiprintf_r+0x9c>
 8012d8a:	9b03      	ldr	r3, [sp, #12]
 8012d8c:	1d19      	adds	r1, r3, #4
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	9103      	str	r1, [sp, #12]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	bfbb      	ittet	lt
 8012d96:	425b      	neglt	r3, r3
 8012d98:	f042 0202 	orrlt.w	r2, r2, #2
 8012d9c:	9307      	strge	r3, [sp, #28]
 8012d9e:	9307      	strlt	r3, [sp, #28]
 8012da0:	bfb8      	it	lt
 8012da2:	9204      	strlt	r2, [sp, #16]
 8012da4:	7823      	ldrb	r3, [r4, #0]
 8012da6:	2b2e      	cmp	r3, #46	; 0x2e
 8012da8:	d10c      	bne.n	8012dc4 <_svfiprintf_r+0x130>
 8012daa:	7863      	ldrb	r3, [r4, #1]
 8012dac:	2b2a      	cmp	r3, #42	; 0x2a
 8012dae:	d135      	bne.n	8012e1c <_svfiprintf_r+0x188>
 8012db0:	9b03      	ldr	r3, [sp, #12]
 8012db2:	1d1a      	adds	r2, r3, #4
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	9203      	str	r2, [sp, #12]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	bfb8      	it	lt
 8012dbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8012dc0:	3402      	adds	r4, #2
 8012dc2:	9305      	str	r3, [sp, #20]
 8012dc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012e90 <_svfiprintf_r+0x1fc>
 8012dc8:	7821      	ldrb	r1, [r4, #0]
 8012dca:	2203      	movs	r2, #3
 8012dcc:	4650      	mov	r0, sl
 8012dce:	f7ed fa27 	bl	8000220 <memchr>
 8012dd2:	b140      	cbz	r0, 8012de6 <_svfiprintf_r+0x152>
 8012dd4:	2340      	movs	r3, #64	; 0x40
 8012dd6:	eba0 000a 	sub.w	r0, r0, sl
 8012dda:	fa03 f000 	lsl.w	r0, r3, r0
 8012dde:	9b04      	ldr	r3, [sp, #16]
 8012de0:	4303      	orrs	r3, r0
 8012de2:	3401      	adds	r4, #1
 8012de4:	9304      	str	r3, [sp, #16]
 8012de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dea:	4826      	ldr	r0, [pc, #152]	; (8012e84 <_svfiprintf_r+0x1f0>)
 8012dec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012df0:	2206      	movs	r2, #6
 8012df2:	f7ed fa15 	bl	8000220 <memchr>
 8012df6:	2800      	cmp	r0, #0
 8012df8:	d038      	beq.n	8012e6c <_svfiprintf_r+0x1d8>
 8012dfa:	4b23      	ldr	r3, [pc, #140]	; (8012e88 <_svfiprintf_r+0x1f4>)
 8012dfc:	bb1b      	cbnz	r3, 8012e46 <_svfiprintf_r+0x1b2>
 8012dfe:	9b03      	ldr	r3, [sp, #12]
 8012e00:	3307      	adds	r3, #7
 8012e02:	f023 0307 	bic.w	r3, r3, #7
 8012e06:	3308      	adds	r3, #8
 8012e08:	9303      	str	r3, [sp, #12]
 8012e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e0c:	4433      	add	r3, r6
 8012e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8012e10:	e767      	b.n	8012ce2 <_svfiprintf_r+0x4e>
 8012e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e16:	460c      	mov	r4, r1
 8012e18:	2001      	movs	r0, #1
 8012e1a:	e7a5      	b.n	8012d68 <_svfiprintf_r+0xd4>
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	3401      	adds	r4, #1
 8012e20:	9305      	str	r3, [sp, #20]
 8012e22:	4619      	mov	r1, r3
 8012e24:	f04f 0c0a 	mov.w	ip, #10
 8012e28:	4620      	mov	r0, r4
 8012e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e2e:	3a30      	subs	r2, #48	; 0x30
 8012e30:	2a09      	cmp	r2, #9
 8012e32:	d903      	bls.n	8012e3c <_svfiprintf_r+0x1a8>
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d0c5      	beq.n	8012dc4 <_svfiprintf_r+0x130>
 8012e38:	9105      	str	r1, [sp, #20]
 8012e3a:	e7c3      	b.n	8012dc4 <_svfiprintf_r+0x130>
 8012e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e40:	4604      	mov	r4, r0
 8012e42:	2301      	movs	r3, #1
 8012e44:	e7f0      	b.n	8012e28 <_svfiprintf_r+0x194>
 8012e46:	ab03      	add	r3, sp, #12
 8012e48:	9300      	str	r3, [sp, #0]
 8012e4a:	462a      	mov	r2, r5
 8012e4c:	4b0f      	ldr	r3, [pc, #60]	; (8012e8c <_svfiprintf_r+0x1f8>)
 8012e4e:	a904      	add	r1, sp, #16
 8012e50:	4638      	mov	r0, r7
 8012e52:	f7fb fdf5 	bl	800ea40 <_printf_float>
 8012e56:	1c42      	adds	r2, r0, #1
 8012e58:	4606      	mov	r6, r0
 8012e5a:	d1d6      	bne.n	8012e0a <_svfiprintf_r+0x176>
 8012e5c:	89ab      	ldrh	r3, [r5, #12]
 8012e5e:	065b      	lsls	r3, r3, #25
 8012e60:	f53f af2c 	bmi.w	8012cbc <_svfiprintf_r+0x28>
 8012e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e66:	b01d      	add	sp, #116	; 0x74
 8012e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e6c:	ab03      	add	r3, sp, #12
 8012e6e:	9300      	str	r3, [sp, #0]
 8012e70:	462a      	mov	r2, r5
 8012e72:	4b06      	ldr	r3, [pc, #24]	; (8012e8c <_svfiprintf_r+0x1f8>)
 8012e74:	a904      	add	r1, sp, #16
 8012e76:	4638      	mov	r0, r7
 8012e78:	f7fc f886 	bl	800ef88 <_printf_i>
 8012e7c:	e7eb      	b.n	8012e56 <_svfiprintf_r+0x1c2>
 8012e7e:	bf00      	nop
 8012e80:	08014d34 	.word	0x08014d34
 8012e84:	08014d3e 	.word	0x08014d3e
 8012e88:	0800ea41 	.word	0x0800ea41
 8012e8c:	08012bdd 	.word	0x08012bdd
 8012e90:	08014d3a 	.word	0x08014d3a

08012e94 <_sungetc_r>:
 8012e94:	b538      	push	{r3, r4, r5, lr}
 8012e96:	1c4b      	adds	r3, r1, #1
 8012e98:	4614      	mov	r4, r2
 8012e9a:	d103      	bne.n	8012ea4 <_sungetc_r+0x10>
 8012e9c:	f04f 35ff 	mov.w	r5, #4294967295
 8012ea0:	4628      	mov	r0, r5
 8012ea2:	bd38      	pop	{r3, r4, r5, pc}
 8012ea4:	8993      	ldrh	r3, [r2, #12]
 8012ea6:	f023 0320 	bic.w	r3, r3, #32
 8012eaa:	8193      	strh	r3, [r2, #12]
 8012eac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012eae:	6852      	ldr	r2, [r2, #4]
 8012eb0:	b2cd      	uxtb	r5, r1
 8012eb2:	b18b      	cbz	r3, 8012ed8 <_sungetc_r+0x44>
 8012eb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012eb6:	4293      	cmp	r3, r2
 8012eb8:	dd08      	ble.n	8012ecc <_sungetc_r+0x38>
 8012eba:	6823      	ldr	r3, [r4, #0]
 8012ebc:	1e5a      	subs	r2, r3, #1
 8012ebe:	6022      	str	r2, [r4, #0]
 8012ec0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012ec4:	6863      	ldr	r3, [r4, #4]
 8012ec6:	3301      	adds	r3, #1
 8012ec8:	6063      	str	r3, [r4, #4]
 8012eca:	e7e9      	b.n	8012ea0 <_sungetc_r+0xc>
 8012ecc:	4621      	mov	r1, r4
 8012ece:	f000 fd4b 	bl	8013968 <__submore>
 8012ed2:	2800      	cmp	r0, #0
 8012ed4:	d0f1      	beq.n	8012eba <_sungetc_r+0x26>
 8012ed6:	e7e1      	b.n	8012e9c <_sungetc_r+0x8>
 8012ed8:	6921      	ldr	r1, [r4, #16]
 8012eda:	6823      	ldr	r3, [r4, #0]
 8012edc:	b151      	cbz	r1, 8012ef4 <_sungetc_r+0x60>
 8012ede:	4299      	cmp	r1, r3
 8012ee0:	d208      	bcs.n	8012ef4 <_sungetc_r+0x60>
 8012ee2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012ee6:	42a9      	cmp	r1, r5
 8012ee8:	d104      	bne.n	8012ef4 <_sungetc_r+0x60>
 8012eea:	3b01      	subs	r3, #1
 8012eec:	3201      	adds	r2, #1
 8012eee:	6023      	str	r3, [r4, #0]
 8012ef0:	6062      	str	r2, [r4, #4]
 8012ef2:	e7d5      	b.n	8012ea0 <_sungetc_r+0xc>
 8012ef4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012efc:	6363      	str	r3, [r4, #52]	; 0x34
 8012efe:	2303      	movs	r3, #3
 8012f00:	63a3      	str	r3, [r4, #56]	; 0x38
 8012f02:	4623      	mov	r3, r4
 8012f04:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012f08:	6023      	str	r3, [r4, #0]
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	e7dc      	b.n	8012ec8 <_sungetc_r+0x34>

08012f0e <__ssrefill_r>:
 8012f0e:	b510      	push	{r4, lr}
 8012f10:	460c      	mov	r4, r1
 8012f12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012f14:	b169      	cbz	r1, 8012f32 <__ssrefill_r+0x24>
 8012f16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f1a:	4299      	cmp	r1, r3
 8012f1c:	d001      	beq.n	8012f22 <__ssrefill_r+0x14>
 8012f1e:	f7ff fd7d 	bl	8012a1c <_free_r>
 8012f22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f24:	6063      	str	r3, [r4, #4]
 8012f26:	2000      	movs	r0, #0
 8012f28:	6360      	str	r0, [r4, #52]	; 0x34
 8012f2a:	b113      	cbz	r3, 8012f32 <__ssrefill_r+0x24>
 8012f2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012f2e:	6023      	str	r3, [r4, #0]
 8012f30:	bd10      	pop	{r4, pc}
 8012f32:	6923      	ldr	r3, [r4, #16]
 8012f34:	6023      	str	r3, [r4, #0]
 8012f36:	2300      	movs	r3, #0
 8012f38:	6063      	str	r3, [r4, #4]
 8012f3a:	89a3      	ldrh	r3, [r4, #12]
 8012f3c:	f043 0320 	orr.w	r3, r3, #32
 8012f40:	81a3      	strh	r3, [r4, #12]
 8012f42:	f04f 30ff 	mov.w	r0, #4294967295
 8012f46:	e7f3      	b.n	8012f30 <__ssrefill_r+0x22>

08012f48 <__ssvfiscanf_r>:
 8012f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f4c:	460c      	mov	r4, r1
 8012f4e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012f52:	2100      	movs	r1, #0
 8012f54:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012f58:	49a6      	ldr	r1, [pc, #664]	; (80131f4 <__ssvfiscanf_r+0x2ac>)
 8012f5a:	91a0      	str	r1, [sp, #640]	; 0x280
 8012f5c:	f10d 0804 	add.w	r8, sp, #4
 8012f60:	49a5      	ldr	r1, [pc, #660]	; (80131f8 <__ssvfiscanf_r+0x2b0>)
 8012f62:	4fa6      	ldr	r7, [pc, #664]	; (80131fc <__ssvfiscanf_r+0x2b4>)
 8012f64:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013200 <__ssvfiscanf_r+0x2b8>
 8012f68:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012f6c:	4606      	mov	r6, r0
 8012f6e:	91a1      	str	r1, [sp, #644]	; 0x284
 8012f70:	9300      	str	r3, [sp, #0]
 8012f72:	7813      	ldrb	r3, [r2, #0]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	f000 815a 	beq.w	801322e <__ssvfiscanf_r+0x2e6>
 8012f7a:	5dd9      	ldrb	r1, [r3, r7]
 8012f7c:	f011 0108 	ands.w	r1, r1, #8
 8012f80:	f102 0501 	add.w	r5, r2, #1
 8012f84:	d019      	beq.n	8012fba <__ssvfiscanf_r+0x72>
 8012f86:	6863      	ldr	r3, [r4, #4]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	dd0f      	ble.n	8012fac <__ssvfiscanf_r+0x64>
 8012f8c:	6823      	ldr	r3, [r4, #0]
 8012f8e:	781a      	ldrb	r2, [r3, #0]
 8012f90:	5cba      	ldrb	r2, [r7, r2]
 8012f92:	0712      	lsls	r2, r2, #28
 8012f94:	d401      	bmi.n	8012f9a <__ssvfiscanf_r+0x52>
 8012f96:	462a      	mov	r2, r5
 8012f98:	e7eb      	b.n	8012f72 <__ssvfiscanf_r+0x2a>
 8012f9a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012f9c:	3201      	adds	r2, #1
 8012f9e:	9245      	str	r2, [sp, #276]	; 0x114
 8012fa0:	6862      	ldr	r2, [r4, #4]
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	3a01      	subs	r2, #1
 8012fa6:	6062      	str	r2, [r4, #4]
 8012fa8:	6023      	str	r3, [r4, #0]
 8012faa:	e7ec      	b.n	8012f86 <__ssvfiscanf_r+0x3e>
 8012fac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012fae:	4621      	mov	r1, r4
 8012fb0:	4630      	mov	r0, r6
 8012fb2:	4798      	blx	r3
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	d0e9      	beq.n	8012f8c <__ssvfiscanf_r+0x44>
 8012fb8:	e7ed      	b.n	8012f96 <__ssvfiscanf_r+0x4e>
 8012fba:	2b25      	cmp	r3, #37	; 0x25
 8012fbc:	d012      	beq.n	8012fe4 <__ssvfiscanf_r+0x9c>
 8012fbe:	469a      	mov	sl, r3
 8012fc0:	6863      	ldr	r3, [r4, #4]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	f340 8091 	ble.w	80130ea <__ssvfiscanf_r+0x1a2>
 8012fc8:	6822      	ldr	r2, [r4, #0]
 8012fca:	7813      	ldrb	r3, [r2, #0]
 8012fcc:	4553      	cmp	r3, sl
 8012fce:	f040 812e 	bne.w	801322e <__ssvfiscanf_r+0x2e6>
 8012fd2:	6863      	ldr	r3, [r4, #4]
 8012fd4:	3b01      	subs	r3, #1
 8012fd6:	6063      	str	r3, [r4, #4]
 8012fd8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012fda:	3201      	adds	r2, #1
 8012fdc:	3301      	adds	r3, #1
 8012fde:	6022      	str	r2, [r4, #0]
 8012fe0:	9345      	str	r3, [sp, #276]	; 0x114
 8012fe2:	e7d8      	b.n	8012f96 <__ssvfiscanf_r+0x4e>
 8012fe4:	9141      	str	r1, [sp, #260]	; 0x104
 8012fe6:	9143      	str	r1, [sp, #268]	; 0x10c
 8012fe8:	7853      	ldrb	r3, [r2, #1]
 8012fea:	2b2a      	cmp	r3, #42	; 0x2a
 8012fec:	bf02      	ittt	eq
 8012fee:	2310      	moveq	r3, #16
 8012ff0:	1c95      	addeq	r5, r2, #2
 8012ff2:	9341      	streq	r3, [sp, #260]	; 0x104
 8012ff4:	220a      	movs	r2, #10
 8012ff6:	46aa      	mov	sl, r5
 8012ff8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012ffc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013000:	2b09      	cmp	r3, #9
 8013002:	d91d      	bls.n	8013040 <__ssvfiscanf_r+0xf8>
 8013004:	487e      	ldr	r0, [pc, #504]	; (8013200 <__ssvfiscanf_r+0x2b8>)
 8013006:	2203      	movs	r2, #3
 8013008:	f7ed f90a 	bl	8000220 <memchr>
 801300c:	b140      	cbz	r0, 8013020 <__ssvfiscanf_r+0xd8>
 801300e:	2301      	movs	r3, #1
 8013010:	eba0 0009 	sub.w	r0, r0, r9
 8013014:	fa03 f000 	lsl.w	r0, r3, r0
 8013018:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801301a:	4318      	orrs	r0, r3
 801301c:	9041      	str	r0, [sp, #260]	; 0x104
 801301e:	4655      	mov	r5, sl
 8013020:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013024:	2b78      	cmp	r3, #120	; 0x78
 8013026:	d806      	bhi.n	8013036 <__ssvfiscanf_r+0xee>
 8013028:	2b57      	cmp	r3, #87	; 0x57
 801302a:	d810      	bhi.n	801304e <__ssvfiscanf_r+0x106>
 801302c:	2b25      	cmp	r3, #37	; 0x25
 801302e:	d0c6      	beq.n	8012fbe <__ssvfiscanf_r+0x76>
 8013030:	d856      	bhi.n	80130e0 <__ssvfiscanf_r+0x198>
 8013032:	2b00      	cmp	r3, #0
 8013034:	d064      	beq.n	8013100 <__ssvfiscanf_r+0x1b8>
 8013036:	2303      	movs	r3, #3
 8013038:	9347      	str	r3, [sp, #284]	; 0x11c
 801303a:	230a      	movs	r3, #10
 801303c:	9342      	str	r3, [sp, #264]	; 0x108
 801303e:	e071      	b.n	8013124 <__ssvfiscanf_r+0x1dc>
 8013040:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013042:	fb02 1103 	mla	r1, r2, r3, r1
 8013046:	3930      	subs	r1, #48	; 0x30
 8013048:	9143      	str	r1, [sp, #268]	; 0x10c
 801304a:	4655      	mov	r5, sl
 801304c:	e7d3      	b.n	8012ff6 <__ssvfiscanf_r+0xae>
 801304e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013052:	2a20      	cmp	r2, #32
 8013054:	d8ef      	bhi.n	8013036 <__ssvfiscanf_r+0xee>
 8013056:	a101      	add	r1, pc, #4	; (adr r1, 801305c <__ssvfiscanf_r+0x114>)
 8013058:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801305c:	0801310f 	.word	0x0801310f
 8013060:	08013037 	.word	0x08013037
 8013064:	08013037 	.word	0x08013037
 8013068:	0801316d 	.word	0x0801316d
 801306c:	08013037 	.word	0x08013037
 8013070:	08013037 	.word	0x08013037
 8013074:	08013037 	.word	0x08013037
 8013078:	08013037 	.word	0x08013037
 801307c:	08013037 	.word	0x08013037
 8013080:	08013037 	.word	0x08013037
 8013084:	08013037 	.word	0x08013037
 8013088:	08013183 	.word	0x08013183
 801308c:	08013159 	.word	0x08013159
 8013090:	080130e7 	.word	0x080130e7
 8013094:	080130e7 	.word	0x080130e7
 8013098:	080130e7 	.word	0x080130e7
 801309c:	08013037 	.word	0x08013037
 80130a0:	0801315d 	.word	0x0801315d
 80130a4:	08013037 	.word	0x08013037
 80130a8:	08013037 	.word	0x08013037
 80130ac:	08013037 	.word	0x08013037
 80130b0:	08013037 	.word	0x08013037
 80130b4:	08013193 	.word	0x08013193
 80130b8:	08013165 	.word	0x08013165
 80130bc:	08013107 	.word	0x08013107
 80130c0:	08013037 	.word	0x08013037
 80130c4:	08013037 	.word	0x08013037
 80130c8:	0801318f 	.word	0x0801318f
 80130cc:	08013037 	.word	0x08013037
 80130d0:	08013159 	.word	0x08013159
 80130d4:	08013037 	.word	0x08013037
 80130d8:	08013037 	.word	0x08013037
 80130dc:	0801310f 	.word	0x0801310f
 80130e0:	3b45      	subs	r3, #69	; 0x45
 80130e2:	2b02      	cmp	r3, #2
 80130e4:	d8a7      	bhi.n	8013036 <__ssvfiscanf_r+0xee>
 80130e6:	2305      	movs	r3, #5
 80130e8:	e01b      	b.n	8013122 <__ssvfiscanf_r+0x1da>
 80130ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80130ec:	4621      	mov	r1, r4
 80130ee:	4630      	mov	r0, r6
 80130f0:	4798      	blx	r3
 80130f2:	2800      	cmp	r0, #0
 80130f4:	f43f af68 	beq.w	8012fc8 <__ssvfiscanf_r+0x80>
 80130f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80130fa:	2800      	cmp	r0, #0
 80130fc:	f040 808d 	bne.w	801321a <__ssvfiscanf_r+0x2d2>
 8013100:	f04f 30ff 	mov.w	r0, #4294967295
 8013104:	e08f      	b.n	8013226 <__ssvfiscanf_r+0x2de>
 8013106:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013108:	f042 0220 	orr.w	r2, r2, #32
 801310c:	9241      	str	r2, [sp, #260]	; 0x104
 801310e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013114:	9241      	str	r2, [sp, #260]	; 0x104
 8013116:	2210      	movs	r2, #16
 8013118:	2b6f      	cmp	r3, #111	; 0x6f
 801311a:	9242      	str	r2, [sp, #264]	; 0x108
 801311c:	bf34      	ite	cc
 801311e:	2303      	movcc	r3, #3
 8013120:	2304      	movcs	r3, #4
 8013122:	9347      	str	r3, [sp, #284]	; 0x11c
 8013124:	6863      	ldr	r3, [r4, #4]
 8013126:	2b00      	cmp	r3, #0
 8013128:	dd42      	ble.n	80131b0 <__ssvfiscanf_r+0x268>
 801312a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801312c:	0659      	lsls	r1, r3, #25
 801312e:	d404      	bmi.n	801313a <__ssvfiscanf_r+0x1f2>
 8013130:	6823      	ldr	r3, [r4, #0]
 8013132:	781a      	ldrb	r2, [r3, #0]
 8013134:	5cba      	ldrb	r2, [r7, r2]
 8013136:	0712      	lsls	r2, r2, #28
 8013138:	d441      	bmi.n	80131be <__ssvfiscanf_r+0x276>
 801313a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801313c:	2b02      	cmp	r3, #2
 801313e:	dc50      	bgt.n	80131e2 <__ssvfiscanf_r+0x29a>
 8013140:	466b      	mov	r3, sp
 8013142:	4622      	mov	r2, r4
 8013144:	a941      	add	r1, sp, #260	; 0x104
 8013146:	4630      	mov	r0, r6
 8013148:	f000 f9d0 	bl	80134ec <_scanf_chars>
 801314c:	2801      	cmp	r0, #1
 801314e:	d06e      	beq.n	801322e <__ssvfiscanf_r+0x2e6>
 8013150:	2802      	cmp	r0, #2
 8013152:	f47f af20 	bne.w	8012f96 <__ssvfiscanf_r+0x4e>
 8013156:	e7cf      	b.n	80130f8 <__ssvfiscanf_r+0x1b0>
 8013158:	220a      	movs	r2, #10
 801315a:	e7dd      	b.n	8013118 <__ssvfiscanf_r+0x1d0>
 801315c:	2300      	movs	r3, #0
 801315e:	9342      	str	r3, [sp, #264]	; 0x108
 8013160:	2303      	movs	r3, #3
 8013162:	e7de      	b.n	8013122 <__ssvfiscanf_r+0x1da>
 8013164:	2308      	movs	r3, #8
 8013166:	9342      	str	r3, [sp, #264]	; 0x108
 8013168:	2304      	movs	r3, #4
 801316a:	e7da      	b.n	8013122 <__ssvfiscanf_r+0x1da>
 801316c:	4629      	mov	r1, r5
 801316e:	4640      	mov	r0, r8
 8013170:	f000 fb3a 	bl	80137e8 <__sccl>
 8013174:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801317a:	9341      	str	r3, [sp, #260]	; 0x104
 801317c:	4605      	mov	r5, r0
 801317e:	2301      	movs	r3, #1
 8013180:	e7cf      	b.n	8013122 <__ssvfiscanf_r+0x1da>
 8013182:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013188:	9341      	str	r3, [sp, #260]	; 0x104
 801318a:	2300      	movs	r3, #0
 801318c:	e7c9      	b.n	8013122 <__ssvfiscanf_r+0x1da>
 801318e:	2302      	movs	r3, #2
 8013190:	e7c7      	b.n	8013122 <__ssvfiscanf_r+0x1da>
 8013192:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013194:	06c3      	lsls	r3, r0, #27
 8013196:	f53f aefe 	bmi.w	8012f96 <__ssvfiscanf_r+0x4e>
 801319a:	9b00      	ldr	r3, [sp, #0]
 801319c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801319e:	1d19      	adds	r1, r3, #4
 80131a0:	9100      	str	r1, [sp, #0]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	f010 0f01 	tst.w	r0, #1
 80131a8:	bf14      	ite	ne
 80131aa:	801a      	strhne	r2, [r3, #0]
 80131ac:	601a      	streq	r2, [r3, #0]
 80131ae:	e6f2      	b.n	8012f96 <__ssvfiscanf_r+0x4e>
 80131b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80131b2:	4621      	mov	r1, r4
 80131b4:	4630      	mov	r0, r6
 80131b6:	4798      	blx	r3
 80131b8:	2800      	cmp	r0, #0
 80131ba:	d0b6      	beq.n	801312a <__ssvfiscanf_r+0x1e2>
 80131bc:	e79c      	b.n	80130f8 <__ssvfiscanf_r+0x1b0>
 80131be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80131c0:	3201      	adds	r2, #1
 80131c2:	9245      	str	r2, [sp, #276]	; 0x114
 80131c4:	6862      	ldr	r2, [r4, #4]
 80131c6:	3a01      	subs	r2, #1
 80131c8:	2a00      	cmp	r2, #0
 80131ca:	6062      	str	r2, [r4, #4]
 80131cc:	dd02      	ble.n	80131d4 <__ssvfiscanf_r+0x28c>
 80131ce:	3301      	adds	r3, #1
 80131d0:	6023      	str	r3, [r4, #0]
 80131d2:	e7ad      	b.n	8013130 <__ssvfiscanf_r+0x1e8>
 80131d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80131d6:	4621      	mov	r1, r4
 80131d8:	4630      	mov	r0, r6
 80131da:	4798      	blx	r3
 80131dc:	2800      	cmp	r0, #0
 80131de:	d0a7      	beq.n	8013130 <__ssvfiscanf_r+0x1e8>
 80131e0:	e78a      	b.n	80130f8 <__ssvfiscanf_r+0x1b0>
 80131e2:	2b04      	cmp	r3, #4
 80131e4:	dc0e      	bgt.n	8013204 <__ssvfiscanf_r+0x2bc>
 80131e6:	466b      	mov	r3, sp
 80131e8:	4622      	mov	r2, r4
 80131ea:	a941      	add	r1, sp, #260	; 0x104
 80131ec:	4630      	mov	r0, r6
 80131ee:	f000 f9d7 	bl	80135a0 <_scanf_i>
 80131f2:	e7ab      	b.n	801314c <__ssvfiscanf_r+0x204>
 80131f4:	08012e95 	.word	0x08012e95
 80131f8:	08012f0f 	.word	0x08012f0f
 80131fc:	080148e1 	.word	0x080148e1
 8013200:	08014d3a 	.word	0x08014d3a
 8013204:	4b0b      	ldr	r3, [pc, #44]	; (8013234 <__ssvfiscanf_r+0x2ec>)
 8013206:	2b00      	cmp	r3, #0
 8013208:	f43f aec5 	beq.w	8012f96 <__ssvfiscanf_r+0x4e>
 801320c:	466b      	mov	r3, sp
 801320e:	4622      	mov	r2, r4
 8013210:	a941      	add	r1, sp, #260	; 0x104
 8013212:	4630      	mov	r0, r6
 8013214:	f7fb ffde 	bl	800f1d4 <_scanf_float>
 8013218:	e798      	b.n	801314c <__ssvfiscanf_r+0x204>
 801321a:	89a3      	ldrh	r3, [r4, #12]
 801321c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013220:	bf18      	it	ne
 8013222:	f04f 30ff 	movne.w	r0, #4294967295
 8013226:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801322a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801322e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013230:	e7f9      	b.n	8013226 <__ssvfiscanf_r+0x2de>
 8013232:	bf00      	nop
 8013234:	0800f1d5 	.word	0x0800f1d5

08013238 <__sfputc_r>:
 8013238:	6893      	ldr	r3, [r2, #8]
 801323a:	3b01      	subs	r3, #1
 801323c:	2b00      	cmp	r3, #0
 801323e:	b410      	push	{r4}
 8013240:	6093      	str	r3, [r2, #8]
 8013242:	da08      	bge.n	8013256 <__sfputc_r+0x1e>
 8013244:	6994      	ldr	r4, [r2, #24]
 8013246:	42a3      	cmp	r3, r4
 8013248:	db01      	blt.n	801324e <__sfputc_r+0x16>
 801324a:	290a      	cmp	r1, #10
 801324c:	d103      	bne.n	8013256 <__sfputc_r+0x1e>
 801324e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013252:	f7fd b9ed 	b.w	8010630 <__swbuf_r>
 8013256:	6813      	ldr	r3, [r2, #0]
 8013258:	1c58      	adds	r0, r3, #1
 801325a:	6010      	str	r0, [r2, #0]
 801325c:	7019      	strb	r1, [r3, #0]
 801325e:	4608      	mov	r0, r1
 8013260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013264:	4770      	bx	lr

08013266 <__sfputs_r>:
 8013266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013268:	4606      	mov	r6, r0
 801326a:	460f      	mov	r7, r1
 801326c:	4614      	mov	r4, r2
 801326e:	18d5      	adds	r5, r2, r3
 8013270:	42ac      	cmp	r4, r5
 8013272:	d101      	bne.n	8013278 <__sfputs_r+0x12>
 8013274:	2000      	movs	r0, #0
 8013276:	e007      	b.n	8013288 <__sfputs_r+0x22>
 8013278:	f814 1b01 	ldrb.w	r1, [r4], #1
 801327c:	463a      	mov	r2, r7
 801327e:	4630      	mov	r0, r6
 8013280:	f7ff ffda 	bl	8013238 <__sfputc_r>
 8013284:	1c43      	adds	r3, r0, #1
 8013286:	d1f3      	bne.n	8013270 <__sfputs_r+0xa>
 8013288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801328c <_vfiprintf_r>:
 801328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013290:	460d      	mov	r5, r1
 8013292:	b09d      	sub	sp, #116	; 0x74
 8013294:	4614      	mov	r4, r2
 8013296:	4698      	mov	r8, r3
 8013298:	4606      	mov	r6, r0
 801329a:	b118      	cbz	r0, 80132a4 <_vfiprintf_r+0x18>
 801329c:	6983      	ldr	r3, [r0, #24]
 801329e:	b90b      	cbnz	r3, 80132a4 <_vfiprintf_r+0x18>
 80132a0:	f7fe fa3e 	bl	8011720 <__sinit>
 80132a4:	4b89      	ldr	r3, [pc, #548]	; (80134cc <_vfiprintf_r+0x240>)
 80132a6:	429d      	cmp	r5, r3
 80132a8:	d11b      	bne.n	80132e2 <_vfiprintf_r+0x56>
 80132aa:	6875      	ldr	r5, [r6, #4]
 80132ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132ae:	07d9      	lsls	r1, r3, #31
 80132b0:	d405      	bmi.n	80132be <_vfiprintf_r+0x32>
 80132b2:	89ab      	ldrh	r3, [r5, #12]
 80132b4:	059a      	lsls	r2, r3, #22
 80132b6:	d402      	bmi.n	80132be <_vfiprintf_r+0x32>
 80132b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132ba:	f7fe fe42 	bl	8011f42 <__retarget_lock_acquire_recursive>
 80132be:	89ab      	ldrh	r3, [r5, #12]
 80132c0:	071b      	lsls	r3, r3, #28
 80132c2:	d501      	bpl.n	80132c8 <_vfiprintf_r+0x3c>
 80132c4:	692b      	ldr	r3, [r5, #16]
 80132c6:	b9eb      	cbnz	r3, 8013304 <_vfiprintf_r+0x78>
 80132c8:	4629      	mov	r1, r5
 80132ca:	4630      	mov	r0, r6
 80132cc:	f7fd fa14 	bl	80106f8 <__swsetup_r>
 80132d0:	b1c0      	cbz	r0, 8013304 <_vfiprintf_r+0x78>
 80132d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132d4:	07dc      	lsls	r4, r3, #31
 80132d6:	d50e      	bpl.n	80132f6 <_vfiprintf_r+0x6a>
 80132d8:	f04f 30ff 	mov.w	r0, #4294967295
 80132dc:	b01d      	add	sp, #116	; 0x74
 80132de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132e2:	4b7b      	ldr	r3, [pc, #492]	; (80134d0 <_vfiprintf_r+0x244>)
 80132e4:	429d      	cmp	r5, r3
 80132e6:	d101      	bne.n	80132ec <_vfiprintf_r+0x60>
 80132e8:	68b5      	ldr	r5, [r6, #8]
 80132ea:	e7df      	b.n	80132ac <_vfiprintf_r+0x20>
 80132ec:	4b79      	ldr	r3, [pc, #484]	; (80134d4 <_vfiprintf_r+0x248>)
 80132ee:	429d      	cmp	r5, r3
 80132f0:	bf08      	it	eq
 80132f2:	68f5      	ldreq	r5, [r6, #12]
 80132f4:	e7da      	b.n	80132ac <_vfiprintf_r+0x20>
 80132f6:	89ab      	ldrh	r3, [r5, #12]
 80132f8:	0598      	lsls	r0, r3, #22
 80132fa:	d4ed      	bmi.n	80132d8 <_vfiprintf_r+0x4c>
 80132fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132fe:	f7fe fe21 	bl	8011f44 <__retarget_lock_release_recursive>
 8013302:	e7e9      	b.n	80132d8 <_vfiprintf_r+0x4c>
 8013304:	2300      	movs	r3, #0
 8013306:	9309      	str	r3, [sp, #36]	; 0x24
 8013308:	2320      	movs	r3, #32
 801330a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801330e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013312:	2330      	movs	r3, #48	; 0x30
 8013314:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80134d8 <_vfiprintf_r+0x24c>
 8013318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801331c:	f04f 0901 	mov.w	r9, #1
 8013320:	4623      	mov	r3, r4
 8013322:	469a      	mov	sl, r3
 8013324:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013328:	b10a      	cbz	r2, 801332e <_vfiprintf_r+0xa2>
 801332a:	2a25      	cmp	r2, #37	; 0x25
 801332c:	d1f9      	bne.n	8013322 <_vfiprintf_r+0x96>
 801332e:	ebba 0b04 	subs.w	fp, sl, r4
 8013332:	d00b      	beq.n	801334c <_vfiprintf_r+0xc0>
 8013334:	465b      	mov	r3, fp
 8013336:	4622      	mov	r2, r4
 8013338:	4629      	mov	r1, r5
 801333a:	4630      	mov	r0, r6
 801333c:	f7ff ff93 	bl	8013266 <__sfputs_r>
 8013340:	3001      	adds	r0, #1
 8013342:	f000 80aa 	beq.w	801349a <_vfiprintf_r+0x20e>
 8013346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013348:	445a      	add	r2, fp
 801334a:	9209      	str	r2, [sp, #36]	; 0x24
 801334c:	f89a 3000 	ldrb.w	r3, [sl]
 8013350:	2b00      	cmp	r3, #0
 8013352:	f000 80a2 	beq.w	801349a <_vfiprintf_r+0x20e>
 8013356:	2300      	movs	r3, #0
 8013358:	f04f 32ff 	mov.w	r2, #4294967295
 801335c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013360:	f10a 0a01 	add.w	sl, sl, #1
 8013364:	9304      	str	r3, [sp, #16]
 8013366:	9307      	str	r3, [sp, #28]
 8013368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801336c:	931a      	str	r3, [sp, #104]	; 0x68
 801336e:	4654      	mov	r4, sl
 8013370:	2205      	movs	r2, #5
 8013372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013376:	4858      	ldr	r0, [pc, #352]	; (80134d8 <_vfiprintf_r+0x24c>)
 8013378:	f7ec ff52 	bl	8000220 <memchr>
 801337c:	9a04      	ldr	r2, [sp, #16]
 801337e:	b9d8      	cbnz	r0, 80133b8 <_vfiprintf_r+0x12c>
 8013380:	06d1      	lsls	r1, r2, #27
 8013382:	bf44      	itt	mi
 8013384:	2320      	movmi	r3, #32
 8013386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801338a:	0713      	lsls	r3, r2, #28
 801338c:	bf44      	itt	mi
 801338e:	232b      	movmi	r3, #43	; 0x2b
 8013390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013394:	f89a 3000 	ldrb.w	r3, [sl]
 8013398:	2b2a      	cmp	r3, #42	; 0x2a
 801339a:	d015      	beq.n	80133c8 <_vfiprintf_r+0x13c>
 801339c:	9a07      	ldr	r2, [sp, #28]
 801339e:	4654      	mov	r4, sl
 80133a0:	2000      	movs	r0, #0
 80133a2:	f04f 0c0a 	mov.w	ip, #10
 80133a6:	4621      	mov	r1, r4
 80133a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80133ac:	3b30      	subs	r3, #48	; 0x30
 80133ae:	2b09      	cmp	r3, #9
 80133b0:	d94e      	bls.n	8013450 <_vfiprintf_r+0x1c4>
 80133b2:	b1b0      	cbz	r0, 80133e2 <_vfiprintf_r+0x156>
 80133b4:	9207      	str	r2, [sp, #28]
 80133b6:	e014      	b.n	80133e2 <_vfiprintf_r+0x156>
 80133b8:	eba0 0308 	sub.w	r3, r0, r8
 80133bc:	fa09 f303 	lsl.w	r3, r9, r3
 80133c0:	4313      	orrs	r3, r2
 80133c2:	9304      	str	r3, [sp, #16]
 80133c4:	46a2      	mov	sl, r4
 80133c6:	e7d2      	b.n	801336e <_vfiprintf_r+0xe2>
 80133c8:	9b03      	ldr	r3, [sp, #12]
 80133ca:	1d19      	adds	r1, r3, #4
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	9103      	str	r1, [sp, #12]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	bfbb      	ittet	lt
 80133d4:	425b      	neglt	r3, r3
 80133d6:	f042 0202 	orrlt.w	r2, r2, #2
 80133da:	9307      	strge	r3, [sp, #28]
 80133dc:	9307      	strlt	r3, [sp, #28]
 80133de:	bfb8      	it	lt
 80133e0:	9204      	strlt	r2, [sp, #16]
 80133e2:	7823      	ldrb	r3, [r4, #0]
 80133e4:	2b2e      	cmp	r3, #46	; 0x2e
 80133e6:	d10c      	bne.n	8013402 <_vfiprintf_r+0x176>
 80133e8:	7863      	ldrb	r3, [r4, #1]
 80133ea:	2b2a      	cmp	r3, #42	; 0x2a
 80133ec:	d135      	bne.n	801345a <_vfiprintf_r+0x1ce>
 80133ee:	9b03      	ldr	r3, [sp, #12]
 80133f0:	1d1a      	adds	r2, r3, #4
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	9203      	str	r2, [sp, #12]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	bfb8      	it	lt
 80133fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80133fe:	3402      	adds	r4, #2
 8013400:	9305      	str	r3, [sp, #20]
 8013402:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80134e8 <_vfiprintf_r+0x25c>
 8013406:	7821      	ldrb	r1, [r4, #0]
 8013408:	2203      	movs	r2, #3
 801340a:	4650      	mov	r0, sl
 801340c:	f7ec ff08 	bl	8000220 <memchr>
 8013410:	b140      	cbz	r0, 8013424 <_vfiprintf_r+0x198>
 8013412:	2340      	movs	r3, #64	; 0x40
 8013414:	eba0 000a 	sub.w	r0, r0, sl
 8013418:	fa03 f000 	lsl.w	r0, r3, r0
 801341c:	9b04      	ldr	r3, [sp, #16]
 801341e:	4303      	orrs	r3, r0
 8013420:	3401      	adds	r4, #1
 8013422:	9304      	str	r3, [sp, #16]
 8013424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013428:	482c      	ldr	r0, [pc, #176]	; (80134dc <_vfiprintf_r+0x250>)
 801342a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801342e:	2206      	movs	r2, #6
 8013430:	f7ec fef6 	bl	8000220 <memchr>
 8013434:	2800      	cmp	r0, #0
 8013436:	d03f      	beq.n	80134b8 <_vfiprintf_r+0x22c>
 8013438:	4b29      	ldr	r3, [pc, #164]	; (80134e0 <_vfiprintf_r+0x254>)
 801343a:	bb1b      	cbnz	r3, 8013484 <_vfiprintf_r+0x1f8>
 801343c:	9b03      	ldr	r3, [sp, #12]
 801343e:	3307      	adds	r3, #7
 8013440:	f023 0307 	bic.w	r3, r3, #7
 8013444:	3308      	adds	r3, #8
 8013446:	9303      	str	r3, [sp, #12]
 8013448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801344a:	443b      	add	r3, r7
 801344c:	9309      	str	r3, [sp, #36]	; 0x24
 801344e:	e767      	b.n	8013320 <_vfiprintf_r+0x94>
 8013450:	fb0c 3202 	mla	r2, ip, r2, r3
 8013454:	460c      	mov	r4, r1
 8013456:	2001      	movs	r0, #1
 8013458:	e7a5      	b.n	80133a6 <_vfiprintf_r+0x11a>
 801345a:	2300      	movs	r3, #0
 801345c:	3401      	adds	r4, #1
 801345e:	9305      	str	r3, [sp, #20]
 8013460:	4619      	mov	r1, r3
 8013462:	f04f 0c0a 	mov.w	ip, #10
 8013466:	4620      	mov	r0, r4
 8013468:	f810 2b01 	ldrb.w	r2, [r0], #1
 801346c:	3a30      	subs	r2, #48	; 0x30
 801346e:	2a09      	cmp	r2, #9
 8013470:	d903      	bls.n	801347a <_vfiprintf_r+0x1ee>
 8013472:	2b00      	cmp	r3, #0
 8013474:	d0c5      	beq.n	8013402 <_vfiprintf_r+0x176>
 8013476:	9105      	str	r1, [sp, #20]
 8013478:	e7c3      	b.n	8013402 <_vfiprintf_r+0x176>
 801347a:	fb0c 2101 	mla	r1, ip, r1, r2
 801347e:	4604      	mov	r4, r0
 8013480:	2301      	movs	r3, #1
 8013482:	e7f0      	b.n	8013466 <_vfiprintf_r+0x1da>
 8013484:	ab03      	add	r3, sp, #12
 8013486:	9300      	str	r3, [sp, #0]
 8013488:	462a      	mov	r2, r5
 801348a:	4b16      	ldr	r3, [pc, #88]	; (80134e4 <_vfiprintf_r+0x258>)
 801348c:	a904      	add	r1, sp, #16
 801348e:	4630      	mov	r0, r6
 8013490:	f7fb fad6 	bl	800ea40 <_printf_float>
 8013494:	4607      	mov	r7, r0
 8013496:	1c78      	adds	r0, r7, #1
 8013498:	d1d6      	bne.n	8013448 <_vfiprintf_r+0x1bc>
 801349a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801349c:	07d9      	lsls	r1, r3, #31
 801349e:	d405      	bmi.n	80134ac <_vfiprintf_r+0x220>
 80134a0:	89ab      	ldrh	r3, [r5, #12]
 80134a2:	059a      	lsls	r2, r3, #22
 80134a4:	d402      	bmi.n	80134ac <_vfiprintf_r+0x220>
 80134a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134a8:	f7fe fd4c 	bl	8011f44 <__retarget_lock_release_recursive>
 80134ac:	89ab      	ldrh	r3, [r5, #12]
 80134ae:	065b      	lsls	r3, r3, #25
 80134b0:	f53f af12 	bmi.w	80132d8 <_vfiprintf_r+0x4c>
 80134b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134b6:	e711      	b.n	80132dc <_vfiprintf_r+0x50>
 80134b8:	ab03      	add	r3, sp, #12
 80134ba:	9300      	str	r3, [sp, #0]
 80134bc:	462a      	mov	r2, r5
 80134be:	4b09      	ldr	r3, [pc, #36]	; (80134e4 <_vfiprintf_r+0x258>)
 80134c0:	a904      	add	r1, sp, #16
 80134c2:	4630      	mov	r0, r6
 80134c4:	f7fb fd60 	bl	800ef88 <_printf_i>
 80134c8:	e7e4      	b.n	8013494 <_vfiprintf_r+0x208>
 80134ca:	bf00      	nop
 80134cc:	08014b20 	.word	0x08014b20
 80134d0:	08014b40 	.word	0x08014b40
 80134d4:	08014b00 	.word	0x08014b00
 80134d8:	08014d34 	.word	0x08014d34
 80134dc:	08014d3e 	.word	0x08014d3e
 80134e0:	0800ea41 	.word	0x0800ea41
 80134e4:	08013267 	.word	0x08013267
 80134e8:	08014d3a 	.word	0x08014d3a

080134ec <_scanf_chars>:
 80134ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134f0:	4615      	mov	r5, r2
 80134f2:	688a      	ldr	r2, [r1, #8]
 80134f4:	4680      	mov	r8, r0
 80134f6:	460c      	mov	r4, r1
 80134f8:	b932      	cbnz	r2, 8013508 <_scanf_chars+0x1c>
 80134fa:	698a      	ldr	r2, [r1, #24]
 80134fc:	2a00      	cmp	r2, #0
 80134fe:	bf0c      	ite	eq
 8013500:	2201      	moveq	r2, #1
 8013502:	f04f 32ff 	movne.w	r2, #4294967295
 8013506:	608a      	str	r2, [r1, #8]
 8013508:	6822      	ldr	r2, [r4, #0]
 801350a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801359c <_scanf_chars+0xb0>
 801350e:	06d1      	lsls	r1, r2, #27
 8013510:	bf5f      	itttt	pl
 8013512:	681a      	ldrpl	r2, [r3, #0]
 8013514:	1d11      	addpl	r1, r2, #4
 8013516:	6019      	strpl	r1, [r3, #0]
 8013518:	6816      	ldrpl	r6, [r2, #0]
 801351a:	2700      	movs	r7, #0
 801351c:	69a0      	ldr	r0, [r4, #24]
 801351e:	b188      	cbz	r0, 8013544 <_scanf_chars+0x58>
 8013520:	2801      	cmp	r0, #1
 8013522:	d107      	bne.n	8013534 <_scanf_chars+0x48>
 8013524:	682a      	ldr	r2, [r5, #0]
 8013526:	7811      	ldrb	r1, [r2, #0]
 8013528:	6962      	ldr	r2, [r4, #20]
 801352a:	5c52      	ldrb	r2, [r2, r1]
 801352c:	b952      	cbnz	r2, 8013544 <_scanf_chars+0x58>
 801352e:	2f00      	cmp	r7, #0
 8013530:	d031      	beq.n	8013596 <_scanf_chars+0xaa>
 8013532:	e022      	b.n	801357a <_scanf_chars+0x8e>
 8013534:	2802      	cmp	r0, #2
 8013536:	d120      	bne.n	801357a <_scanf_chars+0x8e>
 8013538:	682b      	ldr	r3, [r5, #0]
 801353a:	781b      	ldrb	r3, [r3, #0]
 801353c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013540:	071b      	lsls	r3, r3, #28
 8013542:	d41a      	bmi.n	801357a <_scanf_chars+0x8e>
 8013544:	6823      	ldr	r3, [r4, #0]
 8013546:	06da      	lsls	r2, r3, #27
 8013548:	bf5e      	ittt	pl
 801354a:	682b      	ldrpl	r3, [r5, #0]
 801354c:	781b      	ldrbpl	r3, [r3, #0]
 801354e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013552:	682a      	ldr	r2, [r5, #0]
 8013554:	686b      	ldr	r3, [r5, #4]
 8013556:	3201      	adds	r2, #1
 8013558:	602a      	str	r2, [r5, #0]
 801355a:	68a2      	ldr	r2, [r4, #8]
 801355c:	3b01      	subs	r3, #1
 801355e:	3a01      	subs	r2, #1
 8013560:	606b      	str	r3, [r5, #4]
 8013562:	3701      	adds	r7, #1
 8013564:	60a2      	str	r2, [r4, #8]
 8013566:	b142      	cbz	r2, 801357a <_scanf_chars+0x8e>
 8013568:	2b00      	cmp	r3, #0
 801356a:	dcd7      	bgt.n	801351c <_scanf_chars+0x30>
 801356c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013570:	4629      	mov	r1, r5
 8013572:	4640      	mov	r0, r8
 8013574:	4798      	blx	r3
 8013576:	2800      	cmp	r0, #0
 8013578:	d0d0      	beq.n	801351c <_scanf_chars+0x30>
 801357a:	6823      	ldr	r3, [r4, #0]
 801357c:	f013 0310 	ands.w	r3, r3, #16
 8013580:	d105      	bne.n	801358e <_scanf_chars+0xa2>
 8013582:	68e2      	ldr	r2, [r4, #12]
 8013584:	3201      	adds	r2, #1
 8013586:	60e2      	str	r2, [r4, #12]
 8013588:	69a2      	ldr	r2, [r4, #24]
 801358a:	b102      	cbz	r2, 801358e <_scanf_chars+0xa2>
 801358c:	7033      	strb	r3, [r6, #0]
 801358e:	6923      	ldr	r3, [r4, #16]
 8013590:	443b      	add	r3, r7
 8013592:	6123      	str	r3, [r4, #16]
 8013594:	2000      	movs	r0, #0
 8013596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801359a:	bf00      	nop
 801359c:	080148e1 	.word	0x080148e1

080135a0 <_scanf_i>:
 80135a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135a4:	4698      	mov	r8, r3
 80135a6:	4b76      	ldr	r3, [pc, #472]	; (8013780 <_scanf_i+0x1e0>)
 80135a8:	460c      	mov	r4, r1
 80135aa:	4682      	mov	sl, r0
 80135ac:	4616      	mov	r6, r2
 80135ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80135b2:	b087      	sub	sp, #28
 80135b4:	ab03      	add	r3, sp, #12
 80135b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80135ba:	4b72      	ldr	r3, [pc, #456]	; (8013784 <_scanf_i+0x1e4>)
 80135bc:	69a1      	ldr	r1, [r4, #24]
 80135be:	4a72      	ldr	r2, [pc, #456]	; (8013788 <_scanf_i+0x1e8>)
 80135c0:	2903      	cmp	r1, #3
 80135c2:	bf18      	it	ne
 80135c4:	461a      	movne	r2, r3
 80135c6:	68a3      	ldr	r3, [r4, #8]
 80135c8:	9201      	str	r2, [sp, #4]
 80135ca:	1e5a      	subs	r2, r3, #1
 80135cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80135d0:	bf88      	it	hi
 80135d2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80135d6:	4627      	mov	r7, r4
 80135d8:	bf82      	ittt	hi
 80135da:	eb03 0905 	addhi.w	r9, r3, r5
 80135de:	f240 135d 	movwhi	r3, #349	; 0x15d
 80135e2:	60a3      	strhi	r3, [r4, #8]
 80135e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80135e8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80135ec:	bf98      	it	ls
 80135ee:	f04f 0900 	movls.w	r9, #0
 80135f2:	6023      	str	r3, [r4, #0]
 80135f4:	463d      	mov	r5, r7
 80135f6:	f04f 0b00 	mov.w	fp, #0
 80135fa:	6831      	ldr	r1, [r6, #0]
 80135fc:	ab03      	add	r3, sp, #12
 80135fe:	7809      	ldrb	r1, [r1, #0]
 8013600:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013604:	2202      	movs	r2, #2
 8013606:	f7ec fe0b 	bl	8000220 <memchr>
 801360a:	b328      	cbz	r0, 8013658 <_scanf_i+0xb8>
 801360c:	f1bb 0f01 	cmp.w	fp, #1
 8013610:	d159      	bne.n	80136c6 <_scanf_i+0x126>
 8013612:	6862      	ldr	r2, [r4, #4]
 8013614:	b92a      	cbnz	r2, 8013622 <_scanf_i+0x82>
 8013616:	6822      	ldr	r2, [r4, #0]
 8013618:	2308      	movs	r3, #8
 801361a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801361e:	6063      	str	r3, [r4, #4]
 8013620:	6022      	str	r2, [r4, #0]
 8013622:	6822      	ldr	r2, [r4, #0]
 8013624:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013628:	6022      	str	r2, [r4, #0]
 801362a:	68a2      	ldr	r2, [r4, #8]
 801362c:	1e51      	subs	r1, r2, #1
 801362e:	60a1      	str	r1, [r4, #8]
 8013630:	b192      	cbz	r2, 8013658 <_scanf_i+0xb8>
 8013632:	6832      	ldr	r2, [r6, #0]
 8013634:	1c51      	adds	r1, r2, #1
 8013636:	6031      	str	r1, [r6, #0]
 8013638:	7812      	ldrb	r2, [r2, #0]
 801363a:	f805 2b01 	strb.w	r2, [r5], #1
 801363e:	6872      	ldr	r2, [r6, #4]
 8013640:	3a01      	subs	r2, #1
 8013642:	2a00      	cmp	r2, #0
 8013644:	6072      	str	r2, [r6, #4]
 8013646:	dc07      	bgt.n	8013658 <_scanf_i+0xb8>
 8013648:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801364c:	4631      	mov	r1, r6
 801364e:	4650      	mov	r0, sl
 8013650:	4790      	blx	r2
 8013652:	2800      	cmp	r0, #0
 8013654:	f040 8085 	bne.w	8013762 <_scanf_i+0x1c2>
 8013658:	f10b 0b01 	add.w	fp, fp, #1
 801365c:	f1bb 0f03 	cmp.w	fp, #3
 8013660:	d1cb      	bne.n	80135fa <_scanf_i+0x5a>
 8013662:	6863      	ldr	r3, [r4, #4]
 8013664:	b90b      	cbnz	r3, 801366a <_scanf_i+0xca>
 8013666:	230a      	movs	r3, #10
 8013668:	6063      	str	r3, [r4, #4]
 801366a:	6863      	ldr	r3, [r4, #4]
 801366c:	4947      	ldr	r1, [pc, #284]	; (801378c <_scanf_i+0x1ec>)
 801366e:	6960      	ldr	r0, [r4, #20]
 8013670:	1ac9      	subs	r1, r1, r3
 8013672:	f000 f8b9 	bl	80137e8 <__sccl>
 8013676:	f04f 0b00 	mov.w	fp, #0
 801367a:	68a3      	ldr	r3, [r4, #8]
 801367c:	6822      	ldr	r2, [r4, #0]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d03d      	beq.n	80136fe <_scanf_i+0x15e>
 8013682:	6831      	ldr	r1, [r6, #0]
 8013684:	6960      	ldr	r0, [r4, #20]
 8013686:	f891 c000 	ldrb.w	ip, [r1]
 801368a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801368e:	2800      	cmp	r0, #0
 8013690:	d035      	beq.n	80136fe <_scanf_i+0x15e>
 8013692:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013696:	d124      	bne.n	80136e2 <_scanf_i+0x142>
 8013698:	0510      	lsls	r0, r2, #20
 801369a:	d522      	bpl.n	80136e2 <_scanf_i+0x142>
 801369c:	f10b 0b01 	add.w	fp, fp, #1
 80136a0:	f1b9 0f00 	cmp.w	r9, #0
 80136a4:	d003      	beq.n	80136ae <_scanf_i+0x10e>
 80136a6:	3301      	adds	r3, #1
 80136a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80136ac:	60a3      	str	r3, [r4, #8]
 80136ae:	6873      	ldr	r3, [r6, #4]
 80136b0:	3b01      	subs	r3, #1
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	6073      	str	r3, [r6, #4]
 80136b6:	dd1b      	ble.n	80136f0 <_scanf_i+0x150>
 80136b8:	6833      	ldr	r3, [r6, #0]
 80136ba:	3301      	adds	r3, #1
 80136bc:	6033      	str	r3, [r6, #0]
 80136be:	68a3      	ldr	r3, [r4, #8]
 80136c0:	3b01      	subs	r3, #1
 80136c2:	60a3      	str	r3, [r4, #8]
 80136c4:	e7d9      	b.n	801367a <_scanf_i+0xda>
 80136c6:	f1bb 0f02 	cmp.w	fp, #2
 80136ca:	d1ae      	bne.n	801362a <_scanf_i+0x8a>
 80136cc:	6822      	ldr	r2, [r4, #0]
 80136ce:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80136d2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80136d6:	d1bf      	bne.n	8013658 <_scanf_i+0xb8>
 80136d8:	2310      	movs	r3, #16
 80136da:	6063      	str	r3, [r4, #4]
 80136dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80136e0:	e7a2      	b.n	8013628 <_scanf_i+0x88>
 80136e2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80136e6:	6022      	str	r2, [r4, #0]
 80136e8:	780b      	ldrb	r3, [r1, #0]
 80136ea:	f805 3b01 	strb.w	r3, [r5], #1
 80136ee:	e7de      	b.n	80136ae <_scanf_i+0x10e>
 80136f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80136f4:	4631      	mov	r1, r6
 80136f6:	4650      	mov	r0, sl
 80136f8:	4798      	blx	r3
 80136fa:	2800      	cmp	r0, #0
 80136fc:	d0df      	beq.n	80136be <_scanf_i+0x11e>
 80136fe:	6823      	ldr	r3, [r4, #0]
 8013700:	05db      	lsls	r3, r3, #23
 8013702:	d50d      	bpl.n	8013720 <_scanf_i+0x180>
 8013704:	42bd      	cmp	r5, r7
 8013706:	d909      	bls.n	801371c <_scanf_i+0x17c>
 8013708:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801370c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013710:	4632      	mov	r2, r6
 8013712:	4650      	mov	r0, sl
 8013714:	4798      	blx	r3
 8013716:	f105 39ff 	add.w	r9, r5, #4294967295
 801371a:	464d      	mov	r5, r9
 801371c:	42bd      	cmp	r5, r7
 801371e:	d02d      	beq.n	801377c <_scanf_i+0x1dc>
 8013720:	6822      	ldr	r2, [r4, #0]
 8013722:	f012 0210 	ands.w	r2, r2, #16
 8013726:	d113      	bne.n	8013750 <_scanf_i+0x1b0>
 8013728:	702a      	strb	r2, [r5, #0]
 801372a:	6863      	ldr	r3, [r4, #4]
 801372c:	9e01      	ldr	r6, [sp, #4]
 801372e:	4639      	mov	r1, r7
 8013730:	4650      	mov	r0, sl
 8013732:	47b0      	blx	r6
 8013734:	6821      	ldr	r1, [r4, #0]
 8013736:	f8d8 3000 	ldr.w	r3, [r8]
 801373a:	f011 0f20 	tst.w	r1, #32
 801373e:	d013      	beq.n	8013768 <_scanf_i+0x1c8>
 8013740:	1d1a      	adds	r2, r3, #4
 8013742:	f8c8 2000 	str.w	r2, [r8]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	6018      	str	r0, [r3, #0]
 801374a:	68e3      	ldr	r3, [r4, #12]
 801374c:	3301      	adds	r3, #1
 801374e:	60e3      	str	r3, [r4, #12]
 8013750:	1bed      	subs	r5, r5, r7
 8013752:	44ab      	add	fp, r5
 8013754:	6925      	ldr	r5, [r4, #16]
 8013756:	445d      	add	r5, fp
 8013758:	6125      	str	r5, [r4, #16]
 801375a:	2000      	movs	r0, #0
 801375c:	b007      	add	sp, #28
 801375e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013762:	f04f 0b00 	mov.w	fp, #0
 8013766:	e7ca      	b.n	80136fe <_scanf_i+0x15e>
 8013768:	1d1a      	adds	r2, r3, #4
 801376a:	f8c8 2000 	str.w	r2, [r8]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	f011 0f01 	tst.w	r1, #1
 8013774:	bf14      	ite	ne
 8013776:	8018      	strhne	r0, [r3, #0]
 8013778:	6018      	streq	r0, [r3, #0]
 801377a:	e7e6      	b.n	801374a <_scanf_i+0x1aa>
 801377c:	2001      	movs	r0, #1
 801377e:	e7ed      	b.n	801375c <_scanf_i+0x1bc>
 8013780:	080148bc 	.word	0x080148bc
 8013784:	08013965 	.word	0x08013965
 8013788:	0801062d 	.word	0x0801062d
 801378c:	08014d5e 	.word	0x08014d5e

08013790 <_read_r>:
 8013790:	b538      	push	{r3, r4, r5, lr}
 8013792:	4d07      	ldr	r5, [pc, #28]	; (80137b0 <_read_r+0x20>)
 8013794:	4604      	mov	r4, r0
 8013796:	4608      	mov	r0, r1
 8013798:	4611      	mov	r1, r2
 801379a:	2200      	movs	r2, #0
 801379c:	602a      	str	r2, [r5, #0]
 801379e:	461a      	mov	r2, r3
 80137a0:	f7f0 fcf8 	bl	8004194 <_read>
 80137a4:	1c43      	adds	r3, r0, #1
 80137a6:	d102      	bne.n	80137ae <_read_r+0x1e>
 80137a8:	682b      	ldr	r3, [r5, #0]
 80137aa:	b103      	cbz	r3, 80137ae <_read_r+0x1e>
 80137ac:	6023      	str	r3, [r4, #0]
 80137ae:	bd38      	pop	{r3, r4, r5, pc}
 80137b0:	2000314c 	.word	0x2000314c
 80137b4:	00000000 	.word	0x00000000

080137b8 <nan>:
 80137b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80137c0 <nan+0x8>
 80137bc:	4770      	bx	lr
 80137be:	bf00      	nop
 80137c0:	00000000 	.word	0x00000000
 80137c4:	7ff80000 	.word	0x7ff80000

080137c8 <_sbrk_r>:
 80137c8:	b538      	push	{r3, r4, r5, lr}
 80137ca:	4d06      	ldr	r5, [pc, #24]	; (80137e4 <_sbrk_r+0x1c>)
 80137cc:	2300      	movs	r3, #0
 80137ce:	4604      	mov	r4, r0
 80137d0:	4608      	mov	r0, r1
 80137d2:	602b      	str	r3, [r5, #0]
 80137d4:	f7f0 fd30 	bl	8004238 <_sbrk>
 80137d8:	1c43      	adds	r3, r0, #1
 80137da:	d102      	bne.n	80137e2 <_sbrk_r+0x1a>
 80137dc:	682b      	ldr	r3, [r5, #0]
 80137de:	b103      	cbz	r3, 80137e2 <_sbrk_r+0x1a>
 80137e0:	6023      	str	r3, [r4, #0]
 80137e2:	bd38      	pop	{r3, r4, r5, pc}
 80137e4:	2000314c 	.word	0x2000314c

080137e8 <__sccl>:
 80137e8:	b570      	push	{r4, r5, r6, lr}
 80137ea:	780b      	ldrb	r3, [r1, #0]
 80137ec:	4604      	mov	r4, r0
 80137ee:	2b5e      	cmp	r3, #94	; 0x5e
 80137f0:	bf0b      	itete	eq
 80137f2:	784b      	ldrbeq	r3, [r1, #1]
 80137f4:	1c48      	addne	r0, r1, #1
 80137f6:	1c88      	addeq	r0, r1, #2
 80137f8:	2200      	movne	r2, #0
 80137fa:	bf08      	it	eq
 80137fc:	2201      	moveq	r2, #1
 80137fe:	1e61      	subs	r1, r4, #1
 8013800:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013804:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013808:	42a9      	cmp	r1, r5
 801380a:	d1fb      	bne.n	8013804 <__sccl+0x1c>
 801380c:	b90b      	cbnz	r3, 8013812 <__sccl+0x2a>
 801380e:	3801      	subs	r0, #1
 8013810:	bd70      	pop	{r4, r5, r6, pc}
 8013812:	f082 0201 	eor.w	r2, r2, #1
 8013816:	54e2      	strb	r2, [r4, r3]
 8013818:	4605      	mov	r5, r0
 801381a:	4628      	mov	r0, r5
 801381c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013820:	292d      	cmp	r1, #45	; 0x2d
 8013822:	d006      	beq.n	8013832 <__sccl+0x4a>
 8013824:	295d      	cmp	r1, #93	; 0x5d
 8013826:	d0f3      	beq.n	8013810 <__sccl+0x28>
 8013828:	b909      	cbnz	r1, 801382e <__sccl+0x46>
 801382a:	4628      	mov	r0, r5
 801382c:	e7f0      	b.n	8013810 <__sccl+0x28>
 801382e:	460b      	mov	r3, r1
 8013830:	e7f1      	b.n	8013816 <__sccl+0x2e>
 8013832:	786e      	ldrb	r6, [r5, #1]
 8013834:	2e5d      	cmp	r6, #93	; 0x5d
 8013836:	d0fa      	beq.n	801382e <__sccl+0x46>
 8013838:	42b3      	cmp	r3, r6
 801383a:	dcf8      	bgt.n	801382e <__sccl+0x46>
 801383c:	3502      	adds	r5, #2
 801383e:	4619      	mov	r1, r3
 8013840:	3101      	adds	r1, #1
 8013842:	428e      	cmp	r6, r1
 8013844:	5462      	strb	r2, [r4, r1]
 8013846:	dcfb      	bgt.n	8013840 <__sccl+0x58>
 8013848:	1af1      	subs	r1, r6, r3
 801384a:	3901      	subs	r1, #1
 801384c:	1c58      	adds	r0, r3, #1
 801384e:	42b3      	cmp	r3, r6
 8013850:	bfa8      	it	ge
 8013852:	2100      	movge	r1, #0
 8013854:	1843      	adds	r3, r0, r1
 8013856:	e7e0      	b.n	801381a <__sccl+0x32>

08013858 <strncmp>:
 8013858:	b510      	push	{r4, lr}
 801385a:	b17a      	cbz	r2, 801387c <strncmp+0x24>
 801385c:	4603      	mov	r3, r0
 801385e:	3901      	subs	r1, #1
 8013860:	1884      	adds	r4, r0, r2
 8013862:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013866:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801386a:	4290      	cmp	r0, r2
 801386c:	d101      	bne.n	8013872 <strncmp+0x1a>
 801386e:	42a3      	cmp	r3, r4
 8013870:	d101      	bne.n	8013876 <strncmp+0x1e>
 8013872:	1a80      	subs	r0, r0, r2
 8013874:	bd10      	pop	{r4, pc}
 8013876:	2800      	cmp	r0, #0
 8013878:	d1f3      	bne.n	8013862 <strncmp+0xa>
 801387a:	e7fa      	b.n	8013872 <strncmp+0x1a>
 801387c:	4610      	mov	r0, r2
 801387e:	e7f9      	b.n	8013874 <strncmp+0x1c>

08013880 <_strtoul_l.constprop.0>:
 8013880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013884:	4f36      	ldr	r7, [pc, #216]	; (8013960 <_strtoul_l.constprop.0+0xe0>)
 8013886:	4686      	mov	lr, r0
 8013888:	460d      	mov	r5, r1
 801388a:	4628      	mov	r0, r5
 801388c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013890:	5de6      	ldrb	r6, [r4, r7]
 8013892:	f016 0608 	ands.w	r6, r6, #8
 8013896:	d1f8      	bne.n	801388a <_strtoul_l.constprop.0+0xa>
 8013898:	2c2d      	cmp	r4, #45	; 0x2d
 801389a:	d12f      	bne.n	80138fc <_strtoul_l.constprop.0+0x7c>
 801389c:	782c      	ldrb	r4, [r5, #0]
 801389e:	2601      	movs	r6, #1
 80138a0:	1c85      	adds	r5, r0, #2
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d057      	beq.n	8013956 <_strtoul_l.constprop.0+0xd6>
 80138a6:	2b10      	cmp	r3, #16
 80138a8:	d109      	bne.n	80138be <_strtoul_l.constprop.0+0x3e>
 80138aa:	2c30      	cmp	r4, #48	; 0x30
 80138ac:	d107      	bne.n	80138be <_strtoul_l.constprop.0+0x3e>
 80138ae:	7828      	ldrb	r0, [r5, #0]
 80138b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80138b4:	2858      	cmp	r0, #88	; 0x58
 80138b6:	d149      	bne.n	801394c <_strtoul_l.constprop.0+0xcc>
 80138b8:	786c      	ldrb	r4, [r5, #1]
 80138ba:	2310      	movs	r3, #16
 80138bc:	3502      	adds	r5, #2
 80138be:	f04f 38ff 	mov.w	r8, #4294967295
 80138c2:	2700      	movs	r7, #0
 80138c4:	fbb8 f8f3 	udiv	r8, r8, r3
 80138c8:	fb03 f908 	mul.w	r9, r3, r8
 80138cc:	ea6f 0909 	mvn.w	r9, r9
 80138d0:	4638      	mov	r0, r7
 80138d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80138d6:	f1bc 0f09 	cmp.w	ip, #9
 80138da:	d814      	bhi.n	8013906 <_strtoul_l.constprop.0+0x86>
 80138dc:	4664      	mov	r4, ip
 80138de:	42a3      	cmp	r3, r4
 80138e0:	dd22      	ble.n	8013928 <_strtoul_l.constprop.0+0xa8>
 80138e2:	2f00      	cmp	r7, #0
 80138e4:	db1d      	blt.n	8013922 <_strtoul_l.constprop.0+0xa2>
 80138e6:	4580      	cmp	r8, r0
 80138e8:	d31b      	bcc.n	8013922 <_strtoul_l.constprop.0+0xa2>
 80138ea:	d101      	bne.n	80138f0 <_strtoul_l.constprop.0+0x70>
 80138ec:	45a1      	cmp	r9, r4
 80138ee:	db18      	blt.n	8013922 <_strtoul_l.constprop.0+0xa2>
 80138f0:	fb00 4003 	mla	r0, r0, r3, r4
 80138f4:	2701      	movs	r7, #1
 80138f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80138fa:	e7ea      	b.n	80138d2 <_strtoul_l.constprop.0+0x52>
 80138fc:	2c2b      	cmp	r4, #43	; 0x2b
 80138fe:	bf04      	itt	eq
 8013900:	782c      	ldrbeq	r4, [r5, #0]
 8013902:	1c85      	addeq	r5, r0, #2
 8013904:	e7cd      	b.n	80138a2 <_strtoul_l.constprop.0+0x22>
 8013906:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801390a:	f1bc 0f19 	cmp.w	ip, #25
 801390e:	d801      	bhi.n	8013914 <_strtoul_l.constprop.0+0x94>
 8013910:	3c37      	subs	r4, #55	; 0x37
 8013912:	e7e4      	b.n	80138de <_strtoul_l.constprop.0+0x5e>
 8013914:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013918:	f1bc 0f19 	cmp.w	ip, #25
 801391c:	d804      	bhi.n	8013928 <_strtoul_l.constprop.0+0xa8>
 801391e:	3c57      	subs	r4, #87	; 0x57
 8013920:	e7dd      	b.n	80138de <_strtoul_l.constprop.0+0x5e>
 8013922:	f04f 37ff 	mov.w	r7, #4294967295
 8013926:	e7e6      	b.n	80138f6 <_strtoul_l.constprop.0+0x76>
 8013928:	2f00      	cmp	r7, #0
 801392a:	da07      	bge.n	801393c <_strtoul_l.constprop.0+0xbc>
 801392c:	2322      	movs	r3, #34	; 0x22
 801392e:	f8ce 3000 	str.w	r3, [lr]
 8013932:	f04f 30ff 	mov.w	r0, #4294967295
 8013936:	b932      	cbnz	r2, 8013946 <_strtoul_l.constprop.0+0xc6>
 8013938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801393c:	b106      	cbz	r6, 8013940 <_strtoul_l.constprop.0+0xc0>
 801393e:	4240      	negs	r0, r0
 8013940:	2a00      	cmp	r2, #0
 8013942:	d0f9      	beq.n	8013938 <_strtoul_l.constprop.0+0xb8>
 8013944:	b107      	cbz	r7, 8013948 <_strtoul_l.constprop.0+0xc8>
 8013946:	1e69      	subs	r1, r5, #1
 8013948:	6011      	str	r1, [r2, #0]
 801394a:	e7f5      	b.n	8013938 <_strtoul_l.constprop.0+0xb8>
 801394c:	2430      	movs	r4, #48	; 0x30
 801394e:	2b00      	cmp	r3, #0
 8013950:	d1b5      	bne.n	80138be <_strtoul_l.constprop.0+0x3e>
 8013952:	2308      	movs	r3, #8
 8013954:	e7b3      	b.n	80138be <_strtoul_l.constprop.0+0x3e>
 8013956:	2c30      	cmp	r4, #48	; 0x30
 8013958:	d0a9      	beq.n	80138ae <_strtoul_l.constprop.0+0x2e>
 801395a:	230a      	movs	r3, #10
 801395c:	e7af      	b.n	80138be <_strtoul_l.constprop.0+0x3e>
 801395e:	bf00      	nop
 8013960:	080148e1 	.word	0x080148e1

08013964 <_strtoul_r>:
 8013964:	f7ff bf8c 	b.w	8013880 <_strtoul_l.constprop.0>

08013968 <__submore>:
 8013968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801396c:	460c      	mov	r4, r1
 801396e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013974:	4299      	cmp	r1, r3
 8013976:	d11d      	bne.n	80139b4 <__submore+0x4c>
 8013978:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801397c:	f7ff f8ba 	bl	8012af4 <_malloc_r>
 8013980:	b918      	cbnz	r0, 801398a <__submore+0x22>
 8013982:	f04f 30ff 	mov.w	r0, #4294967295
 8013986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801398a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801398e:	63a3      	str	r3, [r4, #56]	; 0x38
 8013990:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013994:	6360      	str	r0, [r4, #52]	; 0x34
 8013996:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801399a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801399e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80139a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80139a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80139aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80139ae:	6020      	str	r0, [r4, #0]
 80139b0:	2000      	movs	r0, #0
 80139b2:	e7e8      	b.n	8013986 <__submore+0x1e>
 80139b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80139b6:	0077      	lsls	r7, r6, #1
 80139b8:	463a      	mov	r2, r7
 80139ba:	f000 f87b 	bl	8013ab4 <_realloc_r>
 80139be:	4605      	mov	r5, r0
 80139c0:	2800      	cmp	r0, #0
 80139c2:	d0de      	beq.n	8013982 <__submore+0x1a>
 80139c4:	eb00 0806 	add.w	r8, r0, r6
 80139c8:	4601      	mov	r1, r0
 80139ca:	4632      	mov	r2, r6
 80139cc:	4640      	mov	r0, r8
 80139ce:	f7fa ff67 	bl	800e8a0 <memcpy>
 80139d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80139d6:	f8c4 8000 	str.w	r8, [r4]
 80139da:	e7e9      	b.n	80139b0 <__submore+0x48>

080139dc <__ascii_wctomb>:
 80139dc:	b149      	cbz	r1, 80139f2 <__ascii_wctomb+0x16>
 80139de:	2aff      	cmp	r2, #255	; 0xff
 80139e0:	bf85      	ittet	hi
 80139e2:	238a      	movhi	r3, #138	; 0x8a
 80139e4:	6003      	strhi	r3, [r0, #0]
 80139e6:	700a      	strbls	r2, [r1, #0]
 80139e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80139ec:	bf98      	it	ls
 80139ee:	2001      	movls	r0, #1
 80139f0:	4770      	bx	lr
 80139f2:	4608      	mov	r0, r1
 80139f4:	4770      	bx	lr
	...

080139f8 <__assert_func>:
 80139f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80139fa:	4614      	mov	r4, r2
 80139fc:	461a      	mov	r2, r3
 80139fe:	4b09      	ldr	r3, [pc, #36]	; (8013a24 <__assert_func+0x2c>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	4605      	mov	r5, r0
 8013a04:	68d8      	ldr	r0, [r3, #12]
 8013a06:	b14c      	cbz	r4, 8013a1c <__assert_func+0x24>
 8013a08:	4b07      	ldr	r3, [pc, #28]	; (8013a28 <__assert_func+0x30>)
 8013a0a:	9100      	str	r1, [sp, #0]
 8013a0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013a10:	4906      	ldr	r1, [pc, #24]	; (8013a2c <__assert_func+0x34>)
 8013a12:	462b      	mov	r3, r5
 8013a14:	f000 f80e 	bl	8013a34 <fiprintf>
 8013a18:	f000 f87b 	bl	8013b12 <abort>
 8013a1c:	4b04      	ldr	r3, [pc, #16]	; (8013a30 <__assert_func+0x38>)
 8013a1e:	461c      	mov	r4, r3
 8013a20:	e7f3      	b.n	8013a0a <__assert_func+0x12>
 8013a22:	bf00      	nop
 8013a24:	20000110 	.word	0x20000110
 8013a28:	08014d60 	.word	0x08014d60
 8013a2c:	08014d6d 	.word	0x08014d6d
 8013a30:	08014d9b 	.word	0x08014d9b

08013a34 <fiprintf>:
 8013a34:	b40e      	push	{r1, r2, r3}
 8013a36:	b503      	push	{r0, r1, lr}
 8013a38:	4601      	mov	r1, r0
 8013a3a:	ab03      	add	r3, sp, #12
 8013a3c:	4805      	ldr	r0, [pc, #20]	; (8013a54 <fiprintf+0x20>)
 8013a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a42:	6800      	ldr	r0, [r0, #0]
 8013a44:	9301      	str	r3, [sp, #4]
 8013a46:	f7ff fc21 	bl	801328c <_vfiprintf_r>
 8013a4a:	b002      	add	sp, #8
 8013a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a50:	b003      	add	sp, #12
 8013a52:	4770      	bx	lr
 8013a54:	20000110 	.word	0x20000110

08013a58 <_fstat_r>:
 8013a58:	b538      	push	{r3, r4, r5, lr}
 8013a5a:	4d07      	ldr	r5, [pc, #28]	; (8013a78 <_fstat_r+0x20>)
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	4604      	mov	r4, r0
 8013a60:	4608      	mov	r0, r1
 8013a62:	4611      	mov	r1, r2
 8013a64:	602b      	str	r3, [r5, #0]
 8013a66:	f7f0 fbbe 	bl	80041e6 <_fstat>
 8013a6a:	1c43      	adds	r3, r0, #1
 8013a6c:	d102      	bne.n	8013a74 <_fstat_r+0x1c>
 8013a6e:	682b      	ldr	r3, [r5, #0]
 8013a70:	b103      	cbz	r3, 8013a74 <_fstat_r+0x1c>
 8013a72:	6023      	str	r3, [r4, #0]
 8013a74:	bd38      	pop	{r3, r4, r5, pc}
 8013a76:	bf00      	nop
 8013a78:	2000314c 	.word	0x2000314c

08013a7c <_isatty_r>:
 8013a7c:	b538      	push	{r3, r4, r5, lr}
 8013a7e:	4d06      	ldr	r5, [pc, #24]	; (8013a98 <_isatty_r+0x1c>)
 8013a80:	2300      	movs	r3, #0
 8013a82:	4604      	mov	r4, r0
 8013a84:	4608      	mov	r0, r1
 8013a86:	602b      	str	r3, [r5, #0]
 8013a88:	f7f0 fbbd 	bl	8004206 <_isatty>
 8013a8c:	1c43      	adds	r3, r0, #1
 8013a8e:	d102      	bne.n	8013a96 <_isatty_r+0x1a>
 8013a90:	682b      	ldr	r3, [r5, #0]
 8013a92:	b103      	cbz	r3, 8013a96 <_isatty_r+0x1a>
 8013a94:	6023      	str	r3, [r4, #0]
 8013a96:	bd38      	pop	{r3, r4, r5, pc}
 8013a98:	2000314c 	.word	0x2000314c

08013a9c <__malloc_lock>:
 8013a9c:	4801      	ldr	r0, [pc, #4]	; (8013aa4 <__malloc_lock+0x8>)
 8013a9e:	f7fe ba50 	b.w	8011f42 <__retarget_lock_acquire_recursive>
 8013aa2:	bf00      	nop
 8013aa4:	20003140 	.word	0x20003140

08013aa8 <__malloc_unlock>:
 8013aa8:	4801      	ldr	r0, [pc, #4]	; (8013ab0 <__malloc_unlock+0x8>)
 8013aaa:	f7fe ba4b 	b.w	8011f44 <__retarget_lock_release_recursive>
 8013aae:	bf00      	nop
 8013ab0:	20003140 	.word	0x20003140

08013ab4 <_realloc_r>:
 8013ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ab8:	4680      	mov	r8, r0
 8013aba:	4614      	mov	r4, r2
 8013abc:	460e      	mov	r6, r1
 8013abe:	b921      	cbnz	r1, 8013aca <_realloc_r+0x16>
 8013ac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ac4:	4611      	mov	r1, r2
 8013ac6:	f7ff b815 	b.w	8012af4 <_malloc_r>
 8013aca:	b92a      	cbnz	r2, 8013ad8 <_realloc_r+0x24>
 8013acc:	f7fe ffa6 	bl	8012a1c <_free_r>
 8013ad0:	4625      	mov	r5, r4
 8013ad2:	4628      	mov	r0, r5
 8013ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ad8:	f000 f822 	bl	8013b20 <_malloc_usable_size_r>
 8013adc:	4284      	cmp	r4, r0
 8013ade:	4607      	mov	r7, r0
 8013ae0:	d802      	bhi.n	8013ae8 <_realloc_r+0x34>
 8013ae2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013ae6:	d812      	bhi.n	8013b0e <_realloc_r+0x5a>
 8013ae8:	4621      	mov	r1, r4
 8013aea:	4640      	mov	r0, r8
 8013aec:	f7ff f802 	bl	8012af4 <_malloc_r>
 8013af0:	4605      	mov	r5, r0
 8013af2:	2800      	cmp	r0, #0
 8013af4:	d0ed      	beq.n	8013ad2 <_realloc_r+0x1e>
 8013af6:	42bc      	cmp	r4, r7
 8013af8:	4622      	mov	r2, r4
 8013afa:	4631      	mov	r1, r6
 8013afc:	bf28      	it	cs
 8013afe:	463a      	movcs	r2, r7
 8013b00:	f7fa fece 	bl	800e8a0 <memcpy>
 8013b04:	4631      	mov	r1, r6
 8013b06:	4640      	mov	r0, r8
 8013b08:	f7fe ff88 	bl	8012a1c <_free_r>
 8013b0c:	e7e1      	b.n	8013ad2 <_realloc_r+0x1e>
 8013b0e:	4635      	mov	r5, r6
 8013b10:	e7df      	b.n	8013ad2 <_realloc_r+0x1e>

08013b12 <abort>:
 8013b12:	b508      	push	{r3, lr}
 8013b14:	2006      	movs	r0, #6
 8013b16:	f000 f833 	bl	8013b80 <raise>
 8013b1a:	2001      	movs	r0, #1
 8013b1c:	f7f0 fb30 	bl	8004180 <_exit>

08013b20 <_malloc_usable_size_r>:
 8013b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b24:	1f18      	subs	r0, r3, #4
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	bfbc      	itt	lt
 8013b2a:	580b      	ldrlt	r3, [r1, r0]
 8013b2c:	18c0      	addlt	r0, r0, r3
 8013b2e:	4770      	bx	lr

08013b30 <_raise_r>:
 8013b30:	291f      	cmp	r1, #31
 8013b32:	b538      	push	{r3, r4, r5, lr}
 8013b34:	4604      	mov	r4, r0
 8013b36:	460d      	mov	r5, r1
 8013b38:	d904      	bls.n	8013b44 <_raise_r+0x14>
 8013b3a:	2316      	movs	r3, #22
 8013b3c:	6003      	str	r3, [r0, #0]
 8013b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b42:	bd38      	pop	{r3, r4, r5, pc}
 8013b44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013b46:	b112      	cbz	r2, 8013b4e <_raise_r+0x1e>
 8013b48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b4c:	b94b      	cbnz	r3, 8013b62 <_raise_r+0x32>
 8013b4e:	4620      	mov	r0, r4
 8013b50:	f000 f830 	bl	8013bb4 <_getpid_r>
 8013b54:	462a      	mov	r2, r5
 8013b56:	4601      	mov	r1, r0
 8013b58:	4620      	mov	r0, r4
 8013b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b5e:	f000 b817 	b.w	8013b90 <_kill_r>
 8013b62:	2b01      	cmp	r3, #1
 8013b64:	d00a      	beq.n	8013b7c <_raise_r+0x4c>
 8013b66:	1c59      	adds	r1, r3, #1
 8013b68:	d103      	bne.n	8013b72 <_raise_r+0x42>
 8013b6a:	2316      	movs	r3, #22
 8013b6c:	6003      	str	r3, [r0, #0]
 8013b6e:	2001      	movs	r0, #1
 8013b70:	e7e7      	b.n	8013b42 <_raise_r+0x12>
 8013b72:	2400      	movs	r4, #0
 8013b74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013b78:	4628      	mov	r0, r5
 8013b7a:	4798      	blx	r3
 8013b7c:	2000      	movs	r0, #0
 8013b7e:	e7e0      	b.n	8013b42 <_raise_r+0x12>

08013b80 <raise>:
 8013b80:	4b02      	ldr	r3, [pc, #8]	; (8013b8c <raise+0xc>)
 8013b82:	4601      	mov	r1, r0
 8013b84:	6818      	ldr	r0, [r3, #0]
 8013b86:	f7ff bfd3 	b.w	8013b30 <_raise_r>
 8013b8a:	bf00      	nop
 8013b8c:	20000110 	.word	0x20000110

08013b90 <_kill_r>:
 8013b90:	b538      	push	{r3, r4, r5, lr}
 8013b92:	4d07      	ldr	r5, [pc, #28]	; (8013bb0 <_kill_r+0x20>)
 8013b94:	2300      	movs	r3, #0
 8013b96:	4604      	mov	r4, r0
 8013b98:	4608      	mov	r0, r1
 8013b9a:	4611      	mov	r1, r2
 8013b9c:	602b      	str	r3, [r5, #0]
 8013b9e:	f7f0 fadf 	bl	8004160 <_kill>
 8013ba2:	1c43      	adds	r3, r0, #1
 8013ba4:	d102      	bne.n	8013bac <_kill_r+0x1c>
 8013ba6:	682b      	ldr	r3, [r5, #0]
 8013ba8:	b103      	cbz	r3, 8013bac <_kill_r+0x1c>
 8013baa:	6023      	str	r3, [r4, #0]
 8013bac:	bd38      	pop	{r3, r4, r5, pc}
 8013bae:	bf00      	nop
 8013bb0:	2000314c 	.word	0x2000314c

08013bb4 <_getpid_r>:
 8013bb4:	f7f0 bacc 	b.w	8004150 <_getpid>

08013bb8 <_init>:
 8013bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bba:	bf00      	nop
 8013bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bbe:	bc08      	pop	{r3}
 8013bc0:	469e      	mov	lr, r3
 8013bc2:	4770      	bx	lr

08013bc4 <_fini>:
 8013bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bc6:	bf00      	nop
 8013bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bca:	bc08      	pop	{r3}
 8013bcc:	469e      	mov	lr, r3
 8013bce:	4770      	bx	lr
