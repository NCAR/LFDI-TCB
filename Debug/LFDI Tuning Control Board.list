
LFDI Tuning Control Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d0  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009680  08009680  00019680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096e0  080096e0  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  080096e0  080096e0  000196e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096e8  080096e8  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096e8  080096e8  000196e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096ec  080096ec  000196ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  080096f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020104  2**0
                  CONTENTS
 10 .bss          00001d9c  20000104  20000104  00020104  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ea0  20001ea0  00020104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c7fe  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000406f  00000000  00000000  0003c932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001890  00000000  00000000  000409a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016d0  00000000  00000000  00042238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d3c  00000000  00000000  00043908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4df  00000000  00000000  0006c644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea8c2  00000000  00000000  0008bb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001763e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006858  00000000  00000000  00176438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000104 	.word	0x20000104
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009668 	.word	0x08009668

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000108 	.word	0x20000108
 80001ec:	08009668 	.word	0x08009668

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_d2f>:
 8000568:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800056c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000570:	bf24      	itt	cs
 8000572:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000576:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800057a:	d90d      	bls.n	8000598 <__aeabi_d2f+0x30>
 800057c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000580:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000584:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000588:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800058c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800059c:	d121      	bne.n	80005e2 <__aeabi_d2f+0x7a>
 800059e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005a2:	bfbc      	itt	lt
 80005a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005a8:	4770      	bxlt	lr
 80005aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005b2:	f1c2 0218 	rsb	r2, r2, #24
 80005b6:	f1c2 0c20 	rsb	ip, r2, #32
 80005ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80005be:	fa20 f002 	lsr.w	r0, r0, r2
 80005c2:	bf18      	it	ne
 80005c4:	f040 0001 	orrne.w	r0, r0, #1
 80005c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005d4:	ea40 000c 	orr.w	r0, r0, ip
 80005d8:	fa23 f302 	lsr.w	r3, r3, r2
 80005dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005e0:	e7cc      	b.n	800057c <__aeabi_d2f+0x14>
 80005e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005e6:	d107      	bne.n	80005f8 <__aeabi_d2f+0x90>
 80005e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005ec:	bf1e      	ittt	ne
 80005ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005f6:	4770      	bxne	lr
 80005f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000600:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b974 	b.w	8000908 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9d08      	ldr	r5, [sp, #32]
 800063e:	4604      	mov	r4, r0
 8000640:	468e      	mov	lr, r1
 8000642:	2b00      	cmp	r3, #0
 8000644:	d14d      	bne.n	80006e2 <__udivmoddi4+0xaa>
 8000646:	428a      	cmp	r2, r1
 8000648:	4694      	mov	ip, r2
 800064a:	d969      	bls.n	8000720 <__udivmoddi4+0xe8>
 800064c:	fab2 f282 	clz	r2, r2
 8000650:	b152      	cbz	r2, 8000668 <__udivmoddi4+0x30>
 8000652:	fa01 f302 	lsl.w	r3, r1, r2
 8000656:	f1c2 0120 	rsb	r1, r2, #32
 800065a:	fa20 f101 	lsr.w	r1, r0, r1
 800065e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000662:	ea41 0e03 	orr.w	lr, r1, r3
 8000666:	4094      	lsls	r4, r2
 8000668:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800066c:	0c21      	lsrs	r1, r4, #16
 800066e:	fbbe f6f8 	udiv	r6, lr, r8
 8000672:	fa1f f78c 	uxth.w	r7, ip
 8000676:	fb08 e316 	mls	r3, r8, r6, lr
 800067a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800067e:	fb06 f107 	mul.w	r1, r6, r7
 8000682:	4299      	cmp	r1, r3
 8000684:	d90a      	bls.n	800069c <__udivmoddi4+0x64>
 8000686:	eb1c 0303 	adds.w	r3, ip, r3
 800068a:	f106 30ff 	add.w	r0, r6, #4294967295
 800068e:	f080 811f 	bcs.w	80008d0 <__udivmoddi4+0x298>
 8000692:	4299      	cmp	r1, r3
 8000694:	f240 811c 	bls.w	80008d0 <__udivmoddi4+0x298>
 8000698:	3e02      	subs	r6, #2
 800069a:	4463      	add	r3, ip
 800069c:	1a5b      	subs	r3, r3, r1
 800069e:	b2a4      	uxth	r4, r4
 80006a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a4:	fb08 3310 	mls	r3, r8, r0, r3
 80006a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006ac:	fb00 f707 	mul.w	r7, r0, r7
 80006b0:	42a7      	cmp	r7, r4
 80006b2:	d90a      	bls.n	80006ca <__udivmoddi4+0x92>
 80006b4:	eb1c 0404 	adds.w	r4, ip, r4
 80006b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006bc:	f080 810a 	bcs.w	80008d4 <__udivmoddi4+0x29c>
 80006c0:	42a7      	cmp	r7, r4
 80006c2:	f240 8107 	bls.w	80008d4 <__udivmoddi4+0x29c>
 80006c6:	4464      	add	r4, ip
 80006c8:	3802      	subs	r0, #2
 80006ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ce:	1be4      	subs	r4, r4, r7
 80006d0:	2600      	movs	r6, #0
 80006d2:	b11d      	cbz	r5, 80006dc <__udivmoddi4+0xa4>
 80006d4:	40d4      	lsrs	r4, r2
 80006d6:	2300      	movs	r3, #0
 80006d8:	e9c5 4300 	strd	r4, r3, [r5]
 80006dc:	4631      	mov	r1, r6
 80006de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d909      	bls.n	80006fa <__udivmoddi4+0xc2>
 80006e6:	2d00      	cmp	r5, #0
 80006e8:	f000 80ef 	beq.w	80008ca <__udivmoddi4+0x292>
 80006ec:	2600      	movs	r6, #0
 80006ee:	e9c5 0100 	strd	r0, r1, [r5]
 80006f2:	4630      	mov	r0, r6
 80006f4:	4631      	mov	r1, r6
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	fab3 f683 	clz	r6, r3
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d14a      	bne.n	8000798 <__udivmoddi4+0x160>
 8000702:	428b      	cmp	r3, r1
 8000704:	d302      	bcc.n	800070c <__udivmoddi4+0xd4>
 8000706:	4282      	cmp	r2, r0
 8000708:	f200 80f9 	bhi.w	80008fe <__udivmoddi4+0x2c6>
 800070c:	1a84      	subs	r4, r0, r2
 800070e:	eb61 0303 	sbc.w	r3, r1, r3
 8000712:	2001      	movs	r0, #1
 8000714:	469e      	mov	lr, r3
 8000716:	2d00      	cmp	r5, #0
 8000718:	d0e0      	beq.n	80006dc <__udivmoddi4+0xa4>
 800071a:	e9c5 4e00 	strd	r4, lr, [r5]
 800071e:	e7dd      	b.n	80006dc <__udivmoddi4+0xa4>
 8000720:	b902      	cbnz	r2, 8000724 <__udivmoddi4+0xec>
 8000722:	deff      	udf	#255	; 0xff
 8000724:	fab2 f282 	clz	r2, r2
 8000728:	2a00      	cmp	r2, #0
 800072a:	f040 8092 	bne.w	8000852 <__udivmoddi4+0x21a>
 800072e:	eba1 010c 	sub.w	r1, r1, ip
 8000732:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000736:	fa1f fe8c 	uxth.w	lr, ip
 800073a:	2601      	movs	r6, #1
 800073c:	0c20      	lsrs	r0, r4, #16
 800073e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000742:	fb07 1113 	mls	r1, r7, r3, r1
 8000746:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800074a:	fb0e f003 	mul.w	r0, lr, r3
 800074e:	4288      	cmp	r0, r1
 8000750:	d908      	bls.n	8000764 <__udivmoddi4+0x12c>
 8000752:	eb1c 0101 	adds.w	r1, ip, r1
 8000756:	f103 38ff 	add.w	r8, r3, #4294967295
 800075a:	d202      	bcs.n	8000762 <__udivmoddi4+0x12a>
 800075c:	4288      	cmp	r0, r1
 800075e:	f200 80cb 	bhi.w	80008f8 <__udivmoddi4+0x2c0>
 8000762:	4643      	mov	r3, r8
 8000764:	1a09      	subs	r1, r1, r0
 8000766:	b2a4      	uxth	r4, r4
 8000768:	fbb1 f0f7 	udiv	r0, r1, r7
 800076c:	fb07 1110 	mls	r1, r7, r0, r1
 8000770:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000774:	fb0e fe00 	mul.w	lr, lr, r0
 8000778:	45a6      	cmp	lr, r4
 800077a:	d908      	bls.n	800078e <__udivmoddi4+0x156>
 800077c:	eb1c 0404 	adds.w	r4, ip, r4
 8000780:	f100 31ff 	add.w	r1, r0, #4294967295
 8000784:	d202      	bcs.n	800078c <__udivmoddi4+0x154>
 8000786:	45a6      	cmp	lr, r4
 8000788:	f200 80bb 	bhi.w	8000902 <__udivmoddi4+0x2ca>
 800078c:	4608      	mov	r0, r1
 800078e:	eba4 040e 	sub.w	r4, r4, lr
 8000792:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000796:	e79c      	b.n	80006d2 <__udivmoddi4+0x9a>
 8000798:	f1c6 0720 	rsb	r7, r6, #32
 800079c:	40b3      	lsls	r3, r6
 800079e:	fa22 fc07 	lsr.w	ip, r2, r7
 80007a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007a6:	fa20 f407 	lsr.w	r4, r0, r7
 80007aa:	fa01 f306 	lsl.w	r3, r1, r6
 80007ae:	431c      	orrs	r4, r3
 80007b0:	40f9      	lsrs	r1, r7
 80007b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007b6:	fa00 f306 	lsl.w	r3, r0, r6
 80007ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80007be:	0c20      	lsrs	r0, r4, #16
 80007c0:	fa1f fe8c 	uxth.w	lr, ip
 80007c4:	fb09 1118 	mls	r1, r9, r8, r1
 80007c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007cc:	fb08 f00e 	mul.w	r0, r8, lr
 80007d0:	4288      	cmp	r0, r1
 80007d2:	fa02 f206 	lsl.w	r2, r2, r6
 80007d6:	d90b      	bls.n	80007f0 <__udivmoddi4+0x1b8>
 80007d8:	eb1c 0101 	adds.w	r1, ip, r1
 80007dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80007e0:	f080 8088 	bcs.w	80008f4 <__udivmoddi4+0x2bc>
 80007e4:	4288      	cmp	r0, r1
 80007e6:	f240 8085 	bls.w	80008f4 <__udivmoddi4+0x2bc>
 80007ea:	f1a8 0802 	sub.w	r8, r8, #2
 80007ee:	4461      	add	r1, ip
 80007f0:	1a09      	subs	r1, r1, r0
 80007f2:	b2a4      	uxth	r4, r4
 80007f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007f8:	fb09 1110 	mls	r1, r9, r0, r1
 80007fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000800:	fb00 fe0e 	mul.w	lr, r0, lr
 8000804:	458e      	cmp	lr, r1
 8000806:	d908      	bls.n	800081a <__udivmoddi4+0x1e2>
 8000808:	eb1c 0101 	adds.w	r1, ip, r1
 800080c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000810:	d26c      	bcs.n	80008ec <__udivmoddi4+0x2b4>
 8000812:	458e      	cmp	lr, r1
 8000814:	d96a      	bls.n	80008ec <__udivmoddi4+0x2b4>
 8000816:	3802      	subs	r0, #2
 8000818:	4461      	add	r1, ip
 800081a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800081e:	fba0 9402 	umull	r9, r4, r0, r2
 8000822:	eba1 010e 	sub.w	r1, r1, lr
 8000826:	42a1      	cmp	r1, r4
 8000828:	46c8      	mov	r8, r9
 800082a:	46a6      	mov	lr, r4
 800082c:	d356      	bcc.n	80008dc <__udivmoddi4+0x2a4>
 800082e:	d053      	beq.n	80008d8 <__udivmoddi4+0x2a0>
 8000830:	b15d      	cbz	r5, 800084a <__udivmoddi4+0x212>
 8000832:	ebb3 0208 	subs.w	r2, r3, r8
 8000836:	eb61 010e 	sbc.w	r1, r1, lr
 800083a:	fa01 f707 	lsl.w	r7, r1, r7
 800083e:	fa22 f306 	lsr.w	r3, r2, r6
 8000842:	40f1      	lsrs	r1, r6
 8000844:	431f      	orrs	r7, r3
 8000846:	e9c5 7100 	strd	r7, r1, [r5]
 800084a:	2600      	movs	r6, #0
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	f1c2 0320 	rsb	r3, r2, #32
 8000856:	40d8      	lsrs	r0, r3
 8000858:	fa0c fc02 	lsl.w	ip, ip, r2
 800085c:	fa21 f303 	lsr.w	r3, r1, r3
 8000860:	4091      	lsls	r1, r2
 8000862:	4301      	orrs	r1, r0
 8000864:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000868:	fa1f fe8c 	uxth.w	lr, ip
 800086c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000870:	fb07 3610 	mls	r6, r7, r0, r3
 8000874:	0c0b      	lsrs	r3, r1, #16
 8000876:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800087a:	fb00 f60e 	mul.w	r6, r0, lr
 800087e:	429e      	cmp	r6, r3
 8000880:	fa04 f402 	lsl.w	r4, r4, r2
 8000884:	d908      	bls.n	8000898 <__udivmoddi4+0x260>
 8000886:	eb1c 0303 	adds.w	r3, ip, r3
 800088a:	f100 38ff 	add.w	r8, r0, #4294967295
 800088e:	d22f      	bcs.n	80008f0 <__udivmoddi4+0x2b8>
 8000890:	429e      	cmp	r6, r3
 8000892:	d92d      	bls.n	80008f0 <__udivmoddi4+0x2b8>
 8000894:	3802      	subs	r0, #2
 8000896:	4463      	add	r3, ip
 8000898:	1b9b      	subs	r3, r3, r6
 800089a:	b289      	uxth	r1, r1
 800089c:	fbb3 f6f7 	udiv	r6, r3, r7
 80008a0:	fb07 3316 	mls	r3, r7, r6, r3
 80008a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a8:	fb06 f30e 	mul.w	r3, r6, lr
 80008ac:	428b      	cmp	r3, r1
 80008ae:	d908      	bls.n	80008c2 <__udivmoddi4+0x28a>
 80008b0:	eb1c 0101 	adds.w	r1, ip, r1
 80008b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008b8:	d216      	bcs.n	80008e8 <__udivmoddi4+0x2b0>
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d914      	bls.n	80008e8 <__udivmoddi4+0x2b0>
 80008be:	3e02      	subs	r6, #2
 80008c0:	4461      	add	r1, ip
 80008c2:	1ac9      	subs	r1, r1, r3
 80008c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008c8:	e738      	b.n	800073c <__udivmoddi4+0x104>
 80008ca:	462e      	mov	r6, r5
 80008cc:	4628      	mov	r0, r5
 80008ce:	e705      	b.n	80006dc <__udivmoddi4+0xa4>
 80008d0:	4606      	mov	r6, r0
 80008d2:	e6e3      	b.n	800069c <__udivmoddi4+0x64>
 80008d4:	4618      	mov	r0, r3
 80008d6:	e6f8      	b.n	80006ca <__udivmoddi4+0x92>
 80008d8:	454b      	cmp	r3, r9
 80008da:	d2a9      	bcs.n	8000830 <__udivmoddi4+0x1f8>
 80008dc:	ebb9 0802 	subs.w	r8, r9, r2
 80008e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008e4:	3801      	subs	r0, #1
 80008e6:	e7a3      	b.n	8000830 <__udivmoddi4+0x1f8>
 80008e8:	4646      	mov	r6, r8
 80008ea:	e7ea      	b.n	80008c2 <__udivmoddi4+0x28a>
 80008ec:	4620      	mov	r0, r4
 80008ee:	e794      	b.n	800081a <__udivmoddi4+0x1e2>
 80008f0:	4640      	mov	r0, r8
 80008f2:	e7d1      	b.n	8000898 <__udivmoddi4+0x260>
 80008f4:	46d0      	mov	r8, sl
 80008f6:	e77b      	b.n	80007f0 <__udivmoddi4+0x1b8>
 80008f8:	3b02      	subs	r3, #2
 80008fa:	4461      	add	r1, ip
 80008fc:	e732      	b.n	8000764 <__udivmoddi4+0x12c>
 80008fe:	4630      	mov	r0, r6
 8000900:	e709      	b.n	8000716 <__udivmoddi4+0xde>
 8000902:	4464      	add	r4, ip
 8000904:	3802      	subs	r0, #2
 8000906:	e742      	b.n	800078e <__udivmoddi4+0x156>

08000908 <__aeabi_idiv0>:
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <Send_Command>:
//        The second byte is the MSB of the register
//        The third byte is the LSB of the register
//@param: spi: The spi handle to use
//@param: command: The command to send
//@return: none
void Send_Command(SPI_HandleTypeDef* spi, uint8_t* Command){
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 f864 	bl	80009e4 <Set_nCS_high>
	hal_status = HAL_SPI_Transmit(spi, Command, 3, 1);
 800091c:	2301      	movs	r3, #1
 800091e:	2203      	movs	r2, #3
 8000920:	6839      	ldr	r1, [r7, #0]
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f003 fe09 	bl	800453a <HAL_SPI_Transmit>
 8000928:	4603      	mov	r3, r0
 800092a:	73fb      	strb	r3, [r7, #15]
	while (!(spi->Instance->SR & SPI_SR_TXE));
 800092c:	bf00      	nop
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	2b00      	cmp	r3, #0
 800093a:	d0f8      	beq.n	800092e <Send_Command+0x22>
	Set_nCS_high(true);
 800093c:	2001      	movs	r0, #1
 800093e:	f000 f851 	bl	80009e4 <Set_nCS_high>
	Delay_us(10);
 8000942:	200a      	movs	r0, #10
 8000944:	f000 fe46 	bl	80015d4 <Delay_us>
}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <Set_DAC_Value>:
//@brief: This function sets the value of the given dac
//@param: DAC_Num: The DAC number to set the offset of
//@param: val: The value to set the dac to
//@param spi: The spi handle to use
//@return: None
void Set_DAC_Value(SPI_HandleTypeDef* spi, uint8_t DAC_Num, uint16_t val){
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	70fb      	strb	r3, [r7, #3]
 800095c:	4613      	mov	r3, r2
 800095e:	803b      	strh	r3, [r7, #0]
	//Make sure DAC is between 0 and 7
	if(DAC_Num > 7){
 8000960:	78fb      	ldrb	r3, [r7, #3]
 8000962:	2b07      	cmp	r3, #7
 8000964:	d819      	bhi.n	800099a <Set_DAC_Value+0x4a>
		return;
	}
	uint8_t DAC_REG = Set_DAC0+DAC_Num;
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <Set_DAC_Value+0x54>)
 8000968:	781a      	ldrb	r2, [r3, #0]
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	4413      	add	r3, r2
 800096e:	73fb      	strb	r3, [r7, #15]

	//Set the DAC to the correct value by adding the DAC number to the Set_DAC0 command
	uint8_t tx_data[3] = {WRITE|DAC_REG, (val >> 8), (val & 0xFF)};
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <Set_DAC_Value+0x58>)
 8000972:	781a      	ldrb	r2, [r3, #0]
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	4313      	orrs	r3, r2
 8000978:	b2db      	uxtb	r3, r3
 800097a:	733b      	strb	r3, [r7, #12]
 800097c:	883b      	ldrh	r3, [r7, #0]
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	b29b      	uxth	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	737b      	strb	r3, [r7, #13]
 8000986:	883b      	ldrh	r3, [r7, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	73bb      	strb	r3, [r7, #14]
	
	Send_Command(spi, tx_data);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4619      	mov	r1, r3
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff ffba 	bl	800090c <Send_Command>
 8000998:	e000      	b.n	800099c <Set_DAC_Value+0x4c>
		return;
 800099a:	bf00      	nop
	
}
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000120 	.word	0x20000120

080009ac <Set_nLDAC_high>:
}

//@brief: This function sets the nLDAC pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nLDAC_high(bool HIGH){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d006      	beq.n	80009ca <Set_nLDAC_high+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c2:	4807      	ldr	r0, [pc, #28]	; (80009e0 <Set_nLDAC_high+0x34>)
 80009c4:	f001 fc56 	bl	8002274 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
	}
}
 80009c8:	e005      	b.n	80009d6 <Set_nLDAC_high+0x2a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <Set_nLDAC_high+0x34>)
 80009d2:	f001 fc4f 	bl	8002274 <HAL_GPIO_WritePin>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40020c00 	.word	0x40020c00

080009e4 <Set_nCS_high>:
}

//@brief: This function sets the nCS pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nCS_high(bool HIGH){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d006      	beq.n	8000a02 <Set_nCS_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fa:	4807      	ldr	r0, [pc, #28]	; (8000a18 <Set_nCS_high+0x34>)
 80009fc:	f001 fc3a 	bl	8002274 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
	}

}
 8000a00:	e005      	b.n	8000a0e <Set_nCS_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <Set_nCS_high+0x34>)
 8000a0a:	f001 fc33 	bl	8002274 <HAL_GPIO_WritePin>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000

08000a1c <Set_Voltage_Peak_to_Peak>:
	Delay_us(10);
	Set_nLDAC_high(true);
	Delay_us(10);
}

void Set_Voltage_Peak_to_Peak(float* voltage, uint16_t* values){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	//The max Voltage Peak to Peak is 22.4V so we need to scale the voltage to fit in 16 bits
	//Find the upper and lower bounds of the voltage with Zero Bias
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	float percentage = (*voltage/(float)MAX_PEAK2PEAK)/2;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	edd3 6a00 	vldr	s13, [r3]
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <Set_Voltage_Peak_to_Peak+0x7c>)
 8000a2e:	edd3 7a00 	vldr	s15, [r3]
 8000a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a36:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000a3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a3e:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t upper_bound = 0xFFFF/2 + percentage*0xFFFF;
 8000a42:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a46:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000a9c <Set_Voltage_Peak_to_Peak+0x80>
 8000a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a4e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000aa0 <Set_Voltage_Peak_to_Peak+0x84>
 8000a52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a5a:	ee17 3a90 	vmov	r3, s15
 8000a5e:	817b      	strh	r3, [r7, #10]
	uint16_t lower_bound = 0xFFFF/2 - percentage*0xFFFF;
 8000a60:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a64:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000a9c <Set_Voltage_Peak_to_Peak+0x80>
 8000a68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a6c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000aa0 <Set_Voltage_Peak_to_Peak+0x84>
 8000a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a78:	ee17 3a90 	vmov	r3, s15
 8000a7c:	813b      	strh	r3, [r7, #8]



	// uint16_t upper_bound = (uint16_t((voltage/MAX_PEAK2PEAK))*0xFFFF)+(0xFFFF/2);
	// uint16_t lower_bound = (0xFFFF/2)-((voltage/MAX_PEAK2PEAK)*0xFFFF);
	values[0] = upper_bound;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	897a      	ldrh	r2, [r7, #10]
 8000a82:	801a      	strh	r2, [r3, #0]
	values[1] = lower_bound;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	3302      	adds	r3, #2
 8000a88:	893a      	ldrh	r2, [r7, #8]
 8000a8a:	801a      	strh	r2, [r3, #0]

}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	20000004 	.word	0x20000004
 8000a9c:	477fff00 	.word	0x477fff00
 8000aa0:	46fffe00 	.word	0x46fffe00

08000aa4 <set_heater>:
#include "Heater_Controller.h"

void set_heater(bool Heater_On){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
    if(Heater_On){
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d005      	beq.n	8000ac0 <set_heater+0x1c>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <set_heater+0x30>)
 8000aba:	f001 fbdb 	bl	8002274 <HAL_GPIO_WritePin>
    }else{
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
    }
}
 8000abe:	e004      	b.n	8000aca <set_heater+0x26>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <set_heater+0x30>)
 8000ac6:	f001 fbd5 	bl	8002274 <HAL_GPIO_WritePin>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40020800 	.word	0x40020800

08000ad8 <get_heater>:

bool get_heater(){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	/* read PC13 */
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5))
 8000adc:	2120      	movs	r1, #32
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <get_heater+0x1c>)
 8000ae0:	f001 fbb0 	bl	8002244 <HAL_GPIO_ReadPin>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <get_heater+0x16>
	{
	 return true;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e000      	b.n	8000af0 <get_heater+0x18>
	}else{
		return false;
 8000aee:	2300      	movs	r3, #0
	}
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40020800 	.word	0x40020800

08000af8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a30      	ldr	r2, [pc, #192]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d159      	bne.n	8000bbc <HAL_TIM_PeriodElapsedCallback+0xc4>
  {
    for (int i = 0; i < 6; i++){
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	e04d      	b.n	8000baa <HAL_TIM_PeriodElapsedCallback+0xb2>
      if(DAC_Channels[i].state_high == true){
 8000b0e:	492e      	ldr	r1, [pc, #184]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	4613      	mov	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4413      	add	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	440b      	add	r3, r1
 8000b1c:	3305      	adds	r3, #5
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d020      	beq.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0x6e>
        Set_DAC_Value(&hspi4, DAC_Channels[i].DAC_number, DAC_Channels[i].lower_bound);
 8000b24:	4928      	ldr	r1, [pc, #160]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	440b      	add	r3, r1
 8000b32:	3304      	adds	r3, #4
 8000b34:	7819      	ldrb	r1, [r3, #0]
 8000b36:	4824      	ldr	r0, [pc, #144]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4413      	add	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4403      	add	r3, r0
 8000b44:	3302      	adds	r3, #2
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4820      	ldr	r0, [pc, #128]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b4c:	f7ff ff00 	bl	8000950 <Set_DAC_Value>
        DAC_Channels[i].state_high = false;
 8000b50:	491d      	ldr	r1, [pc, #116]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3305      	adds	r3, #5
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e01e      	b.n	8000ba4 <HAL_TIM_PeriodElapsedCallback+0xac>
      }else{
        Set_DAC_Value(&hspi4, DAC_Channels[i].DAC_number, DAC_Channels[i].upper_bound);
 8000b66:	4918      	ldr	r1, [pc, #96]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	4413      	add	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	440b      	add	r3, r1
 8000b74:	3304      	adds	r3, #4
 8000b76:	7819      	ldrb	r1, [r3, #0]
 8000b78:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4413      	add	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4403      	add	r3, r0
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4810      	ldr	r0, [pc, #64]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000b8c:	f7ff fee0 	bl	8000950 <Set_DAC_Value>
        DAC_Channels[i].state_high = true;
 8000b90:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	4613      	mov	r3, r2
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4413      	add	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	440b      	add	r3, r1
 8000b9e:	3305      	adds	r3, #5
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 6; i++){
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b05      	cmp	r3, #5
 8000bae:	ddae      	ble.n	8000b0e <HAL_TIM_PeriodElapsedCallback+0x16>
      }
    }
    Set_nLDAC_high(false);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fefb 	bl	80009ac <Set_nLDAC_high>
    Set_nLDAC_high(true);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff fef8 	bl	80009ac <Set_nLDAC_high>

  }


}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000248 	.word	0x20000248
 8000bc8:	20000124 	.word	0x20000124
 8000bcc:	200001f0 	.word	0x200001f0

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for (int i = 0; i < 8; i++){
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	e00e      	b.n	8000bfa <main+0x2a>
		DAC_Channels[i].DAC_number = i;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	b2d8      	uxtb	r0, r3
 8000be0:	4957      	ldr	r1, [pc, #348]	; (8000d40 <main+0x170>)
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	4613      	mov	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	440b      	add	r3, r1
 8000bee:	3304      	adds	r3, #4
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++){
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2b07      	cmp	r3, #7
 8000bfe:	dded      	ble.n	8000bdc <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c00:	f000 fd38 	bl	8001674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c04:	f000 f8a4 	bl	8000d50 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */


  InitDWTTimer(); // we need this for delay_us
 8000c08:	f000 fcca 	bl	80015a0 <InitDWTTimer>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0c:	f000 fa1e 	bl	800104c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c10:	f000 f908 	bl	8000e24 <MX_ADC1_Init>
  MX_SPI4_Init();
 8000c14:	f000 f998 	bl	8000f48 <MX_SPI4_Init>
  MX_I2C1_Init();
 8000c18:	f000 f956 	bl	8000ec8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c1c:	f000 f9ca 	bl	8000fb4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000c20:	f008 f802 	bl	8008c28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000c24:	4847      	ldr	r0, [pc, #284]	; (8000d44 <main+0x174>)
 8000c26:	f003 fffd 	bl	8004c24 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float voltage = 10.2;
 8000c2a:	4b47      	ldr	r3, [pc, #284]	; (8000d48 <main+0x178>)
 8000c2c:	60bb      	str	r3, [r7, #8]
  uint16_t values[2] = {0, 0};
 8000c2e:	2300      	movs	r3, #0
 8000c30:	80bb      	strh	r3, [r7, #4]
 8000c32:	2300      	movs	r3, #0
 8000c34:	80fb      	strh	r3, [r7, #6]
  Set_Voltage_Peak_to_Peak(&voltage, values);
 8000c36:	1d3a      	adds	r2, r7, #4
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff feec 	bl	8000a1c <Set_Voltage_Peak_to_Peak>

  
float voltage2 = 0;
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (voltage = 0; voltage < MAX_PEAK2PEAK; voltage += 0.1){  
 8000c4a:	f04f 0300 	mov.w	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	e053      	b.n	8000cfa <main+0x12a>
      Set_Voltage_Peak_to_Peak(&voltage, values);
 8000c52:	1d3a      	adds	r2, r7, #4
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fede 	bl	8000a1c <Set_Voltage_Peak_to_Peak>
      DAC_Channels[0].upper_bound = values[0];
 8000c60:	88ba      	ldrh	r2, [r7, #4]
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <main+0x170>)
 8000c64:	801a      	strh	r2, [r3, #0]
      DAC_Channels[0].lower_bound = values[1];
 8000c66:	88fa      	ldrh	r2, [r7, #6]
 8000c68:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <main+0x170>)
 8000c6a:	805a      	strh	r2, [r3, #2]
      DAC_Channels[1].upper_bound = values[0];
 8000c6c:	88ba      	ldrh	r2, [r7, #4]
 8000c6e:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <main+0x170>)
 8000c70:	80da      	strh	r2, [r3, #6]
      DAC_Channels[1].lower_bound = values[1];
 8000c72:	88fa      	ldrh	r2, [r7, #6]
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <main+0x170>)
 8000c76:	811a      	strh	r2, [r3, #8]
      DAC_Channels[2].upper_bound = values[0];
 8000c78:	88ba      	ldrh	r2, [r7, #4]
 8000c7a:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <main+0x170>)
 8000c7c:	819a      	strh	r2, [r3, #12]
      DAC_Channels[2].lower_bound = values[1];
 8000c7e:	88fa      	ldrh	r2, [r7, #6]
 8000c80:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <main+0x170>)
 8000c82:	81da      	strh	r2, [r3, #14]

      
      voltage2 = MAX_PEAK2PEAK - voltage;
 8000c84:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <main+0x17c>)
 8000c86:	ed93 7a00 	vldr	s14, [r3]
 8000c8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c92:	edc7 7a00 	vstr	s15, [r7]
      Set_Voltage_Peak_to_Peak(&voltage2, values);
 8000c96:	1d3a      	adds	r2, r7, #4
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff febd 	bl	8000a1c <Set_Voltage_Peak_to_Peak>
      DAC_Channels[3].upper_bound = values[0];
 8000ca2:	88ba      	ldrh	r2, [r7, #4]
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <main+0x170>)
 8000ca6:	825a      	strh	r2, [r3, #18]
      DAC_Channels[3].lower_bound = values[1];
 8000ca8:	88fa      	ldrh	r2, [r7, #6]
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <main+0x170>)
 8000cac:	829a      	strh	r2, [r3, #20]
      DAC_Channels[4].upper_bound = values[0];
 8000cae:	88ba      	ldrh	r2, [r7, #4]
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <main+0x170>)
 8000cb2:	831a      	strh	r2, [r3, #24]
      DAC_Channels[4].lower_bound = values[1];
 8000cb4:	88fa      	ldrh	r2, [r7, #6]
 8000cb6:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <main+0x170>)
 8000cb8:	835a      	strh	r2, [r3, #26]
      DAC_Channels[5].upper_bound = values[0];
 8000cba:	88ba      	ldrh	r2, [r7, #4]
 8000cbc:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <main+0x170>)
 8000cbe:	83da      	strh	r2, [r3, #30]
      DAC_Channels[5].lower_bound = values[1];
 8000cc0:	88fa      	ldrh	r2, [r7, #6]
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <main+0x170>)
 8000cc4:	841a      	strh	r2, [r3, #32]
      DAC_Channels[6].upper_bound = values[0];
 8000cc6:	88ba      	ldrh	r2, [r7, #4]
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <main+0x170>)
 8000cca:	849a      	strh	r2, [r3, #36]	; 0x24
      DAC_Channels[6].lower_bound = values[1];
 8000ccc:	88fa      	ldrh	r2, [r7, #6]
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <main+0x170>)
 8000cd0:	84da      	strh	r2, [r3, #38]	; 0x26
      HAL_Delay(100);
 8000cd2:	2064      	movs	r0, #100	; 0x64
 8000cd4:	f000 fd40 	bl	8001758 <HAL_Delay>
	  for (voltage = 0; voltage < MAX_PEAK2PEAK; voltage += 0.1){  
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fbec 	bl	80004b8 <__aeabi_f2d>
 8000ce0:	a315      	add	r3, pc, #84	; (adr r3, 8000d38 <main+0x168>)
 8000ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce6:	f7ff fa89 	bl	80001fc <__adddf3>
 8000cea:	4602      	mov	r2, r0
 8000cec:	460b      	mov	r3, r1
 8000cee:	4610      	mov	r0, r2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f7ff fc39 	bl	8000568 <__aeabi_d2f>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	ed97 7a02 	vldr	s14, [r7, #8]
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <main+0x17c>)
 8000d00:	edd3 7a00 	vldr	s15, [r3]
 8000d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0c:	d4a1      	bmi.n	8000c52 <main+0x82>
    }
    //Set the heater to the opposite state its currently in
    set_heater(!get_heater());
 8000d0e:	f7ff fee3 	bl	8000ad8 <get_heater>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	bf14      	ite	ne
 8000d18:	2301      	movne	r3, #1
 8000d1a:	2300      	moveq	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	f083 0301 	eor.w	r3, r3, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff feba 	bl	8000aa4 <set_heater>
	  for (voltage = 0; voltage < MAX_PEAK2PEAK; voltage += 0.1){  
 8000d30:	e78b      	b.n	8000c4a <main+0x7a>
 8000d32:	bf00      	nop
 8000d34:	f3af 8000 	nop.w
 8000d38:	9999999a 	.word	0x9999999a
 8000d3c:	3fb99999 	.word	0x3fb99999
 8000d40:	20000124 	.word	0x20000124
 8000d44:	20000248 	.word	0x20000248
 8000d48:	41233333 	.word	0x41233333
 8000d4c:	20000004 	.word	0x20000004

08000d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b094      	sub	sp, #80	; 0x50
 8000d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d56:	f107 0320 	add.w	r3, r7, #32
 8000d5a:	2230      	movs	r2, #48	; 0x30
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f008 fc7a 	bl	8009658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <SystemClock_Config+0xcc>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <SystemClock_Config+0xcc>)
 8000d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d82:	6413      	str	r3, [r2, #64]	; 0x40
 8000d84:	4b25      	ldr	r3, [pc, #148]	; (8000e1c <SystemClock_Config+0xcc>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <SystemClock_Config+0xd0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <SystemClock_Config+0xd0>)
 8000d9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <SystemClock_Config+0xd0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dac:	2301      	movs	r3, #1
 8000dae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db6:	2302      	movs	r3, #2
 8000db8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000dc4:	23a8      	movs	r3, #168	; 0xa8
 8000dc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd0:	f107 0320 	add.w	r3, r7, #32
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fea3 	bl	8003b20 <HAL_RCC_OscConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000de0:	f000 fa54 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de4:	230f      	movs	r3, #15
 8000de6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de8:	2302      	movs	r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000df0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000df4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000df6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2105      	movs	r1, #5
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 f904 	bl	8004010 <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e0e:	f000 fa3d 	bl	800128c <Error_Handler>
  }
}
 8000e12:	bf00      	nop
 8000e14:	3750      	adds	r7, #80	; 0x50
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000

08000e24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e38:	4a21      	ldr	r2, [pc, #132]	; (8000ec0 <MX_ADC1_Init+0x9c>)
 8000e3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e48:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e64:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <MX_ADC1_Init+0xa0>)
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e82:	480e      	ldr	r0, [pc, #56]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e84:	f000 fc8c 	bl	80017a0 <HAL_ADC_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e8e:	f000 f9fd 	bl	800128c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e92:	230e      	movs	r3, #14
 8000e94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4806      	ldr	r0, [pc, #24]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000ea4:	f000 fcc0 	bl	8001828 <HAL_ADC_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eae:	f000 f9ed 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000154 	.word	0x20000154
 8000ec0:	40012000 	.word	0x40012000
 8000ec4:	0f000001 	.word	0x0f000001

08000ec8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <MX_I2C1_Init+0x78>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <MX_I2C1_Init+0x7c>)
 8000ed6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ee6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000f06:	f001 f9cf 	bl	80022a8 <HAL_I2C_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f10:	f000 f9bc 	bl	800128c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f14:	2100      	movs	r1, #0
 8000f16:	4809      	ldr	r0, [pc, #36]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000f18:	f001 fb0a 	bl	8002530 <HAL_I2CEx_ConfigAnalogFilter>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000f22:	f000 f9b3 	bl	800128c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000f2a:	f001 fb3d 	bl	80025a8 <HAL_I2CEx_ConfigDigitalFilter>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000f34:	f000 f9aa 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000019c 	.word	0x2000019c
 8000f40:	40005400 	.word	0x40005400
 8000f44:	000186a0 	.word	0x000186a0

08000f48 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_SPI4_Init+0x64>)
 8000f4e:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <MX_SPI4_Init+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_SPI4_Init+0x64>)
 8000f54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f58:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_SPI4_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_SPI4_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_SPI4_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_SPI4_Init+0x64>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_SPI4_Init+0x64>)
 8000f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f78:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_SPI4_Init+0x64>)
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <MX_SPI4_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_SPI4_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <MX_SPI4_Init+0x64>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_SPI4_Init+0x64>)
 8000f94:	220a      	movs	r2, #10
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_SPI4_Init+0x64>)
 8000f9a:	f003 fa45 	bl	8004428 <HAL_SPI_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000fa4:	f000 f972 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200001f0 	.word	0x200001f0
 8000fb0:	40013400 	.word	0x40013400

08000fb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_TIM2_Init+0x94>)
 8000fd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_TIM2_Init+0x94>)
 8000fda:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000fde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b19      	ldr	r3, [pc, #100]	; (8001048 <MX_TIM2_Init+0x94>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_TIM2_Init+0x94>)
 8000fe8:	2232      	movs	r2, #50	; 0x32
 8000fea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_TIM2_Init+0x94>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_TIM2_Init+0x94>)
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ff8:	4813      	ldr	r0, [pc, #76]	; (8001048 <MX_TIM2_Init+0x94>)
 8000ffa:	f003 fdc3 	bl	8004b84 <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001004:	f000 f942 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	4619      	mov	r1, r3
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <MX_TIM2_Init+0x94>)
 8001016:	f003 ff7d 	bl	8004f14 <HAL_TIM_ConfigClockSource>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001020:	f000 f934 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_TIM2_Init+0x94>)
 8001032:	f004 f999 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800103c:	f000 f926 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000248 	.word	0x20000248

0800104c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	4b83      	ldr	r3, [pc, #524]	; (8001274 <MX_GPIO_Init+0x228>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a82      	ldr	r2, [pc, #520]	; (8001274 <MX_GPIO_Init+0x228>)
 800106c:	f043 0310 	orr.w	r3, r3, #16
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b80      	ldr	r3, [pc, #512]	; (8001274 <MX_GPIO_Init+0x228>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	4b7c      	ldr	r3, [pc, #496]	; (8001274 <MX_GPIO_Init+0x228>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a7b      	ldr	r2, [pc, #492]	; (8001274 <MX_GPIO_Init+0x228>)
 8001088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b79      	ldr	r3, [pc, #484]	; (8001274 <MX_GPIO_Init+0x228>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b75      	ldr	r3, [pc, #468]	; (8001274 <MX_GPIO_Init+0x228>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a74      	ldr	r2, [pc, #464]	; (8001274 <MX_GPIO_Init+0x228>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b72      	ldr	r3, [pc, #456]	; (8001274 <MX_GPIO_Init+0x228>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b6e      	ldr	r3, [pc, #440]	; (8001274 <MX_GPIO_Init+0x228>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a6d      	ldr	r2, [pc, #436]	; (8001274 <MX_GPIO_Init+0x228>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <MX_GPIO_Init+0x228>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b67      	ldr	r3, [pc, #412]	; (8001274 <MX_GPIO_Init+0x228>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a66      	ldr	r2, [pc, #408]	; (8001274 <MX_GPIO_Init+0x228>)
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b64      	ldr	r3, [pc, #400]	; (8001274 <MX_GPIO_Init+0x228>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b60      	ldr	r3, [pc, #384]	; (8001274 <MX_GPIO_Init+0x228>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a5f      	ldr	r2, [pc, #380]	; (8001274 <MX_GPIO_Init+0x228>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <MX_GPIO_Init+0x228>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|nWakeUp_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001110:	4859      	ldr	r0, [pc, #356]	; (8001278 <MX_GPIO_Init+0x22c>)
 8001112:	f001 f8af 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heater_GPIO_Port, Heater_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2120      	movs	r1, #32
 800111a:	4858      	ldr	r0, [pc, #352]	; (800127c <MX_GPIO_Init+0x230>)
 800111c:	f001 f8aa 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, nRst_Pin|nClr_Pin|nCS_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8001126:	4854      	ldr	r0, [pc, #336]	; (8001278 <MX_GPIO_Init+0x22c>)
 8001128:	f001 f8a4 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nLDAC_GPIO_Port, nLDAC_Pin, GPIO_PIN_SET);
 800112c:	2201      	movs	r2, #1
 800112e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001132:	4853      	ldr	r0, [pc, #332]	; (8001280 <MX_GPIO_Init+0x234>)
 8001134:	f001 f89e 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	4851      	ldr	r0, [pc, #324]	; (8001284 <MX_GPIO_Init+0x238>)
 800113e:	f001 f899 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001142:	2308      	movs	r3, #8
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	4847      	ldr	r0, [pc, #284]	; (8001278 <MX_GPIO_Init+0x22c>)
 800115a:	f000 fec7 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800115e:	2303      	movs	r3, #3
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800116e:	2308      	movs	r3, #8
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	4843      	ldr	r0, [pc, #268]	; (8001288 <MX_GPIO_Init+0x23c>)
 800117a:	f000 feb7 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800117e:	23f0      	movs	r3, #240	; 0xf0
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800118e:	2305      	movs	r3, #5
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	483b      	ldr	r0, [pc, #236]	; (8001288 <MX_GPIO_Init+0x23c>)
 800119a:	f000 fea7 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : Heater_Pin */
  GPIO_InitStruct.Pin = Heater_Pin;
 800119e:	2320      	movs	r3, #32
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Heater_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4831      	ldr	r0, [pc, #196]	; (800127c <MX_GPIO_Init+0x230>)
 80011b6:	f000 fe99 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : nWakeUp_Pin nRst_Pin nClr_Pin nCS_Pin */
  GPIO_InitStruct.Pin = nWakeUp_Pin|nRst_Pin|nClr_Pin|nCS_Pin;
 80011ba:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c8:	2302      	movs	r3, #2
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4829      	ldr	r0, [pc, #164]	; (8001278 <MX_GPIO_Init+0x22c>)
 80011d4:	f000 fe8a 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : nLDAC_Pin */
  GPIO_InitStruct.Pin = nLDAC_Pin;
 80011d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e6:	2302      	movs	r3, #2
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nLDAC_GPIO_Port, &GPIO_InitStruct);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	4823      	ldr	r0, [pc, #140]	; (8001280 <MX_GPIO_Init+0x234>)
 80011f2:	f000 fe7b 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011f6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011fa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001208:	230c      	movs	r3, #12
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	481a      	ldr	r0, [pc, #104]	; (800127c <MX_GPIO_Init+0x230>)
 8001214:	f000 fe6a 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001218:	2301      	movs	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	4815      	ldr	r0, [pc, #84]	; (8001280 <MX_GPIO_Init+0x234>)
 800122c:	f000 fe5e 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001230:	2304      	movs	r3, #4
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001240:	230c      	movs	r3, #12
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_GPIO_Init+0x234>)
 800124c:	f000 fe4e 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	4807      	ldr	r0, [pc, #28]	; (8001284 <MX_GPIO_Init+0x238>)
 8001268:	f000 fe40 	bl	8001eec <HAL_GPIO_Init>

}
 800126c:	bf00      	nop
 800126e:	3730      	adds	r7, #48	; 0x30
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40023800 	.word	0x40023800
 8001278:	40021000 	.word	0x40021000
 800127c:	40020800 	.word	0x40020800
 8001280:	40020c00 	.word	0x40020c00
 8001284:	40020400 	.word	0x40020400
 8001288:	40020000 	.word	0x40020000

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	e7fe      	b.n	8001294 <Error_Handler+0x8>
	...

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <HAL_MspInit+0x4c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <HAL_MspInit+0x4c>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_MspInit+0x4c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_MspInit+0x4c>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800

080012e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_ADC_MspInit+0x7c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d127      	bne.n	800135a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_ADC_MspInit+0x80>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a15      	ldr	r2, [pc, #84]	; (8001368 <HAL_ADC_MspInit+0x80>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_ADC_MspInit+0x80>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_ADC_MspInit+0x80>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_ADC_MspInit+0x80>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_ADC_MspInit+0x80>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001342:	2310      	movs	r3, #16
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001346:	2303      	movs	r3, #3
 8001348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <HAL_ADC_MspInit+0x84>)
 8001356:	f000 fdc9 	bl	8001eec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40012000 	.word	0x40012000
 8001368:	40023800 	.word	0x40023800
 800136c:	40020800 	.word	0x40020800

08001370 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <HAL_I2C_MspInit+0x84>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d12c      	bne.n	80013ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b4:	2312      	movs	r3, #18
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013c0:	2304      	movs	r3, #4
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	480c      	ldr	r0, [pc, #48]	; (80013fc <HAL_I2C_MspInit+0x8c>)
 80013cc:	f000 fd8e 	bl	8001eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 80013da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013de:	6413      	str	r3, [r2, #64]	; 0x40
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_I2C_MspInit+0x88>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40005400 	.word	0x40005400
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020400 	.word	0x40020400

08001400 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_SPI_MspInit+0x94>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d134      	bne.n	800148c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <HAL_SPI_MspInit+0x98>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <HAL_SPI_MspInit+0x98>)
 800142c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001430:	6453      	str	r3, [r2, #68]	; 0x44
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_SPI_MspInit+0x98>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_SPI_MspInit+0x98>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <HAL_SPI_MspInit+0x98>)
 8001448:	f043 0310 	orr.w	r3, r3, #16
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_SPI_MspInit+0x98>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800145a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800146c:	2305      	movs	r3, #5
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4809      	ldr	r0, [pc, #36]	; (800149c <HAL_SPI_MspInit+0x9c>)
 8001478:	f000 fd38 	bl	8001eec <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	2054      	movs	r0, #84	; 0x54
 8001482:	f000 fcda 	bl	8001e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001486:	2054      	movs	r0, #84	; 0x54
 8001488:	f000 fcf3 	bl	8001e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	; 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40013400 	.word	0x40013400
 8001498:	40023800 	.word	0x40023800
 800149c:	40021000 	.word	0x40021000

080014a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b0:	d115      	bne.n	80014de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_TIM_Base_MspInit+0x48>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_TIM_Base_MspInit+0x48>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_TIM_Base_MspInit+0x48>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	201c      	movs	r0, #28
 80014d4:	f000 fcb1 	bl	8001e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d8:	201c      	movs	r0, #28
 80014da:	f000 fcca 	bl	8001e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <NMI_Handler+0x4>

080014f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <MemManage_Handler+0x4>

080014fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <UsageFault_Handler+0x4>

0800150a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001538:	f000 f8ee 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <TIM2_IRQHandler+0x10>)
 8001546:	f003 fbdd 	bl	8004d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000248 	.word	0x20000248

08001554 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <OTG_FS_IRQHandler+0x10>)
 800155a:	f001 f9b4 	bl	80028c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20001774 	.word	0x20001774

08001568 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <SPI4_IRQHandler+0x10>)
 800156e:	f003 f921 	bl	80047b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200001f0 	.word	0x200001f0

0800157c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <InitDWTTimer>:
 */

#include "utils.h"

void InitDWTTimer(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <InitDWTTimer+0x2c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4a08      	ldr	r2, [pc, #32]	; (80015cc <InitDWTTimer+0x2c>)
 80015aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ae:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; // reset the counter
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <InitDWTTimer+0x30>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk ; // enable the counter
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <InitDWTTimer+0x30>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <InitDWTTimer+0x30>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6013      	str	r3, [r2, #0]
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000edf0 	.word	0xe000edf0
 80015d0:	e0001000 	.word	0xe0001000

080015d4 <Delay_us>:

void Delay_us(uint32_t us)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <Delay_us+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <Delay_us+0x44>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0c9b      	lsrs	r3, r3, #18
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	60fb      	str	r3, [r7, #12]
  volatile uint32_t start = DWT->CYCCNT;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <Delay_us+0x48>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	60bb      	str	r3, [r7, #8]
  do  {
  } while((DWT->CYCCNT - start) < cycles);
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <Delay_us+0x48>)
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1ad2      	subs	r2, r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	d3f8      	bcc.n	80015f6 <Delay_us+0x22>




}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008
 8001618:	431bde83 	.word	0x431bde83
 800161c:	e0001000 	.word	0xe0001000

08001620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001658 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001624:	480d      	ldr	r0, [pc, #52]	; (800165c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001626:	490e      	ldr	r1, [pc, #56]	; (8001660 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001628:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800162c:	e002      	b.n	8001634 <LoopCopyDataInit>

0800162e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001632:	3304      	adds	r3, #4

08001634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001638:	d3f9      	bcc.n	800162e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800163c:	4c0b      	ldr	r4, [pc, #44]	; (800166c <LoopFillZerobss+0x26>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001640:	e001      	b.n	8001646 <LoopFillZerobss>

08001642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001644:	3204      	adds	r2, #4

08001646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001648:	d3fb      	bcc.n	8001642 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800164a:	f7ff ff97 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164e:	f007 ffdf 	bl	8009610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001652:	f7ff fabd 	bl	8000bd0 <main>
  bx  lr    
 8001656:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001658:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001664:	080096f0 	.word	0x080096f0
  ldr r2, =_sbss
 8001668:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 800166c:	20001ea0 	.word	0x20001ea0

08001670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC_IRQHandler>
	...

08001674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <HAL_Init+0x40>)
 800167e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_Init+0x40>)
 800168a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <HAL_Init+0x40>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 fbc1 	bl	8001e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	200f      	movs	r0, #15
 80016a4:	f000 f808 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f7ff fdf6 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x54>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x58>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fbd9 	bl	8001e8e <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f000 fba1 	bl	8001e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <HAL_InitTick+0x5c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000008 	.word	0x20000008
 8001710:	20000010 	.word	0x20000010
 8001714:	2000000c 	.word	0x2000000c

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000010 	.word	0x20000010
 800173c:	20000290 	.word	0x20000290

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000290 	.word	0x20000290

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ffee 	bl	8001740 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d005      	beq.n	800177e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_Delay+0x44>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177e:	bf00      	nop
 8001780:	f7ff ffde 	bl	8001740 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	d8f7      	bhi.n	8001780 <HAL_Delay+0x28>
  {
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000010 	.word	0x20000010

080017a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e033      	b.n	800181e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fd92 	bl	80012e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d118      	bne.n	8001810 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017e6:	f023 0302 	bic.w	r3, r3, #2
 80017ea:	f043 0202 	orr.w	r2, r3, #2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f94a 	bl	8001a8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f023 0303 	bic.w	r3, r3, #3
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	641a      	str	r2, [r3, #64]	; 0x40
 800180e:	e001      	b.n	8001814 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x1c>
 8001840:	2302      	movs	r3, #2
 8001842:	e113      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x244>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b09      	cmp	r3, #9
 8001852:	d925      	bls.n	80018a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68d9      	ldr	r1, [r3, #12]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	461a      	mov	r2, r3
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	3b1e      	subs	r3, #30
 800186a:	2207      	movs	r2, #7
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43da      	mvns	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	400a      	ands	r2, r1
 8001878:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68d9      	ldr	r1, [r3, #12]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b29b      	uxth	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	4603      	mov	r3, r0
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4403      	add	r3, r0
 8001892:	3b1e      	subs	r3, #30
 8001894:	409a      	lsls	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	e022      	b.n	80018e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6919      	ldr	r1, [r3, #16]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	2207      	movs	r2, #7
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	400a      	ands	r2, r1
 80018c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6919      	ldr	r1, [r3, #16]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4403      	add	r3, r0
 80018dc:	409a      	lsls	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d824      	bhi.n	8001938 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	3b05      	subs	r3, #5
 8001900:	221f      	movs	r2, #31
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	400a      	ands	r2, r1
 800190e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	3b05      	subs	r3, #5
 800192a:	fa00 f203 	lsl.w	r2, r0, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	635a      	str	r2, [r3, #52]	; 0x34
 8001936:	e04c      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d824      	bhi.n	800198a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	3b23      	subs	r3, #35	; 0x23
 8001952:	221f      	movs	r2, #31
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43da      	mvns	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	400a      	ands	r2, r1
 8001960:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	4618      	mov	r0, r3
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3b23      	subs	r3, #35	; 0x23
 800197c:	fa00 f203 	lsl.w	r2, r0, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
 8001988:	e023      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	3b41      	subs	r3, #65	; 0x41
 800199c:	221f      	movs	r2, #31
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	400a      	ands	r2, r1
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b41      	subs	r3, #65	; 0x41
 80019c6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019d2:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <HAL_ADC_ConfigChannel+0x250>)
 80019d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a28      	ldr	r2, [pc, #160]	; (8001a7c <HAL_ADC_ConfigChannel+0x254>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d10f      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x1d8>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b12      	cmp	r3, #18
 80019e6:	d10b      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <HAL_ADC_ConfigChannel+0x254>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d12b      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x23a>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <HAL_ADC_ConfigChannel+0x258>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d003      	beq.n	8001a1c <HAL_ADC_ConfigChannel+0x1f4>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b11      	cmp	r3, #17
 8001a1a:	d122      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <HAL_ADC_ConfigChannel+0x258>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d111      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_ADC_ConfigChannel+0x25c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a11      	ldr	r2, [pc, #68]	; (8001a88 <HAL_ADC_ConfigChannel+0x260>)
 8001a44:	fba2 2303 	umull	r2, r3, r2, r3
 8001a48:	0c9a      	lsrs	r2, r3, #18
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a54:	e002      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f9      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40012300 	.word	0x40012300
 8001a7c:	40012000 	.word	0x40012000
 8001a80:	10000012 	.word	0x10000012
 8001a84:	20000008 	.word	0x20000008
 8001a88:	431bde83 	.word	0x431bde83

08001a8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a94:	4b79      	ldr	r3, [pc, #484]	; (8001c7c <ADC_Init+0x1f0>)
 8001a96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ac0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	021a      	lsls	r2, r3, #8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ae4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6859      	ldr	r1, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6899      	ldr	r1, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <ADC_Init+0x1f4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d022      	beq.n	8001b6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6899      	ldr	r1, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6899      	ldr	r1, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	e00f      	b.n	8001b8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0202 	bic.w	r2, r2, #2
 8001b98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6899      	ldr	r1, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7e1b      	ldrb	r3, [r3, #24]
 8001ba4:	005a      	lsls	r2, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01b      	beq.n	8001bf0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bc6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6859      	ldr	r1, [r3, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	3b01      	subs	r3, #1
 8001be4:	035a      	lsls	r2, r3, #13
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	e007      	b.n	8001c00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bfe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	051a      	lsls	r2, r3, #20
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6899      	ldr	r1, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c42:	025a      	lsls	r2, r3, #9
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6899      	ldr	r1, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	029a      	lsls	r2, r3, #10
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	609a      	str	r2, [r3, #8]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	40012300 	.word	0x40012300
 8001c80:	0f000001 	.word	0x0f000001

08001c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	60d3      	str	r3, [r2, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd0:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	f003 0307 	and.w	r3, r3, #7
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db0b      	blt.n	8001d12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	4907      	ldr	r1, [pc, #28]	; (8001d20 <__NVIC_EnableIRQ+0x38>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	2001      	movs	r0, #1
 8001d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000e100 	.word	0xe000e100

08001d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	db0a      	blt.n	8001d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	490c      	ldr	r1, [pc, #48]	; (8001d70 <__NVIC_SetPriority+0x4c>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	0112      	lsls	r2, r2, #4
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	440b      	add	r3, r1
 8001d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d4c:	e00a      	b.n	8001d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4908      	ldr	r1, [pc, #32]	; (8001d74 <__NVIC_SetPriority+0x50>)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	3b04      	subs	r3, #4
 8001d5c:	0112      	lsls	r2, r2, #4
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	440b      	add	r3, r1
 8001d62:	761a      	strb	r2, [r3, #24]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f1c3 0307 	rsb	r3, r3, #7
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	bf28      	it	cs
 8001d96:	2304      	movcs	r3, #4
 8001d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d902      	bls.n	8001da8 <NVIC_EncodePriority+0x30>
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3b03      	subs	r3, #3
 8001da6:	e000      	b.n	8001daa <NVIC_EncodePriority+0x32>
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	f04f 32ff 	mov.w	r2, #4294967295
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	401a      	ands	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43d9      	mvns	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	4313      	orrs	r3, r2
         );
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3724      	adds	r7, #36	; 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df0:	d301      	bcc.n	8001df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00f      	b.n	8001e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <SysTick_Config+0x40>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfe:	210f      	movs	r1, #15
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295
 8001e04:	f7ff ff8e 	bl	8001d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <SysTick_Config+0x40>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <SysTick_Config+0x40>)
 8001e10:	2207      	movs	r2, #7
 8001e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	e000e010 	.word	0xe000e010

08001e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff29 	bl	8001c84 <__NVIC_SetPriorityGrouping>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4c:	f7ff ff3e 	bl	8001ccc <__NVIC_GetPriorityGrouping>
 8001e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	6978      	ldr	r0, [r7, #20]
 8001e58:	f7ff ff8e 	bl	8001d78 <NVIC_EncodePriority>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff5d 	bl	8001d24 <__NVIC_SetPriority>
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff31 	bl	8001ce8 <__NVIC_EnableIRQ>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ffa2 	bl	8001de0 <SysTick_Config>
 8001e9c:	4603      	mov	r3, r0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d004      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2280      	movs	r2, #128	; 0x80
 8001ebe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e00c      	b.n	8001ede <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2205      	movs	r2, #5
 8001ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	e177      	b.n	80021f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f040 8166 	bne.w	80021f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d005      	beq.n	8001f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d130      	bne.n	8001fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f74:	2201      	movs	r2, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 0201 	and.w	r2, r3, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d017      	beq.n	8001fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d123      	bne.n	8002030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	08da      	lsrs	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3208      	adds	r2, #8
 800202a:	69b9      	ldr	r1, [r7, #24]
 800202c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80c0 	beq.w	80021f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	4b66      	ldr	r3, [pc, #408]	; (8002210 <HAL_GPIO_Init+0x324>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	4a65      	ldr	r2, [pc, #404]	; (8002210 <HAL_GPIO_Init+0x324>)
 800207c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002080:	6453      	str	r3, [r2, #68]	; 0x44
 8002082:	4b63      	ldr	r3, [pc, #396]	; (8002210 <HAL_GPIO_Init+0x324>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800208e:	4a61      	ldr	r2, [pc, #388]	; (8002214 <HAL_GPIO_Init+0x328>)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	220f      	movs	r2, #15
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a58      	ldr	r2, [pc, #352]	; (8002218 <HAL_GPIO_Init+0x32c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d037      	beq.n	800212a <HAL_GPIO_Init+0x23e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a57      	ldr	r2, [pc, #348]	; (800221c <HAL_GPIO_Init+0x330>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d031      	beq.n	8002126 <HAL_GPIO_Init+0x23a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a56      	ldr	r2, [pc, #344]	; (8002220 <HAL_GPIO_Init+0x334>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d02b      	beq.n	8002122 <HAL_GPIO_Init+0x236>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a55      	ldr	r2, [pc, #340]	; (8002224 <HAL_GPIO_Init+0x338>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d025      	beq.n	800211e <HAL_GPIO_Init+0x232>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a54      	ldr	r2, [pc, #336]	; (8002228 <HAL_GPIO_Init+0x33c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01f      	beq.n	800211a <HAL_GPIO_Init+0x22e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a53      	ldr	r2, [pc, #332]	; (800222c <HAL_GPIO_Init+0x340>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d019      	beq.n	8002116 <HAL_GPIO_Init+0x22a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a52      	ldr	r2, [pc, #328]	; (8002230 <HAL_GPIO_Init+0x344>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d013      	beq.n	8002112 <HAL_GPIO_Init+0x226>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a51      	ldr	r2, [pc, #324]	; (8002234 <HAL_GPIO_Init+0x348>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00d      	beq.n	800210e <HAL_GPIO_Init+0x222>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a50      	ldr	r2, [pc, #320]	; (8002238 <HAL_GPIO_Init+0x34c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d007      	beq.n	800210a <HAL_GPIO_Init+0x21e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4f      	ldr	r2, [pc, #316]	; (800223c <HAL_GPIO_Init+0x350>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d101      	bne.n	8002106 <HAL_GPIO_Init+0x21a>
 8002102:	2309      	movs	r3, #9
 8002104:	e012      	b.n	800212c <HAL_GPIO_Init+0x240>
 8002106:	230a      	movs	r3, #10
 8002108:	e010      	b.n	800212c <HAL_GPIO_Init+0x240>
 800210a:	2308      	movs	r3, #8
 800210c:	e00e      	b.n	800212c <HAL_GPIO_Init+0x240>
 800210e:	2307      	movs	r3, #7
 8002110:	e00c      	b.n	800212c <HAL_GPIO_Init+0x240>
 8002112:	2306      	movs	r3, #6
 8002114:	e00a      	b.n	800212c <HAL_GPIO_Init+0x240>
 8002116:	2305      	movs	r3, #5
 8002118:	e008      	b.n	800212c <HAL_GPIO_Init+0x240>
 800211a:	2304      	movs	r3, #4
 800211c:	e006      	b.n	800212c <HAL_GPIO_Init+0x240>
 800211e:	2303      	movs	r3, #3
 8002120:	e004      	b.n	800212c <HAL_GPIO_Init+0x240>
 8002122:	2302      	movs	r3, #2
 8002124:	e002      	b.n	800212c <HAL_GPIO_Init+0x240>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_GPIO_Init+0x240>
 800212a:	2300      	movs	r3, #0
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	f002 0203 	and.w	r2, r2, #3
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	4093      	lsls	r3, r2
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800213c:	4935      	ldr	r1, [pc, #212]	; (8002214 <HAL_GPIO_Init+0x328>)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_GPIO_Init+0x354>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800216e:	4a34      	ldr	r2, [pc, #208]	; (8002240 <HAL_GPIO_Init+0x354>)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002174:	4b32      	ldr	r3, [pc, #200]	; (8002240 <HAL_GPIO_Init+0x354>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002198:	4a29      	ldr	r2, [pc, #164]	; (8002240 <HAL_GPIO_Init+0x354>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800219e:	4b28      	ldr	r3, [pc, #160]	; (8002240 <HAL_GPIO_Init+0x354>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021c2:	4a1f      	ldr	r2, [pc, #124]	; (8002240 <HAL_GPIO_Init+0x354>)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_GPIO_Init+0x354>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <HAL_GPIO_Init+0x354>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3301      	adds	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b0f      	cmp	r3, #15
 80021fc:	f67f ae84 	bls.w	8001f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3724      	adds	r7, #36	; 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	40013800 	.word	0x40013800
 8002218:	40020000 	.word	0x40020000
 800221c:	40020400 	.word	0x40020400
 8002220:	40020800 	.word	0x40020800
 8002224:	40020c00 	.word	0x40020c00
 8002228:	40021000 	.word	0x40021000
 800222c:	40021400 	.word	0x40021400
 8002230:	40021800 	.word	0x40021800
 8002234:	40021c00 	.word	0x40021c00
 8002238:	40022000 	.word	0x40022000
 800223c:	40022400 	.word	0x40022400
 8002240:	40013c00 	.word	0x40013c00

08002244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	887b      	ldrh	r3, [r7, #2]
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	e001      	b.n	8002266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
 8002280:	4613      	mov	r3, r2
 8002282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002284:	787b      	ldrb	r3, [r7, #1]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002290:	e003      	b.n	800229a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	041a      	lsls	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	619a      	str	r2, [r3, #24]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e12b      	b.n	8002512 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff f84e 	bl	8001370 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2224      	movs	r2, #36	; 0x24
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800230a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800230c:	f002 f878 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8002310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4a81      	ldr	r2, [pc, #516]	; (800251c <HAL_I2C_Init+0x274>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d807      	bhi.n	800232c <HAL_I2C_Init+0x84>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4a80      	ldr	r2, [pc, #512]	; (8002520 <HAL_I2C_Init+0x278>)
 8002320:	4293      	cmp	r3, r2
 8002322:	bf94      	ite	ls
 8002324:	2301      	movls	r3, #1
 8002326:	2300      	movhi	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e006      	b.n	800233a <HAL_I2C_Init+0x92>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a7d      	ldr	r2, [pc, #500]	; (8002524 <HAL_I2C_Init+0x27c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	bf94      	ite	ls
 8002334:	2301      	movls	r3, #1
 8002336:	2300      	movhi	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0e7      	b.n	8002512 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a78      	ldr	r2, [pc, #480]	; (8002528 <HAL_I2C_Init+0x280>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0c9b      	lsrs	r3, r3, #18
 800234c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	430a      	orrs	r2, r1
 8002360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4a6a      	ldr	r2, [pc, #424]	; (800251c <HAL_I2C_Init+0x274>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d802      	bhi.n	800237c <HAL_I2C_Init+0xd4>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	3301      	adds	r3, #1
 800237a:	e009      	b.n	8002390 <HAL_I2C_Init+0xe8>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	4a69      	ldr	r2, [pc, #420]	; (800252c <HAL_I2C_Init+0x284>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	3301      	adds	r3, #1
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	430b      	orrs	r3, r1
 8002396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	495c      	ldr	r1, [pc, #368]	; (800251c <HAL_I2C_Init+0x274>)
 80023ac:	428b      	cmp	r3, r1
 80023ae:	d819      	bhi.n	80023e4 <HAL_I2C_Init+0x13c>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1e59      	subs	r1, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80023be:	1c59      	adds	r1, r3, #1
 80023c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023c4:	400b      	ands	r3, r1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_I2C_Init+0x138>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1e59      	subs	r1, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023d8:	3301      	adds	r3, #1
 80023da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023de:	e051      	b.n	8002484 <HAL_I2C_Init+0x1dc>
 80023e0:	2304      	movs	r3, #4
 80023e2:	e04f      	b.n	8002484 <HAL_I2C_Init+0x1dc>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d111      	bne.n	8002410 <HAL_I2C_Init+0x168>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1e58      	subs	r0, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	440b      	add	r3, r1
 80023fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023fe:	3301      	adds	r3, #1
 8002400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e012      	b.n	8002436 <HAL_I2C_Init+0x18e>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1e58      	subs	r0, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	0099      	lsls	r1, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	fbb0 f3f3 	udiv	r3, r0, r3
 8002426:	3301      	adds	r3, #1
 8002428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_Init+0x196>
 800243a:	2301      	movs	r3, #1
 800243c:	e022      	b.n	8002484 <HAL_I2C_Init+0x1dc>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10e      	bne.n	8002464 <HAL_I2C_Init+0x1bc>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1e58      	subs	r0, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	440b      	add	r3, r1
 8002454:	fbb0 f3f3 	udiv	r3, r0, r3
 8002458:	3301      	adds	r3, #1
 800245a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002462:	e00f      	b.n	8002484 <HAL_I2C_Init+0x1dc>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1e58      	subs	r0, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	0099      	lsls	r1, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	fbb0 f3f3 	udiv	r3, r0, r3
 800247a:	3301      	adds	r3, #1
 800247c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	6809      	ldr	r1, [r1, #0]
 8002488:	4313      	orrs	r3, r2
 800248a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6911      	ldr	r1, [r2, #16]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68d2      	ldr	r2, [r2, #12]
 80024be:	4311      	orrs	r1, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	430b      	orrs	r3, r1
 80024c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	000186a0 	.word	0x000186a0
 8002520:	001e847f 	.word	0x001e847f
 8002524:	003d08ff 	.word	0x003d08ff
 8002528:	431bde83 	.word	0x431bde83
 800252c:	10624dd3 	.word	0x10624dd3

08002530 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b20      	cmp	r3, #32
 8002544:	d129      	bne.n	800259a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2224      	movs	r2, #36	; 0x24
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0210 	bic.w	r2, r2, #16
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
  }
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b20      	cmp	r3, #32
 80025c0:	d12a      	bne.n	8002618 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2224      	movs	r2, #36	; 0x24
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0201 	bic.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80025e2:	89fb      	ldrh	r3, [r7, #14]
 80025e4:	f023 030f 	bic.w	r3, r3, #15
 80025e8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	89fb      	ldrh	r3, [r7, #14]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	89fa      	ldrh	r2, [r7, #14]
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	e000      	b.n	800261a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002618:	2302      	movs	r3, #2
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002628:	b08f      	sub	sp, #60	; 0x3c
 800262a:	af0a      	add	r7, sp, #40	; 0x28
 800262c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e10f      	b.n	8002858 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f006 fcc8 	bl	8008fe8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2203      	movs	r2, #3
 800265c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f003 f81b 	bl	80056b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	687e      	ldr	r6, [r7, #4]
 8002684:	466d      	mov	r5, sp
 8002686:	f106 0410 	add.w	r4, r6, #16
 800268a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800268c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800268e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002692:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002696:	e885 0003 	stmia.w	r5, {r0, r1}
 800269a:	1d33      	adds	r3, r6, #4
 800269c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800269e:	6838      	ldr	r0, [r7, #0]
 80026a0:	f002 fef2 	bl	8005488 <USB_CoreInit>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0d0      	b.n	8002858 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f003 f809 	bl	80056d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	73fb      	strb	r3, [r7, #15]
 80026c6:	e04a      	b.n	800275e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	333d      	adds	r3, #61	; 0x3d
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	333c      	adds	r3, #60	; 0x3c
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026f0:	7bfa      	ldrb	r2, [r7, #15]
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	b298      	uxth	r0, r3
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	3344      	adds	r3, #68	; 0x44
 8002704:	4602      	mov	r2, r0
 8002706:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	3340      	adds	r3, #64	; 0x40
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	3348      	adds	r3, #72	; 0x48
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	334c      	adds	r3, #76	; 0x4c
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	3354      	adds	r3, #84	; 0x54
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	3301      	adds	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	d3af      	bcc.n	80026c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e044      	b.n	80027f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027b0:	7bfa      	ldrb	r2, [r7, #15]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	3301      	adds	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d3b5      	bcc.n	800276e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	687e      	ldr	r6, [r7, #4]
 800280a:	466d      	mov	r5, sp
 800280c:	f106 0410 	add.w	r4, r6, #16
 8002810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002818:	e894 0003 	ldmia.w	r4, {r0, r1}
 800281c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002820:	1d33      	adds	r3, r6, #4
 8002822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002824:	6838      	ldr	r0, [r7, #0]
 8002826:	f002 ffa1 	bl	800576c <USB_DevInit>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e00d      	b.n	8002858 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f004 f8f0 	bl	8006a36 <USB_DevDisconnect>

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002860 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_PCD_Start+0x1c>
 8002878:	2302      	movs	r3, #2
 800287a:	e020      	b.n	80028be <HAL_PCD_Start+0x5e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	2b01      	cmp	r3, #1
 800288a:	d109      	bne.n	80028a0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002890:	2b01      	cmp	r3, #1
 8002892:	d005      	beq.n	80028a0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f002 fef3 	bl	8005690 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 f8a0 	bl	80069f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028c6:	b590      	push	{r4, r7, lr}
 80028c8:	b08d      	sub	sp, #52	; 0x34
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f004 f95e 	bl	8006b9e <USB_GetMode>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f040 848a 	bne.w	80031fe <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 f8c2 	bl	8006a78 <USB_ReadInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8480 	beq.w	80031fc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f004 f8af 	bl	8006a78 <USB_ReadInterrupts>
 800291a:	4603      	mov	r3, r0
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b02      	cmp	r3, #2
 8002922:	d107      	bne.n	8002934 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f002 0202 	and.w	r2, r2, #2
 8002932:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f004 f89d 	bl	8006a78 <USB_ReadInterrupts>
 800293e:	4603      	mov	r3, r0
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b10      	cmp	r3, #16
 8002946:	d161      	bne.n	8002a0c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0210 	bic.w	r2, r2, #16
 8002956:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	f003 020f 	and.w	r2, r3, #15
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	3304      	adds	r3, #4
 8002976:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	0c5b      	lsrs	r3, r3, #17
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	2b02      	cmp	r3, #2
 8002982:	d124      	bne.n	80029ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d035      	beq.n	80029fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	091b      	lsrs	r3, r3, #4
 8002998:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800299a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800299e:	b29b      	uxth	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	6a38      	ldr	r0, [r7, #32]
 80029a4:	f003 fed4 	bl	8006750 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b4:	441a      	add	r2, r3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	6a1a      	ldr	r2, [r3, #32]
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029c6:	441a      	add	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	621a      	str	r2, [r3, #32]
 80029cc:	e016      	b.n	80029fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	0c5b      	lsrs	r3, r3, #17
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d110      	bne.n	80029fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029e0:	2208      	movs	r2, #8
 80029e2:	4619      	mov	r1, r3
 80029e4:	6a38      	ldr	r0, [r7, #32]
 80029e6:	f003 feb3 	bl	8006750 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	6a1a      	ldr	r2, [r3, #32]
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f6:	441a      	add	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0210 	orr.w	r2, r2, #16
 8002a0a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f004 f831 	bl	8006a78 <USB_ReadInterrupts>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a20:	f040 80a7 	bne.w	8002b72 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f004 f836 	bl	8006a9e <USB_ReadDevAllOutEpInterrupt>
 8002a32:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a34:	e099      	b.n	8002b6a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 808e 	beq.w	8002b5e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 f85a 	bl	8006b06 <USB_ReadDevOutEPInterrupt>
 8002a52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fec2 	bl	80037fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00c      	beq.n	8002a9c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2308      	movs	r3, #8
 8002a92:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 ff98 	bl	80039cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d008      	beq.n	8002ab8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2310      	movs	r3, #16
 8002ab6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d030      	beq.n	8002b24 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	2b80      	cmp	r3, #128	; 0x80
 8002acc:	d109      	bne.n	8002ae2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002adc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ae0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	3304      	adds	r3, #4
 8002af6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	78db      	ldrb	r3, [r3, #3]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d108      	bne.n	8002b12 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2200      	movs	r2, #0
 8002b04:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f006 fb71 	bl	80091f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2302      	movs	r3, #2
 8002b22:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b56:	461a      	mov	r2, r3
 8002b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b5c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	3301      	adds	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f47f af62 	bne.w	8002a36 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 ff7e 	bl	8006a78 <USB_ReadInterrupts>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b86:	f040 80db 	bne.w	8002d40 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f003 ff9f 	bl	8006ad2 <USB_ReadDevAllInEpInterrupt>
 8002b94:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b9a:	e0cd      	b.n	8002d38 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80c2 	beq.w	8002d2c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f003 ffc5 	bl	8006b42 <USB_ReadDevInEPInterrupt>
 8002bb8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d057      	beq.n	8002c74 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	2201      	movs	r2, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69f9      	ldr	r1, [r7, #28]
 8002be0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002be4:	4013      	ands	r3, r2
 8002be6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d132      	bne.n	8002c68 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	334c      	adds	r3, #76	; 0x4c
 8002c12:	6819      	ldr	r1, [r3, #0]
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4403      	add	r3, r0
 8002c22:	3348      	adds	r3, #72	; 0x48
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4419      	add	r1, r3
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4403      	add	r3, r0
 8002c36:	334c      	adds	r3, #76	; 0x4c
 8002c38:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d113      	bne.n	8002c68 <HAL_PCD_IRQHandler+0x3a2>
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3354      	adds	r3, #84	; 0x54
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d108      	bne.n	8002c68 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c60:	461a      	mov	r2, r3
 8002c62:	2101      	movs	r1, #1
 8002c64:	f003 ffcc 	bl	8006c00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f006 fa3b 	bl	80090ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2310      	movs	r3, #16
 8002caa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	2340      	movs	r3, #64	; 0x40
 8002cc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d023      	beq.n	8002d1a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002cd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cd4:	6a38      	ldr	r0, [r7, #32]
 8002cd6:	f002 fead 	bl	8005a34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	3338      	adds	r3, #56	; 0x38
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	3304      	adds	r3, #4
 8002cec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	78db      	ldrb	r3, [r3, #3]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d108      	bne.n	8002d08 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	4619      	mov	r1, r3
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f006 fa88 	bl	8009218 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d14:	461a      	mov	r2, r3
 8002d16:	2302      	movs	r3, #2
 8002d18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fcdb 	bl	80036e2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	3301      	adds	r3, #1
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f47f af2e 	bne.w	8002b9c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f003 fe97 	bl	8006a78 <USB_ReadInterrupts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d54:	d122      	bne.n	8002d9c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d108      	bne.n	8002d86 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fec2 	bl	8003b08 <HAL_PCDEx_LPM_Callback>
 8002d84:	e002      	b.n	8002d8c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f006 fa26 	bl	80091d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 fe69 	bl	8006a78 <USB_ReadInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db0:	d112      	bne.n	8002dd8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d102      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f006 f9e2 	bl	800918c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002dd6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 fe4b 	bl	8006a78 <USB_ReadInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dec:	f040 80b7 	bne.w	8002f5e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2110      	movs	r1, #16
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f002 fe12 	bl	8005a34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e10:	2300      	movs	r3, #0
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e14:	e046      	b.n	8002ea4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e22:	461a      	mov	r2, r3
 8002e24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e28:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3a:	0151      	lsls	r1, r2, #5
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	440a      	add	r2, r1
 8002e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e56:	461a      	mov	r2, r3
 8002e58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e5c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e6e:	0151      	lsls	r1, r2, #5
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	440a      	add	r2, r1
 8002e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e8e:	0151      	lsls	r1, r2, #5
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	440a      	add	r2, r1
 8002e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e9c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d3b3      	bcc.n	8002e16 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ebc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ec0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d016      	beq.n	8002ef8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eda:	f043 030b 	orr.w	r3, r3, #11
 8002ede:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ef0:	f043 030b 	orr.w	r3, r3, #11
 8002ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef6:	e015      	b.n	8002f24 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f0a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f0e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f1e:	f043 030b 	orr.w	r3, r3, #11
 8002f22:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f36:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f003 fe59 	bl	8006c00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 fd88 	bl	8006a78 <USB_ReadInterrupts>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f72:	d124      	bne.n	8002fbe <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 fe1e 	bl	8006bba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 fdd3 	bl	8005b2e <USB_GetDevSpeed>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681c      	ldr	r4, [r3, #0]
 8002f94:	f001 fa28 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8002f98:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f002 fad2 	bl	800554c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f006 f8c6 	bl	800913a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f003 fd58 	bl	8006a78 <USB_ReadInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f006 f8a3 	bl	800911e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f002 0208 	and.w	r2, r2, #8
 8002fe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f003 fd43 	bl	8006a78 <USB_ReadInterrupts>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff8:	2b80      	cmp	r3, #128	; 0x80
 8002ffa:	d122      	bne.n	8003042 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003008:	2301      	movs	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
 800300c:	e014      	b.n	8003038 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d105      	bne.n	8003032 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	b2db      	uxtb	r3, r3
 800302a:	4619      	mov	r1, r3
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fb27 	bl	8003680 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	3301      	adds	r3, #1
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303e:	429a      	cmp	r2, r3
 8003040:	d3e5      	bcc.n	800300e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f003 fd16 	bl	8006a78 <USB_ReadInterrupts>
 800304c:	4603      	mov	r3, r0
 800304e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003056:	d13b      	bne.n	80030d0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003058:	2301      	movs	r3, #1
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
 800305c:	e02b      	b.n	80030b6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	4413      	add	r3, r2
 8003066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	3340      	adds	r3, #64	; 0x40
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d115      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003084:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003086:	2b00      	cmp	r3, #0
 8003088:	da12      	bge.n	80030b0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	333f      	adds	r3, #63	; 0x3f
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fae8 	bl	8003680 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	3301      	adds	r3, #1
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030bc:	429a      	cmp	r2, r3
 80030be:	d3ce      	bcc.n	800305e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f003 fccf 	bl	8006a78 <USB_ReadInterrupts>
 80030da:	4603      	mov	r3, r0
 80030dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030e4:	d155      	bne.n	8003192 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030e6:	2301      	movs	r3, #1
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ea:	e045      	b.n	8003178 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d12e      	bne.n	8003172 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003114:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003116:	2b00      	cmp	r3, #0
 8003118:	da2b      	bge.n	8003172 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003126:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800312a:	429a      	cmp	r2, r3
 800312c:	d121      	bne.n	8003172 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003132:	4613      	mov	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003140:	2201      	movs	r2, #1
 8003142:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10a      	bne.n	8003172 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800316a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800316e:	6053      	str	r3, [r2, #4]
            break;
 8003170:	e007      	b.n	8003182 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	3301      	adds	r3, #1
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317e:	429a      	cmp	r2, r3
 8003180:	d3b4      	bcc.n	80030ec <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f003 fc6e 	bl	8006a78 <USB_ReadInterrupts>
 800319c:	4603      	mov	r3, r0
 800319e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a6:	d10a      	bne.n	80031be <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f006 f847 	bl	800923c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f003 fc58 	bl	8006a78 <USB_ReadInterrupts>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d115      	bne.n	80031fe <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f006 f837 	bl	8009258 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	e000      	b.n	80031fe <HAL_PCD_IRQHandler+0x938>
      return;
 80031fc:	bf00      	nop
    }
  }
}
 80031fe:	3734      	adds	r7, #52	; 0x34
 8003200:	46bd      	mov	sp, r7
 8003202:	bd90      	pop	{r4, r7, pc}

08003204 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_PCD_SetAddress+0x1a>
 800321a:	2302      	movs	r3, #2
 800321c:	e013      	b.n	8003246 <HAL_PCD_SetAddress+0x42>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f003 fbb6 	bl	80069a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	4608      	mov	r0, r1
 8003258:	4611      	mov	r1, r2
 800325a:	461a      	mov	r2, r3
 800325c:	4603      	mov	r3, r0
 800325e:	70fb      	strb	r3, [r7, #3]
 8003260:	460b      	mov	r3, r1
 8003262:	803b      	strh	r3, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800326c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003270:	2b00      	cmp	r3, #0
 8003272:	da0f      	bge.n	8003294 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	f003 020f 	and.w	r2, r3, #15
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	3338      	adds	r3, #56	; 0x38
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	4413      	add	r3, r2
 8003288:	3304      	adds	r3, #4
 800328a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	705a      	strb	r2, [r3, #1]
 8003292:	e00f      	b.n	80032b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	f003 020f 	and.w	r2, r3, #15
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	3304      	adds	r3, #4
 80032ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80032c0:	883a      	ldrh	r2, [r7, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	78ba      	ldrb	r2, [r7, #2]
 80032ca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	785b      	ldrb	r3, [r3, #1]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d004      	beq.n	80032de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032de:	78bb      	ldrb	r3, [r7, #2]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d102      	bne.n	80032ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_PCD_EP_Open+0xaa>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e00e      	b.n	8003316 <HAL_PCD_EP_Open+0xc8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68f9      	ldr	r1, [r7, #12]
 8003306:	4618      	mov	r0, r3
 8003308:	f002 fc36 	bl	8005b78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003314:	7afb      	ldrb	r3, [r7, #11]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800332a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800332e:	2b00      	cmp	r3, #0
 8003330:	da0f      	bge.n	8003352 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	f003 020f 	and.w	r2, r3, #15
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	3338      	adds	r3, #56	; 0x38
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	3304      	adds	r3, #4
 8003348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	705a      	strb	r2, [r3, #1]
 8003350:	e00f      	b.n	8003372 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	f003 020f 	and.w	r2, r3, #15
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	3304      	adds	r3, #4
 800336a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	b2da      	uxtb	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_PCD_EP_Close+0x6e>
 8003388:	2302      	movs	r3, #2
 800338a:	e00e      	b.n	80033aa <HAL_PCD_EP_Close+0x8c>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68f9      	ldr	r1, [r7, #12]
 800339a:	4618      	mov	r0, r3
 800339c:	f002 fc74 	bl	8005c88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	460b      	mov	r3, r1
 80033c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c2:	7afb      	ldrb	r3, [r7, #11]
 80033c4:	f003 020f 	and.w	r2, r3, #15
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	3304      	adds	r3, #4
 80033da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2200      	movs	r2, #0
 80033ec:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2200      	movs	r2, #0
 80033f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033f4:	7afb      	ldrb	r3, [r7, #11]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d102      	bne.n	800340e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800340e:	7afb      	ldrb	r3, [r7, #11]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	2b00      	cmp	r3, #0
 8003416:	d109      	bne.n	800342c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	6979      	ldr	r1, [r7, #20]
 8003426:	f002 ff53 	bl	80062d0 <USB_EP0StartXfer>
 800342a:	e008      	b.n	800343e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	6979      	ldr	r1, [r7, #20]
 800343a:	f002 fd01 	bl	8005e40 <USB_EPStartXfer>
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	f003 020f 	and.w	r2, r3, #15
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	460b      	mov	r3, r1
 8003486:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003488:	7afb      	ldrb	r3, [r7, #11]
 800348a:	f003 020f 	and.w	r2, r3, #15
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	3338      	adds	r3, #56	; 0x38
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	3304      	adds	r3, #4
 800349e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2200      	movs	r2, #0
 80034b0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2201      	movs	r2, #1
 80034b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034b8:	7afb      	ldrb	r3, [r7, #11]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d102      	bne.n	80034d2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034d2:	7afb      	ldrb	r3, [r7, #11]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d109      	bne.n	80034f0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	6979      	ldr	r1, [r7, #20]
 80034ea:	f002 fef1 	bl	80062d0 <USB_EP0StartXfer>
 80034ee:	e008      	b.n	8003502 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	6979      	ldr	r1, [r7, #20]
 80034fe:	f002 fc9f 	bl	8005e40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	f003 020f 	and.w	r2, r3, #15
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	429a      	cmp	r2, r3
 8003524:	d901      	bls.n	800352a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e050      	b.n	80035cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800352a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800352e:	2b00      	cmp	r3, #0
 8003530:	da0f      	bge.n	8003552 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	f003 020f 	and.w	r2, r3, #15
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	3338      	adds	r3, #56	; 0x38
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	3304      	adds	r3, #4
 8003548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	705a      	strb	r2, [r3, #1]
 8003550:	e00d      	b.n	800356e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	4413      	add	r3, r2
 8003564:	3304      	adds	r3, #4
 8003566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	b2da      	uxtb	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_PCD_EP_SetStall+0x82>
 800358a:	2302      	movs	r3, #2
 800358c:	e01e      	b.n	80035cc <HAL_PCD_EP_SetStall+0xc0>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68f9      	ldr	r1, [r7, #12]
 800359c:	4618      	mov	r0, r3
 800359e:	f003 f92f 	bl	8006800 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	b2d9      	uxtb	r1, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035bc:	461a      	mov	r2, r3
 80035be:	f003 fb1f 	bl	8006c00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	f003 020f 	and.w	r2, r3, #15
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d901      	bls.n	80035f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e042      	b.n	8003678 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	da0f      	bge.n	800361a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	f003 020f 	and.w	r2, r3, #15
 8003600:	4613      	mov	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	3338      	adds	r3, #56	; 0x38
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	3304      	adds	r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	705a      	strb	r2, [r3, #1]
 8003618:	e00f      	b.n	800363a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	f003 020f 	and.w	r2, r3, #15
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4413      	add	r3, r2
 8003630:	3304      	adds	r3, #4
 8003632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	b2da      	uxtb	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_PCD_EP_ClrStall+0x86>
 8003656:	2302      	movs	r3, #2
 8003658:	e00e      	b.n	8003678 <HAL_PCD_EP_ClrStall+0xa4>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68f9      	ldr	r1, [r7, #12]
 8003668:	4618      	mov	r0, r3
 800366a:	f003 f937 	bl	80068dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800368c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003690:	2b00      	cmp	r3, #0
 8003692:	da0c      	bge.n	80036ae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	f003 020f 	and.w	r2, r3, #15
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	3338      	adds	r3, #56	; 0x38
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	4413      	add	r3, r2
 80036a8:	3304      	adds	r3, #4
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e00c      	b.n	80036c8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	f003 020f 	and.w	r2, r3, #15
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	4413      	add	r3, r2
 80036c4:	3304      	adds	r3, #4
 80036c6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68f9      	ldr	r1, [r7, #12]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f002 ff56 	bl	8006580 <USB_EPStopXfer>
 80036d4:	4603      	mov	r3, r0
 80036d6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036d8:	7afb      	ldrb	r3, [r7, #11]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b08a      	sub	sp, #40	; 0x28
 80036e6:	af02      	add	r7, sp, #8
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	3338      	adds	r3, #56	; 0x38
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	3304      	adds	r3, #4
 8003708:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a1a      	ldr	r2, [r3, #32]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	429a      	cmp	r2, r3
 8003714:	d901      	bls.n	800371a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e06c      	b.n	80037f4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	69fa      	ldr	r2, [r7, #28]
 800372c:	429a      	cmp	r2, r3
 800372e:	d902      	bls.n	8003736 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3303      	adds	r3, #3
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800373e:	e02b      	b.n	8003798 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	699a      	ldr	r2, [r3, #24]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	429a      	cmp	r2, r3
 8003754:	d902      	bls.n	800375c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	3303      	adds	r3, #3
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6919      	ldr	r1, [r3, #16]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003774:	b2db      	uxtb	r3, r3
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	4603      	mov	r3, r0
 800377a:	6978      	ldr	r0, [r7, #20]
 800377c:	f002 ffaa 	bl	80066d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	441a      	add	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a1a      	ldr	r2, [r3, #32]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	441a      	add	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d809      	bhi.n	80037c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a1a      	ldr	r2, [r3, #32]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d203      	bcs.n	80037c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1be      	bne.n	8003740 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d811      	bhi.n	80037f2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	2201      	movs	r2, #1
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	6939      	ldr	r1, [r7, #16]
 80037ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037ee:	4013      	ands	r3, r2
 80037f0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	333c      	adds	r3, #60	; 0x3c
 8003814:	3304      	adds	r3, #4
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d17b      	bne.n	800392a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d015      	beq.n	8003868 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	4a61      	ldr	r2, [pc, #388]	; (80039c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	f240 80b9 	bls.w	80039b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80b3 	beq.w	80039b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385e:	461a      	mov	r2, r3
 8003860:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003864:	6093      	str	r3, [r2, #8]
 8003866:	e0a7      	b.n	80039b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387e:	461a      	mov	r2, r3
 8003880:	2320      	movs	r3, #32
 8003882:	6093      	str	r3, [r2, #8]
 8003884:	e098      	b.n	80039b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	f040 8093 	bne.w	80039b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	4a4b      	ldr	r2, [pc, #300]	; (80039c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d90f      	bls.n	80038ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b0:	461a      	mov	r2, r3
 80038b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b6:	6093      	str	r3, [r2, #8]
 80038b8:	e07e      	b.n	80039b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	4413      	add	r3, r2
 80038cc:	3304      	adds	r3, #4
 80038ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	0159      	lsls	r1, r3, #5
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	440b      	add	r3, r1
 80038dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e6:	1ad2      	subs	r2, r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d114      	bne.n	800391c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003904:	461a      	mov	r2, r3
 8003906:	2101      	movs	r1, #1
 8003908:	f003 f97a 	bl	8006c00 <USB_EP0_OutStart>
 800390c:	e006      	b.n	800391c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	441a      	add	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	4619      	mov	r1, r3
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f005 fbc6 	bl	80090b4 <HAL_PCD_DataOutStageCallback>
 8003928:	e046      	b.n	80039b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	4a26      	ldr	r2, [pc, #152]	; (80039c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d124      	bne.n	800397c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003948:	461a      	mov	r2, r3
 800394a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800394e:	6093      	str	r3, [r2, #8]
 8003950:	e032      	b.n	80039b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003968:	461a      	mov	r2, r3
 800396a:	2320      	movs	r3, #32
 800396c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	4619      	mov	r1, r3
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f005 fb9d 	bl	80090b4 <HAL_PCD_DataOutStageCallback>
 800397a:	e01d      	b.n	80039b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d114      	bne.n	80039ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d108      	bne.n	80039ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039a4:	461a      	mov	r2, r3
 80039a6:	2100      	movs	r1, #0
 80039a8:	f003 f92a 	bl	8006c00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	4619      	mov	r1, r3
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f005 fb7e 	bl	80090b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	4f54300a 	.word	0x4f54300a
 80039c8:	4f54310a 	.word	0x4f54310a

080039cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	333c      	adds	r3, #60	; 0x3c
 80039e4:	3304      	adds	r3, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <PCD_EP_OutSetupPacket_int+0x88>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d90e      	bls.n	8003a20 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f005 fb35 	bl	8009090 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d90c      	bls.n	8003a48 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d108      	bne.n	8003a48 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a40:	461a      	mov	r2, r3
 8003a42:	2101      	movs	r1, #1
 8003a44:	f003 f8dc 	bl	8006c00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	4f54300a 	.word	0x4f54300a

08003a58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	70fb      	strb	r3, [r7, #3]
 8003a64:	4613      	mov	r3, r2
 8003a66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d107      	bne.n	8003a86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a76:	883b      	ldrh	r3, [r7, #0]
 8003a78:	0419      	lsls	r1, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
 8003a84:	e028      	b.n	8003ad8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	4413      	add	r3, r2
 8003a92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a94:	2300      	movs	r3, #0
 8003a96:	73fb      	strb	r3, [r7, #15]
 8003a98:	e00d      	b.n	8003ab6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	3340      	adds	r3, #64	; 0x40
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	4413      	add	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d3ec      	bcc.n	8003a9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ac0:	883b      	ldrh	r3, [r7, #0]
 8003ac2:	0418      	lsls	r0, r3, #16
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6819      	ldr	r1, [r3, #0]
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	4302      	orrs	r2, r0
 8003ad0:	3340      	adds	r3, #64	; 0x40
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	887a      	ldrh	r2, [r7, #2]
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e267      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d075      	beq.n	8003c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b3e:	4b88      	ldr	r3, [pc, #544]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d00c      	beq.n	8003b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b4a:	4b85      	ldr	r3, [pc, #532]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d112      	bne.n	8003b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b56:	4b82      	ldr	r3, [pc, #520]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b62:	d10b      	bne.n	8003b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b64:	4b7e      	ldr	r3, [pc, #504]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d05b      	beq.n	8003c28 <HAL_RCC_OscConfig+0x108>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d157      	bne.n	8003c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e242      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b84:	d106      	bne.n	8003b94 <HAL_RCC_OscConfig+0x74>
 8003b86:	4b76      	ldr	r3, [pc, #472]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a75      	ldr	r2, [pc, #468]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e01d      	b.n	8003bd0 <HAL_RCC_OscConfig+0xb0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x98>
 8003b9e:	4b70      	ldr	r3, [pc, #448]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a6f      	ldr	r2, [pc, #444]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	4b6d      	ldr	r3, [pc, #436]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a6c      	ldr	r2, [pc, #432]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e00b      	b.n	8003bd0 <HAL_RCC_OscConfig+0xb0>
 8003bb8:	4b69      	ldr	r3, [pc, #420]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a68      	ldr	r2, [pc, #416]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	4b66      	ldr	r3, [pc, #408]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a65      	ldr	r2, [pc, #404]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d013      	beq.n	8003c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fd fdb2 	bl	8001740 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be0:	f7fd fdae 	bl	8001740 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	; 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e207      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	4b5b      	ldr	r3, [pc, #364]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <HAL_RCC_OscConfig+0xc0>
 8003bfe:	e014      	b.n	8003c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fd fd9e 	bl	8001740 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c08:	f7fd fd9a 	bl	8001740 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	; 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e1f3      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1a:	4b51      	ldr	r3, [pc, #324]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0xe8>
 8003c26:	e000      	b.n	8003c2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d063      	beq.n	8003cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c36:	4b4a      	ldr	r3, [pc, #296]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c42:	4b47      	ldr	r3, [pc, #284]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d11c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4e:	4b44      	ldr	r3, [pc, #272]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d116      	bne.n	8003c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5a:	4b41      	ldr	r3, [pc, #260]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_RCC_OscConfig+0x152>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e1c7      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c72:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4937      	ldr	r1, [pc, #220]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c86:	e03a      	b.n	8003cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d020      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c90:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <HAL_RCC_OscConfig+0x244>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fd fd53 	bl	8001740 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c9e:	f7fd fd4f 	bl	8001740 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e1a8      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbc:	4b28      	ldr	r3, [pc, #160]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4925      	ldr	r1, [pc, #148]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]
 8003cd0:	e015      	b.n	8003cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd2:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <HAL_RCC_OscConfig+0x244>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fd fd32 	bl	8001740 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ce0:	f7fd fd2e 	bl	8001740 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e187      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf2:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d036      	beq.n	8003d78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d016      	beq.n	8003d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_RCC_OscConfig+0x248>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d18:	f7fd fd12 	bl	8001740 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d20:	f7fd fd0e 	bl	8001740 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e167      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x200>
 8003d3e:	e01b      	b.n	8003d78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d40:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <HAL_RCC_OscConfig+0x248>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d46:	f7fd fcfb 	bl	8001740 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4c:	e00e      	b.n	8003d6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d4e:	f7fd fcf7 	bl	8001740 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d907      	bls.n	8003d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e150      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
 8003d60:	40023800 	.word	0x40023800
 8003d64:	42470000 	.word	0x42470000
 8003d68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d6c:	4b88      	ldr	r3, [pc, #544]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1ea      	bne.n	8003d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8097 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d86:	2300      	movs	r3, #0
 8003d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8a:	4b81      	ldr	r3, [pc, #516]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10f      	bne.n	8003db6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	4b7d      	ldr	r3, [pc, #500]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a7c      	ldr	r2, [pc, #496]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b7a      	ldr	r3, [pc, #488]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db2:	2301      	movs	r3, #1
 8003db4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db6:	4b77      	ldr	r3, [pc, #476]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d118      	bne.n	8003df4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc2:	4b74      	ldr	r3, [pc, #464]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a73      	ldr	r2, [pc, #460]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dce:	f7fd fcb7 	bl	8001740 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd6:	f7fd fcb3 	bl	8001740 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e10c      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	4b6a      	ldr	r3, [pc, #424]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCC_OscConfig+0x2ea>
 8003dfc:	4b64      	ldr	r3, [pc, #400]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4a63      	ldr	r2, [pc, #396]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6713      	str	r3, [r2, #112]	; 0x70
 8003e08:	e01c      	b.n	8003e44 <HAL_RCC_OscConfig+0x324>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x30c>
 8003e12:	4b5f      	ldr	r3, [pc, #380]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	4a5e      	ldr	r2, [pc, #376]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1e:	4b5c      	ldr	r3, [pc, #368]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a5b      	ldr	r2, [pc, #364]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCC_OscConfig+0x324>
 8003e2c:	4b58      	ldr	r3, [pc, #352]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	4a57      	ldr	r2, [pc, #348]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	6713      	str	r3, [r2, #112]	; 0x70
 8003e38:	4b55      	ldr	r3, [pc, #340]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a54      	ldr	r2, [pc, #336]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e3e:	f023 0304 	bic.w	r3, r3, #4
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d015      	beq.n	8003e78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fd fc78 	bl	8001740 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e52:	e00a      	b.n	8003e6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	f7fd fc74 	bl	8001740 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e0cb      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6a:	4b49      	ldr	r3, [pc, #292]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0ee      	beq.n	8003e54 <HAL_RCC_OscConfig+0x334>
 8003e76:	e014      	b.n	8003ea2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e78:	f7fd fc62 	bl	8001740 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e80:	f7fd fc5e 	bl	8001740 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e0b5      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e96:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1ee      	bne.n	8003e80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea8:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	4a38      	ldr	r2, [pc, #224]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80a1 	beq.w	8004000 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ebe:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d05c      	beq.n	8003f84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d141      	bne.n	8003f56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed2:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <HAL_RCC_OscConfig+0x478>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed8:	f7fd fc32 	bl	8001740 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fd fc2e 	bl	8001740 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e087      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef2:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	019b      	lsls	r3, r3, #6
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	085b      	lsrs	r3, r3, #1
 8003f16:	3b01      	subs	r3, #1
 8003f18:	041b      	lsls	r3, r3, #16
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	491b      	ldr	r1, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_RCC_OscConfig+0x478>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2e:	f7fd fc07 	bl	8001740 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f36:	f7fd fc03 	bl	8001740 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e05c      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x416>
 8003f54:	e054      	b.n	8004000 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <HAL_RCC_OscConfig+0x478>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5c:	f7fd fbf0 	bl	8001740 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fd fbec 	bl	8001740 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e045      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x444>
 8003f82:	e03d      	b.n	8004000 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e038      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40007000 	.word	0x40007000
 8003f98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	; (800400c <HAL_RCC_OscConfig+0x4ec>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d028      	beq.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d121      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d11a      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fcc:	4013      	ands	r3, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d111      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800

08004010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0cc      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004024:	4b68      	ldr	r3, [pc, #416]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d90c      	bls.n	800404c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004032:	4b65      	ldr	r3, [pc, #404]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b63      	ldr	r3, [pc, #396]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0b8      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d020      	beq.n	800409a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004064:	4b59      	ldr	r3, [pc, #356]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4a58      	ldr	r2, [pc, #352]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800406e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800407c:	4b53      	ldr	r3, [pc, #332]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4a52      	ldr	r2, [pc, #328]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004088:	4b50      	ldr	r3, [pc, #320]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	494d      	ldr	r1, [pc, #308]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d044      	beq.n	8004130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	4b47      	ldr	r3, [pc, #284]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d119      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e07f      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d003      	beq.n	80040ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d107      	bne.n	80040de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ce:	4b3f      	ldr	r3, [pc, #252]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e06f      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040de:	4b3b      	ldr	r3, [pc, #236]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e067      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ee:	4b37      	ldr	r3, [pc, #220]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f023 0203 	bic.w	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4934      	ldr	r1, [pc, #208]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004100:	f7fd fb1e 	bl	8001740 <HAL_GetTick>
 8004104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	e00a      	b.n	800411e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004108:	f7fd fb1a 	bl	8001740 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	; 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e04f      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 020c 	and.w	r2, r3, #12
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	429a      	cmp	r2, r3
 800412e:	d1eb      	bne.n	8004108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004130:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d20c      	bcs.n	8004158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e032      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4916      	ldr	r1, [pc, #88]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004182:	4b12      	ldr	r3, [pc, #72]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	490e      	ldr	r1, [pc, #56]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004196:	f000 f821 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 800419a:	4602      	mov	r2, r0
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	490a      	ldr	r1, [pc, #40]	; (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 80041a8:	5ccb      	ldrb	r3, [r1, r3]
 80041aa:	fa22 f303 	lsr.w	r3, r2, r3
 80041ae:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80041b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fd fa7e 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023c00 	.word	0x40023c00
 80041cc:	40023800 	.word	0x40023800
 80041d0:	080096c8 	.word	0x080096c8
 80041d4:	20000008 	.word	0x20000008
 80041d8:	2000000c 	.word	0x2000000c

080041dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e0:	b094      	sub	sp, #80	; 0x50
 80041e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	647b      	str	r3, [r7, #68]	; 0x44
 80041e8:	2300      	movs	r3, #0
 80041ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ec:	2300      	movs	r3, #0
 80041ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f4:	4b79      	ldr	r3, [pc, #484]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d00d      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x40>
 8004200:	2b08      	cmp	r3, #8
 8004202:	f200 80e1 	bhi.w	80043c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0x34>
 800420a:	2b04      	cmp	r3, #4
 800420c:	d003      	beq.n	8004216 <HAL_RCC_GetSysClockFreq+0x3a>
 800420e:	e0db      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004210:	4b73      	ldr	r3, [pc, #460]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004212:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004214:	e0db      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004216:	4b73      	ldr	r3, [pc, #460]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004218:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800421a:	e0d8      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800421c:	4b6f      	ldr	r3, [pc, #444]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004224:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004226:	4b6d      	ldr	r3, [pc, #436]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d063      	beq.n	80042fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004232:	4b6a      	ldr	r3, [pc, #424]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	099b      	lsrs	r3, r3, #6
 8004238:	2200      	movs	r2, #0
 800423a:	63bb      	str	r3, [r7, #56]	; 0x38
 800423c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004244:	633b      	str	r3, [r7, #48]	; 0x30
 8004246:	2300      	movs	r3, #0
 8004248:	637b      	str	r3, [r7, #52]	; 0x34
 800424a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800424e:	4622      	mov	r2, r4
 8004250:	462b      	mov	r3, r5
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f04f 0100 	mov.w	r1, #0
 800425a:	0159      	lsls	r1, r3, #5
 800425c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004260:	0150      	lsls	r0, r2, #5
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4621      	mov	r1, r4
 8004268:	1a51      	subs	r1, r2, r1
 800426a:	6139      	str	r1, [r7, #16]
 800426c:	4629      	mov	r1, r5
 800426e:	eb63 0301 	sbc.w	r3, r3, r1
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004280:	4659      	mov	r1, fp
 8004282:	018b      	lsls	r3, r1, #6
 8004284:	4651      	mov	r1, sl
 8004286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800428a:	4651      	mov	r1, sl
 800428c:	018a      	lsls	r2, r1, #6
 800428e:	4651      	mov	r1, sl
 8004290:	ebb2 0801 	subs.w	r8, r2, r1
 8004294:	4659      	mov	r1, fp
 8004296:	eb63 0901 	sbc.w	r9, r3, r1
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ae:	4690      	mov	r8, r2
 80042b0:	4699      	mov	r9, r3
 80042b2:	4623      	mov	r3, r4
 80042b4:	eb18 0303 	adds.w	r3, r8, r3
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	462b      	mov	r3, r5
 80042bc:	eb49 0303 	adc.w	r3, r9, r3
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042ce:	4629      	mov	r1, r5
 80042d0:	024b      	lsls	r3, r1, #9
 80042d2:	4621      	mov	r1, r4
 80042d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042d8:	4621      	mov	r1, r4
 80042da:	024a      	lsls	r2, r1, #9
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e2:	2200      	movs	r2, #0
 80042e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042ec:	f7fc f98c 	bl	8000608 <__aeabi_uldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4613      	mov	r3, r2
 80042f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f8:	e058      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fa:	4b38      	ldr	r3, [pc, #224]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	099b      	lsrs	r3, r3, #6
 8004300:	2200      	movs	r2, #0
 8004302:	4618      	mov	r0, r3
 8004304:	4611      	mov	r1, r2
 8004306:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800430a:	623b      	str	r3, [r7, #32]
 800430c:	2300      	movs	r3, #0
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
 8004310:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	f04f 0000 	mov.w	r0, #0
 800431c:	f04f 0100 	mov.w	r1, #0
 8004320:	0159      	lsls	r1, r3, #5
 8004322:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004326:	0150      	lsls	r0, r2, #5
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4641      	mov	r1, r8
 800432e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004332:	4649      	mov	r1, r9
 8004334:	eb63 0b01 	sbc.w	fp, r3, r1
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004344:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004348:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800434c:	ebb2 040a 	subs.w	r4, r2, sl
 8004350:	eb63 050b 	sbc.w	r5, r3, fp
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	00eb      	lsls	r3, r5, #3
 800435e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004362:	00e2      	lsls	r2, r4, #3
 8004364:	4614      	mov	r4, r2
 8004366:	461d      	mov	r5, r3
 8004368:	4643      	mov	r3, r8
 800436a:	18e3      	adds	r3, r4, r3
 800436c:	603b      	str	r3, [r7, #0]
 800436e:	464b      	mov	r3, r9
 8004370:	eb45 0303 	adc.w	r3, r5, r3
 8004374:	607b      	str	r3, [r7, #4]
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004382:	4629      	mov	r1, r5
 8004384:	028b      	lsls	r3, r1, #10
 8004386:	4621      	mov	r1, r4
 8004388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800438c:	4621      	mov	r1, r4
 800438e:	028a      	lsls	r2, r1, #10
 8004390:	4610      	mov	r0, r2
 8004392:	4619      	mov	r1, r3
 8004394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004396:	2200      	movs	r2, #0
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	61fa      	str	r2, [r7, #28]
 800439c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a0:	f7fc f932 	bl	8000608 <__aeabi_uldivmod>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4613      	mov	r3, r2
 80043aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	3301      	adds	r3, #1
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043c6:	e002      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80043ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3750      	adds	r7, #80	; 0x50
 80043d4:	46bd      	mov	sp, r7
 80043d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043da:	bf00      	nop
 80043dc:	40023800 	.word	0x40023800
 80043e0:	00f42400 	.word	0x00f42400
 80043e4:	007a1200 	.word	0x007a1200

080043e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000008 	.word	0x20000008

08004400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004404:	f7ff fff0 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	0a9b      	lsrs	r3, r3, #10
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4903      	ldr	r1, [pc, #12]	; (8004424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40023800 	.word	0x40023800
 8004424:	080096d8 	.word	0x080096d8

08004428 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e07b      	b.n	8004532 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	d108      	bne.n	8004454 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444a:	d009      	beq.n	8004460 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	61da      	str	r2, [r3, #28]
 8004452:	e005      	b.n	8004460 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fc ffc0 	bl	8001400 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004496:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e4:	ea42 0103 	orr.w	r1, r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	f003 0104 	and.w	r1, r3, #4
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	f003 0210 	and.w	r2, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004520:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b088      	sub	sp, #32
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	603b      	str	r3, [r7, #0]
 8004546:	4613      	mov	r3, r2
 8004548:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_SPI_Transmit+0x22>
 8004558:	2302      	movs	r3, #2
 800455a:	e126      	b.n	80047aa <HAL_SPI_Transmit+0x270>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004564:	f7fd f8ec 	bl	8001740 <HAL_GetTick>
 8004568:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b01      	cmp	r3, #1
 8004578:	d002      	beq.n	8004580 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800457a:	2302      	movs	r3, #2
 800457c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800457e:	e10b      	b.n	8004798 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <HAL_SPI_Transmit+0x52>
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004590:	e102      	b.n	8004798 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2203      	movs	r2, #3
 8004596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	88fa      	ldrh	r2, [r7, #6]
 80045aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d8:	d10f      	bne.n	80045fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d007      	beq.n	8004618 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004616:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004620:	d14b      	bne.n	80046ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <HAL_SPI_Transmit+0xf6>
 800462a:	8afb      	ldrh	r3, [r7, #22]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d13e      	bne.n	80046ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	881a      	ldrh	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	1c9a      	adds	r2, r3, #2
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004654:	e02b      	b.n	80046ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b02      	cmp	r3, #2
 8004662:	d112      	bne.n	800468a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	881a      	ldrh	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	1c9a      	adds	r2, r3, #2
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	86da      	strh	r2, [r3, #54]	; 0x36
 8004688:	e011      	b.n	80046ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800468a:	f7fd f859 	bl	8001740 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d803      	bhi.n	80046a2 <HAL_SPI_Transmit+0x168>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d102      	bne.n	80046a8 <HAL_SPI_Transmit+0x16e>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d102      	bne.n	80046ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046ac:	e074      	b.n	8004798 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1ce      	bne.n	8004656 <HAL_SPI_Transmit+0x11c>
 80046b8:	e04c      	b.n	8004754 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_SPI_Transmit+0x18e>
 80046c2:	8afb      	ldrh	r3, [r7, #22]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d140      	bne.n	800474a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	330c      	adds	r3, #12
 80046d2:	7812      	ldrb	r2, [r2, #0]
 80046d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046ee:	e02c      	b.n	800474a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d113      	bne.n	8004726 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	7812      	ldrb	r2, [r2, #0]
 800470a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	86da      	strh	r2, [r3, #54]	; 0x36
 8004724:	e011      	b.n	800474a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004726:	f7fd f80b 	bl	8001740 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d803      	bhi.n	800473e <HAL_SPI_Transmit+0x204>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473c:	d102      	bne.n	8004744 <HAL_SPI_Transmit+0x20a>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d102      	bne.n	800474a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004748:	e026      	b.n	8004798 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1cd      	bne.n	80046f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	6839      	ldr	r1, [r7, #0]
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 f9d1 	bl	8004b00 <SPI_EndRxTxTransaction>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004772:	2300      	movs	r3, #0
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e000      	b.n	8004798 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004796:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3720      	adds	r7, #32
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	099b      	lsrs	r3, r3, #6
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10f      	bne.n	80047f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	099b      	lsrs	r3, r3, #6
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d004      	beq.n	80047f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	4798      	blx	r3
    return;
 80047f6:	e0d7      	b.n	80049a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_SPI_IRQHandler+0x66>
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	09db      	lsrs	r3, r3, #7
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
    return;
 8004818:	e0c6      	b.n	80049a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10c      	bne.n	8004840 <HAL_SPI_IRQHandler+0x8c>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	099b      	lsrs	r3, r3, #6
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80b4 	beq.w	80049a8 <HAL_SPI_IRQHandler+0x1f4>
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80ad 	beq.w	80049a8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	099b      	lsrs	r3, r3, #6
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d023      	beq.n	80048a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b03      	cmp	r3, #3
 8004864:	d011      	beq.n	800488a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486a:	f043 0204 	orr.w	r2, r3, #4
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	e00b      	b.n	80048a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	693b      	ldr	r3, [r7, #16]
        return;
 80048a0:	e082      	b.n	80049a8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d014      	beq.n	80048d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	f043 0201 	orr.w	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00c      	beq.n	80048fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	f043 0208 	orr.w	r2, r3, #8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80048f0:	2300      	movs	r3, #0
 80048f2:	60bb      	str	r3, [r7, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004902:	2b00      	cmp	r3, #0
 8004904:	d04f      	beq.n	80049a6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004914:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d104      	bne.n	8004932 <HAL_SPI_IRQHandler+0x17e>
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d034      	beq.n	800499c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0203 	bic.w	r2, r2, #3
 8004940:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d011      	beq.n	800496e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494e:	4a18      	ldr	r2, [pc, #96]	; (80049b0 <HAL_SPI_IRQHandler+0x1fc>)
 8004950:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	4618      	mov	r0, r3
 8004958:	f7fd faa5 	bl	8001ea6 <HAL_DMA_Abort_IT>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004972:	2b00      	cmp	r3, #0
 8004974:	d016      	beq.n	80049a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497a:	4a0d      	ldr	r2, [pc, #52]	; (80049b0 <HAL_SPI_IRQHandler+0x1fc>)
 800497c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004982:	4618      	mov	r0, r3
 8004984:	f7fd fa8f 	bl	8001ea6 <HAL_DMA_Abort_IT>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800499a:	e003      	b.n	80049a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f809 	bl	80049b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80049a2:	e000      	b.n	80049a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80049a4:	bf00      	nop
    return;
 80049a6:	bf00      	nop
  }
}
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	080049c9 	.word	0x080049c9

080049b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff ffe6 	bl	80049b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	4613      	mov	r3, r2
 80049fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a00:	f7fc fe9e 	bl	8001740 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a10:	f7fc fe96 	bl	8001740 <HAL_GetTick>
 8004a14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a16:	4b39      	ldr	r3, [pc, #228]	; (8004afc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	015b      	lsls	r3, r3, #5
 8004a1c:	0d1b      	lsrs	r3, r3, #20
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	fb02 f303 	mul.w	r3, r2, r3
 8004a24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a26:	e054      	b.n	8004ad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2e:	d050      	beq.n	8004ad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a30:	f7fc fe86 	bl	8001740 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	69fa      	ldr	r2, [r7, #28]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d902      	bls.n	8004a46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d13d      	bne.n	8004ac2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a5e:	d111      	bne.n	8004a84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a68:	d004      	beq.n	8004a74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a72:	d107      	bne.n	8004a84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a8c:	d10f      	bne.n	8004aae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004aac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e017      	b.n	8004af2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4013      	ands	r3, r2
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	bf0c      	ite	eq
 8004ae2:	2301      	moveq	r3, #1
 8004ae4:	2300      	movne	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	461a      	mov	r2, r3
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d19b      	bne.n	8004a28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20000008 	.word	0x20000008

08004b00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <SPI_EndRxTxTransaction+0x7c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1b      	ldr	r2, [pc, #108]	; (8004b80 <SPI_EndRxTxTransaction+0x80>)
 8004b12:	fba2 2303 	umull	r2, r3, r2, r3
 8004b16:	0d5b      	lsrs	r3, r3, #21
 8004b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b1c:	fb02 f303 	mul.w	r3, r2, r3
 8004b20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2a:	d112      	bne.n	8004b52 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2200      	movs	r2, #0
 8004b34:	2180      	movs	r1, #128	; 0x80
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7ff ff5a 	bl	80049f0 <SPI_WaitFlagStateUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d016      	beq.n	8004b70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e00f      	b.n	8004b72 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b68:	2b80      	cmp	r3, #128	; 0x80
 8004b6a:	d0f2      	beq.n	8004b52 <SPI_EndRxTxTransaction+0x52>
 8004b6c:	e000      	b.n	8004b70 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b6e:	bf00      	nop
  }

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000008 	.word	0x20000008
 8004b80:	165e9f81 	.word	0x165e9f81

08004b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e041      	b.n	8004c1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fc fc78 	bl	80014a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	f000 fa96 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d001      	beq.n	8004c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e04e      	b.n	8004cda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a23      	ldr	r2, [pc, #140]	; (8004ce8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d022      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x80>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c66:	d01d      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x80>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a1f      	ldr	r2, [pc, #124]	; (8004cec <HAL_TIM_Base_Start_IT+0xc8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d018      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x80>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a1e      	ldr	r2, [pc, #120]	; (8004cf0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d013      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x80>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a1c      	ldr	r2, [pc, #112]	; (8004cf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00e      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x80>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a1b      	ldr	r2, [pc, #108]	; (8004cf8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d009      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x80>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a19      	ldr	r2, [pc, #100]	; (8004cfc <HAL_TIM_Base_Start_IT+0xd8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d004      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x80>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a18      	ldr	r2, [pc, #96]	; (8004d00 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d111      	bne.n	8004cc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b06      	cmp	r3, #6
 8004cb4:	d010      	beq.n	8004cd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0201 	orr.w	r2, r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc6:	e007      	b.n	8004cd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40010000 	.word	0x40010000
 8004cec:	40000400 	.word	0x40000400
 8004cf0:	40000800 	.word	0x40000800
 8004cf4:	40000c00 	.word	0x40000c00
 8004cf8:	40010400 	.word	0x40010400
 8004cfc:	40014000 	.word	0x40014000
 8004d00:	40001800 	.word	0x40001800

08004d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d122      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d11b      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0202 	mvn.w	r2, #2
 8004d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f9b5 	bl	80050b6 <HAL_TIM_IC_CaptureCallback>
 8004d4c:	e005      	b.n	8004d5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f9a7 	bl	80050a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f9b8 	bl	80050ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0304 	and.w	r3, r3, #4
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d122      	bne.n	8004db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d11b      	bne.n	8004db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0204 	mvn.w	r2, #4
 8004d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f98b 	bl	80050b6 <HAL_TIM_IC_CaptureCallback>
 8004da0:	e005      	b.n	8004dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f97d 	bl	80050a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f98e 	bl	80050ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d122      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d11b      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0208 	mvn.w	r2, #8
 8004dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2204      	movs	r2, #4
 8004dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f961 	bl	80050b6 <HAL_TIM_IC_CaptureCallback>
 8004df4:	e005      	b.n	8004e02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f953 	bl	80050a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f964 	bl	80050ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d122      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f003 0310 	and.w	r3, r3, #16
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d11b      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0210 	mvn.w	r2, #16
 8004e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2208      	movs	r2, #8
 8004e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f937 	bl	80050b6 <HAL_TIM_IC_CaptureCallback>
 8004e48:	e005      	b.n	8004e56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f929 	bl	80050a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f93a 	bl	80050ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d10e      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d107      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0201 	mvn.w	r2, #1
 8004e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fb fe38 	bl	8000af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d10e      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea0:	2b80      	cmp	r3, #128	; 0x80
 8004ea2:	d107      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fae0 	bl	8005474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebe:	2b40      	cmp	r3, #64	; 0x40
 8004ec0:	d10e      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ecc:	2b40      	cmp	r3, #64	; 0x40
 8004ece:	d107      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f8ff 	bl	80050de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d10e      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	d107      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0220 	mvn.w	r2, #32
 8004f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 faaa 	bl	8005460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_TIM_ConfigClockSource+0x1c>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e0b4      	b.n	800509a <HAL_TIM_ConfigClockSource+0x186>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f68:	d03e      	beq.n	8004fe8 <HAL_TIM_ConfigClockSource+0xd4>
 8004f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6e:	f200 8087 	bhi.w	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f76:	f000 8086 	beq.w	8005086 <HAL_TIM_ConfigClockSource+0x172>
 8004f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7e:	d87f      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b70      	cmp	r3, #112	; 0x70
 8004f82:	d01a      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0xa6>
 8004f84:	2b70      	cmp	r3, #112	; 0x70
 8004f86:	d87b      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b60      	cmp	r3, #96	; 0x60
 8004f8a:	d050      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x11a>
 8004f8c:	2b60      	cmp	r3, #96	; 0x60
 8004f8e:	d877      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b50      	cmp	r3, #80	; 0x50
 8004f92:	d03c      	beq.n	800500e <HAL_TIM_ConfigClockSource+0xfa>
 8004f94:	2b50      	cmp	r3, #80	; 0x50
 8004f96:	d873      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	d058      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x13a>
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d86f      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b30      	cmp	r3, #48	; 0x30
 8004fa2:	d064      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fa4:	2b30      	cmp	r3, #48	; 0x30
 8004fa6:	d86b      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d060      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d867      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d05c      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d05a      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fb8:	e062      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6899      	ldr	r1, [r3, #8]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f000 f9ad 	bl	8005328 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	609a      	str	r2, [r3, #8]
      break;
 8004fe6:	e04f      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	6899      	ldr	r1, [r3, #8]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f000 f996 	bl	8005328 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800500a:	609a      	str	r2, [r3, #8]
      break;
 800500c:	e03c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	f000 f90a 	bl	8005234 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2150      	movs	r1, #80	; 0x50
 8005026:	4618      	mov	r0, r3
 8005028:	f000 f963 	bl	80052f2 <TIM_ITRx_SetConfig>
      break;
 800502c:	e02c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	461a      	mov	r2, r3
 800503c:	f000 f929 	bl	8005292 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2160      	movs	r1, #96	; 0x60
 8005046:	4618      	mov	r0, r3
 8005048:	f000 f953 	bl	80052f2 <TIM_ITRx_SetConfig>
      break;
 800504c:	e01c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6859      	ldr	r1, [r3, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	461a      	mov	r2, r3
 800505c:	f000 f8ea 	bl	8005234 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2140      	movs	r1, #64	; 0x40
 8005066:	4618      	mov	r0, r3
 8005068:	f000 f943 	bl	80052f2 <TIM_ITRx_SetConfig>
      break;
 800506c:	e00c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f000 f93a 	bl	80052f2 <TIM_ITRx_SetConfig>
      break;
 800507e:	e003      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
      break;
 8005084:	e000      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005098:	7bfb      	ldrb	r3, [r7, #15]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a40      	ldr	r2, [pc, #256]	; (8005208 <TIM_Base_SetConfig+0x114>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d013      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d00f      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a3d      	ldr	r2, [pc, #244]	; (800520c <TIM_Base_SetConfig+0x118>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d00b      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a3c      	ldr	r2, [pc, #240]	; (8005210 <TIM_Base_SetConfig+0x11c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d007      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a3b      	ldr	r2, [pc, #236]	; (8005214 <TIM_Base_SetConfig+0x120>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a3a      	ldr	r2, [pc, #232]	; (8005218 <TIM_Base_SetConfig+0x124>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d108      	bne.n	8005146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2f      	ldr	r2, [pc, #188]	; (8005208 <TIM_Base_SetConfig+0x114>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d02b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005154:	d027      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2c      	ldr	r2, [pc, #176]	; (800520c <TIM_Base_SetConfig+0x118>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d023      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2b      	ldr	r2, [pc, #172]	; (8005210 <TIM_Base_SetConfig+0x11c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01f      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2a      	ldr	r2, [pc, #168]	; (8005214 <TIM_Base_SetConfig+0x120>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d01b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a29      	ldr	r2, [pc, #164]	; (8005218 <TIM_Base_SetConfig+0x124>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d017      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a28      	ldr	r2, [pc, #160]	; (800521c <TIM_Base_SetConfig+0x128>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a27      	ldr	r2, [pc, #156]	; (8005220 <TIM_Base_SetConfig+0x12c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00f      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a26      	ldr	r2, [pc, #152]	; (8005224 <TIM_Base_SetConfig+0x130>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00b      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a25      	ldr	r2, [pc, #148]	; (8005228 <TIM_Base_SetConfig+0x134>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d007      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a24      	ldr	r2, [pc, #144]	; (800522c <TIM_Base_SetConfig+0x138>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a23      	ldr	r2, [pc, #140]	; (8005230 <TIM_Base_SetConfig+0x13c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d108      	bne.n	80051b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <TIM_Base_SetConfig+0x114>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0xf8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a0c      	ldr	r2, [pc, #48]	; (8005218 <TIM_Base_SetConfig+0x124>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d103      	bne.n	80051f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	615a      	str	r2, [r3, #20]
}
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40010000 	.word	0x40010000
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40000c00 	.word	0x40000c00
 8005218:	40010400 	.word	0x40010400
 800521c:	40014000 	.word	0x40014000
 8005220:	40014400 	.word	0x40014400
 8005224:	40014800 	.word	0x40014800
 8005228:	40001800 	.word	0x40001800
 800522c:	40001c00 	.word	0x40001c00
 8005230:	40002000 	.word	0x40002000

08005234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f023 0201 	bic.w	r2, r3, #1
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800525e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f023 030a 	bic.w	r3, r3, #10
 8005270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	621a      	str	r2, [r3, #32]
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005292:	b480      	push	{r7}
 8005294:	b087      	sub	sp, #28
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f023 0210 	bic.w	r2, r3, #16
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	031b      	lsls	r3, r3, #12
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b085      	sub	sp, #20
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005308:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	f043 0307 	orr.w	r3, r3, #7
 8005314:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	609a      	str	r2, [r3, #8]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005342:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	021a      	lsls	r2, r3, #8
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	431a      	orrs	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4313      	orrs	r3, r2
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	609a      	str	r2, [r3, #8]
}
 800535c:	bf00      	nop
 800535e:	371c      	adds	r7, #28
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800537c:	2302      	movs	r3, #2
 800537e:	e05a      	b.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a21      	ldr	r2, [pc, #132]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d022      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d01d      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1b      	ldr	r2, [pc, #108]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a18      	ldr	r2, [pc, #96]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a17      	ldr	r2, [pc, #92]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a15      	ldr	r2, [pc, #84]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d10c      	bne.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	4313      	orrs	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40010000 	.word	0x40010000
 8005448:	40000400 	.word	0x40000400
 800544c:	40000800 	.word	0x40000800
 8005450:	40000c00 	.word	0x40000c00
 8005454:	40010400 	.word	0x40010400
 8005458:	40014000 	.word	0x40014000
 800545c:	40001800 	.word	0x40001800

08005460 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005488:	b084      	sub	sp, #16
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	f107 001c 	add.w	r0, r7, #28
 8005496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	2b01      	cmp	r3, #1
 800549e:	d122      	bne.n	80054e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d105      	bne.n	80054da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f001 fbee 	bl	8006cbc <USB_CoreReset>
 80054e0:	4603      	mov	r3, r0
 80054e2:	73fb      	strb	r3, [r7, #15]
 80054e4:	e01a      	b.n	800551c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f001 fbe2 	bl	8006cbc <USB_CoreReset>
 80054f8:	4603      	mov	r3, r0
 80054fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	639a      	str	r2, [r3, #56]	; 0x38
 800550e:	e005      	b.n	800551c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	2b01      	cmp	r3, #1
 8005520:	d10b      	bne.n	800553a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f043 0206 	orr.w	r2, r3, #6
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f043 0220 	orr.w	r2, r3, #32
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800553a:	7bfb      	ldrb	r3, [r7, #15]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005546:	b004      	add	sp, #16
 8005548:	4770      	bx	lr
	...

0800554c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	4613      	mov	r3, r2
 8005558:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	2b02      	cmp	r3, #2
 800555e:	d165      	bne.n	800562c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4a41      	ldr	r2, [pc, #260]	; (8005668 <USB_SetTurnaroundTime+0x11c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d906      	bls.n	8005576 <USB_SetTurnaroundTime+0x2a>
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4a40      	ldr	r2, [pc, #256]	; (800566c <USB_SetTurnaroundTime+0x120>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d202      	bcs.n	8005576 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005570:	230f      	movs	r3, #15
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	e062      	b.n	800563c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4a3c      	ldr	r2, [pc, #240]	; (800566c <USB_SetTurnaroundTime+0x120>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d306      	bcc.n	800558c <USB_SetTurnaroundTime+0x40>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	4a3b      	ldr	r2, [pc, #236]	; (8005670 <USB_SetTurnaroundTime+0x124>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d202      	bcs.n	800558c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005586:	230e      	movs	r3, #14
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	e057      	b.n	800563c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4a38      	ldr	r2, [pc, #224]	; (8005670 <USB_SetTurnaroundTime+0x124>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d306      	bcc.n	80055a2 <USB_SetTurnaroundTime+0x56>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4a37      	ldr	r2, [pc, #220]	; (8005674 <USB_SetTurnaroundTime+0x128>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d202      	bcs.n	80055a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800559c:	230d      	movs	r3, #13
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e04c      	b.n	800563c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4a33      	ldr	r2, [pc, #204]	; (8005674 <USB_SetTurnaroundTime+0x128>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d306      	bcc.n	80055b8 <USB_SetTurnaroundTime+0x6c>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4a32      	ldr	r2, [pc, #200]	; (8005678 <USB_SetTurnaroundTime+0x12c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d802      	bhi.n	80055b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055b2:	230c      	movs	r3, #12
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	e041      	b.n	800563c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4a2f      	ldr	r2, [pc, #188]	; (8005678 <USB_SetTurnaroundTime+0x12c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d906      	bls.n	80055ce <USB_SetTurnaroundTime+0x82>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4a2e      	ldr	r2, [pc, #184]	; (800567c <USB_SetTurnaroundTime+0x130>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d802      	bhi.n	80055ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055c8:	230b      	movs	r3, #11
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	e036      	b.n	800563c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	4a2a      	ldr	r2, [pc, #168]	; (800567c <USB_SetTurnaroundTime+0x130>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d906      	bls.n	80055e4 <USB_SetTurnaroundTime+0x98>
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	4a29      	ldr	r2, [pc, #164]	; (8005680 <USB_SetTurnaroundTime+0x134>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d802      	bhi.n	80055e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80055de:	230a      	movs	r3, #10
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	e02b      	b.n	800563c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4a26      	ldr	r2, [pc, #152]	; (8005680 <USB_SetTurnaroundTime+0x134>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d906      	bls.n	80055fa <USB_SetTurnaroundTime+0xae>
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4a25      	ldr	r2, [pc, #148]	; (8005684 <USB_SetTurnaroundTime+0x138>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d202      	bcs.n	80055fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80055f4:	2309      	movs	r3, #9
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	e020      	b.n	800563c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	4a21      	ldr	r2, [pc, #132]	; (8005684 <USB_SetTurnaroundTime+0x138>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d306      	bcc.n	8005610 <USB_SetTurnaroundTime+0xc4>
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	4a20      	ldr	r2, [pc, #128]	; (8005688 <USB_SetTurnaroundTime+0x13c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d802      	bhi.n	8005610 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800560a:	2308      	movs	r3, #8
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	e015      	b.n	800563c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4a1d      	ldr	r2, [pc, #116]	; (8005688 <USB_SetTurnaroundTime+0x13c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d906      	bls.n	8005626 <USB_SetTurnaroundTime+0xda>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4a1c      	ldr	r2, [pc, #112]	; (800568c <USB_SetTurnaroundTime+0x140>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d202      	bcs.n	8005626 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005620:	2307      	movs	r3, #7
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	e00a      	b.n	800563c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005626:	2306      	movs	r3, #6
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	e007      	b.n	800563c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d102      	bne.n	8005638 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005632:	2309      	movs	r3, #9
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	e001      	b.n	800563c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005638:	2309      	movs	r3, #9
 800563a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	029b      	lsls	r3, r3, #10
 8005650:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005654:	431a      	orrs	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	00d8acbf 	.word	0x00d8acbf
 800566c:	00e4e1c0 	.word	0x00e4e1c0
 8005670:	00f42400 	.word	0x00f42400
 8005674:	01067380 	.word	0x01067380
 8005678:	011a499f 	.word	0x011a499f
 800567c:	01312cff 	.word	0x01312cff
 8005680:	014ca43f 	.word	0x014ca43f
 8005684:	016e3600 	.word	0x016e3600
 8005688:	01a6ab1f 	.word	0x01a6ab1f
 800568c:	01e84800 	.word	0x01e84800

08005690 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f043 0201 	orr.w	r2, r3, #1
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f023 0201 	bic.w	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d115      	bne.n	8005722 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005702:	2001      	movs	r0, #1
 8005704:	f7fc f828 	bl	8001758 <HAL_Delay>
      ms++;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3301      	adds	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f001 fa45 	bl	8006b9e <USB_GetMode>
 8005714:	4603      	mov	r3, r0
 8005716:	2b01      	cmp	r3, #1
 8005718:	d01e      	beq.n	8005758 <USB_SetCurrentMode+0x84>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b31      	cmp	r3, #49	; 0x31
 800571e:	d9f0      	bls.n	8005702 <USB_SetCurrentMode+0x2e>
 8005720:	e01a      	b.n	8005758 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d115      	bne.n	8005754 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005734:	2001      	movs	r0, #1
 8005736:	f7fc f80f 	bl	8001758 <HAL_Delay>
      ms++;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3301      	adds	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 fa2c 	bl	8006b9e <USB_GetMode>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d005      	beq.n	8005758 <USB_SetCurrentMode+0x84>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b31      	cmp	r3, #49	; 0x31
 8005750:	d9f0      	bls.n	8005734 <USB_SetCurrentMode+0x60>
 8005752:	e001      	b.n	8005758 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e005      	b.n	8005764 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b32      	cmp	r3, #50	; 0x32
 800575c:	d101      	bne.n	8005762 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800576c:	b084      	sub	sp, #16
 800576e:	b580      	push	{r7, lr}
 8005770:	b086      	sub	sp, #24
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800577a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005786:	2300      	movs	r3, #0
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	e009      	b.n	80057a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	3340      	adds	r3, #64	; 0x40
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	2200      	movs	r2, #0
 8005798:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	3301      	adds	r3, #1
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	2b0e      	cmp	r3, #14
 80057a4:	d9f2      	bls.n	800578c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d11c      	bne.n	80057e6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ba:	f043 0302 	orr.w	r3, r3, #2
 80057be:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38
 80057e4:	e00b      	b.n	80057fe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005804:	461a      	mov	r2, r3
 8005806:	2300      	movs	r3, #0
 8005808:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005810:	4619      	mov	r1, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005818:	461a      	mov	r2, r3
 800581a:	680b      	ldr	r3, [r1, #0]
 800581c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	2b01      	cmp	r3, #1
 8005822:	d10c      	bne.n	800583e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d104      	bne.n	8005834 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800582a:	2100      	movs	r1, #0
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f965 	bl	8005afc <USB_SetDevSpeed>
 8005832:	e008      	b.n	8005846 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005834:	2101      	movs	r1, #1
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f960 	bl	8005afc <USB_SetDevSpeed>
 800583c:	e003      	b.n	8005846 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800583e:	2103      	movs	r1, #3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f95b 	bl	8005afc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005846:	2110      	movs	r1, #16
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f8f3 	bl	8005a34 <USB_FlushTxFifo>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f91f 	bl	8005a9c <USB_FlushRxFifo>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586e:	461a      	mov	r2, r3
 8005870:	2300      	movs	r3, #0
 8005872:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587a:	461a      	mov	r2, r3
 800587c:	2300      	movs	r3, #0
 800587e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005886:	461a      	mov	r2, r3
 8005888:	2300      	movs	r3, #0
 800588a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800588c:	2300      	movs	r3, #0
 800588e:	613b      	str	r3, [r7, #16]
 8005890:	e043      	b.n	800591a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058a8:	d118      	bne.n	80058dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	461a      	mov	r2, r3
 80058be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	e013      	b.n	80058ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d2:	461a      	mov	r2, r3
 80058d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	e008      	b.n	80058ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e8:	461a      	mov	r2, r3
 80058ea:	2300      	movs	r3, #0
 80058ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fa:	461a      	mov	r2, r3
 80058fc:	2300      	movs	r3, #0
 80058fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590c:	461a      	mov	r2, r3
 800590e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005912:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	3301      	adds	r3, #1
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	429a      	cmp	r2, r3
 8005920:	d3b7      	bcc.n	8005892 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005922:	2300      	movs	r3, #0
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	e043      	b.n	80059b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800593a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800593e:	d118      	bne.n	8005972 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	461a      	mov	r2, r3
 8005954:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	e013      	b.n	8005984 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005968:	461a      	mov	r2, r3
 800596a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	e008      	b.n	8005984 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	461a      	mov	r2, r3
 8005980:	2300      	movs	r3, #0
 8005982:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005990:	461a      	mov	r2, r3
 8005992:	2300      	movs	r3, #0
 8005994:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a2:	461a      	mov	r2, r3
 80059a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	3301      	adds	r3, #1
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d3b7      	bcc.n	8005928 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80059d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d105      	bne.n	80059ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f043 0210 	orr.w	r2, r3, #16
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699a      	ldr	r2, [r3, #24]
 80059f0:	4b0f      	ldr	r3, [pc, #60]	; (8005a30 <USB_DevInit+0x2c4>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f043 0208 	orr.w	r2, r3, #8
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d107      	bne.n	8005a20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a18:	f043 0304 	orr.w	r3, r3, #4
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a2c:	b004      	add	sp, #16
 8005a2e:	4770      	bx	lr
 8005a30:	803c3800 	.word	0x803c3800

08005a34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3301      	adds	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4a13      	ldr	r2, [pc, #76]	; (8005a98 <USB_FlushTxFifo+0x64>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d901      	bls.n	8005a54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e01b      	b.n	8005a8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	daf2      	bge.n	8005a42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	019b      	lsls	r3, r3, #6
 8005a64:	f043 0220 	orr.w	r2, r3, #32
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4a08      	ldr	r2, [pc, #32]	; (8005a98 <USB_FlushTxFifo+0x64>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d901      	bls.n	8005a7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e006      	b.n	8005a8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b20      	cmp	r3, #32
 8005a88:	d0f0      	beq.n	8005a6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	00030d40 	.word	0x00030d40

08005a9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4a11      	ldr	r2, [pc, #68]	; (8005af8 <USB_FlushRxFifo+0x5c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d901      	bls.n	8005aba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e018      	b.n	8005aec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	daf2      	bge.n	8005aa8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2210      	movs	r2, #16
 8005aca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4a08      	ldr	r2, [pc, #32]	; (8005af8 <USB_FlushRxFifo+0x5c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d901      	bls.n	8005ade <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e006      	b.n	8005aec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b10      	cmp	r3, #16
 8005ae8:	d0f0      	beq.n	8005acc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	00030d40 	.word	0x00030d40

08005afc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	68f9      	ldr	r1, [r7, #12]
 8005b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b087      	sub	sp, #28
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 0306 	and.w	r3, r3, #6
 8005b46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	75fb      	strb	r3, [r7, #23]
 8005b52:	e00a      	b.n	8005b6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d002      	beq.n	8005b60 <USB_GetDevSpeed+0x32>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2b06      	cmp	r3, #6
 8005b5e:	d102      	bne.n	8005b66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b60:	2302      	movs	r3, #2
 8005b62:	75fb      	strb	r3, [r7, #23]
 8005b64:	e001      	b.n	8005b6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b66:	230f      	movs	r3, #15
 8005b68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d13a      	bne.n	8005c0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	68f9      	ldr	r1, [r7, #12]
 8005bae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d155      	bne.n	8005c78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	791b      	ldrb	r3, [r3, #4]
 8005be6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005be8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	059b      	lsls	r3, r3, #22
 8005bee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	e036      	b.n	8005c78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c10:	69da      	ldr	r2, [r3, #28]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c20:	041b      	lsls	r3, r3, #16
 8005c22:	68f9      	ldr	r1, [r7, #12]
 8005c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d11a      	bne.n	8005c78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	791b      	ldrb	r3, [r3, #4]
 8005c5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	4313      	orrs	r3, r2
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	785b      	ldrb	r3, [r3, #1]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d161      	bne.n	8005d68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cba:	d11f      	bne.n	8005cfc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	43db      	mvns	r3, r3
 8005d16:	68f9      	ldr	r1, [r7, #12]
 8005d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d26:	69da      	ldr	r2, [r3, #28]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	2101      	movs	r1, #1
 8005d32:	fa01 f303 	lsl.w	r3, r1, r3
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	68f9      	ldr	r1, [r7, #12]
 8005d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d40:	4013      	ands	r3, r2
 8005d42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	0159      	lsls	r1, r3, #5
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	440b      	add	r3, r1
 8005d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4b35      	ldr	r3, [pc, #212]	; (8005e38 <USB_DeactivateEndpoint+0x1b0>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	600b      	str	r3, [r1, #0]
 8005d66:	e060      	b.n	8005e2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d7e:	d11f      	bne.n	8005dc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	0151      	lsls	r1, r2, #5
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	440a      	add	r2, r1
 8005db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd6:	041b      	lsls	r3, r3, #16
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005de0:	4013      	ands	r3, r2
 8005de2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dea:	69da      	ldr	r2, [r3, #28]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	2101      	movs	r1, #1
 8005df6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfa:	041b      	lsls	r3, r3, #16
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	68f9      	ldr	r1, [r7, #12]
 8005e00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e04:	4013      	ands	r3, r2
 8005e06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	0159      	lsls	r1, r3, #5
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	440b      	add	r3, r1
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e22:	4619      	mov	r1, r3
 8005e24:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <USB_DeactivateEndpoint+0x1b4>)
 8005e26:	4013      	ands	r3, r2
 8005e28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	ec337800 	.word	0xec337800
 8005e3c:	eff37800 	.word	0xeff37800

08005e40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08a      	sub	sp, #40	; 0x28
 8005e44:	af02      	add	r7, sp, #8
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	f040 815c 	bne.w	800611a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d132      	bne.n	8005ed0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	0151      	lsls	r1, r2, #5
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	440a      	add	r2, r1
 8005ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec8:	0cdb      	lsrs	r3, r3, #19
 8005eca:	04db      	lsls	r3, r3, #19
 8005ecc:	6113      	str	r3, [r2, #16]
 8005ece:	e074      	b.n	8005fba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eea:	0cdb      	lsrs	r3, r3, #19
 8005eec:	04db      	lsls	r3, r3, #19
 8005eee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f20:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	6999      	ldr	r1, [r3, #24]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	440b      	add	r3, r1
 8005f2c:	1e59      	subs	r1, r3, #1
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f36:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f38:	4b9d      	ldr	r3, [pc, #628]	; (80061b0 <USB_EPStartXfer+0x370>)
 8005f3a:	400b      	ands	r3, r1
 8005f3c:	69b9      	ldr	r1, [r7, #24]
 8005f3e:	0148      	lsls	r0, r1, #5
 8005f40:	69f9      	ldr	r1, [r7, #28]
 8005f42:	4401      	add	r1, r0
 8005f44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f62:	69b9      	ldr	r1, [r7, #24]
 8005f64:	0148      	lsls	r0, r1, #5
 8005f66:	69f9      	ldr	r1, [r7, #28]
 8005f68:	4401      	add	r1, r0
 8005f6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	791b      	ldrb	r3, [r3, #4]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d11f      	bne.n	8005fba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005f98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fb8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005fba:	79fb      	ldrb	r3, [r7, #7]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d14b      	bne.n	8006058 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d009      	beq.n	8005fdc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	791b      	ldrb	r3, [r3, #4]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d128      	bne.n	8006036 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d110      	bne.n	8006016 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	440a      	add	r2, r1
 800600a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	e00f      	b.n	8006036 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	0151      	lsls	r1, r2, #5
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	440a      	add	r2, r1
 800602c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006034:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	440a      	add	r2, r1
 800604c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006050:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	e133      	b.n	80062c0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006072:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006076:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	791b      	ldrb	r3, [r3, #4]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d015      	beq.n	80060ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 811b 	beq.w	80062c0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	f003 030f 	and.w	r3, r3, #15
 800609a:	2101      	movs	r1, #1
 800609c:	fa01 f303 	lsl.w	r3, r1, r3
 80060a0:	69f9      	ldr	r1, [r7, #28]
 80060a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060a6:	4313      	orrs	r3, r2
 80060a8:	634b      	str	r3, [r1, #52]	; 0x34
 80060aa:	e109      	b.n	80062c0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d110      	bne.n	80060de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	0151      	lsls	r1, r2, #5
 80060ce:	69fa      	ldr	r2, [r7, #28]
 80060d0:	440a      	add	r2, r1
 80060d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	e00f      	b.n	80060fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	6919      	ldr	r1, [r3, #16]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	781a      	ldrb	r2, [r3, #0]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	b298      	uxth	r0, r3
 800610c:	79fb      	ldrb	r3, [r7, #7]
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	4603      	mov	r3, r0
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 fade 	bl	80066d4 <USB_WritePacket>
 8006118:	e0d2      	b.n	80062c0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	0151      	lsls	r1, r2, #5
 800612c:	69fa      	ldr	r2, [r7, #28]
 800612e:	440a      	add	r2, r1
 8006130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006134:	0cdb      	lsrs	r3, r3, #19
 8006136:	04db      	lsls	r3, r3, #19
 8006138:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	0151      	lsls	r1, r2, #5
 800614c:	69fa      	ldr	r2, [r7, #28]
 800614e:	440a      	add	r2, r1
 8006150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006154:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006158:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800615c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d126      	bne.n	80061b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800617c:	69b9      	ldr	r1, [r7, #24]
 800617e:	0148      	lsls	r0, r1, #5
 8006180:	69f9      	ldr	r1, [r7, #28]
 8006182:	4401      	add	r1, r0
 8006184:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006188:	4313      	orrs	r3, r2
 800618a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061aa:	6113      	str	r3, [r2, #16]
 80061ac:	e03a      	b.n	8006224 <USB_EPStartXfer+0x3e4>
 80061ae:	bf00      	nop
 80061b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	1e5a      	subs	r2, r3, #1
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	8afa      	ldrh	r2, [r7, #22]
 80061d0:	fb03 f202 	mul.w	r2, r3, r2
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	8afb      	ldrh	r3, [r7, #22]
 80061e8:	04d9      	lsls	r1, r3, #19
 80061ea:	4b38      	ldr	r3, [pc, #224]	; (80062cc <USB_EPStartXfer+0x48c>)
 80061ec:	400b      	ands	r3, r1
 80061ee:	69b9      	ldr	r1, [r7, #24]
 80061f0:	0148      	lsls	r0, r1, #5
 80061f2:	69f9      	ldr	r1, [r7, #28]
 80061f4:	4401      	add	r1, r0
 80061f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061fa:	4313      	orrs	r3, r2
 80061fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006214:	69b9      	ldr	r1, [r7, #24]
 8006216:	0148      	lsls	r0, r1, #5
 8006218:	69f9      	ldr	r1, [r7, #28]
 800621a:	4401      	add	r1, r0
 800621c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006220:	4313      	orrs	r3, r2
 8006222:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006224:	79fb      	ldrb	r3, [r7, #7]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d10d      	bne.n	8006246 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d009      	beq.n	8006246 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	6919      	ldr	r1, [r3, #16]
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	460a      	mov	r2, r1
 8006244:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	791b      	ldrb	r3, [r3, #4]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d128      	bne.n	80062a0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625a:	2b00      	cmp	r3, #0
 800625c:	d110      	bne.n	8006280 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	0151      	lsls	r1, r2, #5
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	440a      	add	r2, r1
 8006274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006278:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	e00f      	b.n	80062a0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800629a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	1ff80000 	.word	0x1ff80000

080062d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	785b      	ldrb	r3, [r3, #1]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	f040 80ce 	bne.w	800648e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d132      	bne.n	8006360 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	440a      	add	r2, r1
 8006310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006314:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006318:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800631c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	440a      	add	r2, r1
 8006334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800633c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	0151      	lsls	r1, r2, #5
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	440a      	add	r2, r1
 8006354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006358:	0cdb      	lsrs	r3, r3, #19
 800635a:	04db      	lsls	r3, r3, #19
 800635c:	6113      	str	r3, [r2, #16]
 800635e:	e04e      	b.n	80063fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	440a      	add	r2, r1
 8006376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800637a:	0cdb      	lsrs	r3, r3, #19
 800637c:	04db      	lsls	r3, r3, #19
 800637e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	440a      	add	r2, r1
 8006396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800639a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800639e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	699a      	ldr	r2, [r3, #24]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d903      	bls.n	80063b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e4:	691a      	ldr	r2, [r3, #16]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ee:	6939      	ldr	r1, [r7, #16]
 80063f0:	0148      	lsls	r0, r1, #5
 80063f2:	6979      	ldr	r1, [r7, #20]
 80063f4:	4401      	add	r1, r0
 80063f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063fa:	4313      	orrs	r3, r2
 80063fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d11e      	bne.n	8006442 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d009      	beq.n	8006420 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006418:	461a      	mov	r2, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	440a      	add	r2, r1
 8006436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800643a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	e097      	b.n	8006572 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	0151      	lsls	r1, r2, #5
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	440a      	add	r2, r1
 8006458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800645c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006460:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 8083 	beq.w	8006572 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	2101      	movs	r1, #1
 800647e:	fa01 f303 	lsl.w	r3, r1, r3
 8006482:	6979      	ldr	r1, [r7, #20]
 8006484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006488:	4313      	orrs	r3, r2
 800648a:	634b      	str	r3, [r1, #52]	; 0x34
 800648c:	e071      	b.n	8006572 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	0151      	lsls	r1, r2, #5
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	440a      	add	r2, r1
 80064a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a8:	0cdb      	lsrs	r3, r3, #19
 80064aa:	04db      	lsls	r3, r3, #19
 80064ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006508:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006516:	691a      	ldr	r2, [r3, #16]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006520:	6939      	ldr	r1, [r7, #16]
 8006522:	0148      	lsls	r0, r1, #5
 8006524:	6979      	ldr	r1, [r7, #20]
 8006526:	4401      	add	r1, r0
 8006528:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800652c:	4313      	orrs	r3, r2
 800652e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006530:	79fb      	ldrb	r3, [r7, #7]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d10d      	bne.n	8006552 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	6919      	ldr	r1, [r3, #16]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654e:	460a      	mov	r2, r1
 8006550:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	0151      	lsls	r1, r2, #5
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	440a      	add	r2, r1
 8006568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800656c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006570:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	785b      	ldrb	r3, [r3, #1]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d14a      	bne.n	8006634 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065b6:	f040 8086 	bne.w	80066c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	7812      	ldrb	r2, [r2, #0]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	7812      	ldrb	r2, [r2, #0]
 80065f2:	0151      	lsls	r1, r2, #5
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	440a      	add	r2, r1
 80065f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006600:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3301      	adds	r3, #1
 8006606:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f242 7210 	movw	r2, #10000	; 0x2710
 800660e:	4293      	cmp	r3, r2
 8006610:	d902      	bls.n	8006618 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	75fb      	strb	r3, [r7, #23]
          break;
 8006616:	e056      	b.n	80066c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800662c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006630:	d0e7      	beq.n	8006602 <USB_EPStopXfer+0x82>
 8006632:	e048      	b.n	80066c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800664c:	d13b      	bne.n	80066c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	7812      	ldrb	r2, [r2, #0]
 8006662:	0151      	lsls	r1, r2, #5
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	440a      	add	r2, r1
 8006668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800666c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006670:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	7812      	ldrb	r2, [r2, #0]
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006694:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3301      	adds	r3, #1
 800669a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f242 7210 	movw	r2, #10000	; 0x2710
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d902      	bls.n	80066ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	75fb      	strb	r3, [r7, #23]
          break;
 80066aa:	e00c      	b.n	80066c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066c4:	d0e7      	beq.n	8006696 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b089      	sub	sp, #36	; 0x24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	4611      	mov	r1, r2
 80066e0:	461a      	mov	r2, r3
 80066e2:	460b      	mov	r3, r1
 80066e4:	71fb      	strb	r3, [r7, #7]
 80066e6:	4613      	mov	r3, r2
 80066e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d123      	bne.n	8006742 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066fa:	88bb      	ldrh	r3, [r7, #4]
 80066fc:	3303      	adds	r3, #3
 80066fe:	089b      	lsrs	r3, r3, #2
 8006700:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006702:	2300      	movs	r3, #0
 8006704:	61bb      	str	r3, [r7, #24]
 8006706:	e018      	b.n	800673a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006708:	79fb      	ldrb	r3, [r7, #7]
 800670a:	031a      	lsls	r2, r3, #12
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	4413      	add	r3, r2
 8006710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006714:	461a      	mov	r2, r3
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	3301      	adds	r3, #1
 8006720:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	3301      	adds	r3, #1
 8006726:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	3301      	adds	r3, #1
 800672c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	3301      	adds	r3, #1
 8006732:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	3301      	adds	r3, #1
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	429a      	cmp	r2, r3
 8006740:	d3e2      	bcc.n	8006708 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3724      	adds	r7, #36	; 0x24
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006750:	b480      	push	{r7}
 8006752:	b08b      	sub	sp, #44	; 0x2c
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	4613      	mov	r3, r2
 800675c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	089b      	lsrs	r3, r3, #2
 800676a:	b29b      	uxth	r3, r3
 800676c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	f003 0303 	and.w	r3, r3, #3
 8006774:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006776:	2300      	movs	r3, #0
 8006778:	623b      	str	r3, [r7, #32]
 800677a:	e014      	b.n	80067a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	601a      	str	r2, [r3, #0]
    pDest++;
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	3301      	adds	r3, #1
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	3301      	adds	r3, #1
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	3301      	adds	r3, #1
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	3301      	adds	r3, #1
 800679e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	3301      	adds	r3, #1
 80067a4:	623b      	str	r3, [r7, #32]
 80067a6:	6a3a      	ldr	r2, [r7, #32]
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d3e6      	bcc.n	800677c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067ae:	8bfb      	ldrh	r3, [r7, #30]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d01e      	beq.n	80067f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067be:	461a      	mov	r2, r3
 80067c0:	f107 0310 	add.w	r3, r7, #16
 80067c4:	6812      	ldr	r2, [r2, #0]
 80067c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	00db      	lsls	r3, r3, #3
 80067d0:	fa22 f303 	lsr.w	r3, r2, r3
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	701a      	strb	r2, [r3, #0]
      i++;
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	3301      	adds	r3, #1
 80067de:	623b      	str	r3, [r7, #32]
      pDest++;
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	3301      	adds	r3, #1
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80067e6:	8bfb      	ldrh	r3, [r7, #30]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067ec:	8bfb      	ldrh	r3, [r7, #30]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1ea      	bne.n	80067c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	372c      	adds	r7, #44	; 0x2c
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	785b      	ldrb	r3, [r3, #1]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d12c      	bne.n	8006876 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	db12      	blt.n	8006854 <USB_EPSetStall+0x54>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00f      	beq.n	8006854 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	0151      	lsls	r1, r2, #5
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	440a      	add	r2, r1
 800684a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006852:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	440a      	add	r2, r1
 800686a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	e02b      	b.n	80068ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	db12      	blt.n	80068ae <USB_EPSetStall+0xae>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00f      	beq.n	80068ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	0151      	lsls	r1, r2, #5
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	440a      	add	r2, r1
 80068a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	0151      	lsls	r1, r2, #5
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	440a      	add	r2, r1
 80068c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	785b      	ldrb	r3, [r3, #1]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d128      	bne.n	800694a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	0151      	lsls	r1, r2, #5
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	440a      	add	r2, r1
 800690e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006912:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006916:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	791b      	ldrb	r3, [r3, #4]
 800691c:	2b03      	cmp	r3, #3
 800691e:	d003      	beq.n	8006928 <USB_EPClearStall+0x4c>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	791b      	ldrb	r3, [r3, #4]
 8006924:	2b02      	cmp	r3, #2
 8006926:	d138      	bne.n	800699a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	0151      	lsls	r1, r2, #5
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	440a      	add	r2, r1
 800693e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	e027      	b.n	800699a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	0151      	lsls	r1, r2, #5
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	440a      	add	r2, r1
 8006960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006964:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006968:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	791b      	ldrb	r3, [r3, #4]
 800696e:	2b03      	cmp	r3, #3
 8006970:	d003      	beq.n	800697a <USB_EPClearStall+0x9e>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	791b      	ldrb	r3, [r3, #4]
 8006976:	2b02      	cmp	r3, #2
 8006978:	d10f      	bne.n	800699a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	440a      	add	r2, r1
 8006990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006998:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80069ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	78fb      	ldrb	r3, [r7, #3]
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80069dc:	68f9      	ldr	r1, [r7, #12]
 80069de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e2:	4313      	orrs	r3, r2
 80069e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a0e:	f023 0303 	bic.w	r3, r3, #3
 8006a12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a22:	f023 0302 	bic.w	r3, r3, #2
 8006a26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a50:	f023 0303 	bic.w	r3, r3, #3
 8006a54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a64:	f043 0302 	orr.w	r3, r3, #2
 8006a68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a90:	68fb      	ldr	r3, [r7, #12]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	0c1b      	lsrs	r3, r3, #16
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	4013      	ands	r3, r2
 8006af4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	b29b      	uxth	r3, r3
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b16:	78fb      	ldrb	r3, [r7, #3]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	4013      	ands	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b34:	68bb      	ldr	r3, [r7, #8]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b087      	sub	sp, #28
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b66:	78fb      	ldrb	r3, [r7, #3]
 8006b68:	f003 030f 	and.w	r3, r3, #15
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b72:	01db      	lsls	r3, r3, #7
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b90:	68bb      	ldr	r3, [r7, #8]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	f003 0301 	and.w	r3, r3, #1
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b085      	sub	sp, #20
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006bd8:	f023 0307 	bic.w	r3, r3, #7
 8006bdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	333c      	adds	r3, #60	; 0x3c
 8006c16:	3304      	adds	r3, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	4a26      	ldr	r2, [pc, #152]	; (8006cb8 <USB_EP0_OutStart+0xb8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d90a      	bls.n	8006c3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c34:	d101      	bne.n	8006c3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	e037      	b.n	8006caa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c40:	461a      	mov	r2, r3
 8006c42:	2300      	movs	r3, #0
 8006c44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c68:	f043 0318 	orr.w	r3, r3, #24
 8006c6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006c80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c82:	7afb      	ldrb	r3, [r7, #11]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d10f      	bne.n	8006ca8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8e:	461a      	mov	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ca6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	4f54300a 	.word	0x4f54300a

08006cbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4a13      	ldr	r2, [pc, #76]	; (8006d20 <USB_CoreReset+0x64>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d901      	bls.n	8006cda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e01b      	b.n	8006d12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	daf2      	bge.n	8006cc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f043 0201 	orr.w	r2, r3, #1
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4a09      	ldr	r2, [pc, #36]	; (8006d20 <USB_CoreReset+0x64>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d901      	bls.n	8006d04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e006      	b.n	8006d12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d0f0      	beq.n	8006cf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	00030d40 	.word	0x00030d40

08006d24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d34:	f002 fc28 	bl	8009588 <USBD_static_malloc>
 8006d38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	32b0      	adds	r2, #176	; 0xb0
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d50:	2302      	movs	r3, #2
 8006d52:	e0d4      	b.n	8006efe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d54:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006d58:	2100      	movs	r1, #0
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f002 fc7c 	bl	8009658 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	32b0      	adds	r2, #176	; 0xb0
 8006d6a:	68f9      	ldr	r1, [r7, #12]
 8006d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	32b0      	adds	r2, #176	; 0xb0
 8006d7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	7c1b      	ldrb	r3, [r3, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d138      	bne.n	8006dfe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d8c:	4b5e      	ldr	r3, [pc, #376]	; (8006f08 <USBD_CDC_Init+0x1e4>)
 8006d8e:	7819      	ldrb	r1, [r3, #0]
 8006d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d94:	2202      	movs	r2, #2
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f002 fad3 	bl	8009342 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d9c:	4b5a      	ldr	r3, [pc, #360]	; (8006f08 <USBD_CDC_Init+0x1e4>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	f003 020f 	and.w	r2, r3, #15
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	3324      	adds	r3, #36	; 0x24
 8006db2:	2201      	movs	r2, #1
 8006db4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006db6:	4b55      	ldr	r3, [pc, #340]	; (8006f0c <USBD_CDC_Init+0x1e8>)
 8006db8:	7819      	ldrb	r1, [r3, #0]
 8006dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f002 fabe 	bl	8009342 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006dc6:	4b51      	ldr	r3, [pc, #324]	; (8006f0c <USBD_CDC_Init+0x1e8>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	f003 020f 	and.w	r2, r3, #15
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006dde:	2201      	movs	r2, #1
 8006de0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006de2:	4b4b      	ldr	r3, [pc, #300]	; (8006f10 <USBD_CDC_Init+0x1ec>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f003 020f 	and.w	r2, r3, #15
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	3326      	adds	r3, #38	; 0x26
 8006df8:	2210      	movs	r2, #16
 8006dfa:	801a      	strh	r2, [r3, #0]
 8006dfc:	e035      	b.n	8006e6a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006dfe:	4b42      	ldr	r3, [pc, #264]	; (8006f08 <USBD_CDC_Init+0x1e4>)
 8006e00:	7819      	ldrb	r1, [r3, #0]
 8006e02:	2340      	movs	r3, #64	; 0x40
 8006e04:	2202      	movs	r2, #2
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f002 fa9b 	bl	8009342 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e0c:	4b3e      	ldr	r3, [pc, #248]	; (8006f08 <USBD_CDC_Init+0x1e4>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	f003 020f 	and.w	r2, r3, #15
 8006e14:	6879      	ldr	r1, [r7, #4]
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	440b      	add	r3, r1
 8006e20:	3324      	adds	r3, #36	; 0x24
 8006e22:	2201      	movs	r2, #1
 8006e24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e26:	4b39      	ldr	r3, [pc, #228]	; (8006f0c <USBD_CDC_Init+0x1e8>)
 8006e28:	7819      	ldrb	r1, [r3, #0]
 8006e2a:	2340      	movs	r3, #64	; 0x40
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f002 fa87 	bl	8009342 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e34:	4b35      	ldr	r3, [pc, #212]	; (8006f0c <USBD_CDC_Init+0x1e8>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	f003 020f 	and.w	r2, r3, #15
 8006e3c:	6879      	ldr	r1, [r7, #4]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	440b      	add	r3, r1
 8006e48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e50:	4b2f      	ldr	r3, [pc, #188]	; (8006f10 <USBD_CDC_Init+0x1ec>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	f003 020f 	and.w	r2, r3, #15
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	440b      	add	r3, r1
 8006e64:	3326      	adds	r3, #38	; 0x26
 8006e66:	2210      	movs	r2, #16
 8006e68:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e6a:	4b29      	ldr	r3, [pc, #164]	; (8006f10 <USBD_CDC_Init+0x1ec>)
 8006e6c:	7819      	ldrb	r1, [r3, #0]
 8006e6e:	2308      	movs	r3, #8
 8006e70:	2203      	movs	r2, #3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f002 fa65 	bl	8009342 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e78:	4b25      	ldr	r3, [pc, #148]	; (8006f10 <USBD_CDC_Init+0x1ec>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	f003 020f 	and.w	r2, r3, #15
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	440b      	add	r3, r1
 8006e8c:	3324      	adds	r3, #36	; 0x24
 8006e8e:	2201      	movs	r2, #1
 8006e90:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	33b0      	adds	r3, #176	; 0xb0
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e018      	b.n	8006efe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	7c1b      	ldrb	r3, [r3, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ed4:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <USBD_CDC_Init+0x1e8>)
 8006ed6:	7819      	ldrb	r1, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f002 fb1c 	bl	8009520 <USBD_LL_PrepareReceive>
 8006ee8:	e008      	b.n	8006efc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eea:	4b08      	ldr	r3, [pc, #32]	; (8006f0c <USBD_CDC_Init+0x1e8>)
 8006eec:	7819      	ldrb	r1, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ef4:	2340      	movs	r3, #64	; 0x40
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f002 fb12 	bl	8009520 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	2000009b 	.word	0x2000009b
 8006f0c:	2000009c 	.word	0x2000009c
 8006f10:	2000009d 	.word	0x2000009d

08006f14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f20:	4b3a      	ldr	r3, [pc, #232]	; (800700c <USBD_CDC_DeInit+0xf8>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f002 fa31 	bl	800938e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f2c:	4b37      	ldr	r3, [pc, #220]	; (800700c <USBD_CDC_DeInit+0xf8>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	f003 020f 	and.w	r2, r3, #15
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	440b      	add	r3, r1
 8006f40:	3324      	adds	r3, #36	; 0x24
 8006f42:	2200      	movs	r2, #0
 8006f44:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f46:	4b32      	ldr	r3, [pc, #200]	; (8007010 <USBD_CDC_DeInit+0xfc>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f002 fa1e 	bl	800938e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f52:	4b2f      	ldr	r3, [pc, #188]	; (8007010 <USBD_CDC_DeInit+0xfc>)
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	f003 020f 	and.w	r2, r3, #15
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f6e:	4b29      	ldr	r3, [pc, #164]	; (8007014 <USBD_CDC_DeInit+0x100>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f002 fa0a 	bl	800938e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f7a:	4b26      	ldr	r3, [pc, #152]	; (8007014 <USBD_CDC_DeInit+0x100>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	f003 020f 	and.w	r2, r3, #15
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	4613      	mov	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	440b      	add	r3, r1
 8006f8e:	3324      	adds	r3, #36	; 0x24
 8006f90:	2200      	movs	r2, #0
 8006f92:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006f94:	4b1f      	ldr	r3, [pc, #124]	; (8007014 <USBD_CDC_DeInit+0x100>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	f003 020f 	and.w	r2, r3, #15
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	3326      	adds	r3, #38	; 0x26
 8006faa:	2200      	movs	r2, #0
 8006fac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	32b0      	adds	r2, #176	; 0xb0
 8006fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01f      	beq.n	8007000 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	33b0      	adds	r3, #176	; 0xb0
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	32b0      	adds	r2, #176	; 0xb0
 8006fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f002 fade 	bl	80095a4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	32b0      	adds	r2, #176	; 0xb0
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	2000009b 	.word	0x2000009b
 8007010:	2000009c 	.word	0x2000009c
 8007014:	2000009d 	.word	0x2000009d

08007018 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	32b0      	adds	r2, #176	; 0xb0
 800702c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007030:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007044:	2303      	movs	r3, #3
 8007046:	e0bf      	b.n	80071c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007050:	2b00      	cmp	r3, #0
 8007052:	d050      	beq.n	80070f6 <USBD_CDC_Setup+0xde>
 8007054:	2b20      	cmp	r3, #32
 8007056:	f040 80af 	bne.w	80071b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	88db      	ldrh	r3, [r3, #6]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d03a      	beq.n	80070d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	b25b      	sxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	da1b      	bge.n	80070a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	33b0      	adds	r3, #176	; 0xb0
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007082:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	88d2      	ldrh	r2, [r2, #6]
 8007088:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	88db      	ldrh	r3, [r3, #6]
 800708e:	2b07      	cmp	r3, #7
 8007090:	bf28      	it	cs
 8007092:	2307      	movcs	r3, #7
 8007094:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	89fa      	ldrh	r2, [r7, #14]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fd43 	bl	8008b28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80070a2:	e090      	b.n	80071c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	785a      	ldrb	r2, [r3, #1]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	88db      	ldrh	r3, [r3, #6]
 80070b2:	2b3f      	cmp	r3, #63	; 0x3f
 80070b4:	d803      	bhi.n	80070be <USBD_CDC_Setup+0xa6>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	88db      	ldrh	r3, [r3, #6]
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	e000      	b.n	80070c0 <USBD_CDC_Setup+0xa8>
 80070be:	2240      	movs	r2, #64	; 0x40
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80070c6:	6939      	ldr	r1, [r7, #16]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80070ce:	461a      	mov	r2, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 fd55 	bl	8008b80 <USBD_CtlPrepareRx>
      break;
 80070d6:	e076      	b.n	80071c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	33b0      	adds	r3, #176	; 0xb0
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	7850      	ldrb	r0, [r2, #1]
 80070ee:	2200      	movs	r2, #0
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	4798      	blx	r3
      break;
 80070f4:	e067      	b.n	80071c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	785b      	ldrb	r3, [r3, #1]
 80070fa:	2b0b      	cmp	r3, #11
 80070fc:	d851      	bhi.n	80071a2 <USBD_CDC_Setup+0x18a>
 80070fe:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <USBD_CDC_Setup+0xec>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	08007135 	.word	0x08007135
 8007108:	080071b1 	.word	0x080071b1
 800710c:	080071a3 	.word	0x080071a3
 8007110:	080071a3 	.word	0x080071a3
 8007114:	080071a3 	.word	0x080071a3
 8007118:	080071a3 	.word	0x080071a3
 800711c:	080071a3 	.word	0x080071a3
 8007120:	080071a3 	.word	0x080071a3
 8007124:	080071a3 	.word	0x080071a3
 8007128:	080071a3 	.word	0x080071a3
 800712c:	0800715f 	.word	0x0800715f
 8007130:	08007189 	.word	0x08007189
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b03      	cmp	r3, #3
 800713e:	d107      	bne.n	8007150 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007140:	f107 030a 	add.w	r3, r7, #10
 8007144:	2202      	movs	r2, #2
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 fced 	bl	8008b28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800714e:	e032      	b.n	80071b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 fc77 	bl	8008a46 <USBD_CtlError>
            ret = USBD_FAIL;
 8007158:	2303      	movs	r3, #3
 800715a:	75fb      	strb	r3, [r7, #23]
          break;
 800715c:	e02b      	b.n	80071b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b03      	cmp	r3, #3
 8007168:	d107      	bne.n	800717a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800716a:	f107 030d 	add.w	r3, r7, #13
 800716e:	2201      	movs	r2, #1
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f001 fcd8 	bl	8008b28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007178:	e01d      	b.n	80071b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f001 fc62 	bl	8008a46 <USBD_CtlError>
            ret = USBD_FAIL;
 8007182:	2303      	movs	r3, #3
 8007184:	75fb      	strb	r3, [r7, #23]
          break;
 8007186:	e016      	b.n	80071b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b03      	cmp	r3, #3
 8007192:	d00f      	beq.n	80071b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f001 fc55 	bl	8008a46 <USBD_CtlError>
            ret = USBD_FAIL;
 800719c:	2303      	movs	r3, #3
 800719e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80071a0:	e008      	b.n	80071b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fc4e 	bl	8008a46 <USBD_CtlError>
          ret = USBD_FAIL;
 80071aa:	2303      	movs	r3, #3
 80071ac:	75fb      	strb	r3, [r7, #23]
          break;
 80071ae:	e002      	b.n	80071b6 <USBD_CDC_Setup+0x19e>
          break;
 80071b0:	bf00      	nop
 80071b2:	e008      	b.n	80071c6 <USBD_CDC_Setup+0x1ae>
          break;
 80071b4:	bf00      	nop
      }
      break;
 80071b6:	e006      	b.n	80071c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f001 fc43 	bl	8008a46 <USBD_CtlError>
      ret = USBD_FAIL;
 80071c0:	2303      	movs	r3, #3
 80071c2:	75fb      	strb	r3, [r7, #23]
      break;
 80071c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	32b0      	adds	r2, #176	; 0xb0
 80071ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e065      	b.n	80072c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	32b0      	adds	r2, #176	; 0xb0
 8007204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007208:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800720a:	78fb      	ldrb	r3, [r7, #3]
 800720c:	f003 020f 	and.w	r2, r3, #15
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	440b      	add	r3, r1
 800721c:	3318      	adds	r3, #24
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d02f      	beq.n	8007284 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007224:	78fb      	ldrb	r3, [r7, #3]
 8007226:	f003 020f 	and.w	r2, r3, #15
 800722a:	6879      	ldr	r1, [r7, #4]
 800722c:	4613      	mov	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	440b      	add	r3, r1
 8007236:	3318      	adds	r3, #24
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	f003 010f 	and.w	r1, r3, #15
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	460b      	mov	r3, r1
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	440b      	add	r3, r1
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4403      	add	r3, r0
 800724c:	3348      	adds	r3, #72	; 0x48
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	fbb2 f1f3 	udiv	r1, r2, r3
 8007254:	fb01 f303 	mul.w	r3, r1, r3
 8007258:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800725a:	2b00      	cmp	r3, #0
 800725c:	d112      	bne.n	8007284 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	f003 020f 	and.w	r2, r3, #15
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	3318      	adds	r3, #24
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007276:	78f9      	ldrb	r1, [r7, #3]
 8007278:	2300      	movs	r3, #0
 800727a:	2200      	movs	r2, #0
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f002 f92e 	bl	80094de <USBD_LL_Transmit>
 8007282:	e01f      	b.n	80072c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2200      	movs	r2, #0
 8007288:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	33b0      	adds	r3, #176	; 0xb0
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d010      	beq.n	80072c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	33b0      	adds	r3, #176	; 0xb0
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80072c0:	78fa      	ldrb	r2, [r7, #3]
 80072c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	32b0      	adds	r2, #176	; 0xb0
 80072e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	32b0      	adds	r2, #176	; 0xb0
 80072f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e01a      	b.n	8007336 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f002 f92c 	bl	8009562 <USBD_LL_GetRxDataSize>
 800730a:	4602      	mov	r2, r0
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	33b0      	adds	r3, #176	; 0xb0
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007330:	4611      	mov	r1, r2
 8007332:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	32b0      	adds	r2, #176	; 0xb0
 8007350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007354:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800735c:	2303      	movs	r3, #3
 800735e:	e025      	b.n	80073ac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	33b0      	adds	r3, #176	; 0xb0
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01a      	beq.n	80073aa <USBD_CDC_EP0_RxReady+0x6c>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800737a:	2bff      	cmp	r3, #255	; 0xff
 800737c:	d015      	beq.n	80073aa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	33b0      	adds	r3, #176	; 0xb0
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007396:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800739e:	b292      	uxth	r2, r2
 80073a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	22ff      	movs	r2, #255	; 0xff
 80073a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073bc:	2182      	movs	r1, #130	; 0x82
 80073be:	4818      	ldr	r0, [pc, #96]	; (8007420 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073c0:	f000 fd09 	bl	8007dd6 <USBD_GetEpDesc>
 80073c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073c6:	2101      	movs	r1, #1
 80073c8:	4815      	ldr	r0, [pc, #84]	; (8007420 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073ca:	f000 fd04 	bl	8007dd6 <USBD_GetEpDesc>
 80073ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073d0:	2181      	movs	r1, #129	; 0x81
 80073d2:	4813      	ldr	r0, [pc, #76]	; (8007420 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073d4:	f000 fcff 	bl	8007dd6 <USBD_GetEpDesc>
 80073d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2210      	movs	r2, #16
 80073e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d006      	beq.n	80073fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f4:	711a      	strb	r2, [r3, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d006      	beq.n	800740e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007408:	711a      	strb	r2, [r3, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2243      	movs	r2, #67	; 0x43
 8007412:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007414:	4b02      	ldr	r3, [pc, #8]	; (8007420 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000058 	.word	0x20000058

08007424 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800742c:	2182      	movs	r1, #130	; 0x82
 800742e:	4818      	ldr	r0, [pc, #96]	; (8007490 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007430:	f000 fcd1 	bl	8007dd6 <USBD_GetEpDesc>
 8007434:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007436:	2101      	movs	r1, #1
 8007438:	4815      	ldr	r0, [pc, #84]	; (8007490 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800743a:	f000 fccc 	bl	8007dd6 <USBD_GetEpDesc>
 800743e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007440:	2181      	movs	r1, #129	; 0x81
 8007442:	4813      	ldr	r0, [pc, #76]	; (8007490 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007444:	f000 fcc7 	bl	8007dd6 <USBD_GetEpDesc>
 8007448:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2210      	movs	r2, #16
 8007454:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d006      	beq.n	800746a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	2200      	movs	r2, #0
 8007460:	711a      	strb	r2, [r3, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f042 0202 	orr.w	r2, r2, #2
 8007468:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d006      	beq.n	800747e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	711a      	strb	r2, [r3, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f042 0202 	orr.w	r2, r2, #2
 800747c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2243      	movs	r2, #67	; 0x43
 8007482:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007484:	4b02      	ldr	r3, [pc, #8]	; (8007490 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20000058 	.word	0x20000058

08007494 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800749c:	2182      	movs	r1, #130	; 0x82
 800749e:	4818      	ldr	r0, [pc, #96]	; (8007500 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074a0:	f000 fc99 	bl	8007dd6 <USBD_GetEpDesc>
 80074a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074a6:	2101      	movs	r1, #1
 80074a8:	4815      	ldr	r0, [pc, #84]	; (8007500 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074aa:	f000 fc94 	bl	8007dd6 <USBD_GetEpDesc>
 80074ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074b0:	2181      	movs	r1, #129	; 0x81
 80074b2:	4813      	ldr	r0, [pc, #76]	; (8007500 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074b4:	f000 fc8f 	bl	8007dd6 <USBD_GetEpDesc>
 80074b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	2210      	movs	r2, #16
 80074c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d006      	beq.n	80074da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074d4:	711a      	strb	r2, [r3, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d006      	beq.n	80074ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074e8:	711a      	strb	r2, [r3, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2243      	movs	r2, #67	; 0x43
 80074f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074f4:	4b02      	ldr	r3, [pc, #8]	; (8007500 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20000058 	.word	0x20000058

08007504 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	220a      	movs	r2, #10
 8007510:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007512:	4b03      	ldr	r3, [pc, #12]	; (8007520 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	20000014 	.word	0x20000014

08007524 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007534:	2303      	movs	r3, #3
 8007536:	e009      	b.n	800754c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	33b0      	adds	r3, #176	; 0xb0
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	32b0      	adds	r2, #176	; 0xb0
 800756e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007572:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800757a:	2303      	movs	r3, #3
 800757c:	e008      	b.n	8007590 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	371c      	adds	r7, #28
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	32b0      	adds	r2, #176	; 0xb0
 80075b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80075bc:	2303      	movs	r3, #3
 80075be:	e004      	b.n	80075ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
	...

080075d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	32b0      	adds	r2, #176	; 0xb0
 80075ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	32b0      	adds	r2, #176	; 0xb0
 80075fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007602:	2303      	movs	r3, #3
 8007604:	e018      	b.n	8007638 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	7c1b      	ldrb	r3, [r3, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800760e:	4b0c      	ldr	r3, [pc, #48]	; (8007640 <USBD_CDC_ReceivePacket+0x68>)
 8007610:	7819      	ldrb	r1, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f001 ff7f 	bl	8009520 <USBD_LL_PrepareReceive>
 8007622:	e008      	b.n	8007636 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007624:	4b06      	ldr	r3, [pc, #24]	; (8007640 <USBD_CDC_ReceivePacket+0x68>)
 8007626:	7819      	ldrb	r1, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800762e:	2340      	movs	r3, #64	; 0x40
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 ff75 	bl	8009520 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	2000009c 	.word	0x2000009c

08007644 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	4613      	mov	r3, r2
 8007650:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007658:	2303      	movs	r3, #3
 800765a:	e01f      	b.n	800769c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	79fa      	ldrb	r2, [r7, #7]
 800768e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f001 fdef 	bl	8009274 <USBD_LL_Init>
 8007696:	4603      	mov	r3, r0
 8007698:	75fb      	strb	r3, [r7, #23]

  return ret;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e025      	b.n	8007708 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	32ae      	adds	r2, #174	; 0xae
 80076ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00f      	beq.n	80076f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	32ae      	adds	r2, #174	; 0xae
 80076e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	f107 020e 	add.w	r2, r7, #14
 80076ec:	4610      	mov	r0, r2
 80076ee:	4798      	blx	r3
 80076f0:	4602      	mov	r2, r0
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f001 fdf7 	bl	800930c <USBD_LL_Start>
 800771e:	4603      	mov	r3, r0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007730:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007754:	2b00      	cmp	r3, #0
 8007756:	d009      	beq.n	800776c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	78fa      	ldrb	r2, [r7, #3]
 8007762:	4611      	mov	r1, r2
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	4798      	blx	r3
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	78fa      	ldrb	r2, [r7, #3]
 8007790:	4611      	mov	r1, r2
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	4798      	blx	r3
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800779c:	2303      	movs	r3, #3
 800779e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	4618      	mov	r0, r3
 80077be:	f001 f908 	bl	80089d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80077d0:	461a      	mov	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077de:	f003 031f 	and.w	r3, r3, #31
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d01a      	beq.n	800781c <USBD_LL_SetupStage+0x72>
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d822      	bhi.n	8007830 <USBD_LL_SetupStage+0x86>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <USBD_LL_SetupStage+0x4a>
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d00a      	beq.n	8007808 <USBD_LL_SetupStage+0x5e>
 80077f2:	e01d      	b.n	8007830 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fb5f 	bl	8007ec0 <USBD_StdDevReq>
 8007802:	4603      	mov	r3, r0
 8007804:	73fb      	strb	r3, [r7, #15]
      break;
 8007806:	e020      	b.n	800784a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fbc7 	bl	8007fa4 <USBD_StdItfReq>
 8007816:	4603      	mov	r3, r0
 8007818:	73fb      	strb	r3, [r7, #15]
      break;
 800781a:	e016      	b.n	800784a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fc29 	bl	800807c <USBD_StdEPReq>
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]
      break;
 800782e:	e00c      	b.n	800784a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007836:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800783a:	b2db      	uxtb	r3, r3
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f001 fdc4 	bl	80093cc <USBD_LL_StallEP>
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]
      break;
 8007848:	bf00      	nop
  }

  return ret;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	460b      	mov	r3, r1
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007866:	7afb      	ldrb	r3, [r7, #11]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d16e      	bne.n	800794a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007872:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800787a:	2b03      	cmp	r3, #3
 800787c:	f040 8098 	bne.w	80079b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	429a      	cmp	r2, r3
 800788a:	d913      	bls.n	80078b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	1ad2      	subs	r2, r2, r3
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	4293      	cmp	r3, r2
 80078a4:	bf28      	it	cs
 80078a6:	4613      	movcs	r3, r2
 80078a8:	461a      	mov	r2, r3
 80078aa:	6879      	ldr	r1, [r7, #4]
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f001 f984 	bl	8008bba <USBD_CtlContinueRx>
 80078b2:	e07d      	b.n	80079b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078ba:	f003 031f 	and.w	r3, r3, #31
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d014      	beq.n	80078ec <USBD_LL_DataOutStage+0x98>
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d81d      	bhi.n	8007902 <USBD_LL_DataOutStage+0xae>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <USBD_LL_DataOutStage+0x7c>
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d003      	beq.n	80078d6 <USBD_LL_DataOutStage+0x82>
 80078ce:	e018      	b.n	8007902 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	75bb      	strb	r3, [r7, #22]
            break;
 80078d4:	e018      	b.n	8007908 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	4619      	mov	r1, r3
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fa5e 	bl	8007da2 <USBD_CoreFindIF>
 80078e6:	4603      	mov	r3, r0
 80078e8:	75bb      	strb	r3, [r7, #22]
            break;
 80078ea:	e00d      	b.n	8007908 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	4619      	mov	r1, r3
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 fa60 	bl	8007dbc <USBD_CoreFindEP>
 80078fc:	4603      	mov	r3, r0
 80078fe:	75bb      	strb	r3, [r7, #22]
            break;
 8007900:	e002      	b.n	8007908 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	75bb      	strb	r3, [r7, #22]
            break;
 8007906:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007908:	7dbb      	ldrb	r3, [r7, #22]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d119      	bne.n	8007942 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b03      	cmp	r3, #3
 8007918:	d113      	bne.n	8007942 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800791a:	7dba      	ldrb	r2, [r7, #22]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	32ae      	adds	r2, #174	; 0xae
 8007920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00b      	beq.n	8007942 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800792a:	7dba      	ldrb	r2, [r7, #22]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007932:	7dba      	ldrb	r2, [r7, #22]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	32ae      	adds	r2, #174	; 0xae
 8007938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f001 f94a 	bl	8008bdc <USBD_CtlSendStatus>
 8007948:	e032      	b.n	80079b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800794a:	7afb      	ldrb	r3, [r7, #11]
 800794c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007950:	b2db      	uxtb	r3, r3
 8007952:	4619      	mov	r1, r3
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 fa31 	bl	8007dbc <USBD_CoreFindEP>
 800795a:	4603      	mov	r3, r0
 800795c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800795e:	7dbb      	ldrb	r3, [r7, #22]
 8007960:	2bff      	cmp	r3, #255	; 0xff
 8007962:	d025      	beq.n	80079b0 <USBD_LL_DataOutStage+0x15c>
 8007964:	7dbb      	ldrb	r3, [r7, #22]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d122      	bne.n	80079b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b03      	cmp	r3, #3
 8007974:	d117      	bne.n	80079a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007976:	7dba      	ldrb	r2, [r7, #22]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	32ae      	adds	r2, #174	; 0xae
 800797c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00f      	beq.n	80079a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007986:	7dba      	ldrb	r2, [r7, #22]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800798e:	7dba      	ldrb	r2, [r7, #22]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	32ae      	adds	r2, #174	; 0xae
 8007994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	7afa      	ldrb	r2, [r7, #11]
 800799c:	4611      	mov	r1, r2
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	4798      	blx	r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
 80079ae:	e000      	b.n	80079b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b086      	sub	sp, #24
 80079be:	af00      	add	r7, sp, #0
 80079c0:	60f8      	str	r0, [r7, #12]
 80079c2:	460b      	mov	r3, r1
 80079c4:	607a      	str	r2, [r7, #4]
 80079c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d16f      	bne.n	8007aae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3314      	adds	r3, #20
 80079d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d15a      	bne.n	8007a94 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	689a      	ldr	r2, [r3, #8]
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d914      	bls.n	8007a14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	689a      	ldr	r2, [r3, #8]
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	1ad2      	subs	r2, r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	461a      	mov	r2, r3
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f001 f8ac 	bl	8008b5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a06:	2300      	movs	r3, #0
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f001 fd87 	bl	8009520 <USBD_LL_PrepareReceive>
 8007a12:	e03f      	b.n	8007a94 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	68da      	ldr	r2, [r3, #12]
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d11c      	bne.n	8007a5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d316      	bcc.n	8007a5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d20f      	bcs.n	8007a5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f001 f88d 	bl	8008b5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	2200      	movs	r2, #0
 8007a50:	2100      	movs	r1, #0
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f001 fd64 	bl	8009520 <USBD_LL_PrepareReceive>
 8007a58:	e01c      	b.n	8007a94 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d10f      	bne.n	8007a86 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d009      	beq.n	8007a86 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a86:	2180      	movs	r1, #128	; 0x80
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f001 fc9f 	bl	80093cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f001 f8b7 	bl	8008c02 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d03a      	beq.n	8007b14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7ff fe42 	bl	8007728 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007aac:	e032      	b.n	8007b14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007aae:	7afb      	ldrb	r3, [r7, #11]
 8007ab0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 f97f 	bl	8007dbc <USBD_CoreFindEP>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
 8007ac4:	2bff      	cmp	r3, #255	; 0xff
 8007ac6:	d025      	beq.n	8007b14 <USBD_LL_DataInStage+0x15a>
 8007ac8:	7dfb      	ldrb	r3, [r7, #23]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d122      	bne.n	8007b14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d11c      	bne.n	8007b14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007ada:	7dfa      	ldrb	r2, [r7, #23]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	32ae      	adds	r2, #174	; 0xae
 8007ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d014      	beq.n	8007b14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007aea:	7dfa      	ldrb	r2, [r7, #23]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007af2:	7dfa      	ldrb	r2, [r7, #23]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	32ae      	adds	r2, #174	; 0xae
 8007af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	7afa      	ldrb	r2, [r7, #11]
 8007b00:	4611      	mov	r1, r2
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	4798      	blx	r3
 8007b06:	4603      	mov	r3, r0
 8007b08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007b0a:	7dbb      	ldrb	r3, [r7, #22]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007b10:	7dbb      	ldrb	r3, [r7, #22]
 8007b12:	e000      	b.n	8007b16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d014      	beq.n	8007b84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00e      	beq.n	8007b84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6852      	ldr	r2, [r2, #4]
 8007b72:	b2d2      	uxtb	r2, r2
 8007b74:	4611      	mov	r1, r2
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d001      	beq.n	8007b84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b84:	2340      	movs	r3, #64	; 0x40
 8007b86:	2200      	movs	r2, #0
 8007b88:	2100      	movs	r1, #0
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 fbd9 	bl	8009342 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2240      	movs	r2, #64	; 0x40
 8007b9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ba0:	2340      	movs	r3, #64	; 0x40
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	2180      	movs	r1, #128	; 0x80
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 fbcb 	bl	8009342 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2240      	movs	r2, #64	; 0x40
 8007bb6:	621a      	str	r2, [r3, #32]

  return ret;
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b083      	sub	sp, #12
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	78fa      	ldrb	r2, [r7, #3]
 8007bd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2204      	movs	r2, #4
 8007bfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d106      	bne.n	8007c30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d110      	bne.n	8007c74 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d005      	beq.n	8007c74 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	460b      	mov	r3, r1
 8007c88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	32ae      	adds	r2, #174	; 0xae
 8007c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e01c      	b.n	8007cda <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d115      	bne.n	8007cd8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	32ae      	adds	r2, #174	; 0xae
 8007cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	32ae      	adds	r2, #174	; 0xae
 8007cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	78fa      	ldrb	r2, [r7, #3]
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	460b      	mov	r3, r1
 8007cec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	32ae      	adds	r2, #174	; 0xae
 8007cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e01c      	b.n	8007d3e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d115      	bne.n	8007d3c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	32ae      	adds	r2, #174	; 0xae
 8007d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00b      	beq.n	8007d3c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	32ae      	adds	r2, #174	; 0xae
 8007d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	78fa      	ldrb	r2, [r7, #3]
 8007d36:	4611      	mov	r1, r2
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00e      	beq.n	8007d98 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6852      	ldr	r2, [r2, #4]
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	4611      	mov	r1, r2
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	4798      	blx	r3
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007d94:	2303      	movs	r3, #3
 8007d96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	460b      	mov	r3, r1
 8007dac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007dae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007dc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b086      	sub	sp, #24
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	885b      	ldrh	r3, [r3, #2]
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d920      	bls.n	8007e40 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007e06:	e013      	b.n	8007e30 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007e08:	f107 030a 	add.w	r3, r7, #10
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6978      	ldr	r0, [r7, #20]
 8007e10:	f000 f81b 	bl	8007e4a <USBD_GetNextDesc>
 8007e14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	785b      	ldrb	r3, [r3, #1]
 8007e1a:	2b05      	cmp	r3, #5
 8007e1c:	d108      	bne.n	8007e30 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	789b      	ldrb	r3, [r3, #2]
 8007e26:	78fa      	ldrb	r2, [r7, #3]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d008      	beq.n	8007e3e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	885b      	ldrh	r3, [r3, #2]
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	897b      	ldrh	r3, [r7, #10]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d8e5      	bhi.n	8007e08 <USBD_GetEpDesc+0x32>
 8007e3c:	e000      	b.n	8007e40 <USBD_GetEpDesc+0x6a>
          break;
 8007e3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007e40:	693b      	ldr	r3, [r7, #16]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	881a      	ldrh	r2, [r3, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	4413      	add	r3, r2
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4413      	add	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e76:	68fb      	ldr	r3, [r7, #12]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ea2:	8a3b      	ldrh	r3, [r7, #16]
 8007ea4:	021b      	lsls	r3, r3, #8
 8007ea6:	b21a      	sxth	r2, r3
 8007ea8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	b21b      	sxth	r3, r3
 8007eb0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007eb2:	89fb      	ldrh	r3, [r7, #14]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ed6:	2b40      	cmp	r3, #64	; 0x40
 8007ed8:	d005      	beq.n	8007ee6 <USBD_StdDevReq+0x26>
 8007eda:	2b40      	cmp	r3, #64	; 0x40
 8007edc:	d857      	bhi.n	8007f8e <USBD_StdDevReq+0xce>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00f      	beq.n	8007f02 <USBD_StdDevReq+0x42>
 8007ee2:	2b20      	cmp	r3, #32
 8007ee4:	d153      	bne.n	8007f8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	32ae      	adds	r2, #174	; 0xae
 8007ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	4798      	blx	r3
 8007efc:	4603      	mov	r3, r0
 8007efe:	73fb      	strb	r3, [r7, #15]
      break;
 8007f00:	e04a      	b.n	8007f98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	785b      	ldrb	r3, [r3, #1]
 8007f06:	2b09      	cmp	r3, #9
 8007f08:	d83b      	bhi.n	8007f82 <USBD_StdDevReq+0xc2>
 8007f0a:	a201      	add	r2, pc, #4	; (adr r2, 8007f10 <USBD_StdDevReq+0x50>)
 8007f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f10:	08007f65 	.word	0x08007f65
 8007f14:	08007f79 	.word	0x08007f79
 8007f18:	08007f83 	.word	0x08007f83
 8007f1c:	08007f6f 	.word	0x08007f6f
 8007f20:	08007f83 	.word	0x08007f83
 8007f24:	08007f43 	.word	0x08007f43
 8007f28:	08007f39 	.word	0x08007f39
 8007f2c:	08007f83 	.word	0x08007f83
 8007f30:	08007f5b 	.word	0x08007f5b
 8007f34:	08007f4d 	.word	0x08007f4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fa3c 	bl	80083b8 <USBD_GetDescriptor>
          break;
 8007f40:	e024      	b.n	8007f8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fba1 	bl	800868c <USBD_SetAddress>
          break;
 8007f4a:	e01f      	b.n	8007f8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fbe0 	bl	8008714 <USBD_SetConfig>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73fb      	strb	r3, [r7, #15]
          break;
 8007f58:	e018      	b.n	8007f8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fc83 	bl	8008868 <USBD_GetConfig>
          break;
 8007f62:	e013      	b.n	8007f8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fcb4 	bl	80088d4 <USBD_GetStatus>
          break;
 8007f6c:	e00e      	b.n	8007f8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fce3 	bl	800893c <USBD_SetFeature>
          break;
 8007f76:	e009      	b.n	8007f8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fd07 	bl	800898e <USBD_ClrFeature>
          break;
 8007f80:	e004      	b.n	8007f8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fd5e 	bl	8008a46 <USBD_CtlError>
          break;
 8007f8a:	bf00      	nop
      }
      break;
 8007f8c:	e004      	b.n	8007f98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fd58 	bl	8008a46 <USBD_CtlError>
      break;
 8007f96:	bf00      	nop
  }

  return ret;
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop

08007fa4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fba:	2b40      	cmp	r3, #64	; 0x40
 8007fbc:	d005      	beq.n	8007fca <USBD_StdItfReq+0x26>
 8007fbe:	2b40      	cmp	r3, #64	; 0x40
 8007fc0:	d852      	bhi.n	8008068 <USBD_StdItfReq+0xc4>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <USBD_StdItfReq+0x26>
 8007fc6:	2b20      	cmp	r3, #32
 8007fc8:	d14e      	bne.n	8008068 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d840      	bhi.n	800805a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	889b      	ldrh	r3, [r3, #4]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d836      	bhi.n	8008050 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	889b      	ldrh	r3, [r3, #4]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7ff fed9 	bl	8007da2 <USBD_CoreFindIF>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	2bff      	cmp	r3, #255	; 0xff
 8007ff8:	d01d      	beq.n	8008036 <USBD_StdItfReq+0x92>
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d11a      	bne.n	8008036 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008000:	7bba      	ldrb	r2, [r7, #14]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	32ae      	adds	r2, #174	; 0xae
 8008006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00f      	beq.n	8008030 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008010:	7bba      	ldrb	r2, [r7, #14]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008018:	7bba      	ldrb	r2, [r7, #14]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	32ae      	adds	r2, #174	; 0xae
 800801e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4798      	blx	r3
 800802a:	4603      	mov	r3, r0
 800802c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800802e:	e004      	b.n	800803a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008030:	2303      	movs	r3, #3
 8008032:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008034:	e001      	b.n	800803a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008036:	2303      	movs	r3, #3
 8008038:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	88db      	ldrh	r3, [r3, #6]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d110      	bne.n	8008064 <USBD_StdItfReq+0xc0>
 8008042:	7bfb      	ldrb	r3, [r7, #15]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10d      	bne.n	8008064 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fdc7 	bl	8008bdc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800804e:	e009      	b.n	8008064 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fcf7 	bl	8008a46 <USBD_CtlError>
          break;
 8008058:	e004      	b.n	8008064 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fcf2 	bl	8008a46 <USBD_CtlError>
          break;
 8008062:	e000      	b.n	8008066 <USBD_StdItfReq+0xc2>
          break;
 8008064:	bf00      	nop
      }
      break;
 8008066:	e004      	b.n	8008072 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fceb 	bl	8008a46 <USBD_CtlError>
      break;
 8008070:	bf00      	nop
  }

  return ret;
 8008072:	7bfb      	ldrb	r3, [r7, #15]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	889b      	ldrh	r3, [r3, #4]
 800808e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008098:	2b40      	cmp	r3, #64	; 0x40
 800809a:	d007      	beq.n	80080ac <USBD_StdEPReq+0x30>
 800809c:	2b40      	cmp	r3, #64	; 0x40
 800809e:	f200 817f 	bhi.w	80083a0 <USBD_StdEPReq+0x324>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d02a      	beq.n	80080fc <USBD_StdEPReq+0x80>
 80080a6:	2b20      	cmp	r3, #32
 80080a8:	f040 817a 	bne.w	80083a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff fe83 	bl	8007dbc <USBD_CoreFindEP>
 80080b6:	4603      	mov	r3, r0
 80080b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080ba:	7b7b      	ldrb	r3, [r7, #13]
 80080bc:	2bff      	cmp	r3, #255	; 0xff
 80080be:	f000 8174 	beq.w	80083aa <USBD_StdEPReq+0x32e>
 80080c2:	7b7b      	ldrb	r3, [r7, #13]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f040 8170 	bne.w	80083aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80080ca:	7b7a      	ldrb	r2, [r7, #13]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80080d2:	7b7a      	ldrb	r2, [r7, #13]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	32ae      	adds	r2, #174	; 0xae
 80080d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 8163 	beq.w	80083aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80080e4:	7b7a      	ldrb	r2, [r7, #13]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	32ae      	adds	r2, #174	; 0xae
 80080ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	4798      	blx	r3
 80080f6:	4603      	mov	r3, r0
 80080f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080fa:	e156      	b.n	80083aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	785b      	ldrb	r3, [r3, #1]
 8008100:	2b03      	cmp	r3, #3
 8008102:	d008      	beq.n	8008116 <USBD_StdEPReq+0x9a>
 8008104:	2b03      	cmp	r3, #3
 8008106:	f300 8145 	bgt.w	8008394 <USBD_StdEPReq+0x318>
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 809b 	beq.w	8008246 <USBD_StdEPReq+0x1ca>
 8008110:	2b01      	cmp	r3, #1
 8008112:	d03c      	beq.n	800818e <USBD_StdEPReq+0x112>
 8008114:	e13e      	b.n	8008394 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d002      	beq.n	8008128 <USBD_StdEPReq+0xac>
 8008122:	2b03      	cmp	r3, #3
 8008124:	d016      	beq.n	8008154 <USBD_StdEPReq+0xd8>
 8008126:	e02c      	b.n	8008182 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00d      	beq.n	800814a <USBD_StdEPReq+0xce>
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	2b80      	cmp	r3, #128	; 0x80
 8008132:	d00a      	beq.n	800814a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008134:	7bbb      	ldrb	r3, [r7, #14]
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f001 f947 	bl	80093cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800813e:	2180      	movs	r1, #128	; 0x80
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f001 f943 	bl	80093cc <USBD_LL_StallEP>
 8008146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008148:	e020      	b.n	800818c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fc7a 	bl	8008a46 <USBD_CtlError>
              break;
 8008152:	e01b      	b.n	800818c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	885b      	ldrh	r3, [r3, #2]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10e      	bne.n	800817a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00b      	beq.n	800817a <USBD_StdEPReq+0xfe>
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	2b80      	cmp	r3, #128	; 0x80
 8008166:	d008      	beq.n	800817a <USBD_StdEPReq+0xfe>
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	88db      	ldrh	r3, [r3, #6]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d104      	bne.n	800817a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f001 f929 	bl	80093cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fd2e 	bl	8008bdc <USBD_CtlSendStatus>

              break;
 8008180:	e004      	b.n	800818c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fc5e 	bl	8008a46 <USBD_CtlError>
              break;
 800818a:	bf00      	nop
          }
          break;
 800818c:	e107      	b.n	800839e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b02      	cmp	r3, #2
 8008198:	d002      	beq.n	80081a0 <USBD_StdEPReq+0x124>
 800819a:	2b03      	cmp	r3, #3
 800819c:	d016      	beq.n	80081cc <USBD_StdEPReq+0x150>
 800819e:	e04b      	b.n	8008238 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00d      	beq.n	80081c2 <USBD_StdEPReq+0x146>
 80081a6:	7bbb      	ldrb	r3, [r7, #14]
 80081a8:	2b80      	cmp	r3, #128	; 0x80
 80081aa:	d00a      	beq.n	80081c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 f90b 	bl	80093cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081b6:	2180      	movs	r1, #128	; 0x80
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 f907 	bl	80093cc <USBD_LL_StallEP>
 80081be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081c0:	e040      	b.n	8008244 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fc3e 	bl	8008a46 <USBD_CtlError>
              break;
 80081ca:	e03b      	b.n	8008244 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	885b      	ldrh	r3, [r3, #2]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d136      	bne.n	8008242 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
 80081d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d004      	beq.n	80081e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f001 f911 	bl	800940a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fcf7 	bl	8008bdc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80081ee:	7bbb      	ldrb	r3, [r7, #14]
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7ff fde2 	bl	8007dbc <USBD_CoreFindEP>
 80081f8:	4603      	mov	r3, r0
 80081fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081fc:	7b7b      	ldrb	r3, [r7, #13]
 80081fe:	2bff      	cmp	r3, #255	; 0xff
 8008200:	d01f      	beq.n	8008242 <USBD_StdEPReq+0x1c6>
 8008202:	7b7b      	ldrb	r3, [r7, #13]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d11c      	bne.n	8008242 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008208:	7b7a      	ldrb	r2, [r7, #13]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008210:	7b7a      	ldrb	r2, [r7, #13]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	32ae      	adds	r2, #174	; 0xae
 8008216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d010      	beq.n	8008242 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008220:	7b7a      	ldrb	r2, [r7, #13]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	32ae      	adds	r2, #174	; 0xae
 8008226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
 8008232:	4603      	mov	r3, r0
 8008234:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008236:	e004      	b.n	8008242 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fc03 	bl	8008a46 <USBD_CtlError>
              break;
 8008240:	e000      	b.n	8008244 <USBD_StdEPReq+0x1c8>
              break;
 8008242:	bf00      	nop
          }
          break;
 8008244:	e0ab      	b.n	800839e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d002      	beq.n	8008258 <USBD_StdEPReq+0x1dc>
 8008252:	2b03      	cmp	r3, #3
 8008254:	d032      	beq.n	80082bc <USBD_StdEPReq+0x240>
 8008256:	e097      	b.n	8008388 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008258:	7bbb      	ldrb	r3, [r7, #14]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <USBD_StdEPReq+0x1f2>
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	2b80      	cmp	r3, #128	; 0x80
 8008262:	d004      	beq.n	800826e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fbed 	bl	8008a46 <USBD_CtlError>
                break;
 800826c:	e091      	b.n	8008392 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800826e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008272:	2b00      	cmp	r3, #0
 8008274:	da0b      	bge.n	800828e <USBD_StdEPReq+0x212>
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800827c:	4613      	mov	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	3310      	adds	r3, #16
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	4413      	add	r3, r2
 800828a:	3304      	adds	r3, #4
 800828c:	e00b      	b.n	80082a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	4413      	add	r3, r2
 80082a4:	3304      	adds	r3, #4
 80082a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2200      	movs	r2, #0
 80082ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2202      	movs	r2, #2
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fc37 	bl	8008b28 <USBD_CtlSendData>
              break;
 80082ba:	e06a      	b.n	8008392 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	da11      	bge.n	80082e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082c4:	7bbb      	ldrb	r3, [r7, #14]
 80082c6:	f003 020f 	and.w	r2, r3, #15
 80082ca:	6879      	ldr	r1, [r7, #4]
 80082cc:	4613      	mov	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	440b      	add	r3, r1
 80082d6:	3324      	adds	r3, #36	; 0x24
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d117      	bne.n	800830e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fbb0 	bl	8008a46 <USBD_CtlError>
                  break;
 80082e6:	e054      	b.n	8008392 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80082e8:	7bbb      	ldrb	r3, [r7, #14]
 80082ea:	f003 020f 	and.w	r2, r3, #15
 80082ee:	6879      	ldr	r1, [r7, #4]
 80082f0:	4613      	mov	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	440b      	add	r3, r1
 80082fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d104      	bne.n	800830e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fb9d 	bl	8008a46 <USBD_CtlError>
                  break;
 800830c:	e041      	b.n	8008392 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800830e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008312:	2b00      	cmp	r3, #0
 8008314:	da0b      	bge.n	800832e <USBD_StdEPReq+0x2b2>
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800831c:	4613      	mov	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	3310      	adds	r3, #16
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	4413      	add	r3, r2
 800832a:	3304      	adds	r3, #4
 800832c:	e00b      	b.n	8008346 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008334:	4613      	mov	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	4413      	add	r3, r2
 8008344:	3304      	adds	r3, #4
 8008346:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <USBD_StdEPReq+0x2d8>
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	2b80      	cmp	r3, #128	; 0x80
 8008352:	d103      	bne.n	800835c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2200      	movs	r2, #0
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	e00e      	b.n	800837a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 f871 	bl	8009448 <USBD_LL_IsStallEP>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2201      	movs	r2, #1
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	e002      	b.n	800837a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2202      	movs	r2, #2
 800837e:	4619      	mov	r1, r3
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fbd1 	bl	8008b28 <USBD_CtlSendData>
              break;
 8008386:	e004      	b.n	8008392 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fb5b 	bl	8008a46 <USBD_CtlError>
              break;
 8008390:	bf00      	nop
          }
          break;
 8008392:	e004      	b.n	800839e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fb55 	bl	8008a46 <USBD_CtlError>
          break;
 800839c:	bf00      	nop
      }
      break;
 800839e:	e005      	b.n	80083ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fb4f 	bl	8008a46 <USBD_CtlError>
      break;
 80083a8:	e000      	b.n	80083ac <USBD_StdEPReq+0x330>
      break;
 80083aa:	bf00      	nop
  }

  return ret;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
	...

080083b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	885b      	ldrh	r3, [r3, #2]
 80083d2:	0a1b      	lsrs	r3, r3, #8
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	3b01      	subs	r3, #1
 80083d8:	2b06      	cmp	r3, #6
 80083da:	f200 8128 	bhi.w	800862e <USBD_GetDescriptor+0x276>
 80083de:	a201      	add	r2, pc, #4	; (adr r2, 80083e4 <USBD_GetDescriptor+0x2c>)
 80083e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e4:	08008401 	.word	0x08008401
 80083e8:	08008419 	.word	0x08008419
 80083ec:	08008459 	.word	0x08008459
 80083f0:	0800862f 	.word	0x0800862f
 80083f4:	0800862f 	.word	0x0800862f
 80083f8:	080085cf 	.word	0x080085cf
 80083fc:	080085fb 	.word	0x080085fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	7c12      	ldrb	r2, [r2, #16]
 800840c:	f107 0108 	add.w	r1, r7, #8
 8008410:	4610      	mov	r0, r2
 8008412:	4798      	blx	r3
 8008414:	60f8      	str	r0, [r7, #12]
      break;
 8008416:	e112      	b.n	800863e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	7c1b      	ldrb	r3, [r3, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10d      	bne.n	800843c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008428:	f107 0208 	add.w	r2, r7, #8
 800842c:	4610      	mov	r0, r2
 800842e:	4798      	blx	r3
 8008430:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3301      	adds	r3, #1
 8008436:	2202      	movs	r2, #2
 8008438:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800843a:	e100      	b.n	800863e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	f107 0208 	add.w	r2, r7, #8
 8008448:	4610      	mov	r0, r2
 800844a:	4798      	blx	r3
 800844c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3301      	adds	r3, #1
 8008452:	2202      	movs	r2, #2
 8008454:	701a      	strb	r2, [r3, #0]
      break;
 8008456:	e0f2      	b.n	800863e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	885b      	ldrh	r3, [r3, #2]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b05      	cmp	r3, #5
 8008460:	f200 80ac 	bhi.w	80085bc <USBD_GetDescriptor+0x204>
 8008464:	a201      	add	r2, pc, #4	; (adr r2, 800846c <USBD_GetDescriptor+0xb4>)
 8008466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846a:	bf00      	nop
 800846c:	08008485 	.word	0x08008485
 8008470:	080084b9 	.word	0x080084b9
 8008474:	080084ed 	.word	0x080084ed
 8008478:	08008521 	.word	0x08008521
 800847c:	08008555 	.word	0x08008555
 8008480:	08008589 	.word	0x08008589
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00b      	beq.n	80084a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	7c12      	ldrb	r2, [r2, #16]
 800849c:	f107 0108 	add.w	r1, r7, #8
 80084a0:	4610      	mov	r0, r2
 80084a2:	4798      	blx	r3
 80084a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084a6:	e091      	b.n	80085cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 facb 	bl	8008a46 <USBD_CtlError>
            err++;
 80084b0:	7afb      	ldrb	r3, [r7, #11]
 80084b2:	3301      	adds	r3, #1
 80084b4:	72fb      	strb	r3, [r7, #11]
          break;
 80084b6:	e089      	b.n	80085cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00b      	beq.n	80084dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	7c12      	ldrb	r2, [r2, #16]
 80084d0:	f107 0108 	add.w	r1, r7, #8
 80084d4:	4610      	mov	r0, r2
 80084d6:	4798      	blx	r3
 80084d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084da:	e077      	b.n	80085cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fab1 	bl	8008a46 <USBD_CtlError>
            err++;
 80084e4:	7afb      	ldrb	r3, [r7, #11]
 80084e6:	3301      	adds	r3, #1
 80084e8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ea:	e06f      	b.n	80085cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00b      	beq.n	8008510 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	7c12      	ldrb	r2, [r2, #16]
 8008504:	f107 0108 	add.w	r1, r7, #8
 8008508:	4610      	mov	r0, r2
 800850a:	4798      	blx	r3
 800850c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800850e:	e05d      	b.n	80085cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fa97 	bl	8008a46 <USBD_CtlError>
            err++;
 8008518:	7afb      	ldrb	r3, [r7, #11]
 800851a:	3301      	adds	r3, #1
 800851c:	72fb      	strb	r3, [r7, #11]
          break;
 800851e:	e055      	b.n	80085cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00b      	beq.n	8008544 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	7c12      	ldrb	r2, [r2, #16]
 8008538:	f107 0108 	add.w	r1, r7, #8
 800853c:	4610      	mov	r0, r2
 800853e:	4798      	blx	r3
 8008540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008542:	e043      	b.n	80085cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fa7d 	bl	8008a46 <USBD_CtlError>
            err++;
 800854c:	7afb      	ldrb	r3, [r7, #11]
 800854e:	3301      	adds	r3, #1
 8008550:	72fb      	strb	r3, [r7, #11]
          break;
 8008552:	e03b      	b.n	80085cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00b      	beq.n	8008578 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	7c12      	ldrb	r2, [r2, #16]
 800856c:	f107 0108 	add.w	r1, r7, #8
 8008570:	4610      	mov	r0, r2
 8008572:	4798      	blx	r3
 8008574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008576:	e029      	b.n	80085cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008578:	6839      	ldr	r1, [r7, #0]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fa63 	bl	8008a46 <USBD_CtlError>
            err++;
 8008580:	7afb      	ldrb	r3, [r7, #11]
 8008582:	3301      	adds	r3, #1
 8008584:	72fb      	strb	r3, [r7, #11]
          break;
 8008586:	e021      	b.n	80085cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00b      	beq.n	80085ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	7c12      	ldrb	r2, [r2, #16]
 80085a0:	f107 0108 	add.w	r1, r7, #8
 80085a4:	4610      	mov	r0, r2
 80085a6:	4798      	blx	r3
 80085a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085aa:	e00f      	b.n	80085cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fa49 	bl	8008a46 <USBD_CtlError>
            err++;
 80085b4:	7afb      	ldrb	r3, [r7, #11]
 80085b6:	3301      	adds	r3, #1
 80085b8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ba:	e007      	b.n	80085cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa41 	bl	8008a46 <USBD_CtlError>
          err++;
 80085c4:	7afb      	ldrb	r3, [r7, #11]
 80085c6:	3301      	adds	r3, #1
 80085c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80085ca:	bf00      	nop
      }
      break;
 80085cc:	e037      	b.n	800863e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	7c1b      	ldrb	r3, [r3, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d109      	bne.n	80085ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085de:	f107 0208 	add.w	r2, r7, #8
 80085e2:	4610      	mov	r0, r2
 80085e4:	4798      	blx	r3
 80085e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085e8:	e029      	b.n	800863e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fa2a 	bl	8008a46 <USBD_CtlError>
        err++;
 80085f2:	7afb      	ldrb	r3, [r7, #11]
 80085f4:	3301      	adds	r3, #1
 80085f6:	72fb      	strb	r3, [r7, #11]
      break;
 80085f8:	e021      	b.n	800863e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	7c1b      	ldrb	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10d      	bne.n	800861e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860a:	f107 0208 	add.w	r2, r7, #8
 800860e:	4610      	mov	r0, r2
 8008610:	4798      	blx	r3
 8008612:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3301      	adds	r3, #1
 8008618:	2207      	movs	r2, #7
 800861a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800861c:	e00f      	b.n	800863e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fa10 	bl	8008a46 <USBD_CtlError>
        err++;
 8008626:	7afb      	ldrb	r3, [r7, #11]
 8008628:	3301      	adds	r3, #1
 800862a:	72fb      	strb	r3, [r7, #11]
      break;
 800862c:	e007      	b.n	800863e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fa08 	bl	8008a46 <USBD_CtlError>
      err++;
 8008636:	7afb      	ldrb	r3, [r7, #11]
 8008638:	3301      	adds	r3, #1
 800863a:	72fb      	strb	r3, [r7, #11]
      break;
 800863c:	bf00      	nop
  }

  if (err != 0U)
 800863e:	7afb      	ldrb	r3, [r7, #11]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d11e      	bne.n	8008682 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	88db      	ldrh	r3, [r3, #6]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d016      	beq.n	800867a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800864c:	893b      	ldrh	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00e      	beq.n	8008670 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	88da      	ldrh	r2, [r3, #6]
 8008656:	893b      	ldrh	r3, [r7, #8]
 8008658:	4293      	cmp	r3, r2
 800865a:	bf28      	it	cs
 800865c:	4613      	movcs	r3, r2
 800865e:	b29b      	uxth	r3, r3
 8008660:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008662:	893b      	ldrh	r3, [r7, #8]
 8008664:	461a      	mov	r2, r3
 8008666:	68f9      	ldr	r1, [r7, #12]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fa5d 	bl	8008b28 <USBD_CtlSendData>
 800866e:	e009      	b.n	8008684 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f9e7 	bl	8008a46 <USBD_CtlError>
 8008678:	e004      	b.n	8008684 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 faae 	bl	8008bdc <USBD_CtlSendStatus>
 8008680:	e000      	b.n	8008684 <USBD_GetDescriptor+0x2cc>
    return;
 8008682:	bf00      	nop
  }
}
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop

0800868c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	889b      	ldrh	r3, [r3, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d131      	bne.n	8008702 <USBD_SetAddress+0x76>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	88db      	ldrh	r3, [r3, #6]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d12d      	bne.n	8008702 <USBD_SetAddress+0x76>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	885b      	ldrh	r3, [r3, #2]
 80086aa:	2b7f      	cmp	r3, #127	; 0x7f
 80086ac:	d829      	bhi.n	8008702 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	885b      	ldrh	r3, [r3, #2]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d104      	bne.n	80086d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f9bc 	bl	8008a46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ce:	e01d      	b.n	800870c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	7bfa      	ldrb	r2, [r7, #15]
 80086d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fedf 	bl	80094a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fa7a 	bl	8008bdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d004      	beq.n	80086f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2202      	movs	r2, #2
 80086f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f6:	e009      	b.n	800870c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008700:	e004      	b.n	800870c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008702:	6839      	ldr	r1, [r7, #0]
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f99e 	bl	8008a46 <USBD_CtlError>
  }
}
 800870a:	bf00      	nop
 800870c:	bf00      	nop
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	885b      	ldrh	r3, [r3, #2]
 8008726:	b2da      	uxtb	r2, r3
 8008728:	4b4e      	ldr	r3, [pc, #312]	; (8008864 <USBD_SetConfig+0x150>)
 800872a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800872c:	4b4d      	ldr	r3, [pc, #308]	; (8008864 <USBD_SetConfig+0x150>)
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d905      	bls.n	8008740 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f985 	bl	8008a46 <USBD_CtlError>
    return USBD_FAIL;
 800873c:	2303      	movs	r3, #3
 800873e:	e08c      	b.n	800885a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b02      	cmp	r3, #2
 800874a:	d002      	beq.n	8008752 <USBD_SetConfig+0x3e>
 800874c:	2b03      	cmp	r3, #3
 800874e:	d029      	beq.n	80087a4 <USBD_SetConfig+0x90>
 8008750:	e075      	b.n	800883e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008752:	4b44      	ldr	r3, [pc, #272]	; (8008864 <USBD_SetConfig+0x150>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d020      	beq.n	800879c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800875a:	4b42      	ldr	r3, [pc, #264]	; (8008864 <USBD_SetConfig+0x150>)
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008764:	4b3f      	ldr	r3, [pc, #252]	; (8008864 <USBD_SetConfig+0x150>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7fe ffe7 	bl	800773e <USBD_SetClassConfig>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d008      	beq.n	800878c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f962 	bl	8008a46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2202      	movs	r2, #2
 8008786:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800878a:	e065      	b.n	8008858 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fa25 	bl	8008bdc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2203      	movs	r2, #3
 8008796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800879a:	e05d      	b.n	8008858 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fa1d 	bl	8008bdc <USBD_CtlSendStatus>
      break;
 80087a2:	e059      	b.n	8008858 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80087a4:	4b2f      	ldr	r3, [pc, #188]	; (8008864 <USBD_SetConfig+0x150>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d112      	bne.n	80087d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2202      	movs	r2, #2
 80087b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80087b4:	4b2b      	ldr	r3, [pc, #172]	; (8008864 <USBD_SetConfig+0x150>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087be:	4b29      	ldr	r3, [pc, #164]	; (8008864 <USBD_SetConfig+0x150>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7fe ffd6 	bl	8007776 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fa06 	bl	8008bdc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087d0:	e042      	b.n	8008858 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80087d2:	4b24      	ldr	r3, [pc, #144]	; (8008864 <USBD_SetConfig+0x150>)
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	461a      	mov	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d02a      	beq.n	8008836 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7fe ffc4 	bl	8007776 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80087ee:	4b1d      	ldr	r3, [pc, #116]	; (8008864 <USBD_SetConfig+0x150>)
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087f8:	4b1a      	ldr	r3, [pc, #104]	; (8008864 <USBD_SetConfig+0x150>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7fe ff9d 	bl	800773e <USBD_SetClassConfig>
 8008804:	4603      	mov	r3, r0
 8008806:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00f      	beq.n	800882e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f918 	bl	8008a46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7fe ffa9 	bl	8007776 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800882c:	e014      	b.n	8008858 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f9d4 	bl	8008bdc <USBD_CtlSendStatus>
      break;
 8008834:	e010      	b.n	8008858 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f9d0 	bl	8008bdc <USBD_CtlSendStatus>
      break;
 800883c:	e00c      	b.n	8008858 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f900 	bl	8008a46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008846:	4b07      	ldr	r3, [pc, #28]	; (8008864 <USBD_SetConfig+0x150>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7fe ff92 	bl	8007776 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008852:	2303      	movs	r3, #3
 8008854:	73fb      	strb	r3, [r7, #15]
      break;
 8008856:	bf00      	nop
  }

  return ret;
 8008858:	7bfb      	ldrb	r3, [r7, #15]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20000294 	.word	0x20000294

08008868 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	88db      	ldrh	r3, [r3, #6]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d004      	beq.n	8008884 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f8e2 	bl	8008a46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008882:	e023      	b.n	80088cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b02      	cmp	r3, #2
 800888e:	dc02      	bgt.n	8008896 <USBD_GetConfig+0x2e>
 8008890:	2b00      	cmp	r3, #0
 8008892:	dc03      	bgt.n	800889c <USBD_GetConfig+0x34>
 8008894:	e015      	b.n	80088c2 <USBD_GetConfig+0x5a>
 8008896:	2b03      	cmp	r3, #3
 8008898:	d00b      	beq.n	80088b2 <USBD_GetConfig+0x4a>
 800889a:	e012      	b.n	80088c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	3308      	adds	r3, #8
 80088a6:	2201      	movs	r2, #1
 80088a8:	4619      	mov	r1, r3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f93c 	bl	8008b28 <USBD_CtlSendData>
        break;
 80088b0:	e00c      	b.n	80088cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	3304      	adds	r3, #4
 80088b6:	2201      	movs	r2, #1
 80088b8:	4619      	mov	r1, r3
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f934 	bl	8008b28 <USBD_CtlSendData>
        break;
 80088c0:	e004      	b.n	80088cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f8be 	bl	8008a46 <USBD_CtlError>
        break;
 80088ca:	bf00      	nop
}
 80088cc:	bf00      	nop
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	3b01      	subs	r3, #1
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d81e      	bhi.n	800892a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	88db      	ldrh	r3, [r3, #6]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d004      	beq.n	80088fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f8a5 	bl	8008a46 <USBD_CtlError>
        break;
 80088fc:	e01a      	b.n	8008934 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800890a:	2b00      	cmp	r3, #0
 800890c:	d005      	beq.n	800891a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	f043 0202 	orr.w	r2, r3, #2
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	330c      	adds	r3, #12
 800891e:	2202      	movs	r2, #2
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f900 	bl	8008b28 <USBD_CtlSendData>
      break;
 8008928:	e004      	b.n	8008934 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f88a 	bl	8008a46 <USBD_CtlError>
      break;
 8008932:	bf00      	nop
  }
}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	885b      	ldrh	r3, [r3, #2]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d107      	bne.n	800895e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f940 	bl	8008bdc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800895c:	e013      	b.n	8008986 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	885b      	ldrh	r3, [r3, #2]
 8008962:	2b02      	cmp	r3, #2
 8008964:	d10b      	bne.n	800897e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	889b      	ldrh	r3, [r3, #4]
 800896a:	0a1b      	lsrs	r3, r3, #8
 800896c:	b29b      	uxth	r3, r3
 800896e:	b2da      	uxtb	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f930 	bl	8008bdc <USBD_CtlSendStatus>
}
 800897c:	e003      	b.n	8008986 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f860 	bl	8008a46 <USBD_CtlError>
}
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b082      	sub	sp, #8
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	3b01      	subs	r3, #1
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d80b      	bhi.n	80089be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	885b      	ldrh	r3, [r3, #2]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d10c      	bne.n	80089c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f910 	bl	8008bdc <USBD_CtlSendStatus>
      }
      break;
 80089bc:	e004      	b.n	80089c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f840 	bl	8008a46 <USBD_CtlError>
      break;
 80089c6:	e000      	b.n	80089ca <USBD_ClrFeature+0x3c>
      break;
 80089c8:	bf00      	nop
  }
}
 80089ca:	bf00      	nop
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	781a      	ldrb	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3301      	adds	r3, #1
 80089ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	781a      	ldrb	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3301      	adds	r3, #1
 80089fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f7ff fa41 	bl	8007e84 <SWAPBYTE>
 8008a02:	4603      	mov	r3, r0
 8008a04:	461a      	mov	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3301      	adds	r3, #1
 8008a14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f7ff fa34 	bl	8007e84 <SWAPBYTE>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	461a      	mov	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f7ff fa27 	bl	8007e84 <SWAPBYTE>
 8008a36:	4603      	mov	r3, r0
 8008a38:	461a      	mov	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	80da      	strh	r2, [r3, #6]
}
 8008a3e:	bf00      	nop
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b082      	sub	sp, #8
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a50:	2180      	movs	r1, #128	; 0x80
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fcba 	bl	80093cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a58:	2100      	movs	r1, #0
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fcb6 	bl	80093cc <USBD_LL_StallEP>
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d036      	beq.n	8008aec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008a82:	6938      	ldr	r0, [r7, #16]
 8008a84:	f000 f836 	bl	8008af4 <USBD_GetLen>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	7812      	ldrb	r2, [r2, #0]
 8008aa0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	4413      	add	r3, r2
 8008aae:	2203      	movs	r2, #3
 8008ab0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ab8:	e013      	b.n	8008ae2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	4413      	add	r3, r2
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	7812      	ldrb	r2, [r2, #0]
 8008ac4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	613b      	str	r3, [r7, #16]
    idx++;
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	2200      	movs	r2, #0
 8008ada:	701a      	strb	r2, [r3, #0]
    idx++;
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e7      	bne.n	8008aba <USBD_GetString+0x52>
 8008aea:	e000      	b.n	8008aee <USBD_GetString+0x86>
    return;
 8008aec:	bf00      	nop
  }
}
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b04:	e005      	b.n	8008b12 <USBD_GetLen+0x1e>
  {
    len++;
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1f5      	bne.n	8008b06 <USBD_GetLen+0x12>
  }

  return len;
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2202      	movs	r2, #2
 8008b38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 fcc5 	bl	80094de <USBD_LL_Transmit>

  return USBD_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
 8008b66:	60b9      	str	r1, [r7, #8]
 8008b68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	2100      	movs	r1, #0
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f000 fcb4 	bl	80094de <USBD_LL_Transmit>

  return USBD_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2203      	movs	r2, #3
 8008b90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	2100      	movs	r1, #0
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 fcb8 	bl	8009520 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	60f8      	str	r0, [r7, #12]
 8008bc2:	60b9      	str	r1, [r7, #8]
 8008bc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	2100      	movs	r1, #0
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 fca7 	bl	8009520 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2204      	movs	r2, #4
 8008be8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bec:	2300      	movs	r3, #0
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fc73 	bl	80094de <USBD_LL_Transmit>

  return USBD_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2205      	movs	r2, #5
 8008c0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c12:	2300      	movs	r3, #0
 8008c14:	2200      	movs	r2, #0
 8008c16:	2100      	movs	r1, #0
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fc81 	bl	8009520 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4912      	ldr	r1, [pc, #72]	; (8008c78 <MX_USB_DEVICE_Init+0x50>)
 8008c30:	4812      	ldr	r0, [pc, #72]	; (8008c7c <MX_USB_DEVICE_Init+0x54>)
 8008c32:	f7fe fd07 	bl	8007644 <USBD_Init>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c3c:	f7f8 fb26 	bl	800128c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c40:	490f      	ldr	r1, [pc, #60]	; (8008c80 <MX_USB_DEVICE_Init+0x58>)
 8008c42:	480e      	ldr	r0, [pc, #56]	; (8008c7c <MX_USB_DEVICE_Init+0x54>)
 8008c44:	f7fe fd2e 	bl	80076a4 <USBD_RegisterClass>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c4e:	f7f8 fb1d 	bl	800128c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c52:	490c      	ldr	r1, [pc, #48]	; (8008c84 <MX_USB_DEVICE_Init+0x5c>)
 8008c54:	4809      	ldr	r0, [pc, #36]	; (8008c7c <MX_USB_DEVICE_Init+0x54>)
 8008c56:	f7fe fc65 	bl	8007524 <USBD_CDC_RegisterInterface>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c60:	f7f8 fb14 	bl	800128c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c64:	4805      	ldr	r0, [pc, #20]	; (8008c7c <MX_USB_DEVICE_Init+0x54>)
 8008c66:	f7fe fd53 	bl	8007710 <USBD_Start>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c70:	f7f8 fb0c 	bl	800128c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c74:	bf00      	nop
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	200000b4 	.word	0x200000b4
 8008c7c:	20000298 	.word	0x20000298
 8008c80:	20000020 	.word	0x20000020
 8008c84:	200000a0 	.word	0x200000a0

08008c88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4905      	ldr	r1, [pc, #20]	; (8008ca4 <CDC_Init_FS+0x1c>)
 8008c90:	4805      	ldr	r0, [pc, #20]	; (8008ca8 <CDC_Init_FS+0x20>)
 8008c92:	f7fe fc61 	bl	8007558 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c96:	4905      	ldr	r1, [pc, #20]	; (8008cac <CDC_Init_FS+0x24>)
 8008c98:	4803      	ldr	r0, [pc, #12]	; (8008ca8 <CDC_Init_FS+0x20>)
 8008c9a:	f7fe fc7f 	bl	800759c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	20000d74 	.word	0x20000d74
 8008ca8:	20000298 	.word	0x20000298
 8008cac:	20000574 	.word	0x20000574

08008cb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008cb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	6039      	str	r1, [r7, #0]
 8008cca:	71fb      	strb	r3, [r7, #7]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	2b23      	cmp	r3, #35	; 0x23
 8008cd4:	d84a      	bhi.n	8008d6c <CDC_Control_FS+0xac>
 8008cd6:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <CDC_Control_FS+0x1c>)
 8008cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cdc:	08008d6d 	.word	0x08008d6d
 8008ce0:	08008d6d 	.word	0x08008d6d
 8008ce4:	08008d6d 	.word	0x08008d6d
 8008ce8:	08008d6d 	.word	0x08008d6d
 8008cec:	08008d6d 	.word	0x08008d6d
 8008cf0:	08008d6d 	.word	0x08008d6d
 8008cf4:	08008d6d 	.word	0x08008d6d
 8008cf8:	08008d6d 	.word	0x08008d6d
 8008cfc:	08008d6d 	.word	0x08008d6d
 8008d00:	08008d6d 	.word	0x08008d6d
 8008d04:	08008d6d 	.word	0x08008d6d
 8008d08:	08008d6d 	.word	0x08008d6d
 8008d0c:	08008d6d 	.word	0x08008d6d
 8008d10:	08008d6d 	.word	0x08008d6d
 8008d14:	08008d6d 	.word	0x08008d6d
 8008d18:	08008d6d 	.word	0x08008d6d
 8008d1c:	08008d6d 	.word	0x08008d6d
 8008d20:	08008d6d 	.word	0x08008d6d
 8008d24:	08008d6d 	.word	0x08008d6d
 8008d28:	08008d6d 	.word	0x08008d6d
 8008d2c:	08008d6d 	.word	0x08008d6d
 8008d30:	08008d6d 	.word	0x08008d6d
 8008d34:	08008d6d 	.word	0x08008d6d
 8008d38:	08008d6d 	.word	0x08008d6d
 8008d3c:	08008d6d 	.word	0x08008d6d
 8008d40:	08008d6d 	.word	0x08008d6d
 8008d44:	08008d6d 	.word	0x08008d6d
 8008d48:	08008d6d 	.word	0x08008d6d
 8008d4c:	08008d6d 	.word	0x08008d6d
 8008d50:	08008d6d 	.word	0x08008d6d
 8008d54:	08008d6d 	.word	0x08008d6d
 8008d58:	08008d6d 	.word	0x08008d6d
 8008d5c:	08008d6d 	.word	0x08008d6d
 8008d60:	08008d6d 	.word	0x08008d6d
 8008d64:	08008d6d 	.word	0x08008d6d
 8008d68:	08008d6d 	.word	0x08008d6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d6c:	bf00      	nop
  }

  return (USBD_OK);
 8008d6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d86:	6879      	ldr	r1, [r7, #4]
 8008d88:	4805      	ldr	r0, [pc, #20]	; (8008da0 <CDC_Receive_FS+0x24>)
 8008d8a:	f7fe fc07 	bl	800759c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d8e:	4804      	ldr	r0, [pc, #16]	; (8008da0 <CDC_Receive_FS+0x24>)
 8008d90:	f7fe fc22 	bl	80075d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	20000298 	.word	0x20000298

08008da4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	4613      	mov	r3, r2
 8008db0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008db6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	371c      	adds	r7, #28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
	...

08008dc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	4603      	mov	r3, r0
 8008dd0:	6039      	str	r1, [r7, #0]
 8008dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2212      	movs	r2, #18
 8008dd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008dda:	4b03      	ldr	r3, [pc, #12]	; (8008de8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	200000d0 	.word	0x200000d0

08008dec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	6039      	str	r1, [r7, #0]
 8008df6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2204      	movs	r2, #4
 8008dfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dfe:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	200000e4 	.word	0x200000e4

08008e10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	4603      	mov	r3, r0
 8008e18:	6039      	str	r1, [r7, #0]
 8008e1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e1c:	79fb      	ldrb	r3, [r7, #7]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d105      	bne.n	8008e2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	4907      	ldr	r1, [pc, #28]	; (8008e44 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e26:	4808      	ldr	r0, [pc, #32]	; (8008e48 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e28:	f7ff fe1e 	bl	8008a68 <USBD_GetString>
 8008e2c:	e004      	b.n	8008e38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	4904      	ldr	r1, [pc, #16]	; (8008e44 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e32:	4805      	ldr	r0, [pc, #20]	; (8008e48 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e34:	f7ff fe18 	bl	8008a68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e38:	4b02      	ldr	r3, [pc, #8]	; (8008e44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20001574 	.word	0x20001574
 8008e48:	08009680 	.word	0x08009680

08008e4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	6039      	str	r1, [r7, #0]
 8008e56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e58:	683a      	ldr	r2, [r7, #0]
 8008e5a:	4904      	ldr	r1, [pc, #16]	; (8008e6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e5c:	4804      	ldr	r0, [pc, #16]	; (8008e70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e5e:	f7ff fe03 	bl	8008a68 <USBD_GetString>
  return USBD_StrDesc;
 8008e62:	4b02      	ldr	r3, [pc, #8]	; (8008e6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20001574 	.word	0x20001574
 8008e70:	08009698 	.word	0x08009698

08008e74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	221a      	movs	r2, #26
 8008e84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e86:	f000 f843 	bl	8008f10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e8a:	4b02      	ldr	r3, [pc, #8]	; (8008e94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	200000e8 	.word	0x200000e8

08008e98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	6039      	str	r1, [r7, #0]
 8008ea2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ea4:	79fb      	ldrb	r3, [r7, #7]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d105      	bne.n	8008eb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	4907      	ldr	r1, [pc, #28]	; (8008ecc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008eae:	4808      	ldr	r0, [pc, #32]	; (8008ed0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008eb0:	f7ff fdda 	bl	8008a68 <USBD_GetString>
 8008eb4:	e004      	b.n	8008ec0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	4904      	ldr	r1, [pc, #16]	; (8008ecc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008eba:	4805      	ldr	r0, [pc, #20]	; (8008ed0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ebc:	f7ff fdd4 	bl	8008a68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ec0:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	20001574 	.word	0x20001574
 8008ed0:	080096ac 	.word	0x080096ac

08008ed4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	6039      	str	r1, [r7, #0]
 8008ede:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d105      	bne.n	8008ef2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	4907      	ldr	r1, [pc, #28]	; (8008f08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eea:	4808      	ldr	r0, [pc, #32]	; (8008f0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008eec:	f7ff fdbc 	bl	8008a68 <USBD_GetString>
 8008ef0:	e004      	b.n	8008efc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	4904      	ldr	r1, [pc, #16]	; (8008f08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ef6:	4805      	ldr	r0, [pc, #20]	; (8008f0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ef8:	f7ff fdb6 	bl	8008a68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008efc:	4b02      	ldr	r3, [pc, #8]	; (8008f08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	20001574 	.word	0x20001574
 8008f0c:	080096b8 	.word	0x080096b8

08008f10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f16:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <Get_SerialNum+0x44>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f1c:	4b0e      	ldr	r3, [pc, #56]	; (8008f58 <Get_SerialNum+0x48>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f22:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <Get_SerialNum+0x4c>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d009      	beq.n	8008f4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f36:	2208      	movs	r2, #8
 8008f38:	4909      	ldr	r1, [pc, #36]	; (8008f60 <Get_SerialNum+0x50>)
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f000 f814 	bl	8008f68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f40:	2204      	movs	r2, #4
 8008f42:	4908      	ldr	r1, [pc, #32]	; (8008f64 <Get_SerialNum+0x54>)
 8008f44:	68b8      	ldr	r0, [r7, #8]
 8008f46:	f000 f80f 	bl	8008f68 <IntToUnicode>
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	1fff7a10 	.word	0x1fff7a10
 8008f58:	1fff7a14 	.word	0x1fff7a14
 8008f5c:	1fff7a18 	.word	0x1fff7a18
 8008f60:	200000ea 	.word	0x200000ea
 8008f64:	200000fa 	.word	0x200000fa

08008f68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	75fb      	strb	r3, [r7, #23]
 8008f7e:	e027      	b.n	8008fd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	0f1b      	lsrs	r3, r3, #28
 8008f84:	2b09      	cmp	r3, #9
 8008f86:	d80b      	bhi.n	8008fa0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	0f1b      	lsrs	r3, r3, #28
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	005b      	lsls	r3, r3, #1
 8008f92:	4619      	mov	r1, r3
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	440b      	add	r3, r1
 8008f98:	3230      	adds	r2, #48	; 0x30
 8008f9a:	b2d2      	uxtb	r2, r2
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	e00a      	b.n	8008fb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	0f1b      	lsrs	r3, r3, #28
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	4619      	mov	r1, r3
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	440b      	add	r3, r1
 8008fb0:	3237      	adds	r2, #55	; 0x37
 8008fb2:	b2d2      	uxtb	r2, r2
 8008fb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	011b      	lsls	r3, r3, #4
 8008fba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008fbc:	7dfb      	ldrb	r3, [r7, #23]
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008fca:	7dfb      	ldrb	r3, [r7, #23]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	75fb      	strb	r3, [r7, #23]
 8008fd0:	7dfa      	ldrb	r2, [r7, #23]
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d3d3      	bcc.n	8008f80 <IntToUnicode+0x18>
  }
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
	...

08008fe8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08a      	sub	sp, #40	; 0x28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ff0:	f107 0314 	add.w	r3, r7, #20
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	605a      	str	r2, [r3, #4]
 8008ffa:	609a      	str	r2, [r3, #8]
 8008ffc:	60da      	str	r2, [r3, #12]
 8008ffe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009008:	d13a      	bne.n	8009080 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800900a:	2300      	movs	r3, #0
 800900c:	613b      	str	r3, [r7, #16]
 800900e:	4b1e      	ldr	r3, [pc, #120]	; (8009088 <HAL_PCD_MspInit+0xa0>)
 8009010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009012:	4a1d      	ldr	r2, [pc, #116]	; (8009088 <HAL_PCD_MspInit+0xa0>)
 8009014:	f043 0301 	orr.w	r3, r3, #1
 8009018:	6313      	str	r3, [r2, #48]	; 0x30
 800901a:	4b1b      	ldr	r3, [pc, #108]	; (8009088 <HAL_PCD_MspInit+0xa0>)
 800901c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	613b      	str	r3, [r7, #16]
 8009024:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009026:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800902a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800902c:	2302      	movs	r3, #2
 800902e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009030:	2300      	movs	r3, #0
 8009032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009034:	2303      	movs	r3, #3
 8009036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009038:	230a      	movs	r3, #10
 800903a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800903c:	f107 0314 	add.w	r3, r7, #20
 8009040:	4619      	mov	r1, r3
 8009042:	4812      	ldr	r0, [pc, #72]	; (800908c <HAL_PCD_MspInit+0xa4>)
 8009044:	f7f8 ff52 	bl	8001eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009048:	4b0f      	ldr	r3, [pc, #60]	; (8009088 <HAL_PCD_MspInit+0xa0>)
 800904a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800904c:	4a0e      	ldr	r2, [pc, #56]	; (8009088 <HAL_PCD_MspInit+0xa0>)
 800904e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009052:	6353      	str	r3, [r2, #52]	; 0x34
 8009054:	2300      	movs	r3, #0
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	4b0b      	ldr	r3, [pc, #44]	; (8009088 <HAL_PCD_MspInit+0xa0>)
 800905a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905c:	4a0a      	ldr	r2, [pc, #40]	; (8009088 <HAL_PCD_MspInit+0xa0>)
 800905e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009062:	6453      	str	r3, [r2, #68]	; 0x44
 8009064:	4b08      	ldr	r3, [pc, #32]	; (8009088 <HAL_PCD_MspInit+0xa0>)
 8009066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009070:	2200      	movs	r2, #0
 8009072:	2100      	movs	r1, #0
 8009074:	2043      	movs	r0, #67	; 0x43
 8009076:	f7f8 fee0 	bl	8001e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800907a:	2043      	movs	r0, #67	; 0x43
 800907c:	f7f8 fef9 	bl	8001e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009080:	bf00      	nop
 8009082:	3728      	adds	r7, #40	; 0x28
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	40023800 	.word	0x40023800
 800908c:	40020000 	.word	0x40020000

08009090 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80090a4:	4619      	mov	r1, r3
 80090a6:	4610      	mov	r0, r2
 80090a8:	f7fe fb7f 	bl	80077aa <USBD_LL_SetupStage>
}
 80090ac:	bf00      	nop
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80090c6:	78fa      	ldrb	r2, [r7, #3]
 80090c8:	6879      	ldr	r1, [r7, #4]
 80090ca:	4613      	mov	r3, r2
 80090cc:	00db      	lsls	r3, r3, #3
 80090ce:	4413      	add	r3, r2
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	440b      	add	r3, r1
 80090d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	78fb      	ldrb	r3, [r7, #3]
 80090dc:	4619      	mov	r1, r3
 80090de:	f7fe fbb9 	bl	8007854 <USBD_LL_DataOutStage>
}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	460b      	mov	r3, r1
 80090f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80090fc:	78fa      	ldrb	r2, [r7, #3]
 80090fe:	6879      	ldr	r1, [r7, #4]
 8009100:	4613      	mov	r3, r2
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	4413      	add	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	440b      	add	r3, r1
 800910a:	334c      	adds	r3, #76	; 0x4c
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	4619      	mov	r1, r3
 8009112:	f7fe fc52 	bl	80079ba <USBD_LL_DataInStage>
}
 8009116:	bf00      	nop
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b082      	sub	sp, #8
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800912c:	4618      	mov	r0, r3
 800912e:	f7fe fd86 	bl	8007c3e <USBD_LL_SOF>
}
 8009132:	bf00      	nop
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009142:	2301      	movs	r3, #1
 8009144:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d102      	bne.n	8009154 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800914e:	2300      	movs	r3, #0
 8009150:	73fb      	strb	r3, [r7, #15]
 8009152:	e008      	b.n	8009166 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	2b02      	cmp	r3, #2
 800915a:	d102      	bne.n	8009162 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800915c:	2301      	movs	r3, #1
 800915e:	73fb      	strb	r3, [r7, #15]
 8009160:	e001      	b.n	8009166 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009162:	f7f8 f893 	bl	800128c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800916c:	7bfa      	ldrb	r2, [r7, #15]
 800916e:	4611      	mov	r1, r2
 8009170:	4618      	mov	r0, r3
 8009172:	f7fe fd26 	bl	8007bc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800917c:	4618      	mov	r0, r3
 800917e:	f7fe fcce 	bl	8007b1e <USBD_LL_Reset>
}
 8009182:	bf00      	nop
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
	...

0800918c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe fd21 	bl	8007be2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	6812      	ldr	r2, [r2, #0]
 80091ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091b2:	f043 0301 	orr.w	r3, r3, #1
 80091b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d005      	beq.n	80091cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091c0:	4b04      	ldr	r3, [pc, #16]	; (80091d4 <HAL_PCD_SuspendCallback+0x48>)
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	4a03      	ldr	r2, [pc, #12]	; (80091d4 <HAL_PCD_SuspendCallback+0x48>)
 80091c6:	f043 0306 	orr.w	r3, r3, #6
 80091ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80091cc:	bf00      	nop
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	e000ed00 	.word	0xe000ed00

080091d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fd11 	bl	8007c0e <USBD_LL_Resume>
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009206:	78fa      	ldrb	r2, [r7, #3]
 8009208:	4611      	mov	r1, r2
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe fd69 	bl	8007ce2 <USBD_LL_IsoOUTIncomplete>
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800922a:	78fa      	ldrb	r2, [r7, #3]
 800922c:	4611      	mov	r1, r2
 800922e:	4618      	mov	r0, r3
 8009230:	f7fe fd25 	bl	8007c7e <USBD_LL_IsoINIncomplete>
}
 8009234:	bf00      	nop
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe fd7b 	bl	8007d46 <USBD_LL_DevConnected>
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe fd78 	bl	8007d5c <USBD_LL_DevDisconnected>
}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d13c      	bne.n	80092fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009284:	4a20      	ldr	r2, [pc, #128]	; (8009308 <USBD_LL_Init+0x94>)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a1e      	ldr	r2, [pc, #120]	; (8009308 <USBD_LL_Init+0x94>)
 8009290:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009294:	4b1c      	ldr	r3, [pc, #112]	; (8009308 <USBD_LL_Init+0x94>)
 8009296:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800929a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800929c:	4b1a      	ldr	r3, [pc, #104]	; (8009308 <USBD_LL_Init+0x94>)
 800929e:	2204      	movs	r2, #4
 80092a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80092a2:	4b19      	ldr	r3, [pc, #100]	; (8009308 <USBD_LL_Init+0x94>)
 80092a4:	2202      	movs	r2, #2
 80092a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80092a8:	4b17      	ldr	r3, [pc, #92]	; (8009308 <USBD_LL_Init+0x94>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80092ae:	4b16      	ldr	r3, [pc, #88]	; (8009308 <USBD_LL_Init+0x94>)
 80092b0:	2202      	movs	r2, #2
 80092b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80092b4:	4b14      	ldr	r3, [pc, #80]	; (8009308 <USBD_LL_Init+0x94>)
 80092b6:	2200      	movs	r2, #0
 80092b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80092ba:	4b13      	ldr	r3, [pc, #76]	; (8009308 <USBD_LL_Init+0x94>)
 80092bc:	2200      	movs	r2, #0
 80092be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80092c0:	4b11      	ldr	r3, [pc, #68]	; (8009308 <USBD_LL_Init+0x94>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80092c6:	4b10      	ldr	r3, [pc, #64]	; (8009308 <USBD_LL_Init+0x94>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80092cc:	4b0e      	ldr	r3, [pc, #56]	; (8009308 <USBD_LL_Init+0x94>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80092d2:	480d      	ldr	r0, [pc, #52]	; (8009308 <USBD_LL_Init+0x94>)
 80092d4:	f7f9 f9a7 	bl	8002626 <HAL_PCD_Init>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80092de:	f7f7 ffd5 	bl	800128c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80092e2:	2180      	movs	r1, #128	; 0x80
 80092e4:	4808      	ldr	r0, [pc, #32]	; (8009308 <USBD_LL_Init+0x94>)
 80092e6:	f7fa fbfe 	bl	8003ae6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80092ea:	2240      	movs	r2, #64	; 0x40
 80092ec:	2100      	movs	r1, #0
 80092ee:	4806      	ldr	r0, [pc, #24]	; (8009308 <USBD_LL_Init+0x94>)
 80092f0:	f7fa fbb2 	bl	8003a58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80092f4:	2280      	movs	r2, #128	; 0x80
 80092f6:	2101      	movs	r1, #1
 80092f8:	4803      	ldr	r0, [pc, #12]	; (8009308 <USBD_LL_Init+0x94>)
 80092fa:	f7fa fbad 	bl	8003a58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	20001774 	.word	0x20001774

0800930c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009322:	4618      	mov	r0, r3
 8009324:	f7f9 fa9c 	bl	8002860 <HAL_PCD_Start>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 f942 	bl	80095b8 <USBD_Get_USB_Status>
 8009334:	4603      	mov	r3, r0
 8009336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009338:	7bbb      	ldrb	r3, [r7, #14]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	4608      	mov	r0, r1
 800934c:	4611      	mov	r1, r2
 800934e:	461a      	mov	r2, r3
 8009350:	4603      	mov	r3, r0
 8009352:	70fb      	strb	r3, [r7, #3]
 8009354:	460b      	mov	r3, r1
 8009356:	70bb      	strb	r3, [r7, #2]
 8009358:	4613      	mov	r3, r2
 800935a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800936a:	78bb      	ldrb	r3, [r7, #2]
 800936c:	883a      	ldrh	r2, [r7, #0]
 800936e:	78f9      	ldrb	r1, [r7, #3]
 8009370:	f7f9 ff6d 	bl	800324e <HAL_PCD_EP_Open>
 8009374:	4603      	mov	r3, r0
 8009376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 f91c 	bl	80095b8 <USBD_Get_USB_Status>
 8009380:	4603      	mov	r3, r0
 8009382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009384:	7bbb      	ldrb	r3, [r7, #14]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093a8:	78fa      	ldrb	r2, [r7, #3]
 80093aa:	4611      	mov	r1, r2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7f9 ffb6 	bl	800331e <HAL_PCD_EP_Close>
 80093b2:	4603      	mov	r3, r0
 80093b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 f8fd 	bl	80095b8 <USBD_Get_USB_Status>
 80093be:	4603      	mov	r3, r0
 80093c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fa f88e 	bl	800350c <HAL_PCD_EP_SetStall>
 80093f0:	4603      	mov	r3, r0
 80093f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 f8de 	bl	80095b8 <USBD_Get_USB_Status>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009400:	7bbb      	ldrb	r3, [r7, #14]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	460b      	mov	r3, r1
 8009414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009424:	78fa      	ldrb	r2, [r7, #3]
 8009426:	4611      	mov	r1, r2
 8009428:	4618      	mov	r0, r3
 800942a:	f7fa f8d3 	bl	80035d4 <HAL_PCD_EP_ClrStall>
 800942e:	4603      	mov	r3, r0
 8009430:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009432:	7bfb      	ldrb	r3, [r7, #15]
 8009434:	4618      	mov	r0, r3
 8009436:	f000 f8bf 	bl	80095b8 <USBD_Get_USB_Status>
 800943a:	4603      	mov	r3, r0
 800943c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800943e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800945a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800945c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009460:	2b00      	cmp	r3, #0
 8009462:	da0b      	bge.n	800947c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009464:	78fb      	ldrb	r3, [r7, #3]
 8009466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800946a:	68f9      	ldr	r1, [r7, #12]
 800946c:	4613      	mov	r3, r2
 800946e:	00db      	lsls	r3, r3, #3
 8009470:	4413      	add	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	440b      	add	r3, r1
 8009476:	333e      	adds	r3, #62	; 0x3e
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	e00b      	b.n	8009494 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800947c:	78fb      	ldrb	r3, [r7, #3]
 800947e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009482:	68f9      	ldr	r1, [r7, #12]
 8009484:	4613      	mov	r3, r2
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	4413      	add	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	440b      	add	r3, r1
 800948e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009492:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009494:	4618      	mov	r0, r3
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094ba:	78fa      	ldrb	r2, [r7, #3]
 80094bc:	4611      	mov	r1, r2
 80094be:	4618      	mov	r0, r3
 80094c0:	f7f9 fea0 	bl	8003204 <HAL_PCD_SetAddress>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 f874 	bl	80095b8 <USBD_Get_USB_Status>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b086      	sub	sp, #24
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	607a      	str	r2, [r7, #4]
 80094e8:	603b      	str	r3, [r7, #0]
 80094ea:	460b      	mov	r3, r1
 80094ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80094fc:	7af9      	ldrb	r1, [r7, #11]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	f7f9 ffb9 	bl	8003478 <HAL_PCD_EP_Transmit>
 8009506:	4603      	mov	r3, r0
 8009508:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800950a:	7dfb      	ldrb	r3, [r7, #23]
 800950c:	4618      	mov	r0, r3
 800950e:	f000 f853 	bl	80095b8 <USBD_Get_USB_Status>
 8009512:	4603      	mov	r3, r0
 8009514:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009516:	7dbb      	ldrb	r3, [r7, #22]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3718      	adds	r7, #24
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	607a      	str	r2, [r7, #4]
 800952a:	603b      	str	r3, [r7, #0]
 800952c:	460b      	mov	r3, r1
 800952e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800953e:	7af9      	ldrb	r1, [r7, #11]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	f7f9 ff35 	bl	80033b2 <HAL_PCD_EP_Receive>
 8009548:	4603      	mov	r3, r0
 800954a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800954c:	7dfb      	ldrb	r3, [r7, #23]
 800954e:	4618      	mov	r0, r3
 8009550:	f000 f832 	bl	80095b8 <USBD_Get_USB_Status>
 8009554:	4603      	mov	r3, r0
 8009556:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009558:	7dbb      	ldrb	r3, [r7, #22]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b082      	sub	sp, #8
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	460b      	mov	r3, r1
 800956c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009574:	78fa      	ldrb	r2, [r7, #3]
 8009576:	4611      	mov	r1, r2
 8009578:	4618      	mov	r0, r3
 800957a:	f7f9 ff65 	bl	8003448 <HAL_PCD_EP_GetRxCount>
 800957e:	4603      	mov	r3, r0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009590:	4b03      	ldr	r3, [pc, #12]	; (80095a0 <USBD_static_malloc+0x18>)
}
 8009592:	4618      	mov	r0, r3
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	20001c80 	.word	0x20001c80

080095a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]

}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095c6:	79fb      	ldrb	r3, [r7, #7]
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d817      	bhi.n	80095fc <USBD_Get_USB_Status+0x44>
 80095cc:	a201      	add	r2, pc, #4	; (adr r2, 80095d4 <USBD_Get_USB_Status+0x1c>)
 80095ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d2:	bf00      	nop
 80095d4:	080095e5 	.word	0x080095e5
 80095d8:	080095eb 	.word	0x080095eb
 80095dc:	080095f1 	.word	0x080095f1
 80095e0:	080095f7 	.word	0x080095f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	73fb      	strb	r3, [r7, #15]
    break;
 80095e8:	e00b      	b.n	8009602 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095ea:	2303      	movs	r3, #3
 80095ec:	73fb      	strb	r3, [r7, #15]
    break;
 80095ee:	e008      	b.n	8009602 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095f0:	2301      	movs	r3, #1
 80095f2:	73fb      	strb	r3, [r7, #15]
    break;
 80095f4:	e005      	b.n	8009602 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095f6:	2303      	movs	r3, #3
 80095f8:	73fb      	strb	r3, [r7, #15]
    break;
 80095fa:	e002      	b.n	8009602 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80095fc:	2303      	movs	r3, #3
 80095fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009600:	bf00      	nop
  }
  return usb_status;
 8009602:	7bfb      	ldrb	r3, [r7, #15]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <__libc_init_array>:
 8009610:	b570      	push	{r4, r5, r6, lr}
 8009612:	4d0d      	ldr	r5, [pc, #52]	; (8009648 <__libc_init_array+0x38>)
 8009614:	4c0d      	ldr	r4, [pc, #52]	; (800964c <__libc_init_array+0x3c>)
 8009616:	1b64      	subs	r4, r4, r5
 8009618:	10a4      	asrs	r4, r4, #2
 800961a:	2600      	movs	r6, #0
 800961c:	42a6      	cmp	r6, r4
 800961e:	d109      	bne.n	8009634 <__libc_init_array+0x24>
 8009620:	4d0b      	ldr	r5, [pc, #44]	; (8009650 <__libc_init_array+0x40>)
 8009622:	4c0c      	ldr	r4, [pc, #48]	; (8009654 <__libc_init_array+0x44>)
 8009624:	f000 f820 	bl	8009668 <_init>
 8009628:	1b64      	subs	r4, r4, r5
 800962a:	10a4      	asrs	r4, r4, #2
 800962c:	2600      	movs	r6, #0
 800962e:	42a6      	cmp	r6, r4
 8009630:	d105      	bne.n	800963e <__libc_init_array+0x2e>
 8009632:	bd70      	pop	{r4, r5, r6, pc}
 8009634:	f855 3b04 	ldr.w	r3, [r5], #4
 8009638:	4798      	blx	r3
 800963a:	3601      	adds	r6, #1
 800963c:	e7ee      	b.n	800961c <__libc_init_array+0xc>
 800963e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009642:	4798      	blx	r3
 8009644:	3601      	adds	r6, #1
 8009646:	e7f2      	b.n	800962e <__libc_init_array+0x1e>
 8009648:	080096e8 	.word	0x080096e8
 800964c:	080096e8 	.word	0x080096e8
 8009650:	080096e8 	.word	0x080096e8
 8009654:	080096ec 	.word	0x080096ec

08009658 <memset>:
 8009658:	4402      	add	r2, r0
 800965a:	4603      	mov	r3, r0
 800965c:	4293      	cmp	r3, r2
 800965e:	d100      	bne.n	8009662 <memset+0xa>
 8009660:	4770      	bx	lr
 8009662:	f803 1b01 	strb.w	r1, [r3], #1
 8009666:	e7f9      	b.n	800965c <memset+0x4>

08009668 <_init>:
 8009668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966a:	bf00      	nop
 800966c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966e:	bc08      	pop	{r3}
 8009670:	469e      	mov	lr, r3
 8009672:	4770      	bx	lr

08009674 <_fini>:
 8009674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009676:	bf00      	nop
 8009678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967a:	bc08      	pop	{r3}
 800967c:	469e      	mov	lr, r3
 800967e:	4770      	bx	lr
