
LFDI Tuning Control Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b28  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000197c  08013cd8  08013cd8  00023cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015654  08015654  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  08015654  08015654  00025654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801565c  0801565c  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801565c  0801565c  0002565c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015660  08015660  00025660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  08015664  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302e4  2**0
                  CONTENTS
 10 .bss          00002e68  200002e8  200002e8  000302e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20003150  20003150  000302e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020381  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cb4  00000000  00000000  00050695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  00055350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f8  00000000  00000000  00056d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029eb3  00000000  00000000  00058570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022e03  00000000  00000000  00082423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0d2c  00000000  00000000  000a5226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00185f52  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085e8  00000000  00000000  00185fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e8 	.word	0x200002e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013cc0 	.word	0x08013cc0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002ec 	.word	0x200002ec
 80001ec:	08013cc0 	.word	0x08013cc0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <DAC_InitStruct>:
//Reference Voltage scales the Ouput Voltage
float REFERENCE_VOLTAGE = 3.3;


//
void DAC_InitStruct(struct sDAC* s, SPI_HandleTypeDef* hspi){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	
	s->spi = hspi;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	601a      	str	r2, [r3, #0]
	Set_Config(s);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f833 	bl	80010b4 <Set_Config>
	Set_Max_Peak_To_Peak_Voltage(s, 0);
 800104e:	2100      	movs	r1, #0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f99b 	bl	800138c <Set_Max_Peak_To_Peak_Voltage>
	/* USER CODE BEGIN 1 */
	//Set all DAC Channels Up. Should probably be put into TCB init
	for (int i = 0; i < 6; i++){
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e022      	b.n	80010a2 <DAC_InitStruct+0x6a>
		s->DAC_Channels[i].DAC_number = i;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	b2d9      	uxtb	r1, r3
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3302      	adds	r3, #2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4413      	add	r3, r2
 800106a:	460a      	mov	r2, r1
 800106c:	721a      	strb	r2, [r3, #8]
		s->DAC_Channels[i].upper_bound = 0x7FFF;
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3302      	adds	r3, #2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800107c:	809a      	strh	r2, [r3, #4]
		s->DAC_Channels[i].lower_bound = 0x7FFF;
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3302      	adds	r3, #2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800108c:	80da      	strh	r2, [r3, #6]
		s->DAC_Channels[i].enabled = true;
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3302      	adds	r3, #2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	2201      	movs	r2, #1
 800109a:	729a      	strb	r2, [r3, #10]
	for (int i = 0; i < 6; i++){
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	ddd9      	ble.n	800105c <DAC_InitStruct+0x24>
	}

}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <Set_Config>:
//@brief: This function will set a configuration value to the configuration register
//@param s: The DAC struct to use
//@return: None
void Set_Config(struct sDAC* s){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	uint8_t Data[3] = {0x00, 0x00, 0x00};
 80010bc:	4a30      	ldr	r2, [pc, #192]	; (8001180 <Set_Config+0xcc>)
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	4611      	mov	r1, r2
 80010c6:	8019      	strh	r1, [r3, #0]
 80010c8:	3302      	adds	r3, #2
 80010ca:	0c12      	lsrs	r2, r2, #16
 80010cc:	701a      	strb	r2, [r3, #0]
	uint8_t read_command[3] = {READ|CONFIG, 0x00, 0x00};
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <Set_Config+0xd0>)
 80010d0:	781a      	ldrb	r2, [r3, #0]
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <Set_Config+0xd4>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	743b      	strb	r3, [r7, #16]
 80010dc:	2300      	movs	r3, #0
 80010de:	747b      	strb	r3, [r7, #17]
 80010e0:	2300      	movs	r3, #0
 80010e2:	74bb      	strb	r3, [r7, #18]
	
	Hardware_Reset(s);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f923 	bl	8001330 <Hardware_Reset>
	//Make sure SCE is 0. This will make it so that the DAC will use the Values direclty written to it
	//rather than trying to use the individual offset and gain of each register to re-adjust
	//the value
	//Gain_A = 1 -> gain is set to 4xVref GAIN_A = 0 -> gain is set to 6xVref
	
	uint8_t tx_data[3] = {WRITE|CONFIG, AB, 0x00};
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <Set_Config+0xd8>)
 80010ec:	781a      	ldrb	r2, [r3, #0]
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <Set_Config+0xd4>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	733b      	strb	r3, [r7, #12]
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <Set_Config+0xdc>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	737b      	strb	r3, [r7, #13]
 80010fe:	2300      	movs	r3, #0
 8001100:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	4619      	mov	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f843 	bl	8001194 <Send_Command>
	Send_Command(s, read_command);
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f83d 	bl	8001194 <Send_Command>
	Recieve_Data(s, Data);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 f85b 	bl	80011dc <Recieve_Data>
	
	//if Data is the same as tx_data then the command was successful
	if(Data[1] == tx_data[1] && Data[2] == tx_data[2]){
 8001126:	7d7a      	ldrb	r2, [r7, #21]
 8001128:	7b7b      	ldrb	r3, [r7, #13]
 800112a:	429a      	cmp	r2, r3
 800112c:	d117      	bne.n	800115e <Set_Config+0xaa>
 800112e:	7dba      	ldrb	r2, [r7, #22]
 8001130:	7bbb      	ldrb	r3, [r7, #14]
 8001132:	429a      	cmp	r2, r3
 8001134:	d113      	bne.n	800115e <Set_Config+0xaa>
		s->config = (Data[1] << 8) | Data[2];
 8001136:	7d7b      	ldrb	r3, [r7, #21]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	7dbb      	ldrb	r3, [r7, #22]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21b      	sxth	r3, r3
 8001144:	b29a      	uxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	809a      	strh	r2, [r3, #4]
		s->Configured = true;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	729a      	strb	r2, [r3, #10]
		s->State = DAC_STATE_OK;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2204      	movs	r2, #4
 8001154:	72da      	strb	r2, [r3, #11]
		s->Ready = true;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	731a      	strb	r2, [r3, #12]
 800115c:	e00c      	b.n	8001178 <Set_Config+0xc4>
	}else{
		s->State = DAC_STATE_INITFAILED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	72da      	strb	r2, [r3, #11]
		s->Ready = false;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	731a      	strb	r2, [r3, #12]
		s->Errors++;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	89db      	ldrh	r3, [r3, #14]
 800116e:	3301      	adds	r3, #1
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	81da      	strh	r2, [r3, #14]
	}
			

}
 8001176:	bf00      	nop
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	08013cd8 	.word	0x08013cd8
 8001184:	20000000 	.word	0x20000000
 8001188:	20000305 	.word	0x20000305
 800118c:	20000304 	.word	0x20000304
 8001190:	20000002 	.word	0x20000002

08001194 <Send_Command>:
//        The second byte is the MSB of the register
//        The third byte is the LSB of the register
//@param: spi: The spi handle to use
//@param: command: The command to send
//@return: none
void Send_Command(struct sDAC* s, uint8_t* Command){
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 800119e:	2000      	movs	r0, #0
 80011a0:	f000 f8aa 	bl	80012f8 <Set_nCS_high>
	hal_status = HAL_SPI_Transmit(s->spi, Command, 3, 1);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	f008 f94e 	bl	800944e <HAL_SPI_Transmit>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
	while (!(s->spi->Instance->SR & SPI_SR_TXE));
 80011b6:	bf00      	nop
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f7      	beq.n	80011b8 <Send_Command+0x24>
	Set_nCS_high(true);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f000 f895 	bl	80012f8 <Set_nCS_high>
	Delay_us(10);
 80011ce:	200a      	movs	r0, #10
 80011d0:	f001 fffc 	bl	80031cc <Delay_us>
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <Recieve_Data>:

//@brief: This function recieves data from the DAC and stores it in the data array
//@param: spi: The spi handle
//@param: Data: buffer to store the data in
//@return: None
void Recieve_Data(struct sDAC* s, uint8_t* Data){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f886 	bl	80012f8 <Set_nCS_high>
	hal_status = HAL_SPI_TransmitReceive(s->spi,NOP_Send, Data, 3, 100);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2303      	movs	r3, #3
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	490b      	ldr	r1, [pc, #44]	; (8001228 <Recieve_Data+0x4c>)
 80011fa:	f008 fa64 	bl	80096c6 <HAL_SPI_TransmitReceive>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
	while ((s->spi->Instance->SR & SPI_SR_RXNE));
 8001202:	bf00      	nop
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f7      	bne.n	8001204 <Recieve_Data+0x28>
	Set_nCS_high(true);
 8001214:	2001      	movs	r0, #1
 8001216:	f000 f86f 	bl	80012f8 <Set_nCS_high>
	Delay_us(10);
 800121a:	200a      	movs	r0, #10
 800121c:	f001 ffd6 	bl	80031cc <Delay_us>

}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000004 	.word	0x20000004

0800122c <Set_DAC_Value>:
//@brief: This function sets the value of the given dac
//@param: DAC_Num: The DAC number to set the offset of
//@param: val: The value to set the dac to
//@param spi: The spi handle to use
//@return: None
void Set_DAC_Value(struct sDAC* s, uint8_t DAC_Num, uint16_t val){
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
 8001238:	4613      	mov	r3, r2
 800123a:	803b      	strh	r3, [r7, #0]
	//Make sure DAC is between 0 and 7
	if(DAC_Num > 7){
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	2b07      	cmp	r3, #7
 8001240:	d819      	bhi.n	8001276 <Set_DAC_Value+0x4a>
		return;
	}
	uint8_t DAC_REG = Set_DAC0+DAC_Num;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <Set_DAC_Value+0x54>)
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	4413      	add	r3, r2
 800124a:	73fb      	strb	r3, [r7, #15]
	//Set the DAC to the correct value by adding the DAC number to the Set_DAC0 command
	uint8_t tx_data[3] = {WRITE|DAC_REG, (val >> 8), (val & 0xFF)};
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <Set_DAC_Value+0x58>)
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	4313      	orrs	r3, r2
 8001254:	b2db      	uxtb	r3, r3
 8001256:	733b      	strb	r3, [r7, #12]
 8001258:	883b      	ldrh	r3, [r7, #0]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	b29b      	uxth	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	737b      	strb	r3, [r7, #13]
 8001262:	883b      	ldrh	r3, [r7, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	4619      	mov	r1, r3
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff90 	bl	8001194 <Send_Command>
 8001274:	e000      	b.n	8001278 <Set_DAC_Value+0x4c>
		return;
 8001276:	bf00      	nop
	
}
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000001 	.word	0x20000001
 8001284:	20000304 	.word	0x20000304

08001288 <Set_nLDAC_high>:
}

//@brief: This function sets the nLDAC pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nLDAC_high(bool HIGH){
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <Set_nLDAC_high+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <Set_nLDAC_high+0x34>)
 80012a0:	f003 fc46 	bl	8004b30 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
	}
}
 80012a4:	e005      	b.n	80012b2 <Set_nLDAC_high+0x2a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <Set_nLDAC_high+0x34>)
 80012ae:	f003 fc3f 	bl	8004b30 <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40020c00 	.word	0x40020c00

080012c0 <Set_nRST_high>:
}

//@brief: This function sets the nRST pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nRST_high(bool HIGH){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <Set_nRST_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <Set_nRST_high+0x34>)
 80012d8:	f003 fc2a 	bl	8004b30 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
	}

}
 80012dc:	e005      	b.n	80012ea <Set_nRST_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <Set_nRST_high+0x34>)
 80012e6:	f003 fc23 	bl	8004b30 <HAL_GPIO_WritePin>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000

080012f8 <Set_nCS_high>:
}

//@brief: This function sets the nCS pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nCS_high(bool HIGH){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <Set_nCS_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, SET);
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800130e:	4807      	ldr	r0, [pc, #28]	; (800132c <Set_nCS_high+0x34>)
 8001310:	f003 fc0e 	bl	8004b30 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
	}

}
 8001314:	e005      	b.n	8001322 <Set_nCS_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <Set_nCS_high+0x34>)
 800131e:	f003 fc07 	bl	8004b30 <HAL_GPIO_WritePin>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <Hardware_Reset>:
	return state;
}


//Reset the DAC Values using the nRST Pin
void Hardware_Reset(struct sDAC* s){
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	Set_nRST_high(false);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff ffc1 	bl	80012c0 <Set_nRST_high>
	Delay_us(10);
 800133e:	200a      	movs	r0, #10
 8001340:	f001 ff44 	bl	80031cc <Delay_us>
	Set_nRST_high(true);
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff ffbb 	bl	80012c0 <Set_nRST_high>
	Delay_us(10);
 800134a:	200a      	movs	r0, #10
 800134c:	f001 ff3e 	bl	80031cc <Delay_us>
	s->State = DAC_STATE_UNKNOWN;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	72da      	strb	r2, [r3, #11]
	s->Ready= false;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	731a      	strb	r2, [r3, #12]
	s->Errors = 0;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	81da      	strh	r2, [r3, #14]
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <Syncronous_Update>:


//Syncronous Update of LDAC using the nLDAC Pin NOTE: Only Needed if nLDAC is tied High
void Syncronous_Update(void){
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
	Set_nLDAC_high(false);
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff ff8a 	bl	8001288 <Set_nLDAC_high>
	Delay_us(10);
 8001374:	200a      	movs	r0, #10
 8001376:	f001 ff29 	bl	80031cc <Delay_us>
	Set_nLDAC_high(true);
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff ff84 	bl	8001288 <Set_nLDAC_high>
	Delay_us(10);
 8001380:	200a      	movs	r0, #10
 8001382:	f001 ff23 	bl	80031cc <Delay_us>
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <Set_Max_Peak_To_Peak_Voltage>:


//@brief: This function calculates the max peak to peak voltage that can be achieved
void Set_Max_Peak_To_Peak_Voltage(struct sDAC* s, bool Gain){
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
	//The max Voltage is 11.2V so we need to scale the voltage to fit in 16 bits
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	if(Gain){
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00a      	beq.n	80013b4 <Set_Max_Peak_To_Peak_Voltage+0x28>
		s->max_peak2peak = REFERENCE_VOLTAGE*4;
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80013a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edc3 7a04 	vstr	s15, [r3, #16]
	}else
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
	return;
 80013b2:	e00a      	b.n	80013ca <Set_Max_Peak_To_Peak_Voltage+0x3e>
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <Set_Max_Peak_To_Peak_Voltage+0x48>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	edc3 7a04 	vstr	s15, [r3, #16]
	return;
 80013c8:	bf00      	nop
}
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20000008 	.word	0x20000008

080013d8 <Set_Voltage_Peak_to_Peak>:

//@brief: This function sets the upper and lower bounds of a DAC Channel
//@param: s: The DAC Channel to set the bounds of
//@param: voltage: The voltage to set the bounds to
void Set_Voltage_Peak_to_Peak(struct sDAC* sDAC, uint8_t Channel_Number, float* voltage){
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	460b      	mov	r3, r1
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	72fb      	strb	r3, [r7, #11]
	//The max Voltage Peak to Peak is 22.4V so we need to scale the voltage to fit in 16 bits
	//Find the upper and lower bounds of the voltage with Zero Bias
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	float percentage = (*voltage/(float)sDAC->max_peak2peak)/2;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edd3 6a00 	vldr	s13, [r3]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80013f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fe:	edc7 7a05 	vstr	s15, [r7, #20]
	sDAC->DAC_Channels[Channel_Number].upper_bound = 0xFFFF/2 + percentage*0xFFFF;
 8001402:	edd7 7a05 	vldr	s15, [r7, #20]
 8001406:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001468 <Set_Voltage_Peak_to_Peak+0x90>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800146c <Set_Voltage_Peak_to_Peak+0x94>
 8001412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001416:	7afb      	ldrb	r3, [r7, #11]
 8001418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141c:	ee17 2a90 	vmov	r2, s15
 8001420:	b291      	uxth	r1, r2
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	3302      	adds	r3, #2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	460a      	mov	r2, r1
 800142c:	809a      	strh	r2, [r3, #4]
	sDAC->DAC_Channels[Channel_Number].lower_bound = 0xFFFF/2 - percentage*0xFFFF;
 800142e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001432:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001468 <Set_Voltage_Peak_to_Peak+0x90>
 8001436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800146c <Set_Voltage_Peak_to_Peak+0x94>
 800143e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001442:	7afb      	ldrb	r3, [r7, #11]
 8001444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001448:	ee17 2a90 	vmov	r2, s15
 800144c:	b291      	uxth	r1, r2
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	3302      	adds	r3, #2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4413      	add	r3, r2
 8001456:	460a      	mov	r2, r1
 8001458:	80da      	strh	r2, [r3, #6]
	return;
 800145a:	bf00      	nop

}
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	477fff00 	.word	0x477fff00
 800146c:	46fffe00 	.word	0x46fffe00

08001470 <PID_InitStruct>:
 */

#include "pid.h"

void PID_InitStruct(struct sPID* s)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->Config.Kp = 0.0f;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
  s->Config.Ki = 0.0f;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
  s->Config.Kd = 0.0f;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
  s->Config.Li = 1.0f;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80014a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014a6:	601a      	str	r2, [r3, #0]
  s->Config.TargetP = -273.0f;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80014ae:	4a22      	ldr	r2, [pc, #136]	; (8001538 <PID_InitStruct+0xc8>)
 80014b0:	601a      	str	r2, [r3, #0]
  s->Config.Enabled = false;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
  s->Config.History = 16;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2210      	movs	r2, #16
 80014be:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
  s->DeltaT = 0.013f;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014c8:	4a1c      	ldr	r2, [pc, #112]	; (800153c <PID_InitStruct+0xcc>)
 80014ca:	601a      	str	r2, [r3, #0]
  s->IntegratorCount = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  for (i=0;i<255;i++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	e009      	b.n	80014ee <PID_InitStruct+0x7e>
    s->LastP[i]=0.0f;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
  for (i=0;i<255;i++)
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	3301      	adds	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	2bff      	cmp	r3, #255	; 0xff
 80014f2:	d1f2      	bne.n	80014da <PID_InitStruct+0x6a>
  s->Effort = 0.0f;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
  s->Ep = 0.0f;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
  s->Ei = 0.0f;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
  s->Ed = 0.0f;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
  s->Config.Frequency = 200;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	22c8      	movs	r2, #200	; 0xc8
 8001528:	f8a3 242e 	strh.w	r2, [r3, #1070]	; 0x42e
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	c3888000 	.word	0xc3888000
 800153c:	3c54fdf4 	.word	0x3c54fdf4

08001540 <PID_SavePoint>:

void PID_SavePoint(struct sPID* s, float p)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	ed87 0a00 	vstr	s0, [r7]
  uint8_t i;
  for (i=(s->Config.History-1); i>0; i--)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8001552:	3b01      	subs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e00d      	b.n	8001574 <PID_SavePoint+0x34>
    s->LastP[i] = s->LastP[i-1];
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	440a      	add	r2, r1
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	601a      	str	r2, [r3, #0]
  for (i=(s->Config.History-1); i>0; i--)
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	3b01      	subs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1ee      	bne.n	8001558 <PID_SavePoint+0x18>
  s->LastP[0] = p;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	601a      	str	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <PID_SumError>:

float PID_SumError(struct sPID* s)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->IntegratorCount++;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800159a:	3301      	adds	r3, #1
 800159c:	b2da      	uxtb	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  if (s->IntegratorCount < s->Config.History)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d202      	bcs.n	80015ba <PID_SumError+0x2e>
    return 0;
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	e05b      	b.n	8001672 <PID_SumError+0xe6>
  else
    s->IntegratorCount = s->Config.History;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 242d 	ldrb.w	r2, [r3, #1069]	; 0x42d
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  float err = 0;
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  for (i=0; i<(s->Config.History); i++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e015      	b.n	80015fe <PID_SumError+0x72>
    err += (s->Config.TargetP - s->LastP[i]);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80015d8:	ed93 7a00 	vldr	s14, [r3]
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80015f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f4:	edc7 7a02 	vstr	s15, [r7, #8]
  for (i=0; i<(s->Config.History); i++)
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	3301      	adds	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	429a      	cmp	r2, r3
 8001608:	d3e3      	bcc.n	80015d2 <PID_SumError+0x46>
  err *= (s->Config.Ki);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ed97 7a02 	vldr	s14, [r7, #8]
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	edc7 7a02 	vstr	s15, [r7, #8]
  if (err < (-s->Config.Li))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	eef1 7a67 	vneg.f32	s15, s15
 800162e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163a:	d508      	bpl.n	800164e <PID_SumError+0xc2>
    err = -(s->Config.Li);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	eef1 7a67 	vneg.f32	s15, s15
 800164a:	edc7 7a02 	vstr	s15, [r7, #8]
  if (err > s->Config.Li)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	ed97 7a02 	vldr	s14, [r7, #8]
 800165c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	dd04      	ble.n	8001670 <PID_SumError+0xe4>
    err = s->Config.Li;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60bb      	str	r3, [r7, #8]
  return err;
 8001670:	68bb      	ldr	r3, [r7, #8]
}
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <PID_Velocity>:


float PID_Velocity(struct sPID* s)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint8_t periods = 4;
 800168c:	2304      	movs	r3, #4
 800168e:	73fb      	strb	r3, [r7, #15]
  if (s->IntegratorCount > periods)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	429a      	cmp	r2, r3
 800169a:	d219      	bcs.n	80016d0 <PID_Velocity+0x4c>
    return (s->LastP[0]-s->LastP[periods])/(s->DeltaT*periods);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	ed93 7a00 	vldr	s14, [r3]
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b8:	edd3 6a00 	vldr	s13, [r3]
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016ce:	e001      	b.n	80016d4 <PID_Velocity+0x50>
  else
    return 0;
 80016d0:	eddf 6a05 	vldr	s13, [pc, #20]	; 80016e8 <PID_Velocity+0x64>
}
 80016d4:	eef0 7a66 	vmov.f32	s15, s13
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	00000000 	.word	0x00000000

080016ec <PID_CalculateEffort>:

// calculate the error and return a value between 0 and 1
float PID_CalculateEffort(struct sPID* s, float p)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	ed87 0a00 	vstr	s0, [r7]
  float eff;
  if ((s->Config.Enabled == false) ||
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 342c 	ldrb.w	r3, [r3, #1068]	; 0x42c
 80016fe:	f083 0301 	eor.w	r3, r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d115      	bne.n	8001734 <PID_CalculateEffort+0x48>
      (s->Config.TargetP < -200) ||
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800170e:	edd3 7a00 	vldr	s15, [r3]
  if ((s->Config.Enabled == false) ||
 8001712:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001848 <PID_CalculateEffort+0x15c>
 8001716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	d409      	bmi.n	8001734 <PID_CalculateEffort+0x48>
      (s->DeltaT == 0))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001726:	edd3 7a00 	vldr	s15, [r3]
      (s->Config.TargetP < -200) ||
 800172a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001732:	d117      	bne.n	8001764 <PID_CalculateEffort+0x78>
  {
    s->Ep = -1;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800173a:	4a44      	ldr	r2, [pc, #272]	; (800184c <PID_CalculateEffort+0x160>)
 800173c:	601a      	str	r2, [r3, #0]
    s->Ed = -1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001744:	4a41      	ldr	r2, [pc, #260]	; (800184c <PID_CalculateEffort+0x160>)
 8001746:	601a      	str	r2, [r3, #0]
    s->Ei = -1;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800174e:	4a3f      	ldr	r2, [pc, #252]	; (800184c <PID_CalculateEffort+0x160>)
 8001750:	601a      	str	r2, [r3, #0]
    s->Effort = 0;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
    return 0;
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	e069      	b.n	8001838 <PID_CalculateEffort+0x14c>
  }
  s->Ep = (s->Config.TargetP - p) * (s->Config.Kp);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800176a:	ed93 7a00 	vldr	s14, [r3]
 800176e:	edd7 7a00 	vldr	s15, [r7]
 8001772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800178a:	edc3 7a00 	vstr	s15, [r3]
  s->Ed = (0 - PID_Velocity(s)) * (s->Config.Kd);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff78 	bl	8001684 <PID_Velocity>
 8001794:	eef0 7a40 	vmov.f32	s15, s0
 8001798:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001850 <PID_CalculateEffort+0x164>
 800179c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017b4:	edc3 7a00 	vstr	s15, [r3]
  s->Ei = PID_SumError(s);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fee7 	bl	800158c <PID_SumError>
 80017be:	eef0 7a40 	vmov.f32	s15, s0
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80017c8:	edc3 7a00 	vstr	s15, [r3]
  eff = s->Ep + s->Ed + s->Ei;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80017d2:	ed93 7a00 	vldr	s14, [r3]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (eff > 1)
 80017f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	dd02      	ble.n	800180e <PID_CalculateEffort+0x122>
    eff = 1;
 8001808:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800180c:	60fb      	str	r3, [r7, #12]
  if (eff < 0)
 800180e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001812:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	d502      	bpl.n	8001822 <PID_CalculateEffort+0x136>
    eff = 0;
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  PID_SavePoint(s, p);
 8001822:	ed97 0a00 	vldr	s0, [r7]
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fe8a 	bl	8001540 <PID_SavePoint>
  s->Effort = eff;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	601a      	str	r2, [r3, #0]
  return eff;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eeb0 0a67 	vmov.f32	s0, s15
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	c3480000 	.word	0xc3480000
 800184c:	bf800000 	.word	0xbf800000
	...

08001858 <TMP117_InitStruct>:
//@param s Pointer to the structure to initialize
//@param interface Pointer to the I2C interface to use
//@param addpin Value of the address pin
//@return None
void TMP117_InitStruct(struct sTMP117* s, I2C_HandleTypeDef* interface, uint8_t addpin)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	4613      	mov	r3, r2
 8001864:	71fb      	strb	r3, [r7, #7]
   * 0x01 V+
   * 0x10 SDA
   * 0x11 SCL
   */
  uint8_t i;
  s->Address = 0b1001000 | addpin;
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 800186c:	b2da      	uxtb	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	701a      	strb	r2, [r3, #0]
  s->Interface = interface;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	605a      	str	r2, [r3, #4]
  s->Average = -273;
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	a31f      	add	r3, pc, #124	; (adr r3, 80018f8 <TMP117_InitStruct+0xa0>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
  s->Configured = false;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
  s->SamplesInAverage = 16;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2210      	movs	r2, #16
 8001890:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
  s->Index = 0;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  s->State = TMP117_STATE_UNKNOWN;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  for (i=0;i<64;i++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	75fb      	strb	r3, [r7, #23]
 80018a8:	e00c      	b.n	80018c4 <TMP117_InitStruct+0x6c>
    s->Temperature[i] = -273;
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	18d1      	adds	r1, r2, r3
 80018b4:	a310      	add	r3, pc, #64	; (adr r3, 80018f8 <TMP117_InitStruct+0xa0>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	e9c1 2300 	strd	r2, r3, [r1]
  for (i=0;i<64;i++)
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	3301      	adds	r3, #1
 80018c2:	75fb      	strb	r3, [r7, #23]
 80018c4:	7dfb      	ldrb	r3, [r7, #23]
 80018c6:	2b3f      	cmp	r3, #63	; 0x3f
 80018c8:	d9ef      	bls.n	80018aa <TMP117_InitStruct+0x52>
  s->LastTemperature = -273;
 80018ca:	68f9      	ldr	r1, [r7, #12]
 80018cc:	a30a      	add	r3, pc, #40	; (adr r3, 80018f8 <TMP117_InitStruct+0xa0>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Ready = false;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
  s->Errors = 0;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	f3af 8000 	nop.w
 80018f8:	00000000 	.word	0x00000000
 80018fc:	c0711000 	.word	0xc0711000

08001900 <TMP117_Configure>:

//@brief Configure the TMP117
//@param s Pointer to the structure to configure
//@return None
void TMP117_Configure(struct sTMP117* s)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af02      	add	r7, sp, #8
 8001906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef res;
  printf("Attempting to init... ");
 8001908:	481c      	ldr	r0, [pc, #112]	; (800197c <TMP117_Configure+0x7c>)
 800190a:	f00d fef9 	bl	800f700 <iprintf>
  uint8_t buffer[3] = {0};
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <TMP117_Configure+0x80>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	81bb      	strh	r3, [r7, #12]
 8001914:	2300      	movs	r3, #0
 8001916:	73bb      	strb	r3, [r7, #14]
  buffer[0] = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	733b      	strb	r3, [r7, #12]
  buffer[2] = 1 << 5;
 800191c:	2320      	movs	r3, #32
 800191e:	73bb      	strb	r3, [r7, #14]
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 3, 10); // 8 samples averaged
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6858      	ldr	r0, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b29b      	uxth	r3, r3
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	b299      	uxth	r1, r3
 800192e:	f107 020c 	add.w	r2, r7, #12
 8001932:	230a      	movs	r3, #10
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2303      	movs	r3, #3
 8001938:	f003 fa58 	bl	8004dec <HAL_I2C_Master_Transmit>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]
  if (res == HAL_OK)
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d107      	bne.n	8001956 <TMP117_Configure+0x56>
  {
    s->Configured = true;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
    printf("OK!\n");
 800194e:	480d      	ldr	r0, [pc, #52]	; (8001984 <TMP117_Configure+0x84>)
 8001950:	f00d ff5c 	bl	800f80c <puts>
  {
    s->Errors++;
    s->State = TMP117_STATE_INITFAILED;
    printf("Failed!\n");
  }
}
 8001954:	e00e      	b.n	8001974 <TMP117_Configure+0x74>
    s->Errors++;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 800195c:	3301      	adds	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    s->State = TMP117_STATE_INITFAILED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    printf("Failed!\n");
 800196e:	4806      	ldr	r0, [pc, #24]	; (8001988 <TMP117_Configure+0x88>)
 8001970:	f00d ff4c 	bl	800f80c <puts>
}
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	08013d00 	.word	0x08013d00
 8001980:	08013d24 	.word	0x08013d24
 8001984:	08013d18 	.word	0x08013d18
 8001988:	08013d1c 	.word	0x08013d1c

0800198c <TMP117_GetTemperature>:

//@brief Get the temperature from the TMP117
//@param s Pointer to the structure to get the temperature from
//@return None
void TMP117_GetTemperature(struct sTMP117* s)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b08b      	sub	sp, #44	; 0x2c
 8001990:	af02      	add	r7, sp, #8
 8001992:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t u;
  double t = 0;
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  //setup an empty Buffer to request the temperature
  uint8_t buffer[2] = {0};
 80019a0:	2300      	movs	r3, #0
 80019a2:	81bb      	strh	r3, [r7, #12]
  uint16_t data = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef res;
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 1, 10); // request temperature
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6858      	ldr	r0, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	b299      	uxth	r1, r3
 80019b6:	f107 020c 	add.w	r2, r7, #12
 80019ba:	230a      	movs	r3, #10
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2301      	movs	r3, #1
 80019c0:	f003 fa14 	bl	8004dec <HAL_I2C_Master_Transmit>
 80019c4:	4603      	mov	r3, r0
 80019c6:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 80019c8:	7cfb      	ldrb	r3, [r7, #19]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d01a      	beq.n	8001a04 <TMP117_GetTemperature+0x78>
  {
    s->State = TMP117_STATE_REQUESTNOACK;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2202      	movs	r2, #2
 80019d2:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019dc:	3301      	adds	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    //If this temperature sensor gets more than 100 errors in a row, it's probably not connected
    if (s->Errors > 100)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019ec:	2b64      	cmp	r3, #100	; 0x64
 80019ee:	f240 80b3 	bls.w	8001b58 <TMP117_GetTemperature+0x1cc>
    {
      s->Configured = false;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 8001a02:	e0a9      	b.n	8001b58 <TMP117_GetTemperature+0x1cc>
  }

  res = HAL_I2C_Master_Receive(s->Interface, (s->Address << 1), buffer, 2, 10); // receive temperature
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6858      	ldr	r0, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	b299      	uxth	r1, r3
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	230a      	movs	r3, #10
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f003 fae4 	bl	8004fe8 <HAL_I2C_Master_Receive>
 8001a20:	4603      	mov	r3, r0
 8001a22:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 8001a24:	7cfb      	ldrb	r3, [r7, #19]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d01a      	beq.n	8001a60 <TMP117_GetTemperature+0xd4>
  {
    s->State = TMP117_STATE_RECEIVEFAIL;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a38:	3301      	adds	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    if (s->Errors > 100)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a48:	2b64      	cmp	r3, #100	; 0x64
 8001a4a:	f240 8087 	bls.w	8001b5c <TMP117_GetTemperature+0x1d0>
    {
      s->Configured = false;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 8001a5e:	e07d      	b.n	8001b5c <TMP117_GetTemperature+0x1d0>
  }

  
  s->State = TMP117_STATE_VALIDTEMP;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2204      	movs	r2, #4
 8001a64:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  data = (buffer[0] << 8) | buffer[1];
 8001a68:	7b3b      	ldrb	r3, [r7, #12]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	7b7b      	ldrb	r3, [r7, #13]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	817b      	strh	r3, [r7, #10]
  u = *(&(data));
 8001a7a:	897b      	ldrh	r3, [r7, #10]
 8001a7c:	823b      	strh	r3, [r7, #16]
  //Conver the Temp as per documentation
  s->Temperature[s->Index] = ((double)u) * 0.0078125;
 8001a7e:	8a3b      	ldrh	r3, [r7, #16]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd5f 	bl	8000544 <__aeabi_ui2d>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001a8c:	461c      	mov	r4, r3
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a96:	f7fe fdcf 	bl	8000638 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	1c61      	adds	r1, r4, #1
 8001aa2:	00c9      	lsls	r1, r1, #3
 8001aa4:	4401      	add	r1, r0
 8001aa6:	e9c1 2300 	strd	r2, r3, [r1]
  s->LastTemperature = s->Temperature[s->Index];
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Index++;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001ac8:	3301      	adds	r3, #1
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  //If we finally have enough Temperatures to average, set the Ready flag
  //if we have engough samples, set the flags
  if (s->Index >= s->SamplesInAverage)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 2211 	ldrb.w	r2, [r3, #529]	; 0x211
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d307      	bcc.n	8001af2 <TMP117_GetTemperature+0x166>
  {
    s->Ready = true;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
    s->Index = 0;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  }
  
  //average the Temperatures
  if (s->Ready)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d030      	beq.n	8001b5e <TMP117_GetTemperature+0x1d2>
  {
    for (int i=0;i<(s->SamplesInAverage); i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e011      	b.n	8001b26 <TMP117_GetTemperature+0x19a>
    {
      t += s->Temperature[i];
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b14:	f7fe fbda 	bl	80002cc <__adddf3>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i=0;i<(s->SamplesInAverage); i++)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	4293      	cmp	r3, r2
 8001b32:	dbe6      	blt.n	8001b02 <TMP117_GetTemperature+0x176>
    }
    s->Average = t / s->SamplesInAverage;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd12 	bl	8000564 <__aeabi_i2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b48:	f7fe fea0 	bl	800088c <__aeabi_ddiv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
 8001b56:	e002      	b.n	8001b5e <TMP117_GetTemperature+0x1d2>
    return;
 8001b58:	bf00      	nop
 8001b5a:	e000      	b.n	8001b5e <TMP117_GetTemperature+0x1d2>
    return;
 8001b5c:	bf00      	nop
  }


}
 8001b5e:	3724      	adds	r7, #36	; 0x24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}

08001b64 <BaseT_Position_to_BaseT_Voltage>:
	return pos;
}


//Lookup Table to convert a pixel position to a voltage at the base Temperature. 25C
float BaseT_Position_to_BaseT_Voltage(uint16_t position){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80fb      	strh	r3, [r7, #6]
	2819,2816,2812,2808,2805,2801,2800,2800,2800,2796,2793,2789,2785,2782,2778,2774,2771,2767,2763,2759,2751,2744,2738,
	2734,2731,2727,2723,2719,2716,2712,2708,2704,2700,2700,2700,2699,2695,2691,2687,2684,2680,2676,2672,2667,2659,2651,
	2647,2643,2639,2635,2631,2627,2624,2620,2616,2612,2608,2604,2600,2600,2600,2599,2595,2591,2587,2583,2579,2575,2572,
	2565,2557,2550,2546,2542,2538,2534,2530,2527,2523,2519,2515,2511,2507,2503,2500,2500,2500,2498,2494,2490,2486,2482,
	2478,2474,2470,2466,2462,2457,2449,2441,2437,2433,2429,2425,2421,2417,2413,2409};
	float volts = lookup[position]/1000.0;
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <BaseT_Position_to_BaseT_Voltage+0x44>)
 8001b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fcf4 	bl	8000564 <__aeabi_i2d>
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <BaseT_Position_to_BaseT_Voltage+0x48>)
 8001b82:	f7fe fe83 	bl	800088c <__aeabi_ddiv>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7ff f84b 	bl	8000c28 <__aeabi_d2f>
 8001b92:	4603      	mov	r3, r0
 8001b94:	60fb      	str	r3, [r7, #12]
	return volts;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	ee07 3a90 	vmov	s15, r3
}
 8001b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	080149d0 	.word	0x080149d0
 8001bac:	408f4000 	.word	0x408f4000

08001bb0 <temperature_position_offset>:

//This Function Will Convert the temperature to a positional offset
//This is based on the Found relation ship between Position and Temperature
uint16_t temperature_position_offset(double* temp){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

	uint16_t offset =(uint16_t)(46.09*(*temp)-978.1);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bbe:	a30e      	add	r3, pc, #56	; (adr r3, 8001bf8 <temperature_position_offset+0x48>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fd38 	bl	8000638 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	a30b      	add	r3, pc, #44	; (adr r3, 8001c00 <temperature_position_offset+0x50>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe fb77 	bl	80002c8 <__aeabi_dsub>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7ff f801 	bl	8000be8 <__aeabi_d2uiz>
 8001be6:	4603      	mov	r3, r0
 8001be8:	81fb      	strh	r3, [r7, #14]
	return offset;
 8001bea:	89fb      	ldrh	r3, [r7, #14]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	1eb851ec 	.word	0x1eb851ec
 8001bfc:	40470b85 	.word	0x40470b85
 8001c00:	cccccccd 	.word	0xcccccccd
 8001c04:	408e90cc 	.word	0x408e90cc

08001c08 <Wavelength_to_Voltage>:


//This Function Will Convert a Wavelength and a temperature to a Voltage
float Wavelength_to_Voltage(float* wavelength, double* temp){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
	//Skip this For now we need a translation table
	//uint16_t base_position = NM_to_Position(wavelength);
	uint16_t base_position = 100;
 8001c12:	2364      	movs	r3, #100	; 0x64
 8001c14:	82fb      	strh	r3, [r7, #22]
	uint16_t absolute_BaseT_Offset = temperature_position_offset(temp);
 8001c16:	6838      	ldr	r0, [r7, #0]
 8001c18:	f7ff ffca 	bl	8001bb0 <temperature_position_offset>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	82bb      	strh	r3, [r7, #20]
	uint16_t absolute_Offset = temperature_position_offset(temp);
 8001c20:	6838      	ldr	r0, [r7, #0]
 8001c22:	f7ff ffc5 	bl	8001bb0 <temperature_position_offset>
 8001c26:	4603      	mov	r3, r0
 8001c28:	827b      	strh	r3, [r7, #18]
	uint16_t position = base_position + (absolute_BaseT_Offset - absolute_Offset);
 8001c2a:	8aba      	ldrh	r2, [r7, #20]
 8001c2c:	8a7b      	ldrh	r3, [r7, #18]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	8afb      	ldrh	r3, [r7, #22]
 8001c34:	4413      	add	r3, r2
 8001c36:	823b      	strh	r3, [r7, #16]
	float Voltage = BaseT_Position_to_BaseT_Voltage(position);
 8001c38:	8a3b      	ldrh	r3, [r7, #16]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff92 	bl	8001b64 <BaseT_Position_to_BaseT_Voltage>
 8001c40:	ed87 0a03 	vstr	s0, [r7, #12]
	return Voltage;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	ee07 3a90 	vmov	s15, r3
}
 8001c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <TCB_InitStruct>:
#include "DAC.h"



//This Will Setup the TCB structer by initiallizing the DAC and the TMP117 and the Controller
void TCB_InitStruct(struct sTuningControlBoard* s, I2C_HandleTypeDef* hi2c, SPI_HandleTypeDef* hspi){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]

    //For each of the Seven Temperature sensors initialize the struct
    for(int i = 0; i < 4; i++){
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	e011      	b.n	8001c8a <TCB_InitStruct+0x36>
        TMP117_InitStruct(&s->Sensor[i], hi2c, i);
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f44f 720a 	mov.w	r2, #552	; 0x228
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
 8001c70:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fdea 	bl	8001858 <TMP117_InitStruct>
    for(int i = 0; i < 4; i++){
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	ddea      	ble.n	8001c66 <TCB_InitStruct+0x12>
    }   
    Controller_InitStruct(&s->Controller,&s->Sensor[0], 0);
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f001 f98e 	bl	8002fbc <Controller_InitStruct>
    DAC_InitStruct(&s->DAC8718, hspi);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f9c5 	bl	8001038 <DAC_InitStruct>

}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cbc:	f3bf 8f4f 	dsb	sy
}
 8001cc0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <__NVIC_SystemReset+0x24>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001cca:	4904      	ldr	r1, [pc, #16]	; (8001cdc <__NVIC_SystemReset+0x24>)
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <__NVIC_SystemReset+0x28>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd2:	f3bf 8f4f 	dsb	sy
}
 8001cd6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <__NVIC_SystemReset+0x20>
 8001cdc:	e000ed00 	.word	0xe000ed00
 8001ce0:	05fa0004 	.word	0x05fa0004

08001ce4 <ProcessUserInput>:

//Get the User Input and process it
//@param Controller: pointer to the controller struct
//@param buffer: pointer to the buffer
void ProcessUserInput(struct sController* Controller, uint8_t* buffer, struct sTuningControlBoard* TCB)
{
 8001ce4:	b5b0      	push	{r4, r5, r7, lr}
 8001ce6:	b0ca      	sub	sp, #296	; 0x128
 8001ce8:	af04      	add	r7, sp, #16
 8001cea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cf2:	6018      	str	r0, [r3, #0]
 8001cf4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cf8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cfc:	6019      	str	r1, [r3, #0]
 8001cfe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d06:	601a      	str	r2, [r3, #0]
  uint16_t i = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  uint8_t u = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
  char output[250];
  char c;
  float f = 0;
 8001d14:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
  for (i=0; buffer[i]; i++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001d28:	e02b      	b.n	8001d82 <ProcessUserInput+0x9e>
    buffer[i] = tolower(buffer[i]);
 8001d2a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001d2e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001d32:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
 8001d40:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8001d44:	3301      	adds	r3, #1
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <ProcessUserInput+0x78>)
 8001d48:	4413      	add	r3, r2
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <ProcessUserInput+0x7c>
 8001d54:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8001d58:	3320      	adds	r3, #32
 8001d5a:	e003      	b.n	8001d64 <ProcessUserInput+0x80>
 8001d5c:	08015198 	.word	0x08015198
 8001d60:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8001d64:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8001d68:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001d6c:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001d70:	6809      	ldr	r1, [r1, #0]
 8001d72:	440a      	add	r2, r1
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	7013      	strb	r3, [r2, #0]
  for (i=0; buffer[i]; i++)
 8001d78:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001d82:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001d86:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001d8a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	4413      	add	r3, r2
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1c8      	bne.n	8001d2a <ProcessUserInput+0x46>
//  printf("String: %s\n", buffer);

  replacestr(buffer, "=", "");
 8001d98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001da0:	4ab4      	ldr	r2, [pc, #720]	; (8002074 <ProcessUserInput+0x390>)
 8001da2:	49b5      	ldr	r1, [pc, #724]	; (8002078 <ProcessUserInput+0x394>)
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	f001 fa37 	bl	8003218 <replacestr>
  replacestr(buffer, " ", "");
 8001daa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001db2:	4ab0      	ldr	r2, [pc, #704]	; (8002074 <ProcessUserInput+0x390>)
 8001db4:	49b1      	ldr	r1, [pc, #708]	; (800207c <ProcessUserInput+0x398>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	f001 fa2e 	bl	8003218 <replacestr>
  replacestr(buffer, " ", "");
 8001dbc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dc4:	4aab      	ldr	r2, [pc, #684]	; (8002074 <ProcessUserInput+0x390>)
 8001dc6:	49ad      	ldr	r1, [pc, #692]	; (800207c <ProcessUserInput+0x398>)
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	f001 fa25 	bl	8003218 <replacestr>
  replacestr(buffer, " ", "");
 8001dce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dd2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dd6:	4aa7      	ldr	r2, [pc, #668]	; (8002074 <ProcessUserInput+0x390>)
 8001dd8:	49a8      	ldr	r1, [pc, #672]	; (800207c <ProcessUserInput+0x398>)
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	f001 fa1c 	bl	8003218 <replacestr>
  replacestr(buffer, " ", "");
 8001de0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001de4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001de8:	4aa2      	ldr	r2, [pc, #648]	; (8002074 <ProcessUserInput+0x390>)
 8001dea:	49a4      	ldr	r1, [pc, #656]	; (800207c <ProcessUserInput+0x398>)
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	f001 fa13 	bl	8003218 <replacestr>
  replacestr(buffer, " ", "");
 8001df2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001df6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dfa:	4a9e      	ldr	r2, [pc, #632]	; (8002074 <ProcessUserInput+0x390>)
 8001dfc:	499f      	ldr	r1, [pc, #636]	; (800207c <ProcessUserInput+0x398>)
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	f001 fa0a 	bl	8003218 <replacestr>
  replacestr(buffer, "channel", "c");
 8001e04:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e0c:	4a9c      	ldr	r2, [pc, #624]	; (8002080 <ProcessUserInput+0x39c>)
 8001e0e:	499d      	ldr	r1, [pc, #628]	; (8002084 <ProcessUserInput+0x3a0>)
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	f001 fa01 	bl	8003218 <replacestr>
//  replacestr(buffer, "controller", "c");
  replacestr(buffer, "chan", "c");
 8001e16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e1a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e1e:	4a98      	ldr	r2, [pc, #608]	; (8002080 <ProcessUserInput+0x39c>)
 8001e20:	4999      	ldr	r1, [pc, #612]	; (8002088 <ProcessUserInput+0x3a4>)
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	f001 f9f8 	bl	8003218 <replacestr>
//  replacestr(buffer, "con", "c");
  replacestr(buffer, "address", "a");
 8001e28:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e30:	4a96      	ldr	r2, [pc, #600]	; (800208c <ProcessUserInput+0x3a8>)
 8001e32:	4997      	ldr	r1, [pc, #604]	; (8002090 <ProcessUserInput+0x3ac>)
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	f001 f9ef 	bl	8003218 <replacestr>
  replacestr(buffer, "kp", "p");
 8001e3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e3e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e42:	4a94      	ldr	r2, [pc, #592]	; (8002094 <ProcessUserInput+0x3b0>)
 8001e44:	4994      	ldr	r1, [pc, #592]	; (8002098 <ProcessUserInput+0x3b4>)
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	f001 f9e6 	bl	8003218 <replacestr>
  replacestr(buffer, "kd", "d");
 8001e4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e54:	4a91      	ldr	r2, [pc, #580]	; (800209c <ProcessUserInput+0x3b8>)
 8001e56:	4992      	ldr	r1, [pc, #584]	; (80020a0 <ProcessUserInput+0x3bc>)
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	f001 f9dd 	bl	8003218 <replacestr>
  replacestr(buffer, "ki", "i");
 8001e5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e62:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e66:	4a8f      	ldr	r2, [pc, #572]	; (80020a4 <ProcessUserInput+0x3c0>)
 8001e68:	498f      	ldr	r1, [pc, #572]	; (80020a8 <ProcessUserInput+0x3c4>)
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	f001 f9d4 	bl	8003218 <replacestr>
  replacestr(buffer, "li", "l");
 8001e70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e78:	4a8c      	ldr	r2, [pc, #560]	; (80020ac <ProcessUserInput+0x3c8>)
 8001e7a:	498d      	ldr	r1, [pc, #564]	; (80020b0 <ProcessUserInput+0x3cc>)
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	f001 f9cb 	bl	8003218 <replacestr>
  replacestr(buffer, "target", "t");
 8001e82:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e86:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e8a:	4a8a      	ldr	r2, [pc, #552]	; (80020b4 <ProcessUserInput+0x3d0>)
 8001e8c:	498a      	ldr	r1, [pc, #552]	; (80020b8 <ProcessUserInput+0x3d4>)
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	f001 f9c2 	bl	8003218 <replacestr>
  replacestr(buffer, "temperature", "t");
 8001e94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e9c:	4a85      	ldr	r2, [pc, #532]	; (80020b4 <ProcessUserInput+0x3d0>)
 8001e9e:	4987      	ldr	r1, [pc, #540]	; (80020bc <ProcessUserInput+0x3d8>)
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	f001 f9b9 	bl	8003218 <replacestr>
  replacestr(buffer, "temp", "t");
 8001ea6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001eaa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001eae:	4a81      	ldr	r2, [pc, #516]	; (80020b4 <ProcessUserInput+0x3d0>)
 8001eb0:	4983      	ldr	r1, [pc, #524]	; (80020c0 <ProcessUserInput+0x3dc>)
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	f001 f9b0 	bl	8003218 <replacestr>
  replacestr(buffer, "frequency", "f");
 8001eb8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ebc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ec0:	4a80      	ldr	r2, [pc, #512]	; (80020c4 <ProcessUserInput+0x3e0>)
 8001ec2:	4981      	ldr	r1, [pc, #516]	; (80020c8 <ProcessUserInput+0x3e4>)
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	f001 f9a7 	bl	8003218 <replacestr>
  replacestr(buffer, "freq", "f");
 8001eca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ece:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ed2:	4a7c      	ldr	r2, [pc, #496]	; (80020c4 <ProcessUserInput+0x3e0>)
 8001ed4:	497d      	ldr	r1, [pc, #500]	; (80020cc <ProcessUserInput+0x3e8>)
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	f001 f99e 	bl	8003218 <replacestr>
  replacestr(buffer, "enable", "n");
 8001edc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ee0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ee4:	4a7a      	ldr	r2, [pc, #488]	; (80020d0 <ProcessUserInput+0x3ec>)
 8001ee6:	497b      	ldr	r1, [pc, #492]	; (80020d4 <ProcessUserInput+0x3f0>)
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	f001 f995 	bl	8003218 <replacestr>
  replacestr(buffer, "disable", "f");
 8001eee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ef2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ef6:	4a73      	ldr	r2, [pc, #460]	; (80020c4 <ProcessUserInput+0x3e0>)
 8001ef8:	4977      	ldr	r1, [pc, #476]	; (80020d8 <ProcessUserInput+0x3f4>)
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	f001 f98c 	bl	8003218 <replacestr>
  replacestr(buffer, "save", "s");
 8001f00:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f04:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f08:	4a74      	ldr	r2, [pc, #464]	; (80020dc <ProcessUserInput+0x3f8>)
 8001f0a:	4975      	ldr	r1, [pc, #468]	; (80020e0 <ProcessUserInput+0x3fc>)
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	f001 f983 	bl	8003218 <replacestr>
  replacestr(buffer, "load", "l");
 8001f12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f16:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f1a:	4a64      	ldr	r2, [pc, #400]	; (80020ac <ProcessUserInput+0x3c8>)
 8001f1c:	4971      	ldr	r1, [pc, #452]	; (80020e4 <ProcessUserInput+0x400>)
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	f001 f97a 	bl	8003218 <replacestr>
  replacestr(buffer, "history", "h");
 8001f24:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f2c:	4a6e      	ldr	r2, [pc, #440]	; (80020e8 <ProcessUserInput+0x404>)
 8001f2e:	496f      	ldr	r1, [pc, #444]	; (80020ec <ProcessUserInput+0x408>)
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	f001 f971 	bl	8003218 <replacestr>
  replacestr(buffer, "update", "u");
 8001f36:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f3e:	4a6c      	ldr	r2, [pc, #432]	; (80020f0 <ProcessUserInput+0x40c>)
 8001f40:	496c      	ldr	r1, [pc, #432]	; (80020f4 <ProcessUserInput+0x410>)
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	f001 f968 	bl	8003218 <replacestr>
  replacestr(buffer, "raw", "r");
 8001f48:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f50:	4a69      	ldr	r2, [pc, #420]	; (80020f8 <ProcessUserInput+0x414>)
 8001f52:	496a      	ldr	r1, [pc, #424]	; (80020fc <ProcessUserInput+0x418>)
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	f001 f95f 	bl	8003218 <replacestr>
  replacestr(buffer, "bounce", "b");
 8001f5a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f62:	4a67      	ldr	r2, [pc, #412]	; (8002100 <ProcessUserInput+0x41c>)
 8001f64:	4967      	ldr	r1, [pc, #412]	; (8002104 <ProcessUserInput+0x420>)
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	f001 f956 	bl	8003218 <replacestr>
  replacestr(buffer, "wipe", "w");
 8001f6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f74:	4a64      	ldr	r2, [pc, #400]	; (8002108 <ProcessUserInput+0x424>)
 8001f76:	4965      	ldr	r1, [pc, #404]	; (800210c <ProcessUserInput+0x428>)
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	f001 f94d 	bl	8003218 <replacestr>
  replacestr(buffer, "voltage", "v");
 8001f7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f86:	4a62      	ldr	r2, [pc, #392]	; (8002110 <ProcessUserInput+0x42c>)
 8001f88:	4962      	ldr	r1, [pc, #392]	; (8002114 <ProcessUserInput+0x430>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	f001 f944 	bl	8003218 <replacestr>


//  printf("New String: %s\n", buffer);

  if ((strcmp((char*) buffer, "?") == 0) || (strcmp((char*) buffer, "help") == 0))
 8001f90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f98:	495f      	ldr	r1, [pc, #380]	; (8002118 <ProcessUserInput+0x434>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	f7fe f928 	bl	80001f0 <strcmp>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <ProcessUserInput+0x2da>
 8001fa6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001faa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fae:	495b      	ldr	r1, [pc, #364]	; (800211c <ProcessUserInput+0x438>)
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	f7fe f91d 	bl	80001f0 <strcmp>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f040 80e3 	bne.w	8002184 <ProcessUserInput+0x4a0>
  {
    USBSendString("\nLFDI TCB Firmware v1.2\n");
 8001fbe:	4858      	ldr	r0, [pc, #352]	; (8002120 <ProcessUserInput+0x43c>)
 8001fc0:	f001 f8c6 	bl	8003150 <USBSendString>
    USBSendString("Commands can be upper or lower case. Variables can be set with an equals sign or space or nothing.\n");
 8001fc4:	4857      	ldr	r0, [pc, #348]	; (8002124 <ProcessUserInput+0x440>)
 8001fc6:	f001 f8c3 	bl	8003150 <USBSendString>
    USBSendString("\"channel=1\", \"channel 1\", \"channel1\", \"c1\" are all treated the same.\n");
 8001fca:	4857      	ldr	r0, [pc, #348]	; (8002128 <ProcessUserInput+0x444>)
 8001fcc:	f001 f8c0 	bl	8003150 <USBSendString>
    USBSendString("\n");
 8001fd0:	4856      	ldr	r0, [pc, #344]	; (800212c <ProcessUserInput+0x448>)
 8001fd2:	f001 f8bd 	bl	8003150 <USBSendString>
//    USBSendString("Controller = n  -- chooses which controller to configure\n");
    USBSendString("Channel = n     -- chooses which channel to configure\n");
 8001fd6:	4856      	ldr	r0, [pc, #344]	; (8002130 <ProcessUserInput+0x44c>)
 8001fd8:	f001 f8ba 	bl	8003150 <USBSendString>
    USBSendString("Address = nn    -- sets the address of the temperature sensor (00, 01, 10, or 11)\n");
 8001fdc:	4855      	ldr	r0, [pc, #340]	; (8002134 <ProcessUserInput+0x450>)
 8001fde:	f001 f8b7 	bl	8003150 <USBSendString>
    USBSendString("kP = n.nn       -- sets the proportional gain\n");
 8001fe2:	4855      	ldr	r0, [pc, #340]	; (8002138 <ProcessUserInput+0x454>)
 8001fe4:	f001 f8b4 	bl	8003150 <USBSendString>
    USBSendString("kD = n.nn       -- sets the derivative gain\n");
 8001fe8:	4854      	ldr	r0, [pc, #336]	; (800213c <ProcessUserInput+0x458>)
 8001fea:	f001 f8b1 	bl	8003150 <USBSendString>
    USBSendString("kI = n.nn       -- sets the integral gain\n");
 8001fee:	4854      	ldr	r0, [pc, #336]	; (8002140 <ProcessUserInput+0x45c>)
 8001ff0:	f001 f8ae 	bl	8003150 <USBSendString>
    USBSendString("Li = n.nn       -- sets the integral gain limit\n");
 8001ff4:	4853      	ldr	r0, [pc, #332]	; (8002144 <ProcessUserInput+0x460>)
 8001ff6:	f001 f8ab 	bl	8003150 <USBSendString>
    USBSendString("History = nn    -- sets the number of points used in the integral (1-255)\n");
 8001ffa:	4853      	ldr	r0, [pc, #332]	; (8002148 <ProcessUserInput+0x464>)
 8001ffc:	f001 f8a8 	bl	8003150 <USBSendString>
    USBSendString("Target = n      -- sets the target temperature\n");
 8002000:	4852      	ldr	r0, [pc, #328]	; (800214c <ProcessUserInput+0x468>)
 8002002:	f001 f8a5 	bl	8003150 <USBSendString>
    USBSendString("Temperature = n -- sets the target temperature\n");
 8002006:	4852      	ldr	r0, [pc, #328]	; (8002150 <ProcessUserInput+0x46c>)
 8002008:	f001 f8a2 	bl	8003150 <USBSendString>
    USBSendString("Freq = n        -- sets the PWM frequency (40 = 1 second)\n");
 800200c:	4851      	ldr	r0, [pc, #324]	; (8002154 <ProcessUserInput+0x470>)
 800200e:	f001 f89f 	bl	8003150 <USBSendString>
    USBSendString("Enable          -- starts the temperature control loop\n");
 8002012:	4851      	ldr	r0, [pc, #324]	; (8002158 <ProcessUserInput+0x474>)
 8002014:	f001 f89c 	bl	8003150 <USBSendString>
    USBSendString("Disable         -- stops the temperature control loop\n");
 8002018:	4850      	ldr	r0, [pc, #320]	; (800215c <ProcessUserInput+0x478>)
 800201a:	f001 f899 	bl	8003150 <USBSendString>
    USBSendString("Update          -- shows the status of all of the controllers\n");
 800201e:	4850      	ldr	r0, [pc, #320]	; (8002160 <ProcessUserInput+0x47c>)
 8002020:	f001 f896 	bl	8003150 <USBSendString>
    USBSendString("Raw             -- shows an easily parsable version of Update\n");
 8002024:	484f      	ldr	r0, [pc, #316]	; (8002164 <ProcessUserInput+0x480>)
 8002026:	f001 f893 	bl	8003150 <USBSendString>
    USBSendString("Wipe            -- wipes the existing configuration and load new defaults\n");
 800202a:	484f      	ldr	r0, [pc, #316]	; (8002168 <ProcessUserInput+0x484>)
 800202c:	f001 f890 	bl	8003150 <USBSendString>
    USBSendString("Bounce          -- performs a power-cycle / reboot on the system\n");
 8002030:	484e      	ldr	r0, [pc, #312]	; (800216c <ProcessUserInput+0x488>)
 8002032:	f001 f88d 	bl	8003150 <USBSendString>
    USBSendString("Load            -- reloads the previously saved values (automatic at power-on)\n");
 8002036:	484e      	ldr	r0, [pc, #312]	; (8002170 <ProcessUserInput+0x48c>)
 8002038:	f001 f88a 	bl	8003150 <USBSendString>
    USBSendString("Save            -- saves the currently configured values\n");
 800203c:	484d      	ldr	r0, [pc, #308]	; (8002174 <ProcessUserInput+0x490>)
 800203e:	f001 f887 	bl	8003150 <USBSendString>
    USBSendString("Voltage         -- Set the Peak to Peak Voltage to output on DAC Channel 0\n");
 8002042:	484d      	ldr	r0, [pc, #308]	; (8002178 <ProcessUserInput+0x494>)
 8002044:	f001 f884 	bl	8003150 <USBSendString>
    USBSendString("\n");
 8002048:	4838      	ldr	r0, [pc, #224]	; (800212c <ProcessUserInput+0x448>)
 800204a:	f001 f881 	bl	8003150 <USBSendString>
    if (UI_Controller == 9)
 800204e:	4b4b      	ldr	r3, [pc, #300]	; (800217c <ProcessUserInput+0x498>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b09      	cmp	r3, #9
 8002054:	d104      	bne.n	8002060 <ProcessUserInput+0x37c>
      USBSendString("No controller selected.\n");
 8002056:	484a      	ldr	r0, [pc, #296]	; (8002180 <ProcessUserInput+0x49c>)
 8002058:	f001 f87a 	bl	8003150 <USBSendString>
      ShowEffort(&TCB.Controller);
      USBSendString("\n");
      */
      ShowAll(Controller, true);
    }
    return;
 800205c:	f000 bc61 	b.w	8002922 <ProcessUserInput+0xc3e>
      ShowAll(Controller, true);
 8002060:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002064:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002068:	2101      	movs	r1, #1
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	f000 fd2e 	bl	8002acc <ShowAll>
    return;
 8002070:	f000 bc57 	b.w	8002922 <ProcessUserInput+0xc3e>
 8002074:	08013d28 	.word	0x08013d28
 8002078:	08013d2c 	.word	0x08013d2c
 800207c:	08013d30 	.word	0x08013d30
 8002080:	08013d34 	.word	0x08013d34
 8002084:	08013d38 	.word	0x08013d38
 8002088:	08013d40 	.word	0x08013d40
 800208c:	08013d48 	.word	0x08013d48
 8002090:	08013d4c 	.word	0x08013d4c
 8002094:	08013d54 	.word	0x08013d54
 8002098:	08013d58 	.word	0x08013d58
 800209c:	08013d5c 	.word	0x08013d5c
 80020a0:	08013d60 	.word	0x08013d60
 80020a4:	08013d64 	.word	0x08013d64
 80020a8:	08013d68 	.word	0x08013d68
 80020ac:	08013d6c 	.word	0x08013d6c
 80020b0:	08013d70 	.word	0x08013d70
 80020b4:	08013d74 	.word	0x08013d74
 80020b8:	08013d78 	.word	0x08013d78
 80020bc:	08013d80 	.word	0x08013d80
 80020c0:	08013d8c 	.word	0x08013d8c
 80020c4:	08013d94 	.word	0x08013d94
 80020c8:	08013d98 	.word	0x08013d98
 80020cc:	08013da4 	.word	0x08013da4
 80020d0:	08013dac 	.word	0x08013dac
 80020d4:	08013db0 	.word	0x08013db0
 80020d8:	08013db8 	.word	0x08013db8
 80020dc:	08013dc0 	.word	0x08013dc0
 80020e0:	08013dc4 	.word	0x08013dc4
 80020e4:	08013dcc 	.word	0x08013dcc
 80020e8:	08013dd4 	.word	0x08013dd4
 80020ec:	08013dd8 	.word	0x08013dd8
 80020f0:	08013de0 	.word	0x08013de0
 80020f4:	08013de4 	.word	0x08013de4
 80020f8:	08013dec 	.word	0x08013dec
 80020fc:	08013df0 	.word	0x08013df0
 8002100:	08013df4 	.word	0x08013df4
 8002104:	08013df8 	.word	0x08013df8
 8002108:	08013e00 	.word	0x08013e00
 800210c:	08013e04 	.word	0x08013e04
 8002110:	08013e0c 	.word	0x08013e0c
 8002114:	08013e10 	.word	0x08013e10
 8002118:	08013e18 	.word	0x08013e18
 800211c:	08013e1c 	.word	0x08013e1c
 8002120:	08013e24 	.word	0x08013e24
 8002124:	08013e40 	.word	0x08013e40
 8002128:	08013ea4 	.word	0x08013ea4
 800212c:	08013eec 	.word	0x08013eec
 8002130:	08013ef0 	.word	0x08013ef0
 8002134:	08013f28 	.word	0x08013f28
 8002138:	08013f7c 	.word	0x08013f7c
 800213c:	08013fac 	.word	0x08013fac
 8002140:	08013fdc 	.word	0x08013fdc
 8002144:	08014008 	.word	0x08014008
 8002148:	0801403c 	.word	0x0801403c
 800214c:	08014088 	.word	0x08014088
 8002150:	080140b8 	.word	0x080140b8
 8002154:	080140e8 	.word	0x080140e8
 8002158:	08014124 	.word	0x08014124
 800215c:	0801415c 	.word	0x0801415c
 8002160:	08014194 	.word	0x08014194
 8002164:	080141d4 	.word	0x080141d4
 8002168:	08014214 	.word	0x08014214
 800216c:	08014260 	.word	0x08014260
 8002170:	080142a4 	.word	0x080142a4
 8002174:	080142f4 	.word	0x080142f4
 8002178:	08014330 	.word	0x08014330
 800217c:	2000000c 	.word	0x2000000c
 8002180:	0801437c 	.word	0x0801437c
  }

  //Print the Status all the Controllers
  if ((strcmp((char*) buffer, "u") == 0) || (strcmp((char*) buffer, "/") == 0))
 8002184:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002188:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800218c:	49c1      	ldr	r1, [pc, #772]	; (8002494 <ProcessUserInput+0x7b0>)
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	f7fe f82e 	bl	80001f0 <strcmp>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <ProcessUserInput+0x4cc>
 800219a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800219e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021a2:	49bd      	ldr	r1, [pc, #756]	; (8002498 <ProcessUserInput+0x7b4>)
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	f7fe f823 	bl	80001f0 <strcmp>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d108      	bne.n	80021c2 <ProcessUserInput+0x4de>
  {
    ShowAll(Controller, true);
 80021b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021b8:	2101      	movs	r1, #1
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	f000 fc86 	bl	8002acc <ShowAll>
    return;
 80021c0:	e3af      	b.n	8002922 <ProcessUserInput+0xc3e>
  }
  //Print the Status all the Controllers in non readable format
  if (strcmp((char*) buffer, "r") == 0)
 80021c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021ca:	49b4      	ldr	r1, [pc, #720]	; (800249c <ProcessUserInput+0x7b8>)
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	f7fe f80f 	bl	80001f0 <strcmp>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d108      	bne.n	80021ea <ProcessUserInput+0x506>
  {
    ShowAll(Controller, false);
 80021d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021e0:	2100      	movs	r1, #0
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	f000 fc72 	bl	8002acc <ShowAll>
    return;
 80021e8:	e39b      	b.n	8002922 <ProcessUserInput+0xc3e>
  }
  //Save the Configuration of a controller
  if (strcmp((char*) buffer, "s") == 0)
 80021ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021ee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021f2:	49ab      	ldr	r1, [pc, #684]	; (80024a0 <ProcessUserInput+0x7bc>)
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	f7fd fffb 	bl	80001f0 <strcmp>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d103      	bne.n	8002208 <ProcessUserInput+0x524>
  {

    USBSendString("Cannot Save, No EEPROM.\n");
 8002200:	48a8      	ldr	r0, [pc, #672]	; (80024a4 <ProcessUserInput+0x7c0>)
 8002202:	f000 ffa5 	bl	8003150 <USBSendString>
    return;
 8002206:	e38c      	b.n	8002922 <ProcessUserInput+0xc3e>
  }

  if (strcmp((char*) buffer, "l") == 0)
 8002208:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800220c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002210:	49a5      	ldr	r1, [pc, #660]	; (80024a8 <ProcessUserInput+0x7c4>)
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	f7fd ffec 	bl	80001f0 <strcmp>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d103      	bne.n	8002226 <ProcessUserInput+0x542>
  {
    USBSendString("Cannot load Configuration, No EEPROM.\n");
 800221e:	48a3      	ldr	r0, [pc, #652]	; (80024ac <ProcessUserInput+0x7c8>)
 8002220:	f000 ff96 	bl	8003150 <USBSendString>
    return;
 8002224:	e37d      	b.n	8002922 <ProcessUserInput+0xc3e>
  }

  if (strcmp((char*) buffer, "b") == 0)
 8002226:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800222a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800222e:	49a0      	ldr	r1, [pc, #640]	; (80024b0 <ProcessUserInput+0x7cc>)
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	f7fd ffdd 	bl	80001f0 <strcmp>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <ProcessUserInput+0x55c>
  {
    NVIC_SystemReset();
 800223c:	f7ff fd3c 	bl	8001cb8 <__NVIC_SystemReset>
  }

  if (strcmp((char*) buffer, "w") == 0)
 8002240:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002244:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002248:	499a      	ldr	r1, [pc, #616]	; (80024b4 <ProcessUserInput+0x7d0>)
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	f7fd ffd0 	bl	80001f0 <strcmp>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10a      	bne.n	800226c <ProcessUserInput+0x588>
  {
    Controller_WipeConfig(Controller);
 8002256:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800225a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	f000 ff18 	bl	8003094 <Controller_WipeConfig>
    USBSendString("Configuration wiped.\n");
 8002264:	4894      	ldr	r0, [pc, #592]	; (80024b8 <ProcessUserInput+0x7d4>)
 8002266:	f000 ff73 	bl	8003150 <USBSendString>
    return;
 800226a:	e35a      	b.n	8002922 <ProcessUserInput+0xc3e>
  }

  if ((strcmp((char*) buffer, "1") == 0) || (strcmp((char*) buffer, "c1") == 0))
 800226c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002270:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002274:	4991      	ldr	r1, [pc, #580]	; (80024bc <ProcessUserInput+0x7d8>)
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	f7fd ffba 	bl	80001f0 <strcmp>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <ProcessUserInput+0x5b4>
 8002282:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002286:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800228a:	498d      	ldr	r1, [pc, #564]	; (80024c0 <ProcessUserInput+0x7dc>)
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	f7fd ffaf 	bl	80001f0 <strcmp>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <ProcessUserInput+0x5ca>
  {
    UI_Controller = 0;
 8002298:	4b8a      	ldr	r3, [pc, #552]	; (80024c4 <ProcessUserInput+0x7e0>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 800229e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	f000 fb46 	bl	8002938 <ShowControllerConfig>
    return;
 80022ac:	e339      	b.n	8002922 <ProcessUserInput+0xc3e>
  }

  if ((strcmp((char*) buffer, "2") == 0) || (strcmp((char*) buffer, "c2") == 0))
 80022ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022b2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022b6:	4984      	ldr	r1, [pc, #528]	; (80024c8 <ProcessUserInput+0x7e4>)
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	f7fd ff99 	bl	80001f0 <strcmp>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <ProcessUserInput+0x5f6>
 80022c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022cc:	497f      	ldr	r1, [pc, #508]	; (80024cc <ProcessUserInput+0x7e8>)
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	f7fd ff8e 	bl	80001f0 <strcmp>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10a      	bne.n	80022f0 <ProcessUserInput+0x60c>
  {
    UI_Controller = 1;
 80022da:	4b7a      	ldr	r3, [pc, #488]	; (80024c4 <ProcessUserInput+0x7e0>)
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 80022e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	f000 fb25 	bl	8002938 <ShowControllerConfig>
    return;
 80022ee:	e318      	b.n	8002922 <ProcessUserInput+0xc3e>
  }

  if ((strcmp((char*) buffer, "3") == 0) || (strcmp((char*) buffer, "c3") == 0))
 80022f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022f8:	4975      	ldr	r1, [pc, #468]	; (80024d0 <ProcessUserInput+0x7ec>)
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	f7fd ff78 	bl	80001f0 <strcmp>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <ProcessUserInput+0x638>
 8002306:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800230a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800230e:	4971      	ldr	r1, [pc, #452]	; (80024d4 <ProcessUserInput+0x7f0>)
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	f7fd ff6d 	bl	80001f0 <strcmp>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10a      	bne.n	8002332 <ProcessUserInput+0x64e>
  {
    UI_Controller = 2;
 800231c:	4b69      	ldr	r3, [pc, #420]	; (80024c4 <ProcessUserInput+0x7e0>)
 800231e:	2202      	movs	r2, #2
 8002320:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 8002322:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002326:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	f000 fb04 	bl	8002938 <ShowControllerConfig>
    return;
 8002330:	e2f7      	b.n	8002922 <ProcessUserInput+0xc3e>
  }

  if ((strcmp((char*) buffer, "4") == 0) || (strcmp((char*) buffer, "c4") == 0))
 8002332:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002336:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800233a:	4967      	ldr	r1, [pc, #412]	; (80024d8 <ProcessUserInput+0x7f4>)
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	f7fd ff57 	bl	80001f0 <strcmp>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <ProcessUserInput+0x67a>
 8002348:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800234c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002350:	4962      	ldr	r1, [pc, #392]	; (80024dc <ProcessUserInput+0x7f8>)
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	f7fd ff4c 	bl	80001f0 <strcmp>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <ProcessUserInput+0x690>
  {
    UI_Controller = 3;
 800235e:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <ProcessUserInput+0x7e0>)
 8002360:	2203      	movs	r2, #3
 8002362:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(Controller);
 8002364:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002368:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	f000 fae3 	bl	8002938 <ShowControllerConfig>
    return;
 8002372:	e2d6      	b.n	8002922 <ProcessUserInput+0xc3e>
  }

  if (UI_Controller == 9)
 8002374:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <ProcessUserInput+0x7e0>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b09      	cmp	r3, #9
 800237a:	d103      	bne.n	8002384 <ProcessUserInput+0x6a0>
  {
    USBSendString("No controller selected.\n");
 800237c:	4858      	ldr	r0, [pc, #352]	; (80024e0 <ProcessUserInput+0x7fc>)
 800237e:	f000 fee7 	bl	8003150 <USBSendString>
    return;
 8002382:	e2ce      	b.n	8002922 <ProcessUserInput+0xc3e>
  }


  if (strcmp((char*) buffer, "e") == 0)
 8002384:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002388:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800238c:	4955      	ldr	r1, [pc, #340]	; (80024e4 <ProcessUserInput+0x800>)
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	f7fd ff2e 	bl	80001f0 <strcmp>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10b      	bne.n	80023b2 <ProcessUserInput+0x6ce>
  {
    USBSendString("Controller enabled.\n");
 800239a:	4853      	ldr	r0, [pc, #332]	; (80024e8 <ProcessUserInput+0x804>)
 800239c:	f000 fed8 	bl	8003150 <USBSendString>
    Controller->PID.Config.Enabled = true;
 80023a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80023a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
    return;
 80023b0:	e2b7      	b.n	8002922 <ProcessUserInput+0xc3e>
  }

  if (strcmp((char*) buffer, "d") == 0)
 80023b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80023b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023ba:	494c      	ldr	r1, [pc, #304]	; (80024ec <ProcessUserInput+0x808>)
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	f7fd ff17 	bl	80001f0 <strcmp>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10b      	bne.n	80023e0 <ProcessUserInput+0x6fc>
  {
    USBSendString("Controller disabled.\n");
 80023c8:	4849      	ldr	r0, [pc, #292]	; (80024f0 <ProcessUserInput+0x80c>)
 80023ca:	f000 fec1 	bl	8003150 <USBSendString>
    Controller->PID.Config.Enabled = false;
 80023ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80023d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
    return;
 80023de:	e2a0      	b.n	8002922 <ProcessUserInput+0xc3e>
  }

  if (sscanf((char*) buffer, "%c%f", &c, &f) == 2)
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	f107 0217 	add.w	r2, r7, #23
 80023e8:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80023ec:	f5a1 7088 	sub.w	r0, r1, #272	; 0x110
 80023f0:	4940      	ldr	r1, [pc, #256]	; (80024f4 <ProcessUserInput+0x810>)
 80023f2:	6800      	ldr	r0, [r0, #0]
 80023f4:	f00d fa6c 	bl	800f8d0 <siscanf>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	f040 828a 	bne.w	8002914 <ProcessUserInput+0xc30>
  {
    u = (uint8_t) f;
 8002400:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002408:	edd3 7a00 	vldr	s15, [r3]
 800240c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002410:	edc7 7a00 	vstr	s15, [r7]
 8002414:	783b      	ldrb	r3, [r7, #0]
 8002416:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
    switch (c)
 800241a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800241e:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	3b61      	subs	r3, #97	; 0x61
 8002426:	2b15      	cmp	r3, #21
 8002428:	f200 8276 	bhi.w	8002918 <ProcessUserInput+0xc34>
 800242c:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <ProcessUserInput+0x750>)
 800242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002432:	bf00      	nop
 8002434:	080024fd 	.word	0x080024fd
 8002438:	08002919 	.word	0x08002919
 800243c:	0800248d 	.word	0x0800248d
 8002440:	0800266d 	.word	0x0800266d
 8002444:	08002919 	.word	0x08002919
 8002448:	080026d5 	.word	0x080026d5
 800244c:	08002919 	.word	0x08002919
 8002450:	080027ed 	.word	0x080027ed
 8002454:	08002605 	.word	0x08002605
 8002458:	08002919 	.word	0x08002919
 800245c:	08002919 	.word	0x08002919
 8002460:	08002785 	.word	0x08002785
 8002464:	08002919 	.word	0x08002919
 8002468:	08002919 	.word	0x08002919
 800246c:	08002919 	.word	0x08002919
 8002470:	0800259d 	.word	0x0800259d
 8002474:	08002919 	.word	0x08002919
 8002478:	08002919 	.word	0x08002919
 800247c:	08002919 	.word	0x08002919
 8002480:	08002865 	.word	0x08002865
 8002484:	08002919 	.word	0x08002919
 8002488:	080028af 	.word	0x080028af
    {
      case 'c':
        // we shouldn't get here if a valid number was used
        USBSendString("Invalid controller number.\n");
 800248c:	481a      	ldr	r0, [pc, #104]	; (80024f8 <ProcessUserInput+0x814>)
 800248e:	f000 fe5f 	bl	8003150 <USBSendString>
        return;
 8002492:	e246      	b.n	8002922 <ProcessUserInput+0xc3e>
 8002494:	08013de0 	.word	0x08013de0
 8002498:	08014398 	.word	0x08014398
 800249c:	08013dec 	.word	0x08013dec
 80024a0:	08013dc0 	.word	0x08013dc0
 80024a4:	0801439c 	.word	0x0801439c
 80024a8:	08013d6c 	.word	0x08013d6c
 80024ac:	080143b8 	.word	0x080143b8
 80024b0:	08013df4 	.word	0x08013df4
 80024b4:	08013e00 	.word	0x08013e00
 80024b8:	080143e0 	.word	0x080143e0
 80024bc:	080143f8 	.word	0x080143f8
 80024c0:	080143fc 	.word	0x080143fc
 80024c4:	2000000c 	.word	0x2000000c
 80024c8:	08014400 	.word	0x08014400
 80024cc:	08014404 	.word	0x08014404
 80024d0:	08014408 	.word	0x08014408
 80024d4:	0801440c 	.word	0x0801440c
 80024d8:	08014410 	.word	0x08014410
 80024dc:	08014414 	.word	0x08014414
 80024e0:	0801437c 	.word	0x0801437c
 80024e4:	08014418 	.word	0x08014418
 80024e8:	0801441c 	.word	0x0801441c
 80024ec:	08013d5c 	.word	0x08013d5c
 80024f0:	08014434 	.word	0x08014434
 80024f4:	0801444c 	.word	0x0801444c
 80024f8:	08014454 	.word	0x08014454
        break;
      case 'a':
        switch (u)
 80024fc:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8002500:	2b0b      	cmp	r3, #11
 8002502:	d847      	bhi.n	8002594 <ProcessUserInput+0x8b0>
 8002504:	a201      	add	r2, pc, #4	; (adr r2, 800250c <ProcessUserInput+0x828>)
 8002506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250a:	bf00      	nop
 800250c:	0800253d 	.word	0x0800253d
 8002510:	08002569 	.word	0x08002569
 8002514:	08002595 	.word	0x08002595
 8002518:	08002595 	.word	0x08002595
 800251c:	08002595 	.word	0x08002595
 8002520:	08002595 	.word	0x08002595
 8002524:	08002595 	.word	0x08002595
 8002528:	08002595 	.word	0x08002595
 800252c:	08002595 	.word	0x08002595
 8002530:	08002595 	.word	0x08002595
 8002534:	08002553 	.word	0x08002553
 8002538:	0800257f 	.word	0x0800257f
        {
          case 0:
            USBSendString("Address set to 0b 10 01 00 0x.\n");
 800253c:	48bb      	ldr	r0, [pc, #748]	; (800282c <ProcessUserInput+0xb48>)
 800253e:	f000 fe07 	bl	8003150 <USBSendString>
            Controller->Sensor.Address = 0b1001000;
 8002542:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002546:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2248      	movs	r2, #72	; 0x48
 800254e:	721a      	strb	r2, [r3, #8]
            return;
 8002550:	e1e7      	b.n	8002922 <ProcessUserInput+0xc3e>
            break;
          case 10:
            USBSendString("Address set to 0b 10 01 01 0x.\n");
 8002552:	48b7      	ldr	r0, [pc, #732]	; (8002830 <ProcessUserInput+0xb4c>)
 8002554:	f000 fdfc 	bl	8003150 <USBSendString>
            Controller->Sensor.Address = 0b1001010;
 8002558:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800255c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	224a      	movs	r2, #74	; 0x4a
 8002564:	721a      	strb	r2, [r3, #8]
            return;
 8002566:	e1dc      	b.n	8002922 <ProcessUserInput+0xc3e>
            break;
          case 1:
            USBSendString("Address set to 0b 10 01 00 1x.\n");
 8002568:	48b2      	ldr	r0, [pc, #712]	; (8002834 <ProcessUserInput+0xb50>)
 800256a:	f000 fdf1 	bl	8003150 <USBSendString>
            Controller->Sensor.Address = 0b1001001;
 800256e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002572:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2249      	movs	r2, #73	; 0x49
 800257a:	721a      	strb	r2, [r3, #8]
            return;
 800257c:	e1d1      	b.n	8002922 <ProcessUserInput+0xc3e>
            break;
          case 11:
            USBSendString("Address set to 0b 10 01 01 1x.\n");
 800257e:	48ae      	ldr	r0, [pc, #696]	; (8002838 <ProcessUserInput+0xb54>)
 8002580:	f000 fde6 	bl	8003150 <USBSendString>
            Controller->Sensor.Address = 0b1001011;
 8002584:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002588:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	224b      	movs	r2, #75	; 0x4b
 8002590:	721a      	strb	r2, [r3, #8]
            return;
 8002592:	e1c6      	b.n	8002922 <ProcessUserInput+0xc3e>
            break;
          default:
            USBSendString("Invalid Address.\n");
 8002594:	48a9      	ldr	r0, [pc, #676]	; (800283c <ProcessUserInput+0xb58>)
 8002596:	f000 fddb 	bl	8003150 <USBSendString>
            return;
 800259a:	e1c2      	b.n	8002922 <ProcessUserInput+0xc3e>
        Controller->Sensor.Configured = false;
        Controller->Sensor.State = 0;
        Controller->PID.IntegratorCount = 0;
        break;
      case 'p':
        if (f < 0)
 800259c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b0:	d503      	bpl.n	80025ba <ProcessUserInput+0x8d6>
          USBSendString("Invalid value.");
 80025b2:	48a3      	ldr	r0, [pc, #652]	; (8002840 <ProcessUserInput+0xb5c>)
 80025b4:	f000 fdcc 	bl	8003150 <USBSendString>
        {
          snprintf(output, 200, "kp set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Kp = f;
        }
        return;
 80025b8:	e1b3      	b.n	8002922 <ProcessUserInput+0xc3e>
          snprintf(output, 200, "kp set to %f.\n", f);
 80025ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd ffdf 	bl	8000588 <__aeabi_f2d>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	f107 0018 	add.w	r0, r7, #24
 80025d2:	e9cd 2300 	strd	r2, r3, [sp]
 80025d6:	4a9b      	ldr	r2, [pc, #620]	; (8002844 <ProcessUserInput+0xb60>)
 80025d8:	21c8      	movs	r1, #200	; 0xc8
 80025da:	f00d f925 	bl	800f828 <sniprintf>
          USBSendString(output);
 80025de:	f107 0318 	add.w	r3, r7, #24
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fdb4 	bl	8003150 <USBSendString>
          Controller->PID.Config.Kp = f;
 80025e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002600:	601a      	str	r2, [r3, #0]
        return;
 8002602:	e18e      	b.n	8002922 <ProcessUserInput+0xc3e>
        break;

      case 'i':
        if (f < 0)
 8002604:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002618:	d503      	bpl.n	8002622 <ProcessUserInput+0x93e>
          USBSendString("Invalid value.");
 800261a:	4889      	ldr	r0, [pc, #548]	; (8002840 <ProcessUserInput+0xb5c>)
 800261c:	f000 fd98 	bl	8003150 <USBSendString>
        {
          snprintf(output, 200, "ki set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Ki = f;
        }
        return;
 8002620:	e17f      	b.n	8002922 <ProcessUserInput+0xc3e>
          snprintf(output, 200, "ki set to %f.\n", f);
 8002622:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7fd ffab 	bl	8000588 <__aeabi_f2d>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	f107 0018 	add.w	r0, r7, #24
 800263a:	e9cd 2300 	strd	r2, r3, [sp]
 800263e:	4a82      	ldr	r2, [pc, #520]	; (8002848 <ProcessUserInput+0xb64>)
 8002640:	21c8      	movs	r1, #200	; 0xc8
 8002642:	f00d f8f1 	bl	800f828 <sniprintf>
          USBSendString(output);
 8002646:	f107 0318 	add.w	r3, r7, #24
 800264a:	4618      	mov	r0, r3
 800264c:	f000 fd80 	bl	8003150 <USBSendString>
          Controller->PID.Config.Ki = f;
 8002650:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800265e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002668:	601a      	str	r2, [r3, #0]
        return;
 800266a:	e15a      	b.n	8002922 <ProcessUserInput+0xc3e>
        break;

      case 'd':
        if (f < 0)
 800266c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002674:	edd3 7a00 	vldr	s15, [r3]
 8002678:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800267c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002680:	d503      	bpl.n	800268a <ProcessUserInput+0x9a6>
          USBSendString("Invalid value.");
 8002682:	486f      	ldr	r0, [pc, #444]	; (8002840 <ProcessUserInput+0xb5c>)
 8002684:	f000 fd64 	bl	8003150 <USBSendString>
        {
          snprintf(output, 200, "kd set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Kd = f;
        }
        return;
 8002688:	e14b      	b.n	8002922 <ProcessUserInput+0xc3e>
          snprintf(output, 200, "kd set to %f.\n", f);
 800268a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800268e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd ff77 	bl	8000588 <__aeabi_f2d>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	f107 0018 	add.w	r0, r7, #24
 80026a2:	e9cd 2300 	strd	r2, r3, [sp]
 80026a6:	4a69      	ldr	r2, [pc, #420]	; (800284c <ProcessUserInput+0xb68>)
 80026a8:	21c8      	movs	r1, #200	; 0xc8
 80026aa:	f00d f8bd 	bl	800f828 <sniprintf>
          USBSendString(output);
 80026ae:	f107 0318 	add.w	r3, r7, #24
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fd4c 	bl	8003150 <USBSendString>
          Controller->PID.Config.Kd = f;
 80026b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80026d0:	601a      	str	r2, [r3, #0]
        return;
 80026d2:	e126      	b.n	8002922 <ProcessUserInput+0xc3e>
        break;

      case 'f':
        if ((f < 0) || (f > 600))
 80026d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e8:	d40c      	bmi.n	8002704 <ProcessUserInput+0xa20>
 80026ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026f2:	edd3 7a00 	vldr	s15, [r3]
 80026f6:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8002850 <ProcessUserInput+0xb6c>
 80026fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002702:	dd03      	ble.n	800270c <ProcessUserInput+0xa28>
          USBSendString("Invalid value.");
 8002704:	484e      	ldr	r0, [pc, #312]	; (8002840 <ProcessUserInput+0xb5c>)
 8002706:	f000 fd23 	bl	8003150 <USBSendString>
        {
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
          USBSendString(output);
          Controller->PID.Config.Frequency = f;
        }
        return;
 800270a:	e10a      	b.n	8002922 <ProcessUserInput+0xc3e>
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
 800270c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd ff36 	bl	8000588 <__aeabi_f2d>
 800271c:	4604      	mov	r4, r0
 800271e:	460d      	mov	r5, r1
 8002720:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002854 <ProcessUserInput+0xb70>
 8002730:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002734:	ee16 0a90 	vmov	r0, s13
 8002738:	f7fd ff26 	bl	8000588 <__aeabi_f2d>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	f107 0018 	add.w	r0, r7, #24
 8002744:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002748:	e9cd 4500 	strd	r4, r5, [sp]
 800274c:	4a42      	ldr	r2, [pc, #264]	; (8002858 <ProcessUserInput+0xb74>)
 800274e:	21c8      	movs	r1, #200	; 0xc8
 8002750:	f00d f86a 	bl	800f828 <sniprintf>
          USBSendString(output);
 8002754:	f107 0318 	add.w	r3, r7, #24
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fcf9 	bl	8003150 <USBSendString>
          Controller->PID.Config.Frequency = f;
 800275e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800276e:	ee17 3a90 	vmov	r3, s15
 8002772:	b29a      	uxth	r2, r3
 8002774:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002778:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f8a3 265e 	strh.w	r2, [r3, #1630]	; 0x65e
        return;
 8002782:	e0ce      	b.n	8002922 <ProcessUserInput+0xc3e>
        break;


      case 'l':
        if (f < 0)
 8002784:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800278c:	edd3 7a00 	vldr	s15, [r3]
 8002790:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002798:	d503      	bpl.n	80027a2 <ProcessUserInput+0xabe>
          USBSendString("Invalid value.");
 800279a:	4829      	ldr	r0, [pc, #164]	; (8002840 <ProcessUserInput+0xb5c>)
 800279c:	f000 fcd8 	bl	8003150 <USBSendString>
        {
          snprintf(output, 200, "Li set to %f.\n", f);
          USBSendString(output);
          Controller->PID.Config.Li = f;
        }
        return;
 80027a0:	e0bf      	b.n	8002922 <ProcessUserInput+0xc3e>
          snprintf(output, 200, "Li set to %f.\n", f);
 80027a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd feeb 	bl	8000588 <__aeabi_f2d>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	f107 0018 	add.w	r0, r7, #24
 80027ba:	e9cd 2300 	strd	r2, r3, [sp]
 80027be:	4a27      	ldr	r2, [pc, #156]	; (800285c <ProcessUserInput+0xb78>)
 80027c0:	21c8      	movs	r1, #200	; 0xc8
 80027c2:	f00d f831 	bl	800f828 <sniprintf>
          USBSendString(output);
 80027c6:	f107 0318 	add.w	r3, r7, #24
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fcc0 	bl	8003150 <USBSendString>
          Controller->PID.Config.Li = f;
 80027d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 80027e8:	601a      	str	r2, [r3, #0]
        return;
 80027ea:	e09a      	b.n	8002922 <ProcessUserInput+0xc3e>
        break;
      case 'h':
        if (u == 0)
 80027ec:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d103      	bne.n	80027fc <ProcessUserInput+0xb18>
          USBSendString("Invalid value.");
 80027f4:	4812      	ldr	r0, [pc, #72]	; (8002840 <ProcessUserInput+0xb5c>)
 80027f6:	f000 fcab 	bl	8003150 <USBSendString>
        {
          snprintf(output, 200, "History set to %u.\n", u);
          USBSendString(output);
          Controller->PID.Config.History = u;
        }
        return;
 80027fa:	e092      	b.n	8002922 <ProcessUserInput+0xc3e>
          snprintf(output, 200, "History set to %u.\n", u);
 80027fc:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8002800:	f107 0018 	add.w	r0, r7, #24
 8002804:	4a16      	ldr	r2, [pc, #88]	; (8002860 <ProcessUserInput+0xb7c>)
 8002806:	21c8      	movs	r1, #200	; 0xc8
 8002808:	f00d f80e 	bl	800f828 <sniprintf>
          USBSendString(output);
 800280c:	f107 0318 	add.w	r3, r7, #24
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fc9d 	bl	8003150 <USBSendString>
          Controller->PID.Config.History = u;
 8002816:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800281a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 8002824:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
        return;
 8002828:	e07b      	b.n	8002922 <ProcessUserInput+0xc3e>
 800282a:	bf00      	nop
 800282c:	08014470 	.word	0x08014470
 8002830:	08014490 	.word	0x08014490
 8002834:	080144b0 	.word	0x080144b0
 8002838:	080144d0 	.word	0x080144d0
 800283c:	080144f0 	.word	0x080144f0
 8002840:	08014504 	.word	0x08014504
 8002844:	08014514 	.word	0x08014514
 8002848:	08014524 	.word	0x08014524
 800284c:	08014534 	.word	0x08014534
 8002850:	44160000 	.word	0x44160000
 8002854:	42200000 	.word	0x42200000
 8002858:	08014544 	.word	0x08014544
 800285c:	08014568 	.word	0x08014568
 8002860:	08014578 	.word	0x08014578
        break;

      case 't':
        snprintf(output, 200, "Target temperature set to %f.\n", f);
 8002864:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe8a 	bl	8000588 <__aeabi_f2d>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	f107 0018 	add.w	r0, r7, #24
 800287c:	e9cd 2300 	strd	r2, r3, [sp]
 8002880:	4a2a      	ldr	r2, [pc, #168]	; (800292c <ProcessUserInput+0xc48>)
 8002882:	21c8      	movs	r1, #200	; 0xc8
 8002884:	f00c ffd0 	bl	800f828 <sniprintf>
        USBSendString(output);
 8002888:	f107 0318 	add.w	r3, r7, #24
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fc5f 	bl	8003150 <USBSendString>
        Controller->PID.Config.TargetP = f;
 8002892:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 80028aa:	601a      	str	r2, [r3, #0]
        return;
 80028ac:	e039      	b.n	8002922 <ProcessUserInput+0xc3e>
        break;

      case 'v':
    	  snprintf(output, 200, "Voltage of DAC Channel 0 set to %f.\n", f);
 80028ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fe65 	bl	8000588 <__aeabi_f2d>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	f107 0018 	add.w	r0, r7, #24
 80028c6:	e9cd 2300 	strd	r2, r3, [sp]
 80028ca:	4a19      	ldr	r2, [pc, #100]	; (8002930 <ProcessUserInput+0xc4c>)
 80028cc:	21c8      	movs	r1, #200	; 0xc8
 80028ce:	f00c ffab 	bl	800f828 <sniprintf>
    	  USBSendString(output);
 80028d2:	f107 0318 	add.w	r3, r7, #24
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fc3a 	bl	8003150 <USBSendString>
    	  //Need to implement Voltage for the Dac Channels
        for (uint8_t i = 0; i < 6; i++)
 80028dc:	2300      	movs	r3, #0
 80028de:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80028e2:	e012      	b.n	800290a <ProcessUserInput+0xc26>
        {
          Set_Voltage_Peak_to_Peak(&TCB->DAC8718, i, &f);
 80028e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 80028f2:	f107 0210 	add.w	r2, r7, #16
 80028f6:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fd6c 	bl	80013d8 <Set_Voltage_Peak_to_Peak>
        for (uint8_t i = 0; i < 6; i++)
 8002900:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002904:	3301      	adds	r3, #1
 8002906:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 800290a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800290e:	2b05      	cmp	r3, #5
 8002910:	d9e8      	bls.n	80028e4 <ProcessUserInput+0xc00>
        }
    	  return;
 8002912:	e006      	b.n	8002922 <ProcessUserInput+0xc3e>
    	  break;

      default:
        break;
    }
  }
 8002914:	bf00      	nop
 8002916:	e000      	b.n	800291a <ProcessUserInput+0xc36>
        break;
 8002918:	bf00      	nop
  USBSendString("Unknown command.\n");
 800291a:	4806      	ldr	r0, [pc, #24]	; (8002934 <ProcessUserInput+0xc50>)
 800291c:	f000 fc18 	bl	8003150 <USBSendString>
  return;
 8002920:	bf00      	nop
}
 8002922:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002926:	46bd      	mov	sp, r7
 8002928:	bdb0      	pop	{r4, r5, r7, pc}
 800292a:	bf00      	nop
 800292c:	0801458c 	.word	0x0801458c
 8002930:	080145ac 	.word	0x080145ac
 8002934:	080145d4 	.word	0x080145d4

08002938 <ShowControllerConfig>:

//Show the Configuration of a Controller
void ShowControllerConfig(struct sController* Controller)
{
 8002938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800293c:	b0d1      	sub	sp, #324	; 0x144
 800293e:	af0c      	add	r7, sp, #48	; 0x30
 8002940:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002944:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002948:	6018      	str	r0, [r3, #0]
  char s1[12];
  char buffer[250];
  FormatTemperature(s1, Controller->PID.Config.TargetP);
 800294a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800294e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fe14 	bl	8000588 <__aeabi_f2d>
 8002960:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002964:	ec41 0b10 	vmov	d0, r0, r1
 8002968:	4618      	mov	r0, r3
 800296a:	f000 fafd 	bl	8002f68 <FormatTemperature>
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 800296e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002972:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	603b      	str	r3, [r7, #0]
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 800297c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002980:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 800298a:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fdfb 	bl	8000588 <__aeabi_f2d>
 8002992:	4604      	mov	r4, r0
 8002994:	460d      	mov	r5, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002996:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800299a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80029a4:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fdee 	bl	8000588 <__aeabi_f2d>
 80029ac:	4680      	mov	r8, r0
 80029ae:	4689      	mov	r9, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80029b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 80029be:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fde1 	bl	8000588 <__aeabi_f2d>
 80029c6:	4682      	mov	sl, r0
 80029c8:	468b      	mov	fp, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80029ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 80029d8:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fdd4 	bl	8000588 <__aeabi_f2d>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80029e4:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80029e8:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80029ec:	6809      	ldr	r1, [r1, #0]
 80029ee:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 80029f2:	460e      	mov	r6, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 80029f4:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80029f8:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80029fc:	6809      	ldr	r1, [r1, #0]
 80029fe:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002a02:	f107 0008 	add.w	r0, r7, #8
 8002a06:	910a      	str	r1, [sp, #40]	; 0x28
 8002a08:	9609      	str	r6, [sp, #36]	; 0x24
 8002a0a:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8002a0e:	9108      	str	r1, [sp, #32]
 8002a10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002a14:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002a18:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002a1c:	e9cd 4500 	strd	r4, r5, [sp]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	4a23      	ldr	r2, [pc, #140]	; (8002ab0 <ShowControllerConfig+0x178>)
 8002a24:	21c8      	movs	r1, #200	; 0xc8
 8002a26:	f00c feff 	bl	800f828 <sniprintf>
  USBSendString(buffer);
 8002a2a:	f107 0308 	add.w	r3, r7, #8
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fb8e 	bl	8003150 <USBSendString>
  switch (Controller->Sensor.Address & 0x03)
 8002a34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	7a1b      	ldrb	r3, [r3, #8]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d81b      	bhi.n	8002a80 <ShowControllerConfig+0x148>
 8002a48:	a201      	add	r2, pc, #4	; (adr r2, 8002a50 <ShowControllerConfig+0x118>)
 8002a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4e:	bf00      	nop
 8002a50:	08002a61 	.word	0x08002a61
 8002a54:	08002a69 	.word	0x08002a69
 8002a58:	08002a71 	.word	0x08002a71
 8002a5c:	08002a79 	.word	0x08002a79
  {
    case 0:
      USBSendString("00");
 8002a60:	4814      	ldr	r0, [pc, #80]	; (8002ab4 <ShowControllerConfig+0x17c>)
 8002a62:	f000 fb75 	bl	8003150 <USBSendString>
      break;
 8002a66:	e00c      	b.n	8002a82 <ShowControllerConfig+0x14a>
    case 1:
      USBSendString("01");
 8002a68:	4813      	ldr	r0, [pc, #76]	; (8002ab8 <ShowControllerConfig+0x180>)
 8002a6a:	f000 fb71 	bl	8003150 <USBSendString>
      break;
 8002a6e:	e008      	b.n	8002a82 <ShowControllerConfig+0x14a>
    case 2:
      USBSendString("10");
 8002a70:	4812      	ldr	r0, [pc, #72]	; (8002abc <ShowControllerConfig+0x184>)
 8002a72:	f000 fb6d 	bl	8003150 <USBSendString>
      break;
 8002a76:	e004      	b.n	8002a82 <ShowControllerConfig+0x14a>
    case 3:
      USBSendString("11");
 8002a78:	4811      	ldr	r0, [pc, #68]	; (8002ac0 <ShowControllerConfig+0x188>)
 8002a7a:	f000 fb69 	bl	8003150 <USBSendString>
      break;
 8002a7e:	e000      	b.n	8002a82 <ShowControllerConfig+0x14a>
    default:
      break;
 8002a80:	bf00      	nop
  }
  if (Controller->PID.Config.Enabled)
 8002a82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <ShowControllerConfig+0x164>
    USBSendString("  ENABLED\n");
 8002a94:	480b      	ldr	r0, [pc, #44]	; (8002ac4 <ShowControllerConfig+0x18c>)
 8002a96:	f000 fb5b 	bl	8003150 <USBSendString>
  else
    USBSendString("  DISABLED\n");
}
 8002a9a:	e002      	b.n	8002aa2 <ShowControllerConfig+0x16a>
    USBSendString("  DISABLED\n");
 8002a9c:	480a      	ldr	r0, [pc, #40]	; (8002ac8 <ShowControllerConfig+0x190>)
 8002a9e:	f000 fb57 	bl	8003150 <USBSendString>
}
 8002aa2:	bf00      	nop
 8002aa4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aae:	bf00      	nop
 8002ab0:	080145e8 	.word	0x080145e8
 8002ab4:	0801464c 	.word	0x0801464c
 8002ab8:	08014650 	.word	0x08014650
 8002abc:	08014654 	.word	0x08014654
 8002ac0:	08014658 	.word	0x08014658
 8002ac4:	0801465c 	.word	0x0801465c
 8002ac8:	08014668 	.word	0x08014668

08002acc <ShowAll>:
//Show the Status of a Controller
//@brief Show the Status of a Controller
//@param Controller The Controller to show
//@param readable If true, show the status in human readable form
void ShowAll(struct sController* Controller, bool readable)
{
 8002acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ad0:	b0b7      	sub	sp, #220	; 0xdc
 8002ad2:	af16      	add	r7, sp, #88	; 0x58
 8002ad4:	6278      	str	r0, [r7, #36]	; 0x24
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint32_t ADCVal = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint8_t i;
    char target[12];
    FormatTemperature(target, Controller->PID.Config.TargetP);
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fd4d 	bl	8000588 <__aeabi_f2d>
 8002aee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002af2:	ec41 0b10 	vmov	d0, r0, r1
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fa36 	bl	8002f68 <FormatTemperature>
    char address[3];
    switch (Controller->Sensor.Address & 0x03)
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	7a1b      	ldrb	r3, [r3, #8]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d833      	bhi.n	8002b70 <ShowAll+0xa4>
 8002b08:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <ShowAll+0x44>)
 8002b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0e:	bf00      	nop
 8002b10:	08002b21 	.word	0x08002b21
 8002b14:	08002b35 	.word	0x08002b35
 8002b18:	08002b49 	.word	0x08002b49
 8002b1c:	08002b5d 	.word	0x08002b5d
    {
      case 0: strcpy(address, "00"); break;
 8002b20:	4aaa      	ldr	r2, [pc, #680]	; (8002dcc <ShowAll+0x300>)
 8002b22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	4611      	mov	r1, r2
 8002b2a:	8019      	strh	r1, [r3, #0]
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	0c12      	lsrs	r2, r2, #16
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	e01e      	b.n	8002b72 <ShowAll+0xa6>
      case 1: strcpy(address, "01"); break;
 8002b34:	4aa6      	ldr	r2, [pc, #664]	; (8002dd0 <ShowAll+0x304>)
 8002b36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	8019      	strh	r1, [r3, #0]
 8002b40:	3302      	adds	r3, #2
 8002b42:	0c12      	lsrs	r2, r2, #16
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e014      	b.n	8002b72 <ShowAll+0xa6>
      case 2: strcpy(address, "10"); break;
 8002b48:	4aa2      	ldr	r2, [pc, #648]	; (8002dd4 <ShowAll+0x308>)
 8002b4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	4611      	mov	r1, r2
 8002b52:	8019      	strh	r1, [r3, #0]
 8002b54:	3302      	adds	r3, #2
 8002b56:	0c12      	lsrs	r2, r2, #16
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	e00a      	b.n	8002b72 <ShowAll+0xa6>
      case 3: strcpy(address, "11"); break;
 8002b5c:	4a9e      	ldr	r2, [pc, #632]	; (8002dd8 <ShowAll+0x30c>)
 8002b5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	4611      	mov	r1, r2
 8002b66:	8019      	strh	r1, [r3, #0]
 8002b68:	3302      	adds	r3, #2
 8002b6a:	0c12      	lsrs	r2, r2, #16
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e000      	b.n	8002b72 <ShowAll+0xa6>
      default: break;
 8002b70:	bf00      	nop
    }
    char enabled[10];
    if (Controller->PID.Config.Enabled)
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d006      	beq.n	8002b8a <ShowAll+0xbe>
      strcpy(enabled, "ENABLED ");
 8002b7c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b80:	4a96      	ldr	r2, [pc, #600]	; (8002ddc <ShowAll+0x310>)
 8002b82:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b84:	c303      	stmia	r3!, {r0, r1}
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e005      	b.n	8002b96 <ShowAll+0xca>
    else
      strcpy(enabled, "DISABLED");
 8002b8a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b8e:	4a94      	ldr	r2, [pc, #592]	; (8002de0 <ShowAll+0x314>)
 8002b90:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b92:	c303      	stmia	r3!, {r0, r1}
 8002b94:	701a      	strb	r2, [r3, #0]
    char average[12], last[12], targetp[12];
    FormatTemperature(average, Controller->Sensor.Average);
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8002b9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ba0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ba4:	eef0 0a67 	vmov.f32	s1, s15
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 f9dd 	bl	8002f68 <FormatTemperature>
    FormatTemperature(last, Controller->Sensor.LastTemperature);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	ed93 7b88 	vldr	d7, [r3, #544]	; 0x220
 8002bb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002bb8:	eeb0 0a47 	vmov.f32	s0, s14
 8002bbc:	eef0 0a67 	vmov.f32	s1, s15
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 f9d1 	bl	8002f68 <FormatTemperature>
    FormatTemperature(targetp, Controller->PID.Config.TargetP);
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fcda 	bl	8000588 <__aeabi_f2d>
 8002bd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bd8:	ec41 0b10 	vmov	d0, r0, r1
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f9c3 	bl	8002f68 <FormatTemperature>

    char sensor[15];
    switch (Controller->Sensor.State)
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d839      	bhi.n	8002c60 <ShowAll+0x194>
 8002bec:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <ShowAll+0x128>)
 8002bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf2:	bf00      	nop
 8002bf4:	08002c09 	.word	0x08002c09
 8002bf8:	08002c19 	.word	0x08002c19
 8002bfc:	08002c2b 	.word	0x08002c2b
 8002c00:	08002c3f 	.word	0x08002c3f
 8002c04:	08002c4d 	.word	0x08002c4d
    {
      case TMP117_STATE_UNKNOWN:      strcpy(sensor, "Unknown");       break;
 8002c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c0c:	4a75      	ldr	r2, [pc, #468]	; (8002de4 <ShowAll+0x318>)
 8002c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c12:	e883 0003 	stmia.w	r3, {r0, r1}
 8002c16:	e024      	b.n	8002c62 <ShowAll+0x196>
      case TMP117_STATE_INITFAILED:   strcpy(sensor, "Config failed"); break;
 8002c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c1c:	4a72      	ldr	r2, [pc, #456]	; (8002de8 <ShowAll+0x31c>)
 8002c1e:	461c      	mov	r4, r3
 8002c20:	4613      	mov	r3, r2
 8002c22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c24:	c407      	stmia	r4!, {r0, r1, r2}
 8002c26:	8023      	strh	r3, [r4, #0]
 8002c28:	e01b      	b.n	8002c62 <ShowAll+0x196>
      case TMP117_STATE_REQUESTNOACK: strcpy(sensor, "Req failed");    break;
 8002c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c2e:	4a6f      	ldr	r2, [pc, #444]	; (8002dec <ShowAll+0x320>)
 8002c30:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c32:	c303      	stmia	r3!, {r0, r1}
 8002c34:	801a      	strh	r2, [r3, #0]
 8002c36:	3302      	adds	r3, #2
 8002c38:	0c12      	lsrs	r2, r2, #16
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	e011      	b.n	8002c62 <ShowAll+0x196>
      case TMP117_STATE_RECEIVEFAIL:  strcpy(sensor, "No response");   break;
 8002c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c42:	4a6b      	ldr	r2, [pc, #428]	; (8002df0 <ShowAll+0x324>)
 8002c44:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c4a:	e00a      	b.n	8002c62 <ShowAll+0x196>
      case TMP117_STATE_VALIDTEMP:    strcpy(sensor, "OK");            break;
 8002c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c50:	4a68      	ldr	r2, [pc, #416]	; (8002df4 <ShowAll+0x328>)
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	4611      	mov	r1, r2
 8002c56:	8019      	strh	r1, [r3, #0]
 8002c58:	3302      	adds	r3, #2
 8002c5a:	0c12      	lsrs	r2, r2, #16
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e000      	b.n	8002c62 <ShowAll+0x196>
      default: break;
 8002c60:	bf00      	nop
    }

    static char buffer[250];

    if (readable)
 8002c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80d2 	beq.w	8002e10 <ShowAll+0x344>
    {
      snprintf(buffer, 200, "C%u: kp=%5.2f   ep=% 7.1f    temp=%8s  freq: %04u  %s\n", Controller->Heater, Controller->PID.Config.Kp, 100 * Controller->PID.Ep, last, Controller->PID.Config.Frequency, enabled);
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	461e      	mov	r6, r3
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fc84 	bl	8000588 <__aeabi_f2d>
 8002c80:	4604      	mov	r4, r0
 8002c82:	460d      	mov	r5, r1
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002e0c <ShowAll+0x340>
 8002c92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c96:	ee17 0a90 	vmov	r0, s15
 8002c9a:	f7fd fc75 	bl	8000588 <__aeabi_f2d>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ca4:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
 8002ca8:	4608      	mov	r0, r1
 8002caa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002cae:	9106      	str	r1, [sp, #24]
 8002cb0:	9005      	str	r0, [sp, #20]
 8002cb2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002cb6:	9104      	str	r1, [sp, #16]
 8002cb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002cbc:	e9cd 4500 	strd	r4, r5, [sp]
 8002cc0:	4633      	mov	r3, r6
 8002cc2:	4a4d      	ldr	r2, [pc, #308]	; (8002df8 <ShowAll+0x32c>)
 8002cc4:	21c8      	movs	r1, #200	; 0xc8
 8002cc6:	484d      	ldr	r0, [pc, #308]	; (8002dfc <ShowAll+0x330>)
 8002cc8:	f00c fdae 	bl	800f828 <sniprintf>
      USBSendString(buffer);
 8002ccc:	484b      	ldr	r0, [pc, #300]	; (8002dfc <ShowAll+0x330>)
 8002cce:	f000 fa3f 	bl	8003150 <USBSendString>
      snprintf(buffer, 200,  "  : kd=%5.2f   ed=% 7.1f     avg=%8s  i2c: %2s\n", Controller->PID.Config.Kd, 100 * Controller->PID.Ed, average, address);
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fc54 	bl	8000588 <__aeabi_f2d>
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	460d      	mov	r5, r1
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002cea:	edd3 7a00 	vldr	s15, [r3]
 8002cee:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002e0c <ShowAll+0x340>
 8002cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cf6:	ee17 0a90 	vmov	r0, s15
 8002cfa:	f7fd fc45 	bl	8000588 <__aeabi_f2d>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002d06:	9105      	str	r1, [sp, #20]
 8002d08:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002d0c:	9104      	str	r1, [sp, #16]
 8002d0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d12:	e9cd 4500 	strd	r4, r5, [sp]
 8002d16:	4a3a      	ldr	r2, [pc, #232]	; (8002e00 <ShowAll+0x334>)
 8002d18:	21c8      	movs	r1, #200	; 0xc8
 8002d1a:	4838      	ldr	r0, [pc, #224]	; (8002dfc <ShowAll+0x330>)
 8002d1c:	f00c fd84 	bl	800f828 <sniprintf>
      USBSendString(buffer);
 8002d20:	4836      	ldr	r0, [pc, #216]	; (8002dfc <ShowAll+0x330>)
 8002d22:	f000 fa15 	bl	8003150 <USBSendString>
      snprintf(buffer, 200,  "  : ki=%5.2f   ei=% 7.1f  target=%8s  history=%3u\n", Controller->PID.Config.Ki, 100 * Controller->PID.Ei, target, Controller->PID.Config.History);
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc2a 	bl	8000588 <__aeabi_f2d>
 8002d34:	4604      	mov	r4, r0
 8002d36:	460d      	mov	r5, r1
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002d3e:	edd3 7a00 	vldr	s15, [r3]
 8002d42:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002e0c <ShowAll+0x340>
 8002d46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d4a:	ee17 0a90 	vmov	r0, s15
 8002d4e:	f7fd fc1b 	bl	8000588 <__aeabi_f2d>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d58:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
 8002d5c:	9105      	str	r1, [sp, #20]
 8002d5e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002d62:	9104      	str	r1, [sp, #16]
 8002d64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d68:	e9cd 4500 	strd	r4, r5, [sp]
 8002d6c:	4a25      	ldr	r2, [pc, #148]	; (8002e04 <ShowAll+0x338>)
 8002d6e:	21c8      	movs	r1, #200	; 0xc8
 8002d70:	4822      	ldr	r0, [pc, #136]	; (8002dfc <ShowAll+0x330>)
 8002d72:	f00c fd59 	bl	800f828 <sniprintf>
      USBSendString(buffer);
 8002d76:	4821      	ldr	r0, [pc, #132]	; (8002dfc <ShowAll+0x330>)
 8002d78:	f000 f9ea 	bl	8003150 <USBSendString>
      snprintf(buffer, 200,  "  : li=%5.2f  eff=% 7.1f  sensor: %s\n\n", Controller->PID.Config.Li, 100 * Controller->PID.Effort, sensor);
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fd fbff 	bl	8000588 <__aeabi_f2d>
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	460d      	mov	r5, r1
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002d94:	edd3 7a00 	vldr	s15, [r3]
 8002d98:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002e0c <ShowAll+0x340>
 8002d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da0:	ee17 0a90 	vmov	r0, s15
 8002da4:	f7fd fbf0 	bl	8000588 <__aeabi_f2d>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002db0:	9104      	str	r1, [sp, #16]
 8002db2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002db6:	e9cd 4500 	strd	r4, r5, [sp]
 8002dba:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <ShowAll+0x33c>)
 8002dbc:	21c8      	movs	r1, #200	; 0xc8
 8002dbe:	480f      	ldr	r0, [pc, #60]	; (8002dfc <ShowAll+0x330>)
 8002dc0:	f00c fd32 	bl	800f828 <sniprintf>
      USBSendString(buffer);
 8002dc4:	480d      	ldr	r0, [pc, #52]	; (8002dfc <ShowAll+0x330>)
 8002dc6:	f000 f9c3 	bl	8003150 <USBSendString>
      USBSendString(buffer);
      //}

//      HAL_Delay(1); // don't butcher our buffer before we're done with it
    }
}
 8002dca:	e0b4      	b.n	8002f36 <ShowAll+0x46a>
 8002dcc:	0801464c 	.word	0x0801464c
 8002dd0:	08014650 	.word	0x08014650
 8002dd4:	08014654 	.word	0x08014654
 8002dd8:	08014658 	.word	0x08014658
 8002ddc:	0801471c 	.word	0x0801471c
 8002de0:	08014728 	.word	0x08014728
 8002de4:	08014734 	.word	0x08014734
 8002de8:	0801473c 	.word	0x0801473c
 8002dec:	0801474c 	.word	0x0801474c
 8002df0:	08014758 	.word	0x08014758
 8002df4:	08014764 	.word	0x08014764
 8002df8:	08014768 	.word	0x08014768
 8002dfc:	20000308 	.word	0x20000308
 8002e00:	080147a0 	.word	0x080147a0
 8002e04:	080147d0 	.word	0x080147d0
 8002e08:	08014804 	.word	0x08014804
 8002e0c:	42c80000 	.word	0x42c80000
        ShowRawHeader();
 8002e10:	f000 f89a 	bl	8002f48 <ShowRawHeader>
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	781b      	ldrb	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002e18:	61fb      	str	r3, [r7, #28]
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002e20:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd fbb0 	bl	8000588 <__aeabi_f2d>
 8002e28:	4680      	mov	r8, r0
 8002e2a:	4689      	mov	r9, r1
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002e32:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd fba7 	bl	8000588 <__aeabi_f2d>
 8002e3a:	4682      	mov	sl, r0
 8002e3c:	468b      	mov	fp, r1
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002e44:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fb9e 	bl	8000588 <__aeabi_f2d>
 8002e4c:	e9c7 0104 	strd	r0, r1, [r7, #16]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002e56:	edd3 7a00 	vldr	s15, [r3]
 8002e5a:	ed1f 7a14 	vldr	s14, [pc, #-80]	; 8002e0c <ShowAll+0x340>
 8002e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002e62:	ee17 0a90 	vmov	r0, s15
 8002e66:	f7fd fb8f 	bl	8000588 <__aeabi_f2d>
 8002e6a:	e9c7 0102 	strd	r0, r1, [r7, #8]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002e74:	edd3 7a00 	vldr	s15, [r3]
 8002e78:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 8002e0c <ShowAll+0x340>
 8002e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002e80:	ee17 0a90 	vmov	r0, s15
 8002e84:	f7fd fb80 	bl	8000588 <__aeabi_f2d>
 8002e88:	e9c7 0100 	strd	r0, r1, [r7]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002e92:	edd3 7a00 	vldr	s15, [r3]
 8002e96:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8002e0c <ShowAll+0x340>
 8002e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002e9e:	ee17 0a90 	vmov	r0, s15
 8002ea2:	f7fd fb71 	bl	8000588 <__aeabi_f2d>
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	460d      	mov	r5, r1
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002eb0:	edd3 7a00 	vldr	s15, [r3]
 8002eb4:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 8002e0c <ShowAll+0x340>
 8002eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002ebc:	ee17 0a90 	vmov	r0, s15
 8002ec0:	f7fd fb62 	bl	8000588 <__aeabi_f2d>
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	f893 365d 	ldrb.w	r3, [r3, #1629]	; 0x65d
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002eca:	461e      	mov	r6, r3
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	f8b3 365e 	ldrh.w	r3, [r3, #1630]	; 0x65e
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ed8:	9315      	str	r3, [sp, #84]	; 0x54
 8002eda:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002ede:	9314      	str	r3, [sp, #80]	; 0x50
 8002ee0:	9213      	str	r2, [sp, #76]	; 0x4c
 8002ee2:	9612      	str	r6, [sp, #72]	; 0x48
 8002ee4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ee8:	9311      	str	r3, [sp, #68]	; 0x44
 8002eea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002eee:	9310      	str	r3, [sp, #64]	; 0x40
 8002ef0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ef4:	930f      	str	r3, [sp, #60]	; 0x3c
 8002ef6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002efa:	930e      	str	r3, [sp, #56]	; 0x38
 8002efc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8002f00:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002f04:	ed97 7b00 	vldr	d7, [r7]
 8002f08:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002f0c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002f10:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002f14:	ed97 7b04 	vldr	d7, [r7, #16]
 8002f18:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002f1c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002f20:	e9cd 8900 	strd	r8, r9, [sp]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	4a06      	ldr	r2, [pc, #24]	; (8002f40 <ShowAll+0x474>)
 8002f28:	21c8      	movs	r1, #200	; 0xc8
 8002f2a:	4806      	ldr	r0, [pc, #24]	; (8002f44 <ShowAll+0x478>)
 8002f2c:	f00c fc7c 	bl	800f828 <sniprintf>
      USBSendString(buffer);
 8002f30:	4804      	ldr	r0, [pc, #16]	; (8002f44 <ShowAll+0x478>)
 8002f32:	f000 f90d 	bl	8003150 <USBSendString>
}
 8002f36:	bf00      	nop
 8002f38:	3784      	adds	r7, #132	; 0x84
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f40:	0801482c 	.word	0x0801482c
 8002f44:	20000308 	.word	0x20000308

08002f48 <ShowRawHeader>:


//Prints the header for the raw data
void ShowRawHeader(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  static char buffer[250];
  snprintf(buffer, 200,  "Chan\t  kp\t  kd\t  ki\t    ep\t    ed\t    ei\t  effort temp\t         average          target        i2c\thist\tfreq\tenabled\t       sensor\n");
 8002f4c:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <ShowRawHeader+0x18>)
 8002f4e:	21c8      	movs	r1, #200	; 0xc8
 8002f50:	4804      	ldr	r0, [pc, #16]	; (8002f64 <ShowRawHeader+0x1c>)
 8002f52:	f00c fc69 	bl	800f828 <sniprintf>
  USBSendString(buffer);
 8002f56:	4803      	ldr	r0, [pc, #12]	; (8002f64 <ShowRawHeader+0x1c>)
 8002f58:	f000 f8fa 	bl	8003150 <USBSendString>
//  HAL_Delay(1); // don't butcher our buffer before we're done with it
}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	0801487c 	.word	0x0801487c
 8002f64:	20000404 	.word	0x20000404

08002f68 <FormatTemperature>:


//Formats the Float to fit into the Temperature Display
void FormatTemperature(char* buffer, double temp)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	ed87 0b00 	vstr	d0, [r7]
  if (temp > -100)
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <FormatTemperature+0x48>)
 8002f7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f7e:	f7fd fdeb 	bl	8000b58 <__aeabi_dcmpgt>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d009      	beq.n	8002f9c <FormatTemperature+0x34>
    snprintf(buffer, 10, "% 7.3fC", temp);
 8002f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f8c:	e9cd 2300 	strd	r2, r3, [sp]
 8002f90:	4a08      	ldr	r2, [pc, #32]	; (8002fb4 <FormatTemperature+0x4c>)
 8002f92:	210a      	movs	r1, #10
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f00c fc47 	bl	800f828 <sniprintf>
  else
    snprintf(buffer, 10, "  error ");
}
 8002f9a:	e004      	b.n	8002fa6 <FormatTemperature+0x3e>
    snprintf(buffer, 10, "  error ");
 8002f9c:	4a06      	ldr	r2, [pc, #24]	; (8002fb8 <FormatTemperature+0x50>)
 8002f9e:	210a      	movs	r1, #10
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f00c fc41 	bl	800f828 <sniprintf>
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	c0590000 	.word	0xc0590000
 8002fb4:	08014900 	.word	0x08014900
 8002fb8:	08014908 	.word	0x08014908

08002fbc <Controller_InitStruct>:
#include "Controller.h"




void Controller_InitStruct(struct sController* s, struct sTMP117 *t,uint8_t heater){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002fc8:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002fcc:	6018      	str	r0, [r3, #0]
 8002fce:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002fd2:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8002fd6:	6019      	str	r1, [r3, #0]
 8002fd8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002fdc:	f2a3 4339 	subw	r3, r3, #1081	; 0x439
 8002fe0:	701a      	strb	r2, [r3, #0]
  struct sPID PID;
  PID_InitStruct(&PID);
 8002fe2:	f107 0310 	add.w	r3, r7, #16
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe fa42 	bl	8001470 <PID_InitStruct>

  s->Heater = heater;
 8002fec:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002ff0:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002ffa:	f2a2 4239 	subw	r2, r2, #1081	; 0x439
 8002ffe:	7812      	ldrb	r2, [r2, #0]
 8003000:	701a      	strb	r2, [r3, #0]
  s->Sensor = *t;
 8003002:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003006:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8003010:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	3308      	adds	r3, #8
 8003018:	4611      	mov	r1, r2
 800301a:	f44f 720a 	mov.w	r2, #552	; 0x228
 800301e:	4618      	mov	r0, r3
 8003020:	f00b fcc4 	bl	800e9ac <memcpy>
  s->PID = PID;
 8003024:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003028:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8003032:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8003036:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800303a:	4611      	mov	r1, r2
 800303c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8003040:	4618      	mov	r0, r3
 8003042:	f00b fcb3 	bl	800e9ac <memcpy>
}
 8003046:	bf00      	nop
 8003048:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <Controller_SetHeater>:

// this doesn't sit in the struct because we want something global that the interrupt can call
//This Has been Edited so that it can be used in the TCB
void Controller_SetHeater(uint8_t heater, bool state)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	460a      	mov	r2, r1
 800305a:	71fb      	strb	r3, [r7, #7]
 800305c:	4613      	mov	r3, r2
 800305e:	71bb      	strb	r3, [r7, #6]
  //For the TCB
  uint16_t Pin;
  GPIO_TypeDef* Port;
  Port = GPIOC;
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <Controller_SetHeater+0x40>)
 8003062:	60fb      	str	r3, [r7, #12]
  Pin = GPIO_PIN_5;
 8003064:	2320      	movs	r3, #32
 8003066:	817b      	strh	r3, [r7, #10]
  
  if (state)
 8003068:	79bb      	ldrb	r3, [r7, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d006      	beq.n	800307c <Controller_SetHeater+0x2c>
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 800306e:	897b      	ldrh	r3, [r7, #10]
 8003070:	2201      	movs	r2, #1
 8003072:	4619      	mov	r1, r3
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f001 fd5b 	bl	8004b30 <HAL_GPIO_WritePin>
  else
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);

}
 800307a:	e005      	b.n	8003088 <Controller_SetHeater+0x38>
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 800307c:	897b      	ldrh	r3, [r7, #10]
 800307e:	2200      	movs	r2, #0
 8003080:	4619      	mov	r1, r3
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f001 fd54 	bl	8004b30 <HAL_GPIO_WritePin>
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40020800 	.word	0x40020800

08003094 <Controller_WipeConfig>:

void Controller_WipeConfig(struct sController* Controller)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  Controller_InitStruct(Controller, &Controller->Sensor, 0);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3308      	adds	r3, #8
 80030a0:	2200      	movs	r2, #0
 80030a2:	4619      	mov	r1, r3
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff ff89 	bl	8002fbc <Controller_InitStruct>
  printf("Cannot Save No EEPROM");
 80030aa:	4803      	ldr	r0, [pc, #12]	; (80030b8 <Controller_WipeConfig+0x24>)
 80030ac:	f00c fb28 	bl	800f700 <iprintf>
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	08014914 	.word	0x08014914

080030bc <Controller_Step>:



void Controller_Step(struct sController* Controller)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint8_t i = Controller->Heater - 1;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	75fb      	strb	r3, [r7, #23]
  float temp, eff;
  if (Controller->PID.Config.Enabled == false)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 80030d2:	f083 0301 	eor.w	r3, r3, #1
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <Controller_Step+0x28>
  {
    HeaterDwell = 100; // duty cycle of 0, disabled
 80030dc:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <Controller_Step+0x8c>)
 80030de:	2264      	movs	r2, #100	; 0x64
 80030e0:	701a      	strb	r2, [r3, #0]
    return;
 80030e2:	e02d      	b.n	8003140 <Controller_Step+0x84>
  }
  if (Controller->Sensor.State != TMP117_STATE_VALIDTEMP)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d003      	beq.n	80030f6 <Controller_Step+0x3a>
  {
    HeaterDwell = 100; // duty cycle of 0, disabled
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <Controller_Step+0x8c>)
 80030f0:	2264      	movs	r2, #100	; 0x64
 80030f2:	701a      	strb	r2, [r3, #0]
    return;
 80030f4:	e024      	b.n	8003140 <Controller_Step+0x84>
  }

  temp = Controller->Sensor.Average;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	f7fd fd92 	bl	8000c28 <__aeabi_d2f>
 8003104:	4603      	mov	r3, r0
 8003106:	613b      	str	r3, [r7, #16]
  eff = PID_CalculateEffort(&Controller->PID, temp);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800310e:	ed97 0a04 	vldr	s0, [r7, #16]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe faea 	bl	80016ec <PID_CalculateEffort>
 8003118:	ed87 0a03 	vstr	s0, [r7, #12]
  // dwell is a value between 0 and 100 which tells the heater controller how many
  // heater ticks the heater spends off. A complete heater cycle is 200 ticks.
  // For a 40% duty cycle (effort), dwell becomes 60, making the heater off for 60,
  // on for 80, and off for another 60. This weird design causes heaters with
  // different effort values to turn on and off at different times.
  HeaterDwell = 100 * (1 - eff);
 800311c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003120:	edd7 7a03 	vldr	s15, [r7, #12]
 8003124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003128:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800314c <Controller_Step+0x90>
 800312c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003134:	edc7 7a00 	vstr	s15, [r7]
 8003138:	783b      	ldrb	r3, [r7, #0]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b02      	ldr	r3, [pc, #8]	; (8003148 <Controller_Step+0x8c>)
 800313e:	701a      	strb	r2, [r3, #0]
}
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000010 	.word	0x20000010
 800314c:	42c80000 	.word	0x42c80000

08003150 <USBSendString>:
   }
   return --i;
}

void USBSendString(char* buf)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  int i, res;
  for (i=0;i<50; i++)
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	e013      	b.n	8003186 <USBSendString+0x36>
  {
    res = CDC_Transmit_FS((uint8_t *)buf, strlen(buf));
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fd f850 	bl	8000204 <strlen>
 8003164:	4603      	mov	r3, r0
 8003166:	b29b      	uxth	r3, r3
 8003168:	4619      	mov	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f00a ff98 	bl	800e0a0 <CDC_Transmit_FS>
 8003170:	4603      	mov	r3, r0
 8003172:	60bb      	str	r3, [r7, #8]
    if (res == USBD_OK)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <USBSendString+0x3e>
      return;

    HAL_Delay(1);
 800317a:	2001      	movs	r0, #1
 800317c:	f001 f9c6 	bl	800450c <HAL_Delay>
  for (i=0;i<50; i++)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3301      	adds	r3, #1
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b31      	cmp	r3, #49	; 0x31
 800318a:	dde8      	ble.n	800315e <USBSendString+0xe>
 800318c:	e000      	b.n	8003190 <USBSendString+0x40>
      return;
 800318e:	bf00      	nop
  }
}
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <InitDWTTimer>:

void InitDWTTimer(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <InitDWTTimer+0x2c>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a08      	ldr	r2, [pc, #32]	; (80031c4 <InitDWTTimer+0x2c>)
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a6:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; // reset the counter
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <InitDWTTimer+0x30>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk ; // enable the counter
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <InitDWTTimer+0x30>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <InitDWTTimer+0x30>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6013      	str	r3, [r2, #0]
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000edf0 	.word	0xe000edf0
 80031c8:	e0001000 	.word	0xe0001000

080031cc <Delay_us>:

void Delay_us(uint32_t us)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <Delay_us+0x40>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a0d      	ldr	r2, [pc, #52]	; (8003210 <Delay_us+0x44>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	0c9b      	lsrs	r3, r3, #18
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	60fb      	str	r3, [r7, #12]
  volatile uint32_t start = DWT->CYCCNT;
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <Delay_us+0x48>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	60bb      	str	r3, [r7, #8]
  do  {
  } while((DWT->CYCCNT - start) < cycles);
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <Delay_us+0x48>)
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	1ad2      	subs	r2, r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d3f8      	bcc.n	80031ee <Delay_us+0x22>
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000014 	.word	0x20000014
 8003210:	431bde83 	.word	0x431bde83
 8003214:	e0001000 	.word	0xe0001000

08003218 <replacestr>:
    return un.u;
}

// in-place string replacement which only works if the new string is smaller than the old string
void replacestr(uint8_t *buffer, const char *search, const char *replace)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
     char *sp;
     char* line = (char*) buffer;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
     if ((sp = strstr(line, search)) == NULL) {
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800322c:	f00c fbc1 	bl	800f9b2 <strstr>
 8003230:	6238      	str	r0, [r7, #32]
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d023      	beq.n	8003280 <replacestr+0x68>
         return;
     }
     int search_len = strlen(search);
 8003238:	68b8      	ldr	r0, [r7, #8]
 800323a:	f7fc ffe3 	bl	8000204 <strlen>
 800323e:	4603      	mov	r3, r0
 8003240:	61fb      	str	r3, [r7, #28]
     int replace_len = strlen(replace);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fc ffde 	bl	8000204 <strlen>
 8003248:	4603      	mov	r3, r0
 800324a:	61bb      	str	r3, [r7, #24]
     int tail_len = strlen(sp+search_len);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	6a3a      	ldr	r2, [r7, #32]
 8003250:	4413      	add	r3, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f7fc ffd6 	bl	8000204 <strlen>
 8003258:	4603      	mov	r3, r0
 800325a:	617b      	str	r3, [r7, #20]

     memmove(sp+replace_len,sp+search_len,tail_len+1);
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	6a3a      	ldr	r2, [r7, #32]
 8003260:	18d0      	adds	r0, r2, r3
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	6a3a      	ldr	r2, [r7, #32]
 8003266:	18d1      	adds	r1, r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	3301      	adds	r3, #1
 800326c:	461a      	mov	r2, r3
 800326e:	f00b fbab 	bl	800e9c8 <memmove>
     memcpy(sp, replace, replace_len);
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	461a      	mov	r2, r3
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	6a38      	ldr	r0, [r7, #32]
 800327a:	f00b fb97 	bl	800e9ac <memcpy>
 800327e:	e000      	b.n	8003282 <replacestr+0x6a>
         return;
 8003280:	bf00      	nop
}
 8003282:	3728      	adds	r7, #40	; 0x28
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003290:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003294:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d013      	beq.n	80032c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80032a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80032a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80032a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00b      	beq.n	80032c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80032b0:	e000      	b.n	80032b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80032b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80032b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f9      	beq.n	80032b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80032be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80032c8:	687b      	ldr	r3, [r7, #4]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//This Intterupot is called every .25ms Will Toggle the State of the Dac Channels
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a6c      	ldr	r2, [pc, #432]	; (8003494 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d149      	bne.n	800337c <HAL_TIM_PeriodElapsedCallback+0xa4>
  {
    //Syncronous Update of the DACs
    for (int i = 0; i < 6; i++){
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e041      	b.n	8003372 <HAL_TIM_PeriodElapsedCallback+0x9a>
      if(TCB.DAC8718.DAC_Channels[i].enabled){
 80032ee:	4a6a      	ldr	r2, [pc, #424]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	33ce      	adds	r3, #206	; 0xce
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	7a9b      	ldrb	r3, [r3, #10]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d036      	beq.n	800336c <HAL_TIM_PeriodElapsedCallback+0x94>
        if(TCB.DAC8718.DAC_Channels[i].state_high){
 80032fe:	4a66      	ldr	r2, [pc, #408]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	33ce      	adds	r3, #206	; 0xce
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	7a5b      	ldrb	r3, [r3, #9]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d017      	beq.n	800333e <HAL_TIM_PeriodElapsedCallback+0x66>

          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].lower_bound);
 800330e:	4a62      	ldr	r2, [pc, #392]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	33ce      	adds	r3, #206	; 0xce
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	7a19      	ldrb	r1, [r3, #8]
 800331a:	4a5f      	ldr	r2, [pc, #380]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	33ce      	adds	r3, #206	; 0xce
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	88db      	ldrh	r3, [r3, #6]
 8003326:	461a      	mov	r2, r3
 8003328:	485c      	ldr	r0, [pc, #368]	; (800349c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800332a:	f7fd ff7f 	bl	800122c <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = false;
 800332e:	4a5a      	ldr	r2, [pc, #360]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	33ce      	adds	r3, #206	; 0xce
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	2200      	movs	r2, #0
 800333a:	725a      	strb	r2, [r3, #9]
 800333c:	e016      	b.n	800336c <HAL_TIM_PeriodElapsedCallback+0x94>
        }else{
          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].upper_bound);
 800333e:	4a56      	ldr	r2, [pc, #344]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	33ce      	adds	r3, #206	; 0xce
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	7a19      	ldrb	r1, [r3, #8]
 800334a:	4a53      	ldr	r2, [pc, #332]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	33ce      	adds	r3, #206	; 0xce
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4413      	add	r3, r2
 8003354:	889b      	ldrh	r3, [r3, #4]
 8003356:	461a      	mov	r2, r3
 8003358:	4850      	ldr	r0, [pc, #320]	; (800349c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800335a:	f7fd ff67 	bl	800122c <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = true;
 800335e:	4a4e      	ldr	r2, [pc, #312]	; (8003498 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	33ce      	adds	r3, #206	; 0xce
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4413      	add	r3, r2
 8003368:	2201      	movs	r2, #1
 800336a:	725a      	strb	r2, [r3, #9]
    for (int i = 0; i < 6; i++){
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	3301      	adds	r3, #1
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b05      	cmp	r3, #5
 8003376:	ddba      	ble.n	80032ee <HAL_TIM_PeriodElapsedCallback+0x16>

        }
      }
    }//End For
    Syncronous_Update();
 8003378:	f7fd fff7 	bl	800136a <Syncronous_Update>
  }//End Timer 2


//--------------------This is from Damons Code-----------------------
  uint8_t i;
  if (htim == &htim6)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a48      	ldr	r2, [pc, #288]	; (80034a0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d123      	bne.n	80033cc <HAL_TIM_PeriodElapsedCallback+0xf4>
  {
    HeaterSubtick += HeaterFrequency;
 8003384:	4b47      	ldr	r3, [pc, #284]	; (80034a4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29a      	uxth	r2, r3
 800338a:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	4413      	add	r3, r2
 8003392:	b29a      	uxth	r2, r3
 8003394:	4b44      	ldr	r3, [pc, #272]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003396:	801a      	strh	r2, [r3, #0]
    if (HeaterSubtick > 1000){
 8003398:	4b43      	ldr	r3, [pc, #268]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a2:	d913      	bls.n	80033cc <HAL_TIM_PeriodElapsedCallback+0xf4>
        HeaterTick = (HeaterTick + 1) % 200;
 80033a4:	4b41      	ldr	r3, [pc, #260]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	4a40      	ldr	r2, [pc, #256]	; (80034b0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80033ae:	fb82 1203 	smull	r1, r2, r2, r3
 80033b2:	1191      	asrs	r1, r2, #6
 80033b4:	17da      	asrs	r2, r3, #31
 80033b6:	1a8a      	subs	r2, r1, r2
 80033b8:	21c8      	movs	r1, #200	; 0xc8
 80033ba:	fb01 f202 	mul.w	r2, r1, r2
 80033be:	1a9a      	subs	r2, r3, r2
 80033c0:	b292      	uxth	r2, r2
 80033c2:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80033c4:	801a      	strh	r2, [r3, #0]
        HeaterSubtick = 0;
 80033c6:	4b38      	ldr	r3, [pc, #224]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	801a      	strh	r2, [r3, #0]
    }
  }//End Timer 3

  if ((HeaterTick > HeaterDwell)&& (HeaterTick < (200 - HeaterDwell))){
 80033cc:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	4b35      	ldr	r3, [pc, #212]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	429a      	cmp	r2, r3
 80033dc:	d210      	bcs.n	8003400 <HAL_TIM_PeriodElapsedCallback+0x128>
 80033de:	4b33      	ldr	r3, [pc, #204]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	4b33      	ldr	r3, [pc, #204]	; (80034b4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80033f0:	429a      	cmp	r2, r3
 80033f2:	da05      	bge.n	8003400 <HAL_TIM_PeriodElapsedCallback+0x128>
        Controller_SetHeater(i, true);
 80033f4:	7afb      	ldrb	r3, [r7, #11]
 80033f6:	2101      	movs	r1, #1
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fe29 	bl	8003050 <Controller_SetHeater>
 80033fe:	e004      	b.n	800340a <HAL_TIM_PeriodElapsedCallback+0x132>
  }else{
        Controller_SetHeater(i, false);
 8003400:	7afb      	ldrb	r3, [r7, #11]
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fe23 	bl	8003050 <Controller_SetHeater>
  }//Dictates If heater is on or off

  //Removed ADC stuff

  if (htim == &htim4)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a2a      	ldr	r2, [pc, #168]	; (80034b8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d13c      	bne.n	800348c <HAL_TIM_PeriodElapsedCallback+0x1b4>
  {
    ClockTick = (ClockTick + 1) % 100;
 8003412:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	3301      	adds	r3, #1
 800341a:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800341c:	fb82 1203 	smull	r1, r2, r2, r3
 8003420:	1151      	asrs	r1, r2, #5
 8003422:	17da      	asrs	r2, r3, #31
 8003424:	1a8a      	subs	r2, r1, r2
 8003426:	2164      	movs	r1, #100	; 0x64
 8003428:	fb01 f202 	mul.w	r2, r1, r2
 800342c:	1a9a      	subs	r2, r3, r2
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	4b22      	ldr	r3, [pc, #136]	; (80034bc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003432:	701a      	strb	r2, [r3, #0]
    // this should be after the ClockTick increment
    if (ClockTick == 0)
 8003434:	4b21      	ldr	r3, [pc, #132]	; (80034bc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_TIM_PeriodElapsedCallback+0x174>
      ElapsedSeconds++;
 800343e:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	3301      	adds	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800344a:	801a      	strh	r2, [r3, #0]

    if (++Ticks_TMP117 >= 13)
 800344c:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	3301      	adds	r3, #1
 8003454:	b2db      	uxtb	r3, r3
 8003456:	4a1b      	ldr	r2, [pc, #108]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8003458:	4619      	mov	r1, r3
 800345a:	7011      	strb	r1, [r2, #0]
 800345c:	2b0c      	cmp	r3, #12
 800345e:	d905      	bls.n	800346c <HAL_TIM_PeriodElapsedCallback+0x194>
    {
      Ticks_TMP117 = 0;
 8003460:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
      DoSampleTMP117 = true;
 8003466:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
    }

    if (++Ticks_CalculatePWM >= 100)
 800346c:	4b17      	ldr	r3, [pc, #92]	; (80034cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	3301      	adds	r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	4a15      	ldr	r2, [pc, #84]	; (80034cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003478:	4619      	mov	r1, r3
 800347a:	7011      	strb	r1, [r2, #0]
 800347c:	2b63      	cmp	r3, #99	; 0x63
 800347e:	d905      	bls.n	800348c <HAL_TIM_PeriodElapsedCallback+0x1b4>
    {
      Ticks_CalculatePWM = 0;
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
      DoCalculatePWM = true;
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8003488:	2201      	movs	r2, #1
 800348a:	701a      	strb	r2, [r3, #0]
    }

  }
}
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	200005ac 	.word	0x200005ac
 8003498:	20000690 	.word	0x20000690
 800349c:	20000cf0 	.word	0x20000cf0
 80034a0:	2000063c 	.word	0x2000063c
 80034a4:	2000000e 	.word	0x2000000e
 80034a8:	20000688 	.word	0x20000688
 80034ac:	20000686 	.word	0x20000686
 80034b0:	51eb851f 	.word	0x51eb851f
 80034b4:	20000010 	.word	0x20000010
 80034b8:	200005f4 	.word	0x200005f4
 80034bc:	2000068c 	.word	0x2000068c
 80034c0:	2000068e 	.word	0x2000068e
 80034c4:	2000068a 	.word	0x2000068a
 80034c8:	20000684 	.word	0x20000684
 80034cc:	2000068b 	.word	0x2000068b
 80034d0:	20000685 	.word	0x20000685

080034d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b090      	sub	sp, #64	; 0x40
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034da:	f000 ffa5 	bl	8004428 <HAL_Init>

  /* USER CODE BEGIN Init */
  
  StringFIFOInit(&USBFIFO);
 80034de:	4855      	ldr	r0, [pc, #340]	; (8003634 <main+0x160>)
 80034e0:	f000 fd6e 	bl	8003fc0 <StringFIFOInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034e4:	f000 f8c4 	bl	8003670 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */


  InitDWTTimer(); // we need this for delay_us
 80034e8:	f7ff fe56 	bl	8003198 <InitDWTTimer>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034ec:	f000 fa70 	bl	80039d0 <MX_GPIO_Init>
  MX_SPI4_Init();
 80034f0:	f000 f968 	bl	80037c4 <MX_SPI4_Init>
  MX_I2C1_Init();
 80034f4:	f000 f926 	bl	8003744 <MX_I2C1_Init>
  MX_TIM2_Init();
 80034f8:	f000 f99a 	bl	8003830 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80034fc:	f00a fd06 	bl	800df0c <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8003500:	f000 f9e2 	bl	80038c8 <MX_TIM4_Init>
  MX_TIM6_Init();
 8003504:	f000 fa2e 	bl	8003964 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  TCB_InitStruct(&TCB, &hi2c1, &hspi4);
 8003508:	4a4b      	ldr	r2, [pc, #300]	; (8003638 <main+0x164>)
 800350a:	494c      	ldr	r1, [pc, #304]	; (800363c <main+0x168>)
 800350c:	484c      	ldr	r0, [pc, #304]	; (8003640 <main+0x16c>)
 800350e:	f7fe fba1 	bl	8001c54 <TCB_InitStruct>
  for (int i = 0; i < 6; i++){
 8003512:	2300      	movs	r3, #0
 8003514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003516:	e029      	b.n	800356c <main+0x98>
    TCB.DAC8718.DAC_Channels[i].enabled = true;
 8003518:	4a49      	ldr	r2, [pc, #292]	; (8003640 <main+0x16c>)
 800351a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351c:	33ce      	adds	r3, #206	; 0xce
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	2201      	movs	r2, #1
 8003524:	729a      	strb	r2, [r3, #10]
    TCB.DAC8718.DAC_Channels[i].DAC_number = i;
 8003526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003528:	b2d9      	uxtb	r1, r3
 800352a:	4a45      	ldr	r2, [pc, #276]	; (8003640 <main+0x16c>)
 800352c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352e:	33ce      	adds	r3, #206	; 0xce
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	460a      	mov	r2, r1
 8003536:	721a      	strb	r2, [r3, #8]
    TCB.DAC8718.DAC_Channels[i].lower_bound = 0x7FFF;
 8003538:	4a41      	ldr	r2, [pc, #260]	; (8003640 <main+0x16c>)
 800353a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353c:	33ce      	adds	r3, #206	; 0xce
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003546:	80da      	strh	r2, [r3, #6]
    TCB.DAC8718.DAC_Channels[i].upper_bound = 0x7FFF;
 8003548:	4a3d      	ldr	r2, [pc, #244]	; (8003640 <main+0x16c>)
 800354a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354c:	33ce      	adds	r3, #206	; 0xce
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003556:	809a      	strh	r2, [r3, #4]
    TCB.DAC8718.DAC_Channels[i].state_high = false;
 8003558:	4a39      	ldr	r2, [pc, #228]	; (8003640 <main+0x16c>)
 800355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355c:	33ce      	adds	r3, #206	; 0xce
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	2200      	movs	r2, #0
 8003564:	725a      	strb	r2, [r3, #9]
  for (int i = 0; i < 6; i++){
 8003566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003568:	3301      	adds	r3, #1
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800356c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800356e:	2b05      	cmp	r3, #5
 8003570:	ddd2      	ble.n	8003518 <main+0x44>
  }
  HAL_Delay(500);
 8003572:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003576:	f000 ffc9 	bl	800450c <HAL_Delay>
  printf("-- REBOOT --\n");
 800357a:	4832      	ldr	r0, [pc, #200]	; (8003644 <main+0x170>)
 800357c:	f00c f946 	bl	800f80c <puts>

// if you rearrange the PID.CONFIG struct, you should force rewriting defaults
  // over the EEPROM on next startup. This will *probably* be caught by checking
  // the address of the last controller rather than the first.
  //Welcome to OOP hell
  if (!(TCB.Controller.Sensor.Address & 0b1001000)) // if the stored address is not valid, we probably have invalid data.
 8003580:	4b2f      	ldr	r3, [pc, #188]	; (8003640 <main+0x16c>)
 8003582:	7a1b      	ldrb	r3, [r3, #8]
 8003584:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8003588:	2b00      	cmp	r3, #0
 800358a:	d102      	bne.n	8003592 <main+0xbe>
  {
    printf("The configuration is invalid. Rewriting defaults.");
 800358c:	482e      	ldr	r0, [pc, #184]	; (8003648 <main+0x174>)
 800358e:	f00c f8b7 	bl	800f700 <iprintf>
  }

  TMP117_Configure(&TCB.Controller.Sensor);
 8003592:	482e      	ldr	r0, [pc, #184]	; (800364c <main+0x178>)
 8003594:	f7fe f9b4 	bl	8001900 <TMP117_Configure>
  HAL_TIM_Base_Start_IT(&htim2); //DAC Timer
 8003598:	482d      	ldr	r0, [pc, #180]	; (8003650 <main+0x17c>)
 800359a:	f006 fc6f 	bl	8009e7c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6); // Heater Timer
 800359e:	482d      	ldr	r0, [pc, #180]	; (8003654 <main+0x180>)
 80035a0:	f006 fc6c 	bl	8009e7c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); // Main Timer
 80035a4:	482c      	ldr	r0, [pc, #176]	; (8003658 <main+0x184>)
 80035a6:	f006 fc69 	bl	8009e7c <HAL_TIM_Base_Start_IT>
		//   }
		//   //HAL_Delay(100);
	  // }
    //Set the heater to the opposite state its currently in
	  //Just to Test. Here is the
	  float dummyWave = 100.0;
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <main+0x188>)
 80035ac:	607b      	str	r3, [r7, #4]
	  Wavelength_to_Voltage(&dummyWave, &TCB.Sensor->Average);
 80035ae:	4a2c      	ldr	r2, [pc, #176]	; (8003660 <main+0x18c>)
 80035b0:	1d3b      	adds	r3, r7, #4
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fe fb27 	bl	8001c08 <Wavelength_to_Voltage>


    //-------- Damons Code ----------------------
    // we keep a global copy of this for the timer interrupt
    HeaterFrequency = TCB.Controller.PID.Config.Frequency;
 80035ba:	4b21      	ldr	r3, [pc, #132]	; (8003640 <main+0x16c>)
 80035bc:	f8b3 265e 	ldrh.w	r2, [r3, #1630]	; 0x65e
 80035c0:	4b28      	ldr	r3, [pc, #160]	; (8003664 <main+0x190>)
 80035c2:	801a      	strh	r2, [r3, #0]

    if (TCB.Controller.Sensor.Errors > 10)
 80035c4:	4b1e      	ldr	r3, [pc, #120]	; (8003640 <main+0x16c>)
 80035c6:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 80035ca:	2b0a      	cmp	r3, #10
 80035cc:	d901      	bls.n	80035d2 <main+0xfe>
      MX_I2C1_Init();
 80035ce:	f000 f8b9 	bl	8003744 <MX_I2C1_Init>

    if (DoSampleTMP117)
 80035d2:	4b25      	ldr	r3, [pc, #148]	; (8003668 <main+0x194>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00e      	beq.n	80035fa <main+0x126>
    {
      DoSampleTMP117 = false;
 80035dc:	4b22      	ldr	r3, [pc, #136]	; (8003668 <main+0x194>)
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
      if (TCB.Controller.Sensor.Configured){
 80035e2:	4b17      	ldr	r3, [pc, #92]	; (8003640 <main+0x16c>)
 80035e4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <main+0x120>
          TMP117_GetTemperature(&TCB.Controller.Sensor);
 80035ec:	4817      	ldr	r0, [pc, #92]	; (800364c <main+0x178>)
 80035ee:	f7fe f9cd 	bl	800198c <TMP117_GetTemperature>
 80035f2:	e002      	b.n	80035fa <main+0x126>
      }else{
          TMP117_Configure(&TCB.Controller.Sensor);
 80035f4:	4815      	ldr	r0, [pc, #84]	; (800364c <main+0x178>)
 80035f6:	f7fe f983 	bl	8001900 <TMP117_Configure>
      }
    }


    if (DoCalculatePWM)
 80035fa:	4b1c      	ldr	r3, [pc, #112]	; (800366c <main+0x198>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <main+0x13c>
    {
      DoCalculatePWM = false;
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <main+0x198>)
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
      Controller_Step(&TCB.Controller);
 800360a:	480d      	ldr	r0, [pc, #52]	; (8003640 <main+0x16c>)
 800360c:	f7ff fd56 	bl	80030bc <Controller_Step>
    }

    if (StringFIFORemove(&USBFIFO, buffer) == 0)
 8003610:	f107 0308 	add.w	r3, r7, #8
 8003614:	4619      	mov	r1, r3
 8003616:	4807      	ldr	r0, [pc, #28]	; (8003634 <main+0x160>)
 8003618:	f000 fd66 	bl	80040e8 <StringFIFORemove>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1c3      	bne.n	80035aa <main+0xd6>
    {
      ProcessUserInput(&TCB.Controller, buffer, &TCB);
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	4a06      	ldr	r2, [pc, #24]	; (8003640 <main+0x16c>)
 8003628:	4619      	mov	r1, r3
 800362a:	4805      	ldr	r0, [pc, #20]	; (8003640 <main+0x16c>)
 800362c:	f7fe fb5a 	bl	8001ce4 <ProcessUserInput>
  {
 8003630:	e7bb      	b.n	80035aa <main+0xd6>
 8003632:	bf00      	nop
 8003634:	20001c60 	.word	0x20001c60
 8003638:	20000554 	.word	0x20000554
 800363c:	20000500 	.word	0x20000500
 8003640:	20000690 	.word	0x20000690
 8003644:	0801492c 	.word	0x0801492c
 8003648:	0801493c 	.word	0x0801493c
 800364c:	20000698 	.word	0x20000698
 8003650:	200005ac 	.word	0x200005ac
 8003654:	2000063c 	.word	0x2000063c
 8003658:	200005f4 	.word	0x200005f4
 800365c:	42c80000 	.word	0x42c80000
 8003660:	20000f50 	.word	0x20000f50
 8003664:	2000000e 	.word	0x2000000e
 8003668:	20000684 	.word	0x20000684
 800366c:	20000685 	.word	0x20000685

08003670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b094      	sub	sp, #80	; 0x50
 8003674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003676:	f107 0320 	add.w	r3, r7, #32
 800367a:	2230      	movs	r2, #48	; 0x30
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f00b f9bc 	bl	800e9fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003684:	f107 030c 	add.w	r3, r7, #12
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003694:	2300      	movs	r3, #0
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	4b28      	ldr	r3, [pc, #160]	; (800373c <SystemClock_Config+0xcc>)
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	4a27      	ldr	r2, [pc, #156]	; (800373c <SystemClock_Config+0xcc>)
 800369e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a2:	6413      	str	r3, [r2, #64]	; 0x40
 80036a4:	4b25      	ldr	r3, [pc, #148]	; (800373c <SystemClock_Config+0xcc>)
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036b0:	2300      	movs	r3, #0
 80036b2:	607b      	str	r3, [r7, #4]
 80036b4:	4b22      	ldr	r3, [pc, #136]	; (8003740 <SystemClock_Config+0xd0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a21      	ldr	r2, [pc, #132]	; (8003740 <SystemClock_Config+0xd0>)
 80036ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <SystemClock_Config+0xd0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036cc:	2301      	movs	r3, #1
 80036ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036d6:	2302      	movs	r3, #2
 80036d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80036e0:	2304      	movs	r3, #4
 80036e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80036e4:	23a8      	movs	r3, #168	; 0xa8
 80036e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036e8:	2302      	movs	r3, #2
 80036ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80036ec:	2307      	movs	r3, #7
 80036ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036f0:	f107 0320 	add.w	r3, r7, #32
 80036f4:	4618      	mov	r0, r3
 80036f6:	f005 f99d 	bl	8008a34 <HAL_RCC_OscConfig>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003700:	f000 fab6 	bl	8003c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003704:	230f      	movs	r3, #15
 8003706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003708:	2302      	movs	r3, #2
 800370a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003710:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003716:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800371a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800371c:	f107 030c 	add.w	r3, r7, #12
 8003720:	2105      	movs	r1, #5
 8003722:	4618      	mov	r0, r3
 8003724:	f005 fbfe 	bl	8008f24 <HAL_RCC_ClockConfig>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800372e:	f000 fa9f 	bl	8003c70 <Error_Handler>
  }
}
 8003732:	bf00      	nop
 8003734:	3750      	adds	r7, #80	; 0x50
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40023800 	.word	0x40023800
 8003740:	40007000 	.word	0x40007000

08003744 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <MX_I2C1_Init+0x74>)
 800374a:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <MX_I2C1_Init+0x78>)
 800374c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800374e:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <MX_I2C1_Init+0x74>)
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <MX_I2C1_Init+0x7c>)
 8003752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003754:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <MX_I2C1_Init+0x74>)
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800375a:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <MX_I2C1_Init+0x74>)
 800375c:	2200      	movs	r2, #0
 800375e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003760:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <MX_I2C1_Init+0x74>)
 8003762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003766:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <MX_I2C1_Init+0x74>)
 800376a:	2200      	movs	r2, #0
 800376c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <MX_I2C1_Init+0x74>)
 8003770:	2200      	movs	r2, #0
 8003772:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <MX_I2C1_Init+0x74>)
 8003776:	2200      	movs	r2, #0
 8003778:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <MX_I2C1_Init+0x74>)
 800377c:	2200      	movs	r2, #0
 800377e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003780:	480d      	ldr	r0, [pc, #52]	; (80037b8 <MX_I2C1_Init+0x74>)
 8003782:	f001 f9ef 	bl	8004b64 <HAL_I2C_Init>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800378c:	f000 fa70 	bl	8003c70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003790:	2100      	movs	r1, #0
 8003792:	4809      	ldr	r0, [pc, #36]	; (80037b8 <MX_I2C1_Init+0x74>)
 8003794:	f003 fe56 	bl	8007444 <HAL_I2CEx_ConfigAnalogFilter>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800379e:	f000 fa67 	bl	8003c70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037a2:	2100      	movs	r1, #0
 80037a4:	4804      	ldr	r0, [pc, #16]	; (80037b8 <MX_I2C1_Init+0x74>)
 80037a6:	f003 fe89 	bl	80074bc <HAL_I2CEx_ConfigDigitalFilter>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80037b0:	f000 fa5e 	bl	8003c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000500 	.word	0x20000500
 80037bc:	40005400 	.word	0x40005400
 80037c0:	000186a0 	.word	0x000186a0

080037c4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80037c8:	4b17      	ldr	r3, [pc, #92]	; (8003828 <MX_SPI4_Init+0x64>)
 80037ca:	4a18      	ldr	r2, [pc, #96]	; (800382c <MX_SPI4_Init+0x68>)
 80037cc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80037ce:	4b16      	ldr	r3, [pc, #88]	; (8003828 <MX_SPI4_Init+0x64>)
 80037d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037d4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80037d6:	4b14      	ldr	r3, [pc, #80]	; (8003828 <MX_SPI4_Init+0x64>)
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80037dc:	4b12      	ldr	r3, [pc, #72]	; (8003828 <MX_SPI4_Init+0x64>)
 80037de:	2200      	movs	r2, #0
 80037e0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037e2:	4b11      	ldr	r3, [pc, #68]	; (8003828 <MX_SPI4_Init+0x64>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80037e8:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <MX_SPI4_Init+0x64>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80037ee:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <MX_SPI4_Init+0x64>)
 80037f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037f4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80037f6:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <MX_SPI4_Init+0x64>)
 80037f8:	2220      	movs	r2, #32
 80037fa:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <MX_SPI4_Init+0x64>)
 80037fe:	2200      	movs	r2, #0
 8003800:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <MX_SPI4_Init+0x64>)
 8003804:	2200      	movs	r2, #0
 8003806:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003808:	4b07      	ldr	r3, [pc, #28]	; (8003828 <MX_SPI4_Init+0x64>)
 800380a:	2200      	movs	r2, #0
 800380c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <MX_SPI4_Init+0x64>)
 8003810:	220a      	movs	r2, #10
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003814:	4804      	ldr	r0, [pc, #16]	; (8003828 <MX_SPI4_Init+0x64>)
 8003816:	f005 fd91 	bl	800933c <HAL_SPI_Init>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003820:	f000 fa26 	bl	8003c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003824:	bf00      	nop
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20000554 	.word	0x20000554
 800382c:	40013400 	.word	0x40013400

08003830 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003836:	f107 0308 	add.w	r3, r7, #8
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003844:	463b      	mov	r3, r7
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800384c:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <MX_TIM2_Init+0x94>)
 800384e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003852:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420;
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <MX_TIM2_Init+0x94>)
 8003856:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800385a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800385c:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <MX_TIM2_Init+0x94>)
 800385e:	2200      	movs	r2, #0
 8003860:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8003862:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <MX_TIM2_Init+0x94>)
 8003864:	2232      	movs	r2, #50	; 0x32
 8003866:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003868:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <MX_TIM2_Init+0x94>)
 800386a:	2200      	movs	r2, #0
 800386c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800386e:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <MX_TIM2_Init+0x94>)
 8003870:	2280      	movs	r2, #128	; 0x80
 8003872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003874:	4813      	ldr	r0, [pc, #76]	; (80038c4 <MX_TIM2_Init+0x94>)
 8003876:	f006 fab1 	bl	8009ddc <HAL_TIM_Base_Init>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003880:	f000 f9f6 	bl	8003c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003888:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	4619      	mov	r1, r3
 8003890:	480c      	ldr	r0, [pc, #48]	; (80038c4 <MX_TIM2_Init+0x94>)
 8003892:	f006 fc6b 	bl	800a16c <HAL_TIM_ConfigClockSource>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800389c:	f000 f9e8 	bl	8003c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a0:	2300      	movs	r3, #0
 80038a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038a8:	463b      	mov	r3, r7
 80038aa:	4619      	mov	r1, r3
 80038ac:	4805      	ldr	r0, [pc, #20]	; (80038c4 <MX_TIM2_Init+0x94>)
 80038ae:	f006 fe87 	bl	800a5c0 <HAL_TIMEx_MasterConfigSynchronization>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80038b8:	f000 f9da 	bl	8003c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038bc:	bf00      	nop
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	200005ac 	.word	0x200005ac

080038c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ce:	f107 0308 	add.w	r3, r7, #8
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	605a      	str	r2, [r3, #4]
 80038d8:	609a      	str	r2, [r3, #8]
 80038da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038dc:	463b      	mov	r3, r7
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <MX_TIM4_Init+0x94>)
 80038e6:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <MX_TIM4_Init+0x98>)
 80038e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4200;
 80038ea:	4b1c      	ldr	r3, [pc, #112]	; (800395c <MX_TIM4_Init+0x94>)
 80038ec:	f241 0268 	movw	r2, #4200	; 0x1068
 80038f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f2:	4b1a      	ldr	r3, [pc, #104]	; (800395c <MX_TIM4_Init+0x94>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80038f8:	4b18      	ldr	r3, [pc, #96]	; (800395c <MX_TIM4_Init+0x94>)
 80038fa:	2264      	movs	r2, #100	; 0x64
 80038fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80038fe:	4b17      	ldr	r3, [pc, #92]	; (800395c <MX_TIM4_Init+0x94>)
 8003900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003904:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003906:	4b15      	ldr	r3, [pc, #84]	; (800395c <MX_TIM4_Init+0x94>)
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800390c:	4813      	ldr	r0, [pc, #76]	; (800395c <MX_TIM4_Init+0x94>)
 800390e:	f006 fa65 	bl	8009ddc <HAL_TIM_Base_Init>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003918:	f000 f9aa 	bl	8003c70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800391c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003920:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003922:	f107 0308 	add.w	r3, r7, #8
 8003926:	4619      	mov	r1, r3
 8003928:	480c      	ldr	r0, [pc, #48]	; (800395c <MX_TIM4_Init+0x94>)
 800392a:	f006 fc1f 	bl	800a16c <HAL_TIM_ConfigClockSource>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003934:	f000 f99c 	bl	8003c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003938:	2300      	movs	r3, #0
 800393a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800393c:	2300      	movs	r3, #0
 800393e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003940:	463b      	mov	r3, r7
 8003942:	4619      	mov	r1, r3
 8003944:	4805      	ldr	r0, [pc, #20]	; (800395c <MX_TIM4_Init+0x94>)
 8003946:	f006 fe3b 	bl	800a5c0 <HAL_TIMEx_MasterConfigSynchronization>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003950:	f000 f98e 	bl	8003c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003954:	bf00      	nop
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	200005f4 	.word	0x200005f4
 8003960:	40000800 	.word	0x40000800

08003964 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800396a:	463b      	mov	r3, r7
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <MX_TIM6_Init+0x64>)
 8003974:	4a15      	ldr	r2, [pc, #84]	; (80039cc <MX_TIM6_Init+0x68>)
 8003976:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1680;
 8003978:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <MX_TIM6_Init+0x64>)
 800397a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800397e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <MX_TIM6_Init+0x64>)
 8003982:	2200      	movs	r2, #0
 8003984:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8003986:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <MX_TIM6_Init+0x64>)
 8003988:	2264      	movs	r2, #100	; 0x64
 800398a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <MX_TIM6_Init+0x64>)
 800398e:	2280      	movs	r2, #128	; 0x80
 8003990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003992:	480d      	ldr	r0, [pc, #52]	; (80039c8 <MX_TIM6_Init+0x64>)
 8003994:	f006 fa22 	bl	8009ddc <HAL_TIM_Base_Init>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800399e:	f000 f967 	bl	8003c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80039aa:	463b      	mov	r3, r7
 80039ac:	4619      	mov	r1, r3
 80039ae:	4806      	ldr	r0, [pc, #24]	; (80039c8 <MX_TIM6_Init+0x64>)
 80039b0:	f006 fe06 	bl	800a5c0 <HAL_TIMEx_MasterConfigSynchronization>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80039ba:	f000 f959 	bl	8003c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	2000063c 	.word	0x2000063c
 80039cc:	40001000 	.word	0x40001000

080039d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08c      	sub	sp, #48	; 0x30
 80039d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d6:	f107 031c 	add.w	r3, r7, #28
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	609a      	str	r2, [r3, #8]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	4b83      	ldr	r3, [pc, #524]	; (8003bf8 <MX_GPIO_Init+0x228>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	4a82      	ldr	r2, [pc, #520]	; (8003bf8 <MX_GPIO_Init+0x228>)
 80039f0:	f043 0310 	orr.w	r3, r3, #16
 80039f4:	6313      	str	r3, [r2, #48]	; 0x30
 80039f6:	4b80      	ldr	r3, [pc, #512]	; (8003bf8 <MX_GPIO_Init+0x228>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	4b7c      	ldr	r3, [pc, #496]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	4a7b      	ldr	r2, [pc, #492]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a10:	6313      	str	r3, [r2, #48]	; 0x30
 8003a12:	4b79      	ldr	r3, [pc, #484]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	4b75      	ldr	r3, [pc, #468]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	4a74      	ldr	r2, [pc, #464]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2e:	4b72      	ldr	r3, [pc, #456]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	4b6e      	ldr	r3, [pc, #440]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4a6d      	ldr	r2, [pc, #436]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	4b6b      	ldr	r3, [pc, #428]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	4b67      	ldr	r3, [pc, #412]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	4a66      	ldr	r2, [pc, #408]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a60:	f043 0308 	orr.w	r3, r3, #8
 8003a64:	6313      	str	r3, [r2, #48]	; 0x30
 8003a66:	4b64      	ldr	r3, [pc, #400]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	4b60      	ldr	r3, [pc, #384]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	4a5f      	ldr	r2, [pc, #380]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a7c:	f043 0302 	orr.w	r3, r3, #2
 8003a80:	6313      	str	r3, [r2, #48]	; 0x30
 8003a82:	4b5d      	ldr	r3, [pc, #372]	; (8003bf8 <MX_GPIO_Init+0x228>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|nWakeUp_Pin, GPIO_PIN_RESET);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f44f 7184 	mov.w	r1, #264	; 0x108
 8003a94:	4859      	ldr	r0, [pc, #356]	; (8003bfc <MX_GPIO_Init+0x22c>)
 8003a96:	f001 f84b 	bl	8004b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heater_GPIO_Port, Heater_Pin, GPIO_PIN_RESET);
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2120      	movs	r1, #32
 8003a9e:	4858      	ldr	r0, [pc, #352]	; (8003c00 <MX_GPIO_Init+0x230>)
 8003aa0:	f001 f846 	bl	8004b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, nRst_Pin|nClr_Pin|nCS_Pin, GPIO_PIN_SET);
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8003aaa:	4854      	ldr	r0, [pc, #336]	; (8003bfc <MX_GPIO_Init+0x22c>)
 8003aac:	f001 f840 	bl	8004b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nLDAC_GPIO_Port, nLDAC_Pin, GPIO_PIN_SET);
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ab6:	4853      	ldr	r0, [pc, #332]	; (8003c04 <MX_GPIO_Init+0x234>)
 8003ab8:	f001 f83a 	bl	8004b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8003abc:	2200      	movs	r2, #0
 8003abe:	2101      	movs	r1, #1
 8003ac0:	4850      	ldr	r0, [pc, #320]	; (8003c04 <MX_GPIO_Init+0x234>)
 8003ac2:	f001 f835 	bl	8004b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aca:	2301      	movs	r3, #1
 8003acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ad6:	f107 031c 	add.w	r3, r7, #28
 8003ada:	4619      	mov	r1, r3
 8003adc:	4847      	ldr	r0, [pc, #284]	; (8003bfc <MX_GPIO_Init+0x22c>)
 8003ade:	f000 fe7b 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aee:	2303      	movs	r3, #3
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003af2:	2308      	movs	r3, #8
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af6:	f107 031c 	add.w	r3, r7, #28
 8003afa:	4619      	mov	r1, r3
 8003afc:	4842      	ldr	r0, [pc, #264]	; (8003c08 <MX_GPIO_Init+0x238>)
 8003afe:	f000 fe6b 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b02:	23f0      	movs	r3, #240	; 0xf0
 8003b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b06:	2302      	movs	r3, #2
 8003b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b12:	2305      	movs	r3, #5
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b16:	f107 031c 	add.w	r3, r7, #28
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	483a      	ldr	r0, [pc, #232]	; (8003c08 <MX_GPIO_Init+0x238>)
 8003b1e:	f000 fe5b 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003b22:	2310      	movs	r3, #16
 8003b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b26:	2303      	movs	r3, #3
 8003b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b2e:	f107 031c 	add.w	r3, r7, #28
 8003b32:	4619      	mov	r1, r3
 8003b34:	4832      	ldr	r0, [pc, #200]	; (8003c00 <MX_GPIO_Init+0x230>)
 8003b36:	f000 fe4f 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Heater_Pin */
  GPIO_InitStruct.Pin = Heater_Pin;
 8003b3a:	2320      	movs	r3, #32
 8003b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	2300      	movs	r3, #0
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Heater_GPIO_Port, &GPIO_InitStruct);
 8003b4a:	f107 031c 	add.w	r3, r7, #28
 8003b4e:	4619      	mov	r1, r3
 8003b50:	482b      	ldr	r0, [pc, #172]	; (8003c00 <MX_GPIO_Init+0x230>)
 8003b52:	f000 fe41 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : nWakeUp_Pin nRst_Pin nClr_Pin nCS_Pin */
  GPIO_InitStruct.Pin = nWakeUp_Pin|nRst_Pin|nClr_Pin|nCS_Pin;
 8003b56:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b64:	2302      	movs	r3, #2
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b68:	f107 031c 	add.w	r3, r7, #28
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4823      	ldr	r0, [pc, #140]	; (8003bfc <MX_GPIO_Init+0x22c>)
 8003b70:	f000 fe32 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : nLDAC_Pin */
  GPIO_InitStruct.Pin = nLDAC_Pin;
 8003b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b82:	2302      	movs	r3, #2
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nLDAC_GPIO_Port, &GPIO_InitStruct);
 8003b86:	f107 031c 	add.w	r3, r7, #28
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	481d      	ldr	r0, [pc, #116]	; (8003c04 <MX_GPIO_Init+0x234>)
 8003b8e:	f000 fe23 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003b92:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003b96:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003ba4:	230c      	movs	r3, #12
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ba8:	f107 031c 	add.w	r3, r7, #28
 8003bac:	4619      	mov	r1, r3
 8003bae:	4814      	ldr	r0, [pc, #80]	; (8003c00 <MX_GPIO_Init+0x230>)
 8003bb0:	f000 fe12 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bc4:	f107 031c 	add.w	r3, r7, #28
 8003bc8:	4619      	mov	r1, r3
 8003bca:	480e      	ldr	r0, [pc, #56]	; (8003c04 <MX_GPIO_Init+0x234>)
 8003bcc:	f000 fe04 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003be0:	230c      	movs	r3, #12
 8003be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003be4:	f107 031c 	add.w	r3, r7, #28
 8003be8:	4619      	mov	r1, r3
 8003bea:	4806      	ldr	r0, [pc, #24]	; (8003c04 <MX_GPIO_Init+0x234>)
 8003bec:	f000 fdf4 	bl	80047d8 <HAL_GPIO_Init>

}
 8003bf0:	bf00      	nop
 8003bf2:	3730      	adds	r7, #48	; 0x30
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40020800 	.word	0x40020800
 8003c04:	40020c00 	.word	0x40020c00
 8003c08:	40020000 	.word	0x40020000

08003c0c <_write>:

/* This allows printf to write to the debugger and USB */
/* USB needs #include "usbd_cdc_if.h" */
/* ITM Stimulus port 0 must be enabled in your trace settings */
int _write(int file, char *ptr, int len)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  int i, res;

  for (i=0;i<20; i++)
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61fb      	str	r3, [r7, #28]
 8003c1c:	e00d      	b.n	8003c3a <_write+0x2e>
  {
    res = CDC_Transmit_FS((uint8_t*) ptr, len);  // USB out
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	4619      	mov	r1, r3
 8003c24:	68b8      	ldr	r0, [r7, #8]
 8003c26:	f00a fa3b 	bl	800e0a0 <CDC_Transmit_FS>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	617b      	str	r3, [r7, #20]
    if (res == USBD_OK)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d006      	beq.n	8003c42 <_write+0x36>
  for (i=0;i<20; i++)
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	3301      	adds	r3, #1
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2b13      	cmp	r3, #19
 8003c3e:	ddee      	ble.n	8003c1e <_write+0x12>
 8003c40:	e000      	b.n	8003c44 <_write+0x38>
      break;
 8003c42:	bf00      	nop
  }

  for (int i = 0; i < len; i++)
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]
 8003c48:	e009      	b.n	8003c5e <_write+0x52>
    ITM_SendChar((*ptr++));              // debugger out
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	60ba      	str	r2, [r7, #8]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fb18 	bl	8003288 <ITM_SendChar>
  for (int i = 0; i < len; i++)
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	dbf1      	blt.n	8003c4a <_write+0x3e>
  return len;
 8003c66:	687b      	ldr	r3, [r7, #4]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c74:	b672      	cpsid	i
}
 8003c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c78:	e7fe      	b.n	8003c78 <Error_Handler+0x8>
	...

08003c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <HAL_MspInit+0x4c>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	4a0f      	ldr	r2, [pc, #60]	; (8003cc8 <HAL_MspInit+0x4c>)
 8003c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c90:	6453      	str	r3, [r2, #68]	; 0x44
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <HAL_MspInit+0x4c>)
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9a:	607b      	str	r3, [r7, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_MspInit+0x4c>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	4a08      	ldr	r2, [pc, #32]	; (8003cc8 <HAL_MspInit+0x4c>)
 8003ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cac:	6413      	str	r3, [r2, #64]	; 0x40
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <HAL_MspInit+0x4c>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800

08003ccc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <HAL_I2C_MspInit+0xa4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d13b      	bne.n	8003d66 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <HAL_I2C_MspInit+0xa8>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	4a1f      	ldr	r2, [pc, #124]	; (8003d74 <HAL_I2C_MspInit+0xa8>)
 8003cf8:	f043 0302 	orr.w	r3, r3, #2
 8003cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfe:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <HAL_I2C_MspInit+0xa8>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d0a:	23c0      	movs	r3, #192	; 0xc0
 8003d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d0e:	2312      	movs	r3, #18
 8003d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d16:	2303      	movs	r3, #3
 8003d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d1e:	f107 0314 	add.w	r3, r7, #20
 8003d22:	4619      	mov	r1, r3
 8003d24:	4814      	ldr	r0, [pc, #80]	; (8003d78 <HAL_I2C_MspInit+0xac>)
 8003d26:	f000 fd57 	bl	80047d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <HAL_I2C_MspInit+0xa8>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	4a10      	ldr	r2, [pc, #64]	; (8003d74 <HAL_I2C_MspInit+0xa8>)
 8003d34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d38:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3a:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <HAL_I2C_MspInit+0xa8>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003d46:	2200      	movs	r2, #0
 8003d48:	2100      	movs	r1, #0
 8003d4a:	201f      	movs	r0, #31
 8003d4c:	f000 fcdd 	bl	800470a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003d50:	201f      	movs	r0, #31
 8003d52:	f000 fcf6 	bl	8004742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003d56:	2200      	movs	r2, #0
 8003d58:	2100      	movs	r1, #0
 8003d5a:	2020      	movs	r0, #32
 8003d5c:	f000 fcd5 	bl	800470a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003d60:	2020      	movs	r0, #32
 8003d62:	f000 fcee 	bl	8004742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d66:	bf00      	nop
 8003d68:	3728      	adds	r7, #40	; 0x28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40005400 	.word	0x40005400
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40020400 	.word	0x40020400

08003d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d84:	f107 0314 	add.w	r3, r7, #20
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	60da      	str	r2, [r3, #12]
 8003d92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1d      	ldr	r2, [pc, #116]	; (8003e10 <HAL_SPI_MspInit+0x94>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d134      	bne.n	8003e08 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <HAL_SPI_MspInit+0x98>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	4a1b      	ldr	r2, [pc, #108]	; (8003e14 <HAL_SPI_MspInit+0x98>)
 8003da8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dac:	6453      	str	r3, [r2, #68]	; 0x44
 8003dae:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_SPI_MspInit+0x98>)
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_SPI_MspInit+0x98>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <HAL_SPI_MspInit+0x98>)
 8003dc4:	f043 0310 	orr.w	r3, r3, #16
 8003dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_SPI_MspInit+0x98>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003dd6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de4:	2303      	movs	r3, #3
 8003de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003de8:	2305      	movs	r3, #5
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dec:	f107 0314 	add.w	r3, r7, #20
 8003df0:	4619      	mov	r1, r3
 8003df2:	4809      	ldr	r0, [pc, #36]	; (8003e18 <HAL_SPI_MspInit+0x9c>)
 8003df4:	f000 fcf0 	bl	80047d8 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	2054      	movs	r0, #84	; 0x54
 8003dfe:	f000 fc84 	bl	800470a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8003e02:	2054      	movs	r0, #84	; 0x54
 8003e04:	f000 fc9d 	bl	8004742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003e08:	bf00      	nop
 8003e0a:	3728      	adds	r7, #40	; 0x28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40013400 	.word	0x40013400
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40021000 	.word	0x40021000

08003e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2c:	d116      	bne.n	8003e5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	4b28      	ldr	r3, [pc, #160]	; (8003ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3e:	4b25      	ldr	r3, [pc, #148]	; (8003ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	201c      	movs	r0, #28
 8003e50:	f000 fc5b 	bl	800470a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e54:	201c      	movs	r0, #28
 8003e56:	f000 fc74 	bl	8004742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003e5a:	e036      	b.n	8003eca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1d      	ldr	r2, [pc, #116]	; (8003ed8 <HAL_TIM_Base_MspInit+0xbc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d116      	bne.n	8003e94 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	4a19      	ldr	r2, [pc, #100]	; (8003ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	6413      	str	r3, [r2, #64]	; 0x40
 8003e76:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003e82:	2200      	movs	r2, #0
 8003e84:	2100      	movs	r1, #0
 8003e86:	201e      	movs	r0, #30
 8003e88:	f000 fc3f 	bl	800470a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e8c:	201e      	movs	r0, #30
 8003e8e:	f000 fc58 	bl	8004742 <HAL_NVIC_EnableIRQ>
}
 8003e92:	e01a      	b.n	8003eca <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a10      	ldr	r2, [pc, #64]	; (8003edc <HAL_TIM_Base_MspInit+0xc0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d115      	bne.n	8003eca <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	4a0b      	ldr	r2, [pc, #44]	; (8003ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8003ea8:	f043 0310 	orr.w	r3, r3, #16
 8003eac:	6413      	str	r3, [r2, #64]	; 0x40
 8003eae:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <HAL_TIM_Base_MspInit+0xb8>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	2036      	movs	r0, #54	; 0x36
 8003ec0:	f000 fc23 	bl	800470a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ec4:	2036      	movs	r0, #54	; 0x36
 8003ec6:	f000 fc3c 	bl	8004742 <HAL_NVIC_EnableIRQ>
}
 8003eca:	bf00      	nop
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40000800 	.word	0x40000800
 8003edc:	40001000 	.word	0x40001000

08003ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ee4:	e7fe      	b.n	8003ee4 <NMI_Handler+0x4>

08003ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eea:	e7fe      	b.n	8003eea <HardFault_Handler+0x4>

08003eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ef0:	e7fe      	b.n	8003ef0 <MemManage_Handler+0x4>

08003ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ef6:	e7fe      	b.n	8003ef6 <BusFault_Handler+0x4>

08003ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003efc:	e7fe      	b.n	8003efc <UsageFault_Handler+0x4>

08003efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003efe:	b480      	push	{r7}
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f2c:	f000 face 	bl	80044cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f30:	bf00      	nop
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f38:	4802      	ldr	r0, [pc, #8]	; (8003f44 <TIM2_IRQHandler+0x10>)
 8003f3a:	f006 f80f 	bl	8009f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	200005ac 	.word	0x200005ac

08003f48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f4c:	4802      	ldr	r0, [pc, #8]	; (8003f58 <TIM4_IRQHandler+0x10>)
 8003f4e:	f006 f805 	bl	8009f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f52:	bf00      	nop
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	200005f4 	.word	0x200005f4

08003f5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f60:	4802      	ldr	r0, [pc, #8]	; (8003f6c <I2C1_EV_IRQHandler+0x10>)
 8003f62:	f001 fa67 	bl	8005434 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000500 	.word	0x20000500

08003f70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003f74:	4802      	ldr	r0, [pc, #8]	; (8003f80 <I2C1_ER_IRQHandler+0x10>)
 8003f76:	f001 fbce 	bl	8005716 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000500 	.word	0x20000500

08003f84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003f88:	4802      	ldr	r0, [pc, #8]	; (8003f94 <TIM6_DAC_IRQHandler+0x10>)
 8003f8a:	f005 ffe7 	bl	8009f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	2000063c 	.word	0x2000063c

08003f98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003f9c:	4802      	ldr	r0, [pc, #8]	; (8003fa8 <OTG_FS_IRQHandler+0x10>)
 8003f9e:	f003 fc1c 	bl	80077da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20002a14 	.word	0x20002a14

08003fac <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8003fb0:	4802      	ldr	r0, [pc, #8]	; (8003fbc <SPI4_IRQHandler+0x10>)
 8003fb2:	f005 fd2b 	bl	8009a0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000554 	.word	0x20000554

08003fc0 <StringFIFOInit>:

#include <stringfifo.h>
#include "string.h"

void StringFIFOInit(struct sStringFIFO* fifo)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint16_t i;
  fifo->head = 0;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
  fifo->tail = 0;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  for (i=0; i<FIFO_BUFFER_SIZE; i++)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	81fb      	strh	r3, [r7, #14]
 8003fdc:	e006      	b.n	8003fec <StringFIFOInit+0x2c>
    fifo->buffer[i]=0;
 8003fde:	89fb      	ldrh	r3, [r7, #14]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	54d1      	strb	r1, [r2, r3]
  for (i=0; i<FIFO_BUFFER_SIZE; i++)
 8003fe6:	89fb      	ldrh	r3, [r7, #14]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	81fb      	strh	r3, [r7, #14]
 8003fec:	89fb      	ldrh	r3, [r7, #14]
 8003fee:	2bf9      	cmp	r3, #249	; 0xf9
 8003ff0:	d9f5      	bls.n	8003fde <StringFIFOInit+0x1e>
}
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <StringFIFOUsed>:

uint16_t StringFIFOUsed(struct sStringFIFO* fifo)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  int16_t used = fifo->tail - fifo->head;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800400e:	b29a      	uxth	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004016:	b29b      	uxth	r3, r3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	b29b      	uxth	r3, r3
 800401c:	81fb      	strh	r3, [r7, #14]
  if (used < 0)
 800401e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004022:	2b00      	cmp	r3, #0
 8004024:	da03      	bge.n	800402e <StringFIFOUsed+0x2e>
    used += FIFO_BUFFER_SIZE;
 8004026:	89fb      	ldrh	r3, [r7, #14]
 8004028:	33fa      	adds	r3, #250	; 0xfa
 800402a:	b29b      	uxth	r3, r3
 800402c:	81fb      	strh	r3, [r7, #14]
  return (uint16_t) used;
 800402e:	89fb      	ldrh	r3, [r7, #14]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <StringFIFOAvailable>:

uint16_t StringFIFOAvailable(struct sStringFIFO* fifo)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint16_t used = StringFIFOUsed(fifo);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ffdb 	bl	8004000 <StringFIFOUsed>
 800404a:	4603      	mov	r3, r0
 800404c:	81fb      	strh	r3, [r7, #14]
  int16_t available = FIFO_BUFFER_SIZE - used - 1; // don't use the last byte, otherwise we won't know that we're full
 800404e:	89fb      	ldrh	r3, [r7, #14]
 8004050:	f1c3 03f9 	rsb	r3, r3, #249	; 0xf9
 8004054:	b29b      	uxth	r3, r3
 8004056:	81bb      	strh	r3, [r7, #12]
  return available;
 8004058:	89bb      	ldrh	r3, [r7, #12]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <StringFIFOAdd>:

uint8_t StringFIFOAdd(struct sStringFIFO* fifo, uint8_t* item, size_t size)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  int16_t available = StringFIFOAvailable(fifo);
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7ff ffe3 	bl	800403c <StringFIFOAvailable>
 8004076:	4603      	mov	r3, r0
 8004078:	82fb      	strh	r3, [r7, #22]

  if (available == 0)
 800407a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <StringFIFOAdd+0x28>
  {
    printf("Fifo full\n");
 8004082:	4817      	ldr	r0, [pc, #92]	; (80040e0 <StringFIFOAdd+0x7c>)
 8004084:	f00b fbc2 	bl	800f80c <puts>
    return 1;
 8004088:	2301      	movs	r3, #1
 800408a:	e025      	b.n	80040d8 <StringFIFOAdd+0x74>
  }

  if (size > available)
 800408c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	d902      	bls.n	800409c <StringFIFOAdd+0x38>
    size = available;
 8004096:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800409a:	607b      	str	r3, [r7, #4]

  memcpy(&fifo->buffer[fifo->tail], item, size);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80040a2:	461a      	mov	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f00a fc7d 	bl	800e9ac <memcpy>
  fifo->tail = (fifo->tail + size) % FIFO_BUFFER_SIZE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80040b8:	461a      	mov	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	441a      	add	r2, r3
 80040be:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <StringFIFOAdd+0x80>)
 80040c0:	fba3 1302 	umull	r1, r3, r3, r2
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	21fa      	movs	r1, #250	; 0xfa
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  return 0;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	08014970 	.word	0x08014970
 80040e4:	10624dd3 	.word	0x10624dd3

080040e8 <StringFIFORemove>:

uint8_t StringFIFORemove(struct sStringFIFO* fifo, uint8_t* string)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint16_t i, pos;
  uint16_t used = StringFIFOUsed(fifo);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff ff84 	bl	8004000 <StringFIFOUsed>
 80040f8:	4603      	mov	r3, r0
 80040fa:	81fb      	strh	r3, [r7, #14]
  uint16_t h_length, t_length;
  int16_t len;

  if (fifo->head == fifo->tail)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 20fa 	ldrb.w	r2, [r3, #250]	; 0xfa
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004108:	429a      	cmp	r2, r3
 800410a:	d101      	bne.n	8004110 <StringFIFORemove+0x28>
  {
	  //printf("Empty fifo.\n");
    return 3;
 800410c:	2303      	movs	r3, #3
 800410e:	e09e      	b.n	800424e <StringFIFORemove+0x166>
  }

  for (i=0; i<used; i++)
 8004110:	2300      	movs	r3, #0
 8004112:	82fb      	strh	r3, [r7, #22]
 8004114:	e095      	b.n	8004242 <StringFIFORemove+0x15a>
  {
    pos = (fifo->head + i) % FIFO_BUFFER_SIZE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800411c:	461a      	mov	r2, r3
 800411e:	8afb      	ldrh	r3, [r7, #22]
 8004120:	4413      	add	r3, r2
 8004122:	4a4d      	ldr	r2, [pc, #308]	; (8004258 <StringFIFORemove+0x170>)
 8004124:	fb82 1203 	smull	r1, r2, r2, r3
 8004128:	1111      	asrs	r1, r2, #4
 800412a:	17da      	asrs	r2, r3, #31
 800412c:	1a8a      	subs	r2, r1, r2
 800412e:	21fa      	movs	r1, #250	; 0xfa
 8004130:	fb01 f202 	mul.w	r2, r1, r2
 8004134:	1a9a      	subs	r2, r3, r2
 8004136:	4613      	mov	r3, r2
 8004138:	81bb      	strh	r3, [r7, #12]
    if ((fifo->buffer[pos] == '\n') || (fifo->buffer[pos] == '\r'))
 800413a:	89bb      	ldrh	r3, [r7, #12]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	5cd3      	ldrb	r3, [r2, r3]
 8004140:	2b0a      	cmp	r3, #10
 8004142:	d004      	beq.n	800414e <StringFIFORemove+0x66>
 8004144:	89bb      	ldrh	r3, [r7, #12]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	5cd3      	ldrb	r3, [r2, r3]
 800414a:	2b0d      	cmp	r3, #13
 800414c:	d176      	bne.n	800423c <StringFIFORemove+0x154>
    {
      if (i == 0)
 800414e:	8afb      	ldrh	r3, [r7, #22]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d116      	bne.n	8004182 <StringFIFORemove+0x9a>
      {
        fifo->head = (fifo->head + 1) % FIFO_BUFFER_SIZE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800415a:	3301      	adds	r3, #1
 800415c:	4a3e      	ldr	r2, [pc, #248]	; (8004258 <StringFIFORemove+0x170>)
 800415e:	fb82 1203 	smull	r1, r2, r2, r3
 8004162:	1111      	asrs	r1, r2, #4
 8004164:	17da      	asrs	r2, r3, #31
 8004166:	1a8a      	subs	r2, r1, r2
 8004168:	21fa      	movs	r1, #250	; 0xfa
 800416a:	fb01 f202 	mul.w	r2, r1, r2
 800416e:	1a9a      	subs	r2, r3, r2
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
        string[0] = 0;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2200      	movs	r2, #0
 800417c:	701a      	strb	r2, [r3, #0]
//        printf("Zero length string in fifo.\n");
        return 1;
 800417e:	2301      	movs	r3, #1
 8004180:	e065      	b.n	800424e <StringFIFORemove+0x166>
      }
      len = (pos - fifo->head);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004188:	b29b      	uxth	r3, r3
 800418a:	89ba      	ldrh	r2, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	b29b      	uxth	r3, r3
 8004190:	823b      	strh	r3, [r7, #16]
      if (len < 0)
 8004192:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	da03      	bge.n	80041a2 <StringFIFORemove+0xba>
        len += FIFO_BUFFER_SIZE;
 800419a:	8a3b      	ldrh	r3, [r7, #16]
 800419c:	33fa      	adds	r3, #250	; 0xfa
 800419e:	b29b      	uxth	r3, r3
 80041a0:	823b      	strh	r3, [r7, #16]
      if (len > (FIFO_BUFFER_SIZE - fifo->head))
 80041a2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80041ac:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 80041b0:	429a      	cmp	r2, r3
 80041b2:	dd0b      	ble.n	80041cc <StringFIFORemove+0xe4>
      {
        h_length = FIFO_BUFFER_SIZE - fifo->head;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 80041c0:	82bb      	strh	r3, [r7, #20]
        t_length = len - h_length;
 80041c2:	8a3a      	ldrh	r2, [r7, #16]
 80041c4:	8abb      	ldrh	r3, [r7, #20]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	827b      	strh	r3, [r7, #18]
 80041ca:	e003      	b.n	80041d4 <StringFIFORemove+0xec>
      }
      else
      {
        h_length = len;
 80041cc:	8a3b      	ldrh	r3, [r7, #16]
 80041ce:	82bb      	strh	r3, [r7, #20]
        t_length = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	827b      	strh	r3, [r7, #18]
      }
      memcpy(string, &fifo->buffer[fifo->head], h_length);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80041da:	461a      	mov	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4413      	add	r3, r2
 80041e0:	8aba      	ldrh	r2, [r7, #20]
 80041e2:	4619      	mov	r1, r3
 80041e4:	6838      	ldr	r0, [r7, #0]
 80041e6:	f00a fbe1 	bl	800e9ac <memcpy>
      if (t_length)
 80041ea:	8a7b      	ldrh	r3, [r7, #18]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d007      	beq.n	8004200 <StringFIFORemove+0x118>
        memcpy(&string[h_length], fifo->buffer, t_length);
 80041f0:	8abb      	ldrh	r3, [r7, #20]
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	4413      	add	r3, r2
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	8a7a      	ldrh	r2, [r7, #18]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f00a fbd6 	bl	800e9ac <memcpy>
      fifo->head = (fifo->head + len + 1) % FIFO_BUFFER_SIZE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004206:	461a      	mov	r2, r3
 8004208:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800420c:	4413      	add	r3, r2
 800420e:	3301      	adds	r3, #1
 8004210:	4a11      	ldr	r2, [pc, #68]	; (8004258 <StringFIFORemove+0x170>)
 8004212:	fb82 1203 	smull	r1, r2, r2, r3
 8004216:	1111      	asrs	r1, r2, #4
 8004218:	17da      	asrs	r2, r3, #31
 800421a:	1a8a      	subs	r2, r1, r2
 800421c:	21fa      	movs	r1, #250	; 0xfa
 800421e:	fb01 f202 	mul.w	r2, r1, r2
 8004222:	1a9a      	subs	r2, r3, r2
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      string[len] = 0;
 800422c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	4413      	add	r3, r2
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
      return 0;
 8004238:	2300      	movs	r3, #0
 800423a:	e008      	b.n	800424e <StringFIFORemove+0x166>
  for (i=0; i<used; i++)
 800423c:	8afb      	ldrh	r3, [r7, #22]
 800423e:	3301      	adds	r3, #1
 8004240:	82fb      	strh	r3, [r7, #22]
 8004242:	8afa      	ldrh	r2, [r7, #22]
 8004244:	89fb      	ldrh	r3, [r7, #14]
 8004246:	429a      	cmp	r2, r3
 8004248:	f4ff af65 	bcc.w	8004116 <StringFIFORemove+0x2e>
    }
  }
//  printf("Fifo has no terminator\n");
  return 2;
 800424c:	2302      	movs	r3, #2
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	10624dd3 	.word	0x10624dd3

0800425c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
	return 1;
 8004260:	2301      	movs	r3, #1
}
 8004262:	4618      	mov	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <_kill>:

int _kill(int pid, int sig)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004276:	f00a fb6f 	bl	800e958 <__errno>
 800427a:	4603      	mov	r3, r0
 800427c:	2216      	movs	r2, #22
 800427e:	601a      	str	r2, [r3, #0]
	return -1;
 8004280:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_exit>:

void _exit (int status)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004294:	f04f 31ff 	mov.w	r1, #4294967295
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff ffe7 	bl	800426c <_kill>
	while (1) {}		/* Make sure we hang here */
 800429e:	e7fe      	b.n	800429e <_exit+0x12>

080042a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	e00a      	b.n	80042c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042b2:	f3af 8000 	nop.w
 80042b6:	4601      	mov	r1, r0
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	60ba      	str	r2, [r7, #8]
 80042be:	b2ca      	uxtb	r2, r1
 80042c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	3301      	adds	r3, #1
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	dbf0      	blt.n	80042b2 <_read+0x12>
	}

return len;
 80042d0:	687b      	ldr	r3, [r7, #4]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <_close>:
	}
	return len;
}

int _close(int file)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
	return -1;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004302:	605a      	str	r2, [r3, #4]
	return 0;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <_isatty>:

int _isatty(int file)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
	return 1;
 800431a:	2301      	movs	r3, #1
}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
	return 0;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800434c:	4a14      	ldr	r2, [pc, #80]	; (80043a0 <_sbrk+0x5c>)
 800434e:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <_sbrk+0x60>)
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004358:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <_sbrk+0x64>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d102      	bne.n	8004366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004360:	4b11      	ldr	r3, [pc, #68]	; (80043a8 <_sbrk+0x64>)
 8004362:	4a12      	ldr	r2, [pc, #72]	; (80043ac <_sbrk+0x68>)
 8004364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <_sbrk+0x64>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4413      	add	r3, r2
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	429a      	cmp	r2, r3
 8004372:	d207      	bcs.n	8004384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004374:	f00a faf0 	bl	800e958 <__errno>
 8004378:	4603      	mov	r3, r0
 800437a:	220c      	movs	r2, #12
 800437c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800437e:	f04f 33ff 	mov.w	r3, #4294967295
 8004382:	e009      	b.n	8004398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004384:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <_sbrk+0x64>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800438a:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <_sbrk+0x64>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4413      	add	r3, r2
 8004392:	4a05      	ldr	r2, [pc, #20]	; (80043a8 <_sbrk+0x64>)
 8004394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004396:	68fb      	ldr	r3, [r7, #12]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20030000 	.word	0x20030000
 80043a4:	00000400 	.word	0x00000400
 80043a8:	20001d5c 	.word	0x20001d5c
 80043ac:	20003150 	.word	0x20003150

080043b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043b4:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <SystemInit+0x20>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	4a05      	ldr	r2, [pc, #20]	; (80043d0 <SystemInit+0x20>)
 80043bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80043d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800440c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043d8:	480d      	ldr	r0, [pc, #52]	; (8004410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043da:	490e      	ldr	r1, [pc, #56]	; (8004414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043dc:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043e0:	e002      	b.n	80043e8 <LoopCopyDataInit>

080043e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043e6:	3304      	adds	r3, #4

080043e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043ec:	d3f9      	bcc.n	80043e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ee:	4a0b      	ldr	r2, [pc, #44]	; (800441c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043f0:	4c0b      	ldr	r4, [pc, #44]	; (8004420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043f4:	e001      	b.n	80043fa <LoopFillZerobss>

080043f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043f8:	3204      	adds	r2, #4

080043fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043fc:	d3fb      	bcc.n	80043f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043fe:	f7ff ffd7 	bl	80043b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004402:	f00a faaf 	bl	800e964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004406:	f7ff f865 	bl	80034d4 <main>
  bx  lr    
 800440a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800440c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004414:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8004418:	08015664 	.word	0x08015664
  ldr r2, =_sbss
 800441c:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8004420:	20003150 	.word	0x20003150

08004424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004424:	e7fe      	b.n	8004424 <ADC_IRQHandler>
	...

08004428 <HAL_Init>:
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
 800442c:	4b0e      	ldr	r3, [pc, #56]	; (8004468 <HAL_Init+0x40>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a0d      	ldr	r2, [pc, #52]	; (8004468 <HAL_Init+0x40>)
 8004432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_Init+0x40>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a0a      	ldr	r2, [pc, #40]	; (8004468 <HAL_Init+0x40>)
 800443e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4b08      	ldr	r3, [pc, #32]	; (8004468 <HAL_Init+0x40>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a07      	ldr	r2, [pc, #28]	; (8004468 <HAL_Init+0x40>)
 800444a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	2003      	movs	r0, #3
 8004452:	f000 f94f 	bl	80046f4 <HAL_NVIC_SetPriorityGrouping>
 8004456:	200f      	movs	r0, #15
 8004458:	f000 f808 	bl	800446c <HAL_InitTick>
 800445c:	f7ff fc0e 	bl	8003c7c <HAL_MspInit>
 8004460:	2300      	movs	r3, #0
 8004462:	4618      	mov	r0, r3
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023c00 	.word	0x40023c00

0800446c <HAL_InitTick>:
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <HAL_InitTick+0x54>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <HAL_InitTick+0x58>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	4619      	mov	r1, r3
 800447e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004482:	fbb3 f3f1 	udiv	r3, r3, r1
 8004486:	fbb2 f3f3 	udiv	r3, r2, r3
 800448a:	4618      	mov	r0, r3
 800448c:	f000 f967 	bl	800475e <HAL_SYSTICK_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_InitTick+0x2e>
 8004496:	2301      	movs	r3, #1
 8004498:	e00e      	b.n	80044b8 <HAL_InitTick+0x4c>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b0f      	cmp	r3, #15
 800449e:	d80a      	bhi.n	80044b6 <HAL_InitTick+0x4a>
 80044a0:	2200      	movs	r2, #0
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	f000 f92f 	bl	800470a <HAL_NVIC_SetPriority>
 80044ac:	4a06      	ldr	r2, [pc, #24]	; (80044c8 <HAL_InitTick+0x5c>)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_InitTick+0x4c>
 80044b6:	2301      	movs	r3, #1
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20000014 	.word	0x20000014
 80044c4:	2000001c 	.word	0x2000001c
 80044c8:	20000018 	.word	0x20000018

080044cc <HAL_IncTick>:
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_IncTick+0x20>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <HAL_IncTick+0x24>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4413      	add	r3, r2
 80044dc:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <HAL_IncTick+0x24>)
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	bf00      	nop
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	2000001c 	.word	0x2000001c
 80044f0:	20001d60 	.word	0x20001d60

080044f4 <HAL_GetTick>:
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <HAL_GetTick+0x14>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20001d60 	.word	0x20001d60

0800450c <HAL_Delay>:
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	f7ff ffee 	bl	80044f4 <HAL_GetTick>
 8004518:	60b8      	str	r0, [r7, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d005      	beq.n	8004532 <HAL_Delay+0x26>
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HAL_Delay+0x44>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	bf00      	nop
 8004534:	f7ff ffde 	bl	80044f4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	429a      	cmp	r2, r3
 8004542:	d8f7      	bhi.n	8004534 <HAL_Delay+0x28>
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	2000001c 	.word	0x2000001c

08004554 <__NVIC_SetPriorityGrouping>:
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <__NVIC_SetPriorityGrouping+0x44>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004570:	4013      	ands	r3, r2
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	021a      	lsls	r2, r3, #8
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	4a04      	ldr	r2, [pc, #16]	; (8004598 <__NVIC_SetPriorityGrouping+0x44>)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	60d3      	str	r3, [r2, #12]
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	e000ed00 	.word	0xe000ed00

0800459c <__NVIC_GetPriorityGrouping>:
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <__NVIC_GetPriorityGrouping+0x18>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	0a1b      	lsrs	r3, r3, #8
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	4618      	mov	r0, r3
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	e000ed00 	.word	0xe000ed00

080045b8 <__NVIC_EnableIRQ>:
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	71fb      	strb	r3, [r7, #7]
 80045c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	db0b      	blt.n	80045e2 <__NVIC_EnableIRQ+0x2a>
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	f003 021f 	and.w	r2, r3, #31
 80045d0:	4907      	ldr	r1, [pc, #28]	; (80045f0 <__NVIC_EnableIRQ+0x38>)
 80045d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d6:	095b      	lsrs	r3, r3, #5
 80045d8:	2001      	movs	r0, #1
 80045da:	fa00 f202 	lsl.w	r2, r0, r2
 80045de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	e000e100 	.word	0xe000e100

080045f4 <__NVIC_SetPriority>:
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	6039      	str	r1, [r7, #0]
 80045fe:	71fb      	strb	r3, [r7, #7]
 8004600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004604:	2b00      	cmp	r3, #0
 8004606:	db0a      	blt.n	800461e <__NVIC_SetPriority+0x2a>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	490c      	ldr	r1, [pc, #48]	; (8004640 <__NVIC_SetPriority+0x4c>)
 800460e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004612:	0112      	lsls	r2, r2, #4
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	440b      	add	r3, r1
 8004618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800461c:	e00a      	b.n	8004634 <__NVIC_SetPriority+0x40>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	b2da      	uxtb	r2, r3
 8004622:	4908      	ldr	r1, [pc, #32]	; (8004644 <__NVIC_SetPriority+0x50>)
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	3b04      	subs	r3, #4
 800462c:	0112      	lsls	r2, r2, #4
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	440b      	add	r3, r1
 8004632:	761a      	strb	r2, [r3, #24]
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	e000e100 	.word	0xe000e100
 8004644:	e000ed00 	.word	0xe000ed00

08004648 <NVIC_EncodePriority>:
 8004648:	b480      	push	{r7}
 800464a:	b089      	sub	sp, #36	; 0x24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f1c3 0307 	rsb	r3, r3, #7
 8004662:	2b04      	cmp	r3, #4
 8004664:	bf28      	it	cs
 8004666:	2304      	movcs	r3, #4
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	3304      	adds	r3, #4
 800466e:	2b06      	cmp	r3, #6
 8004670:	d902      	bls.n	8004678 <NVIC_EncodePriority+0x30>
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	3b03      	subs	r3, #3
 8004676:	e000      	b.n	800467a <NVIC_EncodePriority+0x32>
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	f04f 32ff 	mov.w	r2, #4294967295
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43da      	mvns	r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	401a      	ands	r2, r3
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	409a      	lsls	r2, r3
 8004690:	f04f 31ff 	mov.w	r1, #4294967295
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	fa01 f303 	lsl.w	r3, r1, r3
 800469a:	43d9      	mvns	r1, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	400b      	ands	r3, r1
 80046a0:	4313      	orrs	r3, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	3724      	adds	r7, #36	; 0x24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <SysTick_Config>:
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046c0:	d301      	bcc.n	80046c6 <SysTick_Config+0x16>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e00f      	b.n	80046e6 <SysTick_Config+0x36>
 80046c6:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <SysTick_Config+0x40>)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	6053      	str	r3, [r2, #4]
 80046ce:	210f      	movs	r1, #15
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295
 80046d4:	f7ff ff8e 	bl	80045f4 <__NVIC_SetPriority>
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <SysTick_Config+0x40>)
 80046da:	2200      	movs	r2, #0
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <SysTick_Config+0x40>)
 80046e0:	2207      	movs	r2, #7
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	2300      	movs	r3, #0
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	e000e010 	.word	0xe000e010

080046f4 <HAL_NVIC_SetPriorityGrouping>:
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff ff29 	bl	8004554 <__NVIC_SetPriorityGrouping>
 8004702:	bf00      	nop
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_NVIC_SetPriority>:
 800470a:	b580      	push	{r7, lr}
 800470c:	b086      	sub	sp, #24
 800470e:	af00      	add	r7, sp, #0
 8004710:	4603      	mov	r3, r0
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
 8004716:	73fb      	strb	r3, [r7, #15]
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	f7ff ff3e 	bl	800459c <__NVIC_GetPriorityGrouping>
 8004720:	6178      	str	r0, [r7, #20]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	6978      	ldr	r0, [r7, #20]
 8004728:	f7ff ff8e 	bl	8004648 <NVIC_EncodePriority>
 800472c:	4602      	mov	r2, r0
 800472e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004732:	4611      	mov	r1, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff ff5d 	bl	80045f4 <__NVIC_SetPriority>
 800473a:	bf00      	nop
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_NVIC_EnableIRQ>:
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	4603      	mov	r3, r0
 800474a:	71fb      	strb	r3, [r7, #7]
 800474c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff ff31 	bl	80045b8 <__NVIC_EnableIRQ>
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_SYSTICK_Config>:
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff ffa2 	bl	80046b0 <SysTick_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_DMA_Abort_IT>:
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d004      	beq.n	8004794 <HAL_DMA_Abort_IT+0x1e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2280      	movs	r2, #128	; 0x80
 800478e:	655a      	str	r2, [r3, #84]	; 0x54
 8004790:	2301      	movs	r3, #1
 8004792:	e00c      	b.n	80047ae <HAL_DMA_Abort_IT+0x38>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2205      	movs	r2, #5
 8004798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0201 	bic.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	2300      	movs	r3, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_DMA_GetState>:
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <HAL_GPIO_Init>:
 80047d8:	b480      	push	{r7}
 80047da:	b089      	sub	sp, #36	; 0x24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	2300      	movs	r3, #0
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	e177      	b.n	8004ae4 <HAL_GPIO_Init+0x30c>
 80047f4:	2201      	movs	r2, #1
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4013      	ands	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	429a      	cmp	r2, r3
 800480e:	f040 8166 	bne.w	8004ade <HAL_GPIO_Init+0x306>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b01      	cmp	r3, #1
 800481c:	d005      	beq.n	800482a <HAL_GPIO_Init+0x52>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d130      	bne.n	800488c <HAL_GPIO_Init+0xb4>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2203      	movs	r2, #3
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4013      	ands	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	609a      	str	r2, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	61bb      	str	r3, [r7, #24]
 8004860:	2201      	movs	r2, #1
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	43db      	mvns	r3, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4013      	ands	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 0201 	and.w	r2, r3, #1
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	605a      	str	r2, [r3, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	2b03      	cmp	r3, #3
 8004896:	d017      	beq.n	80048c8 <HAL_GPIO_Init+0xf0>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	2203      	movs	r2, #3
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	43db      	mvns	r3, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4013      	ands	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d123      	bne.n	800491c <HAL_GPIO_Init+0x144>
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	08da      	lsrs	r2, r3, #3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3208      	adds	r2, #8
 80048dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	220f      	movs	r2, #15
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	08da      	lsrs	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3208      	adds	r2, #8
 8004916:	69b9      	ldr	r1, [r7, #24]
 8004918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	61bb      	str	r3, [r7, #24]
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	2203      	movs	r2, #3
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	43db      	mvns	r3, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4013      	ands	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 0203 	and.w	r2, r3, #3
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80c0 	beq.w	8004ade <HAL_GPIO_Init+0x306>
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	4b66      	ldr	r3, [pc, #408]	; (8004afc <HAL_GPIO_Init+0x324>)
 8004964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004966:	4a65      	ldr	r2, [pc, #404]	; (8004afc <HAL_GPIO_Init+0x324>)
 8004968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800496c:	6453      	str	r3, [r2, #68]	; 0x44
 800496e:	4b63      	ldr	r3, [pc, #396]	; (8004afc <HAL_GPIO_Init+0x324>)
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4a61      	ldr	r2, [pc, #388]	; (8004b00 <HAL_GPIO_Init+0x328>)
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	3302      	adds	r3, #2
 8004982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004986:	61bb      	str	r3, [r7, #24]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	220f      	movs	r2, #15
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a58      	ldr	r2, [pc, #352]	; (8004b04 <HAL_GPIO_Init+0x32c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d037      	beq.n	8004a16 <HAL_GPIO_Init+0x23e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a57      	ldr	r2, [pc, #348]	; (8004b08 <HAL_GPIO_Init+0x330>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d031      	beq.n	8004a12 <HAL_GPIO_Init+0x23a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a56      	ldr	r2, [pc, #344]	; (8004b0c <HAL_GPIO_Init+0x334>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d02b      	beq.n	8004a0e <HAL_GPIO_Init+0x236>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a55      	ldr	r2, [pc, #340]	; (8004b10 <HAL_GPIO_Init+0x338>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d025      	beq.n	8004a0a <HAL_GPIO_Init+0x232>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a54      	ldr	r2, [pc, #336]	; (8004b14 <HAL_GPIO_Init+0x33c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01f      	beq.n	8004a06 <HAL_GPIO_Init+0x22e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a53      	ldr	r2, [pc, #332]	; (8004b18 <HAL_GPIO_Init+0x340>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d019      	beq.n	8004a02 <HAL_GPIO_Init+0x22a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a52      	ldr	r2, [pc, #328]	; (8004b1c <HAL_GPIO_Init+0x344>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <HAL_GPIO_Init+0x226>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a51      	ldr	r2, [pc, #324]	; (8004b20 <HAL_GPIO_Init+0x348>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00d      	beq.n	80049fa <HAL_GPIO_Init+0x222>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a50      	ldr	r2, [pc, #320]	; (8004b24 <HAL_GPIO_Init+0x34c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d007      	beq.n	80049f6 <HAL_GPIO_Init+0x21e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a4f      	ldr	r2, [pc, #316]	; (8004b28 <HAL_GPIO_Init+0x350>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d101      	bne.n	80049f2 <HAL_GPIO_Init+0x21a>
 80049ee:	2309      	movs	r3, #9
 80049f0:	e012      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 80049f2:	230a      	movs	r3, #10
 80049f4:	e010      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 80049f6:	2308      	movs	r3, #8
 80049f8:	e00e      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 80049fa:	2307      	movs	r3, #7
 80049fc:	e00c      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 80049fe:	2306      	movs	r3, #6
 8004a00:	e00a      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 8004a02:	2305      	movs	r3, #5
 8004a04:	e008      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 8004a06:	2304      	movs	r3, #4
 8004a08:	e006      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e004      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e002      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 8004a16:	2300      	movs	r3, #0
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	f002 0203 	and.w	r2, r2, #3
 8004a1e:	0092      	lsls	r2, r2, #2
 8004a20:	4093      	lsls	r3, r2
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
 8004a28:	4935      	ldr	r1, [pc, #212]	; (8004b00 <HAL_GPIO_Init+0x328>)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	089b      	lsrs	r3, r3, #2
 8004a2e:	3302      	adds	r3, #2
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004a36:	4b3d      	ldr	r3, [pc, #244]	; (8004b2c <HAL_GPIO_Init+0x354>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4013      	ands	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_GPIO_Init+0x282>
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	4a34      	ldr	r2, [pc, #208]	; (8004b2c <HAL_GPIO_Init+0x354>)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	6093      	str	r3, [r2, #8]
 8004a60:	4b32      	ldr	r3, [pc, #200]	; (8004b2c <HAL_GPIO_Init+0x354>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_GPIO_Init+0x2ac>
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	4a29      	ldr	r2, [pc, #164]	; (8004b2c <HAL_GPIO_Init+0x354>)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	60d3      	str	r3, [r2, #12]
 8004a8a:	4b28      	ldr	r3, [pc, #160]	; (8004b2c <HAL_GPIO_Init+0x354>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	61bb      	str	r3, [r7, #24]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	43db      	mvns	r3, r3
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4013      	ands	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_Init+0x2d6>
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	4a1f      	ldr	r2, [pc, #124]	; (8004b2c <HAL_GPIO_Init+0x354>)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	6053      	str	r3, [r2, #4]
 8004ab4:	4b1d      	ldr	r3, [pc, #116]	; (8004b2c <HAL_GPIO_Init+0x354>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	43db      	mvns	r3, r3
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_GPIO_Init+0x300>
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <HAL_GPIO_Init+0x354>)
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	2b0f      	cmp	r3, #15
 8004ae8:	f67f ae84 	bls.w	80047f4 <HAL_GPIO_Init+0x1c>
 8004aec:	bf00      	nop
 8004aee:	bf00      	nop
 8004af0:	3724      	adds	r7, #36	; 0x24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40013800 	.word	0x40013800
 8004b04:	40020000 	.word	0x40020000
 8004b08:	40020400 	.word	0x40020400
 8004b0c:	40020800 	.word	0x40020800
 8004b10:	40020c00 	.word	0x40020c00
 8004b14:	40021000 	.word	0x40021000
 8004b18:	40021400 	.word	0x40021400
 8004b1c:	40021800 	.word	0x40021800
 8004b20:	40021c00 	.word	0x40021c00
 8004b24:	40022000 	.word	0x40022000
 8004b28:	40022400 	.word	0x40022400
 8004b2c:	40013c00 	.word	0x40013c00

08004b30 <HAL_GPIO_WritePin>:
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	807b      	strh	r3, [r7, #2]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	707b      	strb	r3, [r7, #1]
 8004b40:	787b      	ldrb	r3, [r7, #1]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_GPIO_WritePin+0x1e>
 8004b46:	887a      	ldrh	r2, [r7, #2]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	619a      	str	r2, [r3, #24]
 8004b4c:	e003      	b.n	8004b56 <HAL_GPIO_WritePin+0x26>
 8004b4e:	887b      	ldrh	r3, [r7, #2]
 8004b50:	041a      	lsls	r2, r3, #16
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	619a      	str	r2, [r3, #24]
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_I2C_Init>:
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_I2C_Init+0x12>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e12b      	b.n	8004dce <HAL_I2C_Init+0x26a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_I2C_Init+0x2c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff f89e 	bl	8003ccc <HAL_I2C_MspInit>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2224      	movs	r2, #36	; 0x24
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	f004 fba4 	bl	8009314 <HAL_RCC_GetPCLK1Freq>
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4a81      	ldr	r2, [pc, #516]	; (8004dd8 <HAL_I2C_Init+0x274>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d807      	bhi.n	8004be8 <HAL_I2C_Init+0x84>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a80      	ldr	r2, [pc, #512]	; (8004ddc <HAL_I2C_Init+0x278>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	bf94      	ite	ls
 8004be0:	2301      	movls	r3, #1
 8004be2:	2300      	movhi	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	e006      	b.n	8004bf6 <HAL_I2C_Init+0x92>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4a7d      	ldr	r2, [pc, #500]	; (8004de0 <HAL_I2C_Init+0x27c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	bf94      	ite	ls
 8004bf0:	2301      	movls	r3, #1
 8004bf2:	2300      	movhi	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_I2C_Init+0x9a>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e0e7      	b.n	8004dce <HAL_I2C_Init+0x26a>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4a78      	ldr	r2, [pc, #480]	; (8004de4 <HAL_I2C_Init+0x280>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	0c9b      	lsrs	r3, r3, #18
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a6a      	ldr	r2, [pc, #424]	; (8004dd8 <HAL_I2C_Init+0x274>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d802      	bhi.n	8004c38 <HAL_I2C_Init+0xd4>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	3301      	adds	r3, #1
 8004c36:	e009      	b.n	8004c4c <HAL_I2C_Init+0xe8>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	4a69      	ldr	r2, [pc, #420]	; (8004de8 <HAL_I2C_Init+0x284>)
 8004c44:	fba2 2303 	umull	r2, r3, r2, r3
 8004c48:	099b      	lsrs	r3, r3, #6
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6213      	str	r3, [r2, #32]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69db      	ldr	r3, [r3, #28]
 8004c5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	495c      	ldr	r1, [pc, #368]	; (8004dd8 <HAL_I2C_Init+0x274>)
 8004c68:	428b      	cmp	r3, r1
 8004c6a:	d819      	bhi.n	8004ca0 <HAL_I2C_Init+0x13c>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1e59      	subs	r1, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c7a:	1c59      	adds	r1, r3, #1
 8004c7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c80:	400b      	ands	r3, r1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_I2C_Init+0x138>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1e59      	subs	r1, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c94:	3301      	adds	r3, #1
 8004c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c9a:	e051      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	e04f      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d111      	bne.n	8004ccc <HAL_I2C_Init+0x168>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1e58      	subs	r0, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6859      	ldr	r1, [r3, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	440b      	add	r3, r1
 8004cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e012      	b.n	8004cf2 <HAL_I2C_Init+0x18e>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1e58      	subs	r0, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6859      	ldr	r1, [r3, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	0099      	lsls	r1, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_I2C_Init+0x196>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e022      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10e      	bne.n	8004d20 <HAL_I2C_Init+0x1bc>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1e58      	subs	r0, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	440b      	add	r3, r1
 8004d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d14:	3301      	adds	r3, #1
 8004d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1e:	e00f      	b.n	8004d40 <HAL_I2C_Init+0x1dc>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	1e58      	subs	r0, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6859      	ldr	r1, [r3, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	0099      	lsls	r1, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d36:	3301      	adds	r3, #1
 8004d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	6809      	ldr	r1, [r1, #0]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61cb      	str	r3, [r1, #28]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69da      	ldr	r2, [r3, #28]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6911      	ldr	r1, [r2, #16]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68d2      	ldr	r2, [r2, #12]
 8004d7a:	4311      	orrs	r1, r2
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	430b      	orrs	r3, r1
 8004d82:	6093      	str	r3, [r2, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695a      	ldr	r2, [r3, #20]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	60da      	str	r2, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	000186a0 	.word	0x000186a0
 8004ddc:	001e847f 	.word	0x001e847f
 8004de0:	003d08ff 	.word	0x003d08ff
 8004de4:	431bde83 	.word	0x431bde83
 8004de8:	10624dd3 	.word	0x10624dd3

08004dec <HAL_I2C_Master_Transmit>:
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	461a      	mov	r2, r3
 8004df8:	460b      	mov	r3, r1
 8004dfa:	817b      	strh	r3, [r7, #10]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	813b      	strh	r3, [r7, #8]
 8004e00:	f7ff fb78 	bl	80044f4 <HAL_GetTick>
 8004e04:	6178      	str	r0, [r7, #20]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	f040 80e0 	bne.w	8004fd4 <HAL_I2C_Master_Transmit+0x1e8>
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	2319      	movs	r3, #25
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	4970      	ldr	r1, [pc, #448]	; (8004fe0 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f002 f8e6 	bl	8006ff0 <I2C_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_I2C_Master_Transmit+0x42>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e0d3      	b.n	8004fd6 <HAL_I2C_Master_Transmit+0x1ea>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_I2C_Master_Transmit+0x50>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e0cc      	b.n	8004fd6 <HAL_I2C_Master_Transmit+0x1ea>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d007      	beq.n	8004e62 <HAL_I2C_Master_Transmit+0x76>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0201 	orr.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2221      	movs	r2, #33	; 0x21
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2210      	movs	r2, #16
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	893a      	ldrh	r2, [r7, #8]
 8004e92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	851a      	strh	r2, [r3, #40]	; 0x28
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a50      	ldr	r2, [pc, #320]	; (8004fe4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004ea2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ea4:	8979      	ldrh	r1, [r7, #10]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	6a3a      	ldr	r2, [r7, #32]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f001 fea8 	bl	8006c00 <I2C_MasterRequestWrite>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_I2C_Master_Transmit+0xce>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e08d      	b.n	8004fd6 <HAL_I2C_Master_Transmit+0x1ea>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	e066      	b.n	8004fa0 <HAL_I2C_Master_Transmit+0x1b4>
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	6a39      	ldr	r1, [r7, #32]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f002 f960 	bl	800719c <I2C_WaitOnTXEFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00d      	beq.n	8004efe <HAL_I2C_Master_Transmit+0x112>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d107      	bne.n	8004efa <HAL_I2C_Master_Transmit+0x10e>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	2301      	movs	r3, #1
 8004efc:	e06b      	b.n	8004fd6 <HAL_I2C_Master_Transmit+0x1ea>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	781a      	ldrb	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	611a      	str	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d11b      	bne.n	8004f74 <HAL_I2C_Master_Transmit+0x188>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d017      	beq.n	8004f74 <HAL_I2C_Master_Transmit+0x188>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	611a      	str	r2, [r3, #16]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	6a39      	ldr	r1, [r7, #32]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f002 f950 	bl	800721e <I2C_WaitOnBTFFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00d      	beq.n	8004fa0 <HAL_I2C_Master_Transmit+0x1b4>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d107      	bne.n	8004f9c <HAL_I2C_Master_Transmit+0x1b0>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e01a      	b.n	8004fd6 <HAL_I2C_Master_Transmit+0x1ea>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d194      	bne.n	8004ed2 <HAL_I2C_Master_Transmit+0xe6>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e000      	b.n	8004fd6 <HAL_I2C_Master_Transmit+0x1ea>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	00100002 	.word	0x00100002
 8004fe4:	ffff0000 	.word	0xffff0000

08004fe8 <HAL_I2C_Master_Receive>:
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	; 0x30
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	817b      	strh	r3, [r7, #10]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	813b      	strh	r3, [r7, #8]
 8004ffc:	f7ff fa7a 	bl	80044f4 <HAL_GetTick>
 8005000:	6278      	str	r0, [r7, #36]	; 0x24
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b20      	cmp	r3, #32
 800500c:	f040 820b 	bne.w	8005426 <HAL_I2C_Master_Receive+0x43e>
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	2319      	movs	r3, #25
 8005016:	2201      	movs	r2, #1
 8005018:	497c      	ldr	r1, [pc, #496]	; (800520c <HAL_I2C_Master_Receive+0x224>)
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f001 ffe8 	bl	8006ff0 <I2C_WaitOnFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <HAL_I2C_Master_Receive+0x42>
 8005026:	2302      	movs	r3, #2
 8005028:	e1fe      	b.n	8005428 <HAL_I2C_Master_Receive+0x440>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_I2C_Master_Receive+0x50>
 8005034:	2302      	movs	r3, #2
 8005036:	e1f7      	b.n	8005428 <HAL_I2C_Master_Receive+0x440>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d007      	beq.n	800505e <HAL_I2C_Master_Receive+0x76>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0201 	orr.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2222      	movs	r2, #34	; 0x22
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2210      	movs	r2, #16
 800507a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	641a      	str	r2, [r3, #64]	; 0x40
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	625a      	str	r2, [r3, #36]	; 0x24
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	893a      	ldrh	r2, [r7, #8]
 800508e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	851a      	strh	r2, [r3, #40]	; 0x28
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4a5c      	ldr	r2, [pc, #368]	; (8005210 <HAL_I2C_Master_Receive+0x228>)
 800509e:	62da      	str	r2, [r3, #44]	; 0x2c
 80050a0:	8979      	ldrh	r1, [r7, #10]
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f001 fe2c 	bl	8006d04 <I2C_MasterRequestRead>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <HAL_I2C_Master_Receive+0xce>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e1b8      	b.n	8005428 <HAL_I2C_Master_Receive+0x440>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d113      	bne.n	80050e6 <HAL_I2C_Master_Receive+0xfe>
 80050be:	2300      	movs	r3, #0
 80050c0:	623b      	str	r3, [r7, #32]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	623b      	str	r3, [r7, #32]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	623b      	str	r3, [r7, #32]
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	e18c      	b.n	8005400 <HAL_I2C_Master_Receive+0x418>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d11b      	bne.n	8005126 <HAL_I2C_Master_Receive+0x13e>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	2300      	movs	r3, #0
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	61fb      	str	r3, [r7, #28]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	61fb      	str	r3, [r7, #28]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	e16c      	b.n	8005400 <HAL_I2C_Master_Receive+0x418>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512a:	2b02      	cmp	r3, #2
 800512c:	d11b      	bne.n	8005166 <HAL_I2C_Master_Receive+0x17e>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	e14c      	b.n	8005400 <HAL_I2C_Master_Receive+0x418>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	e138      	b.n	8005400 <HAL_I2C_Master_Receive+0x418>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005192:	2b03      	cmp	r3, #3
 8005194:	f200 80f1 	bhi.w	800537a <HAL_I2C_Master_Receive+0x392>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519c:	2b01      	cmp	r3, #1
 800519e:	d123      	bne.n	80051e8 <HAL_I2C_Master_Receive+0x200>
 80051a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f002 f8ad 	bl	8007304 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_I2C_Master_Receive+0x1cc>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e139      	b.n	8005428 <HAL_I2C_Master_Receive+0x440>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	625a      	str	r2, [r3, #36]	; 0x24
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	851a      	strh	r2, [r3, #40]	; 0x28
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051e6:	e10b      	b.n	8005400 <HAL_I2C_Master_Receive+0x418>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d14e      	bne.n	800528e <HAL_I2C_Master_Receive+0x2a6>
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	2200      	movs	r2, #0
 80051f8:	4906      	ldr	r1, [pc, #24]	; (8005214 <HAL_I2C_Master_Receive+0x22c>)
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f001 fef8 	bl	8006ff0 <I2C_WaitOnFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d008      	beq.n	8005218 <HAL_I2C_Master_Receive+0x230>
 8005206:	2301      	movs	r3, #1
 8005208:	e10e      	b.n	8005428 <HAL_I2C_Master_Receive+0x440>
 800520a:	bf00      	nop
 800520c:	00100002 	.word	0x00100002
 8005210:	ffff0000 	.word	0xffff0000
 8005214:	00010004 	.word	0x00010004
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	625a      	str	r2, [r3, #36]	; 0x24
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	851a      	strh	r2, [r3, #40]	; 0x28
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	855a      	strh	r2, [r3, #42]	; 0x2a
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	625a      	str	r2, [r3, #36]	; 0x24
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	851a      	strh	r2, [r3, #40]	; 0x28
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800528c:	e0b8      	b.n	8005400 <HAL_I2C_Master_Receive+0x418>
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	2200      	movs	r2, #0
 8005296:	4966      	ldr	r1, [pc, #408]	; (8005430 <HAL_I2C_Master_Receive+0x448>)
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f001 fea9 	bl	8006ff0 <I2C_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_I2C_Master_Receive+0x2c0>
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0bf      	b.n	8005428 <HAL_I2C_Master_Receive+0x440>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	625a      	str	r2, [r3, #36]	; 0x24
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	851a      	strh	r2, [r3, #40]	; 0x28
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	2200      	movs	r2, #0
 80052f2:	494f      	ldr	r1, [pc, #316]	; (8005430 <HAL_I2C_Master_Receive+0x448>)
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f001 fe7b 	bl	8006ff0 <I2C_WaitOnFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <HAL_I2C_Master_Receive+0x31c>
 8005300:	2301      	movs	r3, #1
 8005302:	e091      	b.n	8005428 <HAL_I2C_Master_Receive+0x440>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691a      	ldr	r2, [r3, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	625a      	str	r2, [r3, #36]	; 0x24
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	851a      	strh	r2, [r3, #40]	; 0x28
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	625a      	str	r2, [r3, #36]	; 0x24
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	851a      	strh	r2, [r3, #40]	; 0x28
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005378:	e042      	b.n	8005400 <HAL_I2C_Master_Receive+0x418>
 800537a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f001 ffc0 	bl	8007304 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_I2C_Master_Receive+0x3a6>
 800538a:	2301      	movs	r3, #1
 800538c:	e04c      	b.n	8005428 <HAL_I2C_Master_Receive+0x440>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d118      	bne.n	8005400 <HAL_I2C_Master_Receive+0x418>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	851a      	strh	r2, [r3, #40]	; 0x28
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005404:	2b00      	cmp	r3, #0
 8005406:	f47f aec2 	bne.w	800518e <HAL_I2C_Master_Receive+0x1a6>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005422:	2300      	movs	r3, #0
 8005424:	e000      	b.n	8005428 <HAL_I2C_Master_Receive+0x440>
 8005426:	2302      	movs	r3, #2
 8005428:	4618      	mov	r0, r3
 800542a:	3728      	adds	r7, #40	; 0x28
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	00010004 	.word	0x00010004

08005434 <HAL_I2C_EV_IRQHandler>:
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	2300      	movs	r3, #0
 800543e:	61bb      	str	r3, [r7, #24]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005454:	73fb      	strb	r3, [r7, #15]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545c:	73bb      	strb	r3, [r7, #14]
 800545e:	7bfb      	ldrb	r3, [r7, #15]
 8005460:	2b10      	cmp	r3, #16
 8005462:	d003      	beq.n	800546c <HAL_I2C_EV_IRQHandler+0x38>
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	f040 80c1 	bne.w	80055ee <HAL_I2C_EV_IRQHandler+0x1ba>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	61fb      	str	r3, [r7, #28]
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10d      	bne.n	80054a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800548c:	d003      	beq.n	8005496 <HAL_I2C_EV_IRQHandler+0x62>
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005494:	d101      	bne.n	800549a <HAL_I2C_EV_IRQHandler+0x66>
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <HAL_I2C_EV_IRQHandler+0x68>
 800549a:	2300      	movs	r3, #0
 800549c:	2b01      	cmp	r3, #1
 800549e:	f000 8132 	beq.w	8005706 <HAL_I2C_EV_IRQHandler+0x2d2>
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00c      	beq.n	80054c6 <HAL_I2C_EV_IRQHandler+0x92>
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	0a5b      	lsrs	r3, r3, #9
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d006      	beq.n	80054c6 <HAL_I2C_EV_IRQHandler+0x92>
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f001 ffa8 	bl	800740e <I2C_ConvertOtherXferOptions>
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fd83 	bl	8005fca <I2C_Master_SB>
 80054c4:	e092      	b.n	80055ec <HAL_I2C_EV_IRQHandler+0x1b8>
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	08db      	lsrs	r3, r3, #3
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <HAL_I2C_EV_IRQHandler+0xb2>
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	0a5b      	lsrs	r3, r3, #9
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_I2C_EV_IRQHandler+0xb2>
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fdf9 	bl	80060d6 <I2C_Master_ADD10>
 80054e4:	e082      	b.n	80055ec <HAL_I2C_EV_IRQHandler+0x1b8>
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	085b      	lsrs	r3, r3, #1
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <HAL_I2C_EV_IRQHandler+0xd2>
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	0a5b      	lsrs	r3, r3, #9
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_I2C_EV_IRQHandler+0xd2>
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fe13 	bl	800612a <I2C_Master_ADDR>
 8005504:	e072      	b.n	80055ec <HAL_I2C_EV_IRQHandler+0x1b8>
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	089b      	lsrs	r3, r3, #2
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d03b      	beq.n	800558a <HAL_I2C_EV_IRQHandler+0x156>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005520:	f000 80f3 	beq.w	800570a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	09db      	lsrs	r3, r3, #7
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00f      	beq.n	8005550 <HAL_I2C_EV_IRQHandler+0x11c>
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	0a9b      	lsrs	r3, r3, #10
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d009      	beq.n	8005550 <HAL_I2C_EV_IRQHandler+0x11c>
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	089b      	lsrs	r3, r3, #2
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d103      	bne.n	8005550 <HAL_I2C_EV_IRQHandler+0x11c>
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f9f3 	bl	8005934 <I2C_MasterTransmit_TXE>
 800554e:	e04d      	b.n	80055ec <HAL_I2C_EV_IRQHandler+0x1b8>
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	089b      	lsrs	r3, r3, #2
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80d6 	beq.w	800570a <HAL_I2C_EV_IRQHandler+0x2d6>
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	0a5b      	lsrs	r3, r3, #9
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 80cf 	beq.w	800570a <HAL_I2C_EV_IRQHandler+0x2d6>
 800556c:	7bbb      	ldrb	r3, [r7, #14]
 800556e:	2b21      	cmp	r3, #33	; 0x21
 8005570:	d103      	bne.n	800557a <HAL_I2C_EV_IRQHandler+0x146>
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fa7a 	bl	8005a6c <I2C_MasterTransmit_BTF>
 8005578:	e0c7      	b.n	800570a <HAL_I2C_EV_IRQHandler+0x2d6>
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	f040 80c4 	bne.w	800570a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fae8 	bl	8005b58 <I2C_MemoryTransmit_TXE_BTF>
 8005588:	e0bf      	b.n	800570a <HAL_I2C_EV_IRQHandler+0x2d6>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005598:	f000 80b7 	beq.w	800570a <HAL_I2C_EV_IRQHandler+0x2d6>
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	099b      	lsrs	r3, r3, #6
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00f      	beq.n	80055c8 <HAL_I2C_EV_IRQHandler+0x194>
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	0a9b      	lsrs	r3, r3, #10
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d009      	beq.n	80055c8 <HAL_I2C_EV_IRQHandler+0x194>
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	089b      	lsrs	r3, r3, #2
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d103      	bne.n	80055c8 <HAL_I2C_EV_IRQHandler+0x194>
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fb5d 	bl	8005c80 <I2C_MasterReceive_RXNE>
 80055c6:	e011      	b.n	80055ec <HAL_I2C_EV_IRQHandler+0x1b8>
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	089b      	lsrs	r3, r3, #2
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 809a 	beq.w	800570a <HAL_I2C_EV_IRQHandler+0x2d6>
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	0a5b      	lsrs	r3, r3, #9
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 8093 	beq.w	800570a <HAL_I2C_EV_IRQHandler+0x2d6>
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fc06 	bl	8005df6 <I2C_MasterReceive_BTF>
 80055ea:	e08e      	b.n	800570a <HAL_I2C_EV_IRQHandler+0x2d6>
 80055ec:	e08d      	b.n	800570a <HAL_I2C_EV_IRQHandler+0x2d6>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <HAL_I2C_EV_IRQHandler+0x1cc>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	e007      	b.n	8005610 <HAL_I2C_EV_IRQHandler+0x1dc>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	61fb      	str	r3, [r7, #28]
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	085b      	lsrs	r3, r3, #1
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d012      	beq.n	8005642 <HAL_I2C_EV_IRQHandler+0x20e>
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	0a5b      	lsrs	r3, r3, #9
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00c      	beq.n	8005642 <HAL_I2C_EV_IRQHandler+0x20e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_I2C_EV_IRQHandler+0x204>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	69b9      	ldr	r1, [r7, #24]
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 ffc4 	bl	80065c8 <I2C_Slave_ADDR>
 8005640:	e066      	b.n	8005710 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <HAL_I2C_EV_IRQHandler+0x22e>
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	0a5b      	lsrs	r3, r3, #9
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_I2C_EV_IRQHandler+0x22e>
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fffe 	bl	800665c <I2C_Slave_STOPF>
 8005660:	e056      	b.n	8005710 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005662:	7bbb      	ldrb	r3, [r7, #14]
 8005664:	2b21      	cmp	r3, #33	; 0x21
 8005666:	d002      	beq.n	800566e <HAL_I2C_EV_IRQHandler+0x23a>
 8005668:	7bbb      	ldrb	r3, [r7, #14]
 800566a:	2b29      	cmp	r3, #41	; 0x29
 800566c:	d125      	bne.n	80056ba <HAL_I2C_EV_IRQHandler+0x286>
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	09db      	lsrs	r3, r3, #7
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00f      	beq.n	800569a <HAL_I2C_EV_IRQHandler+0x266>
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	0a9b      	lsrs	r3, r3, #10
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d009      	beq.n	800569a <HAL_I2C_EV_IRQHandler+0x266>
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	089b      	lsrs	r3, r3, #2
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d103      	bne.n	800569a <HAL_I2C_EV_IRQHandler+0x266>
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 feda 	bl	800644c <I2C_SlaveTransmit_TXE>
 8005698:	e039      	b.n	800570e <HAL_I2C_EV_IRQHandler+0x2da>
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	089b      	lsrs	r3, r3, #2
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d033      	beq.n	800570e <HAL_I2C_EV_IRQHandler+0x2da>
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	0a5b      	lsrs	r3, r3, #9
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d02d      	beq.n	800570e <HAL_I2C_EV_IRQHandler+0x2da>
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 ff07 	bl	80064c6 <I2C_SlaveTransmit_BTF>
 80056b8:	e029      	b.n	800570e <HAL_I2C_EV_IRQHandler+0x2da>
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	099b      	lsrs	r3, r3, #6
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00f      	beq.n	80056e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	0a9b      	lsrs	r3, r3, #10
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d009      	beq.n	80056e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	089b      	lsrs	r3, r3, #2
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d103      	bne.n	80056e6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 ff12 	bl	8006508 <I2C_SlaveReceive_RXNE>
 80056e4:	e014      	b.n	8005710 <HAL_I2C_EV_IRQHandler+0x2dc>
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	089b      	lsrs	r3, r3, #2
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00e      	beq.n	8005710 <HAL_I2C_EV_IRQHandler+0x2dc>
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	0a5b      	lsrs	r3, r3, #9
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d008      	beq.n	8005710 <HAL_I2C_EV_IRQHandler+0x2dc>
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 ff40 	bl	8006584 <I2C_SlaveReceive_BTF>
 8005704:	e004      	b.n	8005710 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005706:	bf00      	nop
 8005708:	e002      	b.n	8005710 <HAL_I2C_EV_IRQHandler+0x2dc>
 800570a:	bf00      	nop
 800570c:	e000      	b.n	8005710 <HAL_I2C_EV_IRQHandler+0x2dc>
 800570e:	bf00      	nop
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_I2C_ER_IRQHandler>:
 8005716:	b580      	push	{r7, lr}
 8005718:	b08a      	sub	sp, #40	; 0x28
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	623b      	str	r3, [r7, #32]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	61fb      	str	r3, [r7, #28]
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005738:	76fb      	strb	r3, [r7, #27]
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	0a1b      	lsrs	r3, r3, #8
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00e      	beq.n	8005764 <HAL_I2C_ER_IRQHandler+0x4e>
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	0a1b      	lsrs	r3, r3, #8
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d008      	beq.n	8005764 <HAL_I2C_ER_IRQHandler+0x4e>
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	f043 0301 	orr.w	r3, r3, #1
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005762:	615a      	str	r2, [r3, #20]
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	0a5b      	lsrs	r3, r3, #9
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00e      	beq.n	800578e <HAL_I2C_ER_IRQHandler+0x78>
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	0a1b      	lsrs	r3, r3, #8
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <HAL_I2C_ER_IRQHandler+0x78>
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	f043 0302 	orr.w	r3, r3, #2
 8005782:	627b      	str	r3, [r7, #36]	; 0x24
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800578c:	615a      	str	r2, [r3, #20]
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	0a9b      	lsrs	r3, r3, #10
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d03f      	beq.n	800581a <HAL_I2C_ER_IRQHandler+0x104>
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	0a1b      	lsrs	r3, r3, #8
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d039      	beq.n	800581a <HAL_I2C_ER_IRQHandler+0x104>
 80057a6:	7efb      	ldrb	r3, [r7, #27]
 80057a8:	76bb      	strb	r3, [r7, #26]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	74fb      	strb	r3, [r7, #19]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	7ebb      	ldrb	r3, [r7, #26]
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d112      	bne.n	80057ec <HAL_I2C_ER_IRQHandler+0xd6>
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10f      	bne.n	80057ec <HAL_I2C_ER_IRQHandler+0xd6>
 80057cc:	7cfb      	ldrb	r3, [r7, #19]
 80057ce:	2b21      	cmp	r3, #33	; 0x21
 80057d0:	d008      	beq.n	80057e4 <HAL_I2C_ER_IRQHandler+0xce>
 80057d2:	7cfb      	ldrb	r3, [r7, #19]
 80057d4:	2b29      	cmp	r3, #41	; 0x29
 80057d6:	d005      	beq.n	80057e4 <HAL_I2C_ER_IRQHandler+0xce>
 80057d8:	7cfb      	ldrb	r3, [r7, #19]
 80057da:	2b28      	cmp	r3, #40	; 0x28
 80057dc:	d106      	bne.n	80057ec <HAL_I2C_ER_IRQHandler+0xd6>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b21      	cmp	r3, #33	; 0x21
 80057e2:	d103      	bne.n	80057ec <HAL_I2C_ER_IRQHandler+0xd6>
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 f869 	bl	80068bc <I2C_Slave_AF>
 80057ea:	e016      	b.n	800581a <HAL_I2C_ER_IRQHandler+0x104>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057f4:	615a      	str	r2, [r3, #20]
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	f043 0304 	orr.w	r3, r3, #4
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
 80057fe:	7efb      	ldrb	r3, [r7, #27]
 8005800:	2b10      	cmp	r3, #16
 8005802:	d002      	beq.n	800580a <HAL_I2C_ER_IRQHandler+0xf4>
 8005804:	7efb      	ldrb	r3, [r7, #27]
 8005806:	2b40      	cmp	r3, #64	; 0x40
 8005808:	d107      	bne.n	800581a <HAL_I2C_ER_IRQHandler+0x104>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	0adb      	lsrs	r3, r3, #11
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00e      	beq.n	8005844 <HAL_I2C_ER_IRQHandler+0x12e>
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	0a1b      	lsrs	r3, r3, #8
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d008      	beq.n	8005844 <HAL_I2C_ER_IRQHandler+0x12e>
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	f043 0308 	orr.w	r3, r3, #8
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005842:	615a      	str	r2, [r3, #20]
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	2b00      	cmp	r3, #0
 8005848:	d008      	beq.n	800585c <HAL_I2C_ER_IRQHandler+0x146>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	431a      	orrs	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	641a      	str	r2, [r3, #64]	; 0x40
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f001 f8a0 	bl	800699c <I2C_ITError>
 800585c:	bf00      	nop
 800585e:	3728      	adds	r7, #40	; 0x28
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_I2C_MasterTxCpltCallback>:
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_I2C_MasterRxCpltCallback>:
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_I2C_SlaveTxCpltCallback>:
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_I2C_SlaveRxCpltCallback>:
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_I2C_AddrCallback>:
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	70fb      	strb	r3, [r7, #3]
 80058c0:	4613      	mov	r3, r2
 80058c2:	803b      	strh	r3, [r7, #0]
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_I2C_ListenCpltCallback>:
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_I2C_MemTxCpltCallback>:
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_I2C_MemRxCpltCallback>:
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_I2C_ErrorCallback>:
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_I2C_AbortCpltCallback>:
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <I2C_MasterTransmit_TXE>:
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005942:	73fb      	strb	r3, [r7, #15]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800594a:	73bb      	strb	r3, [r7, #14]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	d150      	bne.n	80059fc <I2C_MasterTransmit_TXE+0xc8>
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b21      	cmp	r3, #33	; 0x21
 800595e:	d14d      	bne.n	80059fc <I2C_MasterTransmit_TXE+0xc8>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b08      	cmp	r3, #8
 8005964:	d01d      	beq.n	80059a2 <I2C_MasterTransmit_TXE+0x6e>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b20      	cmp	r3, #32
 800596a:	d01a      	beq.n	80059a2 <I2C_MasterTransmit_TXE+0x6e>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005972:	d016      	beq.n	80059a2 <I2C_MasterTransmit_TXE+0x6e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005982:	605a      	str	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2211      	movs	r2, #17
 8005988:	631a      	str	r2, [r3, #48]	; 0x30
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff ff62 	bl	8005864 <HAL_I2C_MasterTxCpltCallback>
 80059a0:	e060      	b.n	8005a64 <I2C_MasterTransmit_TXE+0x130>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059b0:	605a      	str	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b40      	cmp	r3, #64	; 0x40
 80059da:	d107      	bne.n	80059ec <I2C_MasterTransmit_TXE+0xb8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff ff7d 	bl	80058e4 <HAL_I2C_MemTxCpltCallback>
 80059ea:	e03b      	b.n	8005a64 <I2C_MasterTransmit_TXE+0x130>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff ff35 	bl	8005864 <HAL_I2C_MasterTxCpltCallback>
 80059fa:	e033      	b.n	8005a64 <I2C_MasterTransmit_TXE+0x130>
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	2b21      	cmp	r3, #33	; 0x21
 8005a00:	d005      	beq.n	8005a0e <I2C_MasterTransmit_TXE+0xda>
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	2b40      	cmp	r3, #64	; 0x40
 8005a06:	d12d      	bne.n	8005a64 <I2C_MasterTransmit_TXE+0x130>
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b22      	cmp	r3, #34	; 0x22
 8005a0c:	d12a      	bne.n	8005a64 <I2C_MasterTransmit_TXE+0x130>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d108      	bne.n	8005a2a <I2C_MasterTransmit_TXE+0xf6>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a26:	605a      	str	r2, [r3, #4]
 8005a28:	e01c      	b.n	8005a64 <I2C_MasterTransmit_TXE+0x130>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d103      	bne.n	8005a3e <I2C_MasterTransmit_TXE+0x10a>
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f88e 	bl	8005b58 <I2C_MemoryTransmit_TXE_BTF>
 8005a3c:	e012      	b.n	8005a64 <I2C_MasterTransmit_TXE+0x130>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	781a      	ldrb	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	611a      	str	r2, [r3, #16]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	625a      	str	r2, [r3, #36]	; 0x24
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a62:	e7ff      	b.n	8005a64 <I2C_MasterTransmit_TXE+0x130>
 8005a64:	bf00      	nop
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <I2C_MasterTransmit_BTF>:
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b21      	cmp	r3, #33	; 0x21
 8005a84:	d164      	bne.n	8005b50 <I2C_MasterTransmit_BTF+0xe4>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d012      	beq.n	8005ab6 <I2C_MasterTransmit_BTF+0x4a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	781a      	ldrb	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	611a      	str	r2, [r3, #16]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	625a      	str	r2, [r3, #36]	; 0x24
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ab4:	e04c      	b.n	8005b50 <I2C_MasterTransmit_BTF+0xe4>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d01d      	beq.n	8005af8 <I2C_MasterTransmit_BTF+0x8c>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	d01a      	beq.n	8005af8 <I2C_MasterTransmit_BTF+0x8c>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ac8:	d016      	beq.n	8005af8 <I2C_MasterTransmit_BTF+0x8c>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2211      	movs	r2, #17
 8005ade:	631a      	str	r2, [r3, #48]	; 0x30
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff feb7 	bl	8005864 <HAL_I2C_MasterTxCpltCallback>
 8005af6:	e02b      	b.n	8005b50 <I2C_MasterTransmit_BTF+0xe4>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b06:	605a      	str	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	d107      	bne.n	8005b42 <I2C_MasterTransmit_BTF+0xd6>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff fed2 	bl	80058e4 <HAL_I2C_MemTxCpltCallback>
 8005b40:	e006      	b.n	8005b50 <I2C_MasterTransmit_BTF+0xe4>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff fe8a 	bl	8005864 <HAL_I2C_MasterTxCpltCallback>
 8005b50:	bf00      	nop
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <I2C_MemoryTransmit_TXE_BTF>:
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b66:	73fb      	strb	r3, [r7, #15]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d11d      	bne.n	8005bac <I2C_MemoryTransmit_TXE_BTF+0x54>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d10b      	bne.n	8005b90 <I2C_MemoryTransmit_TXE_BTF+0x38>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	611a      	str	r2, [r3, #16]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b88:	1c9a      	adds	r2, r3, #2
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	651a      	str	r2, [r3, #80]	; 0x50
 8005b8e:	e073      	b.n	8005c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	121b      	asrs	r3, r3, #8
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	611a      	str	r2, [r3, #16]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	651a      	str	r2, [r3, #80]	; 0x50
 8005baa:	e065      	b.n	8005c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d10b      	bne.n	8005bcc <I2C_MemoryTransmit_TXE_BTF+0x74>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	611a      	str	r2, [r3, #16]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	651a      	str	r2, [r3, #80]	; 0x50
 8005bca:	e055      	b.n	8005c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d151      	bne.n	8005c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	2b22      	cmp	r3, #34	; 0x22
 8005bd8:	d10d      	bne.n	8005bf6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	651a      	str	r2, [r3, #80]	; 0x50
 8005bf4:	e040      	b.n	8005c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d015      	beq.n	8005c2c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
 8005c02:	2b21      	cmp	r3, #33	; 0x21
 8005c04:	d112      	bne.n	8005c2c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	781a      	ldrb	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	611a      	str	r2, [r3, #16]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	625a      	str	r2, [r3, #36]	; 0x24
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c2a:	e025      	b.n	8005c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d120      	bne.n	8005c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	2b21      	cmp	r3, #33	; 0x21
 8005c3a:	d11d      	bne.n	8005c78 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c4a:	605a      	str	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	631a      	str	r2, [r3, #48]	; 0x30
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7ff fe36 	bl	80058e4 <HAL_I2C_MemTxCpltCallback>
 8005c78:	bf00      	nop
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <I2C_MasterReceive_RXNE>:
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b22      	cmp	r3, #34	; 0x22
 8005c92:	f040 80ac 	bne.w	8005dee <I2C_MasterReceive_RXNE+0x16e>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d921      	bls.n	8005ce8 <I2C_MasterReceive_RXNE+0x68>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	625a      	str	r2, [r3, #36]	; 0x24
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	f040 808c 	bne.w	8005dee <I2C_MasterReceive_RXNE+0x16e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce4:	605a      	str	r2, [r3, #4]
 8005ce6:	e082      	b.n	8005dee <I2C_MasterReceive_RXNE+0x16e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d075      	beq.n	8005ddc <I2C_MasterReceive_RXNE+0x15c>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d002      	beq.n	8005cfc <I2C_MasterReceive_RXNE+0x7c>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d16f      	bne.n	8005ddc <I2C_MasterReceive_RXNE+0x15c>
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f001 facf 	bl	80072a0 <I2C_WaitOnSTOPRequestThroughIT>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d142      	bne.n	8005d8e <I2C_MasterReceive_RXNE+0x10e>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d26:	605a      	str	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	625a      	str	r2, [r3, #36]	; 0x24
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b40      	cmp	r3, #64	; 0x40
 8005d60:	d10a      	bne.n	8005d78 <I2C_MasterReceive_RXNE+0xf8>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff fdc1 	bl	80058f8 <HAL_I2C_MemRxCpltCallback>
 8005d76:	e03a      	b.n	8005dee <I2C_MasterReceive_RXNE+0x16e>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2212      	movs	r2, #18
 8005d84:	631a      	str	r2, [r3, #48]	; 0x30
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff fd76 	bl	8005878 <HAL_I2C_MasterRxCpltCallback>
 8005d8c:	e02f      	b.n	8005dee <I2C_MasterReceive_RXNE+0x16e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d9c:	605a      	str	r2, [r3, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	625a      	str	r2, [r3, #36]	; 0x24
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff fd99 	bl	800590c <HAL_I2C_ErrorCallback>
 8005dda:	e008      	b.n	8005dee <I2C_MasterReceive_RXNE+0x16e>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dea:	605a      	str	r2, [r3, #4]
 8005dec:	e7ff      	b.n	8005dee <I2C_MasterReceive_RXNE+0x16e>
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <I2C_MasterReceive_BTF>:
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d11b      	bne.n	8005e46 <I2C_MasterReceive_BTF+0x50>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	625a      	str	r2, [r3, #36]	; 0x24
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e44:	e0bd      	b.n	8005fc2 <I2C_MasterReceive_BTF+0x1cc>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d129      	bne.n	8005ea4 <I2C_MasterReceive_BTF+0xae>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5e:	605a      	str	r2, [r3, #4]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	d00a      	beq.n	8005e7c <I2C_MasterReceive_BTF+0x86>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d007      	beq.n	8005e7c <I2C_MasterReceive_BTF+0x86>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	625a      	str	r2, [r3, #36]	; 0x24
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ea2:	e08e      	b.n	8005fc2 <I2C_MasterReceive_BTF+0x1cc>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d176      	bne.n	8005f9c <I2C_MasterReceive_BTF+0x1a6>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d002      	beq.n	8005eba <I2C_MasterReceive_BTF+0xc4>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b10      	cmp	r3, #16
 8005eb8:	d108      	bne.n	8005ecc <I2C_MasterReceive_BTF+0xd6>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e019      	b.n	8005f00 <I2C_MasterReceive_BTF+0x10a>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d002      	beq.n	8005ed8 <I2C_MasterReceive_BTF+0xe2>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d108      	bne.n	8005eea <I2C_MasterReceive_BTF+0xf4>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	e00a      	b.n	8005f00 <I2C_MasterReceive_BTF+0x10a>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b10      	cmp	r3, #16
 8005eee:	d007      	beq.n	8005f00 <I2C_MasterReceive_BTF+0x10a>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	625a      	str	r2, [r3, #36]	; 0x24
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	625a      	str	r2, [r3, #36]	; 0x24
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f5a:	605a      	str	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	d10a      	bne.n	8005f86 <I2C_MasterReceive_BTF+0x190>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff fcba 	bl	80058f8 <HAL_I2C_MemRxCpltCallback>
 8005f84:	e01d      	b.n	8005fc2 <I2C_MasterReceive_BTF+0x1cc>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2212      	movs	r2, #18
 8005f92:	631a      	str	r2, [r3, #48]	; 0x30
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff fc6f 	bl	8005878 <HAL_I2C_MasterRxCpltCallback>
 8005f9a:	e012      	b.n	8005fc2 <I2C_MasterReceive_BTF+0x1cc>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	625a      	str	r2, [r3, #36]	; 0x24
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fc2:	bf00      	nop
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <I2C_Master_SB>:
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b40      	cmp	r3, #64	; 0x40
 8005fdc:	d117      	bne.n	800600e <I2C_Master_SB+0x44>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d109      	bne.n	8005ffa <I2C_Master_SB+0x30>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ff6:	611a      	str	r2, [r3, #16]
 8005ff8:	e067      	b.n	80060ca <I2C_Master_SB+0x100>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f043 0301 	orr.w	r3, r3, #1
 8006004:	b2da      	uxtb	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	611a      	str	r2, [r3, #16]
 800600c:	e05d      	b.n	80060ca <I2C_Master_SB+0x100>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006016:	d133      	bne.n	8006080 <I2C_Master_SB+0xb6>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b21      	cmp	r3, #33	; 0x21
 8006022:	d109      	bne.n	8006038 <I2C_Master_SB+0x6e>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006028:	b2db      	uxtb	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006034:	611a      	str	r2, [r3, #16]
 8006036:	e008      	b.n	800604a <I2C_Master_SB+0x80>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603c:	b2db      	uxtb	r3, r3
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	b2da      	uxtb	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	611a      	str	r2, [r3, #16]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604e:	2b00      	cmp	r3, #0
 8006050:	d004      	beq.n	800605c <I2C_Master_SB+0x92>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d108      	bne.n	800606e <I2C_Master_SB+0xa4>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	2b00      	cmp	r3, #0
 8006062:	d032      	beq.n	80060ca <I2C_Master_SB+0x100>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d02d      	beq.n	80060ca <I2C_Master_SB+0x100>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800607c:	605a      	str	r2, [r3, #4]
 800607e:	e024      	b.n	80060ca <I2C_Master_SB+0x100>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10e      	bne.n	80060a6 <I2C_Master_SB+0xdc>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608c:	b29b      	uxth	r3, r3
 800608e:	11db      	asrs	r3, r3, #7
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f003 0306 	and.w	r3, r3, #6
 8006096:	b2db      	uxtb	r3, r3
 8006098:	f063 030f 	orn	r3, r3, #15
 800609c:	b2da      	uxtb	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	611a      	str	r2, [r3, #16]
 80060a4:	e011      	b.n	80060ca <I2C_Master_SB+0x100>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d10d      	bne.n	80060ca <I2C_Master_SB+0x100>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	11db      	asrs	r3, r3, #7
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	f003 0306 	and.w	r3, r3, #6
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	f063 030e 	orn	r3, r3, #14
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	611a      	str	r2, [r3, #16]
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <I2C_Master_ADD10>:
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	611a      	str	r2, [r3, #16]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d004      	beq.n	80060fc <I2C_Master_ADD10+0x26>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d108      	bne.n	800610e <I2C_Master_ADD10+0x38>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00c      	beq.n	800611e <I2C_Master_ADD10+0x48>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <I2C_Master_ADD10+0x48>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800611c:	605a      	str	r2, [r3, #4]
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <I2C_Master_ADDR>:
 800612a:	b480      	push	{r7}
 800612c:	b091      	sub	sp, #68	; 0x44
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006138:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	63bb      	str	r3, [r7, #56]	; 0x38
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b22      	cmp	r3, #34	; 0x22
 8006152:	f040 8169 	bne.w	8006428 <I2C_Master_ADDR+0x2fe>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10f      	bne.n	800617e <I2C_Master_ADDR+0x54>
 800615e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006162:	2b40      	cmp	r3, #64	; 0x40
 8006164:	d10b      	bne.n	800617e <I2C_Master_ADDR+0x54>
 8006166:	2300      	movs	r3, #0
 8006168:	633b      	str	r3, [r7, #48]	; 0x30
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	633b      	str	r3, [r7, #48]	; 0x30
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	633b      	str	r3, [r7, #48]	; 0x30
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	e160      	b.n	8006440 <I2C_Master_ADDR+0x316>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006182:	2b00      	cmp	r3, #0
 8006184:	d11d      	bne.n	80061c2 <I2C_Master_ADDR+0x98>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800618e:	d118      	bne.n	80061c2 <I2C_Master_ADDR+0x98>
 8006190:	2300      	movs	r3, #0
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	651a      	str	r2, [r3, #80]	; 0x50
 80061c0:	e13e      	b.n	8006440 <I2C_Master_ADDR+0x316>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d113      	bne.n	80061f4 <I2C_Master_ADDR+0xca>
 80061cc:	2300      	movs	r3, #0
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	62bb      	str	r3, [r7, #40]	; 0x28
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	e115      	b.n	8006420 <I2C_Master_ADDR+0x2f6>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	f040 808a 	bne.w	8006314 <I2C_Master_ADDR+0x1ea>
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006206:	d137      	bne.n	8006278 <I2C_Master_ADDR+0x14e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006226:	d113      	bne.n	8006250 <I2C_Master_ADDR+0x126>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	2300      	movs	r3, #0
 800623a:	627b      	str	r3, [r7, #36]	; 0x24
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	e0e7      	b.n	8006420 <I2C_Master_ADDR+0x2f6>
 8006250:	2300      	movs	r3, #0
 8006252:	623b      	str	r3, [r7, #32]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	623b      	str	r3, [r7, #32]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	623b      	str	r3, [r7, #32]
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	e0d3      	b.n	8006420 <I2C_Master_ADDR+0x2f6>
 8006278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627a:	2b08      	cmp	r3, #8
 800627c:	d02e      	beq.n	80062dc <I2C_Master_ADDR+0x1b2>
 800627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006280:	2b20      	cmp	r3, #32
 8006282:	d02b      	beq.n	80062dc <I2C_Master_ADDR+0x1b2>
 8006284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006286:	2b12      	cmp	r3, #18
 8006288:	d102      	bne.n	8006290 <I2C_Master_ADDR+0x166>
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	2b01      	cmp	r3, #1
 800628e:	d125      	bne.n	80062dc <I2C_Master_ADDR+0x1b2>
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	2b04      	cmp	r3, #4
 8006294:	d00e      	beq.n	80062b4 <I2C_Master_ADDR+0x18a>
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	2b02      	cmp	r3, #2
 800629a:	d00b      	beq.n	80062b4 <I2C_Master_ADDR+0x18a>
 800629c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629e:	2b10      	cmp	r3, #16
 80062a0:	d008      	beq.n	80062b4 <I2C_Master_ADDR+0x18a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	e007      	b.n	80062c4 <I2C_Master_ADDR+0x19a>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	2300      	movs	r3, #0
 80062c6:	61fb      	str	r3, [r7, #28]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	61fb      	str	r3, [r7, #28]
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	e0a1      	b.n	8006420 <I2C_Master_ADDR+0x2f6>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	2300      	movs	r3, #0
 80062ee:	61bb      	str	r3, [r7, #24]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	61bb      	str	r3, [r7, #24]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	e085      	b.n	8006420 <I2C_Master_ADDR+0x2f6>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d14d      	bne.n	80063ba <I2C_Master_ADDR+0x290>
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	2b04      	cmp	r3, #4
 8006322:	d016      	beq.n	8006352 <I2C_Master_ADDR+0x228>
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	2b02      	cmp	r3, #2
 8006328:	d013      	beq.n	8006352 <I2C_Master_ADDR+0x228>
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	2b10      	cmp	r3, #16
 800632e:	d010      	beq.n	8006352 <I2C_Master_ADDR+0x228>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	e007      	b.n	8006362 <I2C_Master_ADDR+0x238>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800636c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006370:	d117      	bne.n	80063a2 <I2C_Master_ADDR+0x278>
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006378:	d00b      	beq.n	8006392 <I2C_Master_ADDR+0x268>
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	2b01      	cmp	r3, #1
 800637e:	d008      	beq.n	8006392 <I2C_Master_ADDR+0x268>
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	2b08      	cmp	r3, #8
 8006384:	d005      	beq.n	8006392 <I2C_Master_ADDR+0x268>
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	2b10      	cmp	r3, #16
 800638a:	d002      	beq.n	8006392 <I2C_Master_ADDR+0x268>
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	2b20      	cmp	r3, #32
 8006390:	d107      	bne.n	80063a2 <I2C_Master_ADDR+0x278>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	e032      	b.n	8006420 <I2C_Master_ADDR+0x2f6>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d8:	d117      	bne.n	800640a <I2C_Master_ADDR+0x2e0>
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063e0:	d00b      	beq.n	80063fa <I2C_Master_ADDR+0x2d0>
 80063e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d008      	beq.n	80063fa <I2C_Master_ADDR+0x2d0>
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d005      	beq.n	80063fa <I2C_Master_ADDR+0x2d0>
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	2b10      	cmp	r3, #16
 80063f2:	d002      	beq.n	80063fa <I2C_Master_ADDR+0x2d0>
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d107      	bne.n	800640a <I2C_Master_ADDR+0x2e0>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006408:	605a      	str	r2, [r3, #4]
 800640a:	2300      	movs	r3, #0
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	651a      	str	r2, [r3, #80]	; 0x50
 8006426:	e00b      	b.n	8006440 <I2C_Master_ADDR+0x316>
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	e7ff      	b.n	8006440 <I2C_Master_ADDR+0x316>
 8006440:	bf00      	nop
 8006442:	3744      	adds	r7, #68	; 0x44
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <I2C_SlaveTransmit_TXE>:
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645a:	73fb      	strb	r3, [r7, #15]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006460:	b29b      	uxth	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d02b      	beq.n	80064be <I2C_SlaveTransmit_TXE+0x72>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	781a      	ldrb	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	611a      	str	r2, [r3, #16]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	625a      	str	r2, [r3, #36]	; 0x24
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	855a      	strh	r2, [r3, #42]	; 0x2a
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648e:	b29b      	uxth	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d114      	bne.n	80064be <I2C_SlaveTransmit_TXE+0x72>
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	2b29      	cmp	r3, #41	; 0x29
 8006498:	d111      	bne.n	80064be <I2C_SlaveTransmit_TXE+0x72>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a8:	605a      	str	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2221      	movs	r2, #33	; 0x21
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2228      	movs	r2, #40	; 0x28
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff f9e7 	bl	800588c <HAL_I2C_SlaveTxCpltCallback>
 80064be:	bf00      	nop
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <I2C_SlaveTransmit_BTF>:
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d011      	beq.n	80064fc <I2C_SlaveTransmit_BTF+0x36>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	781a      	ldrb	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	611a      	str	r2, [r3, #16]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	625a      	str	r2, [r3, #36]	; 0x24
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <I2C_SlaveReceive_RXNE>:
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006516:	73fb      	strb	r3, [r7, #15]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d02c      	beq.n	800657c <I2C_SlaveReceive_RXNE+0x74>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	625a      	str	r2, [r3, #36]	; 0x24
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654c:	b29b      	uxth	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d114      	bne.n	800657c <I2C_SlaveReceive_RXNE+0x74>
 8006552:	7bfb      	ldrb	r3, [r7, #15]
 8006554:	2b2a      	cmp	r3, #42	; 0x2a
 8006556:	d111      	bne.n	800657c <I2C_SlaveReceive_RXNE+0x74>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006566:	605a      	str	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2222      	movs	r2, #34	; 0x22
 800656c:	631a      	str	r2, [r3, #48]	; 0x30
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2228      	movs	r2, #40	; 0x28
 8006572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff f992 	bl	80058a0 <HAL_I2C_SlaveRxCpltCallback>
 800657c:	bf00      	nop
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <I2C_SlaveReceive_BTF>:
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d012      	beq.n	80065bc <I2C_SlaveReceive_BTF+0x38>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	625a      	str	r2, [r3, #36]	; 0x24
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <I2C_Slave_ADDR>:
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
 80065d2:	2300      	movs	r3, #0
 80065d4:	73fb      	strb	r3, [r7, #15]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065e2:	2b28      	cmp	r3, #40	; 0x28
 80065e4:	d127      	bne.n	8006636 <I2C_Slave_ADDR+0x6e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065f4:	605a      	str	r2, [r3, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	089b      	lsrs	r3, r3, #2
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <I2C_Slave_ADDR+0x3e>
 8006602:	2301      	movs	r3, #1
 8006604:	73fb      	strb	r3, [r7, #15]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	09db      	lsrs	r3, r3, #7
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <I2C_Slave_ADDR+0x52>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	81bb      	strh	r3, [r7, #12]
 8006618:	e002      	b.n	8006620 <I2C_Slave_ADDR+0x58>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	81bb      	strh	r3, [r7, #12]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006628:	89ba      	ldrh	r2, [r7, #12]
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff f940 	bl	80058b4 <HAL_I2C_AddrCallback>
 8006634:	e00e      	b.n	8006654 <I2C_Slave_ADDR+0x8c>
 8006636:	2300      	movs	r3, #0
 8006638:	60bb      	str	r3, [r7, #8]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	60bb      	str	r3, [r7, #8]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006654:	bf00      	nop
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <I2C_Slave_STOPF>:
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800666a:	73fb      	strb	r3, [r7, #15]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800667a:	605a      	str	r2, [r3, #4]
 800667c:	2300      	movs	r3, #0
 800667e:	60bb      	str	r3, [r7, #8]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	60bb      	str	r3, [r7, #8]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0201 	orr.w	r2, r2, #1
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b8:	d172      	bne.n	80067a0 <I2C_Slave_STOPF+0x144>
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	2b22      	cmp	r3, #34	; 0x22
 80066be:	d002      	beq.n	80066c6 <I2C_Slave_STOPF+0x6a>
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	2b2a      	cmp	r3, #42	; 0x2a
 80066c4:	d135      	bne.n	8006732 <I2C_Slave_STOPF+0xd6>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <I2C_Slave_STOPF+0x8e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	f043 0204 	orr.w	r2, r3, #4
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066f8:	605a      	str	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fe f85b 	bl	80047ba <HAL_DMA_GetState>
 8006704:	4603      	mov	r3, r0
 8006706:	2b01      	cmp	r3, #1
 8006708:	d049      	beq.n	800679e <I2C_Slave_STOPF+0x142>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	4a69      	ldr	r2, [pc, #420]	; (80068b4 <I2C_Slave_STOPF+0x258>)
 8006710:	651a      	str	r2, [r3, #80]	; 0x50
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe f82d 	bl	8004776 <HAL_DMA_Abort_IT>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d03d      	beq.n	800679e <I2C_Slave_STOPF+0x142>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800672c:	4610      	mov	r0, r2
 800672e:	4798      	blx	r3
 8006730:	e035      	b.n	800679e <I2C_Slave_STOPF+0x142>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	b29a      	uxth	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006744:	b29b      	uxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d005      	beq.n	8006756 <I2C_Slave_STOPF+0xfa>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674e:	f043 0204 	orr.w	r2, r3, #4
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	641a      	str	r2, [r3, #64]	; 0x40
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006764:	605a      	str	r2, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe f825 	bl	80047ba <HAL_DMA_GetState>
 8006770:	4603      	mov	r3, r0
 8006772:	2b01      	cmp	r3, #1
 8006774:	d014      	beq.n	80067a0 <I2C_Slave_STOPF+0x144>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677a:	4a4e      	ldr	r2, [pc, #312]	; (80068b4 <I2C_Slave_STOPF+0x258>)
 800677c:	651a      	str	r2, [r3, #80]	; 0x50
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006782:	4618      	mov	r0, r3
 8006784:	f7fd fff7 	bl	8004776 <HAL_DMA_Abort_IT>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d008      	beq.n	80067a0 <I2C_Slave_STOPF+0x144>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006798:	4610      	mov	r0, r2
 800679a:	4798      	blx	r3
 800679c:	e000      	b.n	80067a0 <I2C_Slave_STOPF+0x144>
 800679e:	bf00      	nop
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d03e      	beq.n	8006828 <I2C_Slave_STOPF+0x1cc>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d112      	bne.n	80067de <I2C_Slave_STOPF+0x182>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	701a      	strb	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	625a      	str	r2, [r3, #36]	; 0x24
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b40      	cmp	r3, #64	; 0x40
 80067ea:	d112      	bne.n	8006812 <I2C_Slave_STOPF+0x1b6>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691a      	ldr	r2, [r3, #16]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	625a      	str	r2, [r3, #36]	; 0x24
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006816:	b29b      	uxth	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <I2C_Slave_STOPF+0x1cc>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	f043 0204 	orr.w	r2, r3, #4
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	641a      	str	r2, [r3, #64]	; 0x40
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <I2C_Slave_STOPF+0x1dc>
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f8b3 	bl	800699c <I2C_ITError>
 8006836:	e039      	b.n	80068ac <I2C_Slave_STOPF+0x250>
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	2b2a      	cmp	r3, #42	; 0x2a
 800683c:	d109      	bne.n	8006852 <I2C_Slave_STOPF+0x1f6>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	631a      	str	r2, [r3, #48]	; 0x30
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2228      	movs	r2, #40	; 0x28
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff f827 	bl	80058a0 <HAL_I2C_SlaveRxCpltCallback>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b28      	cmp	r3, #40	; 0x28
 800685c:	d111      	bne.n	8006882 <I2C_Slave_STOPF+0x226>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a15      	ldr	r2, [pc, #84]	; (80068b8 <I2C_Slave_STOPF+0x25c>)
 8006862:	62da      	str	r2, [r3, #44]	; 0x2c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	631a      	str	r2, [r3, #48]	; 0x30
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7ff f828 	bl	80058d0 <HAL_I2C_ListenCpltCallback>
 8006880:	e014      	b.n	80068ac <I2C_Slave_STOPF+0x250>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	2b22      	cmp	r3, #34	; 0x22
 8006888:	d002      	beq.n	8006890 <I2C_Slave_STOPF+0x234>
 800688a:	7bfb      	ldrb	r3, [r7, #15]
 800688c:	2b22      	cmp	r3, #34	; 0x22
 800688e:	d10d      	bne.n	80068ac <I2C_Slave_STOPF+0x250>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	631a      	str	r2, [r3, #48]	; 0x30
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fe fffa 	bl	80058a0 <HAL_I2C_SlaveRxCpltCallback>
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	08006ea1 	.word	0x08006ea1
 80068b8:	ffff0000 	.word	0xffff0000

080068bc <I2C_Slave_AF>:
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ca:	73fb      	strb	r3, [r7, #15]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	60bb      	str	r3, [r7, #8]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d002      	beq.n	80068de <I2C_Slave_AF+0x22>
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d129      	bne.n	8006932 <I2C_Slave_AF+0x76>
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	2b28      	cmp	r3, #40	; 0x28
 80068e2:	d126      	bne.n	8006932 <I2C_Slave_AF+0x76>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a2c      	ldr	r2, [pc, #176]	; (8006998 <I2C_Slave_AF+0xdc>)
 80068e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068f8:	605a      	str	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006902:	615a      	str	r2, [r3, #20]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	631a      	str	r2, [r3, #48]	; 0x30
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fe ffd0 	bl	80058d0 <HAL_I2C_ListenCpltCallback>
 8006930:	e02e      	b.n	8006990 <I2C_Slave_AF+0xd4>
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	2b21      	cmp	r3, #33	; 0x21
 8006936:	d126      	bne.n	8006986 <I2C_Slave_AF+0xca>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a17      	ldr	r2, [pc, #92]	; (8006998 <I2C_Slave_AF+0xdc>)
 800693c:	62da      	str	r2, [r3, #44]	; 0x2c
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2221      	movs	r2, #33	; 0x21
 8006942:	631a      	str	r2, [r3, #48]	; 0x30
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2220      	movs	r2, #32
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006962:	605a      	str	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800696c:	615a      	str	r2, [r3, #20]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fe ff84 	bl	800588c <HAL_I2C_SlaveTxCpltCallback>
 8006984:	e004      	b.n	8006990 <I2C_Slave_AF+0xd4>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800698e:	615a      	str	r2, [r3, #20]
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	ffff0000 	.word	0xffff0000

0800699c <I2C_ITError>:
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069aa:	73fb      	strb	r3, [r7, #15]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069b2:	73bb      	strb	r3, [r7, #14]
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
 80069b6:	2b10      	cmp	r3, #16
 80069b8:	d002      	beq.n	80069c0 <I2C_ITError+0x24>
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	2b40      	cmp	r3, #64	; 0x40
 80069be:	d10a      	bne.n	80069d6 <I2C_ITError+0x3a>
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2b22      	cmp	r3, #34	; 0x22
 80069c4:	d107      	bne.n	80069d6 <I2C_ITError+0x3a>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069dc:	2b28      	cmp	r3, #40	; 0x28
 80069de:	d107      	bne.n	80069f0 <I2C_ITError+0x54>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	631a      	str	r2, [r3, #48]	; 0x30
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2228      	movs	r2, #40	; 0x28
 80069ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069ee:	e015      	b.n	8006a1c <I2C_ITError+0x80>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069fe:	d00a      	beq.n	8006a16 <I2C_ITError+0x7a>
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	2b60      	cmp	r3, #96	; 0x60
 8006a04:	d007      	beq.n	8006a16 <I2C_ITError+0x7a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a2a:	d162      	bne.n	8006af2 <I2C_ITError+0x156>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a3a:	605a      	str	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d020      	beq.n	8006a8c <I2C_ITError+0xf0>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4e:	4a6a      	ldr	r2, [pc, #424]	; (8006bf8 <I2C_ITError+0x25c>)
 8006a50:	651a      	str	r2, [r3, #80]	; 0x50
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fd fe8d 	bl	8004776 <HAL_DMA_Abort_IT>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8089 	beq.w	8006b76 <I2C_ITError+0x1da>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0201 	bic.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a86:	4610      	mov	r0, r2
 8006a88:	4798      	blx	r3
 8006a8a:	e074      	b.n	8006b76 <I2C_ITError+0x1da>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	4a59      	ldr	r2, [pc, #356]	; (8006bf8 <I2C_ITError+0x25c>)
 8006a92:	651a      	str	r2, [r3, #80]	; 0x50
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fd fe6c 	bl	8004776 <HAL_DMA_Abort_IT>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d068      	beq.n	8006b76 <I2C_ITError+0x1da>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d10b      	bne.n	8006aca <I2C_ITError+0x12e>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	625a      	str	r2, [r3, #36]	; 0x24
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0201 	bic.w	r2, r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006aec:	4610      	mov	r0, r2
 8006aee:	4798      	blx	r3
 8006af0:	e041      	b.n	8006b76 <I2C_ITError+0x1da>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b60      	cmp	r3, #96	; 0x60
 8006afc:	d125      	bne.n	8006b4a <I2C_ITError+0x1ae>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	641a      	str	r2, [r3, #64]	; 0x40
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d10b      	bne.n	8006b32 <I2C_ITError+0x196>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	625a      	str	r2, [r3, #36]	; 0x24
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0201 	bic.w	r2, r2, #1
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7fe feec 	bl	8005920 <HAL_I2C_AbortCpltCallback>
 8006b48:	e015      	b.n	8006b76 <I2C_ITError+0x1da>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b54:	2b40      	cmp	r3, #64	; 0x40
 8006b56:	d10b      	bne.n	8006b70 <I2C_ITError+0x1d4>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	691a      	ldr	r2, [r3, #16]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	625a      	str	r2, [r3, #36]	; 0x24
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7fe fecb 	bl	800590c <HAL_I2C_ErrorCallback>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	60bb      	str	r3, [r7, #8]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10e      	bne.n	8006ba4 <I2C_ITError+0x208>
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d109      	bne.n	8006ba4 <I2C_ITError+0x208>
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d104      	bne.n	8006ba4 <I2C_ITError+0x208>
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d007      	beq.n	8006bb4 <I2C_ITError+0x218>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bb2:	605a      	str	r2, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bba:	73fb      	strb	r3, [r7, #15]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d113      	bne.n	8006bf0 <I2C_ITError+0x254>
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	2b28      	cmp	r3, #40	; 0x28
 8006bcc:	d110      	bne.n	8006bf0 <I2C_ITError+0x254>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a0a      	ldr	r2, [pc, #40]	; (8006bfc <I2C_ITError+0x260>)
 8006bd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	631a      	str	r2, [r3, #48]	; 0x30
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7fe fe70 	bl	80058d0 <HAL_I2C_ListenCpltCallback>
 8006bf0:	bf00      	nop
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	08006ea1 	.word	0x08006ea1
 8006bfc:	ffff0000 	.word	0xffff0000

08006c00 <I2C_MasterRequestWrite>:
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	607a      	str	r2, [r7, #4]
 8006c0a:	603b      	str	r3, [r7, #0]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	817b      	strh	r3, [r7, #10]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d006      	beq.n	8006c2a <I2C_MasterRequestWrite+0x2a>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d003      	beq.n	8006c2a <I2C_MasterRequestWrite+0x2a>
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c28:	d108      	bne.n	8006c3c <I2C_MasterRequestWrite+0x3c>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	e00b      	b.n	8006c54 <I2C_MasterRequestWrite+0x54>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c40:	2b12      	cmp	r3, #18
 8006c42:	d107      	bne.n	8006c54 <I2C_MasterRequestWrite+0x54>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 f9c5 	bl	8006ff0 <I2C_WaitOnFlagUntilTimeout>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00d      	beq.n	8006c88 <I2C_MasterRequestWrite+0x88>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7a:	d103      	bne.n	8006c84 <I2C_MasterRequestWrite+0x84>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c82:	641a      	str	r2, [r3, #64]	; 0x40
 8006c84:	2303      	movs	r3, #3
 8006c86:	e035      	b.n	8006cf4 <I2C_MasterRequestWrite+0xf4>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c90:	d108      	bne.n	8006ca4 <I2C_MasterRequestWrite+0xa4>
 8006c92:	897b      	ldrh	r3, [r7, #10]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	461a      	mov	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ca0:	611a      	str	r2, [r3, #16]
 8006ca2:	e01b      	b.n	8006cdc <I2C_MasterRequestWrite+0xdc>
 8006ca4:	897b      	ldrh	r3, [r7, #10]
 8006ca6:	11db      	asrs	r3, r3, #7
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	f003 0306 	and.w	r3, r3, #6
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	f063 030f 	orn	r3, r3, #15
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	611a      	str	r2, [r3, #16]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	490e      	ldr	r1, [pc, #56]	; (8006cfc <I2C_MasterRequestWrite+0xfc>)
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 f9eb 	bl	800709e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <I2C_MasterRequestWrite+0xd2>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e010      	b.n	8006cf4 <I2C_MasterRequestWrite+0xf4>
 8006cd2:	897b      	ldrh	r3, [r7, #10]
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	611a      	str	r2, [r3, #16]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	4907      	ldr	r1, [pc, #28]	; (8006d00 <I2C_MasterRequestWrite+0x100>)
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 f9db 	bl	800709e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <I2C_MasterRequestWrite+0xf2>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e000      	b.n	8006cf4 <I2C_MasterRequestWrite+0xf4>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	00010008 	.word	0x00010008
 8006d00:	00010002 	.word	0x00010002

08006d04 <I2C_MasterRequestRead>:
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	607a      	str	r2, [r7, #4]
 8006d0e:	603b      	str	r3, [r7, #0]
 8006d10:	460b      	mov	r3, r1
 8006d12:	817b      	strh	r3, [r7, #10]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d006      	beq.n	8006d3e <I2C_MasterRequestRead+0x3a>
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d003      	beq.n	8006d3e <I2C_MasterRequestRead+0x3a>
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d3c:	d108      	bne.n	8006d50 <I2C_MasterRequestRead+0x4c>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e00b      	b.n	8006d68 <I2C_MasterRequestRead+0x64>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d54:	2b11      	cmp	r3, #17
 8006d56:	d107      	bne.n	8006d68 <I2C_MasterRequestRead+0x64>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 f93b 	bl	8006ff0 <I2C_WaitOnFlagUntilTimeout>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00d      	beq.n	8006d9c <I2C_MasterRequestRead+0x98>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d8e:	d103      	bne.n	8006d98 <I2C_MasterRequestRead+0x94>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d96:	641a      	str	r2, [r3, #64]	; 0x40
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e079      	b.n	8006e90 <I2C_MasterRequestRead+0x18c>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006da4:	d108      	bne.n	8006db8 <I2C_MasterRequestRead+0xb4>
 8006da6:	897b      	ldrh	r3, [r7, #10]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	f043 0301 	orr.w	r3, r3, #1
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	611a      	str	r2, [r3, #16]
 8006db6:	e05f      	b.n	8006e78 <I2C_MasterRequestRead+0x174>
 8006db8:	897b      	ldrh	r3, [r7, #10]
 8006dba:	11db      	asrs	r3, r3, #7
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f003 0306 	and.w	r3, r3, #6
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	f063 030f 	orn	r3, r3, #15
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	611a      	str	r2, [r3, #16]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	4930      	ldr	r1, [pc, #192]	; (8006e98 <I2C_MasterRequestRead+0x194>)
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 f961 	bl	800709e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <I2C_MasterRequestRead+0xe2>
 8006de2:	2301      	movs	r3, #1
 8006de4:	e054      	b.n	8006e90 <I2C_MasterRequestRead+0x18c>
 8006de6:	897b      	ldrh	r3, [r7, #10]
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	611a      	str	r2, [r3, #16]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	4929      	ldr	r1, [pc, #164]	; (8006e9c <I2C_MasterRequestRead+0x198>)
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f951 	bl	800709e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <I2C_MasterRequestRead+0x102>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e044      	b.n	8006e90 <I2C_MasterRequestRead+0x18c>
 8006e06:	2300      	movs	r3, #0
 8006e08:	613b      	str	r3, [r7, #16]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	613b      	str	r3, [r7, #16]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 f8d9 	bl	8006ff0 <I2C_WaitOnFlagUntilTimeout>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00d      	beq.n	8006e60 <I2C_MasterRequestRead+0x15c>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e52:	d103      	bne.n	8006e5c <I2C_MasterRequestRead+0x158>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e5a:	641a      	str	r2, [r3, #64]	; 0x40
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e017      	b.n	8006e90 <I2C_MasterRequestRead+0x18c>
 8006e60:	897b      	ldrh	r3, [r7, #10]
 8006e62:	11db      	asrs	r3, r3, #7
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	f003 0306 	and.w	r3, r3, #6
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f063 030e 	orn	r3, r3, #14
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	611a      	str	r2, [r3, #16]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4907      	ldr	r1, [pc, #28]	; (8006e9c <I2C_MasterRequestRead+0x198>)
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 f90d 	bl	800709e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <I2C_MasterRequestRead+0x18a>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e000      	b.n	8006e90 <I2C_MasterRequestRead+0x18c>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4618      	mov	r0, r3
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	00010008 	.word	0x00010008
 8006e9c:	00010002 	.word	0x00010002

08006ea0 <I2C_DMAAbort>:
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb0:	617b      	str	r3, [r7, #20]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb8:	74fb      	strb	r3, [r7, #19]
 8006eba:	4b4b      	ldr	r3, [pc, #300]	; (8006fe8 <I2C_DMAAbort+0x148>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	08db      	lsrs	r3, r3, #3
 8006ec0:	4a4a      	ldr	r2, [pc, #296]	; (8006fec <I2C_DMAAbort+0x14c>)
 8006ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec6:	0a1a      	lsrs	r2, r3, #8
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	00da      	lsls	r2, r3, #3
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d106      	bne.n	8006ee8 <I2C_DMAAbort+0x48>
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	f043 0220 	orr.w	r2, r3, #32
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	641a      	str	r2, [r3, #64]	; 0x40
 8006ee6:	e00a      	b.n	8006efe <I2C_DMAAbort+0x5e>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006efc:	d0ea      	beq.n	8006ed4 <I2C_DMAAbort+0x34>
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <I2C_DMAAbort+0x6e>
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <I2C_DMAAbort+0x7e>
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2200      	movs	r2, #0
 8006f32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <I2C_DMAAbort+0xa4>
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f40:	2200      	movs	r2, #0
 8006f42:	651a      	str	r2, [r3, #80]	; 0x50
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <I2C_DMAAbort+0xb4>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f50:	2200      	movs	r2, #0
 8006f52:	651a      	str	r2, [r3, #80]	; 0x50
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0201 	bic.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b60      	cmp	r3, #96	; 0x60
 8006f6e:	d10e      	bne.n	8006f8e <I2C_DMAAbort+0xee>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2220      	movs	r2, #32
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2200      	movs	r2, #0
 8006f84:	641a      	str	r2, [r3, #64]	; 0x40
 8006f86:	6978      	ldr	r0, [r7, #20]
 8006f88:	f7fe fcca 	bl	8005920 <HAL_I2C_AbortCpltCallback>
 8006f8c:	e027      	b.n	8006fde <I2C_DMAAbort+0x13e>
 8006f8e:	7cfb      	ldrb	r3, [r7, #19]
 8006f90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f94:	2b28      	cmp	r3, #40	; 0x28
 8006f96:	d117      	bne.n	8006fc8 <I2C_DMAAbort+0x128>
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0201 	orr.w	r2, r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2228      	movs	r2, #40	; 0x28
 8006fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006fc6:	e007      	b.n	8006fd8 <I2C_DMAAbort+0x138>
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fd8:	6978      	ldr	r0, [r7, #20]
 8006fda:	f7fe fc97 	bl	800590c <HAL_I2C_ErrorCallback>
 8006fde:	bf00      	nop
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20000014 	.word	0x20000014
 8006fec:	14f8b589 	.word	0x14f8b589

08006ff0 <I2C_WaitOnFlagUntilTimeout>:
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	603b      	str	r3, [r7, #0]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	71fb      	strb	r3, [r7, #7]
 8007000:	e025      	b.n	800704e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d021      	beq.n	800704e <I2C_WaitOnFlagUntilTimeout+0x5e>
 800700a:	f7fd fa73 	bl	80044f4 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d302      	bcc.n	8007020 <I2C_WaitOnFlagUntilTimeout+0x30>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d116      	bne.n	800704e <I2C_WaitOnFlagUntilTimeout+0x5e>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	631a      	str	r2, [r3, #48]	; 0x30
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2220      	movs	r2, #32
 800702a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	f043 0220 	orr.w	r2, r3, #32
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	641a      	str	r2, [r3, #64]	; 0x40
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800704a:	2301      	movs	r3, #1
 800704c:	e023      	b.n	8007096 <I2C_WaitOnFlagUntilTimeout+0xa6>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	0c1b      	lsrs	r3, r3, #16
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b01      	cmp	r3, #1
 8007056:	d10d      	bne.n	8007074 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	43da      	mvns	r2, r3
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	4013      	ands	r3, r2
 8007064:	b29b      	uxth	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	bf0c      	ite	eq
 800706a:	2301      	moveq	r3, #1
 800706c:	2300      	movne	r3, #0
 800706e:	b2db      	uxtb	r3, r3
 8007070:	461a      	mov	r2, r3
 8007072:	e00c      	b.n	800708e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	43da      	mvns	r2, r3
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	4013      	ands	r3, r2
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	bf0c      	ite	eq
 8007086:	2301      	moveq	r3, #1
 8007088:	2300      	movne	r3, #0
 800708a:	b2db      	uxtb	r3, r3
 800708c:	461a      	mov	r2, r3
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	429a      	cmp	r2, r3
 8007092:	d0b6      	beq.n	8007002 <I2C_WaitOnFlagUntilTimeout+0x12>
 8007094:	2300      	movs	r3, #0
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	607a      	str	r2, [r7, #4]
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	e051      	b.n	8007152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070bc:	d123      	bne.n	8007106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070d6:	615a      	str	r2, [r3, #20]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	631a      	str	r2, [r3, #48]	; 0x30
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	f043 0204 	orr.w	r2, r3, #4
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	641a      	str	r2, [r3, #64]	; 0x40
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007102:	2301      	movs	r3, #1
 8007104:	e046      	b.n	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710c:	d021      	beq.n	8007152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 800710e:	f7fd f9f1 	bl	80044f4 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	429a      	cmp	r2, r3
 800711c:	d302      	bcc.n	8007124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d116      	bne.n	8007152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	631a      	str	r2, [r3, #48]	; 0x30
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	f043 0220 	orr.w	r2, r3, #32
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	641a      	str	r2, [r3, #64]	; 0x40
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800714e:	2301      	movs	r3, #1
 8007150:	e020      	b.n	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	0c1b      	lsrs	r3, r3, #16
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b01      	cmp	r3, #1
 800715a:	d10c      	bne.n	8007176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	43da      	mvns	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4013      	ands	r3, r2
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	bf14      	ite	ne
 800716e:	2301      	movne	r3, #1
 8007170:	2300      	moveq	r3, #0
 8007172:	b2db      	uxtb	r3, r3
 8007174:	e00b      	b.n	800718e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	43da      	mvns	r2, r3
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	4013      	ands	r3, r2
 8007182:	b29b      	uxth	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	bf14      	ite	ne
 8007188:	2301      	movne	r3, #1
 800718a:	2300      	moveq	r3, #0
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d18d      	bne.n	80070ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8007192:	2300      	movs	r3, #0
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <I2C_WaitOnTXEFlagUntilTimeout>:
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	e02d      	b.n	8007206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f900 	bl	80073b0 <I2C_IsAcknowledgeFailed>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80071b6:	2301      	movs	r3, #1
 80071b8:	e02d      	b.n	8007216 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c0:	d021      	beq.n	8007206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80071c2:	f7fd f997 	bl	80044f4 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d302      	bcc.n	80071d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d116      	bne.n	8007206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f043 0220 	orr.w	r2, r3, #32
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	641a      	str	r2, [r3, #64]	; 0x40
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007202:	2301      	movs	r3, #1
 8007204:	e007      	b.n	8007216 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007210:	2b80      	cmp	r3, #128	; 0x80
 8007212:	d1ca      	bne.n	80071aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8007214:	2300      	movs	r3, #0
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <I2C_WaitOnBTFFlagUntilTimeout>:
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	607a      	str	r2, [r7, #4]
 800722a:	e02d      	b.n	8007288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 f8bf 	bl	80073b0 <I2C_IsAcknowledgeFailed>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8007238:	2301      	movs	r3, #1
 800723a:	e02d      	b.n	8007298 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007242:	d021      	beq.n	8007288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8007244:	f7fd f956 	bl	80044f4 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	429a      	cmp	r2, r3
 8007252:	d302      	bcc.n	800725a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d116      	bne.n	8007288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	631a      	str	r2, [r3, #48]	; 0x30
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	f043 0220 	orr.w	r2, r3, #32
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	641a      	str	r2, [r3, #64]	; 0x40
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007284:	2301      	movs	r3, #1
 8007286:	e007      	b.n	8007298 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b04      	cmp	r3, #4
 8007294:	d1ca      	bne.n	800722c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8007296:	2300      	movs	r3, #0
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <I2C_WaitOnSTOPRequestThroughIT>:
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	4b13      	ldr	r3, [pc, #76]	; (80072fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	08db      	lsrs	r3, r3, #3
 80072b2:	4a13      	ldr	r2, [pc, #76]	; (8007300 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80072b4:	fba2 2303 	umull	r2, r3, r2, r3
 80072b8:	0a1a      	lsrs	r2, r3, #8
 80072ba:	4613      	mov	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d107      	bne.n	80072de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	f043 0220 	orr.w	r2, r3, #32
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	641a      	str	r2, [r3, #64]	; 0x40
 80072da:	2301      	movs	r3, #1
 80072dc:	e008      	b.n	80072f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ec:	d0e9      	beq.n	80072c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>
 80072ee:	2300      	movs	r3, #0
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	20000014 	.word	0x20000014
 8007300:	14f8b589 	.word	0x14f8b589

08007304 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	e042      	b.n	8007398 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	f003 0310 	and.w	r3, r3, #16
 800731c:	2b10      	cmp	r3, #16
 800731e:	d119      	bne.n	8007354 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f06f 0210 	mvn.w	r2, #16
 8007328:	615a      	str	r2, [r3, #20]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	631a      	str	r2, [r3, #48]	; 0x30
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2220      	movs	r2, #32
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	641a      	str	r2, [r3, #64]	; 0x40
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007350:	2301      	movs	r3, #1
 8007352:	e029      	b.n	80073a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8007354:	f7fd f8ce 	bl	80044f4 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	429a      	cmp	r2, r3
 8007362:	d302      	bcc.n	800736a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d116      	bne.n	8007398 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	631a      	str	r2, [r3, #48]	; 0x30
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2220      	movs	r2, #32
 8007374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	f043 0220 	orr.w	r2, r3, #32
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	641a      	str	r2, [r3, #64]	; 0x40
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007394:	2301      	movs	r3, #1
 8007396:	e007      	b.n	80073a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a2:	2b40      	cmp	r3, #64	; 0x40
 80073a4:	d1b5      	bne.n	8007312 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 80073a6:	2300      	movs	r3, #0
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <I2C_IsAcknowledgeFailed>:
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c6:	d11b      	bne.n	8007400 <I2C_IsAcknowledgeFailed+0x50>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073d0:	615a      	str	r2, [r3, #20]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	631a      	str	r2, [r3, #48]	; 0x30
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2220      	movs	r2, #32
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ec:	f043 0204 	orr.w	r2, r3, #4
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	641a      	str	r2, [r3, #64]	; 0x40
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80073fc:	2301      	movs	r3, #1
 80073fe:	e000      	b.n	8007402 <I2C_IsAcknowledgeFailed+0x52>
 8007400:	2300      	movs	r3, #0
 8007402:	4618      	mov	r0, r3
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <I2C_ConvertOtherXferOptions>:
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800741e:	d103      	bne.n	8007428 <I2C_ConvertOtherXferOptions+0x1a>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	62da      	str	r2, [r3, #44]	; 0x2c
 8007426:	e007      	b.n	8007438 <I2C_ConvertOtherXferOptions+0x2a>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007430:	d102      	bne.n	8007438 <I2C_ConvertOtherXferOptions+0x2a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2208      	movs	r2, #8
 8007436:	62da      	str	r2, [r3, #44]	; 0x2c
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_I2CEx_ConfigAnalogFilter>:
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b20      	cmp	r3, #32
 8007458:	d129      	bne.n	80074ae <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2224      	movs	r2, #36	; 0x24
 800745e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0201 	bic.w	r2, r2, #1
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 0210 	bic.w	r2, r2, #16
 8007480:	625a      	str	r2, [r3, #36]	; 0x24
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	625a      	str	r2, [r3, #36]	; 0x24
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f042 0201 	orr.w	r2, r2, #1
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074aa:	2300      	movs	r3, #0
 80074ac:	e000      	b.n	80074b0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 80074ae:	2302      	movs	r3, #2
 80074b0:	4618      	mov	r0, r3
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_I2CEx_ConfigDigitalFilter>:
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
 80074c6:	2300      	movs	r3, #0
 80074c8:	81fb      	strh	r3, [r7, #14]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d12a      	bne.n	800752c <HAL_I2CEx_ConfigDigitalFilter+0x70>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2224      	movs	r2, #36	; 0x24
 80074da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0201 	bic.w	r2, r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	81fb      	strh	r3, [r7, #14]
 80074f6:	89fb      	ldrh	r3, [r7, #14]
 80074f8:	f023 030f 	bic.w	r3, r3, #15
 80074fc:	81fb      	strh	r3, [r7, #14]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	b29a      	uxth	r2, r3
 8007502:	89fb      	ldrh	r3, [r7, #14]
 8007504:	4313      	orrs	r3, r2
 8007506:	81fb      	strh	r3, [r7, #14]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	89fa      	ldrh	r2, [r7, #14]
 800750e:	625a      	str	r2, [r3, #36]	; 0x24
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0201 	orr.w	r2, r2, #1
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2220      	movs	r2, #32
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007528:	2300      	movs	r3, #0
 800752a:	e000      	b.n	800752e <HAL_I2CEx_ConfigDigitalFilter+0x72>
 800752c:	2302      	movs	r3, #2
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <HAL_PCD_Init>:
 800753a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800753c:	b08f      	sub	sp, #60	; 0x3c
 800753e:	af0a      	add	r7, sp, #40	; 0x28
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_PCD_Init+0x12>
 8007548:	2301      	movs	r3, #1
 800754a:	e10f      	b.n	800776c <HAL_PCD_Init+0x232>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	60bb      	str	r3, [r7, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <HAL_PCD_Init+0x32>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f006 fee2 	bl	800e330 <HAL_PCD_MspInit>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2203      	movs	r2, #3
 8007570:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757c:	2b00      	cmp	r3, #0
 800757e:	d102      	bne.n	8007586 <HAL_PCD_Init+0x4c>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	611a      	str	r2, [r3, #16]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4618      	mov	r0, r3
 800758c:	f003 f9bd 	bl	800a90a <USB_DisableGlobalInt>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	603b      	str	r3, [r7, #0]
 8007596:	687e      	ldr	r6, [r7, #4]
 8007598:	466d      	mov	r5, sp
 800759a:	f106 0410 	add.w	r4, r6, #16
 800759e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80075a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80075a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80075aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80075ae:	1d33      	adds	r3, r6, #4
 80075b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075b2:	6838      	ldr	r0, [r7, #0]
 80075b4:	f003 f894 	bl	800a6e0 <USB_CoreInit>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d005      	beq.n	80075ca <HAL_PCD_Init+0x90>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 80075c6:	2301      	movs	r3, #1
 80075c8:	e0d0      	b.n	800776c <HAL_PCD_Init+0x232>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2100      	movs	r1, #0
 80075d0:	4618      	mov	r0, r3
 80075d2:	f003 f9ab 	bl	800a92c <USB_SetCurrentMode>
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]
 80075da:	e04a      	b.n	8007672 <HAL_PCD_Init+0x138>
 80075dc:	7bfa      	ldrb	r2, [r7, #15]
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	4613      	mov	r3, r2
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	440b      	add	r3, r1
 80075ea:	333d      	adds	r3, #61	; 0x3d
 80075ec:	2201      	movs	r2, #1
 80075ee:	701a      	strb	r2, [r3, #0]
 80075f0:	7bfa      	ldrb	r2, [r7, #15]
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	4613      	mov	r3, r2
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	440b      	add	r3, r1
 80075fe:	333c      	adds	r3, #60	; 0x3c
 8007600:	7bfa      	ldrb	r2, [r7, #15]
 8007602:	701a      	strb	r2, [r3, #0]
 8007604:	7bfa      	ldrb	r2, [r7, #15]
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	b298      	uxth	r0, r3
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	4613      	mov	r3, r2
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	3344      	adds	r3, #68	; 0x44
 8007618:	4602      	mov	r2, r0
 800761a:	801a      	strh	r2, [r3, #0]
 800761c:	7bfa      	ldrb	r2, [r7, #15]
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	4613      	mov	r3, r2
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	3340      	adds	r3, #64	; 0x40
 800762c:	2200      	movs	r2, #0
 800762e:	701a      	strb	r2, [r3, #0]
 8007630:	7bfa      	ldrb	r2, [r7, #15]
 8007632:	6879      	ldr	r1, [r7, #4]
 8007634:	4613      	mov	r3, r2
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	4413      	add	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	440b      	add	r3, r1
 800763e:	3348      	adds	r3, #72	; 0x48
 8007640:	2200      	movs	r2, #0
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	7bfa      	ldrb	r2, [r7, #15]
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	4613      	mov	r3, r2
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	4413      	add	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	440b      	add	r3, r1
 8007652:	334c      	adds	r3, #76	; 0x4c
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	7bfa      	ldrb	r2, [r7, #15]
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	4613      	mov	r3, r2
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	440b      	add	r3, r1
 8007666:	3354      	adds	r3, #84	; 0x54
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	3301      	adds	r3, #1
 8007670:	73fb      	strb	r3, [r7, #15]
 8007672:	7bfa      	ldrb	r2, [r7, #15]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	429a      	cmp	r2, r3
 800767a:	d3af      	bcc.n	80075dc <HAL_PCD_Init+0xa2>
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]
 8007680:	e044      	b.n	800770c <HAL_PCD_Init+0x1d2>
 8007682:	7bfa      	ldrb	r2, [r7, #15]
 8007684:	6879      	ldr	r1, [r7, #4]
 8007686:	4613      	mov	r3, r2
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	4413      	add	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	440b      	add	r3, r1
 8007690:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]
 8007698:	7bfa      	ldrb	r2, [r7, #15]
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	4613      	mov	r3, r2
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80076aa:	7bfa      	ldrb	r2, [r7, #15]
 80076ac:	701a      	strb	r2, [r3, #0]
 80076ae:	7bfa      	ldrb	r2, [r7, #15]
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	4613      	mov	r3, r2
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	440b      	add	r3, r1
 80076bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80076c0:	2200      	movs	r2, #0
 80076c2:	701a      	strb	r2, [r3, #0]
 80076c4:	7bfa      	ldrb	r2, [r7, #15]
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	4613      	mov	r3, r2
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	7bfa      	ldrb	r2, [r7, #15]
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	440b      	add	r3, r1
 80076e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	7bfa      	ldrb	r2, [r7, #15]
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	4613      	mov	r3, r2
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	4413      	add	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	440b      	add	r3, r1
 80076fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	3301      	adds	r3, #1
 800770a:	73fb      	strb	r3, [r7, #15]
 800770c:	7bfa      	ldrb	r2, [r7, #15]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	429a      	cmp	r2, r3
 8007714:	d3b5      	bcc.n	8007682 <HAL_PCD_Init+0x148>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	687e      	ldr	r6, [r7, #4]
 800771e:	466d      	mov	r5, sp
 8007720:	f106 0410 	add.w	r4, r6, #16
 8007724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800772a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800772c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007730:	e885 0003 	stmia.w	r5, {r0, r1}
 8007734:	1d33      	adds	r3, r6, #4
 8007736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007738:	6838      	ldr	r0, [r7, #0]
 800773a:	f003 f943 	bl	800a9c4 <USB_DevInit>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <HAL_PCD_Init+0x216>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 800774c:	2301      	movs	r3, #1
 800774e:	e00d      	b.n	800776c <HAL_PCD_Init+0x232>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4618      	mov	r0, r3
 8007766:	f004 fa92 	bl	800bc8e <USB_DevDisconnect>
 800776a:	2300      	movs	r3, #0
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007774 <HAL_PCD_Start>:
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <HAL_PCD_Start+0x1c>
 800778c:	2302      	movs	r3, #2
 800778e:	e020      	b.n	80077d2 <HAL_PCD_Start+0x5e>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	2b01      	cmp	r3, #1
 800779e:	d109      	bne.n	80077b4 <HAL_PCD_Start+0x40>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d005      	beq.n	80077b4 <HAL_PCD_Start+0x40>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	639a      	str	r2, [r3, #56]	; 0x38
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f003 f895 	bl	800a8e8 <USB_EnableGlobalInt>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f004 fa42 	bl	800bc4c <USB_DevConnect>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80077d0:	2300      	movs	r3, #0
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <HAL_PCD_IRQHandler>:
 80077da:	b590      	push	{r4, r7, lr}
 80077dc:	b08d      	sub	sp, #52	; 0x34
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	623b      	str	r3, [r7, #32]
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	61fb      	str	r3, [r7, #28]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f004 fb00 	bl	800bdf6 <USB_GetMode>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f040 848a 	bne.w	8008112 <HAL_PCD_IRQHandler+0x938>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f004 fa64 	bl	800bcd0 <USB_ReadInterrupts>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 8480 	beq.w	8008110 <HAL_PCD_IRQHandler+0x936>
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	0a1b      	lsrs	r3, r3, #8
 800781a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4618      	mov	r0, r3
 800782a:	f004 fa51 	bl	800bcd0 <USB_ReadInterrupts>
 800782e:	4603      	mov	r3, r0
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b02      	cmp	r3, #2
 8007836:	d107      	bne.n	8007848 <HAL_PCD_IRQHandler+0x6e>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	695a      	ldr	r2, [r3, #20]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f002 0202 	and.w	r2, r2, #2
 8007846:	615a      	str	r2, [r3, #20]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4618      	mov	r0, r3
 800784e:	f004 fa3f 	bl	800bcd0 <USB_ReadInterrupts>
 8007852:	4603      	mov	r3, r0
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b10      	cmp	r3, #16
 800785a:	d161      	bne.n	8007920 <HAL_PCD_IRQHandler+0x146>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699a      	ldr	r2, [r3, #24]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 0210 	bic.w	r2, r2, #16
 800786a:	619a      	str	r2, [r3, #24]
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	6a1b      	ldr	r3, [r3, #32]
 8007870:	61bb      	str	r3, [r7, #24]
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	f003 020f 	and.w	r2, r3, #15
 8007878:	4613      	mov	r3, r2
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	4413      	add	r3, r2
 8007888:	3304      	adds	r3, #4
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	0c5b      	lsrs	r3, r3, #17
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	2b02      	cmp	r3, #2
 8007896:	d124      	bne.n	80078e2 <HAL_PCD_IRQHandler+0x108>
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800789e:	4013      	ands	r3, r2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d035      	beq.n	8007910 <HAL_PCD_IRQHandler+0x136>
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	6919      	ldr	r1, [r3, #16]
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	091b      	lsrs	r3, r3, #4
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	461a      	mov	r2, r3
 80078b6:	6a38      	ldr	r0, [r7, #32]
 80078b8:	f004 f876 	bl	800b9a8 <USB_ReadPacket>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	691a      	ldr	r2, [r3, #16]
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	091b      	lsrs	r3, r3, #4
 80078c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078c8:	441a      	add	r2, r3
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	611a      	str	r2, [r3, #16]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	6a1a      	ldr	r2, [r3, #32]
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	091b      	lsrs	r3, r3, #4
 80078d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078da:	441a      	add	r2, r3
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	621a      	str	r2, [r3, #32]
 80078e0:	e016      	b.n	8007910 <HAL_PCD_IRQHandler+0x136>
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	0c5b      	lsrs	r3, r3, #17
 80078e6:	f003 030f 	and.w	r3, r3, #15
 80078ea:	2b06      	cmp	r3, #6
 80078ec:	d110      	bne.n	8007910 <HAL_PCD_IRQHandler+0x136>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80078f4:	2208      	movs	r2, #8
 80078f6:	4619      	mov	r1, r3
 80078f8:	6a38      	ldr	r0, [r7, #32]
 80078fa:	f004 f855 	bl	800b9a8 <USB_ReadPacket>
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	6a1a      	ldr	r2, [r3, #32]
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	091b      	lsrs	r3, r3, #4
 8007906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800790a:	441a      	add	r2, r3
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	621a      	str	r2, [r3, #32]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699a      	ldr	r2, [r3, #24]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f042 0210 	orr.w	r2, r2, #16
 800791e:	619a      	str	r2, [r3, #24]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4618      	mov	r0, r3
 8007926:	f004 f9d3 	bl	800bcd0 <USB_ReadInterrupts>
 800792a:	4603      	mov	r3, r0
 800792c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007930:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007934:	f040 80a7 	bne.w	8007a86 <HAL_PCD_IRQHandler+0x2ac>
 8007938:	2300      	movs	r3, #0
 800793a:	627b      	str	r3, [r7, #36]	; 0x24
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4618      	mov	r0, r3
 8007942:	f004 f9d8 	bl	800bcf6 <USB_ReadDevAllOutEpInterrupt>
 8007946:	62b8      	str	r0, [r7, #40]	; 0x28
 8007948:	e099      	b.n	8007a7e <HAL_PCD_IRQHandler+0x2a4>
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 808e 	beq.w	8007a72 <HAL_PCD_IRQHandler+0x298>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	4611      	mov	r1, r2
 8007960:	4618      	mov	r0, r3
 8007962:	f004 f9fc 	bl	800bd5e <USB_ReadDevOutEPInterrupt>
 8007966:	6138      	str	r0, [r7, #16]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00c      	beq.n	800798c <HAL_PCD_IRQHandler+0x1b2>
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797e:	461a      	mov	r2, r3
 8007980:	2301      	movs	r3, #1
 8007982:	6093      	str	r3, [r2, #8]
 8007984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fec2 	bl	8008710 <PCD_EP_OutXfrComplete_int>
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f003 0308 	and.w	r3, r3, #8
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00c      	beq.n	80079b0 <HAL_PCD_IRQHandler+0x1d6>
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a2:	461a      	mov	r2, r3
 80079a4:	2308      	movs	r3, #8
 80079a6:	6093      	str	r3, [r2, #8]
 80079a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 ff98 	bl	80088e0 <PCD_EP_OutSetupPacket_int>
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f003 0310 	and.w	r3, r3, #16
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d008      	beq.n	80079cc <HAL_PCD_IRQHandler+0x1f2>
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c6:	461a      	mov	r2, r3
 80079c8:	2310      	movs	r3, #16
 80079ca:	6093      	str	r3, [r2, #8]
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d030      	beq.n	8007a38 <HAL_PCD_IRQHandler+0x25e>
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079de:	2b80      	cmp	r3, #128	; 0x80
 80079e0:	d109      	bne.n	80079f6 <HAL_PCD_IRQHandler+0x21c>
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079f4:	6053      	str	r3, [r2, #4]
 80079f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f8:	4613      	mov	r3, r2
 80079fa:	00db      	lsls	r3, r3, #3
 80079fc:	4413      	add	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	4413      	add	r3, r2
 8007a08:	3304      	adds	r3, #4
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	78db      	ldrb	r3, [r3, #3]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d108      	bne.n	8007a26 <HAL_PCD_IRQHandler+0x24c>
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2200      	movs	r2, #0
 8007a18:	70da      	strb	r2, [r3, #3]
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f006 fd8b 	bl	800e53c <HAL_PCD_ISOOUTIncompleteCallback>
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a32:	461a      	mov	r2, r3
 8007a34:	2302      	movs	r3, #2
 8007a36:	6093      	str	r3, [r2, #8]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d008      	beq.n	8007a54 <HAL_PCD_IRQHandler+0x27a>
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	015a      	lsls	r2, r3, #5
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a4e:	461a      	mov	r2, r3
 8007a50:	2320      	movs	r3, #32
 8007a52:	6093      	str	r3, [r2, #8]
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d009      	beq.n	8007a72 <HAL_PCD_IRQHandler+0x298>
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a70:	6093      	str	r3, [r2, #8]
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	3301      	adds	r3, #1
 8007a76:	627b      	str	r3, [r7, #36]	; 0x24
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	085b      	lsrs	r3, r3, #1
 8007a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f47f af62 	bne.w	800794a <HAL_PCD_IRQHandler+0x170>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f004 f920 	bl	800bcd0 <USB_ReadInterrupts>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a9a:	f040 80db 	bne.w	8007c54 <HAL_PCD_IRQHandler+0x47a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f004 f941 	bl	800bd2a <USB_ReadDevAllInEpInterrupt>
 8007aa8:	62b8      	str	r0, [r7, #40]	; 0x28
 8007aaa:	2300      	movs	r3, #0
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
 8007aae:	e0cd      	b.n	8007c4c <HAL_PCD_IRQHandler+0x472>
 8007ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 80c2 	beq.w	8007c40 <HAL_PCD_IRQHandler+0x466>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f004 f967 	bl	800bd9a <USB_ReadDevInEPInterrupt>
 8007acc:	6138      	str	r0, [r7, #16]
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d057      	beq.n	8007b88 <HAL_PCD_IRQHandler+0x3ae>
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	f003 030f 	and.w	r3, r3, #15
 8007ade:	2201      	movs	r2, #1
 8007ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	43db      	mvns	r3, r3
 8007af2:	69f9      	ldr	r1, [r7, #28]
 8007af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007af8:	4013      	ands	r3, r2
 8007afa:	634b      	str	r3, [r1, #52]	; 0x34
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b08:	461a      	mov	r2, r3
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	6093      	str	r3, [r2, #8]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d132      	bne.n	8007b7c <HAL_PCD_IRQHandler+0x3a2>
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	4413      	add	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	440b      	add	r3, r1
 8007b24:	334c      	adds	r3, #76	; 0x4c
 8007b26:	6819      	ldr	r1, [r3, #0]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4403      	add	r3, r0
 8007b36:	3348      	adds	r3, #72	; 0x48
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4419      	add	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b40:	4613      	mov	r3, r2
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4403      	add	r3, r0
 8007b4a:	334c      	adds	r3, #76	; 0x4c
 8007b4c:	6019      	str	r1, [r3, #0]
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d113      	bne.n	8007b7c <HAL_PCD_IRQHandler+0x3a2>
 8007b54:	6879      	ldr	r1, [r7, #4]
 8007b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b58:	4613      	mov	r3, r2
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	4413      	add	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	440b      	add	r3, r1
 8007b62:	3354      	adds	r3, #84	; 0x54
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d108      	bne.n	8007b7c <HAL_PCD_IRQHandler+0x3a2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b74:	461a      	mov	r2, r3
 8007b76:	2101      	movs	r1, #1
 8007b78:	f004 f96e 	bl	800be58 <USB_EP0_OutStart>
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f006 fc55 	bl	800e432 <HAL_PCD_DataInStageCallback>
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f003 0308 	and.w	r3, r3, #8
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d008      	beq.n	8007ba4 <HAL_PCD_IRQHandler+0x3ca>
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	2308      	movs	r3, #8
 8007ba2:	6093      	str	r3, [r2, #8]
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f003 0310 	and.w	r3, r3, #16
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d008      	beq.n	8007bc0 <HAL_PCD_IRQHandler+0x3e6>
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bba:	461a      	mov	r2, r3
 8007bbc:	2310      	movs	r3, #16
 8007bbe:	6093      	str	r3, [r2, #8]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d008      	beq.n	8007bdc <HAL_PCD_IRQHandler+0x402>
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	2340      	movs	r3, #64	; 0x40
 8007bda:	6093      	str	r3, [r2, #8]
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d023      	beq.n	8007c2e <HAL_PCD_IRQHandler+0x454>
 8007be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007be8:	6a38      	ldr	r0, [r7, #32]
 8007bea:	f003 f84f 	bl	800ac8c <USB_FlushTxFifo>
 8007bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	3338      	adds	r3, #56	; 0x38
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	3304      	adds	r3, #4
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	78db      	ldrb	r3, [r3, #3]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d108      	bne.n	8007c1c <HAL_PCD_IRQHandler+0x442>
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	70da      	strb	r2, [r3, #3]
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f006 fca2 	bl	800e560 <HAL_PCD_ISOINIncompleteCallback>
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c28:	461a      	mov	r2, r3
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	6093      	str	r3, [r2, #8]
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <HAL_PCD_IRQHandler+0x466>
 8007c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fcdb 	bl	80085f6 <PCD_WriteEmptyTxFifo>
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	3301      	adds	r3, #1
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
 8007c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c48:	085b      	lsrs	r3, r3, #1
 8007c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f47f af2e 	bne.w	8007ab0 <HAL_PCD_IRQHandler+0x2d6>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f004 f839 	bl	800bcd0 <USB_ReadInterrupts>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c68:	d122      	bne.n	8007cb0 <HAL_PCD_IRQHandler+0x4d6>
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	69fa      	ldr	r2, [r7, #28]
 8007c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c78:	f023 0301 	bic.w	r3, r3, #1
 8007c7c:	6053      	str	r3, [r2, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d108      	bne.n	8007c9a <HAL_PCD_IRQHandler+0x4c0>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8007c90:	2100      	movs	r1, #0
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fec2 	bl	8008a1c <HAL_PCDEx_LPM_Callback>
 8007c98:	e002      	b.n	8007ca0 <HAL_PCD_IRQHandler+0x4c6>
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f006 fc40 	bl	800e520 <HAL_PCD_ResumeCallback>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695a      	ldr	r2, [r3, #20]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007cae:	615a      	str	r2, [r3, #20]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f004 f80b 	bl	800bcd0 <USB_ReadInterrupts>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cc4:	d112      	bne.n	8007cec <HAL_PCD_IRQHandler+0x512>
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d102      	bne.n	8007cdc <HAL_PCD_IRQHandler+0x502>
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f006 fbfc 	bl	800e4d4 <HAL_PCD_SuspendCallback>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695a      	ldr	r2, [r3, #20]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007cea:	615a      	str	r2, [r3, #20]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f003 ffed 	bl	800bcd0 <USB_ReadInterrupts>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d00:	f040 80b7 	bne.w	8007e72 <HAL_PCD_IRQHandler+0x698>
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	69fa      	ldr	r2, [r7, #28]
 8007d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d12:	f023 0301 	bic.w	r3, r3, #1
 8007d16:	6053      	str	r3, [r2, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2110      	movs	r1, #16
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f002 ffb4 	bl	800ac8c <USB_FlushTxFifo>
 8007d24:	2300      	movs	r3, #0
 8007d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d28:	e046      	b.n	8007db8 <HAL_PCD_IRQHandler+0x5de>
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d36:	461a      	mov	r2, r3
 8007d38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d3c:	6093      	str	r3, [r2, #8]
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d4e:	0151      	lsls	r1, r2, #5
 8007d50:	69fa      	ldr	r2, [r7, #28]
 8007d52:	440a      	add	r2, r1
 8007d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d70:	6093      	str	r3, [r2, #8]
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d82:	0151      	lsls	r1, r2, #5
 8007d84:	69fa      	ldr	r2, [r7, #28]
 8007d86:	440a      	add	r2, r1
 8007d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007da2:	0151      	lsls	r1, r2, #5
 8007da4:	69fa      	ldr	r2, [r7, #28]
 8007da6:	440a      	add	r2, r1
 8007da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db4:	3301      	adds	r3, #1
 8007db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d3b3      	bcc.n	8007d2a <HAL_PCD_IRQHandler+0x550>
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	69fa      	ldr	r2, [r7, #28]
 8007dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dd0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007dd4:	61d3      	str	r3, [r2, #28]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d016      	beq.n	8007e0c <HAL_PCD_IRQHandler+0x632>
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007de8:	69fa      	ldr	r2, [r7, #28]
 8007dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dee:	f043 030b 	orr.w	r3, r3, #11
 8007df2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfe:	69fa      	ldr	r2, [r7, #28]
 8007e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e04:	f043 030b 	orr.w	r3, r3, #11
 8007e08:	6453      	str	r3, [r2, #68]	; 0x44
 8007e0a:	e015      	b.n	8007e38 <HAL_PCD_IRQHandler+0x65e>
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007e1e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007e22:	6153      	str	r3, [r2, #20]
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e32:	f043 030b 	orr.w	r3, r3, #11
 8007e36:	6113      	str	r3, [r2, #16]
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6818      	ldr	r0, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	b2d9      	uxtb	r1, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	f003 fffb 	bl	800be58 <USB_EP0_OutStart>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	695a      	ldr	r2, [r3, #20]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007e70:	615a      	str	r2, [r3, #20]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f003 ff2a 	bl	800bcd0 <USB_ReadInterrupts>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e86:	d124      	bne.n	8007ed2 <HAL_PCD_IRQHandler+0x6f8>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f003 ffc0 	bl	800be12 <USB_ActivateSetup>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f002 ff75 	bl	800ad86 <USB_GetDevSpeed>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	60da      	str	r2, [r3, #12]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681c      	ldr	r4, [r3, #0]
 8007ea8:	f001 fa28 	bl	80092fc <HAL_RCC_GetHCLKFreq>
 8007eac:	4601      	mov	r1, r0
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f002 fc74 	bl	800a7a4 <USB_SetTurnaroundTime>
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f006 fae0 	bl	800e482 <HAL_PCD_ResetCallback>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695a      	ldr	r2, [r3, #20]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007ed0:	615a      	str	r2, [r3, #20]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f003 fefa 	bl	800bcd0 <USB_ReadInterrupts>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b08      	cmp	r3, #8
 8007ee4:	d10a      	bne.n	8007efc <HAL_PCD_IRQHandler+0x722>
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f006 fabd 	bl	800e466 <HAL_PCD_SOFCallback>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	695a      	ldr	r2, [r3, #20]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f002 0208 	and.w	r2, r2, #8
 8007efa:	615a      	str	r2, [r3, #20]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f003 fee5 	bl	800bcd0 <USB_ReadInterrupts>
 8007f06:	4603      	mov	r3, r0
 8007f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0c:	2b80      	cmp	r3, #128	; 0x80
 8007f0e:	d122      	bne.n	8007f56 <HAL_PCD_IRQHandler+0x77c>
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	619a      	str	r2, [r3, #24]
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f20:	e014      	b.n	8007f4c <HAL_PCD_IRQHandler+0x772>
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f26:	4613      	mov	r3, r2
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	4413      	add	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	440b      	add	r3, r1
 8007f30:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d105      	bne.n	8007f46 <HAL_PCD_IRQHandler+0x76c>
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fb27 	bl	8008594 <HAL_PCD_EP_Abort>
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	3301      	adds	r3, #1
 8007f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d3e5      	bcc.n	8007f22 <HAL_PCD_IRQHandler+0x748>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f003 feb8 	bl	800bcd0 <USB_ReadInterrupts>
 8007f60:	4603      	mov	r3, r0
 8007f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f6a:	d13b      	bne.n	8007fe4 <HAL_PCD_IRQHandler+0x80a>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f70:	e02b      	b.n	8007fca <HAL_PCD_IRQHandler+0x7f0>
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	61bb      	str	r3, [r7, #24]
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f86:	4613      	mov	r3, r2
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	440b      	add	r3, r1
 8007f90:	3340      	adds	r3, #64	; 0x40
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d115      	bne.n	8007fc4 <HAL_PCD_IRQHandler+0x7ea>
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	da12      	bge.n	8007fc4 <HAL_PCD_IRQHandler+0x7ea>
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	00db      	lsls	r3, r3, #3
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	440b      	add	r3, r1
 8007fac:	333f      	adds	r3, #63	; 0x3f
 8007fae:	2201      	movs	r2, #1
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fae8 	bl	8008594 <HAL_PCD_EP_Abort>
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d3ce      	bcc.n	8007f72 <HAL_PCD_IRQHandler+0x798>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	695a      	ldr	r2, [r3, #20]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007fe2:	615a      	str	r2, [r3, #20]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f003 fe71 	bl	800bcd0 <USB_ReadInterrupts>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ff8:	d155      	bne.n	80080a6 <HAL_PCD_IRQHandler+0x8cc>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ffe:	e045      	b.n	800808c <HAL_PCD_IRQHandler+0x8b2>
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	61bb      	str	r3, [r7, #24]
 8008010:	6879      	ldr	r1, [r7, #4]
 8008012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008014:	4613      	mov	r3, r2
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	4413      	add	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d12e      	bne.n	8008086 <HAL_PCD_IRQHandler+0x8ac>
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	2b00      	cmp	r3, #0
 800802c:	da2b      	bge.n	8008086 <HAL_PCD_IRQHandler+0x8ac>
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	429a      	cmp	r2, r3
 8008040:	d121      	bne.n	8008086 <HAL_PCD_IRQHandler+0x8ac>
 8008042:	6879      	ldr	r1, [r7, #4]
 8008044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008046:	4613      	mov	r3, r2
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	440b      	add	r3, r1
 8008050:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008054:	2201      	movs	r2, #1
 8008056:	701a      	strb	r2, [r3, #0]
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	619a      	str	r2, [r3, #24]
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10a      	bne.n	8008086 <HAL_PCD_IRQHandler+0x8ac>
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	69fa      	ldr	r2, [r7, #28]
 800807a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800807e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008082:	6053      	str	r3, [r2, #4]
 8008084:	e007      	b.n	8008096 <HAL_PCD_IRQHandler+0x8bc>
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	3301      	adds	r3, #1
 800808a:	627b      	str	r3, [r7, #36]	; 0x24
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008092:	429a      	cmp	r2, r3
 8008094:	d3b4      	bcc.n	8008000 <HAL_PCD_IRQHandler+0x826>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695a      	ldr	r2, [r3, #20]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80080a4:	615a      	str	r2, [r3, #20]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f003 fe10 	bl	800bcd0 <USB_ReadInterrupts>
 80080b0:	4603      	mov	r3, r0
 80080b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ba:	d10a      	bne.n	80080d2 <HAL_PCD_IRQHandler+0x8f8>
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f006 fa61 	bl	800e584 <HAL_PCD_ConnectCallback>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	695a      	ldr	r2, [r3, #20]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80080d0:	615a      	str	r2, [r3, #20]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f003 fdfa 	bl	800bcd0 <USB_ReadInterrupts>
 80080dc:	4603      	mov	r3, r0
 80080de:	f003 0304 	and.w	r3, r3, #4
 80080e2:	2b04      	cmp	r3, #4
 80080e4:	d115      	bne.n	8008112 <HAL_PCD_IRQHandler+0x938>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	61bb      	str	r3, [r7, #24]
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <HAL_PCD_IRQHandler+0x924>
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f006 fa51 	bl	800e5a0 <HAL_PCD_DisconnectCallback>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6859      	ldr	r1, [r3, #4]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	430a      	orrs	r2, r1
 800810c:	605a      	str	r2, [r3, #4]
 800810e:	e000      	b.n	8008112 <HAL_PCD_IRQHandler+0x938>
 8008110:	bf00      	nop
 8008112:	3734      	adds	r7, #52	; 0x34
 8008114:	46bd      	mov	sp, r7
 8008116:	bd90      	pop	{r4, r7, pc}

08008118 <HAL_PCD_SetAddress>:
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	70fb      	strb	r3, [r7, #3]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <HAL_PCD_SetAddress+0x1a>
 800812e:	2302      	movs	r3, #2
 8008130:	e013      	b.n	800815a <HAL_PCD_SetAddress+0x42>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	78fa      	ldrb	r2, [r7, #3]
 8008148:	4611      	mov	r1, r2
 800814a:	4618      	mov	r0, r3
 800814c:	f003 fd58 	bl	800bc00 <USB_SetDevAddress>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008158:	2300      	movs	r3, #0
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <HAL_PCD_EP_Open>:
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	4608      	mov	r0, r1
 800816c:	4611      	mov	r1, r2
 800816e:	461a      	mov	r2, r3
 8008170:	4603      	mov	r3, r0
 8008172:	70fb      	strb	r3, [r7, #3]
 8008174:	460b      	mov	r3, r1
 8008176:	803b      	strh	r3, [r7, #0]
 8008178:	4613      	mov	r3, r2
 800817a:	70bb      	strb	r3, [r7, #2]
 800817c:	2300      	movs	r3, #0
 800817e:	72fb      	strb	r3, [r7, #11]
 8008180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008184:	2b00      	cmp	r3, #0
 8008186:	da0f      	bge.n	80081a8 <HAL_PCD_EP_Open+0x46>
 8008188:	78fb      	ldrb	r3, [r7, #3]
 800818a:	f003 020f 	and.w	r2, r3, #15
 800818e:	4613      	mov	r3, r2
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	3338      	adds	r3, #56	; 0x38
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	4413      	add	r3, r2
 800819c:	3304      	adds	r3, #4
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2201      	movs	r2, #1
 80081a4:	705a      	strb	r2, [r3, #1]
 80081a6:	e00f      	b.n	80081c8 <HAL_PCD_EP_Open+0x66>
 80081a8:	78fb      	ldrb	r3, [r7, #3]
 80081aa:	f003 020f 	and.w	r2, r3, #15
 80081ae:	4613      	mov	r3, r2
 80081b0:	00db      	lsls	r3, r3, #3
 80081b2:	4413      	add	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	4413      	add	r3, r2
 80081be:	3304      	adds	r3, #4
 80081c0:	60fb      	str	r3, [r7, #12]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	705a      	strb	r2, [r3, #1]
 80081c8:	78fb      	ldrb	r3, [r7, #3]
 80081ca:	f003 030f 	and.w	r3, r3, #15
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	701a      	strb	r2, [r3, #0]
 80081d4:	883a      	ldrh	r2, [r7, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	60da      	str	r2, [r3, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	78ba      	ldrb	r2, [r7, #2]
 80081de:	711a      	strb	r2, [r3, #4]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	785b      	ldrb	r3, [r3, #1]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d004      	beq.n	80081f2 <HAL_PCD_EP_Open+0x90>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	811a      	strh	r2, [r3, #8]
 80081f2:	78bb      	ldrb	r3, [r7, #2]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d102      	bne.n	80081fe <HAL_PCD_EP_Open+0x9c>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	715a      	strb	r2, [r3, #5]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008204:	2b01      	cmp	r3, #1
 8008206:	d101      	bne.n	800820c <HAL_PCD_EP_Open+0xaa>
 8008208:	2302      	movs	r3, #2
 800820a:	e00e      	b.n	800822a <HAL_PCD_EP_Open+0xc8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68f9      	ldr	r1, [r7, #12]
 800821a:	4618      	mov	r0, r3
 800821c:	f002 fdd8 	bl	800add0 <USB_ActivateEndpoint>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008228:	7afb      	ldrb	r3, [r7, #11]
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <HAL_PCD_EP_Close>:
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	460b      	mov	r3, r1
 800823c:	70fb      	strb	r3, [r7, #3]
 800823e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008242:	2b00      	cmp	r3, #0
 8008244:	da0f      	bge.n	8008266 <HAL_PCD_EP_Close+0x34>
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	f003 020f 	and.w	r2, r3, #15
 800824c:	4613      	mov	r3, r2
 800824e:	00db      	lsls	r3, r3, #3
 8008250:	4413      	add	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	3338      	adds	r3, #56	; 0x38
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	4413      	add	r3, r2
 800825a:	3304      	adds	r3, #4
 800825c:	60fb      	str	r3, [r7, #12]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2201      	movs	r2, #1
 8008262:	705a      	strb	r2, [r3, #1]
 8008264:	e00f      	b.n	8008286 <HAL_PCD_EP_Close+0x54>
 8008266:	78fb      	ldrb	r3, [r7, #3]
 8008268:	f003 020f 	and.w	r2, r3, #15
 800826c:	4613      	mov	r3, r2
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	4413      	add	r3, r2
 800827c:	3304      	adds	r3, #4
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	705a      	strb	r2, [r3, #1]
 8008286:	78fb      	ldrb	r3, [r7, #3]
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	b2da      	uxtb	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008298:	2b01      	cmp	r3, #1
 800829a:	d101      	bne.n	80082a0 <HAL_PCD_EP_Close+0x6e>
 800829c:	2302      	movs	r3, #2
 800829e:	e00e      	b.n	80082be <HAL_PCD_EP_Close+0x8c>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68f9      	ldr	r1, [r7, #12]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f002 fe16 	bl	800aee0 <USB_DeactivateEndpoint>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80082bc:	2300      	movs	r3, #0
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <HAL_PCD_EP_Receive>:
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b086      	sub	sp, #24
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	60f8      	str	r0, [r7, #12]
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	603b      	str	r3, [r7, #0]
 80082d2:	460b      	mov	r3, r1
 80082d4:	72fb      	strb	r3, [r7, #11]
 80082d6:	7afb      	ldrb	r3, [r7, #11]
 80082d8:	f003 020f 	and.w	r2, r3, #15
 80082dc:	4613      	mov	r3, r2
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	4413      	add	r3, r2
 80082ec:	3304      	adds	r3, #4
 80082ee:	617b      	str	r3, [r7, #20]
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	611a      	str	r2, [r3, #16]
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	619a      	str	r2, [r3, #24]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2200      	movs	r2, #0
 8008300:	621a      	str	r2, [r3, #32]
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2200      	movs	r2, #0
 8008306:	705a      	strb	r2, [r3, #1]
 8008308:	7afb      	ldrb	r3, [r7, #11]
 800830a:	f003 030f 	and.w	r3, r3, #15
 800830e:	b2da      	uxtb	r2, r3
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	701a      	strb	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d102      	bne.n	8008322 <HAL_PCD_EP_Receive+0x5c>
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	615a      	str	r2, [r3, #20]
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	f003 030f 	and.w	r3, r3, #15
 8008328:	2b00      	cmp	r3, #0
 800832a:	d109      	bne.n	8008340 <HAL_PCD_EP_Receive+0x7a>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6818      	ldr	r0, [r3, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	b2db      	uxtb	r3, r3
 8008336:	461a      	mov	r2, r3
 8008338:	6979      	ldr	r1, [r7, #20]
 800833a:	f003 f8f5 	bl	800b528 <USB_EP0StartXfer>
 800833e:	e008      	b.n	8008352 <HAL_PCD_EP_Receive+0x8c>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	b2db      	uxtb	r3, r3
 800834a:	461a      	mov	r2, r3
 800834c:	6979      	ldr	r1, [r7, #20]
 800834e:	f002 fea3 	bl	800b098 <USB_EPStartXfer>
 8008352:	2300      	movs	r3, #0
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <HAL_PCD_EP_GetRxCount>:
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	70fb      	strb	r3, [r7, #3]
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	f003 020f 	and.w	r2, r3, #15
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	4613      	mov	r3, r2
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4618      	mov	r0, r3
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_PCD_EP_Transmit>:
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	607a      	str	r2, [r7, #4]
 8008396:	603b      	str	r3, [r7, #0]
 8008398:	460b      	mov	r3, r1
 800839a:	72fb      	strb	r3, [r7, #11]
 800839c:	7afb      	ldrb	r3, [r7, #11]
 800839e:	f003 020f 	and.w	r2, r3, #15
 80083a2:	4613      	mov	r3, r2
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	4413      	add	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	3338      	adds	r3, #56	; 0x38
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4413      	add	r3, r2
 80083b0:	3304      	adds	r3, #4
 80083b2:	617b      	str	r3, [r7, #20]
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	611a      	str	r2, [r3, #16]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	619a      	str	r2, [r3, #24]
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2200      	movs	r2, #0
 80083c4:	621a      	str	r2, [r3, #32]
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2201      	movs	r2, #1
 80083ca:	705a      	strb	r2, [r3, #1]
 80083cc:	7afb      	ldrb	r3, [r7, #11]
 80083ce:	f003 030f 	and.w	r3, r3, #15
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	701a      	strb	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d102      	bne.n	80083e6 <HAL_PCD_EP_Transmit+0x5a>
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	615a      	str	r2, [r3, #20]
 80083e6:	7afb      	ldrb	r3, [r7, #11]
 80083e8:	f003 030f 	and.w	r3, r3, #15
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d109      	bne.n	8008404 <HAL_PCD_EP_Transmit+0x78>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	461a      	mov	r2, r3
 80083fc:	6979      	ldr	r1, [r7, #20]
 80083fe:	f003 f893 	bl	800b528 <USB_EP0StartXfer>
 8008402:	e008      	b.n	8008416 <HAL_PCD_EP_Transmit+0x8a>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6818      	ldr	r0, [r3, #0]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	b2db      	uxtb	r3, r3
 800840e:	461a      	mov	r2, r3
 8008410:	6979      	ldr	r1, [r7, #20]
 8008412:	f002 fe41 	bl	800b098 <USB_EPStartXfer>
 8008416:	2300      	movs	r3, #0
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_PCD_EP_SetStall>:
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
 800842c:	78fb      	ldrb	r3, [r7, #3]
 800842e:	f003 020f 	and.w	r2, r3, #15
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	429a      	cmp	r2, r3
 8008438:	d901      	bls.n	800843e <HAL_PCD_EP_SetStall+0x1e>
 800843a:	2301      	movs	r3, #1
 800843c:	e050      	b.n	80084e0 <HAL_PCD_EP_SetStall+0xc0>
 800843e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008442:	2b00      	cmp	r3, #0
 8008444:	da0f      	bge.n	8008466 <HAL_PCD_EP_SetStall+0x46>
 8008446:	78fb      	ldrb	r3, [r7, #3]
 8008448:	f003 020f 	and.w	r2, r3, #15
 800844c:	4613      	mov	r3, r2
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	3338      	adds	r3, #56	; 0x38
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	4413      	add	r3, r2
 800845a:	3304      	adds	r3, #4
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2201      	movs	r2, #1
 8008462:	705a      	strb	r2, [r3, #1]
 8008464:	e00d      	b.n	8008482 <HAL_PCD_EP_SetStall+0x62>
 8008466:	78fa      	ldrb	r2, [r7, #3]
 8008468:	4613      	mov	r3, r2
 800846a:	00db      	lsls	r3, r3, #3
 800846c:	4413      	add	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	4413      	add	r3, r2
 8008478:	3304      	adds	r3, #4
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	705a      	strb	r2, [r3, #1]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2201      	movs	r2, #1
 8008486:	709a      	strb	r2, [r3, #2]
 8008488:	78fb      	ldrb	r3, [r7, #3]
 800848a:	f003 030f 	and.w	r3, r3, #15
 800848e:	b2da      	uxtb	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	701a      	strb	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800849a:	2b01      	cmp	r3, #1
 800849c:	d101      	bne.n	80084a2 <HAL_PCD_EP_SetStall+0x82>
 800849e:	2302      	movs	r3, #2
 80084a0:	e01e      	b.n	80084e0 <HAL_PCD_EP_SetStall+0xc0>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68f9      	ldr	r1, [r7, #12]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f003 fad1 	bl	800ba58 <USB_EPSetStall>
 80084b6:	78fb      	ldrb	r3, [r7, #3]
 80084b8:	f003 030f 	and.w	r3, r3, #15
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10a      	bne.n	80084d6 <HAL_PCD_EP_SetStall+0xb6>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	b2d9      	uxtb	r1, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80084d0:	461a      	mov	r2, r3
 80084d2:	f003 fcc1 	bl	800be58 <USB_EP0_OutStart>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 80084de:	2300      	movs	r3, #0
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <HAL_PCD_EP_ClrStall>:
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	f003 020f 	and.w	r2, r3, #15
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d901      	bls.n	8008506 <HAL_PCD_EP_ClrStall+0x1e>
 8008502:	2301      	movs	r3, #1
 8008504:	e042      	b.n	800858c <HAL_PCD_EP_ClrStall+0xa4>
 8008506:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800850a:	2b00      	cmp	r3, #0
 800850c:	da0f      	bge.n	800852e <HAL_PCD_EP_ClrStall+0x46>
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	f003 020f 	and.w	r2, r3, #15
 8008514:	4613      	mov	r3, r2
 8008516:	00db      	lsls	r3, r3, #3
 8008518:	4413      	add	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	3338      	adds	r3, #56	; 0x38
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	4413      	add	r3, r2
 8008522:	3304      	adds	r3, #4
 8008524:	60fb      	str	r3, [r7, #12]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2201      	movs	r2, #1
 800852a:	705a      	strb	r2, [r3, #1]
 800852c:	e00f      	b.n	800854e <HAL_PCD_EP_ClrStall+0x66>
 800852e:	78fb      	ldrb	r3, [r7, #3]
 8008530:	f003 020f 	and.w	r2, r3, #15
 8008534:	4613      	mov	r3, r2
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	4413      	add	r3, r2
 8008544:	3304      	adds	r3, #4
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	705a      	strb	r2, [r3, #1]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	709a      	strb	r2, [r3, #2]
 8008554:	78fb      	ldrb	r3, [r7, #3]
 8008556:	f003 030f 	and.w	r3, r3, #15
 800855a:	b2da      	uxtb	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	701a      	strb	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008566:	2b01      	cmp	r3, #1
 8008568:	d101      	bne.n	800856e <HAL_PCD_EP_ClrStall+0x86>
 800856a:	2302      	movs	r3, #2
 800856c:	e00e      	b.n	800858c <HAL_PCD_EP_ClrStall+0xa4>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68f9      	ldr	r1, [r7, #12]
 800857c:	4618      	mov	r0, r3
 800857e:	f003 fad9 	bl	800bb34 <USB_EPClearStall>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
 800858a:	2300      	movs	r3, #0
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_PCD_EP_Abort>:
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	70fb      	strb	r3, [r7, #3]
 80085a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	da0c      	bge.n	80085c2 <HAL_PCD_EP_Abort+0x2e>
 80085a8:	78fb      	ldrb	r3, [r7, #3]
 80085aa:	f003 020f 	and.w	r2, r3, #15
 80085ae:	4613      	mov	r3, r2
 80085b0:	00db      	lsls	r3, r3, #3
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	3338      	adds	r3, #56	; 0x38
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	4413      	add	r3, r2
 80085bc:	3304      	adds	r3, #4
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	e00c      	b.n	80085dc <HAL_PCD_EP_Abort+0x48>
 80085c2:	78fb      	ldrb	r3, [r7, #3]
 80085c4:	f003 020f 	and.w	r2, r3, #15
 80085c8:	4613      	mov	r3, r2
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	4413      	add	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	4413      	add	r3, r2
 80085d8:	3304      	adds	r3, #4
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	68f9      	ldr	r1, [r7, #12]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f003 f8f8 	bl	800b7d8 <USB_EPStopXfer>
 80085e8:	4603      	mov	r3, r0
 80085ea:	72fb      	strb	r3, [r7, #11]
 80085ec:	7afb      	ldrb	r3, [r7, #11]
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <PCD_WriteEmptyTxFifo>:
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b08a      	sub	sp, #40	; 0x28
 80085fa:	af02      	add	r7, sp, #8
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	6039      	str	r1, [r7, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	617b      	str	r3, [r7, #20]
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	613b      	str	r3, [r7, #16]
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	4613      	mov	r3, r2
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	3338      	adds	r3, #56	; 0x38
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	4413      	add	r3, r2
 800861a:	3304      	adds	r3, #4
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a1a      	ldr	r2, [r3, #32]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	429a      	cmp	r2, r3
 8008628:	d901      	bls.n	800862e <PCD_WriteEmptyTxFifo+0x38>
 800862a:	2301      	movs	r3, #1
 800862c:	e06c      	b.n	8008708 <PCD_WriteEmptyTxFifo+0x112>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	699a      	ldr	r2, [r3, #24]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	61fb      	str	r3, [r7, #28]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	69fa      	ldr	r2, [r7, #28]
 8008640:	429a      	cmp	r2, r3
 8008642:	d902      	bls.n	800864a <PCD_WriteEmptyTxFifo+0x54>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	61fb      	str	r3, [r7, #28]
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	3303      	adds	r3, #3
 800864e:	089b      	lsrs	r3, r3, #2
 8008650:	61bb      	str	r3, [r7, #24]
 8008652:	e02b      	b.n	80086ac <PCD_WriteEmptyTxFifo+0xb6>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	699a      	ldr	r2, [r3, #24]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	61fb      	str	r3, [r7, #28]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	69fa      	ldr	r2, [r7, #28]
 8008666:	429a      	cmp	r2, r3
 8008668:	d902      	bls.n	8008670 <PCD_WriteEmptyTxFifo+0x7a>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	61fb      	str	r3, [r7, #28]
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	3303      	adds	r3, #3
 8008674:	089b      	lsrs	r3, r3, #2
 8008676:	61bb      	str	r3, [r7, #24]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6919      	ldr	r1, [r3, #16]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	b2da      	uxtb	r2, r3
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	b298      	uxth	r0, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	b2db      	uxtb	r3, r3
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	4603      	mov	r3, r0
 800868e:	6978      	ldr	r0, [r7, #20]
 8008690:	f003 f94c 	bl	800b92c <USB_WritePacket>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	691a      	ldr	r2, [r3, #16]
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	441a      	add	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	611a      	str	r2, [r3, #16]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6a1a      	ldr	r2, [r3, #32]
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	441a      	add	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	621a      	str	r2, [r3, #32]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d809      	bhi.n	80086d6 <PCD_WriteEmptyTxFifo+0xe0>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6a1a      	ldr	r2, [r3, #32]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d203      	bcs.n	80086d6 <PCD_WriteEmptyTxFifo+0xe0>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1be      	bne.n	8008654 <PCD_WriteEmptyTxFifo+0x5e>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	699a      	ldr	r2, [r3, #24]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d811      	bhi.n	8008706 <PCD_WriteEmptyTxFifo+0x110>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	f003 030f 	and.w	r3, r3, #15
 80086e8:	2201      	movs	r2, #1
 80086ea:	fa02 f303 	lsl.w	r3, r2, r3
 80086ee:	60bb      	str	r3, [r7, #8]
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	43db      	mvns	r3, r3
 80086fc:	6939      	ldr	r1, [r7, #16]
 80086fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008702:	4013      	ands	r3, r2
 8008704:	634b      	str	r3, [r1, #52]	; 0x34
 8008706:	2300      	movs	r3, #0
 8008708:	4618      	mov	r0, r3
 800870a:	3720      	adds	r7, #32
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <PCD_EP_OutXfrComplete_int>:
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	61fb      	str	r3, [r7, #28]
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	61bb      	str	r3, [r7, #24]
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	333c      	adds	r3, #60	; 0x3c
 8008728:	3304      	adds	r3, #4
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	617b      	str	r3, [r7, #20]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	4413      	add	r3, r2
 8008736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	613b      	str	r3, [r7, #16]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d17b      	bne.n	800883e <PCD_EP_OutXfrComplete_int+0x12e>
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f003 0308 	and.w	r3, r3, #8
 800874c:	2b00      	cmp	r3, #0
 800874e:	d015      	beq.n	800877c <PCD_EP_OutXfrComplete_int+0x6c>
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	4a61      	ldr	r2, [pc, #388]	; (80088d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008754:	4293      	cmp	r3, r2
 8008756:	f240 80b9 	bls.w	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 80b3 	beq.w	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	4413      	add	r3, r2
 800876e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008772:	461a      	mov	r2, r3
 8008774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008778:	6093      	str	r3, [r2, #8]
 800877a:	e0a7      	b.n	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f003 0320 	and.w	r3, r3, #32
 8008782:	2b00      	cmp	r3, #0
 8008784:	d009      	beq.n	800879a <PCD_EP_OutXfrComplete_int+0x8a>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	4413      	add	r3, r2
 800878e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008792:	461a      	mov	r2, r3
 8008794:	2320      	movs	r3, #32
 8008796:	6093      	str	r3, [r2, #8]
 8008798:	e098      	b.n	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f040 8093 	bne.w	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	4a4b      	ldr	r2, [pc, #300]	; (80088d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d90f      	bls.n	80087ce <PCD_EP_OutXfrComplete_int+0xbe>
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00a      	beq.n	80087ce <PCD_EP_OutXfrComplete_int+0xbe>
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	015a      	lsls	r2, r3, #5
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	4413      	add	r3, r2
 80087c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c4:	461a      	mov	r2, r3
 80087c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087ca:	6093      	str	r3, [r2, #8]
 80087cc:	e07e      	b.n	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	4613      	mov	r3, r2
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	4413      	add	r3, r2
 80087e0:	3304      	adds	r3, #4
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	69da      	ldr	r2, [r3, #28]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	0159      	lsls	r1, r3, #5
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	440b      	add	r3, r1
 80087f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087fa:	1ad2      	subs	r2, r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	621a      	str	r2, [r3, #32]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d114      	bne.n	8008830 <PCD_EP_OutXfrComplete_int+0x120>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <PCD_EP_OutXfrComplete_int+0x112>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008818:	461a      	mov	r2, r3
 800881a:	2101      	movs	r1, #1
 800881c:	f003 fb1c 	bl	800be58 <USB_EP0_OutStart>
 8008820:	e006      	b.n	8008830 <PCD_EP_OutXfrComplete_int+0x120>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	691a      	ldr	r2, [r3, #16]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	441a      	add	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	611a      	str	r2, [r3, #16]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	b2db      	uxtb	r3, r3
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f005 fde0 	bl	800e3fc <HAL_PCD_DataOutStageCallback>
 800883c:	e046      	b.n	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	4a26      	ldr	r2, [pc, #152]	; (80088dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d124      	bne.n	8008890 <PCD_EP_OutXfrComplete_int+0x180>
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <PCD_EP_OutXfrComplete_int+0x156>
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800885c:	461a      	mov	r2, r3
 800885e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008862:	6093      	str	r3, [r2, #8]
 8008864:	e032      	b.n	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f003 0320 	and.w	r3, r3, #32
 800886c:	2b00      	cmp	r3, #0
 800886e:	d008      	beq.n	8008882 <PCD_EP_OutXfrComplete_int+0x172>
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887c:	461a      	mov	r2, r3
 800887e:	2320      	movs	r3, #32
 8008880:	6093      	str	r3, [r2, #8]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	b2db      	uxtb	r3, r3
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f005 fdb7 	bl	800e3fc <HAL_PCD_DataOutStageCallback>
 800888e:	e01d      	b.n	80088cc <PCD_EP_OutXfrComplete_int+0x1bc>
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d114      	bne.n	80088c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	4613      	mov	r3, r2
 800889c:	00db      	lsls	r3, r3, #3
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	440b      	add	r3, r1
 80088a4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d108      	bne.n	80088c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80088b8:	461a      	mov	r2, r3
 80088ba:	2100      	movs	r1, #0
 80088bc:	f003 facc 	bl	800be58 <USB_EP0_OutStart>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f005 fd98 	bl	800e3fc <HAL_PCD_DataOutStageCallback>
 80088cc:	2300      	movs	r3, #0
 80088ce:	4618      	mov	r0, r3
 80088d0:	3720      	adds	r7, #32
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	4f54300a 	.word	0x4f54300a
 80088dc:	4f54310a 	.word	0x4f54310a

080088e0 <PCD_EP_OutSetupPacket_int>:
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	617b      	str	r3, [r7, #20]
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	613b      	str	r3, [r7, #16]
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	333c      	adds	r3, #60	; 0x3c
 80088f8:	3304      	adds	r3, #4
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	60fb      	str	r3, [r7, #12]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	4413      	add	r3, r2
 8008906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	60bb      	str	r3, [r7, #8]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	4a15      	ldr	r2, [pc, #84]	; (8008968 <PCD_EP_OutSetupPacket_int+0x88>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d90e      	bls.n	8008934 <PCD_EP_OutSetupPacket_int+0x54>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d009      	beq.n	8008934 <PCD_EP_OutSetupPacket_int+0x54>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	4413      	add	r3, r2
 8008928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892c:	461a      	mov	r2, r3
 800892e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008932:	6093      	str	r3, [r2, #8]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f005 fd4f 	bl	800e3d8 <HAL_PCD_SetupStageCallback>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	4a0a      	ldr	r2, [pc, #40]	; (8008968 <PCD_EP_OutSetupPacket_int+0x88>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d90c      	bls.n	800895c <PCD_EP_OutSetupPacket_int+0x7c>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d108      	bne.n	800895c <PCD_EP_OutSetupPacket_int+0x7c>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008954:	461a      	mov	r2, r3
 8008956:	2101      	movs	r1, #1
 8008958:	f003 fa7e 	bl	800be58 <USB_EP0_OutStart>
 800895c:	2300      	movs	r3, #0
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	4f54300a 	.word	0x4f54300a

0800896c <HAL_PCDEx_SetTxFiFo>:
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	70fb      	strb	r3, [r7, #3]
 8008978:	4613      	mov	r3, r2
 800897a:	803b      	strh	r3, [r7, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	60bb      	str	r3, [r7, #8]
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d107      	bne.n	800899a <HAL_PCDEx_SetTxFiFo+0x2e>
 800898a:	883b      	ldrh	r3, [r7, #0]
 800898c:	0419      	lsls	r1, r3, #16
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	430a      	orrs	r2, r1
 8008996:	629a      	str	r2, [r3, #40]	; 0x28
 8008998:	e028      	b.n	80089ec <HAL_PCDEx_SetTxFiFo+0x80>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a0:	0c1b      	lsrs	r3, r3, #16
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	4413      	add	r3, r2
 80089a6:	60bb      	str	r3, [r7, #8]
 80089a8:	2300      	movs	r3, #0
 80089aa:	73fb      	strb	r3, [r7, #15]
 80089ac:	e00d      	b.n	80089ca <HAL_PCDEx_SetTxFiFo+0x5e>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
 80089b4:	3340      	adds	r3, #64	; 0x40
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	0c1b      	lsrs	r3, r3, #16
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	4413      	add	r3, r2
 80089c2:	60bb      	str	r3, [r7, #8]
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	3301      	adds	r3, #1
 80089c8:	73fb      	strb	r3, [r7, #15]
 80089ca:	7bfa      	ldrb	r2, [r7, #15]
 80089cc:	78fb      	ldrb	r3, [r7, #3]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d3ec      	bcc.n	80089ae <HAL_PCDEx_SetTxFiFo+0x42>
 80089d4:	883b      	ldrh	r3, [r7, #0]
 80089d6:	0418      	lsls	r0, r3, #16
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6819      	ldr	r1, [r3, #0]
 80089dc:	78fb      	ldrb	r3, [r7, #3]
 80089de:	3b01      	subs	r3, #1
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	4302      	orrs	r2, r0
 80089e4:	3340      	adds	r3, #64	; 0x40
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	605a      	str	r2, [r3, #4]
 80089ec:	2300      	movs	r3, #0
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <HAL_PCDEx_SetRxFiFo>:
 80089fa:	b480      	push	{r7}
 80089fc:	b083      	sub	sp, #12
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	460b      	mov	r3, r1
 8008a04:	807b      	strh	r3, [r7, #2]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	887a      	ldrh	r2, [r7, #2]
 8008a0c:	625a      	str	r2, [r3, #36]	; 0x24
 8008a0e:	2300      	movs	r3, #0
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_PCDEx_LPM_Callback>:
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70fb      	strb	r3, [r7, #3]
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_RCC_OscConfig>:
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_RCC_OscConfig+0x12>
 8008a42:	2301      	movs	r3, #1
 8008a44:	e267      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d075      	beq.n	8008b3e <HAL_RCC_OscConfig+0x10a>
 8008a52:	4b88      	ldr	r3, [pc, #544]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f003 030c 	and.w	r3, r3, #12
 8008a5a:	2b04      	cmp	r3, #4
 8008a5c:	d00c      	beq.n	8008a78 <HAL_RCC_OscConfig+0x44>
 8008a5e:	4b85      	ldr	r3, [pc, #532]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f003 030c 	and.w	r3, r3, #12
 8008a66:	2b08      	cmp	r3, #8
 8008a68:	d112      	bne.n	8008a90 <HAL_RCC_OscConfig+0x5c>
 8008a6a:	4b82      	ldr	r3, [pc, #520]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a76:	d10b      	bne.n	8008a90 <HAL_RCC_OscConfig+0x5c>
 8008a78:	4b7e      	ldr	r3, [pc, #504]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d05b      	beq.n	8008b3c <HAL_RCC_OscConfig+0x108>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d157      	bne.n	8008b3c <HAL_RCC_OscConfig+0x108>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e242      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a98:	d106      	bne.n	8008aa8 <HAL_RCC_OscConfig+0x74>
 8008a9a:	4b76      	ldr	r3, [pc, #472]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a75      	ldr	r2, [pc, #468]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	e01d      	b.n	8008ae4 <HAL_RCC_OscConfig+0xb0>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ab0:	d10c      	bne.n	8008acc <HAL_RCC_OscConfig+0x98>
 8008ab2:	4b70      	ldr	r3, [pc, #448]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a6f      	ldr	r2, [pc, #444]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008abc:	6013      	str	r3, [r2, #0]
 8008abe:	4b6d      	ldr	r3, [pc, #436]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a6c      	ldr	r2, [pc, #432]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	e00b      	b.n	8008ae4 <HAL_RCC_OscConfig+0xb0>
 8008acc:	4b69      	ldr	r3, [pc, #420]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a68      	ldr	r2, [pc, #416]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	4b66      	ldr	r3, [pc, #408]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a65      	ldr	r2, [pc, #404]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d013      	beq.n	8008b14 <HAL_RCC_OscConfig+0xe0>
 8008aec:	f7fb fd02 	bl	80044f4 <HAL_GetTick>
 8008af0:	6138      	str	r0, [r7, #16]
 8008af2:	e008      	b.n	8008b06 <HAL_RCC_OscConfig+0xd2>
 8008af4:	f7fb fcfe 	bl	80044f4 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	2b64      	cmp	r3, #100	; 0x64
 8008b00:	d901      	bls.n	8008b06 <HAL_RCC_OscConfig+0xd2>
 8008b02:	2303      	movs	r3, #3
 8008b04:	e207      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008b06:	4b5b      	ldr	r3, [pc, #364]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0f0      	beq.n	8008af4 <HAL_RCC_OscConfig+0xc0>
 8008b12:	e014      	b.n	8008b3e <HAL_RCC_OscConfig+0x10a>
 8008b14:	f7fb fcee 	bl	80044f4 <HAL_GetTick>
 8008b18:	6138      	str	r0, [r7, #16]
 8008b1a:	e008      	b.n	8008b2e <HAL_RCC_OscConfig+0xfa>
 8008b1c:	f7fb fcea 	bl	80044f4 <HAL_GetTick>
 8008b20:	4602      	mov	r2, r0
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	2b64      	cmp	r3, #100	; 0x64
 8008b28:	d901      	bls.n	8008b2e <HAL_RCC_OscConfig+0xfa>
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e1f3      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008b2e:	4b51      	ldr	r3, [pc, #324]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1f0      	bne.n	8008b1c <HAL_RCC_OscConfig+0xe8>
 8008b3a:	e000      	b.n	8008b3e <HAL_RCC_OscConfig+0x10a>
 8008b3c:	bf00      	nop
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d063      	beq.n	8008c12 <HAL_RCC_OscConfig+0x1de>
 8008b4a:	4b4a      	ldr	r3, [pc, #296]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 030c 	and.w	r3, r3, #12
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00b      	beq.n	8008b6e <HAL_RCC_OscConfig+0x13a>
 8008b56:	4b47      	ldr	r3, [pc, #284]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f003 030c 	and.w	r3, r3, #12
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d11c      	bne.n	8008b9c <HAL_RCC_OscConfig+0x168>
 8008b62:	4b44      	ldr	r3, [pc, #272]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d116      	bne.n	8008b9c <HAL_RCC_OscConfig+0x168>
 8008b6e:	4b41      	ldr	r3, [pc, #260]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d005      	beq.n	8008b86 <HAL_RCC_OscConfig+0x152>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d001      	beq.n	8008b86 <HAL_RCC_OscConfig+0x152>
 8008b82:	2301      	movs	r3, #1
 8008b84:	e1c7      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008b86:	4b3b      	ldr	r3, [pc, #236]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	00db      	lsls	r3, r3, #3
 8008b94:	4937      	ldr	r1, [pc, #220]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	600b      	str	r3, [r1, #0]
 8008b9a:	e03a      	b.n	8008c12 <HAL_RCC_OscConfig+0x1de>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d020      	beq.n	8008be6 <HAL_RCC_OscConfig+0x1b2>
 8008ba4:	4b34      	ldr	r3, [pc, #208]	; (8008c78 <HAL_RCC_OscConfig+0x244>)
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	f7fb fca3 	bl	80044f4 <HAL_GetTick>
 8008bae:	6138      	str	r0, [r7, #16]
 8008bb0:	e008      	b.n	8008bc4 <HAL_RCC_OscConfig+0x190>
 8008bb2:	f7fb fc9f 	bl	80044f4 <HAL_GetTick>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d901      	bls.n	8008bc4 <HAL_RCC_OscConfig+0x190>
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e1a8      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008bc4:	4b2b      	ldr	r3, [pc, #172]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d0f0      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x17e>
 8008bd0:	4b28      	ldr	r3, [pc, #160]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	4925      	ldr	r1, [pc, #148]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008be0:	4313      	orrs	r3, r2
 8008be2:	600b      	str	r3, [r1, #0]
 8008be4:	e015      	b.n	8008c12 <HAL_RCC_OscConfig+0x1de>
 8008be6:	4b24      	ldr	r3, [pc, #144]	; (8008c78 <HAL_RCC_OscConfig+0x244>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	f7fb fc82 	bl	80044f4 <HAL_GetTick>
 8008bf0:	6138      	str	r0, [r7, #16]
 8008bf2:	e008      	b.n	8008c06 <HAL_RCC_OscConfig+0x1d2>
 8008bf4:	f7fb fc7e 	bl	80044f4 <HAL_GetTick>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d901      	bls.n	8008c06 <HAL_RCC_OscConfig+0x1d2>
 8008c02:	2303      	movs	r3, #3
 8008c04:	e187      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008c06:	4b1b      	ldr	r3, [pc, #108]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1f0      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x1c0>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 0308 	and.w	r3, r3, #8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d036      	beq.n	8008c8c <HAL_RCC_OscConfig+0x258>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d016      	beq.n	8008c54 <HAL_RCC_OscConfig+0x220>
 8008c26:	4b15      	ldr	r3, [pc, #84]	; (8008c7c <HAL_RCC_OscConfig+0x248>)
 8008c28:	2201      	movs	r2, #1
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	f7fb fc62 	bl	80044f4 <HAL_GetTick>
 8008c30:	6138      	str	r0, [r7, #16]
 8008c32:	e008      	b.n	8008c46 <HAL_RCC_OscConfig+0x212>
 8008c34:	f7fb fc5e 	bl	80044f4 <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d901      	bls.n	8008c46 <HAL_RCC_OscConfig+0x212>
 8008c42:	2303      	movs	r3, #3
 8008c44:	e167      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008c46:	4b0b      	ldr	r3, [pc, #44]	; (8008c74 <HAL_RCC_OscConfig+0x240>)
 8008c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0f0      	beq.n	8008c34 <HAL_RCC_OscConfig+0x200>
 8008c52:	e01b      	b.n	8008c8c <HAL_RCC_OscConfig+0x258>
 8008c54:	4b09      	ldr	r3, [pc, #36]	; (8008c7c <HAL_RCC_OscConfig+0x248>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	f7fb fc4b 	bl	80044f4 <HAL_GetTick>
 8008c5e:	6138      	str	r0, [r7, #16]
 8008c60:	e00e      	b.n	8008c80 <HAL_RCC_OscConfig+0x24c>
 8008c62:	f7fb fc47 	bl	80044f4 <HAL_GetTick>
 8008c66:	4602      	mov	r2, r0
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d907      	bls.n	8008c80 <HAL_RCC_OscConfig+0x24c>
 8008c70:	2303      	movs	r3, #3
 8008c72:	e150      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008c74:	40023800 	.word	0x40023800
 8008c78:	42470000 	.word	0x42470000
 8008c7c:	42470e80 	.word	0x42470e80
 8008c80:	4b88      	ldr	r3, [pc, #544]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c84:	f003 0302 	and.w	r3, r3, #2
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1ea      	bne.n	8008c62 <HAL_RCC_OscConfig+0x22e>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 8097 	beq.w	8008dc8 <HAL_RCC_OscConfig+0x394>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	75fb      	strb	r3, [r7, #23]
 8008c9e:	4b81      	ldr	r3, [pc, #516]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10f      	bne.n	8008cca <HAL_RCC_OscConfig+0x296>
 8008caa:	2300      	movs	r3, #0
 8008cac:	60bb      	str	r3, [r7, #8]
 8008cae:	4b7d      	ldr	r3, [pc, #500]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb2:	4a7c      	ldr	r2, [pc, #496]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8008cba:	4b7a      	ldr	r3, [pc, #488]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cc2:	60bb      	str	r3, [r7, #8]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	75fb      	strb	r3, [r7, #23]
 8008cca:	4b77      	ldr	r3, [pc, #476]	; (8008ea8 <HAL_RCC_OscConfig+0x474>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d118      	bne.n	8008d08 <HAL_RCC_OscConfig+0x2d4>
 8008cd6:	4b74      	ldr	r3, [pc, #464]	; (8008ea8 <HAL_RCC_OscConfig+0x474>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a73      	ldr	r2, [pc, #460]	; (8008ea8 <HAL_RCC_OscConfig+0x474>)
 8008cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	f7fb fc07 	bl	80044f4 <HAL_GetTick>
 8008ce6:	6138      	str	r0, [r7, #16]
 8008ce8:	e008      	b.n	8008cfc <HAL_RCC_OscConfig+0x2c8>
 8008cea:	f7fb fc03 	bl	80044f4 <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d901      	bls.n	8008cfc <HAL_RCC_OscConfig+0x2c8>
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e10c      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008cfc:	4b6a      	ldr	r3, [pc, #424]	; (8008ea8 <HAL_RCC_OscConfig+0x474>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d0f0      	beq.n	8008cea <HAL_RCC_OscConfig+0x2b6>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d106      	bne.n	8008d1e <HAL_RCC_OscConfig+0x2ea>
 8008d10:	4b64      	ldr	r3, [pc, #400]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d14:	4a63      	ldr	r2, [pc, #396]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008d16:	f043 0301 	orr.w	r3, r3, #1
 8008d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8008d1c:	e01c      	b.n	8008d58 <HAL_RCC_OscConfig+0x324>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	2b05      	cmp	r3, #5
 8008d24:	d10c      	bne.n	8008d40 <HAL_RCC_OscConfig+0x30c>
 8008d26:	4b5f      	ldr	r3, [pc, #380]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2a:	4a5e      	ldr	r2, [pc, #376]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008d2c:	f043 0304 	orr.w	r3, r3, #4
 8008d30:	6713      	str	r3, [r2, #112]	; 0x70
 8008d32:	4b5c      	ldr	r3, [pc, #368]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d36:	4a5b      	ldr	r2, [pc, #364]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008d38:	f043 0301 	orr.w	r3, r3, #1
 8008d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8008d3e:	e00b      	b.n	8008d58 <HAL_RCC_OscConfig+0x324>
 8008d40:	4b58      	ldr	r3, [pc, #352]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d44:	4a57      	ldr	r2, [pc, #348]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008d46:	f023 0301 	bic.w	r3, r3, #1
 8008d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8008d4c:	4b55      	ldr	r3, [pc, #340]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d50:	4a54      	ldr	r2, [pc, #336]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008d52:	f023 0304 	bic.w	r3, r3, #4
 8008d56:	6713      	str	r3, [r2, #112]	; 0x70
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d015      	beq.n	8008d8c <HAL_RCC_OscConfig+0x358>
 8008d60:	f7fb fbc8 	bl	80044f4 <HAL_GetTick>
 8008d64:	6138      	str	r0, [r7, #16]
 8008d66:	e00a      	b.n	8008d7e <HAL_RCC_OscConfig+0x34a>
 8008d68:	f7fb fbc4 	bl	80044f4 <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_OscConfig+0x34a>
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e0cb      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008d7e:	4b49      	ldr	r3, [pc, #292]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d82:	f003 0302 	and.w	r3, r3, #2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0ee      	beq.n	8008d68 <HAL_RCC_OscConfig+0x334>
 8008d8a:	e014      	b.n	8008db6 <HAL_RCC_OscConfig+0x382>
 8008d8c:	f7fb fbb2 	bl	80044f4 <HAL_GetTick>
 8008d90:	6138      	str	r0, [r7, #16]
 8008d92:	e00a      	b.n	8008daa <HAL_RCC_OscConfig+0x376>
 8008d94:	f7fb fbae 	bl	80044f4 <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_OscConfig+0x376>
 8008da6:	2303      	movs	r3, #3
 8008da8:	e0b5      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008daa:	4b3e      	ldr	r3, [pc, #248]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dae:	f003 0302 	and.w	r3, r3, #2
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1ee      	bne.n	8008d94 <HAL_RCC_OscConfig+0x360>
 8008db6:	7dfb      	ldrb	r3, [r7, #23]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d105      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x394>
 8008dbc:	4b39      	ldr	r3, [pc, #228]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc0:	4a38      	ldr	r2, [pc, #224]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 80a1 	beq.w	8008f14 <HAL_RCC_OscConfig+0x4e0>
 8008dd2:	4b34      	ldr	r3, [pc, #208]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f003 030c 	and.w	r3, r3, #12
 8008dda:	2b08      	cmp	r3, #8
 8008ddc:	d05c      	beq.n	8008e98 <HAL_RCC_OscConfig+0x464>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d141      	bne.n	8008e6a <HAL_RCC_OscConfig+0x436>
 8008de6:	4b31      	ldr	r3, [pc, #196]	; (8008eac <HAL_RCC_OscConfig+0x478>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	f7fb fb82 	bl	80044f4 <HAL_GetTick>
 8008df0:	6138      	str	r0, [r7, #16]
 8008df2:	e008      	b.n	8008e06 <HAL_RCC_OscConfig+0x3d2>
 8008df4:	f7fb fb7e 	bl	80044f4 <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d901      	bls.n	8008e06 <HAL_RCC_OscConfig+0x3d2>
 8008e02:	2303      	movs	r3, #3
 8008e04:	e087      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008e06:	4b27      	ldr	r3, [pc, #156]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1f0      	bne.n	8008df4 <HAL_RCC_OscConfig+0x3c0>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	69da      	ldr	r2, [r3, #28]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	431a      	orrs	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	019b      	lsls	r3, r3, #6
 8008e22:	431a      	orrs	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e28:	085b      	lsrs	r3, r3, #1
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	041b      	lsls	r3, r3, #16
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e34:	061b      	lsls	r3, r3, #24
 8008e36:	491b      	ldr	r1, [pc, #108]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	604b      	str	r3, [r1, #4]
 8008e3c:	4b1b      	ldr	r3, [pc, #108]	; (8008eac <HAL_RCC_OscConfig+0x478>)
 8008e3e:	2201      	movs	r2, #1
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	f7fb fb57 	bl	80044f4 <HAL_GetTick>
 8008e46:	6138      	str	r0, [r7, #16]
 8008e48:	e008      	b.n	8008e5c <HAL_RCC_OscConfig+0x428>
 8008e4a:	f7fb fb53 	bl	80044f4 <HAL_GetTick>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d901      	bls.n	8008e5c <HAL_RCC_OscConfig+0x428>
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e05c      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008e5c:	4b11      	ldr	r3, [pc, #68]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0f0      	beq.n	8008e4a <HAL_RCC_OscConfig+0x416>
 8008e68:	e054      	b.n	8008f14 <HAL_RCC_OscConfig+0x4e0>
 8008e6a:	4b10      	ldr	r3, [pc, #64]	; (8008eac <HAL_RCC_OscConfig+0x478>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	f7fb fb40 	bl	80044f4 <HAL_GetTick>
 8008e74:	6138      	str	r0, [r7, #16]
 8008e76:	e008      	b.n	8008e8a <HAL_RCC_OscConfig+0x456>
 8008e78:	f7fb fb3c 	bl	80044f4 <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d901      	bls.n	8008e8a <HAL_RCC_OscConfig+0x456>
 8008e86:	2303      	movs	r3, #3
 8008e88:	e045      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008e8a:	4b06      	ldr	r3, [pc, #24]	; (8008ea4 <HAL_RCC_OscConfig+0x470>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1f0      	bne.n	8008e78 <HAL_RCC_OscConfig+0x444>
 8008e96:	e03d      	b.n	8008f14 <HAL_RCC_OscConfig+0x4e0>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d107      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x47c>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e038      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008ea4:	40023800 	.word	0x40023800
 8008ea8:	40007000 	.word	0x40007000
 8008eac:	42470060 	.word	0x42470060
 8008eb0:	4b1b      	ldr	r3, [pc, #108]	; (8008f20 <HAL_RCC_OscConfig+0x4ec>)
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	60fb      	str	r3, [r7, #12]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d028      	beq.n	8008f10 <HAL_RCC_OscConfig+0x4dc>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	69db      	ldr	r3, [r3, #28]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d121      	bne.n	8008f10 <HAL_RCC_OscConfig+0x4dc>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d11a      	bne.n	8008f10 <HAL_RCC_OscConfig+0x4dc>
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008ee6:	0192      	lsls	r2, r2, #6
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d111      	bne.n	8008f10 <HAL_RCC_OscConfig+0x4dc>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef6:	085b      	lsrs	r3, r3, #1
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	041b      	lsls	r3, r3, #16
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d107      	bne.n	8008f10 <HAL_RCC_OscConfig+0x4dc>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0a:	061b      	lsls	r3, r3, #24
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d001      	beq.n	8008f14 <HAL_RCC_OscConfig+0x4e0>
 8008f10:	2301      	movs	r3, #1
 8008f12:	e000      	b.n	8008f16 <HAL_RCC_OscConfig+0x4e2>
 8008f14:	2300      	movs	r3, #0
 8008f16:	4618      	mov	r0, r3
 8008f18:	3718      	adds	r7, #24
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	40023800 	.word	0x40023800

08008f24 <HAL_RCC_ClockConfig>:
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <HAL_RCC_ClockConfig+0x14>
 8008f34:	2301      	movs	r3, #1
 8008f36:	e0cc      	b.n	80090d2 <HAL_RCC_ClockConfig+0x1ae>
 8008f38:	4b68      	ldr	r3, [pc, #416]	; (80090dc <HAL_RCC_ClockConfig+0x1b8>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d90c      	bls.n	8008f60 <HAL_RCC_ClockConfig+0x3c>
 8008f46:	4b65      	ldr	r3, [pc, #404]	; (80090dc <HAL_RCC_ClockConfig+0x1b8>)
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	b2d2      	uxtb	r2, r2
 8008f4c:	701a      	strb	r2, [r3, #0]
 8008f4e:	4b63      	ldr	r3, [pc, #396]	; (80090dc <HAL_RCC_ClockConfig+0x1b8>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 030f 	and.w	r3, r3, #15
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d001      	beq.n	8008f60 <HAL_RCC_ClockConfig+0x3c>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e0b8      	b.n	80090d2 <HAL_RCC_ClockConfig+0x1ae>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0302 	and.w	r3, r3, #2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d020      	beq.n	8008fae <HAL_RCC_ClockConfig+0x8a>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0304 	and.w	r3, r3, #4
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d005      	beq.n	8008f84 <HAL_RCC_ClockConfig+0x60>
 8008f78:	4b59      	ldr	r3, [pc, #356]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	4a58      	ldr	r2, [pc, #352]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008f82:	6093      	str	r3, [r2, #8]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0308 	and.w	r3, r3, #8
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d005      	beq.n	8008f9c <HAL_RCC_ClockConfig+0x78>
 8008f90:	4b53      	ldr	r3, [pc, #332]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	4a52      	ldr	r2, [pc, #328]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008f9a:	6093      	str	r3, [r2, #8]
 8008f9c:	4b50      	ldr	r3, [pc, #320]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	494d      	ldr	r1, [pc, #308]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	608b      	str	r3, [r1, #8]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d044      	beq.n	8009044 <HAL_RCC_ClockConfig+0x120>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d107      	bne.n	8008fd2 <HAL_RCC_ClockConfig+0xae>
 8008fc2:	4b47      	ldr	r3, [pc, #284]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d119      	bne.n	8009002 <HAL_RCC_ClockConfig+0xde>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e07f      	b.n	80090d2 <HAL_RCC_ClockConfig+0x1ae>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d003      	beq.n	8008fe2 <HAL_RCC_ClockConfig+0xbe>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d107      	bne.n	8008ff2 <HAL_RCC_ClockConfig+0xce>
 8008fe2:	4b3f      	ldr	r3, [pc, #252]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d109      	bne.n	8009002 <HAL_RCC_ClockConfig+0xde>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e06f      	b.n	80090d2 <HAL_RCC_ClockConfig+0x1ae>
 8008ff2:	4b3b      	ldr	r3, [pc, #236]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0302 	and.w	r3, r3, #2
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <HAL_RCC_ClockConfig+0xde>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e067      	b.n	80090d2 <HAL_RCC_ClockConfig+0x1ae>
 8009002:	4b37      	ldr	r3, [pc, #220]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	f023 0203 	bic.w	r2, r3, #3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	4934      	ldr	r1, [pc, #208]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 8009010:	4313      	orrs	r3, r2
 8009012:	608b      	str	r3, [r1, #8]
 8009014:	f7fb fa6e 	bl	80044f4 <HAL_GetTick>
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	e00a      	b.n	8009032 <HAL_RCC_ClockConfig+0x10e>
 800901c:	f7fb fa6a 	bl	80044f4 <HAL_GetTick>
 8009020:	4602      	mov	r2, r0
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	f241 3288 	movw	r2, #5000	; 0x1388
 800902a:	4293      	cmp	r3, r2
 800902c:	d901      	bls.n	8009032 <HAL_RCC_ClockConfig+0x10e>
 800902e:	2303      	movs	r3, #3
 8009030:	e04f      	b.n	80090d2 <HAL_RCC_ClockConfig+0x1ae>
 8009032:	4b2b      	ldr	r3, [pc, #172]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f003 020c 	and.w	r2, r3, #12
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	429a      	cmp	r2, r3
 8009042:	d1eb      	bne.n	800901c <HAL_RCC_ClockConfig+0xf8>
 8009044:	4b25      	ldr	r3, [pc, #148]	; (80090dc <HAL_RCC_ClockConfig+0x1b8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 030f 	and.w	r3, r3, #15
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	429a      	cmp	r2, r3
 8009050:	d20c      	bcs.n	800906c <HAL_RCC_ClockConfig+0x148>
 8009052:	4b22      	ldr	r3, [pc, #136]	; (80090dc <HAL_RCC_ClockConfig+0x1b8>)
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	b2d2      	uxtb	r2, r2
 8009058:	701a      	strb	r2, [r3, #0]
 800905a:	4b20      	ldr	r3, [pc, #128]	; (80090dc <HAL_RCC_ClockConfig+0x1b8>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 030f 	and.w	r3, r3, #15
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	429a      	cmp	r2, r3
 8009066:	d001      	beq.n	800906c <HAL_RCC_ClockConfig+0x148>
 8009068:	2301      	movs	r3, #1
 800906a:	e032      	b.n	80090d2 <HAL_RCC_ClockConfig+0x1ae>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0304 	and.w	r3, r3, #4
 8009074:	2b00      	cmp	r3, #0
 8009076:	d008      	beq.n	800908a <HAL_RCC_ClockConfig+0x166>
 8009078:	4b19      	ldr	r3, [pc, #100]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	4916      	ldr	r1, [pc, #88]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 8009086:	4313      	orrs	r3, r2
 8009088:	608b      	str	r3, [r1, #8]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0308 	and.w	r3, r3, #8
 8009092:	2b00      	cmp	r3, #0
 8009094:	d009      	beq.n	80090aa <HAL_RCC_ClockConfig+0x186>
 8009096:	4b12      	ldr	r3, [pc, #72]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	00db      	lsls	r3, r3, #3
 80090a4:	490e      	ldr	r1, [pc, #56]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	608b      	str	r3, [r1, #8]
 80090aa:	f000 f821 	bl	80090f0 <HAL_RCC_GetSysClockFreq>
 80090ae:	4602      	mov	r2, r0
 80090b0:	4b0b      	ldr	r3, [pc, #44]	; (80090e0 <HAL_RCC_ClockConfig+0x1bc>)
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	091b      	lsrs	r3, r3, #4
 80090b6:	f003 030f 	and.w	r3, r3, #15
 80090ba:	490a      	ldr	r1, [pc, #40]	; (80090e4 <HAL_RCC_ClockConfig+0x1c0>)
 80090bc:	5ccb      	ldrb	r3, [r1, r3]
 80090be:	fa22 f303 	lsr.w	r3, r2, r3
 80090c2:	4a09      	ldr	r2, [pc, #36]	; (80090e8 <HAL_RCC_ClockConfig+0x1c4>)
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <HAL_RCC_ClockConfig+0x1c8>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fb f9ce 	bl	800446c <HAL_InitTick>
 80090d0:	2300      	movs	r3, #0
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	40023c00 	.word	0x40023c00
 80090e0:	40023800 	.word	0x40023800
 80090e4:	08015180 	.word	0x08015180
 80090e8:	20000014 	.word	0x20000014
 80090ec:	20000018 	.word	0x20000018

080090f0 <HAL_RCC_GetSysClockFreq>:
 80090f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090f4:	b094      	sub	sp, #80	; 0x50
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	2300      	movs	r3, #0
 80090fa:	647b      	str	r3, [r7, #68]	; 0x44
 80090fc:	2300      	movs	r3, #0
 80090fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009100:	2300      	movs	r3, #0
 8009102:	643b      	str	r3, [r7, #64]	; 0x40
 8009104:	2300      	movs	r3, #0
 8009106:	64bb      	str	r3, [r7, #72]	; 0x48
 8009108:	4b79      	ldr	r3, [pc, #484]	; (80092f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f003 030c 	and.w	r3, r3, #12
 8009110:	2b08      	cmp	r3, #8
 8009112:	d00d      	beq.n	8009130 <HAL_RCC_GetSysClockFreq+0x40>
 8009114:	2b08      	cmp	r3, #8
 8009116:	f200 80e1 	bhi.w	80092dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800911a:	2b00      	cmp	r3, #0
 800911c:	d002      	beq.n	8009124 <HAL_RCC_GetSysClockFreq+0x34>
 800911e:	2b04      	cmp	r3, #4
 8009120:	d003      	beq.n	800912a <HAL_RCC_GetSysClockFreq+0x3a>
 8009122:	e0db      	b.n	80092dc <HAL_RCC_GetSysClockFreq+0x1ec>
 8009124:	4b73      	ldr	r3, [pc, #460]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8009126:	64bb      	str	r3, [r7, #72]	; 0x48
 8009128:	e0db      	b.n	80092e2 <HAL_RCC_GetSysClockFreq+0x1f2>
 800912a:	4b73      	ldr	r3, [pc, #460]	; (80092f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800912c:	64bb      	str	r3, [r7, #72]	; 0x48
 800912e:	e0d8      	b.n	80092e2 <HAL_RCC_GetSysClockFreq+0x1f2>
 8009130:	4b6f      	ldr	r3, [pc, #444]	; (80092f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009138:	647b      	str	r3, [r7, #68]	; 0x44
 800913a:	4b6d      	ldr	r3, [pc, #436]	; (80092f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d063      	beq.n	800920e <HAL_RCC_GetSysClockFreq+0x11e>
 8009146:	4b6a      	ldr	r3, [pc, #424]	; (80092f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	099b      	lsrs	r3, r3, #6
 800914c:	2200      	movs	r2, #0
 800914e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009150:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009158:	633b      	str	r3, [r7, #48]	; 0x30
 800915a:	2300      	movs	r3, #0
 800915c:	637b      	str	r3, [r7, #52]	; 0x34
 800915e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009162:	4622      	mov	r2, r4
 8009164:	462b      	mov	r3, r5
 8009166:	f04f 0000 	mov.w	r0, #0
 800916a:	f04f 0100 	mov.w	r1, #0
 800916e:	0159      	lsls	r1, r3, #5
 8009170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009174:	0150      	lsls	r0, r2, #5
 8009176:	4602      	mov	r2, r0
 8009178:	460b      	mov	r3, r1
 800917a:	4621      	mov	r1, r4
 800917c:	1a51      	subs	r1, r2, r1
 800917e:	6139      	str	r1, [r7, #16]
 8009180:	4629      	mov	r1, r5
 8009182:	eb63 0301 	sbc.w	r3, r3, r1
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	f04f 0200 	mov.w	r2, #0
 800918c:	f04f 0300 	mov.w	r3, #0
 8009190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009194:	4659      	mov	r1, fp
 8009196:	018b      	lsls	r3, r1, #6
 8009198:	4651      	mov	r1, sl
 800919a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800919e:	4651      	mov	r1, sl
 80091a0:	018a      	lsls	r2, r1, #6
 80091a2:	4651      	mov	r1, sl
 80091a4:	ebb2 0801 	subs.w	r8, r2, r1
 80091a8:	4659      	mov	r1, fp
 80091aa:	eb63 0901 	sbc.w	r9, r3, r1
 80091ae:	f04f 0200 	mov.w	r2, #0
 80091b2:	f04f 0300 	mov.w	r3, #0
 80091b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091c2:	4690      	mov	r8, r2
 80091c4:	4699      	mov	r9, r3
 80091c6:	4623      	mov	r3, r4
 80091c8:	eb18 0303 	adds.w	r3, r8, r3
 80091cc:	60bb      	str	r3, [r7, #8]
 80091ce:	462b      	mov	r3, r5
 80091d0:	eb49 0303 	adc.w	r3, r9, r3
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	f04f 0200 	mov.w	r2, #0
 80091da:	f04f 0300 	mov.w	r3, #0
 80091de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80091e2:	4629      	mov	r1, r5
 80091e4:	024b      	lsls	r3, r1, #9
 80091e6:	4621      	mov	r1, r4
 80091e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80091ec:	4621      	mov	r1, r4
 80091ee:	024a      	lsls	r2, r1, #9
 80091f0:	4610      	mov	r0, r2
 80091f2:	4619      	mov	r1, r3
 80091f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091f6:	2200      	movs	r2, #0
 80091f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80091fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009200:	f7f7 fd62 	bl	8000cc8 <__aeabi_uldivmod>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4613      	mov	r3, r2
 800920a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800920c:	e058      	b.n	80092c0 <HAL_RCC_GetSysClockFreq+0x1d0>
 800920e:	4b38      	ldr	r3, [pc, #224]	; (80092f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	099b      	lsrs	r3, r3, #6
 8009214:	2200      	movs	r2, #0
 8009216:	4618      	mov	r0, r3
 8009218:	4611      	mov	r1, r2
 800921a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800921e:	623b      	str	r3, [r7, #32]
 8009220:	2300      	movs	r3, #0
 8009222:	627b      	str	r3, [r7, #36]	; 0x24
 8009224:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009228:	4642      	mov	r2, r8
 800922a:	464b      	mov	r3, r9
 800922c:	f04f 0000 	mov.w	r0, #0
 8009230:	f04f 0100 	mov.w	r1, #0
 8009234:	0159      	lsls	r1, r3, #5
 8009236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800923a:	0150      	lsls	r0, r2, #5
 800923c:	4602      	mov	r2, r0
 800923e:	460b      	mov	r3, r1
 8009240:	4641      	mov	r1, r8
 8009242:	ebb2 0a01 	subs.w	sl, r2, r1
 8009246:	4649      	mov	r1, r9
 8009248:	eb63 0b01 	sbc.w	fp, r3, r1
 800924c:	f04f 0200 	mov.w	r2, #0
 8009250:	f04f 0300 	mov.w	r3, #0
 8009254:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009258:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800925c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009260:	ebb2 040a 	subs.w	r4, r2, sl
 8009264:	eb63 050b 	sbc.w	r5, r3, fp
 8009268:	f04f 0200 	mov.w	r2, #0
 800926c:	f04f 0300 	mov.w	r3, #0
 8009270:	00eb      	lsls	r3, r5, #3
 8009272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009276:	00e2      	lsls	r2, r4, #3
 8009278:	4614      	mov	r4, r2
 800927a:	461d      	mov	r5, r3
 800927c:	4643      	mov	r3, r8
 800927e:	18e3      	adds	r3, r4, r3
 8009280:	603b      	str	r3, [r7, #0]
 8009282:	464b      	mov	r3, r9
 8009284:	eb45 0303 	adc.w	r3, r5, r3
 8009288:	607b      	str	r3, [r7, #4]
 800928a:	f04f 0200 	mov.w	r2, #0
 800928e:	f04f 0300 	mov.w	r3, #0
 8009292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009296:	4629      	mov	r1, r5
 8009298:	028b      	lsls	r3, r1, #10
 800929a:	4621      	mov	r1, r4
 800929c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80092a0:	4621      	mov	r1, r4
 80092a2:	028a      	lsls	r2, r1, #10
 80092a4:	4610      	mov	r0, r2
 80092a6:	4619      	mov	r1, r3
 80092a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092aa:	2200      	movs	r2, #0
 80092ac:	61bb      	str	r3, [r7, #24]
 80092ae:	61fa      	str	r2, [r7, #28]
 80092b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092b4:	f7f7 fd08 	bl	8000cc8 <__aeabi_uldivmod>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4613      	mov	r3, r2
 80092be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092c0:	4b0b      	ldr	r3, [pc, #44]	; (80092f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	0c1b      	lsrs	r3, r3, #16
 80092c6:	f003 0303 	and.w	r3, r3, #3
 80092ca:	3301      	adds	r3, #1
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	643b      	str	r3, [r7, #64]	; 0x40
 80092d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80092da:	e002      	b.n	80092e2 <HAL_RCC_GetSysClockFreq+0x1f2>
 80092dc:	4b05      	ldr	r3, [pc, #20]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80092de:	64bb      	str	r3, [r7, #72]	; 0x48
 80092e0:	bf00      	nop
 80092e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092e4:	4618      	mov	r0, r3
 80092e6:	3750      	adds	r7, #80	; 0x50
 80092e8:	46bd      	mov	sp, r7
 80092ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092ee:	bf00      	nop
 80092f0:	40023800 	.word	0x40023800
 80092f4:	00f42400 	.word	0x00f42400
 80092f8:	007a1200 	.word	0x007a1200

080092fc <HAL_RCC_GetHCLKFreq>:
 80092fc:	b480      	push	{r7}
 80092fe:	af00      	add	r7, sp, #0
 8009300:	4b03      	ldr	r3, [pc, #12]	; (8009310 <HAL_RCC_GetHCLKFreq+0x14>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4618      	mov	r0, r3
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	20000014 	.word	0x20000014

08009314 <HAL_RCC_GetPCLK1Freq>:
 8009314:	b580      	push	{r7, lr}
 8009316:	af00      	add	r7, sp, #0
 8009318:	f7ff fff0 	bl	80092fc <HAL_RCC_GetHCLKFreq>
 800931c:	4602      	mov	r2, r0
 800931e:	4b05      	ldr	r3, [pc, #20]	; (8009334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	0a9b      	lsrs	r3, r3, #10
 8009324:	f003 0307 	and.w	r3, r3, #7
 8009328:	4903      	ldr	r1, [pc, #12]	; (8009338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800932a:	5ccb      	ldrb	r3, [r1, r3]
 800932c:	fa22 f303 	lsr.w	r3, r2, r3
 8009330:	4618      	mov	r0, r3
 8009332:	bd80      	pop	{r7, pc}
 8009334:	40023800 	.word	0x40023800
 8009338:	08015190 	.word	0x08015190

0800933c <HAL_SPI_Init>:
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d101      	bne.n	800934e <HAL_SPI_Init+0x12>
 800934a:	2301      	movs	r3, #1
 800934c:	e07b      	b.n	8009446 <HAL_SPI_Init+0x10a>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	2b00      	cmp	r3, #0
 8009354:	d108      	bne.n	8009368 <HAL_SPI_Init+0x2c>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800935e:	d009      	beq.n	8009374 <HAL_SPI_Init+0x38>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	61da      	str	r2, [r3, #28]
 8009366:	e005      	b.n	8009374 <HAL_SPI_Init+0x38>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	611a      	str	r2, [r3, #16]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	615a      	str	r2, [r3, #20]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	629a      	str	r2, [r3, #40]	; 0x28
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d106      	bne.n	8009394 <HAL_SPI_Init+0x58>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7fa fcf4 	bl	8003d7c <HAL_SPI_MspInit>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2202      	movs	r2, #2
 8009398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80093bc:	431a      	orrs	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093c6:	431a      	orrs	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	f003 0302 	and.w	r3, r3, #2
 80093d0:	431a      	orrs	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	f003 0301 	and.w	r3, r3, #1
 80093da:	431a      	orrs	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093e4:	431a      	orrs	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093ee:	431a      	orrs	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a1b      	ldr	r3, [r3, #32]
 80093f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f8:	ea42 0103 	orr.w	r1, r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009400:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	430a      	orrs	r2, r1
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	0c1b      	lsrs	r3, r3, #16
 8009412:	f003 0104 	and.w	r1, r3, #4
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941a:	f003 0210 	and.w	r2, r3, #16
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	605a      	str	r2, [r3, #4]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69da      	ldr	r2, [r3, #28]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009434:	61da      	str	r2, [r3, #28]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	655a      	str	r2, [r3, #84]	; 0x54
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009444:	2300      	movs	r3, #0
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <HAL_SPI_Transmit>:
 800944e:	b580      	push	{r7, lr}
 8009450:	b088      	sub	sp, #32
 8009452:	af00      	add	r7, sp, #0
 8009454:	60f8      	str	r0, [r7, #12]
 8009456:	60b9      	str	r1, [r7, #8]
 8009458:	603b      	str	r3, [r7, #0]
 800945a:	4613      	mov	r3, r2
 800945c:	80fb      	strh	r3, [r7, #6]
 800945e:	2300      	movs	r3, #0
 8009460:	77fb      	strb	r3, [r7, #31]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009468:	2b01      	cmp	r3, #1
 800946a:	d101      	bne.n	8009470 <HAL_SPI_Transmit+0x22>
 800946c:	2302      	movs	r3, #2
 800946e:	e126      	b.n	80096be <HAL_SPI_Transmit+0x270>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009478:	f7fb f83c 	bl	80044f4 <HAL_GetTick>
 800947c:	61b8      	str	r0, [r7, #24]
 800947e:	88fb      	ldrh	r3, [r7, #6]
 8009480:	82fb      	strh	r3, [r7, #22]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b01      	cmp	r3, #1
 800948c:	d002      	beq.n	8009494 <HAL_SPI_Transmit+0x46>
 800948e:	2302      	movs	r3, #2
 8009490:	77fb      	strb	r3, [r7, #31]
 8009492:	e10b      	b.n	80096ac <HAL_SPI_Transmit+0x25e>
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <HAL_SPI_Transmit+0x52>
 800949a:	88fb      	ldrh	r3, [r7, #6]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <HAL_SPI_Transmit+0x58>
 80094a0:	2301      	movs	r3, #1
 80094a2:	77fb      	strb	r3, [r7, #31]
 80094a4:	e102      	b.n	80096ac <HAL_SPI_Transmit+0x25e>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2203      	movs	r2, #3
 80094aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	655a      	str	r2, [r3, #84]	; 0x54
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	631a      	str	r2, [r3, #48]	; 0x30
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	88fa      	ldrh	r2, [r7, #6]
 80094be:	869a      	strh	r2, [r3, #52]	; 0x34
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	88fa      	ldrh	r2, [r7, #6]
 80094c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	639a      	str	r2, [r3, #56]	; 0x38
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	879a      	strh	r2, [r3, #60]	; 0x3c
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	645a      	str	r2, [r3, #68]	; 0x44
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	641a      	str	r2, [r3, #64]	; 0x40
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094ec:	d10f      	bne.n	800950e <HAL_SPI_Transmit+0xc0>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009518:	2b40      	cmp	r3, #64	; 0x40
 800951a:	d007      	beq.n	800952c <HAL_SPI_Transmit+0xde>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009534:	d14b      	bne.n	80095ce <HAL_SPI_Transmit+0x180>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d002      	beq.n	8009544 <HAL_SPI_Transmit+0xf6>
 800953e:	8afb      	ldrh	r3, [r7, #22]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d13e      	bne.n	80095c2 <HAL_SPI_Transmit+0x174>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009548:	881a      	ldrh	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60da      	str	r2, [r3, #12]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009554:	1c9a      	adds	r2, r3, #2
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	631a      	str	r2, [r3, #48]	; 0x30
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800955e:	b29b      	uxth	r3, r3
 8009560:	3b01      	subs	r3, #1
 8009562:	b29a      	uxth	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	86da      	strh	r2, [r3, #54]	; 0x36
 8009568:	e02b      	b.n	80095c2 <HAL_SPI_Transmit+0x174>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b02      	cmp	r3, #2
 8009576:	d112      	bne.n	800959e <HAL_SPI_Transmit+0x150>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957c:	881a      	ldrh	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	60da      	str	r2, [r3, #12]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009588:	1c9a      	adds	r2, r3, #2
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	631a      	str	r2, [r3, #48]	; 0x30
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009592:	b29b      	uxth	r3, r3
 8009594:	3b01      	subs	r3, #1
 8009596:	b29a      	uxth	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	86da      	strh	r2, [r3, #54]	; 0x36
 800959c:	e011      	b.n	80095c2 <HAL_SPI_Transmit+0x174>
 800959e:	f7fa ffa9 	bl	80044f4 <HAL_GetTick>
 80095a2:	4602      	mov	r2, r0
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d803      	bhi.n	80095b6 <HAL_SPI_Transmit+0x168>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b4:	d102      	bne.n	80095bc <HAL_SPI_Transmit+0x16e>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d102      	bne.n	80095c2 <HAL_SPI_Transmit+0x174>
 80095bc:	2303      	movs	r3, #3
 80095be:	77fb      	strb	r3, [r7, #31]
 80095c0:	e074      	b.n	80096ac <HAL_SPI_Transmit+0x25e>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1ce      	bne.n	800956a <HAL_SPI_Transmit+0x11c>
 80095cc:	e04c      	b.n	8009668 <HAL_SPI_Transmit+0x21a>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d002      	beq.n	80095dc <HAL_SPI_Transmit+0x18e>
 80095d6:	8afb      	ldrh	r3, [r7, #22]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d140      	bne.n	800965e <HAL_SPI_Transmit+0x210>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	330c      	adds	r3, #12
 80095e6:	7812      	ldrb	r2, [r2, #0]
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	631a      	str	r2, [r3, #48]	; 0x30
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3b01      	subs	r3, #1
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	86da      	strh	r2, [r3, #54]	; 0x36
 8009602:	e02c      	b.n	800965e <HAL_SPI_Transmit+0x210>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f003 0302 	and.w	r3, r3, #2
 800960e:	2b02      	cmp	r3, #2
 8009610:	d113      	bne.n	800963a <HAL_SPI_Transmit+0x1ec>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	330c      	adds	r3, #12
 800961c:	7812      	ldrb	r2, [r2, #0]
 800961e:	701a      	strb	r2, [r3, #0]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009624:	1c5a      	adds	r2, r3, #1
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	631a      	str	r2, [r3, #48]	; 0x30
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800962e:	b29b      	uxth	r3, r3
 8009630:	3b01      	subs	r3, #1
 8009632:	b29a      	uxth	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	86da      	strh	r2, [r3, #54]	; 0x36
 8009638:	e011      	b.n	800965e <HAL_SPI_Transmit+0x210>
 800963a:	f7fa ff5b 	bl	80044f4 <HAL_GetTick>
 800963e:	4602      	mov	r2, r0
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	429a      	cmp	r2, r3
 8009648:	d803      	bhi.n	8009652 <HAL_SPI_Transmit+0x204>
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d102      	bne.n	8009658 <HAL_SPI_Transmit+0x20a>
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d102      	bne.n	800965e <HAL_SPI_Transmit+0x210>
 8009658:	2303      	movs	r3, #3
 800965a:	77fb      	strb	r3, [r7, #31]
 800965c:	e026      	b.n	80096ac <HAL_SPI_Transmit+0x25e>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009662:	b29b      	uxth	r3, r3
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1cd      	bne.n	8009604 <HAL_SPI_Transmit+0x1b6>
 8009668:	69ba      	ldr	r2, [r7, #24]
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f000 fb73 	bl	8009d58 <SPI_EndRxTxTransaction>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <HAL_SPI_Transmit+0x230>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2220      	movs	r2, #32
 800967c:	655a      	str	r2, [r3, #84]	; 0x54
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10a      	bne.n	800969c <HAL_SPI_Transmit+0x24e>
 8009686:	2300      	movs	r3, #0
 8009688:	613b      	str	r3, [r7, #16]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	613b      	str	r3, [r7, #16]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	613b      	str	r3, [r7, #16]
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <HAL_SPI_Transmit+0x25c>
 80096a4:	2301      	movs	r3, #1
 80096a6:	77fb      	strb	r3, [r7, #31]
 80096a8:	e000      	b.n	80096ac <HAL_SPI_Transmit+0x25e>
 80096aa:	bf00      	nop
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80096bc:	7ffb      	ldrb	r3, [r7, #31]
 80096be:	4618      	mov	r0, r3
 80096c0:	3720      	adds	r7, #32
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <HAL_SPI_TransmitReceive>:
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b08c      	sub	sp, #48	; 0x30
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	60f8      	str	r0, [r7, #12]
 80096ce:	60b9      	str	r1, [r7, #8]
 80096d0:	607a      	str	r2, [r7, #4]
 80096d2:	807b      	strh	r3, [r7, #2]
 80096d4:	2301      	movs	r3, #1
 80096d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096d8:	2300      	movs	r3, #0
 80096da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d101      	bne.n	80096ec <HAL_SPI_TransmitReceive+0x26>
 80096e8:	2302      	movs	r3, #2
 80096ea:	e18a      	b.n	8009a02 <HAL_SPI_TransmitReceive+0x33c>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80096f4:	f7fa fefe 	bl	80044f4 <HAL_GetTick>
 80096f8:	6278      	str	r0, [r7, #36]	; 0x24
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	61fb      	str	r3, [r7, #28]
 800970a:	887b      	ldrh	r3, [r7, #2]
 800970c:	837b      	strh	r3, [r7, #26]
 800970e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009712:	2b01      	cmp	r3, #1
 8009714:	d00f      	beq.n	8009736 <HAL_SPI_TransmitReceive+0x70>
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800971c:	d107      	bne.n	800972e <HAL_SPI_TransmitReceive+0x68>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d103      	bne.n	800972e <HAL_SPI_TransmitReceive+0x68>
 8009726:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800972a:	2b04      	cmp	r3, #4
 800972c:	d003      	beq.n	8009736 <HAL_SPI_TransmitReceive+0x70>
 800972e:	2302      	movs	r3, #2
 8009730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009734:	e15b      	b.n	80099ee <HAL_SPI_TransmitReceive+0x328>
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <HAL_SPI_TransmitReceive+0x82>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <HAL_SPI_TransmitReceive+0x82>
 8009742:	887b      	ldrh	r3, [r7, #2]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d103      	bne.n	8009750 <HAL_SPI_TransmitReceive+0x8a>
 8009748:	2301      	movs	r3, #1
 800974a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800974e:	e14e      	b.n	80099ee <HAL_SPI_TransmitReceive+0x328>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b04      	cmp	r3, #4
 800975a:	d003      	beq.n	8009764 <HAL_SPI_TransmitReceive+0x9e>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2205      	movs	r2, #5
 8009760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	655a      	str	r2, [r3, #84]	; 0x54
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	639a      	str	r2, [r3, #56]	; 0x38
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	887a      	ldrh	r2, [r7, #2]
 8009774:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	887a      	ldrh	r2, [r7, #2]
 800977a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	631a      	str	r2, [r3, #48]	; 0x30
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	887a      	ldrh	r2, [r7, #2]
 8009786:	86da      	strh	r2, [r3, #54]	; 0x36
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	887a      	ldrh	r2, [r7, #2]
 800978c:	869a      	strh	r2, [r3, #52]	; 0x34
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	641a      	str	r2, [r3, #64]	; 0x40
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	645a      	str	r2, [r3, #68]	; 0x44
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a4:	2b40      	cmp	r3, #64	; 0x40
 80097a6:	d007      	beq.n	80097b8 <HAL_SPI_TransmitReceive+0xf2>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097b6:	601a      	str	r2, [r3, #0]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097c0:	d178      	bne.n	80098b4 <HAL_SPI_TransmitReceive+0x1ee>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d002      	beq.n	80097d0 <HAL_SPI_TransmitReceive+0x10a>
 80097ca:	8b7b      	ldrh	r3, [r7, #26]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d166      	bne.n	800989e <HAL_SPI_TransmitReceive+0x1d8>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d4:	881a      	ldrh	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	60da      	str	r2, [r3, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e0:	1c9a      	adds	r2, r3, #2
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	631a      	str	r2, [r3, #48]	; 0x30
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	3b01      	subs	r3, #1
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80097f4:	e053      	b.n	800989e <HAL_SPI_TransmitReceive+0x1d8>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b02      	cmp	r3, #2
 8009802:	d11b      	bne.n	800983c <HAL_SPI_TransmitReceive+0x176>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009808:	b29b      	uxth	r3, r3
 800980a:	2b00      	cmp	r3, #0
 800980c:	d016      	beq.n	800983c <HAL_SPI_TransmitReceive+0x176>
 800980e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009810:	2b01      	cmp	r3, #1
 8009812:	d113      	bne.n	800983c <HAL_SPI_TransmitReceive+0x176>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009818:	881a      	ldrh	r2, [r3, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	60da      	str	r2, [r3, #12]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009824:	1c9a      	adds	r2, r3, #2
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	631a      	str	r2, [r3, #48]	; 0x30
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800982e:	b29b      	uxth	r3, r3
 8009830:	3b01      	subs	r3, #1
 8009832:	b29a      	uxth	r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	86da      	strh	r2, [r3, #54]	; 0x36
 8009838:	2300      	movs	r3, #0
 800983a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b01      	cmp	r3, #1
 8009848:	d119      	bne.n	800987e <HAL_SPI_TransmitReceive+0x1b8>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800984e:	b29b      	uxth	r3, r3
 8009850:	2b00      	cmp	r3, #0
 8009852:	d014      	beq.n	800987e <HAL_SPI_TransmitReceive+0x1b8>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68da      	ldr	r2, [r3, #12]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985e:	b292      	uxth	r2, r2
 8009860:	801a      	strh	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009866:	1c9a      	adds	r2, r3, #2
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	639a      	str	r2, [r3, #56]	; 0x38
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009870:	b29b      	uxth	r3, r3
 8009872:	3b01      	subs	r3, #1
 8009874:	b29a      	uxth	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	87da      	strh	r2, [r3, #62]	; 0x3e
 800987a:	2301      	movs	r3, #1
 800987c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800987e:	f7fa fe39 	bl	80044f4 <HAL_GetTick>
 8009882:	4602      	mov	r2, r0
 8009884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800988a:	429a      	cmp	r2, r3
 800988c:	d807      	bhi.n	800989e <HAL_SPI_TransmitReceive+0x1d8>
 800988e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009894:	d003      	beq.n	800989e <HAL_SPI_TransmitReceive+0x1d8>
 8009896:	2303      	movs	r3, #3
 8009898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800989c:	e0a7      	b.n	80099ee <HAL_SPI_TransmitReceive+0x328>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1a6      	bne.n	80097f6 <HAL_SPI_TransmitReceive+0x130>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1a1      	bne.n	80097f6 <HAL_SPI_TransmitReceive+0x130>
 80098b2:	e07c      	b.n	80099ae <HAL_SPI_TransmitReceive+0x2e8>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d002      	beq.n	80098c2 <HAL_SPI_TransmitReceive+0x1fc>
 80098bc:	8b7b      	ldrh	r3, [r7, #26]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d16b      	bne.n	800999a <HAL_SPI_TransmitReceive+0x2d4>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	330c      	adds	r3, #12
 80098cc:	7812      	ldrb	r2, [r2, #0]
 80098ce:	701a      	strb	r2, [r3, #0]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	631a      	str	r2, [r3, #48]	; 0x30
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098de:	b29b      	uxth	r3, r3
 80098e0:	3b01      	subs	r3, #1
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80098e8:	e057      	b.n	800999a <HAL_SPI_TransmitReceive+0x2d4>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	f003 0302 	and.w	r3, r3, #2
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d11c      	bne.n	8009932 <HAL_SPI_TransmitReceive+0x26c>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d017      	beq.n	8009932 <HAL_SPI_TransmitReceive+0x26c>
 8009902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009904:	2b01      	cmp	r3, #1
 8009906:	d114      	bne.n	8009932 <HAL_SPI_TransmitReceive+0x26c>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	330c      	adds	r3, #12
 8009912:	7812      	ldrb	r2, [r2, #0]
 8009914:	701a      	strb	r2, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	631a      	str	r2, [r3, #48]	; 0x30
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009924:	b29b      	uxth	r3, r3
 8009926:	3b01      	subs	r3, #1
 8009928:	b29a      	uxth	r2, r3
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	86da      	strh	r2, [r3, #54]	; 0x36
 800992e:	2300      	movs	r3, #0
 8009930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	2b01      	cmp	r3, #1
 800993e:	d119      	bne.n	8009974 <HAL_SPI_TransmitReceive+0x2ae>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009944:	b29b      	uxth	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d014      	beq.n	8009974 <HAL_SPI_TransmitReceive+0x2ae>
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68da      	ldr	r2, [r3, #12]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009954:	b2d2      	uxtb	r2, r2
 8009956:	701a      	strb	r2, [r3, #0]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995c:	1c5a      	adds	r2, r3, #1
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	639a      	str	r2, [r3, #56]	; 0x38
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009966:	b29b      	uxth	r3, r3
 8009968:	3b01      	subs	r3, #1
 800996a:	b29a      	uxth	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009970:	2301      	movs	r3, #1
 8009972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009974:	f7fa fdbe 	bl	80044f4 <HAL_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009980:	429a      	cmp	r2, r3
 8009982:	d803      	bhi.n	800998c <HAL_SPI_TransmitReceive+0x2c6>
 8009984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998a:	d102      	bne.n	8009992 <HAL_SPI_TransmitReceive+0x2cc>
 800998c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998e:	2b00      	cmp	r3, #0
 8009990:	d103      	bne.n	800999a <HAL_SPI_TransmitReceive+0x2d4>
 8009992:	2303      	movs	r3, #3
 8009994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009998:	e029      	b.n	80099ee <HAL_SPI_TransmitReceive+0x328>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800999e:	b29b      	uxth	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1a2      	bne.n	80098ea <HAL_SPI_TransmitReceive+0x224>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d19d      	bne.n	80098ea <HAL_SPI_TransmitReceive+0x224>
 80099ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 f9d0 	bl	8009d58 <SPI_EndRxTxTransaction>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d006      	beq.n	80099cc <HAL_SPI_TransmitReceive+0x306>
 80099be:	2301      	movs	r3, #1
 80099c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2220      	movs	r2, #32
 80099c8:	655a      	str	r2, [r3, #84]	; 0x54
 80099ca:	e010      	b.n	80099ee <HAL_SPI_TransmitReceive+0x328>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10b      	bne.n	80099ec <HAL_SPI_TransmitReceive+0x326>
 80099d4:	2300      	movs	r3, #0
 80099d6:	617b      	str	r3, [r7, #20]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	617b      	str	r3, [r7, #20]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	617b      	str	r3, [r7, #20]
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	e000      	b.n	80099ee <HAL_SPI_TransmitReceive+0x328>
 80099ec:	bf00      	nop
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80099fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a02:	4618      	mov	r0, r3
 8009a04:	3730      	adds	r7, #48	; 0x30
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
	...

08009a0c <HAL_SPI_IRQHandler>:
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	61fb      	str	r3, [r7, #28]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	61bb      	str	r3, [r7, #24]
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	099b      	lsrs	r3, r3, #6
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10f      	bne.n	8009a50 <HAL_SPI_IRQHandler+0x44>
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00a      	beq.n	8009a50 <HAL_SPI_IRQHandler+0x44>
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	099b      	lsrs	r3, r3, #6
 8009a3e:	f003 0301 	and.w	r3, r3, #1
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d004      	beq.n	8009a50 <HAL_SPI_IRQHandler+0x44>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	4798      	blx	r3
 8009a4e:	e0d7      	b.n	8009c00 <HAL_SPI_IRQHandler+0x1f4>
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	085b      	lsrs	r3, r3, #1
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00a      	beq.n	8009a72 <HAL_SPI_IRQHandler+0x66>
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	09db      	lsrs	r3, r3, #7
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d004      	beq.n	8009a72 <HAL_SPI_IRQHandler+0x66>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	4798      	blx	r3
 8009a70:	e0c6      	b.n	8009c00 <HAL_SPI_IRQHandler+0x1f4>
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	095b      	lsrs	r3, r3, #5
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10c      	bne.n	8009a98 <HAL_SPI_IRQHandler+0x8c>
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	099b      	lsrs	r3, r3, #6
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d106      	bne.n	8009a98 <HAL_SPI_IRQHandler+0x8c>
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	0a1b      	lsrs	r3, r3, #8
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f000 80b4 	beq.w	8009c00 <HAL_SPI_IRQHandler+0x1f4>
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	095b      	lsrs	r3, r3, #5
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f000 80ad 	beq.w	8009c00 <HAL_SPI_IRQHandler+0x1f4>
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	099b      	lsrs	r3, r3, #6
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d023      	beq.n	8009afa <HAL_SPI_IRQHandler+0xee>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d011      	beq.n	8009ae2 <HAL_SPI_IRQHandler+0xd6>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ac2:	f043 0204 	orr.w	r2, r3, #4
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	655a      	str	r2, [r3, #84]	; 0x54
 8009aca:	2300      	movs	r3, #0
 8009acc:	617b      	str	r3, [r7, #20]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	617b      	str	r3, [r7, #20]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	617b      	str	r3, [r7, #20]
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	e00b      	b.n	8009afa <HAL_SPI_IRQHandler+0xee>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	613b      	str	r3, [r7, #16]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	613b      	str	r3, [r7, #16]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	613b      	str	r3, [r7, #16]
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	e082      	b.n	8009c00 <HAL_SPI_IRQHandler+0x1f4>
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	095b      	lsrs	r3, r3, #5
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d014      	beq.n	8009b30 <HAL_SPI_IRQHandler+0x124>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b0a:	f043 0201 	orr.w	r2, r3, #1
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	655a      	str	r2, [r3, #84]	; 0x54
 8009b12:	2300      	movs	r3, #0
 8009b14:	60fb      	str	r3, [r7, #12]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	60fb      	str	r3, [r7, #12]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b2c:	601a      	str	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	0a1b      	lsrs	r3, r3, #8
 8009b34:	f003 0301 	and.w	r3, r3, #1
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00c      	beq.n	8009b56 <HAL_SPI_IRQHandler+0x14a>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b40:	f043 0208 	orr.w	r2, r3, #8
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	655a      	str	r2, [r3, #84]	; 0x54
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60bb      	str	r3, [r7, #8]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	60bb      	str	r3, [r7, #8]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d04f      	beq.n	8009bfe <HAL_SPI_IRQHandler+0x1f2>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b6c:	605a      	str	r2, [r3, #4]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d104      	bne.n	8009b8a <HAL_SPI_IRQHandler+0x17e>
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	f003 0301 	and.w	r3, r3, #1
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d034      	beq.n	8009bf4 <HAL_SPI_IRQHandler+0x1e8>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f022 0203 	bic.w	r2, r2, #3
 8009b98:	605a      	str	r2, [r3, #4]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d011      	beq.n	8009bc6 <HAL_SPI_IRQHandler+0x1ba>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ba6:	4a18      	ldr	r2, [pc, #96]	; (8009c08 <HAL_SPI_IRQHandler+0x1fc>)
 8009ba8:	651a      	str	r2, [r3, #80]	; 0x50
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fa fde1 	bl	8004776 <HAL_DMA_Abort_IT>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d005      	beq.n	8009bc6 <HAL_SPI_IRQHandler+0x1ba>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	655a      	str	r2, [r3, #84]	; 0x54
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d016      	beq.n	8009bfc <HAL_SPI_IRQHandler+0x1f0>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bd2:	4a0d      	ldr	r2, [pc, #52]	; (8009c08 <HAL_SPI_IRQHandler+0x1fc>)
 8009bd4:	651a      	str	r2, [r3, #80]	; 0x50
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fa fdcb 	bl	8004776 <HAL_DMA_Abort_IT>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00a      	beq.n	8009bfc <HAL_SPI_IRQHandler+0x1f0>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	655a      	str	r2, [r3, #84]	; 0x54
 8009bf2:	e003      	b.n	8009bfc <HAL_SPI_IRQHandler+0x1f0>
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f809 	bl	8009c0c <HAL_SPI_ErrorCallback>
 8009bfa:	e000      	b.n	8009bfe <HAL_SPI_IRQHandler+0x1f2>
 8009bfc:	bf00      	nop
 8009bfe:	bf00      	nop
 8009c00:	3720      	adds	r7, #32
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	08009c21 	.word	0x08009c21

08009c0c <HAL_SPI_ErrorCallback>:
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <SPI_DMAAbortOnError>:
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2c:	60fb      	str	r3, [r7, #12]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	86da      	strh	r2, [r3, #54]	; 0x36
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f7ff ffe6 	bl	8009c0c <HAL_SPI_ErrorCallback>
 8009c40:	bf00      	nop
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <SPI_WaitFlagStateUntilTimeout>:
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b088      	sub	sp, #32
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	603b      	str	r3, [r7, #0]
 8009c54:	4613      	mov	r3, r2
 8009c56:	71fb      	strb	r3, [r7, #7]
 8009c58:	f7fa fc4c 	bl	80044f4 <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c60:	1a9b      	subs	r3, r3, r2
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	4413      	add	r3, r2
 8009c66:	61fb      	str	r3, [r7, #28]
 8009c68:	f7fa fc44 	bl	80044f4 <HAL_GetTick>
 8009c6c:	61b8      	str	r0, [r7, #24]
 8009c6e:	4b39      	ldr	r3, [pc, #228]	; (8009d54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	015b      	lsls	r3, r3, #5
 8009c74:	0d1b      	lsrs	r3, r3, #20
 8009c76:	69fa      	ldr	r2, [r7, #28]
 8009c78:	fb02 f303 	mul.w	r3, r2, r3
 8009c7c:	617b      	str	r3, [r7, #20]
 8009c7e:	e054      	b.n	8009d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c86:	d050      	beq.n	8009d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8009c88:	f7fa fc34 	bl	80044f4 <HAL_GetTick>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	69fa      	ldr	r2, [r7, #28]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d902      	bls.n	8009c9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d13d      	bne.n	8009d1a <SPI_WaitFlagStateUntilTimeout+0xd2>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009cac:	605a      	str	r2, [r3, #4]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cb6:	d111      	bne.n	8009cdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cc0:	d004      	beq.n	8009ccc <SPI_WaitFlagStateUntilTimeout+0x84>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cca:	d107      	bne.n	8009cdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ce4:	d10f      	bne.n	8009d06 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cf4:	601a      	str	r2, [r3, #0]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d04:	601a      	str	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009d16:	2303      	movs	r3, #3
 8009d18:	e017      	b.n	8009d4a <SPI_WaitFlagStateUntilTimeout+0x102>
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8009d20:	2300      	movs	r3, #0
 8009d22:	61fb      	str	r3, [r7, #28]
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	617b      	str	r3, [r7, #20]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689a      	ldr	r2, [r3, #8]
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	4013      	ands	r3, r2
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	bf0c      	ite	eq
 8009d3a:	2301      	moveq	r3, #1
 8009d3c:	2300      	movne	r3, #0
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	461a      	mov	r2, r3
 8009d42:	79fb      	ldrb	r3, [r7, #7]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d19b      	bne.n	8009c80 <SPI_WaitFlagStateUntilTimeout+0x38>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3720      	adds	r7, #32
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	20000014 	.word	0x20000014

08009d58 <SPI_EndRxTxTransaction>:
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b088      	sub	sp, #32
 8009d5c:	af02      	add	r7, sp, #8
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
 8009d64:	4b1b      	ldr	r3, [pc, #108]	; (8009dd4 <SPI_EndRxTxTransaction+0x7c>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a1b      	ldr	r2, [pc, #108]	; (8009dd8 <SPI_EndRxTxTransaction+0x80>)
 8009d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d6e:	0d5b      	lsrs	r3, r3, #21
 8009d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d74:	fb02 f303 	mul.w	r3, r2, r3
 8009d78:	617b      	str	r3, [r7, #20]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d82:	d112      	bne.n	8009daa <SPI_EndRxTxTransaction+0x52>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	2180      	movs	r1, #128	; 0x80
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f7ff ff5a 	bl	8009c48 <SPI_WaitFlagStateUntilTimeout>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d016      	beq.n	8009dc8 <SPI_EndRxTxTransaction+0x70>
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d9e:	f043 0220 	orr.w	r2, r3, #32
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	655a      	str	r2, [r3, #84]	; 0x54
 8009da6:	2303      	movs	r3, #3
 8009da8:	e00f      	b.n	8009dca <SPI_EndRxTxTransaction+0x72>
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00a      	beq.n	8009dc6 <SPI_EndRxTxTransaction+0x6e>
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	3b01      	subs	r3, #1
 8009db4:	617b      	str	r3, [r7, #20]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc0:	2b80      	cmp	r3, #128	; 0x80
 8009dc2:	d0f2      	beq.n	8009daa <SPI_EndRxTxTransaction+0x52>
 8009dc4:	e000      	b.n	8009dc8 <SPI_EndRxTxTransaction+0x70>
 8009dc6:	bf00      	nop
 8009dc8:	2300      	movs	r3, #0
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20000014 	.word	0x20000014
 8009dd8:	165e9f81 	.word	0x165e9f81

08009ddc <HAL_TIM_Base_Init>:
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <HAL_TIM_Base_Init+0x12>
 8009dea:	2301      	movs	r3, #1
 8009dec:	e041      	b.n	8009e72 <HAL_TIM_Base_Init+0x96>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d106      	bne.n	8009e08 <HAL_TIM_Base_Init+0x2c>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7fa f80a 	bl	8003e1c <HAL_TIM_Base_MspInit>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3304      	adds	r3, #4
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4610      	mov	r0, r2
 8009e1c:	f000 fa96 	bl	800a34c <TIM_Base_SetConfig>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009e70:	2300      	movs	r3, #0
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
	...

08009e7c <HAL_TIM_Base_Start_IT>:
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d001      	beq.n	8009e94 <HAL_TIM_Base_Start_IT+0x18>
 8009e90:	2301      	movs	r3, #1
 8009e92:	e04e      	b.n	8009f32 <HAL_TIM_Base_Start_IT+0xb6>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2202      	movs	r2, #2
 8009e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68da      	ldr	r2, [r3, #12]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f042 0201 	orr.w	r2, r2, #1
 8009eaa:	60da      	str	r2, [r3, #12]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a23      	ldr	r2, [pc, #140]	; (8009f40 <HAL_TIM_Base_Start_IT+0xc4>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d022      	beq.n	8009efc <HAL_TIM_Base_Start_IT+0x80>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ebe:	d01d      	beq.n	8009efc <HAL_TIM_Base_Start_IT+0x80>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a1f      	ldr	r2, [pc, #124]	; (8009f44 <HAL_TIM_Base_Start_IT+0xc8>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d018      	beq.n	8009efc <HAL_TIM_Base_Start_IT+0x80>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a1e      	ldr	r2, [pc, #120]	; (8009f48 <HAL_TIM_Base_Start_IT+0xcc>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d013      	beq.n	8009efc <HAL_TIM_Base_Start_IT+0x80>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a1c      	ldr	r2, [pc, #112]	; (8009f4c <HAL_TIM_Base_Start_IT+0xd0>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d00e      	beq.n	8009efc <HAL_TIM_Base_Start_IT+0x80>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a1b      	ldr	r2, [pc, #108]	; (8009f50 <HAL_TIM_Base_Start_IT+0xd4>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d009      	beq.n	8009efc <HAL_TIM_Base_Start_IT+0x80>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a19      	ldr	r2, [pc, #100]	; (8009f54 <HAL_TIM_Base_Start_IT+0xd8>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d004      	beq.n	8009efc <HAL_TIM_Base_Start_IT+0x80>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a18      	ldr	r2, [pc, #96]	; (8009f58 <HAL_TIM_Base_Start_IT+0xdc>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d111      	bne.n	8009f20 <HAL_TIM_Base_Start_IT+0xa4>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	f003 0307 	and.w	r3, r3, #7
 8009f06:	60fb      	str	r3, [r7, #12]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b06      	cmp	r3, #6
 8009f0c:	d010      	beq.n	8009f30 <HAL_TIM_Base_Start_IT+0xb4>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f042 0201 	orr.w	r2, r2, #1
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	e007      	b.n	8009f30 <HAL_TIM_Base_Start_IT+0xb4>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f042 0201 	orr.w	r2, r2, #1
 8009f2e:	601a      	str	r2, [r3, #0]
 8009f30:	2300      	movs	r3, #0
 8009f32:	4618      	mov	r0, r3
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	40010000 	.word	0x40010000
 8009f44:	40000400 	.word	0x40000400
 8009f48:	40000800 	.word	0x40000800
 8009f4c:	40000c00 	.word	0x40000c00
 8009f50:	40010400 	.word	0x40010400
 8009f54:	40014000 	.word	0x40014000
 8009f58:	40001800 	.word	0x40001800

08009f5c <HAL_TIM_IRQHandler>:
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	f003 0302 	and.w	r3, r3, #2
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d122      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x5c>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f003 0302 	and.w	r3, r3, #2
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d11b      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x5c>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f06f 0202 	mvn.w	r2, #2
 8009f88:	611a      	str	r2, [r3, #16]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	771a      	strb	r2, [r3, #28]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	f003 0303 	and.w	r3, r3, #3
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <HAL_TIM_IRQHandler+0x4a>
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f9b5 	bl	800a30e <HAL_TIM_IC_CaptureCallback>
 8009fa4:	e005      	b.n	8009fb2 <HAL_TIM_IRQHandler+0x56>
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f9a7 	bl	800a2fa <HAL_TIM_OC_DelayElapsedCallback>
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f9b8 	bl	800a322 <HAL_TIM_PWM_PulseFinishedCallback>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	771a      	strb	r2, [r3, #28]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	f003 0304 	and.w	r3, r3, #4
 8009fc2:	2b04      	cmp	r3, #4
 8009fc4:	d122      	bne.n	800a00c <HAL_TIM_IRQHandler+0xb0>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	f003 0304 	and.w	r3, r3, #4
 8009fd0:	2b04      	cmp	r3, #4
 8009fd2:	d11b      	bne.n	800a00c <HAL_TIM_IRQHandler+0xb0>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f06f 0204 	mvn.w	r2, #4
 8009fdc:	611a      	str	r2, [r3, #16]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	771a      	strb	r2, [r3, #28]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d003      	beq.n	8009ffa <HAL_TIM_IRQHandler+0x9e>
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f98b 	bl	800a30e <HAL_TIM_IC_CaptureCallback>
 8009ff8:	e005      	b.n	800a006 <HAL_TIM_IRQHandler+0xaa>
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f97d 	bl	800a2fa <HAL_TIM_OC_DelayElapsedCallback>
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f98e 	bl	800a322 <HAL_TIM_PWM_PulseFinishedCallback>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	771a      	strb	r2, [r3, #28]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	f003 0308 	and.w	r3, r3, #8
 800a016:	2b08      	cmp	r3, #8
 800a018:	d122      	bne.n	800a060 <HAL_TIM_IRQHandler+0x104>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f003 0308 	and.w	r3, r3, #8
 800a024:	2b08      	cmp	r3, #8
 800a026:	d11b      	bne.n	800a060 <HAL_TIM_IRQHandler+0x104>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f06f 0208 	mvn.w	r2, #8
 800a030:	611a      	str	r2, [r3, #16]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2204      	movs	r2, #4
 800a036:	771a      	strb	r2, [r3, #28]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	f003 0303 	and.w	r3, r3, #3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <HAL_TIM_IRQHandler+0xf2>
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f961 	bl	800a30e <HAL_TIM_IC_CaptureCallback>
 800a04c:	e005      	b.n	800a05a <HAL_TIM_IRQHandler+0xfe>
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f953 	bl	800a2fa <HAL_TIM_OC_DelayElapsedCallback>
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f964 	bl	800a322 <HAL_TIM_PWM_PulseFinishedCallback>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	771a      	strb	r2, [r3, #28]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	f003 0310 	and.w	r3, r3, #16
 800a06a:	2b10      	cmp	r3, #16
 800a06c:	d122      	bne.n	800a0b4 <HAL_TIM_IRQHandler+0x158>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	f003 0310 	and.w	r3, r3, #16
 800a078:	2b10      	cmp	r3, #16
 800a07a:	d11b      	bne.n	800a0b4 <HAL_TIM_IRQHandler+0x158>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f06f 0210 	mvn.w	r2, #16
 800a084:	611a      	str	r2, [r3, #16]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2208      	movs	r2, #8
 800a08a:	771a      	strb	r2, [r3, #28]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <HAL_TIM_IRQHandler+0x146>
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f937 	bl	800a30e <HAL_TIM_IC_CaptureCallback>
 800a0a0:	e005      	b.n	800a0ae <HAL_TIM_IRQHandler+0x152>
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f929 	bl	800a2fa <HAL_TIM_OC_DelayElapsedCallback>
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f93a 	bl	800a322 <HAL_TIM_PWM_PulseFinishedCallback>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	771a      	strb	r2, [r3, #28]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d10e      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x184>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	f003 0301 	and.w	r3, r3, #1
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d107      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x184>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f06f 0201 	mvn.w	r2, #1
 800a0d8:	611a      	str	r2, [r3, #16]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7f9 f8fc 	bl	80032d8 <HAL_TIM_PeriodElapsedCallback>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ea:	2b80      	cmp	r3, #128	; 0x80
 800a0ec:	d10e      	bne.n	800a10c <HAL_TIM_IRQHandler+0x1b0>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0f8:	2b80      	cmp	r3, #128	; 0x80
 800a0fa:	d107      	bne.n	800a10c <HAL_TIM_IRQHandler+0x1b0>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a104:	611a      	str	r2, [r3, #16]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fae0 	bl	800a6cc <HAL_TIMEx_BreakCallback>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a116:	2b40      	cmp	r3, #64	; 0x40
 800a118:	d10e      	bne.n	800a138 <HAL_TIM_IRQHandler+0x1dc>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a124:	2b40      	cmp	r3, #64	; 0x40
 800a126:	d107      	bne.n	800a138 <HAL_TIM_IRQHandler+0x1dc>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a130:	611a      	str	r2, [r3, #16]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f8ff 	bl	800a336 <HAL_TIM_TriggerCallback>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	f003 0320 	and.w	r3, r3, #32
 800a142:	2b20      	cmp	r3, #32
 800a144:	d10e      	bne.n	800a164 <HAL_TIM_IRQHandler+0x208>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	f003 0320 	and.w	r3, r3, #32
 800a150:	2b20      	cmp	r3, #32
 800a152:	d107      	bne.n	800a164 <HAL_TIM_IRQHandler+0x208>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f06f 0220 	mvn.w	r2, #32
 800a15c:	611a      	str	r2, [r3, #16]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 faaa 	bl	800a6b8 <HAL_TIMEx_CommutCallback>
 800a164:	bf00      	nop
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <HAL_TIM_ConfigClockSource>:
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
 800a176:	2300      	movs	r3, #0
 800a178:	73fb      	strb	r3, [r7, #15]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a180:	2b01      	cmp	r3, #1
 800a182:	d101      	bne.n	800a188 <HAL_TIM_ConfigClockSource+0x1c>
 800a184:	2302      	movs	r3, #2
 800a186:	e0b4      	b.n	800a2f2 <HAL_TIM_ConfigClockSource+0x186>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	60bb      	str	r3, [r7, #8]
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a1a6:	60bb      	str	r3, [r7, #8]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1ae:	60bb      	str	r3, [r7, #8]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	609a      	str	r2, [r3, #8]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1c0:	d03e      	beq.n	800a240 <HAL_TIM_ConfigClockSource+0xd4>
 800a1c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1c6:	f200 8087 	bhi.w	800a2d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a1ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ce:	f000 8086 	beq.w	800a2de <HAL_TIM_ConfigClockSource+0x172>
 800a1d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1d6:	d87f      	bhi.n	800a2d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a1d8:	2b70      	cmp	r3, #112	; 0x70
 800a1da:	d01a      	beq.n	800a212 <HAL_TIM_ConfigClockSource+0xa6>
 800a1dc:	2b70      	cmp	r3, #112	; 0x70
 800a1de:	d87b      	bhi.n	800a2d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a1e0:	2b60      	cmp	r3, #96	; 0x60
 800a1e2:	d050      	beq.n	800a286 <HAL_TIM_ConfigClockSource+0x11a>
 800a1e4:	2b60      	cmp	r3, #96	; 0x60
 800a1e6:	d877      	bhi.n	800a2d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a1e8:	2b50      	cmp	r3, #80	; 0x50
 800a1ea:	d03c      	beq.n	800a266 <HAL_TIM_ConfigClockSource+0xfa>
 800a1ec:	2b50      	cmp	r3, #80	; 0x50
 800a1ee:	d873      	bhi.n	800a2d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a1f0:	2b40      	cmp	r3, #64	; 0x40
 800a1f2:	d058      	beq.n	800a2a6 <HAL_TIM_ConfigClockSource+0x13a>
 800a1f4:	2b40      	cmp	r3, #64	; 0x40
 800a1f6:	d86f      	bhi.n	800a2d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a1f8:	2b30      	cmp	r3, #48	; 0x30
 800a1fa:	d064      	beq.n	800a2c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a1fc:	2b30      	cmp	r3, #48	; 0x30
 800a1fe:	d86b      	bhi.n	800a2d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a200:	2b20      	cmp	r3, #32
 800a202:	d060      	beq.n	800a2c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a204:	2b20      	cmp	r3, #32
 800a206:	d867      	bhi.n	800a2d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d05c      	beq.n	800a2c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a20c:	2b10      	cmp	r3, #16
 800a20e:	d05a      	beq.n	800a2c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a210:	e062      	b.n	800a2d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6818      	ldr	r0, [r3, #0]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	6899      	ldr	r1, [r3, #8]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	f000 f9ad 	bl	800a580 <TIM_ETR_SetConfig>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	60bb      	str	r3, [r7, #8]
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a234:	60bb      	str	r3, [r7, #8]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	609a      	str	r2, [r3, #8]
 800a23e:	e04f      	b.n	800a2e0 <HAL_TIM_ConfigClockSource+0x174>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6818      	ldr	r0, [r3, #0]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	6899      	ldr	r1, [r3, #8]
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	685a      	ldr	r2, [r3, #4]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	f000 f996 	bl	800a580 <TIM_ETR_SetConfig>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	689a      	ldr	r2, [r3, #8]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a262:	609a      	str	r2, [r3, #8]
 800a264:	e03c      	b.n	800a2e0 <HAL_TIM_ConfigClockSource+0x174>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6818      	ldr	r0, [r3, #0]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	6859      	ldr	r1, [r3, #4]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	461a      	mov	r2, r3
 800a274:	f000 f90a 	bl	800a48c <TIM_TI1_ConfigInputStage>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2150      	movs	r1, #80	; 0x50
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 f963 	bl	800a54a <TIM_ITRx_SetConfig>
 800a284:	e02c      	b.n	800a2e0 <HAL_TIM_ConfigClockSource+0x174>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6818      	ldr	r0, [r3, #0]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	6859      	ldr	r1, [r3, #4]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	461a      	mov	r2, r3
 800a294:	f000 f929 	bl	800a4ea <TIM_TI2_ConfigInputStage>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2160      	movs	r1, #96	; 0x60
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 f953 	bl	800a54a <TIM_ITRx_SetConfig>
 800a2a4:	e01c      	b.n	800a2e0 <HAL_TIM_ConfigClockSource+0x174>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6818      	ldr	r0, [r3, #0]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	6859      	ldr	r1, [r3, #4]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f000 f8ea 	bl	800a48c <TIM_TI1_ConfigInputStage>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2140      	movs	r1, #64	; 0x40
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 f943 	bl	800a54a <TIM_ITRx_SetConfig>
 800a2c4:	e00c      	b.n	800a2e0 <HAL_TIM_ConfigClockSource+0x174>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	f000 f93a 	bl	800a54a <TIM_ITRx_SetConfig>
 800a2d6:	e003      	b.n	800a2e0 <HAL_TIM_ConfigClockSource+0x174>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	73fb      	strb	r3, [r7, #15]
 800a2dc:	e000      	b.n	800a2e0 <HAL_TIM_ConfigClockSource+0x174>
 800a2de:	bf00      	nop
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a2f0:	7bfb      	ldrb	r3, [r7, #15]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <HAL_TIM_OC_DelayElapsedCallback>:
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	bf00      	nop
 800a304:	370c      	adds	r7, #12
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <HAL_TIM_IC_CaptureCallback>:
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	bf00      	nop
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	bf00      	nop
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <HAL_TIM_TriggerCallback>:
 800a336:	b480      	push	{r7}
 800a338:	b083      	sub	sp, #12
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	bf00      	nop
 800a340:	370c      	adds	r7, #12
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
	...

0800a34c <TIM_Base_SetConfig>:
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60fb      	str	r3, [r7, #12]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a40      	ldr	r2, [pc, #256]	; (800a460 <TIM_Base_SetConfig+0x114>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d013      	beq.n	800a38c <TIM_Base_SetConfig+0x40>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a36a:	d00f      	beq.n	800a38c <TIM_Base_SetConfig+0x40>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a3d      	ldr	r2, [pc, #244]	; (800a464 <TIM_Base_SetConfig+0x118>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d00b      	beq.n	800a38c <TIM_Base_SetConfig+0x40>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a3c      	ldr	r2, [pc, #240]	; (800a468 <TIM_Base_SetConfig+0x11c>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d007      	beq.n	800a38c <TIM_Base_SetConfig+0x40>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a3b      	ldr	r2, [pc, #236]	; (800a46c <TIM_Base_SetConfig+0x120>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d003      	beq.n	800a38c <TIM_Base_SetConfig+0x40>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a3a      	ldr	r2, [pc, #232]	; (800a470 <TIM_Base_SetConfig+0x124>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d108      	bne.n	800a39e <TIM_Base_SetConfig+0x52>
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	60fb      	str	r3, [r7, #12]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a2f      	ldr	r2, [pc, #188]	; (800a460 <TIM_Base_SetConfig+0x114>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d02b      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ac:	d027      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a2c      	ldr	r2, [pc, #176]	; (800a464 <TIM_Base_SetConfig+0x118>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d023      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a2b      	ldr	r2, [pc, #172]	; (800a468 <TIM_Base_SetConfig+0x11c>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d01f      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a2a      	ldr	r2, [pc, #168]	; (800a46c <TIM_Base_SetConfig+0x120>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d01b      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a29      	ldr	r2, [pc, #164]	; (800a470 <TIM_Base_SetConfig+0x124>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d017      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a28      	ldr	r2, [pc, #160]	; (800a474 <TIM_Base_SetConfig+0x128>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d013      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a27      	ldr	r2, [pc, #156]	; (800a478 <TIM_Base_SetConfig+0x12c>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d00f      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a26      	ldr	r2, [pc, #152]	; (800a47c <TIM_Base_SetConfig+0x130>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d00b      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a25      	ldr	r2, [pc, #148]	; (800a480 <TIM_Base_SetConfig+0x134>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d007      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a24      	ldr	r2, [pc, #144]	; (800a484 <TIM_Base_SetConfig+0x138>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d003      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a23      	ldr	r2, [pc, #140]	; (800a488 <TIM_Base_SetConfig+0x13c>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d108      	bne.n	800a410 <TIM_Base_SetConfig+0xc4>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a404:	60fb      	str	r3, [r7, #12]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	60fb      	str	r3, [r7, #12]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	60fb      	str	r3, [r7, #12]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	689a      	ldr	r2, [r3, #8]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	62da      	str	r2, [r3, #44]	; 0x2c
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	629a      	str	r2, [r3, #40]	; 0x28
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a0a      	ldr	r2, [pc, #40]	; (800a460 <TIM_Base_SetConfig+0x114>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d003      	beq.n	800a444 <TIM_Base_SetConfig+0xf8>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a0c      	ldr	r2, [pc, #48]	; (800a470 <TIM_Base_SetConfig+0x124>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d103      	bne.n	800a44c <TIM_Base_SetConfig+0x100>
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	691a      	ldr	r2, [r3, #16]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	631a      	str	r2, [r3, #48]	; 0x30
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	615a      	str	r2, [r3, #20]
 800a452:	bf00      	nop
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	40010000 	.word	0x40010000
 800a464:	40000400 	.word	0x40000400
 800a468:	40000800 	.word	0x40000800
 800a46c:	40000c00 	.word	0x40000c00
 800a470:	40010400 	.word	0x40010400
 800a474:	40014000 	.word	0x40014000
 800a478:	40014400 	.word	0x40014400
 800a47c:	40014800 	.word	0x40014800
 800a480:	40001800 	.word	0x40001800
 800a484:	40001c00 	.word	0x40001c00
 800a488:	40002000 	.word	0x40002000

0800a48c <TIM_TI1_ConfigInputStage>:
 800a48c:	b480      	push	{r7}
 800a48e:	b087      	sub	sp, #28
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	617b      	str	r3, [r7, #20]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	f023 0201 	bic.w	r2, r3, #1
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	621a      	str	r2, [r3, #32]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	613b      	str	r3, [r7, #16]
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4b6:	613b      	str	r3, [r7, #16]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	011b      	lsls	r3, r3, #4
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	613b      	str	r3, [r7, #16]
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	f023 030a 	bic.w	r3, r3, #10
 800a4c8:	617b      	str	r3, [r7, #20]
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	617b      	str	r3, [r7, #20]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	619a      	str	r2, [r3, #24]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	621a      	str	r2, [r3, #32]
 800a4de:	bf00      	nop
 800a4e0:	371c      	adds	r7, #28
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <TIM_TI2_ConfigInputStage>:
 800a4ea:	b480      	push	{r7}
 800a4ec:	b087      	sub	sp, #28
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	60f8      	str	r0, [r7, #12]
 800a4f2:	60b9      	str	r1, [r7, #8]
 800a4f4:	607a      	str	r2, [r7, #4]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	f023 0210 	bic.w	r2, r3, #16
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	621a      	str	r2, [r3, #32]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	699b      	ldr	r3, [r3, #24]
 800a506:	617b      	str	r3, [r7, #20]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6a1b      	ldr	r3, [r3, #32]
 800a50c:	613b      	str	r3, [r7, #16]
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a514:	617b      	str	r3, [r7, #20]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	031b      	lsls	r3, r3, #12
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	617b      	str	r3, [r7, #20]
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a526:	613b      	str	r3, [r7, #16]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	011b      	lsls	r3, r3, #4
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	4313      	orrs	r3, r2
 800a530:	613b      	str	r3, [r7, #16]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	619a      	str	r2, [r3, #24]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	621a      	str	r2, [r3, #32]
 800a53e:	bf00      	nop
 800a540:	371c      	adds	r7, #28
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <TIM_ITRx_SetConfig>:
 800a54a:	b480      	push	{r7}
 800a54c:	b085      	sub	sp, #20
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	6039      	str	r1, [r7, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	60fb      	str	r3, [r7, #12]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a560:	60fb      	str	r3, [r7, #12]
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	4313      	orrs	r3, r2
 800a568:	f043 0307 	orr.w	r3, r3, #7
 800a56c:	60fb      	str	r3, [r7, #12]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	609a      	str	r2, [r3, #8]
 800a574:	bf00      	nop
 800a576:	3714      	adds	r7, #20
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <TIM_ETR_SetConfig>:
 800a580:	b480      	push	{r7}
 800a582:	b087      	sub	sp, #28
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
 800a58c:	603b      	str	r3, [r7, #0]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	617b      	str	r3, [r7, #20]
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a59a:	617b      	str	r3, [r7, #20]
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	021a      	lsls	r2, r3, #8
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	431a      	orrs	r2, r3
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	617b      	str	r3, [r7, #20]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	697a      	ldr	r2, [r7, #20]
 800a5b2:	609a      	str	r2, [r3, #8]
 800a5b4:	bf00      	nop
 800a5b6:	371c      	adds	r7, #28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <HAL_TIMEx_MasterConfigSynchronization>:
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d101      	bne.n	800a5d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	e05a      	b.n	800a68e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	60bb      	str	r3, [r7, #8]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5fe:	60fb      	str	r3, [r7, #12]
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	4313      	orrs	r3, r2
 800a608:	60fb      	str	r3, [r7, #12]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	605a      	str	r2, [r3, #4]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a21      	ldr	r2, [pc, #132]	; (800a69c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d022      	beq.n	800a662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a624:	d01d      	beq.n	800a662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a1d      	ldr	r2, [pc, #116]	; (800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d018      	beq.n	800a662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a1b      	ldr	r2, [pc, #108]	; (800a6a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d013      	beq.n	800a662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a1a      	ldr	r2, [pc, #104]	; (800a6a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d00e      	beq.n	800a662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a18      	ldr	r2, [pc, #96]	; (800a6ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d009      	beq.n	800a662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a17      	ldr	r2, [pc, #92]	; (800a6b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d004      	beq.n	800a662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a15      	ldr	r2, [pc, #84]	; (800a6b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d10c      	bne.n	800a67c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a668:	60bb      	str	r3, [r7, #8]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	4313      	orrs	r3, r2
 800a672:	60bb      	str	r3, [r7, #8]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	609a      	str	r2, [r3, #8]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a68c:	2300      	movs	r3, #0
 800a68e:	4618      	mov	r0, r3
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	40010000 	.word	0x40010000
 800a6a0:	40000400 	.word	0x40000400
 800a6a4:	40000800 	.word	0x40000800
 800a6a8:	40000c00 	.word	0x40000c00
 800a6ac:	40010400 	.word	0x40010400
 800a6b0:	40014000 	.word	0x40014000
 800a6b4:	40001800 	.word	0x40001800

0800a6b8 <HAL_TIMEx_CommutCallback>:
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <HAL_TIMEx_BreakCallback>:
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <USB_CoreInit>:
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	f107 001c 	add.w	r0, r7, #28
 800a6ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d122      	bne.n	800a73e <USB_CoreInit+0x5e>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	639a      	str	r2, [r3, #56]	; 0x38
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a70c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a710:	687a      	ldr	r2, [r7, #4]
 800a712:	60d3      	str	r3, [r2, #12]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	60da      	str	r2, [r3, #12]
 800a720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a722:	2b01      	cmp	r3, #1
 800a724:	d105      	bne.n	800a732 <USB_CoreInit+0x52>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	60da      	str	r2, [r3, #12]
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f001 fbee 	bl	800bf14 <USB_CoreReset>
 800a738:	4603      	mov	r3, r0
 800a73a:	73fb      	strb	r3, [r7, #15]
 800a73c:	e01a      	b.n	800a774 <USB_CoreInit+0x94>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	60da      	str	r2, [r3, #12]
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f001 fbe2 	bl	800bf14 <USB_CoreReset>
 800a750:	4603      	mov	r3, r0
 800a752:	73fb      	strb	r3, [r7, #15]
 800a754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a756:	2b00      	cmp	r3, #0
 800a758:	d106      	bne.n	800a768 <USB_CoreInit+0x88>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	639a      	str	r2, [r3, #56]	; 0x38
 800a766:	e005      	b.n	800a774 <USB_CoreInit+0x94>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	639a      	str	r2, [r3, #56]	; 0x38
 800a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a776:	2b01      	cmp	r3, #1
 800a778:	d10b      	bne.n	800a792 <USB_CoreInit+0xb2>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	f043 0206 	orr.w	r2, r3, #6
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	609a      	str	r2, [r3, #8]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	f043 0220 	orr.w	r2, r3, #32
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	609a      	str	r2, [r3, #8]
 800a792:	7bfb      	ldrb	r3, [r7, #15]
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a79e:	b004      	add	sp, #16
 800a7a0:	4770      	bx	lr
	...

0800a7a4 <USB_SetTurnaroundTime>:
 800a7a4:	b480      	push	{r7}
 800a7a6:	b087      	sub	sp, #28
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	71fb      	strb	r3, [r7, #7]
 800a7b2:	79fb      	ldrb	r3, [r7, #7]
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d165      	bne.n	800a884 <USB_SetTurnaroundTime+0xe0>
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	4a41      	ldr	r2, [pc, #260]	; (800a8c0 <USB_SetTurnaroundTime+0x11c>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d906      	bls.n	800a7ce <USB_SetTurnaroundTime+0x2a>
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	4a40      	ldr	r2, [pc, #256]	; (800a8c4 <USB_SetTurnaroundTime+0x120>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d202      	bcs.n	800a7ce <USB_SetTurnaroundTime+0x2a>
 800a7c8:	230f      	movs	r3, #15
 800a7ca:	617b      	str	r3, [r7, #20]
 800a7cc:	e062      	b.n	800a894 <USB_SetTurnaroundTime+0xf0>
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	4a3c      	ldr	r2, [pc, #240]	; (800a8c4 <USB_SetTurnaroundTime+0x120>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d306      	bcc.n	800a7e4 <USB_SetTurnaroundTime+0x40>
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	4a3b      	ldr	r2, [pc, #236]	; (800a8c8 <USB_SetTurnaroundTime+0x124>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d202      	bcs.n	800a7e4 <USB_SetTurnaroundTime+0x40>
 800a7de:	230e      	movs	r3, #14
 800a7e0:	617b      	str	r3, [r7, #20]
 800a7e2:	e057      	b.n	800a894 <USB_SetTurnaroundTime+0xf0>
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	4a38      	ldr	r2, [pc, #224]	; (800a8c8 <USB_SetTurnaroundTime+0x124>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d306      	bcc.n	800a7fa <USB_SetTurnaroundTime+0x56>
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	4a37      	ldr	r2, [pc, #220]	; (800a8cc <USB_SetTurnaroundTime+0x128>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d202      	bcs.n	800a7fa <USB_SetTurnaroundTime+0x56>
 800a7f4:	230d      	movs	r3, #13
 800a7f6:	617b      	str	r3, [r7, #20]
 800a7f8:	e04c      	b.n	800a894 <USB_SetTurnaroundTime+0xf0>
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	4a33      	ldr	r2, [pc, #204]	; (800a8cc <USB_SetTurnaroundTime+0x128>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d306      	bcc.n	800a810 <USB_SetTurnaroundTime+0x6c>
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	4a32      	ldr	r2, [pc, #200]	; (800a8d0 <USB_SetTurnaroundTime+0x12c>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d802      	bhi.n	800a810 <USB_SetTurnaroundTime+0x6c>
 800a80a:	230c      	movs	r3, #12
 800a80c:	617b      	str	r3, [r7, #20]
 800a80e:	e041      	b.n	800a894 <USB_SetTurnaroundTime+0xf0>
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	4a2f      	ldr	r2, [pc, #188]	; (800a8d0 <USB_SetTurnaroundTime+0x12c>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d906      	bls.n	800a826 <USB_SetTurnaroundTime+0x82>
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	4a2e      	ldr	r2, [pc, #184]	; (800a8d4 <USB_SetTurnaroundTime+0x130>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d802      	bhi.n	800a826 <USB_SetTurnaroundTime+0x82>
 800a820:	230b      	movs	r3, #11
 800a822:	617b      	str	r3, [r7, #20]
 800a824:	e036      	b.n	800a894 <USB_SetTurnaroundTime+0xf0>
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	4a2a      	ldr	r2, [pc, #168]	; (800a8d4 <USB_SetTurnaroundTime+0x130>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d906      	bls.n	800a83c <USB_SetTurnaroundTime+0x98>
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	4a29      	ldr	r2, [pc, #164]	; (800a8d8 <USB_SetTurnaroundTime+0x134>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d802      	bhi.n	800a83c <USB_SetTurnaroundTime+0x98>
 800a836:	230a      	movs	r3, #10
 800a838:	617b      	str	r3, [r7, #20]
 800a83a:	e02b      	b.n	800a894 <USB_SetTurnaroundTime+0xf0>
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	4a26      	ldr	r2, [pc, #152]	; (800a8d8 <USB_SetTurnaroundTime+0x134>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d906      	bls.n	800a852 <USB_SetTurnaroundTime+0xae>
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	4a25      	ldr	r2, [pc, #148]	; (800a8dc <USB_SetTurnaroundTime+0x138>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d202      	bcs.n	800a852 <USB_SetTurnaroundTime+0xae>
 800a84c:	2309      	movs	r3, #9
 800a84e:	617b      	str	r3, [r7, #20]
 800a850:	e020      	b.n	800a894 <USB_SetTurnaroundTime+0xf0>
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	4a21      	ldr	r2, [pc, #132]	; (800a8dc <USB_SetTurnaroundTime+0x138>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d306      	bcc.n	800a868 <USB_SetTurnaroundTime+0xc4>
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	4a20      	ldr	r2, [pc, #128]	; (800a8e0 <USB_SetTurnaroundTime+0x13c>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d802      	bhi.n	800a868 <USB_SetTurnaroundTime+0xc4>
 800a862:	2308      	movs	r3, #8
 800a864:	617b      	str	r3, [r7, #20]
 800a866:	e015      	b.n	800a894 <USB_SetTurnaroundTime+0xf0>
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	4a1d      	ldr	r2, [pc, #116]	; (800a8e0 <USB_SetTurnaroundTime+0x13c>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d906      	bls.n	800a87e <USB_SetTurnaroundTime+0xda>
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	4a1c      	ldr	r2, [pc, #112]	; (800a8e4 <USB_SetTurnaroundTime+0x140>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d202      	bcs.n	800a87e <USB_SetTurnaroundTime+0xda>
 800a878:	2307      	movs	r3, #7
 800a87a:	617b      	str	r3, [r7, #20]
 800a87c:	e00a      	b.n	800a894 <USB_SetTurnaroundTime+0xf0>
 800a87e:	2306      	movs	r3, #6
 800a880:	617b      	str	r3, [r7, #20]
 800a882:	e007      	b.n	800a894 <USB_SetTurnaroundTime+0xf0>
 800a884:	79fb      	ldrb	r3, [r7, #7]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d102      	bne.n	800a890 <USB_SetTurnaroundTime+0xec>
 800a88a:	2309      	movs	r3, #9
 800a88c:	617b      	str	r3, [r7, #20]
 800a88e:	e001      	b.n	800a894 <USB_SetTurnaroundTime+0xf0>
 800a890:	2309      	movs	r3, #9
 800a892:	617b      	str	r3, [r7, #20]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	60da      	str	r2, [r3, #12]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	68da      	ldr	r2, [r3, #12]
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	029b      	lsls	r3, r3, #10
 800a8a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a8ac:	431a      	orrs	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	60da      	str	r2, [r3, #12]
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	371c      	adds	r7, #28
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	00d8acbf 	.word	0x00d8acbf
 800a8c4:	00e4e1c0 	.word	0x00e4e1c0
 800a8c8:	00f42400 	.word	0x00f42400
 800a8cc:	01067380 	.word	0x01067380
 800a8d0:	011a499f 	.word	0x011a499f
 800a8d4:	01312cff 	.word	0x01312cff
 800a8d8:	014ca43f 	.word	0x014ca43f
 800a8dc:	016e3600 	.word	0x016e3600
 800a8e0:	01a6ab1f 	.word	0x01a6ab1f
 800a8e4:	01e84800 	.word	0x01e84800

0800a8e8 <USB_EnableGlobalInt>:
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	f043 0201 	orr.w	r2, r3, #1
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	609a      	str	r2, [r3, #8]
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	4618      	mov	r0, r3
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <USB_DisableGlobalInt>:
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f023 0201 	bic.w	r2, r3, #1
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	609a      	str	r2, [r3, #8]
 800a91e:	2300      	movs	r3, #0
 800a920:	4618      	mov	r0, r3
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <USB_SetCurrentMode>:
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	460b      	mov	r3, r1
 800a936:	70fb      	strb	r3, [r7, #3]
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	60da      	str	r2, [r3, #12]
 800a948:	78fb      	ldrb	r3, [r7, #3]
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d115      	bne.n	800a97a <USB_SetCurrentMode+0x4e>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	60da      	str	r2, [r3, #12]
 800a95a:	2001      	movs	r0, #1
 800a95c:	f7f9 fdd6 	bl	800450c <HAL_Delay>
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3301      	adds	r3, #1
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f001 fa45 	bl	800bdf6 <USB_GetMode>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d01e      	beq.n	800a9b0 <USB_SetCurrentMode+0x84>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2b31      	cmp	r3, #49	; 0x31
 800a976:	d9f0      	bls.n	800a95a <USB_SetCurrentMode+0x2e>
 800a978:	e01a      	b.n	800a9b0 <USB_SetCurrentMode+0x84>
 800a97a:	78fb      	ldrb	r3, [r7, #3]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d115      	bne.n	800a9ac <USB_SetCurrentMode+0x80>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	60da      	str	r2, [r3, #12]
 800a98c:	2001      	movs	r0, #1
 800a98e:	f7f9 fdbd 	bl	800450c <HAL_Delay>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	3301      	adds	r3, #1
 800a996:	60fb      	str	r3, [r7, #12]
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f001 fa2c 	bl	800bdf6 <USB_GetMode>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d005      	beq.n	800a9b0 <USB_SetCurrentMode+0x84>
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b31      	cmp	r3, #49	; 0x31
 800a9a8:	d9f0      	bls.n	800a98c <USB_SetCurrentMode+0x60>
 800a9aa:	e001      	b.n	800a9b0 <USB_SetCurrentMode+0x84>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e005      	b.n	800a9bc <USB_SetCurrentMode+0x90>
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2b32      	cmp	r3, #50	; 0x32
 800a9b4:	d101      	bne.n	800a9ba <USB_SetCurrentMode+0x8e>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e000      	b.n	800a9bc <USB_SetCurrentMode+0x90>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <USB_DevInit>:
 800a9c4:	b084      	sub	sp, #16
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b086      	sub	sp, #24
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
 800a9ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a9d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	75fb      	strb	r3, [r7, #23]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	60fb      	str	r3, [r7, #12]
 800a9de:	2300      	movs	r3, #0
 800a9e0:	613b      	str	r3, [r7, #16]
 800a9e2:	e009      	b.n	800a9f8 <USB_DevInit+0x34>
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	3340      	adds	r3, #64	; 0x40
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	605a      	str	r2, [r3, #4]
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	613b      	str	r3, [r7, #16]
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	2b0e      	cmp	r3, #14
 800a9fc:	d9f2      	bls.n	800a9e4 <USB_DevInit+0x20>
 800a9fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d11c      	bne.n	800aa3e <USB_DevInit+0x7a>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa12:	f043 0302 	orr.w	r3, r3, #2
 800aa16:	6053      	str	r3, [r2, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	639a      	str	r2, [r3, #56]	; 0x38
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	639a      	str	r2, [r3, #56]	; 0x38
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	639a      	str	r2, [r3, #56]	; 0x38
 800aa3c:	e00b      	b.n	800aa56 <USB_DevInit+0x92>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	639a      	str	r2, [r3, #56]	; 0x38
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	639a      	str	r2, [r3, #56]	; 0x38
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	2300      	movs	r3, #0
 800aa60:	6013      	str	r3, [r2, #0]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa68:	4619      	mov	r1, r3
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa70:	461a      	mov	r2, r3
 800aa72:	680b      	ldr	r3, [r1, #0]
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d10c      	bne.n	800aa96 <USB_DevInit+0xd2>
 800aa7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d104      	bne.n	800aa8c <USB_DevInit+0xc8>
 800aa82:	2100      	movs	r1, #0
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 f965 	bl	800ad54 <USB_SetDevSpeed>
 800aa8a:	e008      	b.n	800aa9e <USB_DevInit+0xda>
 800aa8c:	2101      	movs	r1, #1
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f960 	bl	800ad54 <USB_SetDevSpeed>
 800aa94:	e003      	b.n	800aa9e <USB_DevInit+0xda>
 800aa96:	2103      	movs	r1, #3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f95b 	bl	800ad54 <USB_SetDevSpeed>
 800aa9e:	2110      	movs	r1, #16
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 f8f3 	bl	800ac8c <USB_FlushTxFifo>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d001      	beq.n	800aab0 <USB_DevInit+0xec>
 800aaac:	2301      	movs	r3, #1
 800aaae:	75fb      	strb	r3, [r7, #23]
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f91f 	bl	800acf4 <USB_FlushRxFifo>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <USB_DevInit+0xfc>
 800aabc:	2301      	movs	r3, #1
 800aabe:	75fb      	strb	r3, [r7, #23]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aac6:	461a      	mov	r2, r3
 800aac8:	2300      	movs	r3, #0
 800aaca:	6113      	str	r3, [r2, #16]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad2:	461a      	mov	r2, r3
 800aad4:	2300      	movs	r3, #0
 800aad6:	6153      	str	r3, [r2, #20]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aade:	461a      	mov	r2, r3
 800aae0:	2300      	movs	r3, #0
 800aae2:	61d3      	str	r3, [r2, #28]
 800aae4:	2300      	movs	r3, #0
 800aae6:	613b      	str	r3, [r7, #16]
 800aae8:	e043      	b.n	800ab72 <USB_DevInit+0x1ae>
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	015a      	lsls	r2, r3, #5
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aafc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab00:	d118      	bne.n	800ab34 <USB_DevInit+0x170>
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10a      	bne.n	800ab1e <USB_DevInit+0x15a>
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	015a      	lsls	r2, r3, #5
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab14:	461a      	mov	r2, r3
 800ab16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	e013      	b.n	800ab46 <USB_DevInit+0x182>
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	015a      	lsls	r2, r3, #5
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	4413      	add	r3, r2
 800ab26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab30:	6013      	str	r3, [r2, #0]
 800ab32:	e008      	b.n	800ab46 <USB_DevInit+0x182>
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab40:	461a      	mov	r2, r3
 800ab42:	2300      	movs	r3, #0
 800ab44:	6013      	str	r3, [r2, #0]
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	015a      	lsls	r2, r3, #5
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab52:	461a      	mov	r2, r3
 800ab54:	2300      	movs	r3, #0
 800ab56:	6113      	str	r3, [r2, #16]
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	015a      	lsls	r2, r3, #5
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab64:	461a      	mov	r2, r3
 800ab66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab6a:	6093      	str	r3, [r2, #8]
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	613b      	str	r3, [r7, #16]
 800ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d3b7      	bcc.n	800aaea <USB_DevInit+0x126>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	613b      	str	r3, [r7, #16]
 800ab7e:	e043      	b.n	800ac08 <USB_DevInit+0x244>
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	015a      	lsls	r2, r3, #5
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	4413      	add	r3, r2
 800ab88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab96:	d118      	bne.n	800abca <USB_DevInit+0x206>
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10a      	bne.n	800abb4 <USB_DevInit+0x1f0>
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	015a      	lsls	r2, r3, #5
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	4413      	add	r3, r2
 800aba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abaa:	461a      	mov	r2, r3
 800abac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	e013      	b.n	800abdc <USB_DevInit+0x218>
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	015a      	lsls	r2, r3, #5
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4413      	add	r3, r2
 800abbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abc0:	461a      	mov	r2, r3
 800abc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800abc6:	6013      	str	r3, [r2, #0]
 800abc8:	e008      	b.n	800abdc <USB_DevInit+0x218>
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	015a      	lsls	r2, r3, #5
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	4413      	add	r3, r2
 800abd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd6:	461a      	mov	r2, r3
 800abd8:	2300      	movs	r3, #0
 800abda:	6013      	str	r3, [r2, #0]
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	015a      	lsls	r2, r3, #5
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	4413      	add	r3, r2
 800abe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe8:	461a      	mov	r2, r3
 800abea:	2300      	movs	r3, #0
 800abec:	6113      	str	r3, [r2, #16]
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	015a      	lsls	r2, r3, #5
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	4413      	add	r3, r2
 800abf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abfa:	461a      	mov	r2, r3
 800abfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac00:	6093      	str	r3, [r2, #8]
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	3301      	adds	r3, #1
 800ac06:	613b      	str	r3, [r7, #16]
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d3b7      	bcc.n	800ab80 <USB_DevInit+0x1bc>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac22:	6113      	str	r3, [r2, #16]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	619a      	str	r2, [r3, #24]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ac30:	615a      	str	r2, [r3, #20]
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d105      	bne.n	800ac44 <USB_DevInit+0x280>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	699b      	ldr	r3, [r3, #24]
 800ac3c:	f043 0210 	orr.w	r2, r3, #16
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	619a      	str	r2, [r3, #24]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	699a      	ldr	r2, [r3, #24]
 800ac48:	4b0f      	ldr	r3, [pc, #60]	; (800ac88 <USB_DevInit+0x2c4>)
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	6193      	str	r3, [r2, #24]
 800ac50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d005      	beq.n	800ac62 <USB_DevInit+0x29e>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	699b      	ldr	r3, [r3, #24]
 800ac5a:	f043 0208 	orr.w	r2, r3, #8
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	619a      	str	r2, [r3, #24]
 800ac62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d107      	bne.n	800ac78 <USB_DevInit+0x2b4>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	699b      	ldr	r3, [r3, #24]
 800ac6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac70:	f043 0304 	orr.w	r3, r3, #4
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	6193      	str	r3, [r2, #24]
 800ac78:	7dfb      	ldrb	r3, [r7, #23]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3718      	adds	r7, #24
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac84:	b004      	add	sp, #16
 800ac86:	4770      	bx	lr
 800ac88:	803c3800 	.word	0x803c3800

0800ac8c <USB_FlushTxFifo>:
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
 800ac96:	2300      	movs	r3, #0
 800ac98:	60fb      	str	r3, [r7, #12]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	60fb      	str	r3, [r7, #12]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	4a13      	ldr	r2, [pc, #76]	; (800acf0 <USB_FlushTxFifo+0x64>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d901      	bls.n	800acac <USB_FlushTxFifo+0x20>
 800aca8:	2303      	movs	r3, #3
 800acaa:	e01b      	b.n	800ace4 <USB_FlushTxFifo+0x58>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	daf2      	bge.n	800ac9a <USB_FlushTxFifo+0xe>
 800acb4:	2300      	movs	r3, #0
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	019b      	lsls	r3, r3, #6
 800acbc:	f043 0220 	orr.w	r2, r3, #32
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	611a      	str	r2, [r3, #16]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3301      	adds	r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	4a08      	ldr	r2, [pc, #32]	; (800acf0 <USB_FlushTxFifo+0x64>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d901      	bls.n	800acd6 <USB_FlushTxFifo+0x4a>
 800acd2:	2303      	movs	r3, #3
 800acd4:	e006      	b.n	800ace4 <USB_FlushTxFifo+0x58>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	f003 0320 	and.w	r3, r3, #32
 800acde:	2b20      	cmp	r3, #32
 800ace0:	d0f0      	beq.n	800acc4 <USB_FlushTxFifo+0x38>
 800ace2:	2300      	movs	r3, #0
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	00030d40 	.word	0x00030d40

0800acf4 <USB_FlushRxFifo>:
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	2300      	movs	r3, #0
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	3301      	adds	r3, #1
 800ad04:	60fb      	str	r3, [r7, #12]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	4a11      	ldr	r2, [pc, #68]	; (800ad50 <USB_FlushRxFifo+0x5c>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d901      	bls.n	800ad12 <USB_FlushRxFifo+0x1e>
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e018      	b.n	800ad44 <USB_FlushRxFifo+0x50>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	daf2      	bge.n	800ad00 <USB_FlushRxFifo+0xc>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60fb      	str	r3, [r7, #12]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2210      	movs	r2, #16
 800ad22:	611a      	str	r2, [r3, #16]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	3301      	adds	r3, #1
 800ad28:	60fb      	str	r3, [r7, #12]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	4a08      	ldr	r2, [pc, #32]	; (800ad50 <USB_FlushRxFifo+0x5c>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d901      	bls.n	800ad36 <USB_FlushRxFifo+0x42>
 800ad32:	2303      	movs	r3, #3
 800ad34:	e006      	b.n	800ad44 <USB_FlushRxFifo+0x50>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	f003 0310 	and.w	r3, r3, #16
 800ad3e:	2b10      	cmp	r3, #16
 800ad40:	d0f0      	beq.n	800ad24 <USB_FlushRxFifo+0x30>
 800ad42:	2300      	movs	r3, #0
 800ad44:	4618      	mov	r0, r3
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	00030d40 	.word	0x00030d40

0800ad54 <USB_SetDevSpeed>:
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	60fb      	str	r3, [r7, #12]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	78fb      	ldrb	r3, [r7, #3]
 800ad6e:	68f9      	ldr	r1, [r7, #12]
 800ad70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad74:	4313      	orrs	r3, r2
 800ad76:	600b      	str	r3, [r1, #0]
 800ad78:	2300      	movs	r3, #0
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr

0800ad86 <USB_GetDevSpeed>:
 800ad86:	b480      	push	{r7}
 800ad88:	b087      	sub	sp, #28
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	613b      	str	r3, [r7, #16]
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	f003 0306 	and.w	r3, r3, #6
 800ad9e:	60fb      	str	r3, [r7, #12]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d102      	bne.n	800adac <USB_GetDevSpeed+0x26>
 800ada6:	2300      	movs	r3, #0
 800ada8:	75fb      	strb	r3, [r7, #23]
 800adaa:	e00a      	b.n	800adc2 <USB_GetDevSpeed+0x3c>
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d002      	beq.n	800adb8 <USB_GetDevSpeed+0x32>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2b06      	cmp	r3, #6
 800adb6:	d102      	bne.n	800adbe <USB_GetDevSpeed+0x38>
 800adb8:	2302      	movs	r3, #2
 800adba:	75fb      	strb	r3, [r7, #23]
 800adbc:	e001      	b.n	800adc2 <USB_GetDevSpeed+0x3c>
 800adbe:	230f      	movs	r3, #15
 800adc0:	75fb      	strb	r3, [r7, #23]
 800adc2:	7dfb      	ldrb	r3, [r7, #23]
 800adc4:	4618      	mov	r0, r3
 800adc6:	371c      	adds	r7, #28
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <USB_ActivateEndpoint>:
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	60bb      	str	r3, [r7, #8]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	785b      	ldrb	r3, [r3, #1]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d13a      	bne.n	800ae62 <USB_ActivateEndpoint+0x92>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adf2:	69da      	ldr	r2, [r3, #28]
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	f003 030f 	and.w	r3, r3, #15
 800adfc:	2101      	movs	r1, #1
 800adfe:	fa01 f303 	lsl.w	r3, r1, r3
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	68f9      	ldr	r1, [r7, #12]
 800ae06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	61cb      	str	r3, [r1, #28]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	015a      	lsls	r2, r3, #5
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	4413      	add	r3, r2
 800ae16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d155      	bne.n	800aed0 <USB_ActivateEndpoint+0x100>
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	015a      	lsls	r2, r3, #5
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	791b      	ldrb	r3, [r3, #4]
 800ae3e:	049b      	lsls	r3, r3, #18
 800ae40:	4319      	orrs	r1, r3
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	059b      	lsls	r3, r3, #22
 800ae46:	430b      	orrs	r3, r1
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	0151      	lsls	r1, r2, #5
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	440a      	add	r2, r1
 800ae52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae5e:	6013      	str	r3, [r2, #0]
 800ae60:	e036      	b.n	800aed0 <USB_ActivateEndpoint+0x100>
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae68:	69da      	ldr	r2, [r3, #28]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	f003 030f 	and.w	r3, r3, #15
 800ae72:	2101      	movs	r1, #1
 800ae74:	fa01 f303 	lsl.w	r3, r1, r3
 800ae78:	041b      	lsls	r3, r3, #16
 800ae7a:	68f9      	ldr	r1, [r7, #12]
 800ae7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae80:	4313      	orrs	r3, r2
 800ae82:	61cb      	str	r3, [r1, #28]
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	015a      	lsls	r2, r3, #5
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d11a      	bne.n	800aed0 <USB_ActivateEndpoint+0x100>
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	015a      	lsls	r2, r3, #5
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	4413      	add	r3, r2
 800aea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	791b      	ldrb	r3, [r3, #4]
 800aeb4:	049b      	lsls	r3, r3, #18
 800aeb6:	430b      	orrs	r3, r1
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	0151      	lsls	r1, r2, #5
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	440a      	add	r2, r1
 800aec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	2300      	movs	r3, #0
 800aed2:	4618      	mov	r0, r3
 800aed4:	3714      	adds	r7, #20
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
	...

0800aee0 <USB_DeactivateEndpoint>:
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	60fb      	str	r3, [r7, #12]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	60bb      	str	r3, [r7, #8]
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	785b      	ldrb	r3, [r3, #1]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d161      	bne.n	800afc0 <USB_DeactivateEndpoint+0xe0>
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	015a      	lsls	r2, r3, #5
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	4413      	add	r3, r2
 800af04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af12:	d11f      	bne.n	800af54 <USB_DeactivateEndpoint+0x74>
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	015a      	lsls	r2, r3, #5
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	0151      	lsls	r1, r2, #5
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	440a      	add	r2, r1
 800af2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af32:	6013      	str	r3, [r2, #0]
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	015a      	lsls	r2, r3, #5
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	4413      	add	r3, r2
 800af3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68ba      	ldr	r2, [r7, #8]
 800af44:	0151      	lsls	r1, r2, #5
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	440a      	add	r2, r1
 800af4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af52:	6013      	str	r3, [r2, #0]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	f003 030f 	and.w	r3, r3, #15
 800af64:	2101      	movs	r1, #1
 800af66:	fa01 f303 	lsl.w	r3, r1, r3
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	43db      	mvns	r3, r3
 800af6e:	68f9      	ldr	r1, [r7, #12]
 800af70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af74:	4013      	ands	r3, r2
 800af76:	63cb      	str	r3, [r1, #60]	; 0x3c
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af7e:	69da      	ldr	r2, [r3, #28]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	f003 030f 	and.w	r3, r3, #15
 800af88:	2101      	movs	r1, #1
 800af8a:	fa01 f303 	lsl.w	r3, r1, r3
 800af8e:	b29b      	uxth	r3, r3
 800af90:	43db      	mvns	r3, r3
 800af92:	68f9      	ldr	r1, [r7, #12]
 800af94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af98:	4013      	ands	r3, r2
 800af9a:	61cb      	str	r3, [r1, #28]
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	015a      	lsls	r2, r3, #5
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	4413      	add	r3, r2
 800afa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	0159      	lsls	r1, r3, #5
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	440b      	add	r3, r1
 800afb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb6:	4619      	mov	r1, r3
 800afb8:	4b35      	ldr	r3, [pc, #212]	; (800b090 <USB_DeactivateEndpoint+0x1b0>)
 800afba:	4013      	ands	r3, r2
 800afbc:	600b      	str	r3, [r1, #0]
 800afbe:	e060      	b.n	800b082 <USB_DeactivateEndpoint+0x1a2>
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	015a      	lsls	r2, r3, #5
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4413      	add	r3, r2
 800afc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afd6:	d11f      	bne.n	800b018 <USB_DeactivateEndpoint+0x138>
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	015a      	lsls	r2, r3, #5
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	4413      	add	r3, r2
 800afe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	68ba      	ldr	r2, [r7, #8]
 800afe8:	0151      	lsls	r1, r2, #5
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	440a      	add	r2, r1
 800afee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aff2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aff6:	6013      	str	r3, [r2, #0]
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	015a      	lsls	r2, r3, #5
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	4413      	add	r3, r2
 800b000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	0151      	lsls	r1, r2, #5
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	440a      	add	r2, r1
 800b00e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b012:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b01e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	f003 030f 	and.w	r3, r3, #15
 800b028:	2101      	movs	r1, #1
 800b02a:	fa01 f303 	lsl.w	r3, r1, r3
 800b02e:	041b      	lsls	r3, r3, #16
 800b030:	43db      	mvns	r3, r3
 800b032:	68f9      	ldr	r1, [r7, #12]
 800b034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b038:	4013      	ands	r3, r2
 800b03a:	63cb      	str	r3, [r1, #60]	; 0x3c
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b042:	69da      	ldr	r2, [r3, #28]
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	f003 030f 	and.w	r3, r3, #15
 800b04c:	2101      	movs	r1, #1
 800b04e:	fa01 f303 	lsl.w	r3, r1, r3
 800b052:	041b      	lsls	r3, r3, #16
 800b054:	43db      	mvns	r3, r3
 800b056:	68f9      	ldr	r1, [r7, #12]
 800b058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b05c:	4013      	ands	r3, r2
 800b05e:	61cb      	str	r3, [r1, #28]
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	015a      	lsls	r2, r3, #5
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	4413      	add	r3, r2
 800b068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	0159      	lsls	r1, r3, #5
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	440b      	add	r3, r1
 800b076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b07a:	4619      	mov	r1, r3
 800b07c:	4b05      	ldr	r3, [pc, #20]	; (800b094 <USB_DeactivateEndpoint+0x1b4>)
 800b07e:	4013      	ands	r3, r2
 800b080:	600b      	str	r3, [r1, #0]
 800b082:	2300      	movs	r3, #0
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr
 800b090:	ec337800 	.word	0xec337800
 800b094:	eff37800 	.word	0xeff37800

0800b098 <USB_EPStartXfer>:
 800b098:	b580      	push	{r7, lr}
 800b09a:	b08a      	sub	sp, #40	; 0x28
 800b09c:	af02      	add	r7, sp, #8
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	71fb      	strb	r3, [r7, #7]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	61fb      	str	r3, [r7, #28]
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	61bb      	str	r3, [r7, #24]
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	785b      	ldrb	r3, [r3, #1]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	f040 815c 	bne.w	800b372 <USB_EPStartXfer+0x2da>
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	699b      	ldr	r3, [r3, #24]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d132      	bne.n	800b128 <USB_EPStartXfer+0x90>
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	015a      	lsls	r2, r3, #5
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ce:	691b      	ldr	r3, [r3, #16]
 800b0d0:	69ba      	ldr	r2, [r7, #24]
 800b0d2:	0151      	lsls	r1, r2, #5
 800b0d4:	69fa      	ldr	r2, [r7, #28]
 800b0d6:	440a      	add	r2, r1
 800b0d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b0e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b0e4:	6113      	str	r3, [r2, #16]
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	015a      	lsls	r2, r3, #5
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	69ba      	ldr	r2, [r7, #24]
 800b0f6:	0151      	lsls	r1, r2, #5
 800b0f8:	69fa      	ldr	r2, [r7, #28]
 800b0fa:	440a      	add	r2, r1
 800b0fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b100:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b104:	6113      	str	r3, [r2, #16]
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	015a      	lsls	r2, r3, #5
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	4413      	add	r3, r2
 800b10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b112:	691b      	ldr	r3, [r3, #16]
 800b114:	69ba      	ldr	r2, [r7, #24]
 800b116:	0151      	lsls	r1, r2, #5
 800b118:	69fa      	ldr	r2, [r7, #28]
 800b11a:	440a      	add	r2, r1
 800b11c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b120:	0cdb      	lsrs	r3, r3, #19
 800b122:	04db      	lsls	r3, r3, #19
 800b124:	6113      	str	r3, [r2, #16]
 800b126:	e074      	b.n	800b212 <USB_EPStartXfer+0x17a>
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	015a      	lsls	r2, r3, #5
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	4413      	add	r3, r2
 800b130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	0151      	lsls	r1, r2, #5
 800b13a:	69fa      	ldr	r2, [r7, #28]
 800b13c:	440a      	add	r2, r1
 800b13e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b142:	0cdb      	lsrs	r3, r3, #19
 800b144:	04db      	lsls	r3, r3, #19
 800b146:	6113      	str	r3, [r2, #16]
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	015a      	lsls	r2, r3, #5
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	4413      	add	r3, r2
 800b150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	69ba      	ldr	r2, [r7, #24]
 800b158:	0151      	lsls	r1, r2, #5
 800b15a:	69fa      	ldr	r2, [r7, #28]
 800b15c:	440a      	add	r2, r1
 800b15e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b162:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b166:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b16a:	6113      	str	r3, [r2, #16]
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	015a      	lsls	r2, r3, #5
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	4413      	add	r3, r2
 800b174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b178:	691a      	ldr	r2, [r3, #16]
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6999      	ldr	r1, [r3, #24]
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	440b      	add	r3, r1
 800b184:	1e59      	subs	r1, r3, #1
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b18e:	04d9      	lsls	r1, r3, #19
 800b190:	4b9d      	ldr	r3, [pc, #628]	; (800b408 <USB_EPStartXfer+0x370>)
 800b192:	400b      	ands	r3, r1
 800b194:	69b9      	ldr	r1, [r7, #24]
 800b196:	0148      	lsls	r0, r1, #5
 800b198:	69f9      	ldr	r1, [r7, #28]
 800b19a:	4401      	add	r1, r0
 800b19c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	610b      	str	r3, [r1, #16]
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	015a      	lsls	r2, r3, #5
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b0:	691a      	ldr	r2, [r3, #16]
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1ba:	69b9      	ldr	r1, [r7, #24]
 800b1bc:	0148      	lsls	r0, r1, #5
 800b1be:	69f9      	ldr	r1, [r7, #28]
 800b1c0:	4401      	add	r1, r0
 800b1c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	610b      	str	r3, [r1, #16]
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	791b      	ldrb	r3, [r3, #4]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d11f      	bne.n	800b212 <USB_EPStartXfer+0x17a>
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	015a      	lsls	r2, r3, #5
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	4413      	add	r3, r2
 800b1da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	69ba      	ldr	r2, [r7, #24]
 800b1e2:	0151      	lsls	r1, r2, #5
 800b1e4:	69fa      	ldr	r2, [r7, #28]
 800b1e6:	440a      	add	r2, r1
 800b1e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b1f0:	6113      	str	r3, [r2, #16]
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	015a      	lsls	r2, r3, #5
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	69ba      	ldr	r2, [r7, #24]
 800b202:	0151      	lsls	r1, r2, #5
 800b204:	69fa      	ldr	r2, [r7, #28]
 800b206:	440a      	add	r2, r1
 800b208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b20c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b210:	6113      	str	r3, [r2, #16]
 800b212:	79fb      	ldrb	r3, [r7, #7]
 800b214:	2b01      	cmp	r3, #1
 800b216:	d14b      	bne.n	800b2b0 <USB_EPStartXfer+0x218>
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	695b      	ldr	r3, [r3, #20]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d009      	beq.n	800b234 <USB_EPStartXfer+0x19c>
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	015a      	lsls	r2, r3, #5
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	4413      	add	r3, r2
 800b228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b22c:	461a      	mov	r2, r3
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	695b      	ldr	r3, [r3, #20]
 800b232:	6153      	str	r3, [r2, #20]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	791b      	ldrb	r3, [r3, #4]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d128      	bne.n	800b28e <USB_EPStartXfer+0x1f6>
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d110      	bne.n	800b26e <USB_EPStartXfer+0x1d6>
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	015a      	lsls	r2, r3, #5
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	4413      	add	r3, r2
 800b254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	69ba      	ldr	r2, [r7, #24]
 800b25c:	0151      	lsls	r1, r2, #5
 800b25e:	69fa      	ldr	r2, [r7, #28]
 800b260:	440a      	add	r2, r1
 800b262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b266:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b26a:	6013      	str	r3, [r2, #0]
 800b26c:	e00f      	b.n	800b28e <USB_EPStartXfer+0x1f6>
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	015a      	lsls	r2, r3, #5
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	4413      	add	r3, r2
 800b276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	69ba      	ldr	r2, [r7, #24]
 800b27e:	0151      	lsls	r1, r2, #5
 800b280:	69fa      	ldr	r2, [r7, #28]
 800b282:	440a      	add	r2, r1
 800b284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b28c:	6013      	str	r3, [r2, #0]
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	015a      	lsls	r2, r3, #5
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	4413      	add	r3, r2
 800b296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	69ba      	ldr	r2, [r7, #24]
 800b29e:	0151      	lsls	r1, r2, #5
 800b2a0:	69fa      	ldr	r2, [r7, #28]
 800b2a2:	440a      	add	r2, r1
 800b2a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2ac:	6013      	str	r3, [r2, #0]
 800b2ae:	e133      	b.n	800b518 <USB_EPStartXfer+0x480>
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	015a      	lsls	r2, r3, #5
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	69ba      	ldr	r2, [r7, #24]
 800b2c0:	0151      	lsls	r1, r2, #5
 800b2c2:	69fa      	ldr	r2, [r7, #28]
 800b2c4:	440a      	add	r2, r1
 800b2c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2ce:	6013      	str	r3, [r2, #0]
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	791b      	ldrb	r3, [r3, #4]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d015      	beq.n	800b304 <USB_EPStartXfer+0x26c>
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f000 811b 	beq.w	800b518 <USB_EPStartXfer+0x480>
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	f003 030f 	and.w	r3, r3, #15
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b2f8:	69f9      	ldr	r1, [r7, #28]
 800b2fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2fe:	4313      	orrs	r3, r2
 800b300:	634b      	str	r3, [r1, #52]	; 0x34
 800b302:	e109      	b.n	800b518 <USB_EPStartXfer+0x480>
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b310:	2b00      	cmp	r3, #0
 800b312:	d110      	bne.n	800b336 <USB_EPStartXfer+0x29e>
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	015a      	lsls	r2, r3, #5
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	4413      	add	r3, r2
 800b31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	69ba      	ldr	r2, [r7, #24]
 800b324:	0151      	lsls	r1, r2, #5
 800b326:	69fa      	ldr	r2, [r7, #28]
 800b328:	440a      	add	r2, r1
 800b32a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b32e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b332:	6013      	str	r3, [r2, #0]
 800b334:	e00f      	b.n	800b356 <USB_EPStartXfer+0x2be>
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	015a      	lsls	r2, r3, #5
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	4413      	add	r3, r2
 800b33e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	69ba      	ldr	r2, [r7, #24]
 800b346:	0151      	lsls	r1, r2, #5
 800b348:	69fa      	ldr	r2, [r7, #28]
 800b34a:	440a      	add	r2, r1
 800b34c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b354:	6013      	str	r3, [r2, #0]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	6919      	ldr	r1, [r3, #16]
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	781a      	ldrb	r2, [r3, #0]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	699b      	ldr	r3, [r3, #24]
 800b362:	b298      	uxth	r0, r3
 800b364:	79fb      	ldrb	r3, [r7, #7]
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	4603      	mov	r3, r0
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f000 fade 	bl	800b92c <USB_WritePacket>
 800b370:	e0d2      	b.n	800b518 <USB_EPStartXfer+0x480>
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	015a      	lsls	r2, r3, #5
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	4413      	add	r3, r2
 800b37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	69ba      	ldr	r2, [r7, #24]
 800b382:	0151      	lsls	r1, r2, #5
 800b384:	69fa      	ldr	r2, [r7, #28]
 800b386:	440a      	add	r2, r1
 800b388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b38c:	0cdb      	lsrs	r3, r3, #19
 800b38e:	04db      	lsls	r3, r3, #19
 800b390:	6113      	str	r3, [r2, #16]
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	015a      	lsls	r2, r3, #5
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	4413      	add	r3, r2
 800b39a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b39e:	691b      	ldr	r3, [r3, #16]
 800b3a0:	69ba      	ldr	r2, [r7, #24]
 800b3a2:	0151      	lsls	r1, r2, #5
 800b3a4:	69fa      	ldr	r2, [r7, #28]
 800b3a6:	440a      	add	r2, r1
 800b3a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b3b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b3b4:	6113      	str	r3, [r2, #16]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	699b      	ldr	r3, [r3, #24]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d126      	bne.n	800b40c <USB_EPStartXfer+0x374>
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	015a      	lsls	r2, r3, #5
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ca:	691a      	ldr	r2, [r3, #16]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3d4:	69b9      	ldr	r1, [r7, #24]
 800b3d6:	0148      	lsls	r0, r1, #5
 800b3d8:	69f9      	ldr	r1, [r7, #28]
 800b3da:	4401      	add	r1, r0
 800b3dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	610b      	str	r3, [r1, #16]
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	015a      	lsls	r2, r3, #5
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	69ba      	ldr	r2, [r7, #24]
 800b3f4:	0151      	lsls	r1, r2, #5
 800b3f6:	69fa      	ldr	r2, [r7, #28]
 800b3f8:	440a      	add	r2, r1
 800b3fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b402:	6113      	str	r3, [r2, #16]
 800b404:	e03a      	b.n	800b47c <USB_EPStartXfer+0x3e4>
 800b406:	bf00      	nop
 800b408:	1ff80000 	.word	0x1ff80000
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	699a      	ldr	r2, [r3, #24]
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	4413      	add	r3, r2
 800b416:	1e5a      	subs	r2, r3, #1
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b420:	82fb      	strh	r3, [r7, #22]
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	8afa      	ldrh	r2, [r7, #22]
 800b428:	fb03 f202 	mul.w	r2, r3, r2
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	61da      	str	r2, [r3, #28]
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	4413      	add	r3, r2
 800b438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b43c:	691a      	ldr	r2, [r3, #16]
 800b43e:	8afb      	ldrh	r3, [r7, #22]
 800b440:	04d9      	lsls	r1, r3, #19
 800b442:	4b38      	ldr	r3, [pc, #224]	; (800b524 <USB_EPStartXfer+0x48c>)
 800b444:	400b      	ands	r3, r1
 800b446:	69b9      	ldr	r1, [r7, #24]
 800b448:	0148      	lsls	r0, r1, #5
 800b44a:	69f9      	ldr	r1, [r7, #28]
 800b44c:	4401      	add	r1, r0
 800b44e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b452:	4313      	orrs	r3, r2
 800b454:	610b      	str	r3, [r1, #16]
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	015a      	lsls	r2, r3, #5
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	4413      	add	r3, r2
 800b45e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b462:	691a      	ldr	r2, [r3, #16]
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	69db      	ldr	r3, [r3, #28]
 800b468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b46c:	69b9      	ldr	r1, [r7, #24]
 800b46e:	0148      	lsls	r0, r1, #5
 800b470:	69f9      	ldr	r1, [r7, #28]
 800b472:	4401      	add	r1, r0
 800b474:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b478:	4313      	orrs	r3, r2
 800b47a:	610b      	str	r3, [r1, #16]
 800b47c:	79fb      	ldrb	r3, [r7, #7]
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d10d      	bne.n	800b49e <USB_EPStartXfer+0x406>
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d009      	beq.n	800b49e <USB_EPStartXfer+0x406>
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	6919      	ldr	r1, [r3, #16]
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	015a      	lsls	r2, r3, #5
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	4413      	add	r3, r2
 800b496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b49a:	460a      	mov	r2, r1
 800b49c:	615a      	str	r2, [r3, #20]
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	791b      	ldrb	r3, [r3, #4]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d128      	bne.n	800b4f8 <USB_EPStartXfer+0x460>
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d110      	bne.n	800b4d8 <USB_EPStartXfer+0x440>
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	015a      	lsls	r2, r3, #5
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	4413      	add	r3, r2
 800b4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	69ba      	ldr	r2, [r7, #24]
 800b4c6:	0151      	lsls	r1, r2, #5
 800b4c8:	69fa      	ldr	r2, [r7, #28]
 800b4ca:	440a      	add	r2, r1
 800b4cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4d4:	6013      	str	r3, [r2, #0]
 800b4d6:	e00f      	b.n	800b4f8 <USB_EPStartXfer+0x460>
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	69ba      	ldr	r2, [r7, #24]
 800b4e8:	0151      	lsls	r1, r2, #5
 800b4ea:	69fa      	ldr	r2, [r7, #28]
 800b4ec:	440a      	add	r2, r1
 800b4ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4f6:	6013      	str	r3, [r2, #0]
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	015a      	lsls	r2, r3, #5
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	4413      	add	r3, r2
 800b500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	69ba      	ldr	r2, [r7, #24]
 800b508:	0151      	lsls	r1, r2, #5
 800b50a:	69fa      	ldr	r2, [r7, #28]
 800b50c:	440a      	add	r2, r1
 800b50e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b512:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b516:	6013      	str	r3, [r2, #0]
 800b518:	2300      	movs	r3, #0
 800b51a:	4618      	mov	r0, r3
 800b51c:	3720      	adds	r7, #32
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	1ff80000 	.word	0x1ff80000

0800b528 <USB_EP0StartXfer>:
 800b528:	b480      	push	{r7}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	4613      	mov	r3, r2
 800b534:	71fb      	strb	r3, [r7, #7]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	613b      	str	r3, [r7, #16]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	785b      	ldrb	r3, [r3, #1]
 800b544:	2b01      	cmp	r3, #1
 800b546:	f040 80ce 	bne.w	800b6e6 <USB_EP0StartXfer+0x1be>
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	699b      	ldr	r3, [r3, #24]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d132      	bne.n	800b5b8 <USB_EP0StartXfer+0x90>
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	015a      	lsls	r2, r3, #5
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	4413      	add	r3, r2
 800b55a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b55e:	691b      	ldr	r3, [r3, #16]
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	0151      	lsls	r1, r2, #5
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	440a      	add	r2, r1
 800b568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b56c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b570:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b574:	6113      	str	r3, [r2, #16]
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	015a      	lsls	r2, r3, #5
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	4413      	add	r3, r2
 800b57e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b582:	691b      	ldr	r3, [r3, #16]
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	0151      	lsls	r1, r2, #5
 800b588:	697a      	ldr	r2, [r7, #20]
 800b58a:	440a      	add	r2, r1
 800b58c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b594:	6113      	str	r3, [r2, #16]
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	015a      	lsls	r2, r3, #5
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	4413      	add	r3, r2
 800b59e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	693a      	ldr	r2, [r7, #16]
 800b5a6:	0151      	lsls	r1, r2, #5
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	440a      	add	r2, r1
 800b5ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5b0:	0cdb      	lsrs	r3, r3, #19
 800b5b2:	04db      	lsls	r3, r3, #19
 800b5b4:	6113      	str	r3, [r2, #16]
 800b5b6:	e04e      	b.n	800b656 <USB_EP0StartXfer+0x12e>
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	4413      	add	r3, r2
 800b5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	0151      	lsls	r1, r2, #5
 800b5ca:	697a      	ldr	r2, [r7, #20]
 800b5cc:	440a      	add	r2, r1
 800b5ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5d2:	0cdb      	lsrs	r3, r3, #19
 800b5d4:	04db      	lsls	r3, r3, #19
 800b5d6:	6113      	str	r3, [r2, #16]
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	015a      	lsls	r2, r3, #5
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	4413      	add	r3, r2
 800b5e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5e4:	691b      	ldr	r3, [r3, #16]
 800b5e6:	693a      	ldr	r2, [r7, #16]
 800b5e8:	0151      	lsls	r1, r2, #5
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	440a      	add	r2, r1
 800b5ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b5f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b5fa:	6113      	str	r3, [r2, #16]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	699a      	ldr	r2, [r3, #24]
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	429a      	cmp	r2, r3
 800b606:	d903      	bls.n	800b610 <USB_EP0StartXfer+0xe8>
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	68da      	ldr	r2, [r3, #12]
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	619a      	str	r2, [r3, #24]
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	015a      	lsls	r2, r3, #5
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	4413      	add	r3, r2
 800b618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	693a      	ldr	r2, [r7, #16]
 800b620:	0151      	lsls	r1, r2, #5
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	440a      	add	r2, r1
 800b626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b62a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b62e:	6113      	str	r3, [r2, #16]
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	015a      	lsls	r2, r3, #5
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	4413      	add	r3, r2
 800b638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b63c:	691a      	ldr	r2, [r3, #16]
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b646:	6939      	ldr	r1, [r7, #16]
 800b648:	0148      	lsls	r0, r1, #5
 800b64a:	6979      	ldr	r1, [r7, #20]
 800b64c:	4401      	add	r1, r0
 800b64e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b652:	4313      	orrs	r3, r2
 800b654:	610b      	str	r3, [r1, #16]
 800b656:	79fb      	ldrb	r3, [r7, #7]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d11e      	bne.n	800b69a <USB_EP0StartXfer+0x172>
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	695b      	ldr	r3, [r3, #20]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d009      	beq.n	800b678 <USB_EP0StartXfer+0x150>
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	015a      	lsls	r2, r3, #5
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	4413      	add	r3, r2
 800b66c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b670:	461a      	mov	r2, r3
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	6153      	str	r3, [r2, #20]
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	015a      	lsls	r2, r3, #5
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	4413      	add	r3, r2
 800b680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	0151      	lsls	r1, r2, #5
 800b68a:	697a      	ldr	r2, [r7, #20]
 800b68c:	440a      	add	r2, r1
 800b68e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b692:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b696:	6013      	str	r3, [r2, #0]
 800b698:	e097      	b.n	800b7ca <USB_EP0StartXfer+0x2a2>
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	015a      	lsls	r2, r3, #5
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	0151      	lsls	r1, r2, #5
 800b6ac:	697a      	ldr	r2, [r7, #20]
 800b6ae:	440a      	add	r2, r1
 800b6b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b6b8:	6013      	str	r3, [r2, #0]
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	699b      	ldr	r3, [r3, #24]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f000 8083 	beq.w	800b7ca <USB_EP0StartXfer+0x2a2>
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	f003 030f 	and.w	r3, r3, #15
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b6da:	6979      	ldr	r1, [r7, #20]
 800b6dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	634b      	str	r3, [r1, #52]	; 0x34
 800b6e4:	e071      	b.n	800b7ca <USB_EP0StartXfer+0x2a2>
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	015a      	lsls	r2, r3, #5
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f2:	691b      	ldr	r3, [r3, #16]
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	0151      	lsls	r1, r2, #5
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	440a      	add	r2, r1
 800b6fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b700:	0cdb      	lsrs	r3, r3, #19
 800b702:	04db      	lsls	r3, r3, #19
 800b704:	6113      	str	r3, [r2, #16]
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	015a      	lsls	r2, r3, #5
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	4413      	add	r3, r2
 800b70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	0151      	lsls	r1, r2, #5
 800b718:	697a      	ldr	r2, [r7, #20]
 800b71a:	440a      	add	r2, r1
 800b71c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b720:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b724:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b728:	6113      	str	r3, [r2, #16]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d003      	beq.n	800b73a <USB_EP0StartXfer+0x212>
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	68da      	ldr	r2, [r3, #12]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	619a      	str	r2, [r3, #24]
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	68da      	ldr	r2, [r3, #12]
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	61da      	str	r2, [r3, #28]
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	015a      	lsls	r2, r3, #5
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	4413      	add	r3, r2
 800b74a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	693a      	ldr	r2, [r7, #16]
 800b752:	0151      	lsls	r1, r2, #5
 800b754:	697a      	ldr	r2, [r7, #20]
 800b756:	440a      	add	r2, r1
 800b758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b75c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b760:	6113      	str	r3, [r2, #16]
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	015a      	lsls	r2, r3, #5
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	4413      	add	r3, r2
 800b76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b76e:	691a      	ldr	r2, [r3, #16]
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	69db      	ldr	r3, [r3, #28]
 800b774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b778:	6939      	ldr	r1, [r7, #16]
 800b77a:	0148      	lsls	r0, r1, #5
 800b77c:	6979      	ldr	r1, [r7, #20]
 800b77e:	4401      	add	r1, r0
 800b780:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b784:	4313      	orrs	r3, r2
 800b786:	610b      	str	r3, [r1, #16]
 800b788:	79fb      	ldrb	r3, [r7, #7]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d10d      	bne.n	800b7aa <USB_EP0StartXfer+0x282>
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d009      	beq.n	800b7aa <USB_EP0StartXfer+0x282>
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	6919      	ldr	r1, [r3, #16]
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a6:	460a      	mov	r2, r1
 800b7a8:	615a      	str	r2, [r3, #20]
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	015a      	lsls	r2, r3, #5
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	693a      	ldr	r2, [r7, #16]
 800b7ba:	0151      	lsls	r1, r2, #5
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	440a      	add	r2, r1
 800b7c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b7c8:	6013      	str	r3, [r2, #0]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	371c      	adds	r7, #28
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <USB_EPStopXfer>:
 800b7d8:	b480      	push	{r7}
 800b7da:	b087      	sub	sp, #28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	60fb      	str	r3, [r7, #12]
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	75fb      	strb	r3, [r7, #23]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	613b      	str	r3, [r7, #16]
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	785b      	ldrb	r3, [r3, #1]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d14a      	bne.n	800b88c <USB_EPStopXfer+0xb4>
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	015a      	lsls	r2, r3, #5
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	4413      	add	r3, r2
 800b800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b80a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b80e:	f040 8086 	bne.w	800b91e <USB_EPStopXfer+0x146>
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	015a      	lsls	r2, r3, #5
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	4413      	add	r3, r2
 800b81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	7812      	ldrb	r2, [r2, #0]
 800b826:	0151      	lsls	r1, r2, #5
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	440a      	add	r2, r1
 800b82c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b830:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b834:	6013      	str	r3, [r2, #0]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	015a      	lsls	r2, r3, #5
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	4413      	add	r3, r2
 800b840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	7812      	ldrb	r2, [r2, #0]
 800b84a:	0151      	lsls	r1, r2, #5
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	440a      	add	r2, r1
 800b850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b854:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b858:	6013      	str	r3, [r2, #0]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	60fb      	str	r3, [r7, #12]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f242 7210 	movw	r2, #10000	; 0x2710
 800b866:	4293      	cmp	r3, r2
 800b868:	d902      	bls.n	800b870 <USB_EPStopXfer+0x98>
 800b86a:	2301      	movs	r3, #1
 800b86c:	75fb      	strb	r3, [r7, #23]
 800b86e:	e056      	b.n	800b91e <USB_EPStopXfer+0x146>
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	015a      	lsls	r2, r3, #5
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	4413      	add	r3, r2
 800b87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b888:	d0e7      	beq.n	800b85a <USB_EPStopXfer+0x82>
 800b88a:	e048      	b.n	800b91e <USB_EPStopXfer+0x146>
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	015a      	lsls	r2, r3, #5
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	4413      	add	r3, r2
 800b896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8a4:	d13b      	bne.n	800b91e <USB_EPStopXfer+0x146>
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	015a      	lsls	r2, r3, #5
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	7812      	ldrb	r2, [r2, #0]
 800b8ba:	0151      	lsls	r1, r2, #5
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	440a      	add	r2, r1
 800b8c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b8c8:	6013      	str	r3, [r2, #0]
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	015a      	lsls	r2, r3, #5
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	7812      	ldrb	r2, [r2, #0]
 800b8de:	0151      	lsls	r1, r2, #5
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	440a      	add	r2, r1
 800b8e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	60fb      	str	r3, [r7, #12]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f242 7210 	movw	r2, #10000	; 0x2710
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d902      	bls.n	800b904 <USB_EPStopXfer+0x12c>
 800b8fe:	2301      	movs	r3, #1
 800b900:	75fb      	strb	r3, [r7, #23]
 800b902:	e00c      	b.n	800b91e <USB_EPStopXfer+0x146>
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	015a      	lsls	r2, r3, #5
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	4413      	add	r3, r2
 800b90e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b91c:	d0e7      	beq.n	800b8ee <USB_EPStopXfer+0x116>
 800b91e:	7dfb      	ldrb	r3, [r7, #23]
 800b920:	4618      	mov	r0, r3
 800b922:	371c      	adds	r7, #28
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <USB_WritePacket>:
 800b92c:	b480      	push	{r7}
 800b92e:	b089      	sub	sp, #36	; 0x24
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	4611      	mov	r1, r2
 800b938:	461a      	mov	r2, r3
 800b93a:	460b      	mov	r3, r1
 800b93c:	71fb      	strb	r3, [r7, #7]
 800b93e:	4613      	mov	r3, r2
 800b940:	80bb      	strh	r3, [r7, #4]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	617b      	str	r3, [r7, #20]
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	61fb      	str	r3, [r7, #28]
 800b94a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d123      	bne.n	800b99a <USB_WritePacket+0x6e>
 800b952:	88bb      	ldrh	r3, [r7, #4]
 800b954:	3303      	adds	r3, #3
 800b956:	089b      	lsrs	r3, r3, #2
 800b958:	613b      	str	r3, [r7, #16]
 800b95a:	2300      	movs	r3, #0
 800b95c:	61bb      	str	r3, [r7, #24]
 800b95e:	e018      	b.n	800b992 <USB_WritePacket+0x66>
 800b960:	79fb      	ldrb	r3, [r7, #7]
 800b962:	031a      	lsls	r2, r3, #12
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	4413      	add	r3, r2
 800b968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b96c:	461a      	mov	r2, r3
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	6013      	str	r3, [r2, #0]
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	3301      	adds	r3, #1
 800b978:	61fb      	str	r3, [r7, #28]
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	3301      	adds	r3, #1
 800b97e:	61fb      	str	r3, [r7, #28]
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	3301      	adds	r3, #1
 800b984:	61fb      	str	r3, [r7, #28]
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	3301      	adds	r3, #1
 800b98a:	61fb      	str	r3, [r7, #28]
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	3301      	adds	r3, #1
 800b990:	61bb      	str	r3, [r7, #24]
 800b992:	69ba      	ldr	r2, [r7, #24]
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	429a      	cmp	r2, r3
 800b998:	d3e2      	bcc.n	800b960 <USB_WritePacket+0x34>
 800b99a:	2300      	movs	r3, #0
 800b99c:	4618      	mov	r0, r3
 800b99e:	3724      	adds	r7, #36	; 0x24
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <USB_ReadPacket>:
 800b9a8:	b480      	push	{r7}
 800b9aa:	b08b      	sub	sp, #44	; 0x2c
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	80fb      	strh	r3, [r7, #6]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	61bb      	str	r3, [r7, #24]
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	627b      	str	r3, [r7, #36]	; 0x24
 800b9be:	88fb      	ldrh	r3, [r7, #6]
 800b9c0:	089b      	lsrs	r3, r3, #2
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	617b      	str	r3, [r7, #20]
 800b9c6:	88fb      	ldrh	r3, [r7, #6]
 800b9c8:	f003 0303 	and.w	r3, r3, #3
 800b9cc:	83fb      	strh	r3, [r7, #30]
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	623b      	str	r3, [r7, #32]
 800b9d2:	e014      	b.n	800b9fe <USB_ReadPacket+0x56>
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	627b      	str	r3, [r7, #36]	; 0x24
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	627b      	str	r3, [r7, #36]	; 0x24
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	623b      	str	r3, [r7, #32]
 800b9fe:	6a3a      	ldr	r2, [r7, #32]
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d3e6      	bcc.n	800b9d4 <USB_ReadPacket+0x2c>
 800ba06:	8bfb      	ldrh	r3, [r7, #30]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d01e      	beq.n	800ba4a <USB_ReadPacket+0xa2>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	623b      	str	r3, [r7, #32]
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba16:	461a      	mov	r2, r3
 800ba18:	f107 0310 	add.w	r3, r7, #16
 800ba1c:	6812      	ldr	r2, [r2, #0]
 800ba1e:	601a      	str	r2, [r3, #0]
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	00db      	lsls	r3, r3, #3
 800ba28:	fa22 f303 	lsr.w	r3, r2, r3
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	6a3b      	ldr	r3, [r7, #32]
 800ba34:	3301      	adds	r3, #1
 800ba36:	623b      	str	r3, [r7, #32]
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba3e:	8bfb      	ldrh	r3, [r7, #30]
 800ba40:	3b01      	subs	r3, #1
 800ba42:	83fb      	strh	r3, [r7, #30]
 800ba44:	8bfb      	ldrh	r3, [r7, #30]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1ea      	bne.n	800ba20 <USB_ReadPacket+0x78>
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	372c      	adds	r7, #44	; 0x2c
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <USB_EPSetStall>:
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	60fb      	str	r3, [r7, #12]
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	60bb      	str	r3, [r7, #8]
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	785b      	ldrb	r3, [r3, #1]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d12c      	bne.n	800bace <USB_EPSetStall+0x76>
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	015a      	lsls	r2, r3, #5
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	db12      	blt.n	800baac <USB_EPSetStall+0x54>
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00f      	beq.n	800baac <USB_EPSetStall+0x54>
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	015a      	lsls	r2, r3, #5
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	4413      	add	r3, r2
 800ba94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	0151      	lsls	r1, r2, #5
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	440a      	add	r2, r1
 800baa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800baaa:	6013      	str	r3, [r2, #0]
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	015a      	lsls	r2, r3, #5
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	4413      	add	r3, r2
 800bab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	0151      	lsls	r1, r2, #5
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	440a      	add	r2, r1
 800bac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800baca:	6013      	str	r3, [r2, #0]
 800bacc:	e02b      	b.n	800bb26 <USB_EPSetStall+0xce>
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	015a      	lsls	r2, r3, #5
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	4413      	add	r3, r2
 800bad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	db12      	blt.n	800bb06 <USB_EPSetStall+0xae>
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00f      	beq.n	800bb06 <USB_EPSetStall+0xae>
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	015a      	lsls	r2, r3, #5
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	4413      	add	r3, r2
 800baee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	0151      	lsls	r1, r2, #5
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	440a      	add	r2, r1
 800bafc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bb04:	6013      	str	r3, [r2, #0]
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	015a      	lsls	r2, r3, #5
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	0151      	lsls	r1, r2, #5
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	440a      	add	r2, r1
 800bb1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb24:	6013      	str	r3, [r2, #0]
 800bb26:	2300      	movs	r3, #0
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3714      	adds	r7, #20
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <USB_EPClearStall>:
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	60fb      	str	r3, [r7, #12]
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	60bb      	str	r3, [r7, #8]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	785b      	ldrb	r3, [r3, #1]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d128      	bne.n	800bba2 <USB_EPClearStall+0x6e>
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	015a      	lsls	r2, r3, #5
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4413      	add	r3, r2
 800bb58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	0151      	lsls	r1, r2, #5
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	440a      	add	r2, r1
 800bb66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb6e:	6013      	str	r3, [r2, #0]
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	791b      	ldrb	r3, [r3, #4]
 800bb74:	2b03      	cmp	r3, #3
 800bb76:	d003      	beq.n	800bb80 <USB_EPClearStall+0x4c>
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	791b      	ldrb	r3, [r3, #4]
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d138      	bne.n	800bbf2 <USB_EPClearStall+0xbe>
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	015a      	lsls	r2, r3, #5
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	0151      	lsls	r1, r2, #5
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	440a      	add	r2, r1
 800bb96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb9e:	6013      	str	r3, [r2, #0]
 800bba0:	e027      	b.n	800bbf2 <USB_EPClearStall+0xbe>
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	015a      	lsls	r2, r3, #5
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	0151      	lsls	r1, r2, #5
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	440a      	add	r2, r1
 800bbb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bbc0:	6013      	str	r3, [r2, #0]
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	791b      	ldrb	r3, [r3, #4]
 800bbc6:	2b03      	cmp	r3, #3
 800bbc8:	d003      	beq.n	800bbd2 <USB_EPClearStall+0x9e>
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	791b      	ldrb	r3, [r3, #4]
 800bbce:	2b02      	cmp	r3, #2
 800bbd0:	d10f      	bne.n	800bbf2 <USB_EPClearStall+0xbe>
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	015a      	lsls	r2, r3, #5
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	4413      	add	r3, r2
 800bbda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	68ba      	ldr	r2, [r7, #8]
 800bbe2:	0151      	lsls	r1, r2, #5
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	440a      	add	r2, r1
 800bbe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbf0:	6013      	str	r3, [r2, #0]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <USB_SetDevAddress>:
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	70fb      	strb	r3, [r7, #3]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	60fb      	str	r3, [r7, #12]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bc22:	6013      	str	r3, [r2, #0]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	78fb      	ldrb	r3, [r7, #3]
 800bc2e:	011b      	lsls	r3, r3, #4
 800bc30:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bc34:	68f9      	ldr	r1, [r7, #12]
 800bc36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	600b      	str	r3, [r1, #0]
 800bc3e:	2300      	movs	r3, #0
 800bc40:	4618      	mov	r0, r3
 800bc42:	3714      	adds	r7, #20
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <USB_DevConnect>:
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	60fb      	str	r3, [r7, #12]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc66:	f023 0303 	bic.w	r3, r3, #3
 800bc6a:	6013      	str	r3, [r2, #0]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc7a:	f023 0302 	bic.w	r3, r3, #2
 800bc7e:	6053      	str	r3, [r2, #4]
 800bc80:	2300      	movs	r3, #0
 800bc82:	4618      	mov	r0, r3
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <USB_DevDisconnect>:
 800bc8e:	b480      	push	{r7}
 800bc90:	b085      	sub	sp, #20
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	60fb      	str	r3, [r7, #12]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bca8:	f023 0303 	bic.w	r3, r3, #3
 800bcac:	6013      	str	r3, [r2, #0]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcbc:	f043 0302 	orr.w	r3, r3, #2
 800bcc0:	6053      	str	r3, [r2, #4]
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3714      	adds	r7, #20
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <USB_ReadInterrupts>:
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	695b      	ldr	r3, [r3, #20]
 800bcdc:	60fb      	str	r3, [r7, #12]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	4013      	ands	r3, r2
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	4618      	mov	r0, r3
 800bcec:	3714      	adds	r7, #20
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr

0800bcf6 <USB_ReadDevAllOutEpInterrupt>:
 800bcf6:	b480      	push	{r7}
 800bcf8:	b085      	sub	sp, #20
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd08:	699b      	ldr	r3, [r3, #24]
 800bd0a:	60bb      	str	r3, [r7, #8]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd12:	69db      	ldr	r3, [r3, #28]
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	4013      	ands	r3, r2
 800bd18:	60bb      	str	r3, [r7, #8]
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	0c1b      	lsrs	r3, r3, #16
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3714      	adds	r7, #20
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <USB_ReadDevAllInEpInterrupt>:
 800bd2a:	b480      	push	{r7}
 800bd2c:	b085      	sub	sp, #20
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	60fb      	str	r3, [r7, #12]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd3c:	699b      	ldr	r3, [r3, #24]
 800bd3e:	60bb      	str	r3, [r7, #8]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd46:	69db      	ldr	r3, [r3, #28]
 800bd48:	68ba      	ldr	r2, [r7, #8]
 800bd4a:	4013      	ands	r3, r2
 800bd4c:	60bb      	str	r3, [r7, #8]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	4618      	mov	r0, r3
 800bd54:	3714      	adds	r7, #20
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <USB_ReadDevOutEPInterrupt>:
 800bd5e:	b480      	push	{r7}
 800bd60:	b085      	sub	sp, #20
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
 800bd66:	460b      	mov	r3, r1
 800bd68:	70fb      	strb	r3, [r7, #3]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	60fb      	str	r3, [r7, #12]
 800bd6e:	78fb      	ldrb	r3, [r7, #3]
 800bd70:	015a      	lsls	r2, r3, #5
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	4413      	add	r3, r2
 800bd76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	60bb      	str	r3, [r7, #8]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	4013      	ands	r3, r2
 800bd8a:	60bb      	str	r3, [r7, #8]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3714      	adds	r7, #20
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr

0800bd9a <USB_ReadDevInEPInterrupt>:
 800bd9a:	b480      	push	{r7}
 800bd9c:	b087      	sub	sp, #28
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	460b      	mov	r3, r1
 800bda4:	70fb      	strb	r3, [r7, #3]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	617b      	str	r3, [r7, #20]
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	613b      	str	r3, [r7, #16]
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdbc:	60fb      	str	r3, [r7, #12]
 800bdbe:	78fb      	ldrb	r3, [r7, #3]
 800bdc0:	f003 030f 	and.w	r3, r3, #15
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	fa22 f303 	lsr.w	r3, r2, r3
 800bdca:	01db      	lsls	r3, r3, #7
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	693a      	ldr	r2, [r7, #16]
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	613b      	str	r3, [r7, #16]
 800bdd4:	78fb      	ldrb	r3, [r7, #3]
 800bdd6:	015a      	lsls	r2, r3, #5
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	4413      	add	r3, r2
 800bddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	4013      	ands	r3, r2
 800bde6:	60bb      	str	r3, [r7, #8]
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	4618      	mov	r0, r3
 800bdec:	371c      	adds	r7, #28
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <USB_GetMode>:
 800bdf6:	b480      	push	{r7}
 800bdf8:	b083      	sub	sp, #12
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	f003 0301 	and.w	r3, r3, #1
 800be06:	4618      	mov	r0, r3
 800be08:	370c      	adds	r7, #12
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <USB_ActivateSetup>:
 800be12:	b480      	push	{r7}
 800be14:	b085      	sub	sp, #20
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	60fb      	str	r3, [r7, #12]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800be30:	f023 0307 	bic.w	r3, r3, #7
 800be34:	6013      	str	r3, [r2, #0]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be48:	6053      	str	r3, [r2, #4]
 800be4a:	2300      	movs	r3, #0
 800be4c:	4618      	mov	r0, r3
 800be4e:	3714      	adds	r7, #20
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <USB_EP0_OutStart>:
 800be58:	b480      	push	{r7}
 800be5a:	b087      	sub	sp, #28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	460b      	mov	r3, r1
 800be62:	607a      	str	r2, [r7, #4]
 800be64:	72fb      	strb	r3, [r7, #11]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	617b      	str	r3, [r7, #20]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	333c      	adds	r3, #60	; 0x3c
 800be6e:	3304      	adds	r3, #4
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	613b      	str	r3, [r7, #16]
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	4a26      	ldr	r2, [pc, #152]	; (800bf10 <USB_EP0_OutStart+0xb8>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d90a      	bls.n	800be92 <USB_EP0_OutStart+0x3a>
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be8c:	d101      	bne.n	800be92 <USB_EP0_OutStart+0x3a>
 800be8e:	2300      	movs	r3, #0
 800be90:	e037      	b.n	800bf02 <USB_EP0_OutStart+0xaa>
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be98:	461a      	mov	r2, r3
 800be9a:	2300      	movs	r3, #0
 800be9c:	6113      	str	r3, [r2, #16]
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800beb0:	6113      	str	r3, [r2, #16]
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb8:	691b      	ldr	r3, [r3, #16]
 800beba:	697a      	ldr	r2, [r7, #20]
 800bebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bec0:	f043 0318 	orr.w	r3, r3, #24
 800bec4:	6113      	str	r3, [r2, #16]
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bed4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bed8:	6113      	str	r3, [r2, #16]
 800beda:	7afb      	ldrb	r3, [r7, #11]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d10f      	bne.n	800bf00 <USB_EP0_OutStart+0xa8>
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bee6:	461a      	mov	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6153      	str	r3, [r2, #20]
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	697a      	ldr	r2, [r7, #20]
 800bef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800befa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800befe:	6013      	str	r3, [r2, #0]
 800bf00:	2300      	movs	r3, #0
 800bf02:	4618      	mov	r0, r3
 800bf04:	371c      	adds	r7, #28
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	4f54300a 	.word	0x4f54300a

0800bf14 <USB_CoreReset>:
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	60fb      	str	r3, [r7, #12]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	3301      	adds	r3, #1
 800bf24:	60fb      	str	r3, [r7, #12]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	4a13      	ldr	r2, [pc, #76]	; (800bf78 <USB_CoreReset+0x64>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d901      	bls.n	800bf32 <USB_CoreReset+0x1e>
 800bf2e:	2303      	movs	r3, #3
 800bf30:	e01b      	b.n	800bf6a <USB_CoreReset+0x56>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	daf2      	bge.n	800bf20 <USB_CoreReset+0xc>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60fb      	str	r3, [r7, #12]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	691b      	ldr	r3, [r3, #16]
 800bf42:	f043 0201 	orr.w	r2, r3, #1
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	611a      	str	r2, [r3, #16]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	60fb      	str	r3, [r7, #12]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	4a09      	ldr	r2, [pc, #36]	; (800bf78 <USB_CoreReset+0x64>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d901      	bls.n	800bf5c <USB_CoreReset+0x48>
 800bf58:	2303      	movs	r3, #3
 800bf5a:	e006      	b.n	800bf6a <USB_CoreReset+0x56>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	f003 0301 	and.w	r3, r3, #1
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d0f0      	beq.n	800bf4a <USB_CoreReset+0x36>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3714      	adds	r7, #20
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	00030d40 	.word	0x00030d40

0800bf7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	460b      	mov	r3, r1
 800bf86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bf88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bf8c:	f002 fca0 	bl	800e8d0 <USBD_static_malloc>
 800bf90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d109      	bne.n	800bfac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	32b0      	adds	r2, #176	; 0xb0
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	e0d4      	b.n	800c156 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bfac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f002 fd22 	bl	800e9fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	32b0      	adds	r2, #176	; 0xb0
 800bfc2:	68f9      	ldr	r1, [r7, #12]
 800bfc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	32b0      	adds	r2, #176	; 0xb0
 800bfd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	7c1b      	ldrb	r3, [r3, #16]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d138      	bne.n	800c056 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bfe4:	4b5e      	ldr	r3, [pc, #376]	; (800c160 <USBD_CDC_Init+0x1e4>)
 800bfe6:	7819      	ldrb	r1, [r3, #0]
 800bfe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfec:	2202      	movs	r2, #2
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f002 fb4b 	bl	800e68a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bff4:	4b5a      	ldr	r3, [pc, #360]	; (800c160 <USBD_CDC_Init+0x1e4>)
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	f003 020f 	and.w	r2, r3, #15
 800bffc:	6879      	ldr	r1, [r7, #4]
 800bffe:	4613      	mov	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	4413      	add	r3, r2
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	440b      	add	r3, r1
 800c008:	3324      	adds	r3, #36	; 0x24
 800c00a:	2201      	movs	r2, #1
 800c00c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c00e:	4b55      	ldr	r3, [pc, #340]	; (800c164 <USBD_CDC_Init+0x1e8>)
 800c010:	7819      	ldrb	r1, [r3, #0]
 800c012:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c016:	2202      	movs	r2, #2
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f002 fb36 	bl	800e68a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c01e:	4b51      	ldr	r3, [pc, #324]	; (800c164 <USBD_CDC_Init+0x1e8>)
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	f003 020f 	and.w	r2, r3, #15
 800c026:	6879      	ldr	r1, [r7, #4]
 800c028:	4613      	mov	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	4413      	add	r3, r2
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	440b      	add	r3, r1
 800c032:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c036:	2201      	movs	r2, #1
 800c038:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c03a:	4b4b      	ldr	r3, [pc, #300]	; (800c168 <USBD_CDC_Init+0x1ec>)
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	f003 020f 	and.w	r2, r3, #15
 800c042:	6879      	ldr	r1, [r7, #4]
 800c044:	4613      	mov	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4413      	add	r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	440b      	add	r3, r1
 800c04e:	3326      	adds	r3, #38	; 0x26
 800c050:	2210      	movs	r2, #16
 800c052:	801a      	strh	r2, [r3, #0]
 800c054:	e035      	b.n	800c0c2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c056:	4b42      	ldr	r3, [pc, #264]	; (800c160 <USBD_CDC_Init+0x1e4>)
 800c058:	7819      	ldrb	r1, [r3, #0]
 800c05a:	2340      	movs	r3, #64	; 0x40
 800c05c:	2202      	movs	r2, #2
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f002 fb13 	bl	800e68a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c064:	4b3e      	ldr	r3, [pc, #248]	; (800c160 <USBD_CDC_Init+0x1e4>)
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	f003 020f 	and.w	r2, r3, #15
 800c06c:	6879      	ldr	r1, [r7, #4]
 800c06e:	4613      	mov	r3, r2
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	4413      	add	r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	440b      	add	r3, r1
 800c078:	3324      	adds	r3, #36	; 0x24
 800c07a:	2201      	movs	r2, #1
 800c07c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c07e:	4b39      	ldr	r3, [pc, #228]	; (800c164 <USBD_CDC_Init+0x1e8>)
 800c080:	7819      	ldrb	r1, [r3, #0]
 800c082:	2340      	movs	r3, #64	; 0x40
 800c084:	2202      	movs	r2, #2
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f002 faff 	bl	800e68a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c08c:	4b35      	ldr	r3, [pc, #212]	; (800c164 <USBD_CDC_Init+0x1e8>)
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	f003 020f 	and.w	r2, r3, #15
 800c094:	6879      	ldr	r1, [r7, #4]
 800c096:	4613      	mov	r3, r2
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	4413      	add	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	440b      	add	r3, r1
 800c0a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c0a8:	4b2f      	ldr	r3, [pc, #188]	; (800c168 <USBD_CDC_Init+0x1ec>)
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	f003 020f 	and.w	r2, r3, #15
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	440b      	add	r3, r1
 800c0bc:	3326      	adds	r3, #38	; 0x26
 800c0be:	2210      	movs	r2, #16
 800c0c0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c0c2:	4b29      	ldr	r3, [pc, #164]	; (800c168 <USBD_CDC_Init+0x1ec>)
 800c0c4:	7819      	ldrb	r1, [r3, #0]
 800c0c6:	2308      	movs	r3, #8
 800c0c8:	2203      	movs	r2, #3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f002 fadd 	bl	800e68a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c0d0:	4b25      	ldr	r3, [pc, #148]	; (800c168 <USBD_CDC_Init+0x1ec>)
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	f003 020f 	and.w	r2, r3, #15
 800c0d8:	6879      	ldr	r1, [r7, #4]
 800c0da:	4613      	mov	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	4413      	add	r3, r2
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	440b      	add	r3, r1
 800c0e4:	3324      	adds	r3, #36	; 0x24
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	33b0      	adds	r3, #176	; 0xb0
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	4413      	add	r3, r2
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2200      	movs	r2, #0
 800c112:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d101      	bne.n	800c124 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c120:	2302      	movs	r3, #2
 800c122:	e018      	b.n	800c156 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	7c1b      	ldrb	r3, [r3, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d10a      	bne.n	800c142 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c12c:	4b0d      	ldr	r3, [pc, #52]	; (800c164 <USBD_CDC_Init+0x1e8>)
 800c12e:	7819      	ldrb	r1, [r3, #0]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f002 fb94 	bl	800e868 <USBD_LL_PrepareReceive>
 800c140:	e008      	b.n	800c154 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c142:	4b08      	ldr	r3, [pc, #32]	; (800c164 <USBD_CDC_Init+0x1e8>)
 800c144:	7819      	ldrb	r1, [r3, #0]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c14c:	2340      	movs	r3, #64	; 0x40
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f002 fb8a 	bl	800e868 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	200000a7 	.word	0x200000a7
 800c164:	200000a8 	.word	0x200000a8
 800c168:	200000a9 	.word	0x200000a9

0800c16c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	460b      	mov	r3, r1
 800c176:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c178:	4b3a      	ldr	r3, [pc, #232]	; (800c264 <USBD_CDC_DeInit+0xf8>)
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	4619      	mov	r1, r3
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f002 faa9 	bl	800e6d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c184:	4b37      	ldr	r3, [pc, #220]	; (800c264 <USBD_CDC_DeInit+0xf8>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	f003 020f 	and.w	r2, r3, #15
 800c18c:	6879      	ldr	r1, [r7, #4]
 800c18e:	4613      	mov	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	440b      	add	r3, r1
 800c198:	3324      	adds	r3, #36	; 0x24
 800c19a:	2200      	movs	r2, #0
 800c19c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c19e:	4b32      	ldr	r3, [pc, #200]	; (800c268 <USBD_CDC_DeInit+0xfc>)
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f002 fa96 	bl	800e6d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c1aa:	4b2f      	ldr	r3, [pc, #188]	; (800c268 <USBD_CDC_DeInit+0xfc>)
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	f003 020f 	and.w	r2, r3, #15
 800c1b2:	6879      	ldr	r1, [r7, #4]
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	4413      	add	r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	440b      	add	r3, r1
 800c1be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c1c6:	4b29      	ldr	r3, [pc, #164]	; (800c26c <USBD_CDC_DeInit+0x100>)
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f002 fa82 	bl	800e6d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c1d2:	4b26      	ldr	r3, [pc, #152]	; (800c26c <USBD_CDC_DeInit+0x100>)
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	f003 020f 	and.w	r2, r3, #15
 800c1da:	6879      	ldr	r1, [r7, #4]
 800c1dc:	4613      	mov	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4413      	add	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	440b      	add	r3, r1
 800c1e6:	3324      	adds	r3, #36	; 0x24
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c1ec:	4b1f      	ldr	r3, [pc, #124]	; (800c26c <USBD_CDC_DeInit+0x100>)
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	f003 020f 	and.w	r2, r3, #15
 800c1f4:	6879      	ldr	r1, [r7, #4]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	4413      	add	r3, r2
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	440b      	add	r3, r1
 800c200:	3326      	adds	r3, #38	; 0x26
 800c202:	2200      	movs	r2, #0
 800c204:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	32b0      	adds	r2, #176	; 0xb0
 800c210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d01f      	beq.n	800c258 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	33b0      	adds	r3, #176	; 0xb0
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4413      	add	r3, r2
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	32b0      	adds	r2, #176	; 0xb0
 800c236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f002 fb56 	bl	800e8ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	32b0      	adds	r2, #176	; 0xb0
 800c24a:	2100      	movs	r1, #0
 800c24c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c258:	2300      	movs	r3, #0
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3708      	adds	r7, #8
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	200000a7 	.word	0x200000a7
 800c268:	200000a8 	.word	0x200000a8
 800c26c:	200000a9 	.word	0x200000a9

0800c270 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	32b0      	adds	r2, #176	; 0xb0
 800c284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c288:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c28a:	2300      	movs	r3, #0
 800c28c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c28e:	2300      	movs	r3, #0
 800c290:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c292:	2300      	movs	r3, #0
 800c294:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d101      	bne.n	800c2a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c29c:	2303      	movs	r3, #3
 800c29e:	e0bf      	b.n	800c420 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d050      	beq.n	800c34e <USBD_CDC_Setup+0xde>
 800c2ac:	2b20      	cmp	r3, #32
 800c2ae:	f040 80af 	bne.w	800c410 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	88db      	ldrh	r3, [r3, #6]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d03a      	beq.n	800c330 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	b25b      	sxtb	r3, r3
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	da1b      	bge.n	800c2fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	33b0      	adds	r3, #176	; 0xb0
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c2da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2dc:	683a      	ldr	r2, [r7, #0]
 800c2de:	88d2      	ldrh	r2, [r2, #6]
 800c2e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	88db      	ldrh	r3, [r3, #6]
 800c2e6:	2b07      	cmp	r3, #7
 800c2e8:	bf28      	it	cs
 800c2ea:	2307      	movcs	r3, #7
 800c2ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	89fa      	ldrh	r2, [r7, #14]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f001 fd89 	bl	800de0c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c2fa:	e090      	b.n	800c41e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	785a      	ldrb	r2, [r3, #1]
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	88db      	ldrh	r3, [r3, #6]
 800c30a:	2b3f      	cmp	r3, #63	; 0x3f
 800c30c:	d803      	bhi.n	800c316 <USBD_CDC_Setup+0xa6>
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	88db      	ldrh	r3, [r3, #6]
 800c312:	b2da      	uxtb	r2, r3
 800c314:	e000      	b.n	800c318 <USBD_CDC_Setup+0xa8>
 800c316:	2240      	movs	r2, #64	; 0x40
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c31e:	6939      	ldr	r1, [r7, #16]
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c326:	461a      	mov	r2, r3
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f001 fd9b 	bl	800de64 <USBD_CtlPrepareRx>
      break;
 800c32e:	e076      	b.n	800c41e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	33b0      	adds	r3, #176	; 0xb0
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4413      	add	r3, r2
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	683a      	ldr	r2, [r7, #0]
 800c344:	7850      	ldrb	r0, [r2, #1]
 800c346:	2200      	movs	r2, #0
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	4798      	blx	r3
      break;
 800c34c:	e067      	b.n	800c41e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	785b      	ldrb	r3, [r3, #1]
 800c352:	2b0b      	cmp	r3, #11
 800c354:	d851      	bhi.n	800c3fa <USBD_CDC_Setup+0x18a>
 800c356:	a201      	add	r2, pc, #4	; (adr r2, 800c35c <USBD_CDC_Setup+0xec>)
 800c358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35c:	0800c38d 	.word	0x0800c38d
 800c360:	0800c409 	.word	0x0800c409
 800c364:	0800c3fb 	.word	0x0800c3fb
 800c368:	0800c3fb 	.word	0x0800c3fb
 800c36c:	0800c3fb 	.word	0x0800c3fb
 800c370:	0800c3fb 	.word	0x0800c3fb
 800c374:	0800c3fb 	.word	0x0800c3fb
 800c378:	0800c3fb 	.word	0x0800c3fb
 800c37c:	0800c3fb 	.word	0x0800c3fb
 800c380:	0800c3fb 	.word	0x0800c3fb
 800c384:	0800c3b7 	.word	0x0800c3b7
 800c388:	0800c3e1 	.word	0x0800c3e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c392:	b2db      	uxtb	r3, r3
 800c394:	2b03      	cmp	r3, #3
 800c396:	d107      	bne.n	800c3a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c398:	f107 030a 	add.w	r3, r7, #10
 800c39c:	2202      	movs	r2, #2
 800c39e:	4619      	mov	r1, r3
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f001 fd33 	bl	800de0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c3a6:	e032      	b.n	800c40e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c3a8:	6839      	ldr	r1, [r7, #0]
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f001 fcbd 	bl	800dd2a <USBD_CtlError>
            ret = USBD_FAIL;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	75fb      	strb	r3, [r7, #23]
          break;
 800c3b4:	e02b      	b.n	800c40e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	2b03      	cmp	r3, #3
 800c3c0:	d107      	bne.n	800c3d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c3c2:	f107 030d 	add.w	r3, r7, #13
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f001 fd1e 	bl	800de0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c3d0:	e01d      	b.n	800c40e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f001 fca8 	bl	800dd2a <USBD_CtlError>
            ret = USBD_FAIL;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	75fb      	strb	r3, [r7, #23]
          break;
 800c3de:	e016      	b.n	800c40e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	2b03      	cmp	r3, #3
 800c3ea:	d00f      	beq.n	800c40c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f001 fc9b 	bl	800dd2a <USBD_CtlError>
            ret = USBD_FAIL;
 800c3f4:	2303      	movs	r3, #3
 800c3f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c3f8:	e008      	b.n	800c40c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c3fa:	6839      	ldr	r1, [r7, #0]
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f001 fc94 	bl	800dd2a <USBD_CtlError>
          ret = USBD_FAIL;
 800c402:	2303      	movs	r3, #3
 800c404:	75fb      	strb	r3, [r7, #23]
          break;
 800c406:	e002      	b.n	800c40e <USBD_CDC_Setup+0x19e>
          break;
 800c408:	bf00      	nop
 800c40a:	e008      	b.n	800c41e <USBD_CDC_Setup+0x1ae>
          break;
 800c40c:	bf00      	nop
      }
      break;
 800c40e:	e006      	b.n	800c41e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c410:	6839      	ldr	r1, [r7, #0]
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f001 fc89 	bl	800dd2a <USBD_CtlError>
      ret = USBD_FAIL;
 800c418:	2303      	movs	r3, #3
 800c41a:	75fb      	strb	r3, [r7, #23]
      break;
 800c41c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c41e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3718      	adds	r7, #24
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	460b      	mov	r3, r1
 800c432:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c43a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	32b0      	adds	r2, #176	; 0xb0
 800c446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c44e:	2303      	movs	r3, #3
 800c450:	e065      	b.n	800c51e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	32b0      	adds	r2, #176	; 0xb0
 800c45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c460:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c462:	78fb      	ldrb	r3, [r7, #3]
 800c464:	f003 020f 	and.w	r2, r3, #15
 800c468:	6879      	ldr	r1, [r7, #4]
 800c46a:	4613      	mov	r3, r2
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	4413      	add	r3, r2
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	440b      	add	r3, r1
 800c474:	3318      	adds	r3, #24
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d02f      	beq.n	800c4dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c47c:	78fb      	ldrb	r3, [r7, #3]
 800c47e:	f003 020f 	and.w	r2, r3, #15
 800c482:	6879      	ldr	r1, [r7, #4]
 800c484:	4613      	mov	r3, r2
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	4413      	add	r3, r2
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	440b      	add	r3, r1
 800c48e:	3318      	adds	r3, #24
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	78fb      	ldrb	r3, [r7, #3]
 800c494:	f003 010f 	and.w	r1, r3, #15
 800c498:	68f8      	ldr	r0, [r7, #12]
 800c49a:	460b      	mov	r3, r1
 800c49c:	00db      	lsls	r3, r3, #3
 800c49e:	440b      	add	r3, r1
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	4403      	add	r3, r0
 800c4a4:	3348      	adds	r3, #72	; 0x48
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	fbb2 f1f3 	udiv	r1, r2, r3
 800c4ac:	fb01 f303 	mul.w	r3, r1, r3
 800c4b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d112      	bne.n	800c4dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c4b6:	78fb      	ldrb	r3, [r7, #3]
 800c4b8:	f003 020f 	and.w	r2, r3, #15
 800c4bc:	6879      	ldr	r1, [r7, #4]
 800c4be:	4613      	mov	r3, r2
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	4413      	add	r3, r2
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	440b      	add	r3, r1
 800c4c8:	3318      	adds	r3, #24
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c4ce:	78f9      	ldrb	r1, [r7, #3]
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f002 f9a6 	bl	800e826 <USBD_LL_Transmit>
 800c4da:	e01f      	b.n	800c51c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	33b0      	adds	r3, #176	; 0xb0
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	4413      	add	r3, r2
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d010      	beq.n	800c51c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	33b0      	adds	r3, #176	; 0xb0
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	68ba      	ldr	r2, [r7, #8]
 800c50e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c518:	78fa      	ldrb	r2, [r7, #3]
 800c51a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b084      	sub	sp, #16
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	460b      	mov	r3, r1
 800c530:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	32b0      	adds	r2, #176	; 0xb0
 800c53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c540:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	32b0      	adds	r2, #176	; 0xb0
 800c54c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d101      	bne.n	800c558 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c554:	2303      	movs	r3, #3
 800c556:	e01a      	b.n	800c58e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c558:	78fb      	ldrb	r3, [r7, #3]
 800c55a:	4619      	mov	r1, r3
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f002 f9a4 	bl	800e8aa <USBD_LL_GetRxDataSize>
 800c562:	4602      	mov	r2, r0
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	33b0      	adds	r3, #176	; 0xb0
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	4413      	add	r3, r2
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c582:	68fa      	ldr	r2, [r7, #12]
 800c584:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c588:	4611      	mov	r1, r2
 800c58a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b084      	sub	sp, #16
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	32b0      	adds	r2, #176	; 0xb0
 800c5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d101      	bne.n	800c5b8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c5b4:	2303      	movs	r3, #3
 800c5b6:	e025      	b.n	800c604 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	33b0      	adds	r3, #176	; 0xb0
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	4413      	add	r3, r2
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d01a      	beq.n	800c602 <USBD_CDC_EP0_RxReady+0x6c>
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c5d2:	2bff      	cmp	r3, #255	; 0xff
 800c5d4:	d015      	beq.n	800c602 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	33b0      	adds	r3, #176	; 0xb0
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	4413      	add	r3, r2
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c5ee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c5f6:	b292      	uxth	r2, r2
 800c5f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	22ff      	movs	r2, #255	; 0xff
 800c5fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c602:	2300      	movs	r3, #0
}
 800c604:	4618      	mov	r0, r3
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b086      	sub	sp, #24
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c614:	2182      	movs	r1, #130	; 0x82
 800c616:	4818      	ldr	r0, [pc, #96]	; (800c678 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c618:	f000 fd4f 	bl	800d0ba <USBD_GetEpDesc>
 800c61c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c61e:	2101      	movs	r1, #1
 800c620:	4815      	ldr	r0, [pc, #84]	; (800c678 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c622:	f000 fd4a 	bl	800d0ba <USBD_GetEpDesc>
 800c626:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c628:	2181      	movs	r1, #129	; 0x81
 800c62a:	4813      	ldr	r0, [pc, #76]	; (800c678 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c62c:	f000 fd45 	bl	800d0ba <USBD_GetEpDesc>
 800c630:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d002      	beq.n	800c63e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	2210      	movs	r2, #16
 800c63c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d006      	beq.n	800c652 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	2200      	movs	r2, #0
 800c648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c64c:	711a      	strb	r2, [r3, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d006      	beq.n	800c666 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2200      	movs	r2, #0
 800c65c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c660:	711a      	strb	r2, [r3, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2243      	movs	r2, #67	; 0x43
 800c66a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c66c:	4b02      	ldr	r3, [pc, #8]	; (800c678 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3718      	adds	r7, #24
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	20000064 	.word	0x20000064

0800c67c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b086      	sub	sp, #24
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c684:	2182      	movs	r1, #130	; 0x82
 800c686:	4818      	ldr	r0, [pc, #96]	; (800c6e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c688:	f000 fd17 	bl	800d0ba <USBD_GetEpDesc>
 800c68c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c68e:	2101      	movs	r1, #1
 800c690:	4815      	ldr	r0, [pc, #84]	; (800c6e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c692:	f000 fd12 	bl	800d0ba <USBD_GetEpDesc>
 800c696:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c698:	2181      	movs	r1, #129	; 0x81
 800c69a:	4813      	ldr	r0, [pc, #76]	; (800c6e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c69c:	f000 fd0d 	bl	800d0ba <USBD_GetEpDesc>
 800c6a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d002      	beq.n	800c6ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	2210      	movs	r2, #16
 800c6ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d006      	beq.n	800c6c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	711a      	strb	r2, [r3, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f042 0202 	orr.w	r2, r2, #2
 800c6c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d006      	beq.n	800c6d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	711a      	strb	r2, [r3, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f042 0202 	orr.w	r2, r2, #2
 800c6d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2243      	movs	r2, #67	; 0x43
 800c6da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c6dc:	4b02      	ldr	r3, [pc, #8]	; (800c6e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3718      	adds	r7, #24
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	20000064 	.word	0x20000064

0800c6ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b086      	sub	sp, #24
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c6f4:	2182      	movs	r1, #130	; 0x82
 800c6f6:	4818      	ldr	r0, [pc, #96]	; (800c758 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c6f8:	f000 fcdf 	bl	800d0ba <USBD_GetEpDesc>
 800c6fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c6fe:	2101      	movs	r1, #1
 800c700:	4815      	ldr	r0, [pc, #84]	; (800c758 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c702:	f000 fcda 	bl	800d0ba <USBD_GetEpDesc>
 800c706:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c708:	2181      	movs	r1, #129	; 0x81
 800c70a:	4813      	ldr	r0, [pc, #76]	; (800c758 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c70c:	f000 fcd5 	bl	800d0ba <USBD_GetEpDesc>
 800c710:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d002      	beq.n	800c71e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	2210      	movs	r2, #16
 800c71c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d006      	beq.n	800c732 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	2200      	movs	r2, #0
 800c728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c72c:	711a      	strb	r2, [r3, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d006      	beq.n	800c746 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2200      	movs	r2, #0
 800c73c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c740:	711a      	strb	r2, [r3, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2243      	movs	r2, #67	; 0x43
 800c74a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c74c:	4b02      	ldr	r3, [pc, #8]	; (800c758 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3718      	adds	r7, #24
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	20000064 	.word	0x20000064

0800c75c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b083      	sub	sp, #12
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	220a      	movs	r2, #10
 800c768:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c76a:	4b03      	ldr	r3, [pc, #12]	; (800c778 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr
 800c778:	20000020 	.word	0x20000020

0800c77c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b083      	sub	sp, #12
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d101      	bne.n	800c790 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c78c:	2303      	movs	r3, #3
 800c78e:	e009      	b.n	800c7a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	33b0      	adds	r3, #176	; 0xb0
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	4413      	add	r3, r2
 800c79e:	683a      	ldr	r2, [r7, #0]
 800c7a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c7a2:	2300      	movs	r3, #0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b087      	sub	sp, #28
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	32b0      	adds	r2, #176	; 0xb0
 800c7c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ca:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d101      	bne.n	800c7d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c7d2:	2303      	movs	r3, #3
 800c7d4:	e008      	b.n	800c7e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	68ba      	ldr	r2, [r7, #8]
 800c7da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	371c      	adds	r7, #28
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	32b0      	adds	r2, #176	; 0xb0
 800c808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c80c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c814:	2303      	movs	r3, #3
 800c816:	e004      	b.n	800c822 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	3714      	adds	r7, #20
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr
	...

0800c830 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	32b0      	adds	r2, #176	; 0xb0
 800c842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c846:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c848:	2301      	movs	r3, #1
 800c84a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	32b0      	adds	r2, #176	; 0xb0
 800c856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d101      	bne.n	800c862 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c85e:	2303      	movs	r3, #3
 800c860:	e025      	b.n	800c8ae <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d11f      	bne.n	800c8ac <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	2201      	movs	r2, #1
 800c870:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c874:	4b10      	ldr	r3, [pc, #64]	; (800c8b8 <USBD_CDC_TransmitPacket+0x88>)
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	f003 020f 	and.w	r2, r3, #15
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	4613      	mov	r3, r2
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	4413      	add	r3, r2
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	4403      	add	r3, r0
 800c88e:	3318      	adds	r3, #24
 800c890:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c892:	4b09      	ldr	r3, [pc, #36]	; (800c8b8 <USBD_CDC_TransmitPacket+0x88>)
 800c894:	7819      	ldrb	r1, [r3, #0]
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f001 ffbf 	bl	800e826 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	200000a7 	.word	0x200000a7

0800c8bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	32b0      	adds	r2, #176	; 0xb0
 800c8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	32b0      	adds	r2, #176	; 0xb0
 800c8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d101      	bne.n	800c8ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c8e6:	2303      	movs	r3, #3
 800c8e8:	e018      	b.n	800c91c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	7c1b      	ldrb	r3, [r3, #16]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d10a      	bne.n	800c908 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8f2:	4b0c      	ldr	r3, [pc, #48]	; (800c924 <USBD_CDC_ReceivePacket+0x68>)
 800c8f4:	7819      	ldrb	r1, [r3, #0]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c8fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f001 ffb1 	bl	800e868 <USBD_LL_PrepareReceive>
 800c906:	e008      	b.n	800c91a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c908:	4b06      	ldr	r3, [pc, #24]	; (800c924 <USBD_CDC_ReceivePacket+0x68>)
 800c90a:	7819      	ldrb	r1, [r3, #0]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c912:	2340      	movs	r3, #64	; 0x40
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f001 ffa7 	bl	800e868 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	200000a8 	.word	0x200000a8

0800c928 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	4613      	mov	r3, r2
 800c934:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d101      	bne.n	800c940 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c93c:	2303      	movs	r3, #3
 800c93e:	e01f      	b.n	800c980 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2200      	movs	r2, #0
 800c944:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2200      	movs	r2, #0
 800c94c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2200      	movs	r2, #0
 800c954:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d003      	beq.n	800c966 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2201      	movs	r2, #1
 800c96a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	79fa      	ldrb	r2, [r7, #7]
 800c972:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c974:	68f8      	ldr	r0, [r7, #12]
 800c976:	f001 fe21 	bl	800e5bc <USBD_LL_Init>
 800c97a:	4603      	mov	r3, r0
 800c97c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c980:	4618      	mov	r0, r3
 800c982:	3718      	adds	r7, #24
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c992:	2300      	movs	r3, #0
 800c994:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d101      	bne.n	800c9a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c99c:	2303      	movs	r3, #3
 800c99e:	e025      	b.n	800c9ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	32ae      	adds	r2, #174	; 0xae
 800c9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00f      	beq.n	800c9dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	32ae      	adds	r2, #174	; 0xae
 800c9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9cc:	f107 020e 	add.w	r2, r7, #14
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	4798      	blx	r3
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c9e2:	1c5a      	adds	r2, r3, #1
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c9ea:	2300      	movs	r3, #0
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3710      	adds	r7, #16
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f001 fe29 	bl	800e654 <USBD_LL_Start>
 800ca02:	4603      	mov	r3, r0
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca14:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	370c      	adds	r7, #12
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr

0800ca22 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b084      	sub	sp, #16
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d009      	beq.n	800ca50 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	78fa      	ldrb	r2, [r7, #3]
 800ca46:	4611      	mov	r1, r2
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	4798      	blx	r3
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b084      	sub	sp, #16
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	460b      	mov	r3, r1
 800ca64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca66:	2300      	movs	r3, #0
 800ca68:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	78fa      	ldrb	r2, [r7, #3]
 800ca74:	4611      	mov	r1, r2
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	4798      	blx	r3
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d001      	beq.n	800ca84 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ca80:	2303      	movs	r3, #3
 800ca82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b084      	sub	sp, #16
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
 800ca96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca9e:	6839      	ldr	r1, [r7, #0]
 800caa0:	4618      	mov	r0, r3
 800caa2:	f001 f908 	bl	800dcb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2201      	movs	r2, #1
 800caaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cab4:	461a      	mov	r2, r3
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cac2:	f003 031f 	and.w	r3, r3, #31
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d01a      	beq.n	800cb00 <USBD_LL_SetupStage+0x72>
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d822      	bhi.n	800cb14 <USBD_LL_SetupStage+0x86>
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d002      	beq.n	800cad8 <USBD_LL_SetupStage+0x4a>
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d00a      	beq.n	800caec <USBD_LL_SetupStage+0x5e>
 800cad6:	e01d      	b.n	800cb14 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cade:	4619      	mov	r1, r3
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 fb5f 	bl	800d1a4 <USBD_StdDevReq>
 800cae6:	4603      	mov	r3, r0
 800cae8:	73fb      	strb	r3, [r7, #15]
      break;
 800caea:	e020      	b.n	800cb2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800caf2:	4619      	mov	r1, r3
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fbc7 	bl	800d288 <USBD_StdItfReq>
 800cafa:	4603      	mov	r3, r0
 800cafc:	73fb      	strb	r3, [r7, #15]
      break;
 800cafe:	e016      	b.n	800cb2e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cb06:	4619      	mov	r1, r3
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fc29 	bl	800d360 <USBD_StdEPReq>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	73fb      	strb	r3, [r7, #15]
      break;
 800cb12:	e00c      	b.n	800cb2e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cb1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	4619      	mov	r1, r3
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f001 fdf6 	bl	800e714 <USBD_LL_StallEP>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	73fb      	strb	r3, [r7, #15]
      break;
 800cb2c:	bf00      	nop
  }

  return ret;
 800cb2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b086      	sub	sp, #24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	460b      	mov	r3, r1
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cb4a:	7afb      	ldrb	r3, [r7, #11]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d16e      	bne.n	800cc2e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cb56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cb5e:	2b03      	cmp	r3, #3
 800cb60:	f040 8098 	bne.w	800cc94 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	689a      	ldr	r2, [r3, #8]
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d913      	bls.n	800cb98 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	689a      	ldr	r2, [r3, #8]
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	1ad2      	subs	r2, r2, r3
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	68da      	ldr	r2, [r3, #12]
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	689b      	ldr	r3, [r3, #8]
 800cb86:	4293      	cmp	r3, r2
 800cb88:	bf28      	it	cs
 800cb8a:	4613      	movcs	r3, r2
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	6879      	ldr	r1, [r7, #4]
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	f001 f984 	bl	800de9e <USBD_CtlContinueRx>
 800cb96:	e07d      	b.n	800cc94 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cb9e:	f003 031f 	and.w	r3, r3, #31
 800cba2:	2b02      	cmp	r3, #2
 800cba4:	d014      	beq.n	800cbd0 <USBD_LL_DataOutStage+0x98>
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d81d      	bhi.n	800cbe6 <USBD_LL_DataOutStage+0xae>
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d002      	beq.n	800cbb4 <USBD_LL_DataOutStage+0x7c>
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d003      	beq.n	800cbba <USBD_LL_DataOutStage+0x82>
 800cbb2:	e018      	b.n	800cbe6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	75bb      	strb	r3, [r7, #22]
            break;
 800cbb8:	e018      	b.n	800cbec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f000 fa5e 	bl	800d086 <USBD_CoreFindIF>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	75bb      	strb	r3, [r7, #22]
            break;
 800cbce:	e00d      	b.n	800cbec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	4619      	mov	r1, r3
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	f000 fa60 	bl	800d0a0 <USBD_CoreFindEP>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	75bb      	strb	r3, [r7, #22]
            break;
 800cbe4:	e002      	b.n	800cbec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	75bb      	strb	r3, [r7, #22]
            break;
 800cbea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cbec:	7dbb      	ldrb	r3, [r7, #22]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d119      	bne.n	800cc26 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	2b03      	cmp	r3, #3
 800cbfc:	d113      	bne.n	800cc26 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cbfe:	7dba      	ldrb	r2, [r7, #22]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	32ae      	adds	r2, #174	; 0xae
 800cc04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc08:	691b      	ldr	r3, [r3, #16]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00b      	beq.n	800cc26 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cc0e:	7dba      	ldrb	r2, [r7, #22]
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cc16:	7dba      	ldrb	r2, [r7, #22]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	32ae      	adds	r2, #174	; 0xae
 800cc1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cc26:	68f8      	ldr	r0, [r7, #12]
 800cc28:	f001 f94a 	bl	800dec0 <USBD_CtlSendStatus>
 800cc2c:	e032      	b.n	800cc94 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cc2e:	7afb      	ldrb	r3, [r7, #11]
 800cc30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	4619      	mov	r1, r3
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f000 fa31 	bl	800d0a0 <USBD_CoreFindEP>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc42:	7dbb      	ldrb	r3, [r7, #22]
 800cc44:	2bff      	cmp	r3, #255	; 0xff
 800cc46:	d025      	beq.n	800cc94 <USBD_LL_DataOutStage+0x15c>
 800cc48:	7dbb      	ldrb	r3, [r7, #22]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d122      	bne.n	800cc94 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	2b03      	cmp	r3, #3
 800cc58:	d117      	bne.n	800cc8a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cc5a:	7dba      	ldrb	r2, [r7, #22]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	32ae      	adds	r2, #174	; 0xae
 800cc60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00f      	beq.n	800cc8a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cc6a:	7dba      	ldrb	r2, [r7, #22]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cc72:	7dba      	ldrb	r2, [r7, #22]
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	32ae      	adds	r2, #174	; 0xae
 800cc78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc7c:	699b      	ldr	r3, [r3, #24]
 800cc7e:	7afa      	ldrb	r2, [r7, #11]
 800cc80:	4611      	mov	r1, r2
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	4798      	blx	r3
 800cc86:	4603      	mov	r3, r0
 800cc88:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cc8a:	7dfb      	ldrb	r3, [r7, #23]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d001      	beq.n	800cc94 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cc90:	7dfb      	ldrb	r3, [r7, #23]
 800cc92:	e000      	b.n	800cc96 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b086      	sub	sp, #24
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	60f8      	str	r0, [r7, #12]
 800cca6:	460b      	mov	r3, r1
 800cca8:	607a      	str	r2, [r7, #4]
 800ccaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ccac:	7afb      	ldrb	r3, [r7, #11]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d16f      	bne.n	800cd92 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	3314      	adds	r3, #20
 800ccb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d15a      	bne.n	800cd78 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	689a      	ldr	r2, [r3, #8]
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d914      	bls.n	800ccf8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	689a      	ldr	r2, [r3, #8]
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	1ad2      	subs	r2, r2, r3
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	461a      	mov	r2, r3
 800cce2:	6879      	ldr	r1, [r7, #4]
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f001 f8ac 	bl	800de42 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccea:	2300      	movs	r3, #0
 800ccec:	2200      	movs	r2, #0
 800ccee:	2100      	movs	r1, #0
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f001 fdb9 	bl	800e868 <USBD_LL_PrepareReceive>
 800ccf6:	e03f      	b.n	800cd78 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	68da      	ldr	r2, [r3, #12]
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d11c      	bne.n	800cd3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	685a      	ldr	r2, [r3, #4]
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d316      	bcc.n	800cd3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	685a      	ldr	r2, [r3, #4]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d20f      	bcs.n	800cd3e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cd1e:	2200      	movs	r2, #0
 800cd20:	2100      	movs	r1, #0
 800cd22:	68f8      	ldr	r0, [r7, #12]
 800cd24:	f001 f88d 	bl	800de42 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd30:	2300      	movs	r3, #0
 800cd32:	2200      	movs	r2, #0
 800cd34:	2100      	movs	r1, #0
 800cd36:	68f8      	ldr	r0, [r7, #12]
 800cd38:	f001 fd96 	bl	800e868 <USBD_LL_PrepareReceive>
 800cd3c:	e01c      	b.n	800cd78 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	2b03      	cmp	r3, #3
 800cd48:	d10f      	bne.n	800cd6a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d009      	beq.n	800cd6a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	68f8      	ldr	r0, [r7, #12]
 800cd68:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd6a:	2180      	movs	r1, #128	; 0x80
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f001 fcd1 	bl	800e714 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	f001 f8b7 	bl	800dee6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d03a      	beq.n	800cdf8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f7ff fe42 	bl	800ca0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cd90:	e032      	b.n	800cdf8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cd92:	7afb      	ldrb	r3, [r7, #11]
 800cd94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	f000 f97f 	bl	800d0a0 <USBD_CoreFindEP>
 800cda2:	4603      	mov	r3, r0
 800cda4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cda6:	7dfb      	ldrb	r3, [r7, #23]
 800cda8:	2bff      	cmp	r3, #255	; 0xff
 800cdaa:	d025      	beq.n	800cdf8 <USBD_LL_DataInStage+0x15a>
 800cdac:	7dfb      	ldrb	r3, [r7, #23]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d122      	bne.n	800cdf8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	2b03      	cmp	r3, #3
 800cdbc:	d11c      	bne.n	800cdf8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cdbe:	7dfa      	ldrb	r2, [r7, #23]
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	32ae      	adds	r2, #174	; 0xae
 800cdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc8:	695b      	ldr	r3, [r3, #20]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d014      	beq.n	800cdf8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cdce:	7dfa      	ldrb	r2, [r7, #23]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cdd6:	7dfa      	ldrb	r2, [r7, #23]
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	32ae      	adds	r2, #174	; 0xae
 800cddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cde0:	695b      	ldr	r3, [r3, #20]
 800cde2:	7afa      	ldrb	r2, [r7, #11]
 800cde4:	4611      	mov	r1, r2
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	4798      	blx	r3
 800cdea:	4603      	mov	r3, r0
 800cdec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cdee:	7dbb      	ldrb	r3, [r7, #22]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d001      	beq.n	800cdf8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cdf4:	7dbb      	ldrb	r3, [r7, #22]
 800cdf6:	e000      	b.n	800cdfa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3718      	adds	r7, #24
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b084      	sub	sp, #16
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2201      	movs	r2, #1
 800ce12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d014      	beq.n	800ce68 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d00e      	beq.n	800ce68 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	6852      	ldr	r2, [r2, #4]
 800ce56:	b2d2      	uxtb	r2, r2
 800ce58:	4611      	mov	r1, r2
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	4798      	blx	r3
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d001      	beq.n	800ce68 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ce64:	2303      	movs	r3, #3
 800ce66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce68:	2340      	movs	r3, #64	; 0x40
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f001 fc0b 	bl	800e68a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2201      	movs	r2, #1
 800ce78:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2240      	movs	r2, #64	; 0x40
 800ce80:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce84:	2340      	movs	r3, #64	; 0x40
 800ce86:	2200      	movs	r2, #0
 800ce88:	2180      	movs	r1, #128	; 0x80
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f001 fbfd 	bl	800e68a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2240      	movs	r2, #64	; 0x40
 800ce9a:	621a      	str	r2, [r3, #32]

  return ret;
 800ce9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cea6:	b480      	push	{r7}
 800cea8:	b083      	sub	sp, #12
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
 800ceae:	460b      	mov	r3, r1
 800ceb0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	78fa      	ldrb	r2, [r7, #3]
 800ceb6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	370c      	adds	r7, #12
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr

0800cec6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cec6:	b480      	push	{r7}
 800cec8:	b083      	sub	sp, #12
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ced4:	b2da      	uxtb	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2204      	movs	r2, #4
 800cee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	370c      	adds	r7, #12
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr

0800cef2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cef2:	b480      	push	{r7}
 800cef4:	b083      	sub	sp, #12
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	2b04      	cmp	r3, #4
 800cf04:	d106      	bne.n	800cf14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cf0c:	b2da      	uxtb	r2, r3
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	370c      	adds	r7, #12
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr

0800cf22 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b082      	sub	sp, #8
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	2b03      	cmp	r3, #3
 800cf34:	d110      	bne.n	800cf58 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00b      	beq.n	800cf58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf46:	69db      	ldr	r3, [r3, #28]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d005      	beq.n	800cf58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf52:	69db      	ldr	r3, [r3, #28]
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b082      	sub	sp, #8
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	32ae      	adds	r2, #174	; 0xae
 800cf78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cf80:	2303      	movs	r3, #3
 800cf82:	e01c      	b.n	800cfbe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	2b03      	cmp	r3, #3
 800cf8e:	d115      	bne.n	800cfbc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	32ae      	adds	r2, #174	; 0xae
 800cf9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf9e:	6a1b      	ldr	r3, [r3, #32]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00b      	beq.n	800cfbc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	32ae      	adds	r2, #174	; 0xae
 800cfae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb2:	6a1b      	ldr	r3, [r3, #32]
 800cfb4:	78fa      	ldrb	r2, [r7, #3]
 800cfb6:	4611      	mov	r1, r2
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b082      	sub	sp, #8
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
 800cfce:	460b      	mov	r3, r1
 800cfd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	32ae      	adds	r2, #174	; 0xae
 800cfdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d101      	bne.n	800cfe8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cfe4:	2303      	movs	r3, #3
 800cfe6:	e01c      	b.n	800d022 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	2b03      	cmp	r3, #3
 800cff2:	d115      	bne.n	800d020 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	32ae      	adds	r2, #174	; 0xae
 800cffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00b      	beq.n	800d020 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	32ae      	adds	r2, #174	; 0xae
 800d012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d018:	78fa      	ldrb	r2, [r7, #3]
 800d01a:	4611      	mov	r1, r2
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3708      	adds	r7, #8
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d02a:	b480      	push	{r7}
 800d02c:	b083      	sub	sp, #12
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d032:	2300      	movs	r3, #0
}
 800d034:	4618      	mov	r0, r3
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d048:	2300      	movs	r3, #0
 800d04a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2201      	movs	r2, #1
 800d050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00e      	beq.n	800d07c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	6852      	ldr	r2, [r2, #4]
 800d06a:	b2d2      	uxtb	r2, r2
 800d06c:	4611      	mov	r1, r2
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	4798      	blx	r3
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d001      	beq.n	800d07c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d078:	2303      	movs	r3, #3
 800d07a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d086:	b480      	push	{r7}
 800d088:	b083      	sub	sp, #12
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	460b      	mov	r3, r1
 800d090:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d092:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d094:	4618      	mov	r0, r3
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b083      	sub	sp, #12
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d0ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	370c      	adds	r7, #12
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b086      	sub	sp, #24
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	885b      	ldrh	r3, [r3, #2]
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d920      	bls.n	800d124 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d0ea:	e013      	b.n	800d114 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d0ec:	f107 030a 	add.w	r3, r7, #10
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	6978      	ldr	r0, [r7, #20]
 800d0f4:	f000 f81b 	bl	800d12e <USBD_GetNextDesc>
 800d0f8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	785b      	ldrb	r3, [r3, #1]
 800d0fe:	2b05      	cmp	r3, #5
 800d100:	d108      	bne.n	800d114 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	789b      	ldrb	r3, [r3, #2]
 800d10a:	78fa      	ldrb	r2, [r7, #3]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d008      	beq.n	800d122 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d110:	2300      	movs	r3, #0
 800d112:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	885b      	ldrh	r3, [r3, #2]
 800d118:	b29a      	uxth	r2, r3
 800d11a:	897b      	ldrh	r3, [r7, #10]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d8e5      	bhi.n	800d0ec <USBD_GetEpDesc+0x32>
 800d120:	e000      	b.n	800d124 <USBD_GetEpDesc+0x6a>
          break;
 800d122:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d124:	693b      	ldr	r3, [r7, #16]
}
 800d126:	4618      	mov	r0, r3
 800d128:	3718      	adds	r7, #24
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}

0800d12e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d12e:	b480      	push	{r7}
 800d130:	b085      	sub	sp, #20
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
 800d136:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	881a      	ldrh	r2, [r3, #0]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	b29b      	uxth	r3, r3
 800d146:	4413      	add	r3, r2
 800d148:	b29a      	uxth	r2, r3
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	461a      	mov	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4413      	add	r3, r2
 800d158:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d15a:	68fb      	ldr	r3, [r7, #12]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3714      	adds	r7, #20
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d168:	b480      	push	{r7}
 800d16a:	b087      	sub	sp, #28
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	3301      	adds	r3, #1
 800d17e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d186:	8a3b      	ldrh	r3, [r7, #16]
 800d188:	021b      	lsls	r3, r3, #8
 800d18a:	b21a      	sxth	r2, r3
 800d18c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d190:	4313      	orrs	r3, r2
 800d192:	b21b      	sxth	r3, r3
 800d194:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d196:	89fb      	ldrh	r3, [r7, #14]
}
 800d198:	4618      	mov	r0, r3
 800d19a:	371c      	adds	r7, #28
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr

0800d1a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1ba:	2b40      	cmp	r3, #64	; 0x40
 800d1bc:	d005      	beq.n	800d1ca <USBD_StdDevReq+0x26>
 800d1be:	2b40      	cmp	r3, #64	; 0x40
 800d1c0:	d857      	bhi.n	800d272 <USBD_StdDevReq+0xce>
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00f      	beq.n	800d1e6 <USBD_StdDevReq+0x42>
 800d1c6:	2b20      	cmp	r3, #32
 800d1c8:	d153      	bne.n	800d272 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	32ae      	adds	r2, #174	; 0xae
 800d1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1d8:	689b      	ldr	r3, [r3, #8]
 800d1da:	6839      	ldr	r1, [r7, #0]
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	4798      	blx	r3
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	73fb      	strb	r3, [r7, #15]
      break;
 800d1e4:	e04a      	b.n	800d27c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	785b      	ldrb	r3, [r3, #1]
 800d1ea:	2b09      	cmp	r3, #9
 800d1ec:	d83b      	bhi.n	800d266 <USBD_StdDevReq+0xc2>
 800d1ee:	a201      	add	r2, pc, #4	; (adr r2, 800d1f4 <USBD_StdDevReq+0x50>)
 800d1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1f4:	0800d249 	.word	0x0800d249
 800d1f8:	0800d25d 	.word	0x0800d25d
 800d1fc:	0800d267 	.word	0x0800d267
 800d200:	0800d253 	.word	0x0800d253
 800d204:	0800d267 	.word	0x0800d267
 800d208:	0800d227 	.word	0x0800d227
 800d20c:	0800d21d 	.word	0x0800d21d
 800d210:	0800d267 	.word	0x0800d267
 800d214:	0800d23f 	.word	0x0800d23f
 800d218:	0800d231 	.word	0x0800d231
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d21c:	6839      	ldr	r1, [r7, #0]
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 fa3c 	bl	800d69c <USBD_GetDescriptor>
          break;
 800d224:	e024      	b.n	800d270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d226:	6839      	ldr	r1, [r7, #0]
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 fba1 	bl	800d970 <USBD_SetAddress>
          break;
 800d22e:	e01f      	b.n	800d270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d230:	6839      	ldr	r1, [r7, #0]
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 fbe0 	bl	800d9f8 <USBD_SetConfig>
 800d238:	4603      	mov	r3, r0
 800d23a:	73fb      	strb	r3, [r7, #15]
          break;
 800d23c:	e018      	b.n	800d270 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d23e:	6839      	ldr	r1, [r7, #0]
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 fc83 	bl	800db4c <USBD_GetConfig>
          break;
 800d246:	e013      	b.n	800d270 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d248:	6839      	ldr	r1, [r7, #0]
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 fcb4 	bl	800dbb8 <USBD_GetStatus>
          break;
 800d250:	e00e      	b.n	800d270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 fce3 	bl	800dc20 <USBD_SetFeature>
          break;
 800d25a:	e009      	b.n	800d270 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d25c:	6839      	ldr	r1, [r7, #0]
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 fd07 	bl	800dc72 <USBD_ClrFeature>
          break;
 800d264:	e004      	b.n	800d270 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d266:	6839      	ldr	r1, [r7, #0]
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fd5e 	bl	800dd2a <USBD_CtlError>
          break;
 800d26e:	bf00      	nop
      }
      break;
 800d270:	e004      	b.n	800d27c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d272:	6839      	ldr	r1, [r7, #0]
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 fd58 	bl	800dd2a <USBD_CtlError>
      break;
 800d27a:	bf00      	nop
  }

  return ret;
 800d27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3710      	adds	r7, #16
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop

0800d288 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d292:	2300      	movs	r3, #0
 800d294:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d29e:	2b40      	cmp	r3, #64	; 0x40
 800d2a0:	d005      	beq.n	800d2ae <USBD_StdItfReq+0x26>
 800d2a2:	2b40      	cmp	r3, #64	; 0x40
 800d2a4:	d852      	bhi.n	800d34c <USBD_StdItfReq+0xc4>
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d001      	beq.n	800d2ae <USBD_StdItfReq+0x26>
 800d2aa:	2b20      	cmp	r3, #32
 800d2ac:	d14e      	bne.n	800d34c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	2b02      	cmp	r3, #2
 800d2ba:	d840      	bhi.n	800d33e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	889b      	ldrh	r3, [r3, #4]
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d836      	bhi.n	800d334 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	889b      	ldrh	r3, [r3, #4]
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f7ff fed9 	bl	800d086 <USBD_CoreFindIF>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2d8:	7bbb      	ldrb	r3, [r7, #14]
 800d2da:	2bff      	cmp	r3, #255	; 0xff
 800d2dc:	d01d      	beq.n	800d31a <USBD_StdItfReq+0x92>
 800d2de:	7bbb      	ldrb	r3, [r7, #14]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d11a      	bne.n	800d31a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d2e4:	7bba      	ldrb	r2, [r7, #14]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	32ae      	adds	r2, #174	; 0xae
 800d2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00f      	beq.n	800d314 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d2f4:	7bba      	ldrb	r2, [r7, #14]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d2fc:	7bba      	ldrb	r2, [r7, #14]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	32ae      	adds	r2, #174	; 0xae
 800d302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	6839      	ldr	r1, [r7, #0]
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	4798      	blx	r3
 800d30e:	4603      	mov	r3, r0
 800d310:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d312:	e004      	b.n	800d31e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d314:	2303      	movs	r3, #3
 800d316:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d318:	e001      	b.n	800d31e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d31a:	2303      	movs	r3, #3
 800d31c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	88db      	ldrh	r3, [r3, #6]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d110      	bne.n	800d348 <USBD_StdItfReq+0xc0>
 800d326:	7bfb      	ldrb	r3, [r7, #15]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10d      	bne.n	800d348 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 fdc7 	bl	800dec0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d332:	e009      	b.n	800d348 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d334:	6839      	ldr	r1, [r7, #0]
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 fcf7 	bl	800dd2a <USBD_CtlError>
          break;
 800d33c:	e004      	b.n	800d348 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d33e:	6839      	ldr	r1, [r7, #0]
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f000 fcf2 	bl	800dd2a <USBD_CtlError>
          break;
 800d346:	e000      	b.n	800d34a <USBD_StdItfReq+0xc2>
          break;
 800d348:	bf00      	nop
      }
      break;
 800d34a:	e004      	b.n	800d356 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d34c:	6839      	ldr	r1, [r7, #0]
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 fceb 	bl	800dd2a <USBD_CtlError>
      break;
 800d354:	bf00      	nop
  }

  return ret;
 800d356:	7bfb      	ldrb	r3, [r7, #15]
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d36a:	2300      	movs	r3, #0
 800d36c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	889b      	ldrh	r3, [r3, #4]
 800d372:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d37c:	2b40      	cmp	r3, #64	; 0x40
 800d37e:	d007      	beq.n	800d390 <USBD_StdEPReq+0x30>
 800d380:	2b40      	cmp	r3, #64	; 0x40
 800d382:	f200 817f 	bhi.w	800d684 <USBD_StdEPReq+0x324>
 800d386:	2b00      	cmp	r3, #0
 800d388:	d02a      	beq.n	800d3e0 <USBD_StdEPReq+0x80>
 800d38a:	2b20      	cmp	r3, #32
 800d38c:	f040 817a 	bne.w	800d684 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d390:	7bbb      	ldrb	r3, [r7, #14]
 800d392:	4619      	mov	r1, r3
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7ff fe83 	bl	800d0a0 <USBD_CoreFindEP>
 800d39a:	4603      	mov	r3, r0
 800d39c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d39e:	7b7b      	ldrb	r3, [r7, #13]
 800d3a0:	2bff      	cmp	r3, #255	; 0xff
 800d3a2:	f000 8174 	beq.w	800d68e <USBD_StdEPReq+0x32e>
 800d3a6:	7b7b      	ldrb	r3, [r7, #13]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f040 8170 	bne.w	800d68e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d3ae:	7b7a      	ldrb	r2, [r7, #13]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d3b6:	7b7a      	ldrb	r2, [r7, #13]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	32ae      	adds	r2, #174	; 0xae
 800d3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f000 8163 	beq.w	800d68e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d3c8:	7b7a      	ldrb	r2, [r7, #13]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	32ae      	adds	r2, #174	; 0xae
 800d3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d2:	689b      	ldr	r3, [r3, #8]
 800d3d4:	6839      	ldr	r1, [r7, #0]
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	4798      	blx	r3
 800d3da:	4603      	mov	r3, r0
 800d3dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d3de:	e156      	b.n	800d68e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	785b      	ldrb	r3, [r3, #1]
 800d3e4:	2b03      	cmp	r3, #3
 800d3e6:	d008      	beq.n	800d3fa <USBD_StdEPReq+0x9a>
 800d3e8:	2b03      	cmp	r3, #3
 800d3ea:	f300 8145 	bgt.w	800d678 <USBD_StdEPReq+0x318>
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f000 809b 	beq.w	800d52a <USBD_StdEPReq+0x1ca>
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d03c      	beq.n	800d472 <USBD_StdEPReq+0x112>
 800d3f8:	e13e      	b.n	800d678 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d400:	b2db      	uxtb	r3, r3
 800d402:	2b02      	cmp	r3, #2
 800d404:	d002      	beq.n	800d40c <USBD_StdEPReq+0xac>
 800d406:	2b03      	cmp	r3, #3
 800d408:	d016      	beq.n	800d438 <USBD_StdEPReq+0xd8>
 800d40a:	e02c      	b.n	800d466 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d40c:	7bbb      	ldrb	r3, [r7, #14]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d00d      	beq.n	800d42e <USBD_StdEPReq+0xce>
 800d412:	7bbb      	ldrb	r3, [r7, #14]
 800d414:	2b80      	cmp	r3, #128	; 0x80
 800d416:	d00a      	beq.n	800d42e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d418:	7bbb      	ldrb	r3, [r7, #14]
 800d41a:	4619      	mov	r1, r3
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f001 f979 	bl	800e714 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d422:	2180      	movs	r1, #128	; 0x80
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f001 f975 	bl	800e714 <USBD_LL_StallEP>
 800d42a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d42c:	e020      	b.n	800d470 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d42e:	6839      	ldr	r1, [r7, #0]
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 fc7a 	bl	800dd2a <USBD_CtlError>
              break;
 800d436:	e01b      	b.n	800d470 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	885b      	ldrh	r3, [r3, #2]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10e      	bne.n	800d45e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d440:	7bbb      	ldrb	r3, [r7, #14]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00b      	beq.n	800d45e <USBD_StdEPReq+0xfe>
 800d446:	7bbb      	ldrb	r3, [r7, #14]
 800d448:	2b80      	cmp	r3, #128	; 0x80
 800d44a:	d008      	beq.n	800d45e <USBD_StdEPReq+0xfe>
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	88db      	ldrh	r3, [r3, #6]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d104      	bne.n	800d45e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d454:	7bbb      	ldrb	r3, [r7, #14]
 800d456:	4619      	mov	r1, r3
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f001 f95b 	bl	800e714 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f000 fd2e 	bl	800dec0 <USBD_CtlSendStatus>

              break;
 800d464:	e004      	b.n	800d470 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d466:	6839      	ldr	r1, [r7, #0]
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 fc5e 	bl	800dd2a <USBD_CtlError>
              break;
 800d46e:	bf00      	nop
          }
          break;
 800d470:	e107      	b.n	800d682 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	2b02      	cmp	r3, #2
 800d47c:	d002      	beq.n	800d484 <USBD_StdEPReq+0x124>
 800d47e:	2b03      	cmp	r3, #3
 800d480:	d016      	beq.n	800d4b0 <USBD_StdEPReq+0x150>
 800d482:	e04b      	b.n	800d51c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d484:	7bbb      	ldrb	r3, [r7, #14]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00d      	beq.n	800d4a6 <USBD_StdEPReq+0x146>
 800d48a:	7bbb      	ldrb	r3, [r7, #14]
 800d48c:	2b80      	cmp	r3, #128	; 0x80
 800d48e:	d00a      	beq.n	800d4a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d490:	7bbb      	ldrb	r3, [r7, #14]
 800d492:	4619      	mov	r1, r3
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f001 f93d 	bl	800e714 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d49a:	2180      	movs	r1, #128	; 0x80
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f001 f939 	bl	800e714 <USBD_LL_StallEP>
 800d4a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d4a4:	e040      	b.n	800d528 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d4a6:	6839      	ldr	r1, [r7, #0]
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 fc3e 	bl	800dd2a <USBD_CtlError>
              break;
 800d4ae:	e03b      	b.n	800d528 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	885b      	ldrh	r3, [r3, #2]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d136      	bne.n	800d526 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d4b8:	7bbb      	ldrb	r3, [r7, #14]
 800d4ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d004      	beq.n	800d4cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d4c2:	7bbb      	ldrb	r3, [r7, #14]
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f001 f943 	bl	800e752 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f000 fcf7 	bl	800dec0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d4d2:	7bbb      	ldrb	r3, [r7, #14]
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f7ff fde2 	bl	800d0a0 <USBD_CoreFindEP>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d4e0:	7b7b      	ldrb	r3, [r7, #13]
 800d4e2:	2bff      	cmp	r3, #255	; 0xff
 800d4e4:	d01f      	beq.n	800d526 <USBD_StdEPReq+0x1c6>
 800d4e6:	7b7b      	ldrb	r3, [r7, #13]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d11c      	bne.n	800d526 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d4ec:	7b7a      	ldrb	r2, [r7, #13]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d4f4:	7b7a      	ldrb	r2, [r7, #13]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	32ae      	adds	r2, #174	; 0xae
 800d4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d010      	beq.n	800d526 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d504:	7b7a      	ldrb	r2, [r7, #13]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	32ae      	adds	r2, #174	; 0xae
 800d50a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d50e:	689b      	ldr	r3, [r3, #8]
 800d510:	6839      	ldr	r1, [r7, #0]
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	4798      	blx	r3
 800d516:	4603      	mov	r3, r0
 800d518:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d51a:	e004      	b.n	800d526 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d51c:	6839      	ldr	r1, [r7, #0]
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 fc03 	bl	800dd2a <USBD_CtlError>
              break;
 800d524:	e000      	b.n	800d528 <USBD_StdEPReq+0x1c8>
              break;
 800d526:	bf00      	nop
          }
          break;
 800d528:	e0ab      	b.n	800d682 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d530:	b2db      	uxtb	r3, r3
 800d532:	2b02      	cmp	r3, #2
 800d534:	d002      	beq.n	800d53c <USBD_StdEPReq+0x1dc>
 800d536:	2b03      	cmp	r3, #3
 800d538:	d032      	beq.n	800d5a0 <USBD_StdEPReq+0x240>
 800d53a:	e097      	b.n	800d66c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d53c:	7bbb      	ldrb	r3, [r7, #14]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d007      	beq.n	800d552 <USBD_StdEPReq+0x1f2>
 800d542:	7bbb      	ldrb	r3, [r7, #14]
 800d544:	2b80      	cmp	r3, #128	; 0x80
 800d546:	d004      	beq.n	800d552 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d548:	6839      	ldr	r1, [r7, #0]
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 fbed 	bl	800dd2a <USBD_CtlError>
                break;
 800d550:	e091      	b.n	800d676 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d556:	2b00      	cmp	r3, #0
 800d558:	da0b      	bge.n	800d572 <USBD_StdEPReq+0x212>
 800d55a:	7bbb      	ldrb	r3, [r7, #14]
 800d55c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d560:	4613      	mov	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	3310      	adds	r3, #16
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	4413      	add	r3, r2
 800d56e:	3304      	adds	r3, #4
 800d570:	e00b      	b.n	800d58a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d572:	7bbb      	ldrb	r3, [r7, #14]
 800d574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d578:	4613      	mov	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	4413      	add	r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	4413      	add	r3, r2
 800d588:	3304      	adds	r3, #4
 800d58a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	2200      	movs	r2, #0
 800d590:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	2202      	movs	r2, #2
 800d596:	4619      	mov	r1, r3
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 fc37 	bl	800de0c <USBD_CtlSendData>
              break;
 800d59e:	e06a      	b.n	800d676 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d5a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	da11      	bge.n	800d5cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d5a8:	7bbb      	ldrb	r3, [r7, #14]
 800d5aa:	f003 020f 	and.w	r2, r3, #15
 800d5ae:	6879      	ldr	r1, [r7, #4]
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	4413      	add	r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	440b      	add	r3, r1
 800d5ba:	3324      	adds	r3, #36	; 0x24
 800d5bc:	881b      	ldrh	r3, [r3, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d117      	bne.n	800d5f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d5c2:	6839      	ldr	r1, [r7, #0]
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 fbb0 	bl	800dd2a <USBD_CtlError>
                  break;
 800d5ca:	e054      	b.n	800d676 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d5cc:	7bbb      	ldrb	r3, [r7, #14]
 800d5ce:	f003 020f 	and.w	r2, r3, #15
 800d5d2:	6879      	ldr	r1, [r7, #4]
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	4413      	add	r3, r2
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	440b      	add	r3, r1
 800d5de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d5e2:	881b      	ldrh	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d104      	bne.n	800d5f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d5e8:	6839      	ldr	r1, [r7, #0]
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 fb9d 	bl	800dd2a <USBD_CtlError>
                  break;
 800d5f0:	e041      	b.n	800d676 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	da0b      	bge.n	800d612 <USBD_StdEPReq+0x2b2>
 800d5fa:	7bbb      	ldrb	r3, [r7, #14]
 800d5fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d600:	4613      	mov	r3, r2
 800d602:	009b      	lsls	r3, r3, #2
 800d604:	4413      	add	r3, r2
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	3310      	adds	r3, #16
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	4413      	add	r3, r2
 800d60e:	3304      	adds	r3, #4
 800d610:	e00b      	b.n	800d62a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d612:	7bbb      	ldrb	r3, [r7, #14]
 800d614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d618:	4613      	mov	r3, r2
 800d61a:	009b      	lsls	r3, r3, #2
 800d61c:	4413      	add	r3, r2
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	4413      	add	r3, r2
 800d628:	3304      	adds	r3, #4
 800d62a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d62c:	7bbb      	ldrb	r3, [r7, #14]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d002      	beq.n	800d638 <USBD_StdEPReq+0x2d8>
 800d632:	7bbb      	ldrb	r3, [r7, #14]
 800d634:	2b80      	cmp	r3, #128	; 0x80
 800d636:	d103      	bne.n	800d640 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	2200      	movs	r2, #0
 800d63c:	601a      	str	r2, [r3, #0]
 800d63e:	e00e      	b.n	800d65e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d640:	7bbb      	ldrb	r3, [r7, #14]
 800d642:	4619      	mov	r1, r3
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f001 f8a3 	bl	800e790 <USBD_LL_IsStallEP>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d003      	beq.n	800d658 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	2201      	movs	r2, #1
 800d654:	601a      	str	r2, [r3, #0]
 800d656:	e002      	b.n	800d65e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	2200      	movs	r2, #0
 800d65c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	2202      	movs	r2, #2
 800d662:	4619      	mov	r1, r3
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 fbd1 	bl	800de0c <USBD_CtlSendData>
              break;
 800d66a:	e004      	b.n	800d676 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d66c:	6839      	ldr	r1, [r7, #0]
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 fb5b 	bl	800dd2a <USBD_CtlError>
              break;
 800d674:	bf00      	nop
          }
          break;
 800d676:	e004      	b.n	800d682 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d678:	6839      	ldr	r1, [r7, #0]
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 fb55 	bl	800dd2a <USBD_CtlError>
          break;
 800d680:	bf00      	nop
      }
      break;
 800d682:	e005      	b.n	800d690 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d684:	6839      	ldr	r1, [r7, #0]
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 fb4f 	bl	800dd2a <USBD_CtlError>
      break;
 800d68c:	e000      	b.n	800d690 <USBD_StdEPReq+0x330>
      break;
 800d68e:	bf00      	nop
  }

  return ret;
 800d690:	7bfb      	ldrb	r3, [r7, #15]
}
 800d692:	4618      	mov	r0, r3
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
	...

0800d69c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	885b      	ldrh	r3, [r3, #2]
 800d6b6:	0a1b      	lsrs	r3, r3, #8
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	2b06      	cmp	r3, #6
 800d6be:	f200 8128 	bhi.w	800d912 <USBD_GetDescriptor+0x276>
 800d6c2:	a201      	add	r2, pc, #4	; (adr r2, 800d6c8 <USBD_GetDescriptor+0x2c>)
 800d6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c8:	0800d6e5 	.word	0x0800d6e5
 800d6cc:	0800d6fd 	.word	0x0800d6fd
 800d6d0:	0800d73d 	.word	0x0800d73d
 800d6d4:	0800d913 	.word	0x0800d913
 800d6d8:	0800d913 	.word	0x0800d913
 800d6dc:	0800d8b3 	.word	0x0800d8b3
 800d6e0:	0800d8df 	.word	0x0800d8df
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	7c12      	ldrb	r2, [r2, #16]
 800d6f0:	f107 0108 	add.w	r1, r7, #8
 800d6f4:	4610      	mov	r0, r2
 800d6f6:	4798      	blx	r3
 800d6f8:	60f8      	str	r0, [r7, #12]
      break;
 800d6fa:	e112      	b.n	800d922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	7c1b      	ldrb	r3, [r3, #16]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10d      	bne.n	800d720 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d70c:	f107 0208 	add.w	r2, r7, #8
 800d710:	4610      	mov	r0, r2
 800d712:	4798      	blx	r3
 800d714:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	3301      	adds	r3, #1
 800d71a:	2202      	movs	r2, #2
 800d71c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d71e:	e100      	b.n	800d922 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d728:	f107 0208 	add.w	r2, r7, #8
 800d72c:	4610      	mov	r0, r2
 800d72e:	4798      	blx	r3
 800d730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	3301      	adds	r3, #1
 800d736:	2202      	movs	r2, #2
 800d738:	701a      	strb	r2, [r3, #0]
      break;
 800d73a:	e0f2      	b.n	800d922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	885b      	ldrh	r3, [r3, #2]
 800d740:	b2db      	uxtb	r3, r3
 800d742:	2b05      	cmp	r3, #5
 800d744:	f200 80ac 	bhi.w	800d8a0 <USBD_GetDescriptor+0x204>
 800d748:	a201      	add	r2, pc, #4	; (adr r2, 800d750 <USBD_GetDescriptor+0xb4>)
 800d74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d74e:	bf00      	nop
 800d750:	0800d769 	.word	0x0800d769
 800d754:	0800d79d 	.word	0x0800d79d
 800d758:	0800d7d1 	.word	0x0800d7d1
 800d75c:	0800d805 	.word	0x0800d805
 800d760:	0800d839 	.word	0x0800d839
 800d764:	0800d86d 	.word	0x0800d86d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00b      	beq.n	800d78c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	7c12      	ldrb	r2, [r2, #16]
 800d780:	f107 0108 	add.w	r1, r7, #8
 800d784:	4610      	mov	r0, r2
 800d786:	4798      	blx	r3
 800d788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d78a:	e091      	b.n	800d8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d78c:	6839      	ldr	r1, [r7, #0]
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 facb 	bl	800dd2a <USBD_CtlError>
            err++;
 800d794:	7afb      	ldrb	r3, [r7, #11]
 800d796:	3301      	adds	r3, #1
 800d798:	72fb      	strb	r3, [r7, #11]
          break;
 800d79a:	e089      	b.n	800d8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d00b      	beq.n	800d7c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	7c12      	ldrb	r2, [r2, #16]
 800d7b4:	f107 0108 	add.w	r1, r7, #8
 800d7b8:	4610      	mov	r0, r2
 800d7ba:	4798      	blx	r3
 800d7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7be:	e077      	b.n	800d8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7c0:	6839      	ldr	r1, [r7, #0]
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 fab1 	bl	800dd2a <USBD_CtlError>
            err++;
 800d7c8:	7afb      	ldrb	r3, [r7, #11]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	72fb      	strb	r3, [r7, #11]
          break;
 800d7ce:	e06f      	b.n	800d8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7d6:	68db      	ldr	r3, [r3, #12]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00b      	beq.n	800d7f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	7c12      	ldrb	r2, [r2, #16]
 800d7e8:	f107 0108 	add.w	r1, r7, #8
 800d7ec:	4610      	mov	r0, r2
 800d7ee:	4798      	blx	r3
 800d7f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7f2:	e05d      	b.n	800d8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7f4:	6839      	ldr	r1, [r7, #0]
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 fa97 	bl	800dd2a <USBD_CtlError>
            err++;
 800d7fc:	7afb      	ldrb	r3, [r7, #11]
 800d7fe:	3301      	adds	r3, #1
 800d800:	72fb      	strb	r3, [r7, #11]
          break;
 800d802:	e055      	b.n	800d8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d80a:	691b      	ldr	r3, [r3, #16]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00b      	beq.n	800d828 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d816:	691b      	ldr	r3, [r3, #16]
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	7c12      	ldrb	r2, [r2, #16]
 800d81c:	f107 0108 	add.w	r1, r7, #8
 800d820:	4610      	mov	r0, r2
 800d822:	4798      	blx	r3
 800d824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d826:	e043      	b.n	800d8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d828:	6839      	ldr	r1, [r7, #0]
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f000 fa7d 	bl	800dd2a <USBD_CtlError>
            err++;
 800d830:	7afb      	ldrb	r3, [r7, #11]
 800d832:	3301      	adds	r3, #1
 800d834:	72fb      	strb	r3, [r7, #11]
          break;
 800d836:	e03b      	b.n	800d8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d83e:	695b      	ldr	r3, [r3, #20]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d00b      	beq.n	800d85c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d84a:	695b      	ldr	r3, [r3, #20]
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	7c12      	ldrb	r2, [r2, #16]
 800d850:	f107 0108 	add.w	r1, r7, #8
 800d854:	4610      	mov	r0, r2
 800d856:	4798      	blx	r3
 800d858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d85a:	e029      	b.n	800d8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d85c:	6839      	ldr	r1, [r7, #0]
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 fa63 	bl	800dd2a <USBD_CtlError>
            err++;
 800d864:	7afb      	ldrb	r3, [r7, #11]
 800d866:	3301      	adds	r3, #1
 800d868:	72fb      	strb	r3, [r7, #11]
          break;
 800d86a:	e021      	b.n	800d8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d872:	699b      	ldr	r3, [r3, #24]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d00b      	beq.n	800d890 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d87e:	699b      	ldr	r3, [r3, #24]
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	7c12      	ldrb	r2, [r2, #16]
 800d884:	f107 0108 	add.w	r1, r7, #8
 800d888:	4610      	mov	r0, r2
 800d88a:	4798      	blx	r3
 800d88c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d88e:	e00f      	b.n	800d8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d890:	6839      	ldr	r1, [r7, #0]
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 fa49 	bl	800dd2a <USBD_CtlError>
            err++;
 800d898:	7afb      	ldrb	r3, [r7, #11]
 800d89a:	3301      	adds	r3, #1
 800d89c:	72fb      	strb	r3, [r7, #11]
          break;
 800d89e:	e007      	b.n	800d8b0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d8a0:	6839      	ldr	r1, [r7, #0]
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 fa41 	bl	800dd2a <USBD_CtlError>
          err++;
 800d8a8:	7afb      	ldrb	r3, [r7, #11]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d8ae:	bf00      	nop
      }
      break;
 800d8b0:	e037      	b.n	800d922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	7c1b      	ldrb	r3, [r3, #16]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d109      	bne.n	800d8ce <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8c2:	f107 0208 	add.w	r2, r7, #8
 800d8c6:	4610      	mov	r0, r2
 800d8c8:	4798      	blx	r3
 800d8ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8cc:	e029      	b.n	800d922 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d8ce:	6839      	ldr	r1, [r7, #0]
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 fa2a 	bl	800dd2a <USBD_CtlError>
        err++;
 800d8d6:	7afb      	ldrb	r3, [r7, #11]
 800d8d8:	3301      	adds	r3, #1
 800d8da:	72fb      	strb	r3, [r7, #11]
      break;
 800d8dc:	e021      	b.n	800d922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	7c1b      	ldrb	r3, [r3, #16]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d10d      	bne.n	800d902 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ee:	f107 0208 	add.w	r2, r7, #8
 800d8f2:	4610      	mov	r0, r2
 800d8f4:	4798      	blx	r3
 800d8f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	2207      	movs	r2, #7
 800d8fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d900:	e00f      	b.n	800d922 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d902:	6839      	ldr	r1, [r7, #0]
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f000 fa10 	bl	800dd2a <USBD_CtlError>
        err++;
 800d90a:	7afb      	ldrb	r3, [r7, #11]
 800d90c:	3301      	adds	r3, #1
 800d90e:	72fb      	strb	r3, [r7, #11]
      break;
 800d910:	e007      	b.n	800d922 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d912:	6839      	ldr	r1, [r7, #0]
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fa08 	bl	800dd2a <USBD_CtlError>
      err++;
 800d91a:	7afb      	ldrb	r3, [r7, #11]
 800d91c:	3301      	adds	r3, #1
 800d91e:	72fb      	strb	r3, [r7, #11]
      break;
 800d920:	bf00      	nop
  }

  if (err != 0U)
 800d922:	7afb      	ldrb	r3, [r7, #11]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d11e      	bne.n	800d966 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	88db      	ldrh	r3, [r3, #6]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d016      	beq.n	800d95e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d930:	893b      	ldrh	r3, [r7, #8]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d00e      	beq.n	800d954 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	88da      	ldrh	r2, [r3, #6]
 800d93a:	893b      	ldrh	r3, [r7, #8]
 800d93c:	4293      	cmp	r3, r2
 800d93e:	bf28      	it	cs
 800d940:	4613      	movcs	r3, r2
 800d942:	b29b      	uxth	r3, r3
 800d944:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d946:	893b      	ldrh	r3, [r7, #8]
 800d948:	461a      	mov	r2, r3
 800d94a:	68f9      	ldr	r1, [r7, #12]
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 fa5d 	bl	800de0c <USBD_CtlSendData>
 800d952:	e009      	b.n	800d968 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d954:	6839      	ldr	r1, [r7, #0]
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f9e7 	bl	800dd2a <USBD_CtlError>
 800d95c:	e004      	b.n	800d968 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 faae 	bl	800dec0 <USBD_CtlSendStatus>
 800d964:	e000      	b.n	800d968 <USBD_GetDescriptor+0x2cc>
    return;
 800d966:	bf00      	nop
  }
}
 800d968:	3710      	adds	r7, #16
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop

0800d970 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	889b      	ldrh	r3, [r3, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d131      	bne.n	800d9e6 <USBD_SetAddress+0x76>
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	88db      	ldrh	r3, [r3, #6]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d12d      	bne.n	800d9e6 <USBD_SetAddress+0x76>
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	885b      	ldrh	r3, [r3, #2]
 800d98e:	2b7f      	cmp	r3, #127	; 0x7f
 800d990:	d829      	bhi.n	800d9e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	885b      	ldrh	r3, [r3, #2]
 800d996:	b2db      	uxtb	r3, r3
 800d998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d99c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	2b03      	cmp	r3, #3
 800d9a8:	d104      	bne.n	800d9b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d9aa:	6839      	ldr	r1, [r7, #0]
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 f9bc 	bl	800dd2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9b2:	e01d      	b.n	800d9f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	7bfa      	ldrb	r2, [r7, #15]
 800d9b8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d9bc:	7bfb      	ldrb	r3, [r7, #15]
 800d9be:	4619      	mov	r1, r3
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 ff11 	bl	800e7e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fa7a 	bl	800dec0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d9cc:	7bfb      	ldrb	r3, [r7, #15]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d004      	beq.n	800d9dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2202      	movs	r2, #2
 800d9d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9da:	e009      	b.n	800d9f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9e4:	e004      	b.n	800d9f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 f99e 	bl	800dd2a <USBD_CtlError>
  }
}
 800d9ee:	bf00      	nop
 800d9f0:	bf00      	nop
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da02:	2300      	movs	r3, #0
 800da04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	885b      	ldrh	r3, [r3, #2]
 800da0a:	b2da      	uxtb	r2, r3
 800da0c:	4b4e      	ldr	r3, [pc, #312]	; (800db48 <USBD_SetConfig+0x150>)
 800da0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800da10:	4b4d      	ldr	r3, [pc, #308]	; (800db48 <USBD_SetConfig+0x150>)
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	2b01      	cmp	r3, #1
 800da16:	d905      	bls.n	800da24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800da18:	6839      	ldr	r1, [r7, #0]
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 f985 	bl	800dd2a <USBD_CtlError>
    return USBD_FAIL;
 800da20:	2303      	movs	r3, #3
 800da22:	e08c      	b.n	800db3e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	2b02      	cmp	r3, #2
 800da2e:	d002      	beq.n	800da36 <USBD_SetConfig+0x3e>
 800da30:	2b03      	cmp	r3, #3
 800da32:	d029      	beq.n	800da88 <USBD_SetConfig+0x90>
 800da34:	e075      	b.n	800db22 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800da36:	4b44      	ldr	r3, [pc, #272]	; (800db48 <USBD_SetConfig+0x150>)
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d020      	beq.n	800da80 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800da3e:	4b42      	ldr	r3, [pc, #264]	; (800db48 <USBD_SetConfig+0x150>)
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	461a      	mov	r2, r3
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800da48:	4b3f      	ldr	r3, [pc, #252]	; (800db48 <USBD_SetConfig+0x150>)
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	4619      	mov	r1, r3
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7fe ffe7 	bl	800ca22 <USBD_SetClassConfig>
 800da54:	4603      	mov	r3, r0
 800da56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800da58:	7bfb      	ldrb	r3, [r7, #15]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d008      	beq.n	800da70 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800da5e:	6839      	ldr	r1, [r7, #0]
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 f962 	bl	800dd2a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2202      	movs	r2, #2
 800da6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da6e:	e065      	b.n	800db3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 fa25 	bl	800dec0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2203      	movs	r2, #3
 800da7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800da7e:	e05d      	b.n	800db3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 fa1d 	bl	800dec0 <USBD_CtlSendStatus>
      break;
 800da86:	e059      	b.n	800db3c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800da88:	4b2f      	ldr	r3, [pc, #188]	; (800db48 <USBD_SetConfig+0x150>)
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d112      	bne.n	800dab6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2202      	movs	r2, #2
 800da94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800da98:	4b2b      	ldr	r3, [pc, #172]	; (800db48 <USBD_SetConfig+0x150>)
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	461a      	mov	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800daa2:	4b29      	ldr	r3, [pc, #164]	; (800db48 <USBD_SetConfig+0x150>)
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	4619      	mov	r1, r3
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7fe ffd6 	bl	800ca5a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 fa06 	bl	800dec0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dab4:	e042      	b.n	800db3c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dab6:	4b24      	ldr	r3, [pc, #144]	; (800db48 <USBD_SetConfig+0x150>)
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	461a      	mov	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d02a      	beq.n	800db1a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	4619      	mov	r1, r3
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f7fe ffc4 	bl	800ca5a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dad2:	4b1d      	ldr	r3, [pc, #116]	; (800db48 <USBD_SetConfig+0x150>)
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	461a      	mov	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dadc:	4b1a      	ldr	r3, [pc, #104]	; (800db48 <USBD_SetConfig+0x150>)
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	4619      	mov	r1, r3
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7fe ff9d 	bl	800ca22 <USBD_SetClassConfig>
 800dae8:	4603      	mov	r3, r0
 800daea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800daec:	7bfb      	ldrb	r3, [r7, #15]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00f      	beq.n	800db12 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800daf2:	6839      	ldr	r1, [r7, #0]
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 f918 	bl	800dd2a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	4619      	mov	r1, r3
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7fe ffa9 	bl	800ca5a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2202      	movs	r2, #2
 800db0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800db10:	e014      	b.n	800db3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 f9d4 	bl	800dec0 <USBD_CtlSendStatus>
      break;
 800db18:	e010      	b.n	800db3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 f9d0 	bl	800dec0 <USBD_CtlSendStatus>
      break;
 800db20:	e00c      	b.n	800db3c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800db22:	6839      	ldr	r1, [r7, #0]
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 f900 	bl	800dd2a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db2a:	4b07      	ldr	r3, [pc, #28]	; (800db48 <USBD_SetConfig+0x150>)
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	4619      	mov	r1, r3
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f7fe ff92 	bl	800ca5a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800db36:	2303      	movs	r3, #3
 800db38:	73fb      	strb	r3, [r7, #15]
      break;
 800db3a:	bf00      	nop
  }

  return ret;
 800db3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3710      	adds	r7, #16
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	20001d64 	.word	0x20001d64

0800db4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	88db      	ldrh	r3, [r3, #6]
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d004      	beq.n	800db68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800db5e:	6839      	ldr	r1, [r7, #0]
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 f8e2 	bl	800dd2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800db66:	e023      	b.n	800dbb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	2b02      	cmp	r3, #2
 800db72:	dc02      	bgt.n	800db7a <USBD_GetConfig+0x2e>
 800db74:	2b00      	cmp	r3, #0
 800db76:	dc03      	bgt.n	800db80 <USBD_GetConfig+0x34>
 800db78:	e015      	b.n	800dba6 <USBD_GetConfig+0x5a>
 800db7a:	2b03      	cmp	r3, #3
 800db7c:	d00b      	beq.n	800db96 <USBD_GetConfig+0x4a>
 800db7e:	e012      	b.n	800dba6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	3308      	adds	r3, #8
 800db8a:	2201      	movs	r2, #1
 800db8c:	4619      	mov	r1, r3
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 f93c 	bl	800de0c <USBD_CtlSendData>
        break;
 800db94:	e00c      	b.n	800dbb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	3304      	adds	r3, #4
 800db9a:	2201      	movs	r2, #1
 800db9c:	4619      	mov	r1, r3
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f934 	bl	800de0c <USBD_CtlSendData>
        break;
 800dba4:	e004      	b.n	800dbb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dba6:	6839      	ldr	r1, [r7, #0]
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f000 f8be 	bl	800dd2a <USBD_CtlError>
        break;
 800dbae:	bf00      	nop
}
 800dbb0:	bf00      	nop
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	2b02      	cmp	r3, #2
 800dbce:	d81e      	bhi.n	800dc0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	88db      	ldrh	r3, [r3, #6]
 800dbd4:	2b02      	cmp	r3, #2
 800dbd6:	d004      	beq.n	800dbe2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dbd8:	6839      	ldr	r1, [r7, #0]
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 f8a5 	bl	800dd2a <USBD_CtlError>
        break;
 800dbe0:	e01a      	b.n	800dc18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d005      	beq.n	800dbfe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	f043 0202 	orr.w	r2, r3, #2
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	330c      	adds	r3, #12
 800dc02:	2202      	movs	r2, #2
 800dc04:	4619      	mov	r1, r3
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 f900 	bl	800de0c <USBD_CtlSendData>
      break;
 800dc0c:	e004      	b.n	800dc18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dc0e:	6839      	ldr	r1, [r7, #0]
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 f88a 	bl	800dd2a <USBD_CtlError>
      break;
 800dc16:	bf00      	nop
  }
}
 800dc18:	bf00      	nop
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	885b      	ldrh	r3, [r3, #2]
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d107      	bne.n	800dc42 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2201      	movs	r2, #1
 800dc36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 f940 	bl	800dec0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dc40:	e013      	b.n	800dc6a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	885b      	ldrh	r3, [r3, #2]
 800dc46:	2b02      	cmp	r3, #2
 800dc48:	d10b      	bne.n	800dc62 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	889b      	ldrh	r3, [r3, #4]
 800dc4e:	0a1b      	lsrs	r3, r3, #8
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	b2da      	uxtb	r2, r3
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 f930 	bl	800dec0 <USBD_CtlSendStatus>
}
 800dc60:	e003      	b.n	800dc6a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dc62:	6839      	ldr	r1, [r7, #0]
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f000 f860 	bl	800dd2a <USBD_CtlError>
}
 800dc6a:	bf00      	nop
 800dc6c:	3708      	adds	r7, #8
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b082      	sub	sp, #8
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
 800dc7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	3b01      	subs	r3, #1
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	d80b      	bhi.n	800dca2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	885b      	ldrh	r3, [r3, #2]
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d10c      	bne.n	800dcac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 f910 	bl	800dec0 <USBD_CtlSendStatus>
      }
      break;
 800dca0:	e004      	b.n	800dcac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dca2:	6839      	ldr	r1, [r7, #0]
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 f840 	bl	800dd2a <USBD_CtlError>
      break;
 800dcaa:	e000      	b.n	800dcae <USBD_ClrFeature+0x3c>
      break;
 800dcac:	bf00      	nop
  }
}
 800dcae:	bf00      	nop
 800dcb0:	3708      	adds	r7, #8
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}

0800dcb6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b084      	sub	sp, #16
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
 800dcbe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	781a      	ldrb	r2, [r3, #0]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	781a      	ldrb	r2, [r3, #0]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	3301      	adds	r3, #1
 800dcde:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dce0:	68f8      	ldr	r0, [r7, #12]
 800dce2:	f7ff fa41 	bl	800d168 <SWAPBYTE>
 800dce6:	4603      	mov	r3, r0
 800dce8:	461a      	mov	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dcfa:	68f8      	ldr	r0, [r7, #12]
 800dcfc:	f7ff fa34 	bl	800d168 <SWAPBYTE>
 800dd00:	4603      	mov	r3, r0
 800dd02:	461a      	mov	r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	3301      	adds	r3, #1
 800dd12:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f7ff fa27 	bl	800d168 <SWAPBYTE>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	80da      	strh	r2, [r3, #6]
}
 800dd22:	bf00      	nop
 800dd24:	3710      	adds	r7, #16
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b082      	sub	sp, #8
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
 800dd32:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd34:	2180      	movs	r1, #128	; 0x80
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f000 fcec 	bl	800e714 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f000 fce8 	bl	800e714 <USBD_LL_StallEP>
}
 800dd44:	bf00      	nop
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b086      	sub	sp, #24
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d036      	beq.n	800ddd0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dd66:	6938      	ldr	r0, [r7, #16]
 800dd68:	f000 f836 	bl	800ddd8 <USBD_GetLen>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	3301      	adds	r3, #1
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	005b      	lsls	r3, r3, #1
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dd7a:	7dfb      	ldrb	r3, [r7, #23]
 800dd7c:	68ba      	ldr	r2, [r7, #8]
 800dd7e:	4413      	add	r3, r2
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	7812      	ldrb	r2, [r2, #0]
 800dd84:	701a      	strb	r2, [r3, #0]
  idx++;
 800dd86:	7dfb      	ldrb	r3, [r7, #23]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dd8c:	7dfb      	ldrb	r3, [r7, #23]
 800dd8e:	68ba      	ldr	r2, [r7, #8]
 800dd90:	4413      	add	r3, r2
 800dd92:	2203      	movs	r2, #3
 800dd94:	701a      	strb	r2, [r3, #0]
  idx++;
 800dd96:	7dfb      	ldrb	r3, [r7, #23]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dd9c:	e013      	b.n	800ddc6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dd9e:	7dfb      	ldrb	r3, [r7, #23]
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	4413      	add	r3, r2
 800dda4:	693a      	ldr	r2, [r7, #16]
 800dda6:	7812      	ldrb	r2, [r2, #0]
 800dda8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	3301      	adds	r3, #1
 800ddae:	613b      	str	r3, [r7, #16]
    idx++;
 800ddb0:	7dfb      	ldrb	r3, [r7, #23]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ddb6:	7dfb      	ldrb	r3, [r7, #23]
 800ddb8:	68ba      	ldr	r2, [r7, #8]
 800ddba:	4413      	add	r3, r2
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	701a      	strb	r2, [r3, #0]
    idx++;
 800ddc0:	7dfb      	ldrb	r3, [r7, #23]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d1e7      	bne.n	800dd9e <USBD_GetString+0x52>
 800ddce:	e000      	b.n	800ddd2 <USBD_GetString+0x86>
    return;
 800ddd0:	bf00      	nop
  }
}
 800ddd2:	3718      	adds	r7, #24
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b085      	sub	sp, #20
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dde0:	2300      	movs	r3, #0
 800dde2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dde8:	e005      	b.n	800ddf6 <USBD_GetLen+0x1e>
  {
    len++;
 800ddea:	7bfb      	ldrb	r3, [r7, #15]
 800ddec:	3301      	adds	r3, #1
 800ddee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d1f5      	bne.n	800ddea <USBD_GetLen+0x12>
  }

  return len;
 800ddfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800de00:	4618      	mov	r0, r3
 800de02:	3714      	adds	r7, #20
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2202      	movs	r2, #2
 800de1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	68ba      	ldr	r2, [r7, #8]
 800de30:	2100      	movs	r1, #0
 800de32:	68f8      	ldr	r0, [r7, #12]
 800de34:	f000 fcf7 	bl	800e826 <USBD_LL_Transmit>

  return USBD_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800de42:	b580      	push	{r7, lr}
 800de44:	b084      	sub	sp, #16
 800de46:	af00      	add	r7, sp, #0
 800de48:	60f8      	str	r0, [r7, #12]
 800de4a:	60b9      	str	r1, [r7, #8]
 800de4c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	2100      	movs	r1, #0
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f000 fce6 	bl	800e826 <USBD_LL_Transmit>

  return USBD_OK;
 800de5a:	2300      	movs	r3, #0
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2203      	movs	r2, #3
 800de74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	68ba      	ldr	r2, [r7, #8]
 800de8c:	2100      	movs	r1, #0
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f000 fcea 	bl	800e868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de94:	2300      	movs	r3, #0
}
 800de96:	4618      	mov	r0, r3
 800de98:	3710      	adds	r7, #16
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b084      	sub	sp, #16
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	60f8      	str	r0, [r7, #12]
 800dea6:	60b9      	str	r1, [r7, #8]
 800dea8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	68ba      	ldr	r2, [r7, #8]
 800deae:	2100      	movs	r1, #0
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f000 fcd9 	bl	800e868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800deb6:	2300      	movs	r3, #0
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3710      	adds	r7, #16
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2204      	movs	r2, #4
 800decc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ded0:	2300      	movs	r3, #0
 800ded2:	2200      	movs	r2, #0
 800ded4:	2100      	movs	r1, #0
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 fca5 	bl	800e826 <USBD_LL_Transmit>

  return USBD_OK;
 800dedc:	2300      	movs	r3, #0
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}

0800dee6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dee6:	b580      	push	{r7, lr}
 800dee8:	b082      	sub	sp, #8
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2205      	movs	r2, #5
 800def2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800def6:	2300      	movs	r3, #0
 800def8:	2200      	movs	r2, #0
 800defa:	2100      	movs	r1, #0
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 fcb3 	bl	800e868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df02:	2300      	movs	r3, #0
}
 800df04:	4618      	mov	r0, r3
 800df06:	3708      	adds	r7, #8
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800df10:	2200      	movs	r2, #0
 800df12:	4912      	ldr	r1, [pc, #72]	; (800df5c <MX_USB_DEVICE_Init+0x50>)
 800df14:	4812      	ldr	r0, [pc, #72]	; (800df60 <MX_USB_DEVICE_Init+0x54>)
 800df16:	f7fe fd07 	bl	800c928 <USBD_Init>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d001      	beq.n	800df24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800df20:	f7f5 fea6 	bl	8003c70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800df24:	490f      	ldr	r1, [pc, #60]	; (800df64 <MX_USB_DEVICE_Init+0x58>)
 800df26:	480e      	ldr	r0, [pc, #56]	; (800df60 <MX_USB_DEVICE_Init+0x54>)
 800df28:	f7fe fd2e 	bl	800c988 <USBD_RegisterClass>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d001      	beq.n	800df36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800df32:	f7f5 fe9d 	bl	8003c70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800df36:	490c      	ldr	r1, [pc, #48]	; (800df68 <MX_USB_DEVICE_Init+0x5c>)
 800df38:	4809      	ldr	r0, [pc, #36]	; (800df60 <MX_USB_DEVICE_Init+0x54>)
 800df3a:	f7fe fc1f 	bl	800c77c <USBD_CDC_RegisterInterface>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d001      	beq.n	800df48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800df44:	f7f5 fe94 	bl	8003c70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800df48:	4805      	ldr	r0, [pc, #20]	; (800df60 <MX_USB_DEVICE_Init+0x54>)
 800df4a:	f7fe fd53 	bl	800c9f4 <USBD_Start>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d001      	beq.n	800df58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800df54:	f7f5 fe8c 	bl	8003c70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df58:	bf00      	nop
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	200000c0 	.word	0x200000c0
 800df60:	20001d68 	.word	0x20001d68
 800df64:	2000002c 	.word	0x2000002c
 800df68:	200000ac 	.word	0x200000ac

0800df6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800df70:	2200      	movs	r2, #0
 800df72:	4905      	ldr	r1, [pc, #20]	; (800df88 <CDC_Init_FS+0x1c>)
 800df74:	4805      	ldr	r0, [pc, #20]	; (800df8c <CDC_Init_FS+0x20>)
 800df76:	f7fe fc1b 	bl	800c7b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800df7a:	4905      	ldr	r1, [pc, #20]	; (800df90 <CDC_Init_FS+0x24>)
 800df7c:	4803      	ldr	r0, [pc, #12]	; (800df8c <CDC_Init_FS+0x20>)
 800df7e:	f7fe fc39 	bl	800c7f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800df82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800df84:	4618      	mov	r0, r3
 800df86:	bd80      	pop	{r7, pc}
 800df88:	2000242c 	.word	0x2000242c
 800df8c:	20001d68 	.word	0x20001d68
 800df90:	20002044 	.word	0x20002044

0800df94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800df94:	b480      	push	{r7}
 800df96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800df98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	4603      	mov	r3, r0
 800dfac:	6039      	str	r1, [r7, #0]
 800dfae:	71fb      	strb	r3, [r7, #7]
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dfb4:	79fb      	ldrb	r3, [r7, #7]
 800dfb6:	2b23      	cmp	r3, #35	; 0x23
 800dfb8:	d84a      	bhi.n	800e050 <CDC_Control_FS+0xac>
 800dfba:	a201      	add	r2, pc, #4	; (adr r2, 800dfc0 <CDC_Control_FS+0x1c>)
 800dfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc0:	0800e051 	.word	0x0800e051
 800dfc4:	0800e051 	.word	0x0800e051
 800dfc8:	0800e051 	.word	0x0800e051
 800dfcc:	0800e051 	.word	0x0800e051
 800dfd0:	0800e051 	.word	0x0800e051
 800dfd4:	0800e051 	.word	0x0800e051
 800dfd8:	0800e051 	.word	0x0800e051
 800dfdc:	0800e051 	.word	0x0800e051
 800dfe0:	0800e051 	.word	0x0800e051
 800dfe4:	0800e051 	.word	0x0800e051
 800dfe8:	0800e051 	.word	0x0800e051
 800dfec:	0800e051 	.word	0x0800e051
 800dff0:	0800e051 	.word	0x0800e051
 800dff4:	0800e051 	.word	0x0800e051
 800dff8:	0800e051 	.word	0x0800e051
 800dffc:	0800e051 	.word	0x0800e051
 800e000:	0800e051 	.word	0x0800e051
 800e004:	0800e051 	.word	0x0800e051
 800e008:	0800e051 	.word	0x0800e051
 800e00c:	0800e051 	.word	0x0800e051
 800e010:	0800e051 	.word	0x0800e051
 800e014:	0800e051 	.word	0x0800e051
 800e018:	0800e051 	.word	0x0800e051
 800e01c:	0800e051 	.word	0x0800e051
 800e020:	0800e051 	.word	0x0800e051
 800e024:	0800e051 	.word	0x0800e051
 800e028:	0800e051 	.word	0x0800e051
 800e02c:	0800e051 	.word	0x0800e051
 800e030:	0800e051 	.word	0x0800e051
 800e034:	0800e051 	.word	0x0800e051
 800e038:	0800e051 	.word	0x0800e051
 800e03c:	0800e051 	.word	0x0800e051
 800e040:	0800e051 	.word	0x0800e051
 800e044:	0800e051 	.word	0x0800e051
 800e048:	0800e051 	.word	0x0800e051
 800e04c:	0800e051 	.word	0x0800e051
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e050:	bf00      	nop
  }

  return (USBD_OK);
 800e052:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint16_t len = (uint8_t) *Len;
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	81fb      	strh	r3, [r7, #14]
  StringFIFOAdd(&USBFIFO, Buf, len);
 800e072:	89fb      	ldrh	r3, [r7, #14]
 800e074:	461a      	mov	r2, r3
 800e076:	6879      	ldr	r1, [r7, #4]
 800e078:	4807      	ldr	r0, [pc, #28]	; (800e098 <CDC_Receive_FS+0x38>)
 800e07a:	f7f5 fff3 	bl	8004064 <StringFIFOAdd>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e07e:	6879      	ldr	r1, [r7, #4]
 800e080:	4806      	ldr	r0, [pc, #24]	; (800e09c <CDC_Receive_FS+0x3c>)
 800e082:	f7fe fbb7 	bl	800c7f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e086:	4805      	ldr	r0, [pc, #20]	; (800e09c <CDC_Receive_FS+0x3c>)
 800e088:	f7fe fc18 	bl	800c8bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e08c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3710      	adds	r7, #16
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	20001c60 	.word	0x20001c60
 800e09c:	20001d68 	.word	0x20001d68

0800e0a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e0b0:	4b0d      	ldr	r3, [pc, #52]	; (800e0e8 <CDC_Transmit_FS+0x48>)
 800e0b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d001      	beq.n	800e0c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e00b      	b.n	800e0de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e0c6:	887b      	ldrh	r3, [r7, #2]
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	6879      	ldr	r1, [r7, #4]
 800e0cc:	4806      	ldr	r0, [pc, #24]	; (800e0e8 <CDC_Transmit_FS+0x48>)
 800e0ce:	f7fe fb6f 	bl	800c7b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e0d2:	4805      	ldr	r0, [pc, #20]	; (800e0e8 <CDC_Transmit_FS+0x48>)
 800e0d4:	f7fe fbac 	bl	800c830 <USBD_CDC_TransmitPacket>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	20001d68 	.word	0x20001d68

0800e0ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b087      	sub	sp, #28
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e0fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e102:	4618      	mov	r0, r3
 800e104:	371c      	adds	r7, #28
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr
	...

0800e110 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e110:	b480      	push	{r7}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
 800e116:	4603      	mov	r3, r0
 800e118:	6039      	str	r1, [r7, #0]
 800e11a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	2212      	movs	r2, #18
 800e120:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e122:	4b03      	ldr	r3, [pc, #12]	; (800e130 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e124:	4618      	mov	r0, r3
 800e126:	370c      	adds	r7, #12
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr
 800e130:	200000dc 	.word	0x200000dc

0800e134 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	4603      	mov	r3, r0
 800e13c:	6039      	str	r1, [r7, #0]
 800e13e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	2204      	movs	r2, #4
 800e144:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e146:	4b03      	ldr	r3, [pc, #12]	; (800e154 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e148:	4618      	mov	r0, r3
 800e14a:	370c      	adds	r7, #12
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr
 800e154:	200000f0 	.word	0x200000f0

0800e158 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	4603      	mov	r3, r0
 800e160:	6039      	str	r1, [r7, #0]
 800e162:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e164:	79fb      	ldrb	r3, [r7, #7]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d105      	bne.n	800e176 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e16a:	683a      	ldr	r2, [r7, #0]
 800e16c:	4907      	ldr	r1, [pc, #28]	; (800e18c <USBD_FS_ProductStrDescriptor+0x34>)
 800e16e:	4808      	ldr	r0, [pc, #32]	; (800e190 <USBD_FS_ProductStrDescriptor+0x38>)
 800e170:	f7ff fdec 	bl	800dd4c <USBD_GetString>
 800e174:	e004      	b.n	800e180 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e176:	683a      	ldr	r2, [r7, #0]
 800e178:	4904      	ldr	r1, [pc, #16]	; (800e18c <USBD_FS_ProductStrDescriptor+0x34>)
 800e17a:	4805      	ldr	r0, [pc, #20]	; (800e190 <USBD_FS_ProductStrDescriptor+0x38>)
 800e17c:	f7ff fde6 	bl	800dd4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e180:	4b02      	ldr	r3, [pc, #8]	; (800e18c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e182:	4618      	mov	r0, r3
 800e184:	3708      	adds	r7, #8
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	20002814 	.word	0x20002814
 800e190:	0801497c 	.word	0x0801497c

0800e194 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	4603      	mov	r3, r0
 800e19c:	6039      	str	r1, [r7, #0]
 800e19e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e1a0:	683a      	ldr	r2, [r7, #0]
 800e1a2:	4904      	ldr	r1, [pc, #16]	; (800e1b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e1a4:	4804      	ldr	r0, [pc, #16]	; (800e1b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e1a6:	f7ff fdd1 	bl	800dd4c <USBD_GetString>
  return USBD_StrDesc;
 800e1aa:	4b02      	ldr	r3, [pc, #8]	; (800e1b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3708      	adds	r7, #8
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	20002814 	.word	0x20002814
 800e1b8:	08014994 	.word	0x08014994

0800e1bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	6039      	str	r1, [r7, #0]
 800e1c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	221a      	movs	r2, #26
 800e1cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e1ce:	f000 f843 	bl	800e258 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e1d2:	4b02      	ldr	r3, [pc, #8]	; (800e1dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3708      	adds	r7, #8
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	200000f4 	.word	0x200000f4

0800e1e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	6039      	str	r1, [r7, #0]
 800e1ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e1ec:	79fb      	ldrb	r3, [r7, #7]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d105      	bne.n	800e1fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e1f2:	683a      	ldr	r2, [r7, #0]
 800e1f4:	4907      	ldr	r1, [pc, #28]	; (800e214 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e1f6:	4808      	ldr	r0, [pc, #32]	; (800e218 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e1f8:	f7ff fda8 	bl	800dd4c <USBD_GetString>
 800e1fc:	e004      	b.n	800e208 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e1fe:	683a      	ldr	r2, [r7, #0]
 800e200:	4904      	ldr	r1, [pc, #16]	; (800e214 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e202:	4805      	ldr	r0, [pc, #20]	; (800e218 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e204:	f7ff fda2 	bl	800dd4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e208:	4b02      	ldr	r3, [pc, #8]	; (800e214 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3708      	adds	r7, #8
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	bf00      	nop
 800e214:	20002814 	.word	0x20002814
 800e218:	080149a8 	.word	0x080149a8

0800e21c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	4603      	mov	r3, r0
 800e224:	6039      	str	r1, [r7, #0]
 800e226:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e228:	79fb      	ldrb	r3, [r7, #7]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d105      	bne.n	800e23a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e22e:	683a      	ldr	r2, [r7, #0]
 800e230:	4907      	ldr	r1, [pc, #28]	; (800e250 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e232:	4808      	ldr	r0, [pc, #32]	; (800e254 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e234:	f7ff fd8a 	bl	800dd4c <USBD_GetString>
 800e238:	e004      	b.n	800e244 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e23a:	683a      	ldr	r2, [r7, #0]
 800e23c:	4904      	ldr	r1, [pc, #16]	; (800e250 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e23e:	4805      	ldr	r0, [pc, #20]	; (800e254 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e240:	f7ff fd84 	bl	800dd4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e244:	4b02      	ldr	r3, [pc, #8]	; (800e250 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e246:	4618      	mov	r0, r3
 800e248:	3708      	adds	r7, #8
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	20002814 	.word	0x20002814
 800e254:	080149b4 	.word	0x080149b4

0800e258 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e25e:	4b0f      	ldr	r3, [pc, #60]	; (800e29c <Get_SerialNum+0x44>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e264:	4b0e      	ldr	r3, [pc, #56]	; (800e2a0 <Get_SerialNum+0x48>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e26a:	4b0e      	ldr	r3, [pc, #56]	; (800e2a4 <Get_SerialNum+0x4c>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4413      	add	r3, r2
 800e276:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d009      	beq.n	800e292 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e27e:	2208      	movs	r2, #8
 800e280:	4909      	ldr	r1, [pc, #36]	; (800e2a8 <Get_SerialNum+0x50>)
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	f000 f814 	bl	800e2b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e288:	2204      	movs	r2, #4
 800e28a:	4908      	ldr	r1, [pc, #32]	; (800e2ac <Get_SerialNum+0x54>)
 800e28c:	68b8      	ldr	r0, [r7, #8]
 800e28e:	f000 f80f 	bl	800e2b0 <IntToUnicode>
  }
}
 800e292:	bf00      	nop
 800e294:	3710      	adds	r7, #16
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	1fff7a10 	.word	0x1fff7a10
 800e2a0:	1fff7a14 	.word	0x1fff7a14
 800e2a4:	1fff7a18 	.word	0x1fff7a18
 800e2a8:	200000f6 	.word	0x200000f6
 800e2ac:	20000106 	.word	0x20000106

0800e2b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b087      	sub	sp, #28
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	75fb      	strb	r3, [r7, #23]
 800e2c6:	e027      	b.n	800e318 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	0f1b      	lsrs	r3, r3, #28
 800e2cc:	2b09      	cmp	r3, #9
 800e2ce:	d80b      	bhi.n	800e2e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	0f1b      	lsrs	r3, r3, #28
 800e2d4:	b2da      	uxtb	r2, r3
 800e2d6:	7dfb      	ldrb	r3, [r7, #23]
 800e2d8:	005b      	lsls	r3, r3, #1
 800e2da:	4619      	mov	r1, r3
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	440b      	add	r3, r1
 800e2e0:	3230      	adds	r2, #48	; 0x30
 800e2e2:	b2d2      	uxtb	r2, r2
 800e2e4:	701a      	strb	r2, [r3, #0]
 800e2e6:	e00a      	b.n	800e2fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	0f1b      	lsrs	r3, r3, #28
 800e2ec:	b2da      	uxtb	r2, r3
 800e2ee:	7dfb      	ldrb	r3, [r7, #23]
 800e2f0:	005b      	lsls	r3, r3, #1
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	440b      	add	r3, r1
 800e2f8:	3237      	adds	r2, #55	; 0x37
 800e2fa:	b2d2      	uxtb	r2, r2
 800e2fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	011b      	lsls	r3, r3, #4
 800e302:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e304:	7dfb      	ldrb	r3, [r7, #23]
 800e306:	005b      	lsls	r3, r3, #1
 800e308:	3301      	adds	r3, #1
 800e30a:	68ba      	ldr	r2, [r7, #8]
 800e30c:	4413      	add	r3, r2
 800e30e:	2200      	movs	r2, #0
 800e310:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e312:	7dfb      	ldrb	r3, [r7, #23]
 800e314:	3301      	adds	r3, #1
 800e316:	75fb      	strb	r3, [r7, #23]
 800e318:	7dfa      	ldrb	r2, [r7, #23]
 800e31a:	79fb      	ldrb	r3, [r7, #7]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d3d3      	bcc.n	800e2c8 <IntToUnicode+0x18>
  }
}
 800e320:	bf00      	nop
 800e322:	bf00      	nop
 800e324:	371c      	adds	r7, #28
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr
	...

0800e330 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b08a      	sub	sp, #40	; 0x28
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e338:	f107 0314 	add.w	r3, r7, #20
 800e33c:	2200      	movs	r2, #0
 800e33e:	601a      	str	r2, [r3, #0]
 800e340:	605a      	str	r2, [r3, #4]
 800e342:	609a      	str	r2, [r3, #8]
 800e344:	60da      	str	r2, [r3, #12]
 800e346:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e350:	d13a      	bne.n	800e3c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e352:	2300      	movs	r3, #0
 800e354:	613b      	str	r3, [r7, #16]
 800e356:	4b1e      	ldr	r3, [pc, #120]	; (800e3d0 <HAL_PCD_MspInit+0xa0>)
 800e358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e35a:	4a1d      	ldr	r2, [pc, #116]	; (800e3d0 <HAL_PCD_MspInit+0xa0>)
 800e35c:	f043 0301 	orr.w	r3, r3, #1
 800e360:	6313      	str	r3, [r2, #48]	; 0x30
 800e362:	4b1b      	ldr	r3, [pc, #108]	; (800e3d0 <HAL_PCD_MspInit+0xa0>)
 800e364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e366:	f003 0301 	and.w	r3, r3, #1
 800e36a:	613b      	str	r3, [r7, #16]
 800e36c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA8     ------> USB_OTG_FS_SOF
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800e36e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800e372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e374:	2302      	movs	r3, #2
 800e376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e378:	2300      	movs	r3, #0
 800e37a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e37c:	2303      	movs	r3, #3
 800e37e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e380:	230a      	movs	r3, #10
 800e382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e384:	f107 0314 	add.w	r3, r7, #20
 800e388:	4619      	mov	r1, r3
 800e38a:	4812      	ldr	r0, [pc, #72]	; (800e3d4 <HAL_PCD_MspInit+0xa4>)
 800e38c:	f7f6 fa24 	bl	80047d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e390:	4b0f      	ldr	r3, [pc, #60]	; (800e3d0 <HAL_PCD_MspInit+0xa0>)
 800e392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e394:	4a0e      	ldr	r2, [pc, #56]	; (800e3d0 <HAL_PCD_MspInit+0xa0>)
 800e396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e39a:	6353      	str	r3, [r2, #52]	; 0x34
 800e39c:	2300      	movs	r3, #0
 800e39e:	60fb      	str	r3, [r7, #12]
 800e3a0:	4b0b      	ldr	r3, [pc, #44]	; (800e3d0 <HAL_PCD_MspInit+0xa0>)
 800e3a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3a4:	4a0a      	ldr	r2, [pc, #40]	; (800e3d0 <HAL_PCD_MspInit+0xa0>)
 800e3a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e3aa:	6453      	str	r3, [r2, #68]	; 0x44
 800e3ac:	4b08      	ldr	r3, [pc, #32]	; (800e3d0 <HAL_PCD_MspInit+0xa0>)
 800e3ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3b4:	60fb      	str	r3, [r7, #12]
 800e3b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	2043      	movs	r0, #67	; 0x43
 800e3be:	f7f6 f9a4 	bl	800470a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e3c2:	2043      	movs	r0, #67	; 0x43
 800e3c4:	f7f6 f9bd 	bl	8004742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e3c8:	bf00      	nop
 800e3ca:	3728      	adds	r7, #40	; 0x28
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	40023800 	.word	0x40023800
 800e3d4:	40020000 	.word	0x40020000

0800e3d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	4610      	mov	r0, r2
 800e3f0:	f7fe fb4d 	bl	800ca8e <USBD_LL_SetupStage>
}
 800e3f4:	bf00      	nop
 800e3f6:	3708      	adds	r7, #8
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	460b      	mov	r3, r1
 800e406:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e40e:	78fa      	ldrb	r2, [r7, #3]
 800e410:	6879      	ldr	r1, [r7, #4]
 800e412:	4613      	mov	r3, r2
 800e414:	00db      	lsls	r3, r3, #3
 800e416:	4413      	add	r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	440b      	add	r3, r1
 800e41c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	78fb      	ldrb	r3, [r7, #3]
 800e424:	4619      	mov	r1, r3
 800e426:	f7fe fb87 	bl	800cb38 <USBD_LL_DataOutStage>
}
 800e42a:	bf00      	nop
 800e42c:	3708      	adds	r7, #8
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e432:	b580      	push	{r7, lr}
 800e434:	b082      	sub	sp, #8
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
 800e43a:	460b      	mov	r3, r1
 800e43c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e444:	78fa      	ldrb	r2, [r7, #3]
 800e446:	6879      	ldr	r1, [r7, #4]
 800e448:	4613      	mov	r3, r2
 800e44a:	00db      	lsls	r3, r3, #3
 800e44c:	4413      	add	r3, r2
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	440b      	add	r3, r1
 800e452:	334c      	adds	r3, #76	; 0x4c
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	78fb      	ldrb	r3, [r7, #3]
 800e458:	4619      	mov	r1, r3
 800e45a:	f7fe fc20 	bl	800cc9e <USBD_LL_DataInStage>
}
 800e45e:	bf00      	nop
 800e460:	3708      	adds	r7, #8
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}

0800e466 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e466:	b580      	push	{r7, lr}
 800e468:	b082      	sub	sp, #8
 800e46a:	af00      	add	r7, sp, #0
 800e46c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e474:	4618      	mov	r0, r3
 800e476:	f7fe fd54 	bl	800cf22 <USBD_LL_SOF>
}
 800e47a:	bf00      	nop
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e482:	b580      	push	{r7, lr}
 800e484:	b084      	sub	sp, #16
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e48a:	2301      	movs	r3, #1
 800e48c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d102      	bne.n	800e49c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e496:	2300      	movs	r3, #0
 800e498:	73fb      	strb	r3, [r7, #15]
 800e49a:	e008      	b.n	800e4ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	2b02      	cmp	r3, #2
 800e4a2:	d102      	bne.n	800e4aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	73fb      	strb	r3, [r7, #15]
 800e4a8:	e001      	b.n	800e4ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e4aa:	f7f5 fbe1 	bl	8003c70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4b4:	7bfa      	ldrb	r2, [r7, #15]
 800e4b6:	4611      	mov	r1, r2
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7fe fcf4 	bl	800cea6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7fe fc9c 	bl	800ce02 <USBD_LL_Reset>
}
 800e4ca:	bf00      	nop
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
	...

0800e4d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7fe fcef 	bl	800cec6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	6812      	ldr	r2, [r2, #0]
 800e4f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e4fa:	f043 0301 	orr.w	r3, r3, #1
 800e4fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6a1b      	ldr	r3, [r3, #32]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d005      	beq.n	800e514 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e508:	4b04      	ldr	r3, [pc, #16]	; (800e51c <HAL_PCD_SuspendCallback+0x48>)
 800e50a:	691b      	ldr	r3, [r3, #16]
 800e50c:	4a03      	ldr	r2, [pc, #12]	; (800e51c <HAL_PCD_SuspendCallback+0x48>)
 800e50e:	f043 0306 	orr.w	r3, r3, #6
 800e512:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e514:	bf00      	nop
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	e000ed00 	.word	0xe000ed00

0800e520 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fe fcdf 	bl	800cef2 <USBD_LL_Resume>
}
 800e534:	bf00      	nop
 800e536:	3708      	adds	r7, #8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	460b      	mov	r3, r1
 800e546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e54e:	78fa      	ldrb	r2, [r7, #3]
 800e550:	4611      	mov	r1, r2
 800e552:	4618      	mov	r0, r3
 800e554:	f7fe fd37 	bl	800cfc6 <USBD_LL_IsoOUTIncomplete>
}
 800e558:	bf00      	nop
 800e55a:	3708      	adds	r7, #8
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}

0800e560 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	460b      	mov	r3, r1
 800e56a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e572:	78fa      	ldrb	r2, [r7, #3]
 800e574:	4611      	mov	r1, r2
 800e576:	4618      	mov	r0, r3
 800e578:	f7fe fcf3 	bl	800cf62 <USBD_LL_IsoINIncomplete>
}
 800e57c:	bf00      	nop
 800e57e:	3708      	adds	r7, #8
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e592:	4618      	mov	r0, r3
 800e594:	f7fe fd49 	bl	800d02a <USBD_LL_DevConnected>
}
 800e598:	bf00      	nop
 800e59a:	3708      	adds	r7, #8
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fe fd46 	bl	800d040 <USBD_LL_DevDisconnected>
}
 800e5b4:	bf00      	nop
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d13c      	bne.n	800e646 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e5cc:	4a20      	ldr	r2, [pc, #128]	; (800e650 <USBD_LL_Init+0x94>)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	4a1e      	ldr	r2, [pc, #120]	; (800e650 <USBD_LL_Init+0x94>)
 800e5d8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e5dc:	4b1c      	ldr	r3, [pc, #112]	; (800e650 <USBD_LL_Init+0x94>)
 800e5de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e5e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e5e4:	4b1a      	ldr	r3, [pc, #104]	; (800e650 <USBD_LL_Init+0x94>)
 800e5e6:	2204      	movs	r2, #4
 800e5e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e5ea:	4b19      	ldr	r3, [pc, #100]	; (800e650 <USBD_LL_Init+0x94>)
 800e5ec:	2202      	movs	r2, #2
 800e5ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e5f0:	4b17      	ldr	r3, [pc, #92]	; (800e650 <USBD_LL_Init+0x94>)
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e5f6:	4b16      	ldr	r3, [pc, #88]	; (800e650 <USBD_LL_Init+0x94>)
 800e5f8:	2202      	movs	r2, #2
 800e5fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e5fc:	4b14      	ldr	r3, [pc, #80]	; (800e650 <USBD_LL_Init+0x94>)
 800e5fe:	2201      	movs	r2, #1
 800e600:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e602:	4b13      	ldr	r3, [pc, #76]	; (800e650 <USBD_LL_Init+0x94>)
 800e604:	2200      	movs	r2, #0
 800e606:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e608:	4b11      	ldr	r3, [pc, #68]	; (800e650 <USBD_LL_Init+0x94>)
 800e60a:	2200      	movs	r2, #0
 800e60c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e60e:	4b10      	ldr	r3, [pc, #64]	; (800e650 <USBD_LL_Init+0x94>)
 800e610:	2200      	movs	r2, #0
 800e612:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e614:	4b0e      	ldr	r3, [pc, #56]	; (800e650 <USBD_LL_Init+0x94>)
 800e616:	2200      	movs	r2, #0
 800e618:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e61a:	480d      	ldr	r0, [pc, #52]	; (800e650 <USBD_LL_Init+0x94>)
 800e61c:	f7f8 ff8d 	bl	800753a <HAL_PCD_Init>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d001      	beq.n	800e62a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e626:	f7f5 fb23 	bl	8003c70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e62a:	2180      	movs	r1, #128	; 0x80
 800e62c:	4808      	ldr	r0, [pc, #32]	; (800e650 <USBD_LL_Init+0x94>)
 800e62e:	f7fa f9e4 	bl	80089fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e632:	2240      	movs	r2, #64	; 0x40
 800e634:	2100      	movs	r1, #0
 800e636:	4806      	ldr	r0, [pc, #24]	; (800e650 <USBD_LL_Init+0x94>)
 800e638:	f7fa f998 	bl	800896c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e63c:	2280      	movs	r2, #128	; 0x80
 800e63e:	2101      	movs	r1, #1
 800e640:	4803      	ldr	r0, [pc, #12]	; (800e650 <USBD_LL_Init+0x94>)
 800e642:	f7fa f993 	bl	800896c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3708      	adds	r7, #8
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	20002a14 	.word	0x20002a14

0800e654 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e65c:	2300      	movs	r3, #0
 800e65e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e660:	2300      	movs	r3, #0
 800e662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7f9 f882 	bl	8007774 <HAL_PCD_Start>
 800e670:	4603      	mov	r3, r0
 800e672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e674:	7bfb      	ldrb	r3, [r7, #15]
 800e676:	4618      	mov	r0, r3
 800e678:	f000 f942 	bl	800e900 <USBD_Get_USB_Status>
 800e67c:	4603      	mov	r3, r0
 800e67e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e680:	7bbb      	ldrb	r3, [r7, #14]
}
 800e682:	4618      	mov	r0, r3
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b084      	sub	sp, #16
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
 800e692:	4608      	mov	r0, r1
 800e694:	4611      	mov	r1, r2
 800e696:	461a      	mov	r2, r3
 800e698:	4603      	mov	r3, r0
 800e69a:	70fb      	strb	r3, [r7, #3]
 800e69c:	460b      	mov	r3, r1
 800e69e:	70bb      	strb	r3, [r7, #2]
 800e6a0:	4613      	mov	r3, r2
 800e6a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e6b2:	78bb      	ldrb	r3, [r7, #2]
 800e6b4:	883a      	ldrh	r2, [r7, #0]
 800e6b6:	78f9      	ldrb	r1, [r7, #3]
 800e6b8:	f7f9 fd53 	bl	8008162 <HAL_PCD_EP_Open>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6c0:	7bfb      	ldrb	r3, [r7, #15]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f000 f91c 	bl	800e900 <USBD_Get_USB_Status>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b084      	sub	sp, #16
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
 800e6de:	460b      	mov	r3, r1
 800e6e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e6f0:	78fa      	ldrb	r2, [r7, #3]
 800e6f2:	4611      	mov	r1, r2
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7f9 fd9c 	bl	8008232 <HAL_PCD_EP_Close>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6fe:	7bfb      	ldrb	r3, [r7, #15]
 800e700:	4618      	mov	r0, r3
 800e702:	f000 f8fd 	bl	800e900 <USBD_Get_USB_Status>
 800e706:	4603      	mov	r3, r0
 800e708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e70a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3710      	adds	r7, #16
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	460b      	mov	r3, r1
 800e71e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e720:	2300      	movs	r3, #0
 800e722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e724:	2300      	movs	r3, #0
 800e726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e72e:	78fa      	ldrb	r2, [r7, #3]
 800e730:	4611      	mov	r1, r2
 800e732:	4618      	mov	r0, r3
 800e734:	f7f9 fe74 	bl	8008420 <HAL_PCD_EP_SetStall>
 800e738:	4603      	mov	r3, r0
 800e73a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e73c:	7bfb      	ldrb	r3, [r7, #15]
 800e73e:	4618      	mov	r0, r3
 800e740:	f000 f8de 	bl	800e900 <USBD_Get_USB_Status>
 800e744:	4603      	mov	r3, r0
 800e746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e748:	7bbb      	ldrb	r3, [r7, #14]
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3710      	adds	r7, #16
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}

0800e752 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b084      	sub	sp, #16
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
 800e75a:	460b      	mov	r3, r1
 800e75c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e75e:	2300      	movs	r3, #0
 800e760:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e762:	2300      	movs	r3, #0
 800e764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e76c:	78fa      	ldrb	r2, [r7, #3]
 800e76e:	4611      	mov	r1, r2
 800e770:	4618      	mov	r0, r3
 800e772:	f7f9 feb9 	bl	80084e8 <HAL_PCD_EP_ClrStall>
 800e776:	4603      	mov	r3, r0
 800e778:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e77a:	7bfb      	ldrb	r3, [r7, #15]
 800e77c:	4618      	mov	r0, r3
 800e77e:	f000 f8bf 	bl	800e900 <USBD_Get_USB_Status>
 800e782:	4603      	mov	r3, r0
 800e784:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e786:	7bbb      	ldrb	r3, [r7, #14]
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e790:	b480      	push	{r7}
 800e792:	b085      	sub	sp, #20
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	460b      	mov	r3, r1
 800e79a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e7a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	da0b      	bge.n	800e7c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e7ac:	78fb      	ldrb	r3, [r7, #3]
 800e7ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7b2:	68f9      	ldr	r1, [r7, #12]
 800e7b4:	4613      	mov	r3, r2
 800e7b6:	00db      	lsls	r3, r3, #3
 800e7b8:	4413      	add	r3, r2
 800e7ba:	009b      	lsls	r3, r3, #2
 800e7bc:	440b      	add	r3, r1
 800e7be:	333e      	adds	r3, #62	; 0x3e
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	e00b      	b.n	800e7dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e7c4:	78fb      	ldrb	r3, [r7, #3]
 800e7c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7ca:	68f9      	ldr	r1, [r7, #12]
 800e7cc:	4613      	mov	r3, r2
 800e7ce:	00db      	lsls	r3, r3, #3
 800e7d0:	4413      	add	r3, r2
 800e7d2:	009b      	lsls	r3, r3, #2
 800e7d4:	440b      	add	r3, r1
 800e7d6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e7da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3714      	adds	r7, #20
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	460b      	mov	r3, r1
 800e7f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e802:	78fa      	ldrb	r2, [r7, #3]
 800e804:	4611      	mov	r1, r2
 800e806:	4618      	mov	r0, r3
 800e808:	f7f9 fc86 	bl	8008118 <HAL_PCD_SetAddress>
 800e80c:	4603      	mov	r3, r0
 800e80e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e810:	7bfb      	ldrb	r3, [r7, #15]
 800e812:	4618      	mov	r0, r3
 800e814:	f000 f874 	bl	800e900 <USBD_Get_USB_Status>
 800e818:	4603      	mov	r3, r0
 800e81a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e81c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b086      	sub	sp, #24
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	60f8      	str	r0, [r7, #12]
 800e82e:	607a      	str	r2, [r7, #4]
 800e830:	603b      	str	r3, [r7, #0]
 800e832:	460b      	mov	r3, r1
 800e834:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e836:	2300      	movs	r3, #0
 800e838:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e83a:	2300      	movs	r3, #0
 800e83c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e844:	7af9      	ldrb	r1, [r7, #11]
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	f7f9 fd9f 	bl	800838c <HAL_PCD_EP_Transmit>
 800e84e:	4603      	mov	r3, r0
 800e850:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e852:	7dfb      	ldrb	r3, [r7, #23]
 800e854:	4618      	mov	r0, r3
 800e856:	f000 f853 	bl	800e900 <USBD_Get_USB_Status>
 800e85a:	4603      	mov	r3, r0
 800e85c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e85e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e860:	4618      	mov	r0, r3
 800e862:	3718      	adds	r7, #24
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	607a      	str	r2, [r7, #4]
 800e872:	603b      	str	r3, [r7, #0]
 800e874:	460b      	mov	r3, r1
 800e876:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e878:	2300      	movs	r3, #0
 800e87a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e87c:	2300      	movs	r3, #0
 800e87e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e886:	7af9      	ldrb	r1, [r7, #11]
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	f7f9 fd1b 	bl	80082c6 <HAL_PCD_EP_Receive>
 800e890:	4603      	mov	r3, r0
 800e892:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e894:	7dfb      	ldrb	r3, [r7, #23]
 800e896:	4618      	mov	r0, r3
 800e898:	f000 f832 	bl	800e900 <USBD_Get_USB_Status>
 800e89c:	4603      	mov	r3, r0
 800e89e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e8a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3718      	adds	r7, #24
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}

0800e8aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8aa:	b580      	push	{r7, lr}
 800e8ac:	b082      	sub	sp, #8
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8bc:	78fa      	ldrb	r2, [r7, #3]
 800e8be:	4611      	mov	r1, r2
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7f9 fd4b 	bl	800835c <HAL_PCD_EP_GetRxCount>
 800e8c6:	4603      	mov	r3, r0
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3708      	adds	r7, #8
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e8d8:	4b03      	ldr	r3, [pc, #12]	; (800e8e8 <USBD_static_malloc+0x18>)
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	370c      	adds	r7, #12
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr
 800e8e6:	bf00      	nop
 800e8e8:	20002f20 	.word	0x20002f20

0800e8ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]

}
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e900:	b480      	push	{r7}
 800e902:	b085      	sub	sp, #20
 800e904:	af00      	add	r7, sp, #0
 800e906:	4603      	mov	r3, r0
 800e908:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e90a:	2300      	movs	r3, #0
 800e90c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e90e:	79fb      	ldrb	r3, [r7, #7]
 800e910:	2b03      	cmp	r3, #3
 800e912:	d817      	bhi.n	800e944 <USBD_Get_USB_Status+0x44>
 800e914:	a201      	add	r2, pc, #4	; (adr r2, 800e91c <USBD_Get_USB_Status+0x1c>)
 800e916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e91a:	bf00      	nop
 800e91c:	0800e92d 	.word	0x0800e92d
 800e920:	0800e933 	.word	0x0800e933
 800e924:	0800e939 	.word	0x0800e939
 800e928:	0800e93f 	.word	0x0800e93f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e92c:	2300      	movs	r3, #0
 800e92e:	73fb      	strb	r3, [r7, #15]
    break;
 800e930:	e00b      	b.n	800e94a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e932:	2303      	movs	r3, #3
 800e934:	73fb      	strb	r3, [r7, #15]
    break;
 800e936:	e008      	b.n	800e94a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e938:	2301      	movs	r3, #1
 800e93a:	73fb      	strb	r3, [r7, #15]
    break;
 800e93c:	e005      	b.n	800e94a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e93e:	2303      	movs	r3, #3
 800e940:	73fb      	strb	r3, [r7, #15]
    break;
 800e942:	e002      	b.n	800e94a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e944:	2303      	movs	r3, #3
 800e946:	73fb      	strb	r3, [r7, #15]
    break;
 800e948:	bf00      	nop
  }
  return usb_status;
 800e94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3714      	adds	r7, #20
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <__errno>:
 800e958:	4b01      	ldr	r3, [pc, #4]	; (800e960 <__errno+0x8>)
 800e95a:	6818      	ldr	r0, [r3, #0]
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	20000110 	.word	0x20000110

0800e964 <__libc_init_array>:
 800e964:	b570      	push	{r4, r5, r6, lr}
 800e966:	4d0d      	ldr	r5, [pc, #52]	; (800e99c <__libc_init_array+0x38>)
 800e968:	4c0d      	ldr	r4, [pc, #52]	; (800e9a0 <__libc_init_array+0x3c>)
 800e96a:	1b64      	subs	r4, r4, r5
 800e96c:	10a4      	asrs	r4, r4, #2
 800e96e:	2600      	movs	r6, #0
 800e970:	42a6      	cmp	r6, r4
 800e972:	d109      	bne.n	800e988 <__libc_init_array+0x24>
 800e974:	4d0b      	ldr	r5, [pc, #44]	; (800e9a4 <__libc_init_array+0x40>)
 800e976:	4c0c      	ldr	r4, [pc, #48]	; (800e9a8 <__libc_init_array+0x44>)
 800e978:	f005 f9a2 	bl	8013cc0 <_init>
 800e97c:	1b64      	subs	r4, r4, r5
 800e97e:	10a4      	asrs	r4, r4, #2
 800e980:	2600      	movs	r6, #0
 800e982:	42a6      	cmp	r6, r4
 800e984:	d105      	bne.n	800e992 <__libc_init_array+0x2e>
 800e986:	bd70      	pop	{r4, r5, r6, pc}
 800e988:	f855 3b04 	ldr.w	r3, [r5], #4
 800e98c:	4798      	blx	r3
 800e98e:	3601      	adds	r6, #1
 800e990:	e7ee      	b.n	800e970 <__libc_init_array+0xc>
 800e992:	f855 3b04 	ldr.w	r3, [r5], #4
 800e996:	4798      	blx	r3
 800e998:	3601      	adds	r6, #1
 800e99a:	e7f2      	b.n	800e982 <__libc_init_array+0x1e>
 800e99c:	0801565c 	.word	0x0801565c
 800e9a0:	0801565c 	.word	0x0801565c
 800e9a4:	0801565c 	.word	0x0801565c
 800e9a8:	08015660 	.word	0x08015660

0800e9ac <memcpy>:
 800e9ac:	440a      	add	r2, r1
 800e9ae:	4291      	cmp	r1, r2
 800e9b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9b4:	d100      	bne.n	800e9b8 <memcpy+0xc>
 800e9b6:	4770      	bx	lr
 800e9b8:	b510      	push	{r4, lr}
 800e9ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9c2:	4291      	cmp	r1, r2
 800e9c4:	d1f9      	bne.n	800e9ba <memcpy+0xe>
 800e9c6:	bd10      	pop	{r4, pc}

0800e9c8 <memmove>:
 800e9c8:	4288      	cmp	r0, r1
 800e9ca:	b510      	push	{r4, lr}
 800e9cc:	eb01 0402 	add.w	r4, r1, r2
 800e9d0:	d902      	bls.n	800e9d8 <memmove+0x10>
 800e9d2:	4284      	cmp	r4, r0
 800e9d4:	4623      	mov	r3, r4
 800e9d6:	d807      	bhi.n	800e9e8 <memmove+0x20>
 800e9d8:	1e43      	subs	r3, r0, #1
 800e9da:	42a1      	cmp	r1, r4
 800e9dc:	d008      	beq.n	800e9f0 <memmove+0x28>
 800e9de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e9e6:	e7f8      	b.n	800e9da <memmove+0x12>
 800e9e8:	4402      	add	r2, r0
 800e9ea:	4601      	mov	r1, r0
 800e9ec:	428a      	cmp	r2, r1
 800e9ee:	d100      	bne.n	800e9f2 <memmove+0x2a>
 800e9f0:	bd10      	pop	{r4, pc}
 800e9f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e9fa:	e7f7      	b.n	800e9ec <memmove+0x24>

0800e9fc <memset>:
 800e9fc:	4402      	add	r2, r0
 800e9fe:	4603      	mov	r3, r0
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d100      	bne.n	800ea06 <memset+0xa>
 800ea04:	4770      	bx	lr
 800ea06:	f803 1b01 	strb.w	r1, [r3], #1
 800ea0a:	e7f9      	b.n	800ea00 <memset+0x4>

0800ea0c <__cvt>:
 800ea0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea10:	ec55 4b10 	vmov	r4, r5, d0
 800ea14:	2d00      	cmp	r5, #0
 800ea16:	460e      	mov	r6, r1
 800ea18:	4619      	mov	r1, r3
 800ea1a:	462b      	mov	r3, r5
 800ea1c:	bfbb      	ittet	lt
 800ea1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ea22:	461d      	movlt	r5, r3
 800ea24:	2300      	movge	r3, #0
 800ea26:	232d      	movlt	r3, #45	; 0x2d
 800ea28:	700b      	strb	r3, [r1, #0]
 800ea2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ea30:	4691      	mov	r9, r2
 800ea32:	f023 0820 	bic.w	r8, r3, #32
 800ea36:	bfbc      	itt	lt
 800ea38:	4622      	movlt	r2, r4
 800ea3a:	4614      	movlt	r4, r2
 800ea3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ea40:	d005      	beq.n	800ea4e <__cvt+0x42>
 800ea42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ea46:	d100      	bne.n	800ea4a <__cvt+0x3e>
 800ea48:	3601      	adds	r6, #1
 800ea4a:	2102      	movs	r1, #2
 800ea4c:	e000      	b.n	800ea50 <__cvt+0x44>
 800ea4e:	2103      	movs	r1, #3
 800ea50:	ab03      	add	r3, sp, #12
 800ea52:	9301      	str	r3, [sp, #4]
 800ea54:	ab02      	add	r3, sp, #8
 800ea56:	9300      	str	r3, [sp, #0]
 800ea58:	ec45 4b10 	vmov	d0, r4, r5
 800ea5c:	4653      	mov	r3, sl
 800ea5e:	4632      	mov	r2, r6
 800ea60:	f001 ffda 	bl	8010a18 <_dtoa_r>
 800ea64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ea68:	4607      	mov	r7, r0
 800ea6a:	d102      	bne.n	800ea72 <__cvt+0x66>
 800ea6c:	f019 0f01 	tst.w	r9, #1
 800ea70:	d022      	beq.n	800eab8 <__cvt+0xac>
 800ea72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ea76:	eb07 0906 	add.w	r9, r7, r6
 800ea7a:	d110      	bne.n	800ea9e <__cvt+0x92>
 800ea7c:	783b      	ldrb	r3, [r7, #0]
 800ea7e:	2b30      	cmp	r3, #48	; 0x30
 800ea80:	d10a      	bne.n	800ea98 <__cvt+0x8c>
 800ea82:	2200      	movs	r2, #0
 800ea84:	2300      	movs	r3, #0
 800ea86:	4620      	mov	r0, r4
 800ea88:	4629      	mov	r1, r5
 800ea8a:	f7f2 f83d 	bl	8000b08 <__aeabi_dcmpeq>
 800ea8e:	b918      	cbnz	r0, 800ea98 <__cvt+0x8c>
 800ea90:	f1c6 0601 	rsb	r6, r6, #1
 800ea94:	f8ca 6000 	str.w	r6, [sl]
 800ea98:	f8da 3000 	ldr.w	r3, [sl]
 800ea9c:	4499      	add	r9, r3
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	4629      	mov	r1, r5
 800eaa6:	f7f2 f82f 	bl	8000b08 <__aeabi_dcmpeq>
 800eaaa:	b108      	cbz	r0, 800eab0 <__cvt+0xa4>
 800eaac:	f8cd 900c 	str.w	r9, [sp, #12]
 800eab0:	2230      	movs	r2, #48	; 0x30
 800eab2:	9b03      	ldr	r3, [sp, #12]
 800eab4:	454b      	cmp	r3, r9
 800eab6:	d307      	bcc.n	800eac8 <__cvt+0xbc>
 800eab8:	9b03      	ldr	r3, [sp, #12]
 800eaba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eabc:	1bdb      	subs	r3, r3, r7
 800eabe:	4638      	mov	r0, r7
 800eac0:	6013      	str	r3, [r2, #0]
 800eac2:	b004      	add	sp, #16
 800eac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac8:	1c59      	adds	r1, r3, #1
 800eaca:	9103      	str	r1, [sp, #12]
 800eacc:	701a      	strb	r2, [r3, #0]
 800eace:	e7f0      	b.n	800eab2 <__cvt+0xa6>

0800ead0 <__exponent>:
 800ead0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ead2:	4603      	mov	r3, r0
 800ead4:	2900      	cmp	r1, #0
 800ead6:	bfb8      	it	lt
 800ead8:	4249      	neglt	r1, r1
 800eada:	f803 2b02 	strb.w	r2, [r3], #2
 800eade:	bfb4      	ite	lt
 800eae0:	222d      	movlt	r2, #45	; 0x2d
 800eae2:	222b      	movge	r2, #43	; 0x2b
 800eae4:	2909      	cmp	r1, #9
 800eae6:	7042      	strb	r2, [r0, #1]
 800eae8:	dd2a      	ble.n	800eb40 <__exponent+0x70>
 800eaea:	f10d 0407 	add.w	r4, sp, #7
 800eaee:	46a4      	mov	ip, r4
 800eaf0:	270a      	movs	r7, #10
 800eaf2:	46a6      	mov	lr, r4
 800eaf4:	460a      	mov	r2, r1
 800eaf6:	fb91 f6f7 	sdiv	r6, r1, r7
 800eafa:	fb07 1516 	mls	r5, r7, r6, r1
 800eafe:	3530      	adds	r5, #48	; 0x30
 800eb00:	2a63      	cmp	r2, #99	; 0x63
 800eb02:	f104 34ff 	add.w	r4, r4, #4294967295
 800eb06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800eb0a:	4631      	mov	r1, r6
 800eb0c:	dcf1      	bgt.n	800eaf2 <__exponent+0x22>
 800eb0e:	3130      	adds	r1, #48	; 0x30
 800eb10:	f1ae 0502 	sub.w	r5, lr, #2
 800eb14:	f804 1c01 	strb.w	r1, [r4, #-1]
 800eb18:	1c44      	adds	r4, r0, #1
 800eb1a:	4629      	mov	r1, r5
 800eb1c:	4561      	cmp	r1, ip
 800eb1e:	d30a      	bcc.n	800eb36 <__exponent+0x66>
 800eb20:	f10d 0209 	add.w	r2, sp, #9
 800eb24:	eba2 020e 	sub.w	r2, r2, lr
 800eb28:	4565      	cmp	r5, ip
 800eb2a:	bf88      	it	hi
 800eb2c:	2200      	movhi	r2, #0
 800eb2e:	4413      	add	r3, r2
 800eb30:	1a18      	subs	r0, r3, r0
 800eb32:	b003      	add	sp, #12
 800eb34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800eb3e:	e7ed      	b.n	800eb1c <__exponent+0x4c>
 800eb40:	2330      	movs	r3, #48	; 0x30
 800eb42:	3130      	adds	r1, #48	; 0x30
 800eb44:	7083      	strb	r3, [r0, #2]
 800eb46:	70c1      	strb	r1, [r0, #3]
 800eb48:	1d03      	adds	r3, r0, #4
 800eb4a:	e7f1      	b.n	800eb30 <__exponent+0x60>

0800eb4c <_printf_float>:
 800eb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb50:	ed2d 8b02 	vpush	{d8}
 800eb54:	b08d      	sub	sp, #52	; 0x34
 800eb56:	460c      	mov	r4, r1
 800eb58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eb5c:	4616      	mov	r6, r2
 800eb5e:	461f      	mov	r7, r3
 800eb60:	4605      	mov	r5, r0
 800eb62:	f003 fa6d 	bl	8012040 <_localeconv_r>
 800eb66:	f8d0 a000 	ldr.w	sl, [r0]
 800eb6a:	4650      	mov	r0, sl
 800eb6c:	f7f1 fb4a 	bl	8000204 <strlen>
 800eb70:	2300      	movs	r3, #0
 800eb72:	930a      	str	r3, [sp, #40]	; 0x28
 800eb74:	6823      	ldr	r3, [r4, #0]
 800eb76:	9305      	str	r3, [sp, #20]
 800eb78:	f8d8 3000 	ldr.w	r3, [r8]
 800eb7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800eb80:	3307      	adds	r3, #7
 800eb82:	f023 0307 	bic.w	r3, r3, #7
 800eb86:	f103 0208 	add.w	r2, r3, #8
 800eb8a:	f8c8 2000 	str.w	r2, [r8]
 800eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800eb96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800eb9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eb9e:	9307      	str	r3, [sp, #28]
 800eba0:	f8cd 8018 	str.w	r8, [sp, #24]
 800eba4:	ee08 0a10 	vmov	s16, r0
 800eba8:	4b9f      	ldr	r3, [pc, #636]	; (800ee28 <_printf_float+0x2dc>)
 800ebaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebae:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb2:	f7f1 ffdb 	bl	8000b6c <__aeabi_dcmpun>
 800ebb6:	bb88      	cbnz	r0, 800ec1c <_printf_float+0xd0>
 800ebb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ebbc:	4b9a      	ldr	r3, [pc, #616]	; (800ee28 <_printf_float+0x2dc>)
 800ebbe:	f04f 32ff 	mov.w	r2, #4294967295
 800ebc2:	f7f1 ffb5 	bl	8000b30 <__aeabi_dcmple>
 800ebc6:	bb48      	cbnz	r0, 800ec1c <_printf_float+0xd0>
 800ebc8:	2200      	movs	r2, #0
 800ebca:	2300      	movs	r3, #0
 800ebcc:	4640      	mov	r0, r8
 800ebce:	4649      	mov	r1, r9
 800ebd0:	f7f1 ffa4 	bl	8000b1c <__aeabi_dcmplt>
 800ebd4:	b110      	cbz	r0, 800ebdc <_printf_float+0x90>
 800ebd6:	232d      	movs	r3, #45	; 0x2d
 800ebd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebdc:	4b93      	ldr	r3, [pc, #588]	; (800ee2c <_printf_float+0x2e0>)
 800ebde:	4894      	ldr	r0, [pc, #592]	; (800ee30 <_printf_float+0x2e4>)
 800ebe0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ebe4:	bf94      	ite	ls
 800ebe6:	4698      	movls	r8, r3
 800ebe8:	4680      	movhi	r8, r0
 800ebea:	2303      	movs	r3, #3
 800ebec:	6123      	str	r3, [r4, #16]
 800ebee:	9b05      	ldr	r3, [sp, #20]
 800ebf0:	f023 0204 	bic.w	r2, r3, #4
 800ebf4:	6022      	str	r2, [r4, #0]
 800ebf6:	f04f 0900 	mov.w	r9, #0
 800ebfa:	9700      	str	r7, [sp, #0]
 800ebfc:	4633      	mov	r3, r6
 800ebfe:	aa0b      	add	r2, sp, #44	; 0x2c
 800ec00:	4621      	mov	r1, r4
 800ec02:	4628      	mov	r0, r5
 800ec04:	f000 f9d8 	bl	800efb8 <_printf_common>
 800ec08:	3001      	adds	r0, #1
 800ec0a:	f040 8090 	bne.w	800ed2e <_printf_float+0x1e2>
 800ec0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec12:	b00d      	add	sp, #52	; 0x34
 800ec14:	ecbd 8b02 	vpop	{d8}
 800ec18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec1c:	4642      	mov	r2, r8
 800ec1e:	464b      	mov	r3, r9
 800ec20:	4640      	mov	r0, r8
 800ec22:	4649      	mov	r1, r9
 800ec24:	f7f1 ffa2 	bl	8000b6c <__aeabi_dcmpun>
 800ec28:	b140      	cbz	r0, 800ec3c <_printf_float+0xf0>
 800ec2a:	464b      	mov	r3, r9
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	bfbc      	itt	lt
 800ec30:	232d      	movlt	r3, #45	; 0x2d
 800ec32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ec36:	487f      	ldr	r0, [pc, #508]	; (800ee34 <_printf_float+0x2e8>)
 800ec38:	4b7f      	ldr	r3, [pc, #508]	; (800ee38 <_printf_float+0x2ec>)
 800ec3a:	e7d1      	b.n	800ebe0 <_printf_float+0x94>
 800ec3c:	6863      	ldr	r3, [r4, #4]
 800ec3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ec42:	9206      	str	r2, [sp, #24]
 800ec44:	1c5a      	adds	r2, r3, #1
 800ec46:	d13f      	bne.n	800ecc8 <_printf_float+0x17c>
 800ec48:	2306      	movs	r3, #6
 800ec4a:	6063      	str	r3, [r4, #4]
 800ec4c:	9b05      	ldr	r3, [sp, #20]
 800ec4e:	6861      	ldr	r1, [r4, #4]
 800ec50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ec54:	2300      	movs	r3, #0
 800ec56:	9303      	str	r3, [sp, #12]
 800ec58:	ab0a      	add	r3, sp, #40	; 0x28
 800ec5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ec5e:	ab09      	add	r3, sp, #36	; 0x24
 800ec60:	ec49 8b10 	vmov	d0, r8, r9
 800ec64:	9300      	str	r3, [sp, #0]
 800ec66:	6022      	str	r2, [r4, #0]
 800ec68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	f7ff fecd 	bl	800ea0c <__cvt>
 800ec72:	9b06      	ldr	r3, [sp, #24]
 800ec74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec76:	2b47      	cmp	r3, #71	; 0x47
 800ec78:	4680      	mov	r8, r0
 800ec7a:	d108      	bne.n	800ec8e <_printf_float+0x142>
 800ec7c:	1cc8      	adds	r0, r1, #3
 800ec7e:	db02      	blt.n	800ec86 <_printf_float+0x13a>
 800ec80:	6863      	ldr	r3, [r4, #4]
 800ec82:	4299      	cmp	r1, r3
 800ec84:	dd41      	ble.n	800ed0a <_printf_float+0x1be>
 800ec86:	f1ab 0b02 	sub.w	fp, fp, #2
 800ec8a:	fa5f fb8b 	uxtb.w	fp, fp
 800ec8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec92:	d820      	bhi.n	800ecd6 <_printf_float+0x18a>
 800ec94:	3901      	subs	r1, #1
 800ec96:	465a      	mov	r2, fp
 800ec98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ec9c:	9109      	str	r1, [sp, #36]	; 0x24
 800ec9e:	f7ff ff17 	bl	800ead0 <__exponent>
 800eca2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eca4:	1813      	adds	r3, r2, r0
 800eca6:	2a01      	cmp	r2, #1
 800eca8:	4681      	mov	r9, r0
 800ecaa:	6123      	str	r3, [r4, #16]
 800ecac:	dc02      	bgt.n	800ecb4 <_printf_float+0x168>
 800ecae:	6822      	ldr	r2, [r4, #0]
 800ecb0:	07d2      	lsls	r2, r2, #31
 800ecb2:	d501      	bpl.n	800ecb8 <_printf_float+0x16c>
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	6123      	str	r3, [r4, #16]
 800ecb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d09c      	beq.n	800ebfa <_printf_float+0xae>
 800ecc0:	232d      	movs	r3, #45	; 0x2d
 800ecc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecc6:	e798      	b.n	800ebfa <_printf_float+0xae>
 800ecc8:	9a06      	ldr	r2, [sp, #24]
 800ecca:	2a47      	cmp	r2, #71	; 0x47
 800eccc:	d1be      	bne.n	800ec4c <_printf_float+0x100>
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d1bc      	bne.n	800ec4c <_printf_float+0x100>
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	e7b9      	b.n	800ec4a <_printf_float+0xfe>
 800ecd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ecda:	d118      	bne.n	800ed0e <_printf_float+0x1c2>
 800ecdc:	2900      	cmp	r1, #0
 800ecde:	6863      	ldr	r3, [r4, #4]
 800ece0:	dd0b      	ble.n	800ecfa <_printf_float+0x1ae>
 800ece2:	6121      	str	r1, [r4, #16]
 800ece4:	b913      	cbnz	r3, 800ecec <_printf_float+0x1a0>
 800ece6:	6822      	ldr	r2, [r4, #0]
 800ece8:	07d0      	lsls	r0, r2, #31
 800ecea:	d502      	bpl.n	800ecf2 <_printf_float+0x1a6>
 800ecec:	3301      	adds	r3, #1
 800ecee:	440b      	add	r3, r1
 800ecf0:	6123      	str	r3, [r4, #16]
 800ecf2:	65a1      	str	r1, [r4, #88]	; 0x58
 800ecf4:	f04f 0900 	mov.w	r9, #0
 800ecf8:	e7de      	b.n	800ecb8 <_printf_float+0x16c>
 800ecfa:	b913      	cbnz	r3, 800ed02 <_printf_float+0x1b6>
 800ecfc:	6822      	ldr	r2, [r4, #0]
 800ecfe:	07d2      	lsls	r2, r2, #31
 800ed00:	d501      	bpl.n	800ed06 <_printf_float+0x1ba>
 800ed02:	3302      	adds	r3, #2
 800ed04:	e7f4      	b.n	800ecf0 <_printf_float+0x1a4>
 800ed06:	2301      	movs	r3, #1
 800ed08:	e7f2      	b.n	800ecf0 <_printf_float+0x1a4>
 800ed0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ed0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed10:	4299      	cmp	r1, r3
 800ed12:	db05      	blt.n	800ed20 <_printf_float+0x1d4>
 800ed14:	6823      	ldr	r3, [r4, #0]
 800ed16:	6121      	str	r1, [r4, #16]
 800ed18:	07d8      	lsls	r0, r3, #31
 800ed1a:	d5ea      	bpl.n	800ecf2 <_printf_float+0x1a6>
 800ed1c:	1c4b      	adds	r3, r1, #1
 800ed1e:	e7e7      	b.n	800ecf0 <_printf_float+0x1a4>
 800ed20:	2900      	cmp	r1, #0
 800ed22:	bfd4      	ite	le
 800ed24:	f1c1 0202 	rsble	r2, r1, #2
 800ed28:	2201      	movgt	r2, #1
 800ed2a:	4413      	add	r3, r2
 800ed2c:	e7e0      	b.n	800ecf0 <_printf_float+0x1a4>
 800ed2e:	6823      	ldr	r3, [r4, #0]
 800ed30:	055a      	lsls	r2, r3, #21
 800ed32:	d407      	bmi.n	800ed44 <_printf_float+0x1f8>
 800ed34:	6923      	ldr	r3, [r4, #16]
 800ed36:	4642      	mov	r2, r8
 800ed38:	4631      	mov	r1, r6
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	47b8      	blx	r7
 800ed3e:	3001      	adds	r0, #1
 800ed40:	d12c      	bne.n	800ed9c <_printf_float+0x250>
 800ed42:	e764      	b.n	800ec0e <_printf_float+0xc2>
 800ed44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ed48:	f240 80e0 	bls.w	800ef0c <_printf_float+0x3c0>
 800ed4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ed50:	2200      	movs	r2, #0
 800ed52:	2300      	movs	r3, #0
 800ed54:	f7f1 fed8 	bl	8000b08 <__aeabi_dcmpeq>
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	d034      	beq.n	800edc6 <_printf_float+0x27a>
 800ed5c:	4a37      	ldr	r2, [pc, #220]	; (800ee3c <_printf_float+0x2f0>)
 800ed5e:	2301      	movs	r3, #1
 800ed60:	4631      	mov	r1, r6
 800ed62:	4628      	mov	r0, r5
 800ed64:	47b8      	blx	r7
 800ed66:	3001      	adds	r0, #1
 800ed68:	f43f af51 	beq.w	800ec0e <_printf_float+0xc2>
 800ed6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed70:	429a      	cmp	r2, r3
 800ed72:	db02      	blt.n	800ed7a <_printf_float+0x22e>
 800ed74:	6823      	ldr	r3, [r4, #0]
 800ed76:	07d8      	lsls	r0, r3, #31
 800ed78:	d510      	bpl.n	800ed9c <_printf_float+0x250>
 800ed7a:	ee18 3a10 	vmov	r3, s16
 800ed7e:	4652      	mov	r2, sl
 800ed80:	4631      	mov	r1, r6
 800ed82:	4628      	mov	r0, r5
 800ed84:	47b8      	blx	r7
 800ed86:	3001      	adds	r0, #1
 800ed88:	f43f af41 	beq.w	800ec0e <_printf_float+0xc2>
 800ed8c:	f04f 0800 	mov.w	r8, #0
 800ed90:	f104 091a 	add.w	r9, r4, #26
 800ed94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed96:	3b01      	subs	r3, #1
 800ed98:	4543      	cmp	r3, r8
 800ed9a:	dc09      	bgt.n	800edb0 <_printf_float+0x264>
 800ed9c:	6823      	ldr	r3, [r4, #0]
 800ed9e:	079b      	lsls	r3, r3, #30
 800eda0:	f100 8105 	bmi.w	800efae <_printf_float+0x462>
 800eda4:	68e0      	ldr	r0, [r4, #12]
 800eda6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eda8:	4298      	cmp	r0, r3
 800edaa:	bfb8      	it	lt
 800edac:	4618      	movlt	r0, r3
 800edae:	e730      	b.n	800ec12 <_printf_float+0xc6>
 800edb0:	2301      	movs	r3, #1
 800edb2:	464a      	mov	r2, r9
 800edb4:	4631      	mov	r1, r6
 800edb6:	4628      	mov	r0, r5
 800edb8:	47b8      	blx	r7
 800edba:	3001      	adds	r0, #1
 800edbc:	f43f af27 	beq.w	800ec0e <_printf_float+0xc2>
 800edc0:	f108 0801 	add.w	r8, r8, #1
 800edc4:	e7e6      	b.n	800ed94 <_printf_float+0x248>
 800edc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edc8:	2b00      	cmp	r3, #0
 800edca:	dc39      	bgt.n	800ee40 <_printf_float+0x2f4>
 800edcc:	4a1b      	ldr	r2, [pc, #108]	; (800ee3c <_printf_float+0x2f0>)
 800edce:	2301      	movs	r3, #1
 800edd0:	4631      	mov	r1, r6
 800edd2:	4628      	mov	r0, r5
 800edd4:	47b8      	blx	r7
 800edd6:	3001      	adds	r0, #1
 800edd8:	f43f af19 	beq.w	800ec0e <_printf_float+0xc2>
 800eddc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ede0:	4313      	orrs	r3, r2
 800ede2:	d102      	bne.n	800edea <_printf_float+0x29e>
 800ede4:	6823      	ldr	r3, [r4, #0]
 800ede6:	07d9      	lsls	r1, r3, #31
 800ede8:	d5d8      	bpl.n	800ed9c <_printf_float+0x250>
 800edea:	ee18 3a10 	vmov	r3, s16
 800edee:	4652      	mov	r2, sl
 800edf0:	4631      	mov	r1, r6
 800edf2:	4628      	mov	r0, r5
 800edf4:	47b8      	blx	r7
 800edf6:	3001      	adds	r0, #1
 800edf8:	f43f af09 	beq.w	800ec0e <_printf_float+0xc2>
 800edfc:	f04f 0900 	mov.w	r9, #0
 800ee00:	f104 0a1a 	add.w	sl, r4, #26
 800ee04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee06:	425b      	negs	r3, r3
 800ee08:	454b      	cmp	r3, r9
 800ee0a:	dc01      	bgt.n	800ee10 <_printf_float+0x2c4>
 800ee0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee0e:	e792      	b.n	800ed36 <_printf_float+0x1ea>
 800ee10:	2301      	movs	r3, #1
 800ee12:	4652      	mov	r2, sl
 800ee14:	4631      	mov	r1, r6
 800ee16:	4628      	mov	r0, r5
 800ee18:	47b8      	blx	r7
 800ee1a:	3001      	adds	r0, #1
 800ee1c:	f43f aef7 	beq.w	800ec0e <_printf_float+0xc2>
 800ee20:	f109 0901 	add.w	r9, r9, #1
 800ee24:	e7ee      	b.n	800ee04 <_printf_float+0x2b8>
 800ee26:	bf00      	nop
 800ee28:	7fefffff 	.word	0x7fefffff
 800ee2c:	080152a0 	.word	0x080152a0
 800ee30:	080152a4 	.word	0x080152a4
 800ee34:	080152ac 	.word	0x080152ac
 800ee38:	080152a8 	.word	0x080152a8
 800ee3c:	08015601 	.word	0x08015601
 800ee40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee44:	429a      	cmp	r2, r3
 800ee46:	bfa8      	it	ge
 800ee48:	461a      	movge	r2, r3
 800ee4a:	2a00      	cmp	r2, #0
 800ee4c:	4691      	mov	r9, r2
 800ee4e:	dc37      	bgt.n	800eec0 <_printf_float+0x374>
 800ee50:	f04f 0b00 	mov.w	fp, #0
 800ee54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee58:	f104 021a 	add.w	r2, r4, #26
 800ee5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee5e:	9305      	str	r3, [sp, #20]
 800ee60:	eba3 0309 	sub.w	r3, r3, r9
 800ee64:	455b      	cmp	r3, fp
 800ee66:	dc33      	bgt.n	800eed0 <_printf_float+0x384>
 800ee68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	db3b      	blt.n	800eee8 <_printf_float+0x39c>
 800ee70:	6823      	ldr	r3, [r4, #0]
 800ee72:	07da      	lsls	r2, r3, #31
 800ee74:	d438      	bmi.n	800eee8 <_printf_float+0x39c>
 800ee76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee78:	9a05      	ldr	r2, [sp, #20]
 800ee7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee7c:	1a9a      	subs	r2, r3, r2
 800ee7e:	eba3 0901 	sub.w	r9, r3, r1
 800ee82:	4591      	cmp	r9, r2
 800ee84:	bfa8      	it	ge
 800ee86:	4691      	movge	r9, r2
 800ee88:	f1b9 0f00 	cmp.w	r9, #0
 800ee8c:	dc35      	bgt.n	800eefa <_printf_float+0x3ae>
 800ee8e:	f04f 0800 	mov.w	r8, #0
 800ee92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee96:	f104 0a1a 	add.w	sl, r4, #26
 800ee9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee9e:	1a9b      	subs	r3, r3, r2
 800eea0:	eba3 0309 	sub.w	r3, r3, r9
 800eea4:	4543      	cmp	r3, r8
 800eea6:	f77f af79 	ble.w	800ed9c <_printf_float+0x250>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	4652      	mov	r2, sl
 800eeae:	4631      	mov	r1, r6
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	47b8      	blx	r7
 800eeb4:	3001      	adds	r0, #1
 800eeb6:	f43f aeaa 	beq.w	800ec0e <_printf_float+0xc2>
 800eeba:	f108 0801 	add.w	r8, r8, #1
 800eebe:	e7ec      	b.n	800ee9a <_printf_float+0x34e>
 800eec0:	4613      	mov	r3, r2
 800eec2:	4631      	mov	r1, r6
 800eec4:	4642      	mov	r2, r8
 800eec6:	4628      	mov	r0, r5
 800eec8:	47b8      	blx	r7
 800eeca:	3001      	adds	r0, #1
 800eecc:	d1c0      	bne.n	800ee50 <_printf_float+0x304>
 800eece:	e69e      	b.n	800ec0e <_printf_float+0xc2>
 800eed0:	2301      	movs	r3, #1
 800eed2:	4631      	mov	r1, r6
 800eed4:	4628      	mov	r0, r5
 800eed6:	9205      	str	r2, [sp, #20]
 800eed8:	47b8      	blx	r7
 800eeda:	3001      	adds	r0, #1
 800eedc:	f43f ae97 	beq.w	800ec0e <_printf_float+0xc2>
 800eee0:	9a05      	ldr	r2, [sp, #20]
 800eee2:	f10b 0b01 	add.w	fp, fp, #1
 800eee6:	e7b9      	b.n	800ee5c <_printf_float+0x310>
 800eee8:	ee18 3a10 	vmov	r3, s16
 800eeec:	4652      	mov	r2, sl
 800eeee:	4631      	mov	r1, r6
 800eef0:	4628      	mov	r0, r5
 800eef2:	47b8      	blx	r7
 800eef4:	3001      	adds	r0, #1
 800eef6:	d1be      	bne.n	800ee76 <_printf_float+0x32a>
 800eef8:	e689      	b.n	800ec0e <_printf_float+0xc2>
 800eefa:	9a05      	ldr	r2, [sp, #20]
 800eefc:	464b      	mov	r3, r9
 800eefe:	4442      	add	r2, r8
 800ef00:	4631      	mov	r1, r6
 800ef02:	4628      	mov	r0, r5
 800ef04:	47b8      	blx	r7
 800ef06:	3001      	adds	r0, #1
 800ef08:	d1c1      	bne.n	800ee8e <_printf_float+0x342>
 800ef0a:	e680      	b.n	800ec0e <_printf_float+0xc2>
 800ef0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef0e:	2a01      	cmp	r2, #1
 800ef10:	dc01      	bgt.n	800ef16 <_printf_float+0x3ca>
 800ef12:	07db      	lsls	r3, r3, #31
 800ef14:	d538      	bpl.n	800ef88 <_printf_float+0x43c>
 800ef16:	2301      	movs	r3, #1
 800ef18:	4642      	mov	r2, r8
 800ef1a:	4631      	mov	r1, r6
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	47b8      	blx	r7
 800ef20:	3001      	adds	r0, #1
 800ef22:	f43f ae74 	beq.w	800ec0e <_printf_float+0xc2>
 800ef26:	ee18 3a10 	vmov	r3, s16
 800ef2a:	4652      	mov	r2, sl
 800ef2c:	4631      	mov	r1, r6
 800ef2e:	4628      	mov	r0, r5
 800ef30:	47b8      	blx	r7
 800ef32:	3001      	adds	r0, #1
 800ef34:	f43f ae6b 	beq.w	800ec0e <_printf_float+0xc2>
 800ef38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	2300      	movs	r3, #0
 800ef40:	f7f1 fde2 	bl	8000b08 <__aeabi_dcmpeq>
 800ef44:	b9d8      	cbnz	r0, 800ef7e <_printf_float+0x432>
 800ef46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef48:	f108 0201 	add.w	r2, r8, #1
 800ef4c:	3b01      	subs	r3, #1
 800ef4e:	4631      	mov	r1, r6
 800ef50:	4628      	mov	r0, r5
 800ef52:	47b8      	blx	r7
 800ef54:	3001      	adds	r0, #1
 800ef56:	d10e      	bne.n	800ef76 <_printf_float+0x42a>
 800ef58:	e659      	b.n	800ec0e <_printf_float+0xc2>
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	4652      	mov	r2, sl
 800ef5e:	4631      	mov	r1, r6
 800ef60:	4628      	mov	r0, r5
 800ef62:	47b8      	blx	r7
 800ef64:	3001      	adds	r0, #1
 800ef66:	f43f ae52 	beq.w	800ec0e <_printf_float+0xc2>
 800ef6a:	f108 0801 	add.w	r8, r8, #1
 800ef6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef70:	3b01      	subs	r3, #1
 800ef72:	4543      	cmp	r3, r8
 800ef74:	dcf1      	bgt.n	800ef5a <_printf_float+0x40e>
 800ef76:	464b      	mov	r3, r9
 800ef78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ef7c:	e6dc      	b.n	800ed38 <_printf_float+0x1ec>
 800ef7e:	f04f 0800 	mov.w	r8, #0
 800ef82:	f104 0a1a 	add.w	sl, r4, #26
 800ef86:	e7f2      	b.n	800ef6e <_printf_float+0x422>
 800ef88:	2301      	movs	r3, #1
 800ef8a:	4642      	mov	r2, r8
 800ef8c:	e7df      	b.n	800ef4e <_printf_float+0x402>
 800ef8e:	2301      	movs	r3, #1
 800ef90:	464a      	mov	r2, r9
 800ef92:	4631      	mov	r1, r6
 800ef94:	4628      	mov	r0, r5
 800ef96:	47b8      	blx	r7
 800ef98:	3001      	adds	r0, #1
 800ef9a:	f43f ae38 	beq.w	800ec0e <_printf_float+0xc2>
 800ef9e:	f108 0801 	add.w	r8, r8, #1
 800efa2:	68e3      	ldr	r3, [r4, #12]
 800efa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800efa6:	1a5b      	subs	r3, r3, r1
 800efa8:	4543      	cmp	r3, r8
 800efaa:	dcf0      	bgt.n	800ef8e <_printf_float+0x442>
 800efac:	e6fa      	b.n	800eda4 <_printf_float+0x258>
 800efae:	f04f 0800 	mov.w	r8, #0
 800efb2:	f104 0919 	add.w	r9, r4, #25
 800efb6:	e7f4      	b.n	800efa2 <_printf_float+0x456>

0800efb8 <_printf_common>:
 800efb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efbc:	4616      	mov	r6, r2
 800efbe:	4699      	mov	r9, r3
 800efc0:	688a      	ldr	r2, [r1, #8]
 800efc2:	690b      	ldr	r3, [r1, #16]
 800efc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efc8:	4293      	cmp	r3, r2
 800efca:	bfb8      	it	lt
 800efcc:	4613      	movlt	r3, r2
 800efce:	6033      	str	r3, [r6, #0]
 800efd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efd4:	4607      	mov	r7, r0
 800efd6:	460c      	mov	r4, r1
 800efd8:	b10a      	cbz	r2, 800efde <_printf_common+0x26>
 800efda:	3301      	adds	r3, #1
 800efdc:	6033      	str	r3, [r6, #0]
 800efde:	6823      	ldr	r3, [r4, #0]
 800efe0:	0699      	lsls	r1, r3, #26
 800efe2:	bf42      	ittt	mi
 800efe4:	6833      	ldrmi	r3, [r6, #0]
 800efe6:	3302      	addmi	r3, #2
 800efe8:	6033      	strmi	r3, [r6, #0]
 800efea:	6825      	ldr	r5, [r4, #0]
 800efec:	f015 0506 	ands.w	r5, r5, #6
 800eff0:	d106      	bne.n	800f000 <_printf_common+0x48>
 800eff2:	f104 0a19 	add.w	sl, r4, #25
 800eff6:	68e3      	ldr	r3, [r4, #12]
 800eff8:	6832      	ldr	r2, [r6, #0]
 800effa:	1a9b      	subs	r3, r3, r2
 800effc:	42ab      	cmp	r3, r5
 800effe:	dc26      	bgt.n	800f04e <_printf_common+0x96>
 800f000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f004:	1e13      	subs	r3, r2, #0
 800f006:	6822      	ldr	r2, [r4, #0]
 800f008:	bf18      	it	ne
 800f00a:	2301      	movne	r3, #1
 800f00c:	0692      	lsls	r2, r2, #26
 800f00e:	d42b      	bmi.n	800f068 <_printf_common+0xb0>
 800f010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f014:	4649      	mov	r1, r9
 800f016:	4638      	mov	r0, r7
 800f018:	47c0      	blx	r8
 800f01a:	3001      	adds	r0, #1
 800f01c:	d01e      	beq.n	800f05c <_printf_common+0xa4>
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	68e5      	ldr	r5, [r4, #12]
 800f022:	6832      	ldr	r2, [r6, #0]
 800f024:	f003 0306 	and.w	r3, r3, #6
 800f028:	2b04      	cmp	r3, #4
 800f02a:	bf08      	it	eq
 800f02c:	1aad      	subeq	r5, r5, r2
 800f02e:	68a3      	ldr	r3, [r4, #8]
 800f030:	6922      	ldr	r2, [r4, #16]
 800f032:	bf0c      	ite	eq
 800f034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f038:	2500      	movne	r5, #0
 800f03a:	4293      	cmp	r3, r2
 800f03c:	bfc4      	itt	gt
 800f03e:	1a9b      	subgt	r3, r3, r2
 800f040:	18ed      	addgt	r5, r5, r3
 800f042:	2600      	movs	r6, #0
 800f044:	341a      	adds	r4, #26
 800f046:	42b5      	cmp	r5, r6
 800f048:	d11a      	bne.n	800f080 <_printf_common+0xc8>
 800f04a:	2000      	movs	r0, #0
 800f04c:	e008      	b.n	800f060 <_printf_common+0xa8>
 800f04e:	2301      	movs	r3, #1
 800f050:	4652      	mov	r2, sl
 800f052:	4649      	mov	r1, r9
 800f054:	4638      	mov	r0, r7
 800f056:	47c0      	blx	r8
 800f058:	3001      	adds	r0, #1
 800f05a:	d103      	bne.n	800f064 <_printf_common+0xac>
 800f05c:	f04f 30ff 	mov.w	r0, #4294967295
 800f060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f064:	3501      	adds	r5, #1
 800f066:	e7c6      	b.n	800eff6 <_printf_common+0x3e>
 800f068:	18e1      	adds	r1, r4, r3
 800f06a:	1c5a      	adds	r2, r3, #1
 800f06c:	2030      	movs	r0, #48	; 0x30
 800f06e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f072:	4422      	add	r2, r4
 800f074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f07c:	3302      	adds	r3, #2
 800f07e:	e7c7      	b.n	800f010 <_printf_common+0x58>
 800f080:	2301      	movs	r3, #1
 800f082:	4622      	mov	r2, r4
 800f084:	4649      	mov	r1, r9
 800f086:	4638      	mov	r0, r7
 800f088:	47c0      	blx	r8
 800f08a:	3001      	adds	r0, #1
 800f08c:	d0e6      	beq.n	800f05c <_printf_common+0xa4>
 800f08e:	3601      	adds	r6, #1
 800f090:	e7d9      	b.n	800f046 <_printf_common+0x8e>
	...

0800f094 <_printf_i>:
 800f094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f098:	7e0f      	ldrb	r7, [r1, #24]
 800f09a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f09c:	2f78      	cmp	r7, #120	; 0x78
 800f09e:	4691      	mov	r9, r2
 800f0a0:	4680      	mov	r8, r0
 800f0a2:	460c      	mov	r4, r1
 800f0a4:	469a      	mov	sl, r3
 800f0a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f0aa:	d807      	bhi.n	800f0bc <_printf_i+0x28>
 800f0ac:	2f62      	cmp	r7, #98	; 0x62
 800f0ae:	d80a      	bhi.n	800f0c6 <_printf_i+0x32>
 800f0b0:	2f00      	cmp	r7, #0
 800f0b2:	f000 80d8 	beq.w	800f266 <_printf_i+0x1d2>
 800f0b6:	2f58      	cmp	r7, #88	; 0x58
 800f0b8:	f000 80a3 	beq.w	800f202 <_printf_i+0x16e>
 800f0bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f0c4:	e03a      	b.n	800f13c <_printf_i+0xa8>
 800f0c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f0ca:	2b15      	cmp	r3, #21
 800f0cc:	d8f6      	bhi.n	800f0bc <_printf_i+0x28>
 800f0ce:	a101      	add	r1, pc, #4	; (adr r1, 800f0d4 <_printf_i+0x40>)
 800f0d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f0d4:	0800f12d 	.word	0x0800f12d
 800f0d8:	0800f141 	.word	0x0800f141
 800f0dc:	0800f0bd 	.word	0x0800f0bd
 800f0e0:	0800f0bd 	.word	0x0800f0bd
 800f0e4:	0800f0bd 	.word	0x0800f0bd
 800f0e8:	0800f0bd 	.word	0x0800f0bd
 800f0ec:	0800f141 	.word	0x0800f141
 800f0f0:	0800f0bd 	.word	0x0800f0bd
 800f0f4:	0800f0bd 	.word	0x0800f0bd
 800f0f8:	0800f0bd 	.word	0x0800f0bd
 800f0fc:	0800f0bd 	.word	0x0800f0bd
 800f100:	0800f24d 	.word	0x0800f24d
 800f104:	0800f171 	.word	0x0800f171
 800f108:	0800f22f 	.word	0x0800f22f
 800f10c:	0800f0bd 	.word	0x0800f0bd
 800f110:	0800f0bd 	.word	0x0800f0bd
 800f114:	0800f26f 	.word	0x0800f26f
 800f118:	0800f0bd 	.word	0x0800f0bd
 800f11c:	0800f171 	.word	0x0800f171
 800f120:	0800f0bd 	.word	0x0800f0bd
 800f124:	0800f0bd 	.word	0x0800f0bd
 800f128:	0800f237 	.word	0x0800f237
 800f12c:	682b      	ldr	r3, [r5, #0]
 800f12e:	1d1a      	adds	r2, r3, #4
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	602a      	str	r2, [r5, #0]
 800f134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f13c:	2301      	movs	r3, #1
 800f13e:	e0a3      	b.n	800f288 <_printf_i+0x1f4>
 800f140:	6820      	ldr	r0, [r4, #0]
 800f142:	6829      	ldr	r1, [r5, #0]
 800f144:	0606      	lsls	r6, r0, #24
 800f146:	f101 0304 	add.w	r3, r1, #4
 800f14a:	d50a      	bpl.n	800f162 <_printf_i+0xce>
 800f14c:	680e      	ldr	r6, [r1, #0]
 800f14e:	602b      	str	r3, [r5, #0]
 800f150:	2e00      	cmp	r6, #0
 800f152:	da03      	bge.n	800f15c <_printf_i+0xc8>
 800f154:	232d      	movs	r3, #45	; 0x2d
 800f156:	4276      	negs	r6, r6
 800f158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f15c:	485e      	ldr	r0, [pc, #376]	; (800f2d8 <_printf_i+0x244>)
 800f15e:	230a      	movs	r3, #10
 800f160:	e019      	b.n	800f196 <_printf_i+0x102>
 800f162:	680e      	ldr	r6, [r1, #0]
 800f164:	602b      	str	r3, [r5, #0]
 800f166:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f16a:	bf18      	it	ne
 800f16c:	b236      	sxthne	r6, r6
 800f16e:	e7ef      	b.n	800f150 <_printf_i+0xbc>
 800f170:	682b      	ldr	r3, [r5, #0]
 800f172:	6820      	ldr	r0, [r4, #0]
 800f174:	1d19      	adds	r1, r3, #4
 800f176:	6029      	str	r1, [r5, #0]
 800f178:	0601      	lsls	r1, r0, #24
 800f17a:	d501      	bpl.n	800f180 <_printf_i+0xec>
 800f17c:	681e      	ldr	r6, [r3, #0]
 800f17e:	e002      	b.n	800f186 <_printf_i+0xf2>
 800f180:	0646      	lsls	r6, r0, #25
 800f182:	d5fb      	bpl.n	800f17c <_printf_i+0xe8>
 800f184:	881e      	ldrh	r6, [r3, #0]
 800f186:	4854      	ldr	r0, [pc, #336]	; (800f2d8 <_printf_i+0x244>)
 800f188:	2f6f      	cmp	r7, #111	; 0x6f
 800f18a:	bf0c      	ite	eq
 800f18c:	2308      	moveq	r3, #8
 800f18e:	230a      	movne	r3, #10
 800f190:	2100      	movs	r1, #0
 800f192:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f196:	6865      	ldr	r5, [r4, #4]
 800f198:	60a5      	str	r5, [r4, #8]
 800f19a:	2d00      	cmp	r5, #0
 800f19c:	bfa2      	ittt	ge
 800f19e:	6821      	ldrge	r1, [r4, #0]
 800f1a0:	f021 0104 	bicge.w	r1, r1, #4
 800f1a4:	6021      	strge	r1, [r4, #0]
 800f1a6:	b90e      	cbnz	r6, 800f1ac <_printf_i+0x118>
 800f1a8:	2d00      	cmp	r5, #0
 800f1aa:	d04d      	beq.n	800f248 <_printf_i+0x1b4>
 800f1ac:	4615      	mov	r5, r2
 800f1ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800f1b2:	fb03 6711 	mls	r7, r3, r1, r6
 800f1b6:	5dc7      	ldrb	r7, [r0, r7]
 800f1b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f1bc:	4637      	mov	r7, r6
 800f1be:	42bb      	cmp	r3, r7
 800f1c0:	460e      	mov	r6, r1
 800f1c2:	d9f4      	bls.n	800f1ae <_printf_i+0x11a>
 800f1c4:	2b08      	cmp	r3, #8
 800f1c6:	d10b      	bne.n	800f1e0 <_printf_i+0x14c>
 800f1c8:	6823      	ldr	r3, [r4, #0]
 800f1ca:	07de      	lsls	r6, r3, #31
 800f1cc:	d508      	bpl.n	800f1e0 <_printf_i+0x14c>
 800f1ce:	6923      	ldr	r3, [r4, #16]
 800f1d0:	6861      	ldr	r1, [r4, #4]
 800f1d2:	4299      	cmp	r1, r3
 800f1d4:	bfde      	ittt	le
 800f1d6:	2330      	movle	r3, #48	; 0x30
 800f1d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f1dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f1e0:	1b52      	subs	r2, r2, r5
 800f1e2:	6122      	str	r2, [r4, #16]
 800f1e4:	f8cd a000 	str.w	sl, [sp]
 800f1e8:	464b      	mov	r3, r9
 800f1ea:	aa03      	add	r2, sp, #12
 800f1ec:	4621      	mov	r1, r4
 800f1ee:	4640      	mov	r0, r8
 800f1f0:	f7ff fee2 	bl	800efb8 <_printf_common>
 800f1f4:	3001      	adds	r0, #1
 800f1f6:	d14c      	bne.n	800f292 <_printf_i+0x1fe>
 800f1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1fc:	b004      	add	sp, #16
 800f1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f202:	4835      	ldr	r0, [pc, #212]	; (800f2d8 <_printf_i+0x244>)
 800f204:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f208:	6829      	ldr	r1, [r5, #0]
 800f20a:	6823      	ldr	r3, [r4, #0]
 800f20c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f210:	6029      	str	r1, [r5, #0]
 800f212:	061d      	lsls	r5, r3, #24
 800f214:	d514      	bpl.n	800f240 <_printf_i+0x1ac>
 800f216:	07df      	lsls	r7, r3, #31
 800f218:	bf44      	itt	mi
 800f21a:	f043 0320 	orrmi.w	r3, r3, #32
 800f21e:	6023      	strmi	r3, [r4, #0]
 800f220:	b91e      	cbnz	r6, 800f22a <_printf_i+0x196>
 800f222:	6823      	ldr	r3, [r4, #0]
 800f224:	f023 0320 	bic.w	r3, r3, #32
 800f228:	6023      	str	r3, [r4, #0]
 800f22a:	2310      	movs	r3, #16
 800f22c:	e7b0      	b.n	800f190 <_printf_i+0xfc>
 800f22e:	6823      	ldr	r3, [r4, #0]
 800f230:	f043 0320 	orr.w	r3, r3, #32
 800f234:	6023      	str	r3, [r4, #0]
 800f236:	2378      	movs	r3, #120	; 0x78
 800f238:	4828      	ldr	r0, [pc, #160]	; (800f2dc <_printf_i+0x248>)
 800f23a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f23e:	e7e3      	b.n	800f208 <_printf_i+0x174>
 800f240:	0659      	lsls	r1, r3, #25
 800f242:	bf48      	it	mi
 800f244:	b2b6      	uxthmi	r6, r6
 800f246:	e7e6      	b.n	800f216 <_printf_i+0x182>
 800f248:	4615      	mov	r5, r2
 800f24a:	e7bb      	b.n	800f1c4 <_printf_i+0x130>
 800f24c:	682b      	ldr	r3, [r5, #0]
 800f24e:	6826      	ldr	r6, [r4, #0]
 800f250:	6961      	ldr	r1, [r4, #20]
 800f252:	1d18      	adds	r0, r3, #4
 800f254:	6028      	str	r0, [r5, #0]
 800f256:	0635      	lsls	r5, r6, #24
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	d501      	bpl.n	800f260 <_printf_i+0x1cc>
 800f25c:	6019      	str	r1, [r3, #0]
 800f25e:	e002      	b.n	800f266 <_printf_i+0x1d2>
 800f260:	0670      	lsls	r0, r6, #25
 800f262:	d5fb      	bpl.n	800f25c <_printf_i+0x1c8>
 800f264:	8019      	strh	r1, [r3, #0]
 800f266:	2300      	movs	r3, #0
 800f268:	6123      	str	r3, [r4, #16]
 800f26a:	4615      	mov	r5, r2
 800f26c:	e7ba      	b.n	800f1e4 <_printf_i+0x150>
 800f26e:	682b      	ldr	r3, [r5, #0]
 800f270:	1d1a      	adds	r2, r3, #4
 800f272:	602a      	str	r2, [r5, #0]
 800f274:	681d      	ldr	r5, [r3, #0]
 800f276:	6862      	ldr	r2, [r4, #4]
 800f278:	2100      	movs	r1, #0
 800f27a:	4628      	mov	r0, r5
 800f27c:	f7f0 ffd0 	bl	8000220 <memchr>
 800f280:	b108      	cbz	r0, 800f286 <_printf_i+0x1f2>
 800f282:	1b40      	subs	r0, r0, r5
 800f284:	6060      	str	r0, [r4, #4]
 800f286:	6863      	ldr	r3, [r4, #4]
 800f288:	6123      	str	r3, [r4, #16]
 800f28a:	2300      	movs	r3, #0
 800f28c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f290:	e7a8      	b.n	800f1e4 <_printf_i+0x150>
 800f292:	6923      	ldr	r3, [r4, #16]
 800f294:	462a      	mov	r2, r5
 800f296:	4649      	mov	r1, r9
 800f298:	4640      	mov	r0, r8
 800f29a:	47d0      	blx	sl
 800f29c:	3001      	adds	r0, #1
 800f29e:	d0ab      	beq.n	800f1f8 <_printf_i+0x164>
 800f2a0:	6823      	ldr	r3, [r4, #0]
 800f2a2:	079b      	lsls	r3, r3, #30
 800f2a4:	d413      	bmi.n	800f2ce <_printf_i+0x23a>
 800f2a6:	68e0      	ldr	r0, [r4, #12]
 800f2a8:	9b03      	ldr	r3, [sp, #12]
 800f2aa:	4298      	cmp	r0, r3
 800f2ac:	bfb8      	it	lt
 800f2ae:	4618      	movlt	r0, r3
 800f2b0:	e7a4      	b.n	800f1fc <_printf_i+0x168>
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	4632      	mov	r2, r6
 800f2b6:	4649      	mov	r1, r9
 800f2b8:	4640      	mov	r0, r8
 800f2ba:	47d0      	blx	sl
 800f2bc:	3001      	adds	r0, #1
 800f2be:	d09b      	beq.n	800f1f8 <_printf_i+0x164>
 800f2c0:	3501      	adds	r5, #1
 800f2c2:	68e3      	ldr	r3, [r4, #12]
 800f2c4:	9903      	ldr	r1, [sp, #12]
 800f2c6:	1a5b      	subs	r3, r3, r1
 800f2c8:	42ab      	cmp	r3, r5
 800f2ca:	dcf2      	bgt.n	800f2b2 <_printf_i+0x21e>
 800f2cc:	e7eb      	b.n	800f2a6 <_printf_i+0x212>
 800f2ce:	2500      	movs	r5, #0
 800f2d0:	f104 0619 	add.w	r6, r4, #25
 800f2d4:	e7f5      	b.n	800f2c2 <_printf_i+0x22e>
 800f2d6:	bf00      	nop
 800f2d8:	080152b0 	.word	0x080152b0
 800f2dc:	080152c1 	.word	0x080152c1

0800f2e0 <_scanf_float>:
 800f2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e4:	b087      	sub	sp, #28
 800f2e6:	4617      	mov	r7, r2
 800f2e8:	9303      	str	r3, [sp, #12]
 800f2ea:	688b      	ldr	r3, [r1, #8]
 800f2ec:	1e5a      	subs	r2, r3, #1
 800f2ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f2f2:	bf83      	ittte	hi
 800f2f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f2f8:	195b      	addhi	r3, r3, r5
 800f2fa:	9302      	strhi	r3, [sp, #8]
 800f2fc:	2300      	movls	r3, #0
 800f2fe:	bf86      	itte	hi
 800f300:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f304:	608b      	strhi	r3, [r1, #8]
 800f306:	9302      	strls	r3, [sp, #8]
 800f308:	680b      	ldr	r3, [r1, #0]
 800f30a:	468b      	mov	fp, r1
 800f30c:	2500      	movs	r5, #0
 800f30e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f312:	f84b 3b1c 	str.w	r3, [fp], #28
 800f316:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f31a:	4680      	mov	r8, r0
 800f31c:	460c      	mov	r4, r1
 800f31e:	465e      	mov	r6, fp
 800f320:	46aa      	mov	sl, r5
 800f322:	46a9      	mov	r9, r5
 800f324:	9501      	str	r5, [sp, #4]
 800f326:	68a2      	ldr	r2, [r4, #8]
 800f328:	b152      	cbz	r2, 800f340 <_scanf_float+0x60>
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	2b4e      	cmp	r3, #78	; 0x4e
 800f330:	d864      	bhi.n	800f3fc <_scanf_float+0x11c>
 800f332:	2b40      	cmp	r3, #64	; 0x40
 800f334:	d83c      	bhi.n	800f3b0 <_scanf_float+0xd0>
 800f336:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f33a:	b2c8      	uxtb	r0, r1
 800f33c:	280e      	cmp	r0, #14
 800f33e:	d93a      	bls.n	800f3b6 <_scanf_float+0xd6>
 800f340:	f1b9 0f00 	cmp.w	r9, #0
 800f344:	d003      	beq.n	800f34e <_scanf_float+0x6e>
 800f346:	6823      	ldr	r3, [r4, #0]
 800f348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f34c:	6023      	str	r3, [r4, #0]
 800f34e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f352:	f1ba 0f01 	cmp.w	sl, #1
 800f356:	f200 8113 	bhi.w	800f580 <_scanf_float+0x2a0>
 800f35a:	455e      	cmp	r6, fp
 800f35c:	f200 8105 	bhi.w	800f56a <_scanf_float+0x28a>
 800f360:	2501      	movs	r5, #1
 800f362:	4628      	mov	r0, r5
 800f364:	b007      	add	sp, #28
 800f366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f36e:	2a0d      	cmp	r2, #13
 800f370:	d8e6      	bhi.n	800f340 <_scanf_float+0x60>
 800f372:	a101      	add	r1, pc, #4	; (adr r1, 800f378 <_scanf_float+0x98>)
 800f374:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f378:	0800f4b7 	.word	0x0800f4b7
 800f37c:	0800f341 	.word	0x0800f341
 800f380:	0800f341 	.word	0x0800f341
 800f384:	0800f341 	.word	0x0800f341
 800f388:	0800f517 	.word	0x0800f517
 800f38c:	0800f4ef 	.word	0x0800f4ef
 800f390:	0800f341 	.word	0x0800f341
 800f394:	0800f341 	.word	0x0800f341
 800f398:	0800f4c5 	.word	0x0800f4c5
 800f39c:	0800f341 	.word	0x0800f341
 800f3a0:	0800f341 	.word	0x0800f341
 800f3a4:	0800f341 	.word	0x0800f341
 800f3a8:	0800f341 	.word	0x0800f341
 800f3ac:	0800f47d 	.word	0x0800f47d
 800f3b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f3b4:	e7db      	b.n	800f36e <_scanf_float+0x8e>
 800f3b6:	290e      	cmp	r1, #14
 800f3b8:	d8c2      	bhi.n	800f340 <_scanf_float+0x60>
 800f3ba:	a001      	add	r0, pc, #4	; (adr r0, 800f3c0 <_scanf_float+0xe0>)
 800f3bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f3c0:	0800f46f 	.word	0x0800f46f
 800f3c4:	0800f341 	.word	0x0800f341
 800f3c8:	0800f46f 	.word	0x0800f46f
 800f3cc:	0800f503 	.word	0x0800f503
 800f3d0:	0800f341 	.word	0x0800f341
 800f3d4:	0800f41d 	.word	0x0800f41d
 800f3d8:	0800f459 	.word	0x0800f459
 800f3dc:	0800f459 	.word	0x0800f459
 800f3e0:	0800f459 	.word	0x0800f459
 800f3e4:	0800f459 	.word	0x0800f459
 800f3e8:	0800f459 	.word	0x0800f459
 800f3ec:	0800f459 	.word	0x0800f459
 800f3f0:	0800f459 	.word	0x0800f459
 800f3f4:	0800f459 	.word	0x0800f459
 800f3f8:	0800f459 	.word	0x0800f459
 800f3fc:	2b6e      	cmp	r3, #110	; 0x6e
 800f3fe:	d809      	bhi.n	800f414 <_scanf_float+0x134>
 800f400:	2b60      	cmp	r3, #96	; 0x60
 800f402:	d8b2      	bhi.n	800f36a <_scanf_float+0x8a>
 800f404:	2b54      	cmp	r3, #84	; 0x54
 800f406:	d077      	beq.n	800f4f8 <_scanf_float+0x218>
 800f408:	2b59      	cmp	r3, #89	; 0x59
 800f40a:	d199      	bne.n	800f340 <_scanf_float+0x60>
 800f40c:	2d07      	cmp	r5, #7
 800f40e:	d197      	bne.n	800f340 <_scanf_float+0x60>
 800f410:	2508      	movs	r5, #8
 800f412:	e029      	b.n	800f468 <_scanf_float+0x188>
 800f414:	2b74      	cmp	r3, #116	; 0x74
 800f416:	d06f      	beq.n	800f4f8 <_scanf_float+0x218>
 800f418:	2b79      	cmp	r3, #121	; 0x79
 800f41a:	e7f6      	b.n	800f40a <_scanf_float+0x12a>
 800f41c:	6821      	ldr	r1, [r4, #0]
 800f41e:	05c8      	lsls	r0, r1, #23
 800f420:	d51a      	bpl.n	800f458 <_scanf_float+0x178>
 800f422:	9b02      	ldr	r3, [sp, #8]
 800f424:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f428:	6021      	str	r1, [r4, #0]
 800f42a:	f109 0901 	add.w	r9, r9, #1
 800f42e:	b11b      	cbz	r3, 800f438 <_scanf_float+0x158>
 800f430:	3b01      	subs	r3, #1
 800f432:	3201      	adds	r2, #1
 800f434:	9302      	str	r3, [sp, #8]
 800f436:	60a2      	str	r2, [r4, #8]
 800f438:	68a3      	ldr	r3, [r4, #8]
 800f43a:	3b01      	subs	r3, #1
 800f43c:	60a3      	str	r3, [r4, #8]
 800f43e:	6923      	ldr	r3, [r4, #16]
 800f440:	3301      	adds	r3, #1
 800f442:	6123      	str	r3, [r4, #16]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	3b01      	subs	r3, #1
 800f448:	2b00      	cmp	r3, #0
 800f44a:	607b      	str	r3, [r7, #4]
 800f44c:	f340 8084 	ble.w	800f558 <_scanf_float+0x278>
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	3301      	adds	r3, #1
 800f454:	603b      	str	r3, [r7, #0]
 800f456:	e766      	b.n	800f326 <_scanf_float+0x46>
 800f458:	eb1a 0f05 	cmn.w	sl, r5
 800f45c:	f47f af70 	bne.w	800f340 <_scanf_float+0x60>
 800f460:	6822      	ldr	r2, [r4, #0]
 800f462:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f466:	6022      	str	r2, [r4, #0]
 800f468:	f806 3b01 	strb.w	r3, [r6], #1
 800f46c:	e7e4      	b.n	800f438 <_scanf_float+0x158>
 800f46e:	6822      	ldr	r2, [r4, #0]
 800f470:	0610      	lsls	r0, r2, #24
 800f472:	f57f af65 	bpl.w	800f340 <_scanf_float+0x60>
 800f476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f47a:	e7f4      	b.n	800f466 <_scanf_float+0x186>
 800f47c:	f1ba 0f00 	cmp.w	sl, #0
 800f480:	d10e      	bne.n	800f4a0 <_scanf_float+0x1c0>
 800f482:	f1b9 0f00 	cmp.w	r9, #0
 800f486:	d10e      	bne.n	800f4a6 <_scanf_float+0x1c6>
 800f488:	6822      	ldr	r2, [r4, #0]
 800f48a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f48e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f492:	d108      	bne.n	800f4a6 <_scanf_float+0x1c6>
 800f494:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f498:	6022      	str	r2, [r4, #0]
 800f49a:	f04f 0a01 	mov.w	sl, #1
 800f49e:	e7e3      	b.n	800f468 <_scanf_float+0x188>
 800f4a0:	f1ba 0f02 	cmp.w	sl, #2
 800f4a4:	d055      	beq.n	800f552 <_scanf_float+0x272>
 800f4a6:	2d01      	cmp	r5, #1
 800f4a8:	d002      	beq.n	800f4b0 <_scanf_float+0x1d0>
 800f4aa:	2d04      	cmp	r5, #4
 800f4ac:	f47f af48 	bne.w	800f340 <_scanf_float+0x60>
 800f4b0:	3501      	adds	r5, #1
 800f4b2:	b2ed      	uxtb	r5, r5
 800f4b4:	e7d8      	b.n	800f468 <_scanf_float+0x188>
 800f4b6:	f1ba 0f01 	cmp.w	sl, #1
 800f4ba:	f47f af41 	bne.w	800f340 <_scanf_float+0x60>
 800f4be:	f04f 0a02 	mov.w	sl, #2
 800f4c2:	e7d1      	b.n	800f468 <_scanf_float+0x188>
 800f4c4:	b97d      	cbnz	r5, 800f4e6 <_scanf_float+0x206>
 800f4c6:	f1b9 0f00 	cmp.w	r9, #0
 800f4ca:	f47f af3c 	bne.w	800f346 <_scanf_float+0x66>
 800f4ce:	6822      	ldr	r2, [r4, #0]
 800f4d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f4d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f4d8:	f47f af39 	bne.w	800f34e <_scanf_float+0x6e>
 800f4dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f4e0:	6022      	str	r2, [r4, #0]
 800f4e2:	2501      	movs	r5, #1
 800f4e4:	e7c0      	b.n	800f468 <_scanf_float+0x188>
 800f4e6:	2d03      	cmp	r5, #3
 800f4e8:	d0e2      	beq.n	800f4b0 <_scanf_float+0x1d0>
 800f4ea:	2d05      	cmp	r5, #5
 800f4ec:	e7de      	b.n	800f4ac <_scanf_float+0x1cc>
 800f4ee:	2d02      	cmp	r5, #2
 800f4f0:	f47f af26 	bne.w	800f340 <_scanf_float+0x60>
 800f4f4:	2503      	movs	r5, #3
 800f4f6:	e7b7      	b.n	800f468 <_scanf_float+0x188>
 800f4f8:	2d06      	cmp	r5, #6
 800f4fa:	f47f af21 	bne.w	800f340 <_scanf_float+0x60>
 800f4fe:	2507      	movs	r5, #7
 800f500:	e7b2      	b.n	800f468 <_scanf_float+0x188>
 800f502:	6822      	ldr	r2, [r4, #0]
 800f504:	0591      	lsls	r1, r2, #22
 800f506:	f57f af1b 	bpl.w	800f340 <_scanf_float+0x60>
 800f50a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f50e:	6022      	str	r2, [r4, #0]
 800f510:	f8cd 9004 	str.w	r9, [sp, #4]
 800f514:	e7a8      	b.n	800f468 <_scanf_float+0x188>
 800f516:	6822      	ldr	r2, [r4, #0]
 800f518:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f51c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f520:	d006      	beq.n	800f530 <_scanf_float+0x250>
 800f522:	0550      	lsls	r0, r2, #21
 800f524:	f57f af0c 	bpl.w	800f340 <_scanf_float+0x60>
 800f528:	f1b9 0f00 	cmp.w	r9, #0
 800f52c:	f43f af0f 	beq.w	800f34e <_scanf_float+0x6e>
 800f530:	0591      	lsls	r1, r2, #22
 800f532:	bf58      	it	pl
 800f534:	9901      	ldrpl	r1, [sp, #4]
 800f536:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f53a:	bf58      	it	pl
 800f53c:	eba9 0101 	subpl.w	r1, r9, r1
 800f540:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f544:	bf58      	it	pl
 800f546:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f54a:	6022      	str	r2, [r4, #0]
 800f54c:	f04f 0900 	mov.w	r9, #0
 800f550:	e78a      	b.n	800f468 <_scanf_float+0x188>
 800f552:	f04f 0a03 	mov.w	sl, #3
 800f556:	e787      	b.n	800f468 <_scanf_float+0x188>
 800f558:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f55c:	4639      	mov	r1, r7
 800f55e:	4640      	mov	r0, r8
 800f560:	4798      	blx	r3
 800f562:	2800      	cmp	r0, #0
 800f564:	f43f aedf 	beq.w	800f326 <_scanf_float+0x46>
 800f568:	e6ea      	b.n	800f340 <_scanf_float+0x60>
 800f56a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f56e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f572:	463a      	mov	r2, r7
 800f574:	4640      	mov	r0, r8
 800f576:	4798      	blx	r3
 800f578:	6923      	ldr	r3, [r4, #16]
 800f57a:	3b01      	subs	r3, #1
 800f57c:	6123      	str	r3, [r4, #16]
 800f57e:	e6ec      	b.n	800f35a <_scanf_float+0x7a>
 800f580:	1e6b      	subs	r3, r5, #1
 800f582:	2b06      	cmp	r3, #6
 800f584:	d825      	bhi.n	800f5d2 <_scanf_float+0x2f2>
 800f586:	2d02      	cmp	r5, #2
 800f588:	d836      	bhi.n	800f5f8 <_scanf_float+0x318>
 800f58a:	455e      	cmp	r6, fp
 800f58c:	f67f aee8 	bls.w	800f360 <_scanf_float+0x80>
 800f590:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f594:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f598:	463a      	mov	r2, r7
 800f59a:	4640      	mov	r0, r8
 800f59c:	4798      	blx	r3
 800f59e:	6923      	ldr	r3, [r4, #16]
 800f5a0:	3b01      	subs	r3, #1
 800f5a2:	6123      	str	r3, [r4, #16]
 800f5a4:	e7f1      	b.n	800f58a <_scanf_float+0x2aa>
 800f5a6:	9802      	ldr	r0, [sp, #8]
 800f5a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f5ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f5b0:	9002      	str	r0, [sp, #8]
 800f5b2:	463a      	mov	r2, r7
 800f5b4:	4640      	mov	r0, r8
 800f5b6:	4798      	blx	r3
 800f5b8:	6923      	ldr	r3, [r4, #16]
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	6123      	str	r3, [r4, #16]
 800f5be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5c2:	fa5f fa8a 	uxtb.w	sl, sl
 800f5c6:	f1ba 0f02 	cmp.w	sl, #2
 800f5ca:	d1ec      	bne.n	800f5a6 <_scanf_float+0x2c6>
 800f5cc:	3d03      	subs	r5, #3
 800f5ce:	b2ed      	uxtb	r5, r5
 800f5d0:	1b76      	subs	r6, r6, r5
 800f5d2:	6823      	ldr	r3, [r4, #0]
 800f5d4:	05da      	lsls	r2, r3, #23
 800f5d6:	d52f      	bpl.n	800f638 <_scanf_float+0x358>
 800f5d8:	055b      	lsls	r3, r3, #21
 800f5da:	d510      	bpl.n	800f5fe <_scanf_float+0x31e>
 800f5dc:	455e      	cmp	r6, fp
 800f5de:	f67f aebf 	bls.w	800f360 <_scanf_float+0x80>
 800f5e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f5e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f5ea:	463a      	mov	r2, r7
 800f5ec:	4640      	mov	r0, r8
 800f5ee:	4798      	blx	r3
 800f5f0:	6923      	ldr	r3, [r4, #16]
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	6123      	str	r3, [r4, #16]
 800f5f6:	e7f1      	b.n	800f5dc <_scanf_float+0x2fc>
 800f5f8:	46aa      	mov	sl, r5
 800f5fa:	9602      	str	r6, [sp, #8]
 800f5fc:	e7df      	b.n	800f5be <_scanf_float+0x2de>
 800f5fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f602:	6923      	ldr	r3, [r4, #16]
 800f604:	2965      	cmp	r1, #101	; 0x65
 800f606:	f103 33ff 	add.w	r3, r3, #4294967295
 800f60a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f60e:	6123      	str	r3, [r4, #16]
 800f610:	d00c      	beq.n	800f62c <_scanf_float+0x34c>
 800f612:	2945      	cmp	r1, #69	; 0x45
 800f614:	d00a      	beq.n	800f62c <_scanf_float+0x34c>
 800f616:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f61a:	463a      	mov	r2, r7
 800f61c:	4640      	mov	r0, r8
 800f61e:	4798      	blx	r3
 800f620:	6923      	ldr	r3, [r4, #16]
 800f622:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f626:	3b01      	subs	r3, #1
 800f628:	1eb5      	subs	r5, r6, #2
 800f62a:	6123      	str	r3, [r4, #16]
 800f62c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f630:	463a      	mov	r2, r7
 800f632:	4640      	mov	r0, r8
 800f634:	4798      	blx	r3
 800f636:	462e      	mov	r6, r5
 800f638:	6825      	ldr	r5, [r4, #0]
 800f63a:	f015 0510 	ands.w	r5, r5, #16
 800f63e:	d159      	bne.n	800f6f4 <_scanf_float+0x414>
 800f640:	7035      	strb	r5, [r6, #0]
 800f642:	6823      	ldr	r3, [r4, #0]
 800f644:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f64c:	d11b      	bne.n	800f686 <_scanf_float+0x3a6>
 800f64e:	9b01      	ldr	r3, [sp, #4]
 800f650:	454b      	cmp	r3, r9
 800f652:	eba3 0209 	sub.w	r2, r3, r9
 800f656:	d123      	bne.n	800f6a0 <_scanf_float+0x3c0>
 800f658:	2200      	movs	r2, #0
 800f65a:	4659      	mov	r1, fp
 800f65c:	4640      	mov	r0, r8
 800f65e:	f000 ffe1 	bl	8010624 <_strtod_r>
 800f662:	6822      	ldr	r2, [r4, #0]
 800f664:	9b03      	ldr	r3, [sp, #12]
 800f666:	f012 0f02 	tst.w	r2, #2
 800f66a:	ec57 6b10 	vmov	r6, r7, d0
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	d021      	beq.n	800f6b6 <_scanf_float+0x3d6>
 800f672:	9903      	ldr	r1, [sp, #12]
 800f674:	1d1a      	adds	r2, r3, #4
 800f676:	600a      	str	r2, [r1, #0]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	e9c3 6700 	strd	r6, r7, [r3]
 800f67e:	68e3      	ldr	r3, [r4, #12]
 800f680:	3301      	adds	r3, #1
 800f682:	60e3      	str	r3, [r4, #12]
 800f684:	e66d      	b.n	800f362 <_scanf_float+0x82>
 800f686:	9b04      	ldr	r3, [sp, #16]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d0e5      	beq.n	800f658 <_scanf_float+0x378>
 800f68c:	9905      	ldr	r1, [sp, #20]
 800f68e:	230a      	movs	r3, #10
 800f690:	462a      	mov	r2, r5
 800f692:	3101      	adds	r1, #1
 800f694:	4640      	mov	r0, r8
 800f696:	f001 f84d 	bl	8010734 <_strtol_r>
 800f69a:	9b04      	ldr	r3, [sp, #16]
 800f69c:	9e05      	ldr	r6, [sp, #20]
 800f69e:	1ac2      	subs	r2, r0, r3
 800f6a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f6a4:	429e      	cmp	r6, r3
 800f6a6:	bf28      	it	cs
 800f6a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f6ac:	4912      	ldr	r1, [pc, #72]	; (800f6f8 <_scanf_float+0x418>)
 800f6ae:	4630      	mov	r0, r6
 800f6b0:	f000 f8ee 	bl	800f890 <siprintf>
 800f6b4:	e7d0      	b.n	800f658 <_scanf_float+0x378>
 800f6b6:	9903      	ldr	r1, [sp, #12]
 800f6b8:	f012 0f04 	tst.w	r2, #4
 800f6bc:	f103 0204 	add.w	r2, r3, #4
 800f6c0:	600a      	str	r2, [r1, #0]
 800f6c2:	d1d9      	bne.n	800f678 <_scanf_float+0x398>
 800f6c4:	f8d3 8000 	ldr.w	r8, [r3]
 800f6c8:	ee10 2a10 	vmov	r2, s0
 800f6cc:	ee10 0a10 	vmov	r0, s0
 800f6d0:	463b      	mov	r3, r7
 800f6d2:	4639      	mov	r1, r7
 800f6d4:	f7f1 fa4a 	bl	8000b6c <__aeabi_dcmpun>
 800f6d8:	b128      	cbz	r0, 800f6e6 <_scanf_float+0x406>
 800f6da:	4808      	ldr	r0, [pc, #32]	; (800f6fc <_scanf_float+0x41c>)
 800f6dc:	f000 f89e 	bl	800f81c <nanf>
 800f6e0:	ed88 0a00 	vstr	s0, [r8]
 800f6e4:	e7cb      	b.n	800f67e <_scanf_float+0x39e>
 800f6e6:	4630      	mov	r0, r6
 800f6e8:	4639      	mov	r1, r7
 800f6ea:	f7f1 fa9d 	bl	8000c28 <__aeabi_d2f>
 800f6ee:	f8c8 0000 	str.w	r0, [r8]
 800f6f2:	e7c4      	b.n	800f67e <_scanf_float+0x39e>
 800f6f4:	2500      	movs	r5, #0
 800f6f6:	e634      	b.n	800f362 <_scanf_float+0x82>
 800f6f8:	080152d2 	.word	0x080152d2
 800f6fc:	08015653 	.word	0x08015653

0800f700 <iprintf>:
 800f700:	b40f      	push	{r0, r1, r2, r3}
 800f702:	4b0a      	ldr	r3, [pc, #40]	; (800f72c <iprintf+0x2c>)
 800f704:	b513      	push	{r0, r1, r4, lr}
 800f706:	681c      	ldr	r4, [r3, #0]
 800f708:	b124      	cbz	r4, 800f714 <iprintf+0x14>
 800f70a:	69a3      	ldr	r3, [r4, #24]
 800f70c:	b913      	cbnz	r3, 800f714 <iprintf+0x14>
 800f70e:	4620      	mov	r0, r4
 800f710:	f002 f88a 	bl	8011828 <__sinit>
 800f714:	ab05      	add	r3, sp, #20
 800f716:	9a04      	ldr	r2, [sp, #16]
 800f718:	68a1      	ldr	r1, [r4, #8]
 800f71a:	9301      	str	r3, [sp, #4]
 800f71c:	4620      	mov	r0, r4
 800f71e:	f003 fe39 	bl	8013394 <_vfiprintf_r>
 800f722:	b002      	add	sp, #8
 800f724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f728:	b004      	add	sp, #16
 800f72a:	4770      	bx	lr
 800f72c:	20000110 	.word	0x20000110

0800f730 <_puts_r>:
 800f730:	b570      	push	{r4, r5, r6, lr}
 800f732:	460e      	mov	r6, r1
 800f734:	4605      	mov	r5, r0
 800f736:	b118      	cbz	r0, 800f740 <_puts_r+0x10>
 800f738:	6983      	ldr	r3, [r0, #24]
 800f73a:	b90b      	cbnz	r3, 800f740 <_puts_r+0x10>
 800f73c:	f002 f874 	bl	8011828 <__sinit>
 800f740:	69ab      	ldr	r3, [r5, #24]
 800f742:	68ac      	ldr	r4, [r5, #8]
 800f744:	b913      	cbnz	r3, 800f74c <_puts_r+0x1c>
 800f746:	4628      	mov	r0, r5
 800f748:	f002 f86e 	bl	8011828 <__sinit>
 800f74c:	4b2c      	ldr	r3, [pc, #176]	; (800f800 <_puts_r+0xd0>)
 800f74e:	429c      	cmp	r4, r3
 800f750:	d120      	bne.n	800f794 <_puts_r+0x64>
 800f752:	686c      	ldr	r4, [r5, #4]
 800f754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f756:	07db      	lsls	r3, r3, #31
 800f758:	d405      	bmi.n	800f766 <_puts_r+0x36>
 800f75a:	89a3      	ldrh	r3, [r4, #12]
 800f75c:	0598      	lsls	r0, r3, #22
 800f75e:	d402      	bmi.n	800f766 <_puts_r+0x36>
 800f760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f762:	f002 fc72 	bl	801204a <__retarget_lock_acquire_recursive>
 800f766:	89a3      	ldrh	r3, [r4, #12]
 800f768:	0719      	lsls	r1, r3, #28
 800f76a:	d51d      	bpl.n	800f7a8 <_puts_r+0x78>
 800f76c:	6923      	ldr	r3, [r4, #16]
 800f76e:	b1db      	cbz	r3, 800f7a8 <_puts_r+0x78>
 800f770:	3e01      	subs	r6, #1
 800f772:	68a3      	ldr	r3, [r4, #8]
 800f774:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f778:	3b01      	subs	r3, #1
 800f77a:	60a3      	str	r3, [r4, #8]
 800f77c:	bb39      	cbnz	r1, 800f7ce <_puts_r+0x9e>
 800f77e:	2b00      	cmp	r3, #0
 800f780:	da38      	bge.n	800f7f4 <_puts_r+0xc4>
 800f782:	4622      	mov	r2, r4
 800f784:	210a      	movs	r1, #10
 800f786:	4628      	mov	r0, r5
 800f788:	f000 ffd6 	bl	8010738 <__swbuf_r>
 800f78c:	3001      	adds	r0, #1
 800f78e:	d011      	beq.n	800f7b4 <_puts_r+0x84>
 800f790:	250a      	movs	r5, #10
 800f792:	e011      	b.n	800f7b8 <_puts_r+0x88>
 800f794:	4b1b      	ldr	r3, [pc, #108]	; (800f804 <_puts_r+0xd4>)
 800f796:	429c      	cmp	r4, r3
 800f798:	d101      	bne.n	800f79e <_puts_r+0x6e>
 800f79a:	68ac      	ldr	r4, [r5, #8]
 800f79c:	e7da      	b.n	800f754 <_puts_r+0x24>
 800f79e:	4b1a      	ldr	r3, [pc, #104]	; (800f808 <_puts_r+0xd8>)
 800f7a0:	429c      	cmp	r4, r3
 800f7a2:	bf08      	it	eq
 800f7a4:	68ec      	ldreq	r4, [r5, #12]
 800f7a6:	e7d5      	b.n	800f754 <_puts_r+0x24>
 800f7a8:	4621      	mov	r1, r4
 800f7aa:	4628      	mov	r0, r5
 800f7ac:	f001 f828 	bl	8010800 <__swsetup_r>
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	d0dd      	beq.n	800f770 <_puts_r+0x40>
 800f7b4:	f04f 35ff 	mov.w	r5, #4294967295
 800f7b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7ba:	07da      	lsls	r2, r3, #31
 800f7bc:	d405      	bmi.n	800f7ca <_puts_r+0x9a>
 800f7be:	89a3      	ldrh	r3, [r4, #12]
 800f7c0:	059b      	lsls	r3, r3, #22
 800f7c2:	d402      	bmi.n	800f7ca <_puts_r+0x9a>
 800f7c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7c6:	f002 fc41 	bl	801204c <__retarget_lock_release_recursive>
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	bd70      	pop	{r4, r5, r6, pc}
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	da04      	bge.n	800f7dc <_puts_r+0xac>
 800f7d2:	69a2      	ldr	r2, [r4, #24]
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	dc06      	bgt.n	800f7e6 <_puts_r+0xb6>
 800f7d8:	290a      	cmp	r1, #10
 800f7da:	d004      	beq.n	800f7e6 <_puts_r+0xb6>
 800f7dc:	6823      	ldr	r3, [r4, #0]
 800f7de:	1c5a      	adds	r2, r3, #1
 800f7e0:	6022      	str	r2, [r4, #0]
 800f7e2:	7019      	strb	r1, [r3, #0]
 800f7e4:	e7c5      	b.n	800f772 <_puts_r+0x42>
 800f7e6:	4622      	mov	r2, r4
 800f7e8:	4628      	mov	r0, r5
 800f7ea:	f000 ffa5 	bl	8010738 <__swbuf_r>
 800f7ee:	3001      	adds	r0, #1
 800f7f0:	d1bf      	bne.n	800f772 <_puts_r+0x42>
 800f7f2:	e7df      	b.n	800f7b4 <_puts_r+0x84>
 800f7f4:	6823      	ldr	r3, [r4, #0]
 800f7f6:	250a      	movs	r5, #10
 800f7f8:	1c5a      	adds	r2, r3, #1
 800f7fa:	6022      	str	r2, [r4, #0]
 800f7fc:	701d      	strb	r5, [r3, #0]
 800f7fe:	e7db      	b.n	800f7b8 <_puts_r+0x88>
 800f800:	080153d8 	.word	0x080153d8
 800f804:	080153f8 	.word	0x080153f8
 800f808:	080153b8 	.word	0x080153b8

0800f80c <puts>:
 800f80c:	4b02      	ldr	r3, [pc, #8]	; (800f818 <puts+0xc>)
 800f80e:	4601      	mov	r1, r0
 800f810:	6818      	ldr	r0, [r3, #0]
 800f812:	f7ff bf8d 	b.w	800f730 <_puts_r>
 800f816:	bf00      	nop
 800f818:	20000110 	.word	0x20000110

0800f81c <nanf>:
 800f81c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f824 <nanf+0x8>
 800f820:	4770      	bx	lr
 800f822:	bf00      	nop
 800f824:	7fc00000 	.word	0x7fc00000

0800f828 <sniprintf>:
 800f828:	b40c      	push	{r2, r3}
 800f82a:	b530      	push	{r4, r5, lr}
 800f82c:	4b17      	ldr	r3, [pc, #92]	; (800f88c <sniprintf+0x64>)
 800f82e:	1e0c      	subs	r4, r1, #0
 800f830:	681d      	ldr	r5, [r3, #0]
 800f832:	b09d      	sub	sp, #116	; 0x74
 800f834:	da08      	bge.n	800f848 <sniprintf+0x20>
 800f836:	238b      	movs	r3, #139	; 0x8b
 800f838:	602b      	str	r3, [r5, #0]
 800f83a:	f04f 30ff 	mov.w	r0, #4294967295
 800f83e:	b01d      	add	sp, #116	; 0x74
 800f840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f844:	b002      	add	sp, #8
 800f846:	4770      	bx	lr
 800f848:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f84c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f850:	bf14      	ite	ne
 800f852:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f856:	4623      	moveq	r3, r4
 800f858:	9304      	str	r3, [sp, #16]
 800f85a:	9307      	str	r3, [sp, #28]
 800f85c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f860:	9002      	str	r0, [sp, #8]
 800f862:	9006      	str	r0, [sp, #24]
 800f864:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f868:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f86a:	ab21      	add	r3, sp, #132	; 0x84
 800f86c:	a902      	add	r1, sp, #8
 800f86e:	4628      	mov	r0, r5
 800f870:	9301      	str	r3, [sp, #4]
 800f872:	f003 fa93 	bl	8012d9c <_svfiprintf_r>
 800f876:	1c43      	adds	r3, r0, #1
 800f878:	bfbc      	itt	lt
 800f87a:	238b      	movlt	r3, #139	; 0x8b
 800f87c:	602b      	strlt	r3, [r5, #0]
 800f87e:	2c00      	cmp	r4, #0
 800f880:	d0dd      	beq.n	800f83e <sniprintf+0x16>
 800f882:	9b02      	ldr	r3, [sp, #8]
 800f884:	2200      	movs	r2, #0
 800f886:	701a      	strb	r2, [r3, #0]
 800f888:	e7d9      	b.n	800f83e <sniprintf+0x16>
 800f88a:	bf00      	nop
 800f88c:	20000110 	.word	0x20000110

0800f890 <siprintf>:
 800f890:	b40e      	push	{r1, r2, r3}
 800f892:	b500      	push	{lr}
 800f894:	b09c      	sub	sp, #112	; 0x70
 800f896:	ab1d      	add	r3, sp, #116	; 0x74
 800f898:	9002      	str	r0, [sp, #8]
 800f89a:	9006      	str	r0, [sp, #24]
 800f89c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f8a0:	4809      	ldr	r0, [pc, #36]	; (800f8c8 <siprintf+0x38>)
 800f8a2:	9107      	str	r1, [sp, #28]
 800f8a4:	9104      	str	r1, [sp, #16]
 800f8a6:	4909      	ldr	r1, [pc, #36]	; (800f8cc <siprintf+0x3c>)
 800f8a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8ac:	9105      	str	r1, [sp, #20]
 800f8ae:	6800      	ldr	r0, [r0, #0]
 800f8b0:	9301      	str	r3, [sp, #4]
 800f8b2:	a902      	add	r1, sp, #8
 800f8b4:	f003 fa72 	bl	8012d9c <_svfiprintf_r>
 800f8b8:	9b02      	ldr	r3, [sp, #8]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	701a      	strb	r2, [r3, #0]
 800f8be:	b01c      	add	sp, #112	; 0x70
 800f8c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8c4:	b003      	add	sp, #12
 800f8c6:	4770      	bx	lr
 800f8c8:	20000110 	.word	0x20000110
 800f8cc:	ffff0208 	.word	0xffff0208

0800f8d0 <siscanf>:
 800f8d0:	b40e      	push	{r1, r2, r3}
 800f8d2:	b510      	push	{r4, lr}
 800f8d4:	b09f      	sub	sp, #124	; 0x7c
 800f8d6:	ac21      	add	r4, sp, #132	; 0x84
 800f8d8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f8dc:	f854 2b04 	ldr.w	r2, [r4], #4
 800f8e0:	9201      	str	r2, [sp, #4]
 800f8e2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f8e6:	9004      	str	r0, [sp, #16]
 800f8e8:	9008      	str	r0, [sp, #32]
 800f8ea:	f7f0 fc8b 	bl	8000204 <strlen>
 800f8ee:	4b0c      	ldr	r3, [pc, #48]	; (800f920 <siscanf+0x50>)
 800f8f0:	9005      	str	r0, [sp, #20]
 800f8f2:	9009      	str	r0, [sp, #36]	; 0x24
 800f8f4:	930d      	str	r3, [sp, #52]	; 0x34
 800f8f6:	480b      	ldr	r0, [pc, #44]	; (800f924 <siscanf+0x54>)
 800f8f8:	9a01      	ldr	r2, [sp, #4]
 800f8fa:	6800      	ldr	r0, [r0, #0]
 800f8fc:	9403      	str	r4, [sp, #12]
 800f8fe:	2300      	movs	r3, #0
 800f900:	9311      	str	r3, [sp, #68]	; 0x44
 800f902:	9316      	str	r3, [sp, #88]	; 0x58
 800f904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f908:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f90c:	a904      	add	r1, sp, #16
 800f90e:	4623      	mov	r3, r4
 800f910:	f003 fb9e 	bl	8013050 <__ssvfiscanf_r>
 800f914:	b01f      	add	sp, #124	; 0x7c
 800f916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f91a:	b003      	add	sp, #12
 800f91c:	4770      	bx	lr
 800f91e:	bf00      	nop
 800f920:	0800f94b 	.word	0x0800f94b
 800f924:	20000110 	.word	0x20000110

0800f928 <__sread>:
 800f928:	b510      	push	{r4, lr}
 800f92a:	460c      	mov	r4, r1
 800f92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f930:	f003 ffb2 	bl	8013898 <_read_r>
 800f934:	2800      	cmp	r0, #0
 800f936:	bfab      	itete	ge
 800f938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f93a:	89a3      	ldrhlt	r3, [r4, #12]
 800f93c:	181b      	addge	r3, r3, r0
 800f93e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f942:	bfac      	ite	ge
 800f944:	6563      	strge	r3, [r4, #84]	; 0x54
 800f946:	81a3      	strhlt	r3, [r4, #12]
 800f948:	bd10      	pop	{r4, pc}

0800f94a <__seofread>:
 800f94a:	2000      	movs	r0, #0
 800f94c:	4770      	bx	lr

0800f94e <__swrite>:
 800f94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f952:	461f      	mov	r7, r3
 800f954:	898b      	ldrh	r3, [r1, #12]
 800f956:	05db      	lsls	r3, r3, #23
 800f958:	4605      	mov	r5, r0
 800f95a:	460c      	mov	r4, r1
 800f95c:	4616      	mov	r6, r2
 800f95e:	d505      	bpl.n	800f96c <__swrite+0x1e>
 800f960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f964:	2302      	movs	r3, #2
 800f966:	2200      	movs	r2, #0
 800f968:	f002 fb72 	bl	8012050 <_lseek_r>
 800f96c:	89a3      	ldrh	r3, [r4, #12]
 800f96e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f976:	81a3      	strh	r3, [r4, #12]
 800f978:	4632      	mov	r2, r6
 800f97a:	463b      	mov	r3, r7
 800f97c:	4628      	mov	r0, r5
 800f97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f982:	f000 bf2b 	b.w	80107dc <_write_r>

0800f986 <__sseek>:
 800f986:	b510      	push	{r4, lr}
 800f988:	460c      	mov	r4, r1
 800f98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f98e:	f002 fb5f 	bl	8012050 <_lseek_r>
 800f992:	1c43      	adds	r3, r0, #1
 800f994:	89a3      	ldrh	r3, [r4, #12]
 800f996:	bf15      	itete	ne
 800f998:	6560      	strne	r0, [r4, #84]	; 0x54
 800f99a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f99e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f9a2:	81a3      	strheq	r3, [r4, #12]
 800f9a4:	bf18      	it	ne
 800f9a6:	81a3      	strhne	r3, [r4, #12]
 800f9a8:	bd10      	pop	{r4, pc}

0800f9aa <__sclose>:
 800f9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ae:	f000 bf95 	b.w	80108dc <_close_r>

0800f9b2 <strstr>:
 800f9b2:	780a      	ldrb	r2, [r1, #0]
 800f9b4:	b570      	push	{r4, r5, r6, lr}
 800f9b6:	b96a      	cbnz	r2, 800f9d4 <strstr+0x22>
 800f9b8:	bd70      	pop	{r4, r5, r6, pc}
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d109      	bne.n	800f9d2 <strstr+0x20>
 800f9be:	460c      	mov	r4, r1
 800f9c0:	4605      	mov	r5, r0
 800f9c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d0f6      	beq.n	800f9b8 <strstr+0x6>
 800f9ca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f9ce:	429e      	cmp	r6, r3
 800f9d0:	d0f7      	beq.n	800f9c2 <strstr+0x10>
 800f9d2:	3001      	adds	r0, #1
 800f9d4:	7803      	ldrb	r3, [r0, #0]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d1ef      	bne.n	800f9ba <strstr+0x8>
 800f9da:	4618      	mov	r0, r3
 800f9dc:	e7ec      	b.n	800f9b8 <strstr+0x6>

0800f9de <sulp>:
 800f9de:	b570      	push	{r4, r5, r6, lr}
 800f9e0:	4604      	mov	r4, r0
 800f9e2:	460d      	mov	r5, r1
 800f9e4:	ec45 4b10 	vmov	d0, r4, r5
 800f9e8:	4616      	mov	r6, r2
 800f9ea:	f002 ff35 	bl	8012858 <__ulp>
 800f9ee:	ec51 0b10 	vmov	r0, r1, d0
 800f9f2:	b17e      	cbz	r6, 800fa14 <sulp+0x36>
 800f9f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f9f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	dd09      	ble.n	800fa14 <sulp+0x36>
 800fa00:	051b      	lsls	r3, r3, #20
 800fa02:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fa06:	2400      	movs	r4, #0
 800fa08:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fa0c:	4622      	mov	r2, r4
 800fa0e:	462b      	mov	r3, r5
 800fa10:	f7f0 fe12 	bl	8000638 <__aeabi_dmul>
 800fa14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fa18 <_strtod_l>:
 800fa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa1c:	ed2d 8b02 	vpush	{d8}
 800fa20:	b09d      	sub	sp, #116	; 0x74
 800fa22:	461f      	mov	r7, r3
 800fa24:	2300      	movs	r3, #0
 800fa26:	9318      	str	r3, [sp, #96]	; 0x60
 800fa28:	4ba2      	ldr	r3, [pc, #648]	; (800fcb4 <_strtod_l+0x29c>)
 800fa2a:	9213      	str	r2, [sp, #76]	; 0x4c
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	9305      	str	r3, [sp, #20]
 800fa30:	4604      	mov	r4, r0
 800fa32:	4618      	mov	r0, r3
 800fa34:	4688      	mov	r8, r1
 800fa36:	f7f0 fbe5 	bl	8000204 <strlen>
 800fa3a:	f04f 0a00 	mov.w	sl, #0
 800fa3e:	4605      	mov	r5, r0
 800fa40:	f04f 0b00 	mov.w	fp, #0
 800fa44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fa48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa4a:	781a      	ldrb	r2, [r3, #0]
 800fa4c:	2a2b      	cmp	r2, #43	; 0x2b
 800fa4e:	d04e      	beq.n	800faee <_strtod_l+0xd6>
 800fa50:	d83b      	bhi.n	800faca <_strtod_l+0xb2>
 800fa52:	2a0d      	cmp	r2, #13
 800fa54:	d834      	bhi.n	800fac0 <_strtod_l+0xa8>
 800fa56:	2a08      	cmp	r2, #8
 800fa58:	d834      	bhi.n	800fac4 <_strtod_l+0xac>
 800fa5a:	2a00      	cmp	r2, #0
 800fa5c:	d03e      	beq.n	800fadc <_strtod_l+0xc4>
 800fa5e:	2300      	movs	r3, #0
 800fa60:	930a      	str	r3, [sp, #40]	; 0x28
 800fa62:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fa64:	7833      	ldrb	r3, [r6, #0]
 800fa66:	2b30      	cmp	r3, #48	; 0x30
 800fa68:	f040 80b0 	bne.w	800fbcc <_strtod_l+0x1b4>
 800fa6c:	7873      	ldrb	r3, [r6, #1]
 800fa6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fa72:	2b58      	cmp	r3, #88	; 0x58
 800fa74:	d168      	bne.n	800fb48 <_strtod_l+0x130>
 800fa76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa78:	9301      	str	r3, [sp, #4]
 800fa7a:	ab18      	add	r3, sp, #96	; 0x60
 800fa7c:	9702      	str	r7, [sp, #8]
 800fa7e:	9300      	str	r3, [sp, #0]
 800fa80:	4a8d      	ldr	r2, [pc, #564]	; (800fcb8 <_strtod_l+0x2a0>)
 800fa82:	ab19      	add	r3, sp, #100	; 0x64
 800fa84:	a917      	add	r1, sp, #92	; 0x5c
 800fa86:	4620      	mov	r0, r4
 800fa88:	f001 ffd2 	bl	8011a30 <__gethex>
 800fa8c:	f010 0707 	ands.w	r7, r0, #7
 800fa90:	4605      	mov	r5, r0
 800fa92:	d005      	beq.n	800faa0 <_strtod_l+0x88>
 800fa94:	2f06      	cmp	r7, #6
 800fa96:	d12c      	bne.n	800faf2 <_strtod_l+0xda>
 800fa98:	3601      	adds	r6, #1
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	9617      	str	r6, [sp, #92]	; 0x5c
 800fa9e:	930a      	str	r3, [sp, #40]	; 0x28
 800faa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	f040 8590 	bne.w	80105c8 <_strtod_l+0xbb0>
 800faa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faaa:	b1eb      	cbz	r3, 800fae8 <_strtod_l+0xd0>
 800faac:	4652      	mov	r2, sl
 800faae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fab2:	ec43 2b10 	vmov	d0, r2, r3
 800fab6:	b01d      	add	sp, #116	; 0x74
 800fab8:	ecbd 8b02 	vpop	{d8}
 800fabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac0:	2a20      	cmp	r2, #32
 800fac2:	d1cc      	bne.n	800fa5e <_strtod_l+0x46>
 800fac4:	3301      	adds	r3, #1
 800fac6:	9317      	str	r3, [sp, #92]	; 0x5c
 800fac8:	e7be      	b.n	800fa48 <_strtod_l+0x30>
 800faca:	2a2d      	cmp	r2, #45	; 0x2d
 800facc:	d1c7      	bne.n	800fa5e <_strtod_l+0x46>
 800face:	2201      	movs	r2, #1
 800fad0:	920a      	str	r2, [sp, #40]	; 0x28
 800fad2:	1c5a      	adds	r2, r3, #1
 800fad4:	9217      	str	r2, [sp, #92]	; 0x5c
 800fad6:	785b      	ldrb	r3, [r3, #1]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1c2      	bne.n	800fa62 <_strtod_l+0x4a>
 800fadc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fade:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f040 856e 	bne.w	80105c4 <_strtod_l+0xbac>
 800fae8:	4652      	mov	r2, sl
 800faea:	465b      	mov	r3, fp
 800faec:	e7e1      	b.n	800fab2 <_strtod_l+0x9a>
 800faee:	2200      	movs	r2, #0
 800faf0:	e7ee      	b.n	800fad0 <_strtod_l+0xb8>
 800faf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800faf4:	b13a      	cbz	r2, 800fb06 <_strtod_l+0xee>
 800faf6:	2135      	movs	r1, #53	; 0x35
 800faf8:	a81a      	add	r0, sp, #104	; 0x68
 800fafa:	f002 ffb8 	bl	8012a6e <__copybits>
 800fafe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fb00:	4620      	mov	r0, r4
 800fb02:	f002 fb77 	bl	80121f4 <_Bfree>
 800fb06:	3f01      	subs	r7, #1
 800fb08:	2f04      	cmp	r7, #4
 800fb0a:	d806      	bhi.n	800fb1a <_strtod_l+0x102>
 800fb0c:	e8df f007 	tbb	[pc, r7]
 800fb10:	1714030a 	.word	0x1714030a
 800fb14:	0a          	.byte	0x0a
 800fb15:	00          	.byte	0x00
 800fb16:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800fb1a:	0728      	lsls	r0, r5, #28
 800fb1c:	d5c0      	bpl.n	800faa0 <_strtod_l+0x88>
 800fb1e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fb22:	e7bd      	b.n	800faa0 <_strtod_l+0x88>
 800fb24:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800fb28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fb2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fb2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fb32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fb36:	e7f0      	b.n	800fb1a <_strtod_l+0x102>
 800fb38:	f8df b180 	ldr.w	fp, [pc, #384]	; 800fcbc <_strtod_l+0x2a4>
 800fb3c:	e7ed      	b.n	800fb1a <_strtod_l+0x102>
 800fb3e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fb42:	f04f 3aff 	mov.w	sl, #4294967295
 800fb46:	e7e8      	b.n	800fb1a <_strtod_l+0x102>
 800fb48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb4a:	1c5a      	adds	r2, r3, #1
 800fb4c:	9217      	str	r2, [sp, #92]	; 0x5c
 800fb4e:	785b      	ldrb	r3, [r3, #1]
 800fb50:	2b30      	cmp	r3, #48	; 0x30
 800fb52:	d0f9      	beq.n	800fb48 <_strtod_l+0x130>
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d0a3      	beq.n	800faa0 <_strtod_l+0x88>
 800fb58:	2301      	movs	r3, #1
 800fb5a:	f04f 0900 	mov.w	r9, #0
 800fb5e:	9304      	str	r3, [sp, #16]
 800fb60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fb62:	9308      	str	r3, [sp, #32]
 800fb64:	f8cd 901c 	str.w	r9, [sp, #28]
 800fb68:	464f      	mov	r7, r9
 800fb6a:	220a      	movs	r2, #10
 800fb6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fb6e:	7806      	ldrb	r6, [r0, #0]
 800fb70:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fb74:	b2d9      	uxtb	r1, r3
 800fb76:	2909      	cmp	r1, #9
 800fb78:	d92a      	bls.n	800fbd0 <_strtod_l+0x1b8>
 800fb7a:	9905      	ldr	r1, [sp, #20]
 800fb7c:	462a      	mov	r2, r5
 800fb7e:	f003 feef 	bl	8013960 <strncmp>
 800fb82:	b398      	cbz	r0, 800fbec <_strtod_l+0x1d4>
 800fb84:	2000      	movs	r0, #0
 800fb86:	4632      	mov	r2, r6
 800fb88:	463d      	mov	r5, r7
 800fb8a:	9005      	str	r0, [sp, #20]
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2a65      	cmp	r2, #101	; 0x65
 800fb90:	d001      	beq.n	800fb96 <_strtod_l+0x17e>
 800fb92:	2a45      	cmp	r2, #69	; 0x45
 800fb94:	d118      	bne.n	800fbc8 <_strtod_l+0x1b0>
 800fb96:	b91d      	cbnz	r5, 800fba0 <_strtod_l+0x188>
 800fb98:	9a04      	ldr	r2, [sp, #16]
 800fb9a:	4302      	orrs	r2, r0
 800fb9c:	d09e      	beq.n	800fadc <_strtod_l+0xc4>
 800fb9e:	2500      	movs	r5, #0
 800fba0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800fba4:	f108 0201 	add.w	r2, r8, #1
 800fba8:	9217      	str	r2, [sp, #92]	; 0x5c
 800fbaa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800fbae:	2a2b      	cmp	r2, #43	; 0x2b
 800fbb0:	d075      	beq.n	800fc9e <_strtod_l+0x286>
 800fbb2:	2a2d      	cmp	r2, #45	; 0x2d
 800fbb4:	d07b      	beq.n	800fcae <_strtod_l+0x296>
 800fbb6:	f04f 0c00 	mov.w	ip, #0
 800fbba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fbbe:	2909      	cmp	r1, #9
 800fbc0:	f240 8082 	bls.w	800fcc8 <_strtod_l+0x2b0>
 800fbc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fbc8:	2600      	movs	r6, #0
 800fbca:	e09d      	b.n	800fd08 <_strtod_l+0x2f0>
 800fbcc:	2300      	movs	r3, #0
 800fbce:	e7c4      	b.n	800fb5a <_strtod_l+0x142>
 800fbd0:	2f08      	cmp	r7, #8
 800fbd2:	bfd8      	it	le
 800fbd4:	9907      	ldrle	r1, [sp, #28]
 800fbd6:	f100 0001 	add.w	r0, r0, #1
 800fbda:	bfda      	itte	le
 800fbdc:	fb02 3301 	mlale	r3, r2, r1, r3
 800fbe0:	9307      	strle	r3, [sp, #28]
 800fbe2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fbe6:	3701      	adds	r7, #1
 800fbe8:	9017      	str	r0, [sp, #92]	; 0x5c
 800fbea:	e7bf      	b.n	800fb6c <_strtod_l+0x154>
 800fbec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fbee:	195a      	adds	r2, r3, r5
 800fbf0:	9217      	str	r2, [sp, #92]	; 0x5c
 800fbf2:	5d5a      	ldrb	r2, [r3, r5]
 800fbf4:	2f00      	cmp	r7, #0
 800fbf6:	d037      	beq.n	800fc68 <_strtod_l+0x250>
 800fbf8:	9005      	str	r0, [sp, #20]
 800fbfa:	463d      	mov	r5, r7
 800fbfc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fc00:	2b09      	cmp	r3, #9
 800fc02:	d912      	bls.n	800fc2a <_strtod_l+0x212>
 800fc04:	2301      	movs	r3, #1
 800fc06:	e7c2      	b.n	800fb8e <_strtod_l+0x176>
 800fc08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc0a:	1c5a      	adds	r2, r3, #1
 800fc0c:	9217      	str	r2, [sp, #92]	; 0x5c
 800fc0e:	785a      	ldrb	r2, [r3, #1]
 800fc10:	3001      	adds	r0, #1
 800fc12:	2a30      	cmp	r2, #48	; 0x30
 800fc14:	d0f8      	beq.n	800fc08 <_strtod_l+0x1f0>
 800fc16:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fc1a:	2b08      	cmp	r3, #8
 800fc1c:	f200 84d9 	bhi.w	80105d2 <_strtod_l+0xbba>
 800fc20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc22:	9005      	str	r0, [sp, #20]
 800fc24:	2000      	movs	r0, #0
 800fc26:	9308      	str	r3, [sp, #32]
 800fc28:	4605      	mov	r5, r0
 800fc2a:	3a30      	subs	r2, #48	; 0x30
 800fc2c:	f100 0301 	add.w	r3, r0, #1
 800fc30:	d014      	beq.n	800fc5c <_strtod_l+0x244>
 800fc32:	9905      	ldr	r1, [sp, #20]
 800fc34:	4419      	add	r1, r3
 800fc36:	9105      	str	r1, [sp, #20]
 800fc38:	462b      	mov	r3, r5
 800fc3a:	eb00 0e05 	add.w	lr, r0, r5
 800fc3e:	210a      	movs	r1, #10
 800fc40:	4573      	cmp	r3, lr
 800fc42:	d113      	bne.n	800fc6c <_strtod_l+0x254>
 800fc44:	182b      	adds	r3, r5, r0
 800fc46:	2b08      	cmp	r3, #8
 800fc48:	f105 0501 	add.w	r5, r5, #1
 800fc4c:	4405      	add	r5, r0
 800fc4e:	dc1c      	bgt.n	800fc8a <_strtod_l+0x272>
 800fc50:	9907      	ldr	r1, [sp, #28]
 800fc52:	230a      	movs	r3, #10
 800fc54:	fb03 2301 	mla	r3, r3, r1, r2
 800fc58:	9307      	str	r3, [sp, #28]
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fc5e:	1c51      	adds	r1, r2, #1
 800fc60:	9117      	str	r1, [sp, #92]	; 0x5c
 800fc62:	7852      	ldrb	r2, [r2, #1]
 800fc64:	4618      	mov	r0, r3
 800fc66:	e7c9      	b.n	800fbfc <_strtod_l+0x1e4>
 800fc68:	4638      	mov	r0, r7
 800fc6a:	e7d2      	b.n	800fc12 <_strtod_l+0x1fa>
 800fc6c:	2b08      	cmp	r3, #8
 800fc6e:	dc04      	bgt.n	800fc7a <_strtod_l+0x262>
 800fc70:	9e07      	ldr	r6, [sp, #28]
 800fc72:	434e      	muls	r6, r1
 800fc74:	9607      	str	r6, [sp, #28]
 800fc76:	3301      	adds	r3, #1
 800fc78:	e7e2      	b.n	800fc40 <_strtod_l+0x228>
 800fc7a:	f103 0c01 	add.w	ip, r3, #1
 800fc7e:	f1bc 0f10 	cmp.w	ip, #16
 800fc82:	bfd8      	it	le
 800fc84:	fb01 f909 	mulle.w	r9, r1, r9
 800fc88:	e7f5      	b.n	800fc76 <_strtod_l+0x25e>
 800fc8a:	2d10      	cmp	r5, #16
 800fc8c:	bfdc      	itt	le
 800fc8e:	230a      	movle	r3, #10
 800fc90:	fb03 2909 	mlale	r9, r3, r9, r2
 800fc94:	e7e1      	b.n	800fc5a <_strtod_l+0x242>
 800fc96:	2300      	movs	r3, #0
 800fc98:	9305      	str	r3, [sp, #20]
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	e77c      	b.n	800fb98 <_strtod_l+0x180>
 800fc9e:	f04f 0c00 	mov.w	ip, #0
 800fca2:	f108 0202 	add.w	r2, r8, #2
 800fca6:	9217      	str	r2, [sp, #92]	; 0x5c
 800fca8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800fcac:	e785      	b.n	800fbba <_strtod_l+0x1a2>
 800fcae:	f04f 0c01 	mov.w	ip, #1
 800fcb2:	e7f6      	b.n	800fca2 <_strtod_l+0x28a>
 800fcb4:	08015480 	.word	0x08015480
 800fcb8:	080152d8 	.word	0x080152d8
 800fcbc:	7ff00000 	.word	0x7ff00000
 800fcc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fcc2:	1c51      	adds	r1, r2, #1
 800fcc4:	9117      	str	r1, [sp, #92]	; 0x5c
 800fcc6:	7852      	ldrb	r2, [r2, #1]
 800fcc8:	2a30      	cmp	r2, #48	; 0x30
 800fcca:	d0f9      	beq.n	800fcc0 <_strtod_l+0x2a8>
 800fccc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fcd0:	2908      	cmp	r1, #8
 800fcd2:	f63f af79 	bhi.w	800fbc8 <_strtod_l+0x1b0>
 800fcd6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fcda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fcdc:	9206      	str	r2, [sp, #24]
 800fcde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fce0:	1c51      	adds	r1, r2, #1
 800fce2:	9117      	str	r1, [sp, #92]	; 0x5c
 800fce4:	7852      	ldrb	r2, [r2, #1]
 800fce6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800fcea:	2e09      	cmp	r6, #9
 800fcec:	d937      	bls.n	800fd5e <_strtod_l+0x346>
 800fcee:	9e06      	ldr	r6, [sp, #24]
 800fcf0:	1b89      	subs	r1, r1, r6
 800fcf2:	2908      	cmp	r1, #8
 800fcf4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fcf8:	dc02      	bgt.n	800fd00 <_strtod_l+0x2e8>
 800fcfa:	4576      	cmp	r6, lr
 800fcfc:	bfa8      	it	ge
 800fcfe:	4676      	movge	r6, lr
 800fd00:	f1bc 0f00 	cmp.w	ip, #0
 800fd04:	d000      	beq.n	800fd08 <_strtod_l+0x2f0>
 800fd06:	4276      	negs	r6, r6
 800fd08:	2d00      	cmp	r5, #0
 800fd0a:	d14d      	bne.n	800fda8 <_strtod_l+0x390>
 800fd0c:	9904      	ldr	r1, [sp, #16]
 800fd0e:	4301      	orrs	r1, r0
 800fd10:	f47f aec6 	bne.w	800faa0 <_strtod_l+0x88>
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	f47f aee1 	bne.w	800fadc <_strtod_l+0xc4>
 800fd1a:	2a69      	cmp	r2, #105	; 0x69
 800fd1c:	d027      	beq.n	800fd6e <_strtod_l+0x356>
 800fd1e:	dc24      	bgt.n	800fd6a <_strtod_l+0x352>
 800fd20:	2a49      	cmp	r2, #73	; 0x49
 800fd22:	d024      	beq.n	800fd6e <_strtod_l+0x356>
 800fd24:	2a4e      	cmp	r2, #78	; 0x4e
 800fd26:	f47f aed9 	bne.w	800fadc <_strtod_l+0xc4>
 800fd2a:	499f      	ldr	r1, [pc, #636]	; (800ffa8 <_strtod_l+0x590>)
 800fd2c:	a817      	add	r0, sp, #92	; 0x5c
 800fd2e:	f002 f8d7 	bl	8011ee0 <__match>
 800fd32:	2800      	cmp	r0, #0
 800fd34:	f43f aed2 	beq.w	800fadc <_strtod_l+0xc4>
 800fd38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	2b28      	cmp	r3, #40	; 0x28
 800fd3e:	d12d      	bne.n	800fd9c <_strtod_l+0x384>
 800fd40:	499a      	ldr	r1, [pc, #616]	; (800ffac <_strtod_l+0x594>)
 800fd42:	aa1a      	add	r2, sp, #104	; 0x68
 800fd44:	a817      	add	r0, sp, #92	; 0x5c
 800fd46:	f002 f8df 	bl	8011f08 <__hexnan>
 800fd4a:	2805      	cmp	r0, #5
 800fd4c:	d126      	bne.n	800fd9c <_strtod_l+0x384>
 800fd4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fd50:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800fd54:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fd58:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fd5c:	e6a0      	b.n	800faa0 <_strtod_l+0x88>
 800fd5e:	210a      	movs	r1, #10
 800fd60:	fb01 2e0e 	mla	lr, r1, lr, r2
 800fd64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fd68:	e7b9      	b.n	800fcde <_strtod_l+0x2c6>
 800fd6a:	2a6e      	cmp	r2, #110	; 0x6e
 800fd6c:	e7db      	b.n	800fd26 <_strtod_l+0x30e>
 800fd6e:	4990      	ldr	r1, [pc, #576]	; (800ffb0 <_strtod_l+0x598>)
 800fd70:	a817      	add	r0, sp, #92	; 0x5c
 800fd72:	f002 f8b5 	bl	8011ee0 <__match>
 800fd76:	2800      	cmp	r0, #0
 800fd78:	f43f aeb0 	beq.w	800fadc <_strtod_l+0xc4>
 800fd7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fd7e:	498d      	ldr	r1, [pc, #564]	; (800ffb4 <_strtod_l+0x59c>)
 800fd80:	3b01      	subs	r3, #1
 800fd82:	a817      	add	r0, sp, #92	; 0x5c
 800fd84:	9317      	str	r3, [sp, #92]	; 0x5c
 800fd86:	f002 f8ab 	bl	8011ee0 <__match>
 800fd8a:	b910      	cbnz	r0, 800fd92 <_strtod_l+0x37a>
 800fd8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fd8e:	3301      	adds	r3, #1
 800fd90:	9317      	str	r3, [sp, #92]	; 0x5c
 800fd92:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ffc4 <_strtod_l+0x5ac>
 800fd96:	f04f 0a00 	mov.w	sl, #0
 800fd9a:	e681      	b.n	800faa0 <_strtod_l+0x88>
 800fd9c:	4886      	ldr	r0, [pc, #536]	; (800ffb8 <_strtod_l+0x5a0>)
 800fd9e:	f003 fd8f 	bl	80138c0 <nan>
 800fda2:	ec5b ab10 	vmov	sl, fp, d0
 800fda6:	e67b      	b.n	800faa0 <_strtod_l+0x88>
 800fda8:	9b05      	ldr	r3, [sp, #20]
 800fdaa:	9807      	ldr	r0, [sp, #28]
 800fdac:	1af3      	subs	r3, r6, r3
 800fdae:	2f00      	cmp	r7, #0
 800fdb0:	bf08      	it	eq
 800fdb2:	462f      	moveq	r7, r5
 800fdb4:	2d10      	cmp	r5, #16
 800fdb6:	9306      	str	r3, [sp, #24]
 800fdb8:	46a8      	mov	r8, r5
 800fdba:	bfa8      	it	ge
 800fdbc:	f04f 0810 	movge.w	r8, #16
 800fdc0:	f7f0 fbc0 	bl	8000544 <__aeabi_ui2d>
 800fdc4:	2d09      	cmp	r5, #9
 800fdc6:	4682      	mov	sl, r0
 800fdc8:	468b      	mov	fp, r1
 800fdca:	dd13      	ble.n	800fdf4 <_strtod_l+0x3dc>
 800fdcc:	4b7b      	ldr	r3, [pc, #492]	; (800ffbc <_strtod_l+0x5a4>)
 800fdce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fdd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fdd6:	f7f0 fc2f 	bl	8000638 <__aeabi_dmul>
 800fdda:	4682      	mov	sl, r0
 800fddc:	4648      	mov	r0, r9
 800fdde:	468b      	mov	fp, r1
 800fde0:	f7f0 fbb0 	bl	8000544 <__aeabi_ui2d>
 800fde4:	4602      	mov	r2, r0
 800fde6:	460b      	mov	r3, r1
 800fde8:	4650      	mov	r0, sl
 800fdea:	4659      	mov	r1, fp
 800fdec:	f7f0 fa6e 	bl	80002cc <__adddf3>
 800fdf0:	4682      	mov	sl, r0
 800fdf2:	468b      	mov	fp, r1
 800fdf4:	2d0f      	cmp	r5, #15
 800fdf6:	dc38      	bgt.n	800fe6a <_strtod_l+0x452>
 800fdf8:	9b06      	ldr	r3, [sp, #24]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	f43f ae50 	beq.w	800faa0 <_strtod_l+0x88>
 800fe00:	dd24      	ble.n	800fe4c <_strtod_l+0x434>
 800fe02:	2b16      	cmp	r3, #22
 800fe04:	dc0b      	bgt.n	800fe1e <_strtod_l+0x406>
 800fe06:	496d      	ldr	r1, [pc, #436]	; (800ffbc <_strtod_l+0x5a4>)
 800fe08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fe0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe10:	4652      	mov	r2, sl
 800fe12:	465b      	mov	r3, fp
 800fe14:	f7f0 fc10 	bl	8000638 <__aeabi_dmul>
 800fe18:	4682      	mov	sl, r0
 800fe1a:	468b      	mov	fp, r1
 800fe1c:	e640      	b.n	800faa0 <_strtod_l+0x88>
 800fe1e:	9a06      	ldr	r2, [sp, #24]
 800fe20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fe24:	4293      	cmp	r3, r2
 800fe26:	db20      	blt.n	800fe6a <_strtod_l+0x452>
 800fe28:	4c64      	ldr	r4, [pc, #400]	; (800ffbc <_strtod_l+0x5a4>)
 800fe2a:	f1c5 050f 	rsb	r5, r5, #15
 800fe2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fe32:	4652      	mov	r2, sl
 800fe34:	465b      	mov	r3, fp
 800fe36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe3a:	f7f0 fbfd 	bl	8000638 <__aeabi_dmul>
 800fe3e:	9b06      	ldr	r3, [sp, #24]
 800fe40:	1b5d      	subs	r5, r3, r5
 800fe42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fe46:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fe4a:	e7e3      	b.n	800fe14 <_strtod_l+0x3fc>
 800fe4c:	9b06      	ldr	r3, [sp, #24]
 800fe4e:	3316      	adds	r3, #22
 800fe50:	db0b      	blt.n	800fe6a <_strtod_l+0x452>
 800fe52:	9b05      	ldr	r3, [sp, #20]
 800fe54:	1b9e      	subs	r6, r3, r6
 800fe56:	4b59      	ldr	r3, [pc, #356]	; (800ffbc <_strtod_l+0x5a4>)
 800fe58:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800fe5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fe60:	4650      	mov	r0, sl
 800fe62:	4659      	mov	r1, fp
 800fe64:	f7f0 fd12 	bl	800088c <__aeabi_ddiv>
 800fe68:	e7d6      	b.n	800fe18 <_strtod_l+0x400>
 800fe6a:	9b06      	ldr	r3, [sp, #24]
 800fe6c:	eba5 0808 	sub.w	r8, r5, r8
 800fe70:	4498      	add	r8, r3
 800fe72:	f1b8 0f00 	cmp.w	r8, #0
 800fe76:	dd74      	ble.n	800ff62 <_strtod_l+0x54a>
 800fe78:	f018 030f 	ands.w	r3, r8, #15
 800fe7c:	d00a      	beq.n	800fe94 <_strtod_l+0x47c>
 800fe7e:	494f      	ldr	r1, [pc, #316]	; (800ffbc <_strtod_l+0x5a4>)
 800fe80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fe84:	4652      	mov	r2, sl
 800fe86:	465b      	mov	r3, fp
 800fe88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe8c:	f7f0 fbd4 	bl	8000638 <__aeabi_dmul>
 800fe90:	4682      	mov	sl, r0
 800fe92:	468b      	mov	fp, r1
 800fe94:	f038 080f 	bics.w	r8, r8, #15
 800fe98:	d04f      	beq.n	800ff3a <_strtod_l+0x522>
 800fe9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fe9e:	dd22      	ble.n	800fee6 <_strtod_l+0x4ce>
 800fea0:	2500      	movs	r5, #0
 800fea2:	462e      	mov	r6, r5
 800fea4:	9507      	str	r5, [sp, #28]
 800fea6:	9505      	str	r5, [sp, #20]
 800fea8:	2322      	movs	r3, #34	; 0x22
 800feaa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ffc4 <_strtod_l+0x5ac>
 800feae:	6023      	str	r3, [r4, #0]
 800feb0:	f04f 0a00 	mov.w	sl, #0
 800feb4:	9b07      	ldr	r3, [sp, #28]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	f43f adf2 	beq.w	800faa0 <_strtod_l+0x88>
 800febc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800febe:	4620      	mov	r0, r4
 800fec0:	f002 f998 	bl	80121f4 <_Bfree>
 800fec4:	9905      	ldr	r1, [sp, #20]
 800fec6:	4620      	mov	r0, r4
 800fec8:	f002 f994 	bl	80121f4 <_Bfree>
 800fecc:	4631      	mov	r1, r6
 800fece:	4620      	mov	r0, r4
 800fed0:	f002 f990 	bl	80121f4 <_Bfree>
 800fed4:	9907      	ldr	r1, [sp, #28]
 800fed6:	4620      	mov	r0, r4
 800fed8:	f002 f98c 	bl	80121f4 <_Bfree>
 800fedc:	4629      	mov	r1, r5
 800fede:	4620      	mov	r0, r4
 800fee0:	f002 f988 	bl	80121f4 <_Bfree>
 800fee4:	e5dc      	b.n	800faa0 <_strtod_l+0x88>
 800fee6:	4b36      	ldr	r3, [pc, #216]	; (800ffc0 <_strtod_l+0x5a8>)
 800fee8:	9304      	str	r3, [sp, #16]
 800feea:	2300      	movs	r3, #0
 800feec:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fef0:	4650      	mov	r0, sl
 800fef2:	4659      	mov	r1, fp
 800fef4:	4699      	mov	r9, r3
 800fef6:	f1b8 0f01 	cmp.w	r8, #1
 800fefa:	dc21      	bgt.n	800ff40 <_strtod_l+0x528>
 800fefc:	b10b      	cbz	r3, 800ff02 <_strtod_l+0x4ea>
 800fefe:	4682      	mov	sl, r0
 800ff00:	468b      	mov	fp, r1
 800ff02:	4b2f      	ldr	r3, [pc, #188]	; (800ffc0 <_strtod_l+0x5a8>)
 800ff04:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ff08:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ff0c:	4652      	mov	r2, sl
 800ff0e:	465b      	mov	r3, fp
 800ff10:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ff14:	f7f0 fb90 	bl	8000638 <__aeabi_dmul>
 800ff18:	4b2a      	ldr	r3, [pc, #168]	; (800ffc4 <_strtod_l+0x5ac>)
 800ff1a:	460a      	mov	r2, r1
 800ff1c:	400b      	ands	r3, r1
 800ff1e:	492a      	ldr	r1, [pc, #168]	; (800ffc8 <_strtod_l+0x5b0>)
 800ff20:	428b      	cmp	r3, r1
 800ff22:	4682      	mov	sl, r0
 800ff24:	d8bc      	bhi.n	800fea0 <_strtod_l+0x488>
 800ff26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ff2a:	428b      	cmp	r3, r1
 800ff2c:	bf86      	itte	hi
 800ff2e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ffcc <_strtod_l+0x5b4>
 800ff32:	f04f 3aff 	movhi.w	sl, #4294967295
 800ff36:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	9304      	str	r3, [sp, #16]
 800ff3e:	e084      	b.n	801004a <_strtod_l+0x632>
 800ff40:	f018 0f01 	tst.w	r8, #1
 800ff44:	d005      	beq.n	800ff52 <_strtod_l+0x53a>
 800ff46:	9b04      	ldr	r3, [sp, #16]
 800ff48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4c:	f7f0 fb74 	bl	8000638 <__aeabi_dmul>
 800ff50:	2301      	movs	r3, #1
 800ff52:	9a04      	ldr	r2, [sp, #16]
 800ff54:	3208      	adds	r2, #8
 800ff56:	f109 0901 	add.w	r9, r9, #1
 800ff5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ff5e:	9204      	str	r2, [sp, #16]
 800ff60:	e7c9      	b.n	800fef6 <_strtod_l+0x4de>
 800ff62:	d0ea      	beq.n	800ff3a <_strtod_l+0x522>
 800ff64:	f1c8 0800 	rsb	r8, r8, #0
 800ff68:	f018 020f 	ands.w	r2, r8, #15
 800ff6c:	d00a      	beq.n	800ff84 <_strtod_l+0x56c>
 800ff6e:	4b13      	ldr	r3, [pc, #76]	; (800ffbc <_strtod_l+0x5a4>)
 800ff70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff74:	4650      	mov	r0, sl
 800ff76:	4659      	mov	r1, fp
 800ff78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7c:	f7f0 fc86 	bl	800088c <__aeabi_ddiv>
 800ff80:	4682      	mov	sl, r0
 800ff82:	468b      	mov	fp, r1
 800ff84:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ff88:	d0d7      	beq.n	800ff3a <_strtod_l+0x522>
 800ff8a:	f1b8 0f1f 	cmp.w	r8, #31
 800ff8e:	dd1f      	ble.n	800ffd0 <_strtod_l+0x5b8>
 800ff90:	2500      	movs	r5, #0
 800ff92:	462e      	mov	r6, r5
 800ff94:	9507      	str	r5, [sp, #28]
 800ff96:	9505      	str	r5, [sp, #20]
 800ff98:	2322      	movs	r3, #34	; 0x22
 800ff9a:	f04f 0a00 	mov.w	sl, #0
 800ff9e:	f04f 0b00 	mov.w	fp, #0
 800ffa2:	6023      	str	r3, [r4, #0]
 800ffa4:	e786      	b.n	800feb4 <_strtod_l+0x49c>
 800ffa6:	bf00      	nop
 800ffa8:	080152ad 	.word	0x080152ad
 800ffac:	080152ec 	.word	0x080152ec
 800ffb0:	080152a5 	.word	0x080152a5
 800ffb4:	0801532b 	.word	0x0801532b
 800ffb8:	08015653 	.word	0x08015653
 800ffbc:	08015518 	.word	0x08015518
 800ffc0:	080154f0 	.word	0x080154f0
 800ffc4:	7ff00000 	.word	0x7ff00000
 800ffc8:	7ca00000 	.word	0x7ca00000
 800ffcc:	7fefffff 	.word	0x7fefffff
 800ffd0:	f018 0310 	ands.w	r3, r8, #16
 800ffd4:	bf18      	it	ne
 800ffd6:	236a      	movne	r3, #106	; 0x6a
 800ffd8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010388 <_strtod_l+0x970>
 800ffdc:	9304      	str	r3, [sp, #16]
 800ffde:	4650      	mov	r0, sl
 800ffe0:	4659      	mov	r1, fp
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	f018 0f01 	tst.w	r8, #1
 800ffe8:	d004      	beq.n	800fff4 <_strtod_l+0x5dc>
 800ffea:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ffee:	f7f0 fb23 	bl	8000638 <__aeabi_dmul>
 800fff2:	2301      	movs	r3, #1
 800fff4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fff8:	f109 0908 	add.w	r9, r9, #8
 800fffc:	d1f2      	bne.n	800ffe4 <_strtod_l+0x5cc>
 800fffe:	b10b      	cbz	r3, 8010004 <_strtod_l+0x5ec>
 8010000:	4682      	mov	sl, r0
 8010002:	468b      	mov	fp, r1
 8010004:	9b04      	ldr	r3, [sp, #16]
 8010006:	b1c3      	cbz	r3, 801003a <_strtod_l+0x622>
 8010008:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801000c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010010:	2b00      	cmp	r3, #0
 8010012:	4659      	mov	r1, fp
 8010014:	dd11      	ble.n	801003a <_strtod_l+0x622>
 8010016:	2b1f      	cmp	r3, #31
 8010018:	f340 8124 	ble.w	8010264 <_strtod_l+0x84c>
 801001c:	2b34      	cmp	r3, #52	; 0x34
 801001e:	bfde      	ittt	le
 8010020:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010024:	f04f 33ff 	movle.w	r3, #4294967295
 8010028:	fa03 f202 	lslle.w	r2, r3, r2
 801002c:	f04f 0a00 	mov.w	sl, #0
 8010030:	bfcc      	ite	gt
 8010032:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010036:	ea02 0b01 	andle.w	fp, r2, r1
 801003a:	2200      	movs	r2, #0
 801003c:	2300      	movs	r3, #0
 801003e:	4650      	mov	r0, sl
 8010040:	4659      	mov	r1, fp
 8010042:	f7f0 fd61 	bl	8000b08 <__aeabi_dcmpeq>
 8010046:	2800      	cmp	r0, #0
 8010048:	d1a2      	bne.n	800ff90 <_strtod_l+0x578>
 801004a:	9b07      	ldr	r3, [sp, #28]
 801004c:	9300      	str	r3, [sp, #0]
 801004e:	9908      	ldr	r1, [sp, #32]
 8010050:	462b      	mov	r3, r5
 8010052:	463a      	mov	r2, r7
 8010054:	4620      	mov	r0, r4
 8010056:	f002 f935 	bl	80122c4 <__s2b>
 801005a:	9007      	str	r0, [sp, #28]
 801005c:	2800      	cmp	r0, #0
 801005e:	f43f af1f 	beq.w	800fea0 <_strtod_l+0x488>
 8010062:	9b05      	ldr	r3, [sp, #20]
 8010064:	1b9e      	subs	r6, r3, r6
 8010066:	9b06      	ldr	r3, [sp, #24]
 8010068:	2b00      	cmp	r3, #0
 801006a:	bfb4      	ite	lt
 801006c:	4633      	movlt	r3, r6
 801006e:	2300      	movge	r3, #0
 8010070:	930c      	str	r3, [sp, #48]	; 0x30
 8010072:	9b06      	ldr	r3, [sp, #24]
 8010074:	2500      	movs	r5, #0
 8010076:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801007a:	9312      	str	r3, [sp, #72]	; 0x48
 801007c:	462e      	mov	r6, r5
 801007e:	9b07      	ldr	r3, [sp, #28]
 8010080:	4620      	mov	r0, r4
 8010082:	6859      	ldr	r1, [r3, #4]
 8010084:	f002 f876 	bl	8012174 <_Balloc>
 8010088:	9005      	str	r0, [sp, #20]
 801008a:	2800      	cmp	r0, #0
 801008c:	f43f af0c 	beq.w	800fea8 <_strtod_l+0x490>
 8010090:	9b07      	ldr	r3, [sp, #28]
 8010092:	691a      	ldr	r2, [r3, #16]
 8010094:	3202      	adds	r2, #2
 8010096:	f103 010c 	add.w	r1, r3, #12
 801009a:	0092      	lsls	r2, r2, #2
 801009c:	300c      	adds	r0, #12
 801009e:	f7fe fc85 	bl	800e9ac <memcpy>
 80100a2:	ec4b ab10 	vmov	d0, sl, fp
 80100a6:	aa1a      	add	r2, sp, #104	; 0x68
 80100a8:	a919      	add	r1, sp, #100	; 0x64
 80100aa:	4620      	mov	r0, r4
 80100ac:	f002 fc50 	bl	8012950 <__d2b>
 80100b0:	ec4b ab18 	vmov	d8, sl, fp
 80100b4:	9018      	str	r0, [sp, #96]	; 0x60
 80100b6:	2800      	cmp	r0, #0
 80100b8:	f43f aef6 	beq.w	800fea8 <_strtod_l+0x490>
 80100bc:	2101      	movs	r1, #1
 80100be:	4620      	mov	r0, r4
 80100c0:	f002 f99a 	bl	80123f8 <__i2b>
 80100c4:	4606      	mov	r6, r0
 80100c6:	2800      	cmp	r0, #0
 80100c8:	f43f aeee 	beq.w	800fea8 <_strtod_l+0x490>
 80100cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80100ce:	9904      	ldr	r1, [sp, #16]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	bfab      	itete	ge
 80100d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80100d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80100d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80100da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80100de:	bfac      	ite	ge
 80100e0:	eb03 0902 	addge.w	r9, r3, r2
 80100e4:	1ad7      	sublt	r7, r2, r3
 80100e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80100e8:	eba3 0801 	sub.w	r8, r3, r1
 80100ec:	4490      	add	r8, r2
 80100ee:	4ba1      	ldr	r3, [pc, #644]	; (8010374 <_strtod_l+0x95c>)
 80100f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80100f4:	4598      	cmp	r8, r3
 80100f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80100fa:	f280 80c7 	bge.w	801028c <_strtod_l+0x874>
 80100fe:	eba3 0308 	sub.w	r3, r3, r8
 8010102:	2b1f      	cmp	r3, #31
 8010104:	eba2 0203 	sub.w	r2, r2, r3
 8010108:	f04f 0101 	mov.w	r1, #1
 801010c:	f300 80b1 	bgt.w	8010272 <_strtod_l+0x85a>
 8010110:	fa01 f303 	lsl.w	r3, r1, r3
 8010114:	930d      	str	r3, [sp, #52]	; 0x34
 8010116:	2300      	movs	r3, #0
 8010118:	9308      	str	r3, [sp, #32]
 801011a:	eb09 0802 	add.w	r8, r9, r2
 801011e:	9b04      	ldr	r3, [sp, #16]
 8010120:	45c1      	cmp	r9, r8
 8010122:	4417      	add	r7, r2
 8010124:	441f      	add	r7, r3
 8010126:	464b      	mov	r3, r9
 8010128:	bfa8      	it	ge
 801012a:	4643      	movge	r3, r8
 801012c:	42bb      	cmp	r3, r7
 801012e:	bfa8      	it	ge
 8010130:	463b      	movge	r3, r7
 8010132:	2b00      	cmp	r3, #0
 8010134:	bfc2      	ittt	gt
 8010136:	eba8 0803 	subgt.w	r8, r8, r3
 801013a:	1aff      	subgt	r7, r7, r3
 801013c:	eba9 0903 	subgt.w	r9, r9, r3
 8010140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010142:	2b00      	cmp	r3, #0
 8010144:	dd17      	ble.n	8010176 <_strtod_l+0x75e>
 8010146:	4631      	mov	r1, r6
 8010148:	461a      	mov	r2, r3
 801014a:	4620      	mov	r0, r4
 801014c:	f002 fa14 	bl	8012578 <__pow5mult>
 8010150:	4606      	mov	r6, r0
 8010152:	2800      	cmp	r0, #0
 8010154:	f43f aea8 	beq.w	800fea8 <_strtod_l+0x490>
 8010158:	4601      	mov	r1, r0
 801015a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801015c:	4620      	mov	r0, r4
 801015e:	f002 f961 	bl	8012424 <__multiply>
 8010162:	900b      	str	r0, [sp, #44]	; 0x2c
 8010164:	2800      	cmp	r0, #0
 8010166:	f43f ae9f 	beq.w	800fea8 <_strtod_l+0x490>
 801016a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801016c:	4620      	mov	r0, r4
 801016e:	f002 f841 	bl	80121f4 <_Bfree>
 8010172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010174:	9318      	str	r3, [sp, #96]	; 0x60
 8010176:	f1b8 0f00 	cmp.w	r8, #0
 801017a:	f300 808c 	bgt.w	8010296 <_strtod_l+0x87e>
 801017e:	9b06      	ldr	r3, [sp, #24]
 8010180:	2b00      	cmp	r3, #0
 8010182:	dd08      	ble.n	8010196 <_strtod_l+0x77e>
 8010184:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010186:	9905      	ldr	r1, [sp, #20]
 8010188:	4620      	mov	r0, r4
 801018a:	f002 f9f5 	bl	8012578 <__pow5mult>
 801018e:	9005      	str	r0, [sp, #20]
 8010190:	2800      	cmp	r0, #0
 8010192:	f43f ae89 	beq.w	800fea8 <_strtod_l+0x490>
 8010196:	2f00      	cmp	r7, #0
 8010198:	dd08      	ble.n	80101ac <_strtod_l+0x794>
 801019a:	9905      	ldr	r1, [sp, #20]
 801019c:	463a      	mov	r2, r7
 801019e:	4620      	mov	r0, r4
 80101a0:	f002 fa44 	bl	801262c <__lshift>
 80101a4:	9005      	str	r0, [sp, #20]
 80101a6:	2800      	cmp	r0, #0
 80101a8:	f43f ae7e 	beq.w	800fea8 <_strtod_l+0x490>
 80101ac:	f1b9 0f00 	cmp.w	r9, #0
 80101b0:	dd08      	ble.n	80101c4 <_strtod_l+0x7ac>
 80101b2:	4631      	mov	r1, r6
 80101b4:	464a      	mov	r2, r9
 80101b6:	4620      	mov	r0, r4
 80101b8:	f002 fa38 	bl	801262c <__lshift>
 80101bc:	4606      	mov	r6, r0
 80101be:	2800      	cmp	r0, #0
 80101c0:	f43f ae72 	beq.w	800fea8 <_strtod_l+0x490>
 80101c4:	9a05      	ldr	r2, [sp, #20]
 80101c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80101c8:	4620      	mov	r0, r4
 80101ca:	f002 fabb 	bl	8012744 <__mdiff>
 80101ce:	4605      	mov	r5, r0
 80101d0:	2800      	cmp	r0, #0
 80101d2:	f43f ae69 	beq.w	800fea8 <_strtod_l+0x490>
 80101d6:	68c3      	ldr	r3, [r0, #12]
 80101d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80101da:	2300      	movs	r3, #0
 80101dc:	60c3      	str	r3, [r0, #12]
 80101de:	4631      	mov	r1, r6
 80101e0:	f002 fa94 	bl	801270c <__mcmp>
 80101e4:	2800      	cmp	r0, #0
 80101e6:	da60      	bge.n	80102aa <_strtod_l+0x892>
 80101e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101ea:	ea53 030a 	orrs.w	r3, r3, sl
 80101ee:	f040 8082 	bne.w	80102f6 <_strtod_l+0x8de>
 80101f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d17d      	bne.n	80102f6 <_strtod_l+0x8de>
 80101fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80101fe:	0d1b      	lsrs	r3, r3, #20
 8010200:	051b      	lsls	r3, r3, #20
 8010202:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010206:	d976      	bls.n	80102f6 <_strtod_l+0x8de>
 8010208:	696b      	ldr	r3, [r5, #20]
 801020a:	b913      	cbnz	r3, 8010212 <_strtod_l+0x7fa>
 801020c:	692b      	ldr	r3, [r5, #16]
 801020e:	2b01      	cmp	r3, #1
 8010210:	dd71      	ble.n	80102f6 <_strtod_l+0x8de>
 8010212:	4629      	mov	r1, r5
 8010214:	2201      	movs	r2, #1
 8010216:	4620      	mov	r0, r4
 8010218:	f002 fa08 	bl	801262c <__lshift>
 801021c:	4631      	mov	r1, r6
 801021e:	4605      	mov	r5, r0
 8010220:	f002 fa74 	bl	801270c <__mcmp>
 8010224:	2800      	cmp	r0, #0
 8010226:	dd66      	ble.n	80102f6 <_strtod_l+0x8de>
 8010228:	9904      	ldr	r1, [sp, #16]
 801022a:	4a53      	ldr	r2, [pc, #332]	; (8010378 <_strtod_l+0x960>)
 801022c:	465b      	mov	r3, fp
 801022e:	2900      	cmp	r1, #0
 8010230:	f000 8081 	beq.w	8010336 <_strtod_l+0x91e>
 8010234:	ea02 010b 	and.w	r1, r2, fp
 8010238:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801023c:	dc7b      	bgt.n	8010336 <_strtod_l+0x91e>
 801023e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010242:	f77f aea9 	ble.w	800ff98 <_strtod_l+0x580>
 8010246:	4b4d      	ldr	r3, [pc, #308]	; (801037c <_strtod_l+0x964>)
 8010248:	4650      	mov	r0, sl
 801024a:	4659      	mov	r1, fp
 801024c:	2200      	movs	r2, #0
 801024e:	f7f0 f9f3 	bl	8000638 <__aeabi_dmul>
 8010252:	460b      	mov	r3, r1
 8010254:	4303      	orrs	r3, r0
 8010256:	bf08      	it	eq
 8010258:	2322      	moveq	r3, #34	; 0x22
 801025a:	4682      	mov	sl, r0
 801025c:	468b      	mov	fp, r1
 801025e:	bf08      	it	eq
 8010260:	6023      	streq	r3, [r4, #0]
 8010262:	e62b      	b.n	800febc <_strtod_l+0x4a4>
 8010264:	f04f 32ff 	mov.w	r2, #4294967295
 8010268:	fa02 f303 	lsl.w	r3, r2, r3
 801026c:	ea03 0a0a 	and.w	sl, r3, sl
 8010270:	e6e3      	b.n	801003a <_strtod_l+0x622>
 8010272:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010276:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801027a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801027e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010282:	fa01 f308 	lsl.w	r3, r1, r8
 8010286:	9308      	str	r3, [sp, #32]
 8010288:	910d      	str	r1, [sp, #52]	; 0x34
 801028a:	e746      	b.n	801011a <_strtod_l+0x702>
 801028c:	2300      	movs	r3, #0
 801028e:	9308      	str	r3, [sp, #32]
 8010290:	2301      	movs	r3, #1
 8010292:	930d      	str	r3, [sp, #52]	; 0x34
 8010294:	e741      	b.n	801011a <_strtod_l+0x702>
 8010296:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010298:	4642      	mov	r2, r8
 801029a:	4620      	mov	r0, r4
 801029c:	f002 f9c6 	bl	801262c <__lshift>
 80102a0:	9018      	str	r0, [sp, #96]	; 0x60
 80102a2:	2800      	cmp	r0, #0
 80102a4:	f47f af6b 	bne.w	801017e <_strtod_l+0x766>
 80102a8:	e5fe      	b.n	800fea8 <_strtod_l+0x490>
 80102aa:	465f      	mov	r7, fp
 80102ac:	d16e      	bne.n	801038c <_strtod_l+0x974>
 80102ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80102b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80102b4:	b342      	cbz	r2, 8010308 <_strtod_l+0x8f0>
 80102b6:	4a32      	ldr	r2, [pc, #200]	; (8010380 <_strtod_l+0x968>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d128      	bne.n	801030e <_strtod_l+0x8f6>
 80102bc:	9b04      	ldr	r3, [sp, #16]
 80102be:	4651      	mov	r1, sl
 80102c0:	b1eb      	cbz	r3, 80102fe <_strtod_l+0x8e6>
 80102c2:	4b2d      	ldr	r3, [pc, #180]	; (8010378 <_strtod_l+0x960>)
 80102c4:	403b      	ands	r3, r7
 80102c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80102ca:	f04f 32ff 	mov.w	r2, #4294967295
 80102ce:	d819      	bhi.n	8010304 <_strtod_l+0x8ec>
 80102d0:	0d1b      	lsrs	r3, r3, #20
 80102d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80102d6:	fa02 f303 	lsl.w	r3, r2, r3
 80102da:	4299      	cmp	r1, r3
 80102dc:	d117      	bne.n	801030e <_strtod_l+0x8f6>
 80102de:	4b29      	ldr	r3, [pc, #164]	; (8010384 <_strtod_l+0x96c>)
 80102e0:	429f      	cmp	r7, r3
 80102e2:	d102      	bne.n	80102ea <_strtod_l+0x8d2>
 80102e4:	3101      	adds	r1, #1
 80102e6:	f43f addf 	beq.w	800fea8 <_strtod_l+0x490>
 80102ea:	4b23      	ldr	r3, [pc, #140]	; (8010378 <_strtod_l+0x960>)
 80102ec:	403b      	ands	r3, r7
 80102ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80102f2:	f04f 0a00 	mov.w	sl, #0
 80102f6:	9b04      	ldr	r3, [sp, #16]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d1a4      	bne.n	8010246 <_strtod_l+0x82e>
 80102fc:	e5de      	b.n	800febc <_strtod_l+0x4a4>
 80102fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010302:	e7ea      	b.n	80102da <_strtod_l+0x8c2>
 8010304:	4613      	mov	r3, r2
 8010306:	e7e8      	b.n	80102da <_strtod_l+0x8c2>
 8010308:	ea53 030a 	orrs.w	r3, r3, sl
 801030c:	d08c      	beq.n	8010228 <_strtod_l+0x810>
 801030e:	9b08      	ldr	r3, [sp, #32]
 8010310:	b1db      	cbz	r3, 801034a <_strtod_l+0x932>
 8010312:	423b      	tst	r3, r7
 8010314:	d0ef      	beq.n	80102f6 <_strtod_l+0x8de>
 8010316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010318:	9a04      	ldr	r2, [sp, #16]
 801031a:	4650      	mov	r0, sl
 801031c:	4659      	mov	r1, fp
 801031e:	b1c3      	cbz	r3, 8010352 <_strtod_l+0x93a>
 8010320:	f7ff fb5d 	bl	800f9de <sulp>
 8010324:	4602      	mov	r2, r0
 8010326:	460b      	mov	r3, r1
 8010328:	ec51 0b18 	vmov	r0, r1, d8
 801032c:	f7ef ffce 	bl	80002cc <__adddf3>
 8010330:	4682      	mov	sl, r0
 8010332:	468b      	mov	fp, r1
 8010334:	e7df      	b.n	80102f6 <_strtod_l+0x8de>
 8010336:	4013      	ands	r3, r2
 8010338:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801033c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010340:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010344:	f04f 3aff 	mov.w	sl, #4294967295
 8010348:	e7d5      	b.n	80102f6 <_strtod_l+0x8de>
 801034a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801034c:	ea13 0f0a 	tst.w	r3, sl
 8010350:	e7e0      	b.n	8010314 <_strtod_l+0x8fc>
 8010352:	f7ff fb44 	bl	800f9de <sulp>
 8010356:	4602      	mov	r2, r0
 8010358:	460b      	mov	r3, r1
 801035a:	ec51 0b18 	vmov	r0, r1, d8
 801035e:	f7ef ffb3 	bl	80002c8 <__aeabi_dsub>
 8010362:	2200      	movs	r2, #0
 8010364:	2300      	movs	r3, #0
 8010366:	4682      	mov	sl, r0
 8010368:	468b      	mov	fp, r1
 801036a:	f7f0 fbcd 	bl	8000b08 <__aeabi_dcmpeq>
 801036e:	2800      	cmp	r0, #0
 8010370:	d0c1      	beq.n	80102f6 <_strtod_l+0x8de>
 8010372:	e611      	b.n	800ff98 <_strtod_l+0x580>
 8010374:	fffffc02 	.word	0xfffffc02
 8010378:	7ff00000 	.word	0x7ff00000
 801037c:	39500000 	.word	0x39500000
 8010380:	000fffff 	.word	0x000fffff
 8010384:	7fefffff 	.word	0x7fefffff
 8010388:	08015300 	.word	0x08015300
 801038c:	4631      	mov	r1, r6
 801038e:	4628      	mov	r0, r5
 8010390:	f002 fb3a 	bl	8012a08 <__ratio>
 8010394:	ec59 8b10 	vmov	r8, r9, d0
 8010398:	ee10 0a10 	vmov	r0, s0
 801039c:	2200      	movs	r2, #0
 801039e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80103a2:	4649      	mov	r1, r9
 80103a4:	f7f0 fbc4 	bl	8000b30 <__aeabi_dcmple>
 80103a8:	2800      	cmp	r0, #0
 80103aa:	d07a      	beq.n	80104a2 <_strtod_l+0xa8a>
 80103ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d04a      	beq.n	8010448 <_strtod_l+0xa30>
 80103b2:	4b95      	ldr	r3, [pc, #596]	; (8010608 <_strtod_l+0xbf0>)
 80103b4:	2200      	movs	r2, #0
 80103b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80103ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010608 <_strtod_l+0xbf0>
 80103be:	f04f 0800 	mov.w	r8, #0
 80103c2:	4b92      	ldr	r3, [pc, #584]	; (801060c <_strtod_l+0xbf4>)
 80103c4:	403b      	ands	r3, r7
 80103c6:	930d      	str	r3, [sp, #52]	; 0x34
 80103c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80103ca:	4b91      	ldr	r3, [pc, #580]	; (8010610 <_strtod_l+0xbf8>)
 80103cc:	429a      	cmp	r2, r3
 80103ce:	f040 80b0 	bne.w	8010532 <_strtod_l+0xb1a>
 80103d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80103d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80103da:	ec4b ab10 	vmov	d0, sl, fp
 80103de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80103e2:	f002 fa39 	bl	8012858 <__ulp>
 80103e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80103ea:	ec53 2b10 	vmov	r2, r3, d0
 80103ee:	f7f0 f923 	bl	8000638 <__aeabi_dmul>
 80103f2:	4652      	mov	r2, sl
 80103f4:	465b      	mov	r3, fp
 80103f6:	f7ef ff69 	bl	80002cc <__adddf3>
 80103fa:	460b      	mov	r3, r1
 80103fc:	4983      	ldr	r1, [pc, #524]	; (801060c <_strtod_l+0xbf4>)
 80103fe:	4a85      	ldr	r2, [pc, #532]	; (8010614 <_strtod_l+0xbfc>)
 8010400:	4019      	ands	r1, r3
 8010402:	4291      	cmp	r1, r2
 8010404:	4682      	mov	sl, r0
 8010406:	d960      	bls.n	80104ca <_strtod_l+0xab2>
 8010408:	ee18 3a90 	vmov	r3, s17
 801040c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010410:	4293      	cmp	r3, r2
 8010412:	d104      	bne.n	801041e <_strtod_l+0xa06>
 8010414:	ee18 3a10 	vmov	r3, s16
 8010418:	3301      	adds	r3, #1
 801041a:	f43f ad45 	beq.w	800fea8 <_strtod_l+0x490>
 801041e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010620 <_strtod_l+0xc08>
 8010422:	f04f 3aff 	mov.w	sl, #4294967295
 8010426:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010428:	4620      	mov	r0, r4
 801042a:	f001 fee3 	bl	80121f4 <_Bfree>
 801042e:	9905      	ldr	r1, [sp, #20]
 8010430:	4620      	mov	r0, r4
 8010432:	f001 fedf 	bl	80121f4 <_Bfree>
 8010436:	4631      	mov	r1, r6
 8010438:	4620      	mov	r0, r4
 801043a:	f001 fedb 	bl	80121f4 <_Bfree>
 801043e:	4629      	mov	r1, r5
 8010440:	4620      	mov	r0, r4
 8010442:	f001 fed7 	bl	80121f4 <_Bfree>
 8010446:	e61a      	b.n	801007e <_strtod_l+0x666>
 8010448:	f1ba 0f00 	cmp.w	sl, #0
 801044c:	d11b      	bne.n	8010486 <_strtod_l+0xa6e>
 801044e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010452:	b9f3      	cbnz	r3, 8010492 <_strtod_l+0xa7a>
 8010454:	4b6c      	ldr	r3, [pc, #432]	; (8010608 <_strtod_l+0xbf0>)
 8010456:	2200      	movs	r2, #0
 8010458:	4640      	mov	r0, r8
 801045a:	4649      	mov	r1, r9
 801045c:	f7f0 fb5e 	bl	8000b1c <__aeabi_dcmplt>
 8010460:	b9d0      	cbnz	r0, 8010498 <_strtod_l+0xa80>
 8010462:	4640      	mov	r0, r8
 8010464:	4649      	mov	r1, r9
 8010466:	4b6c      	ldr	r3, [pc, #432]	; (8010618 <_strtod_l+0xc00>)
 8010468:	2200      	movs	r2, #0
 801046a:	f7f0 f8e5 	bl	8000638 <__aeabi_dmul>
 801046e:	4680      	mov	r8, r0
 8010470:	4689      	mov	r9, r1
 8010472:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010476:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801047a:	9315      	str	r3, [sp, #84]	; 0x54
 801047c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010480:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010484:	e79d      	b.n	80103c2 <_strtod_l+0x9aa>
 8010486:	f1ba 0f01 	cmp.w	sl, #1
 801048a:	d102      	bne.n	8010492 <_strtod_l+0xa7a>
 801048c:	2f00      	cmp	r7, #0
 801048e:	f43f ad83 	beq.w	800ff98 <_strtod_l+0x580>
 8010492:	4b62      	ldr	r3, [pc, #392]	; (801061c <_strtod_l+0xc04>)
 8010494:	2200      	movs	r2, #0
 8010496:	e78e      	b.n	80103b6 <_strtod_l+0x99e>
 8010498:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010618 <_strtod_l+0xc00>
 801049c:	f04f 0800 	mov.w	r8, #0
 80104a0:	e7e7      	b.n	8010472 <_strtod_l+0xa5a>
 80104a2:	4b5d      	ldr	r3, [pc, #372]	; (8010618 <_strtod_l+0xc00>)
 80104a4:	4640      	mov	r0, r8
 80104a6:	4649      	mov	r1, r9
 80104a8:	2200      	movs	r2, #0
 80104aa:	f7f0 f8c5 	bl	8000638 <__aeabi_dmul>
 80104ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104b0:	4680      	mov	r8, r0
 80104b2:	4689      	mov	r9, r1
 80104b4:	b933      	cbnz	r3, 80104c4 <_strtod_l+0xaac>
 80104b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104ba:	900e      	str	r0, [sp, #56]	; 0x38
 80104bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80104be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80104c2:	e7dd      	b.n	8010480 <_strtod_l+0xa68>
 80104c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80104c8:	e7f9      	b.n	80104be <_strtod_l+0xaa6>
 80104ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80104ce:	9b04      	ldr	r3, [sp, #16]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d1a8      	bne.n	8010426 <_strtod_l+0xa0e>
 80104d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80104d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80104da:	0d1b      	lsrs	r3, r3, #20
 80104dc:	051b      	lsls	r3, r3, #20
 80104de:	429a      	cmp	r2, r3
 80104e0:	d1a1      	bne.n	8010426 <_strtod_l+0xa0e>
 80104e2:	4640      	mov	r0, r8
 80104e4:	4649      	mov	r1, r9
 80104e6:	f7f0 fc07 	bl	8000cf8 <__aeabi_d2lz>
 80104ea:	f7f0 f877 	bl	80005dc <__aeabi_l2d>
 80104ee:	4602      	mov	r2, r0
 80104f0:	460b      	mov	r3, r1
 80104f2:	4640      	mov	r0, r8
 80104f4:	4649      	mov	r1, r9
 80104f6:	f7ef fee7 	bl	80002c8 <__aeabi_dsub>
 80104fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80104fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010500:	ea43 030a 	orr.w	r3, r3, sl
 8010504:	4313      	orrs	r3, r2
 8010506:	4680      	mov	r8, r0
 8010508:	4689      	mov	r9, r1
 801050a:	d055      	beq.n	80105b8 <_strtod_l+0xba0>
 801050c:	a336      	add	r3, pc, #216	; (adr r3, 80105e8 <_strtod_l+0xbd0>)
 801050e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010512:	f7f0 fb03 	bl	8000b1c <__aeabi_dcmplt>
 8010516:	2800      	cmp	r0, #0
 8010518:	f47f acd0 	bne.w	800febc <_strtod_l+0x4a4>
 801051c:	a334      	add	r3, pc, #208	; (adr r3, 80105f0 <_strtod_l+0xbd8>)
 801051e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010522:	4640      	mov	r0, r8
 8010524:	4649      	mov	r1, r9
 8010526:	f7f0 fb17 	bl	8000b58 <__aeabi_dcmpgt>
 801052a:	2800      	cmp	r0, #0
 801052c:	f43f af7b 	beq.w	8010426 <_strtod_l+0xa0e>
 8010530:	e4c4      	b.n	800febc <_strtod_l+0x4a4>
 8010532:	9b04      	ldr	r3, [sp, #16]
 8010534:	b333      	cbz	r3, 8010584 <_strtod_l+0xb6c>
 8010536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010538:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801053c:	d822      	bhi.n	8010584 <_strtod_l+0xb6c>
 801053e:	a32e      	add	r3, pc, #184	; (adr r3, 80105f8 <_strtod_l+0xbe0>)
 8010540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010544:	4640      	mov	r0, r8
 8010546:	4649      	mov	r1, r9
 8010548:	f7f0 faf2 	bl	8000b30 <__aeabi_dcmple>
 801054c:	b1a0      	cbz	r0, 8010578 <_strtod_l+0xb60>
 801054e:	4649      	mov	r1, r9
 8010550:	4640      	mov	r0, r8
 8010552:	f7f0 fb49 	bl	8000be8 <__aeabi_d2uiz>
 8010556:	2801      	cmp	r0, #1
 8010558:	bf38      	it	cc
 801055a:	2001      	movcc	r0, #1
 801055c:	f7ef fff2 	bl	8000544 <__aeabi_ui2d>
 8010560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010562:	4680      	mov	r8, r0
 8010564:	4689      	mov	r9, r1
 8010566:	bb23      	cbnz	r3, 80105b2 <_strtod_l+0xb9a>
 8010568:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801056c:	9010      	str	r0, [sp, #64]	; 0x40
 801056e:	9311      	str	r3, [sp, #68]	; 0x44
 8010570:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010574:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801057a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801057c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010580:	1a9b      	subs	r3, r3, r2
 8010582:	9309      	str	r3, [sp, #36]	; 0x24
 8010584:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010588:	eeb0 0a48 	vmov.f32	s0, s16
 801058c:	eef0 0a68 	vmov.f32	s1, s17
 8010590:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010594:	f002 f960 	bl	8012858 <__ulp>
 8010598:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801059c:	ec53 2b10 	vmov	r2, r3, d0
 80105a0:	f7f0 f84a 	bl	8000638 <__aeabi_dmul>
 80105a4:	ec53 2b18 	vmov	r2, r3, d8
 80105a8:	f7ef fe90 	bl	80002cc <__adddf3>
 80105ac:	4682      	mov	sl, r0
 80105ae:	468b      	mov	fp, r1
 80105b0:	e78d      	b.n	80104ce <_strtod_l+0xab6>
 80105b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80105b6:	e7db      	b.n	8010570 <_strtod_l+0xb58>
 80105b8:	a311      	add	r3, pc, #68	; (adr r3, 8010600 <_strtod_l+0xbe8>)
 80105ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105be:	f7f0 faad 	bl	8000b1c <__aeabi_dcmplt>
 80105c2:	e7b2      	b.n	801052a <_strtod_l+0xb12>
 80105c4:	2300      	movs	r3, #0
 80105c6:	930a      	str	r3, [sp, #40]	; 0x28
 80105c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80105ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80105cc:	6013      	str	r3, [r2, #0]
 80105ce:	f7ff ba6b 	b.w	800faa8 <_strtod_l+0x90>
 80105d2:	2a65      	cmp	r2, #101	; 0x65
 80105d4:	f43f ab5f 	beq.w	800fc96 <_strtod_l+0x27e>
 80105d8:	2a45      	cmp	r2, #69	; 0x45
 80105da:	f43f ab5c 	beq.w	800fc96 <_strtod_l+0x27e>
 80105de:	2301      	movs	r3, #1
 80105e0:	f7ff bb94 	b.w	800fd0c <_strtod_l+0x2f4>
 80105e4:	f3af 8000 	nop.w
 80105e8:	94a03595 	.word	0x94a03595
 80105ec:	3fdfffff 	.word	0x3fdfffff
 80105f0:	35afe535 	.word	0x35afe535
 80105f4:	3fe00000 	.word	0x3fe00000
 80105f8:	ffc00000 	.word	0xffc00000
 80105fc:	41dfffff 	.word	0x41dfffff
 8010600:	94a03595 	.word	0x94a03595
 8010604:	3fcfffff 	.word	0x3fcfffff
 8010608:	3ff00000 	.word	0x3ff00000
 801060c:	7ff00000 	.word	0x7ff00000
 8010610:	7fe00000 	.word	0x7fe00000
 8010614:	7c9fffff 	.word	0x7c9fffff
 8010618:	3fe00000 	.word	0x3fe00000
 801061c:	bff00000 	.word	0xbff00000
 8010620:	7fefffff 	.word	0x7fefffff

08010624 <_strtod_r>:
 8010624:	4b01      	ldr	r3, [pc, #4]	; (801062c <_strtod_r+0x8>)
 8010626:	f7ff b9f7 	b.w	800fa18 <_strtod_l>
 801062a:	bf00      	nop
 801062c:	20000178 	.word	0x20000178

08010630 <_strtol_l.constprop.0>:
 8010630:	2b01      	cmp	r3, #1
 8010632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010636:	d001      	beq.n	801063c <_strtol_l.constprop.0+0xc>
 8010638:	2b24      	cmp	r3, #36	; 0x24
 801063a:	d906      	bls.n	801064a <_strtol_l.constprop.0+0x1a>
 801063c:	f7fe f98c 	bl	800e958 <__errno>
 8010640:	2316      	movs	r3, #22
 8010642:	6003      	str	r3, [r0, #0]
 8010644:	2000      	movs	r0, #0
 8010646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801064a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010730 <_strtol_l.constprop.0+0x100>
 801064e:	460d      	mov	r5, r1
 8010650:	462e      	mov	r6, r5
 8010652:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010656:	f814 700c 	ldrb.w	r7, [r4, ip]
 801065a:	f017 0708 	ands.w	r7, r7, #8
 801065e:	d1f7      	bne.n	8010650 <_strtol_l.constprop.0+0x20>
 8010660:	2c2d      	cmp	r4, #45	; 0x2d
 8010662:	d132      	bne.n	80106ca <_strtol_l.constprop.0+0x9a>
 8010664:	782c      	ldrb	r4, [r5, #0]
 8010666:	2701      	movs	r7, #1
 8010668:	1cb5      	adds	r5, r6, #2
 801066a:	2b00      	cmp	r3, #0
 801066c:	d05b      	beq.n	8010726 <_strtol_l.constprop.0+0xf6>
 801066e:	2b10      	cmp	r3, #16
 8010670:	d109      	bne.n	8010686 <_strtol_l.constprop.0+0x56>
 8010672:	2c30      	cmp	r4, #48	; 0x30
 8010674:	d107      	bne.n	8010686 <_strtol_l.constprop.0+0x56>
 8010676:	782c      	ldrb	r4, [r5, #0]
 8010678:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801067c:	2c58      	cmp	r4, #88	; 0x58
 801067e:	d14d      	bne.n	801071c <_strtol_l.constprop.0+0xec>
 8010680:	786c      	ldrb	r4, [r5, #1]
 8010682:	2310      	movs	r3, #16
 8010684:	3502      	adds	r5, #2
 8010686:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801068a:	f108 38ff 	add.w	r8, r8, #4294967295
 801068e:	f04f 0c00 	mov.w	ip, #0
 8010692:	fbb8 f9f3 	udiv	r9, r8, r3
 8010696:	4666      	mov	r6, ip
 8010698:	fb03 8a19 	mls	sl, r3, r9, r8
 801069c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80106a0:	f1be 0f09 	cmp.w	lr, #9
 80106a4:	d816      	bhi.n	80106d4 <_strtol_l.constprop.0+0xa4>
 80106a6:	4674      	mov	r4, lr
 80106a8:	42a3      	cmp	r3, r4
 80106aa:	dd24      	ble.n	80106f6 <_strtol_l.constprop.0+0xc6>
 80106ac:	f1bc 0f00 	cmp.w	ip, #0
 80106b0:	db1e      	blt.n	80106f0 <_strtol_l.constprop.0+0xc0>
 80106b2:	45b1      	cmp	r9, r6
 80106b4:	d31c      	bcc.n	80106f0 <_strtol_l.constprop.0+0xc0>
 80106b6:	d101      	bne.n	80106bc <_strtol_l.constprop.0+0x8c>
 80106b8:	45a2      	cmp	sl, r4
 80106ba:	db19      	blt.n	80106f0 <_strtol_l.constprop.0+0xc0>
 80106bc:	fb06 4603 	mla	r6, r6, r3, r4
 80106c0:	f04f 0c01 	mov.w	ip, #1
 80106c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80106c8:	e7e8      	b.n	801069c <_strtol_l.constprop.0+0x6c>
 80106ca:	2c2b      	cmp	r4, #43	; 0x2b
 80106cc:	bf04      	itt	eq
 80106ce:	782c      	ldrbeq	r4, [r5, #0]
 80106d0:	1cb5      	addeq	r5, r6, #2
 80106d2:	e7ca      	b.n	801066a <_strtol_l.constprop.0+0x3a>
 80106d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80106d8:	f1be 0f19 	cmp.w	lr, #25
 80106dc:	d801      	bhi.n	80106e2 <_strtol_l.constprop.0+0xb2>
 80106de:	3c37      	subs	r4, #55	; 0x37
 80106e0:	e7e2      	b.n	80106a8 <_strtol_l.constprop.0+0x78>
 80106e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80106e6:	f1be 0f19 	cmp.w	lr, #25
 80106ea:	d804      	bhi.n	80106f6 <_strtol_l.constprop.0+0xc6>
 80106ec:	3c57      	subs	r4, #87	; 0x57
 80106ee:	e7db      	b.n	80106a8 <_strtol_l.constprop.0+0x78>
 80106f0:	f04f 3cff 	mov.w	ip, #4294967295
 80106f4:	e7e6      	b.n	80106c4 <_strtol_l.constprop.0+0x94>
 80106f6:	f1bc 0f00 	cmp.w	ip, #0
 80106fa:	da05      	bge.n	8010708 <_strtol_l.constprop.0+0xd8>
 80106fc:	2322      	movs	r3, #34	; 0x22
 80106fe:	6003      	str	r3, [r0, #0]
 8010700:	4646      	mov	r6, r8
 8010702:	b942      	cbnz	r2, 8010716 <_strtol_l.constprop.0+0xe6>
 8010704:	4630      	mov	r0, r6
 8010706:	e79e      	b.n	8010646 <_strtol_l.constprop.0+0x16>
 8010708:	b107      	cbz	r7, 801070c <_strtol_l.constprop.0+0xdc>
 801070a:	4276      	negs	r6, r6
 801070c:	2a00      	cmp	r2, #0
 801070e:	d0f9      	beq.n	8010704 <_strtol_l.constprop.0+0xd4>
 8010710:	f1bc 0f00 	cmp.w	ip, #0
 8010714:	d000      	beq.n	8010718 <_strtol_l.constprop.0+0xe8>
 8010716:	1e69      	subs	r1, r5, #1
 8010718:	6011      	str	r1, [r2, #0]
 801071a:	e7f3      	b.n	8010704 <_strtol_l.constprop.0+0xd4>
 801071c:	2430      	movs	r4, #48	; 0x30
 801071e:	2b00      	cmp	r3, #0
 8010720:	d1b1      	bne.n	8010686 <_strtol_l.constprop.0+0x56>
 8010722:	2308      	movs	r3, #8
 8010724:	e7af      	b.n	8010686 <_strtol_l.constprop.0+0x56>
 8010726:	2c30      	cmp	r4, #48	; 0x30
 8010728:	d0a5      	beq.n	8010676 <_strtol_l.constprop.0+0x46>
 801072a:	230a      	movs	r3, #10
 801072c:	e7ab      	b.n	8010686 <_strtol_l.constprop.0+0x56>
 801072e:	bf00      	nop
 8010730:	08015199 	.word	0x08015199

08010734 <_strtol_r>:
 8010734:	f7ff bf7c 	b.w	8010630 <_strtol_l.constprop.0>

08010738 <__swbuf_r>:
 8010738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801073a:	460e      	mov	r6, r1
 801073c:	4614      	mov	r4, r2
 801073e:	4605      	mov	r5, r0
 8010740:	b118      	cbz	r0, 801074a <__swbuf_r+0x12>
 8010742:	6983      	ldr	r3, [r0, #24]
 8010744:	b90b      	cbnz	r3, 801074a <__swbuf_r+0x12>
 8010746:	f001 f86f 	bl	8011828 <__sinit>
 801074a:	4b21      	ldr	r3, [pc, #132]	; (80107d0 <__swbuf_r+0x98>)
 801074c:	429c      	cmp	r4, r3
 801074e:	d12b      	bne.n	80107a8 <__swbuf_r+0x70>
 8010750:	686c      	ldr	r4, [r5, #4]
 8010752:	69a3      	ldr	r3, [r4, #24]
 8010754:	60a3      	str	r3, [r4, #8]
 8010756:	89a3      	ldrh	r3, [r4, #12]
 8010758:	071a      	lsls	r2, r3, #28
 801075a:	d52f      	bpl.n	80107bc <__swbuf_r+0x84>
 801075c:	6923      	ldr	r3, [r4, #16]
 801075e:	b36b      	cbz	r3, 80107bc <__swbuf_r+0x84>
 8010760:	6923      	ldr	r3, [r4, #16]
 8010762:	6820      	ldr	r0, [r4, #0]
 8010764:	1ac0      	subs	r0, r0, r3
 8010766:	6963      	ldr	r3, [r4, #20]
 8010768:	b2f6      	uxtb	r6, r6
 801076a:	4283      	cmp	r3, r0
 801076c:	4637      	mov	r7, r6
 801076e:	dc04      	bgt.n	801077a <__swbuf_r+0x42>
 8010770:	4621      	mov	r1, r4
 8010772:	4628      	mov	r0, r5
 8010774:	f000 ffc4 	bl	8011700 <_fflush_r>
 8010778:	bb30      	cbnz	r0, 80107c8 <__swbuf_r+0x90>
 801077a:	68a3      	ldr	r3, [r4, #8]
 801077c:	3b01      	subs	r3, #1
 801077e:	60a3      	str	r3, [r4, #8]
 8010780:	6823      	ldr	r3, [r4, #0]
 8010782:	1c5a      	adds	r2, r3, #1
 8010784:	6022      	str	r2, [r4, #0]
 8010786:	701e      	strb	r6, [r3, #0]
 8010788:	6963      	ldr	r3, [r4, #20]
 801078a:	3001      	adds	r0, #1
 801078c:	4283      	cmp	r3, r0
 801078e:	d004      	beq.n	801079a <__swbuf_r+0x62>
 8010790:	89a3      	ldrh	r3, [r4, #12]
 8010792:	07db      	lsls	r3, r3, #31
 8010794:	d506      	bpl.n	80107a4 <__swbuf_r+0x6c>
 8010796:	2e0a      	cmp	r6, #10
 8010798:	d104      	bne.n	80107a4 <__swbuf_r+0x6c>
 801079a:	4621      	mov	r1, r4
 801079c:	4628      	mov	r0, r5
 801079e:	f000 ffaf 	bl	8011700 <_fflush_r>
 80107a2:	b988      	cbnz	r0, 80107c8 <__swbuf_r+0x90>
 80107a4:	4638      	mov	r0, r7
 80107a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107a8:	4b0a      	ldr	r3, [pc, #40]	; (80107d4 <__swbuf_r+0x9c>)
 80107aa:	429c      	cmp	r4, r3
 80107ac:	d101      	bne.n	80107b2 <__swbuf_r+0x7a>
 80107ae:	68ac      	ldr	r4, [r5, #8]
 80107b0:	e7cf      	b.n	8010752 <__swbuf_r+0x1a>
 80107b2:	4b09      	ldr	r3, [pc, #36]	; (80107d8 <__swbuf_r+0xa0>)
 80107b4:	429c      	cmp	r4, r3
 80107b6:	bf08      	it	eq
 80107b8:	68ec      	ldreq	r4, [r5, #12]
 80107ba:	e7ca      	b.n	8010752 <__swbuf_r+0x1a>
 80107bc:	4621      	mov	r1, r4
 80107be:	4628      	mov	r0, r5
 80107c0:	f000 f81e 	bl	8010800 <__swsetup_r>
 80107c4:	2800      	cmp	r0, #0
 80107c6:	d0cb      	beq.n	8010760 <__swbuf_r+0x28>
 80107c8:	f04f 37ff 	mov.w	r7, #4294967295
 80107cc:	e7ea      	b.n	80107a4 <__swbuf_r+0x6c>
 80107ce:	bf00      	nop
 80107d0:	080153d8 	.word	0x080153d8
 80107d4:	080153f8 	.word	0x080153f8
 80107d8:	080153b8 	.word	0x080153b8

080107dc <_write_r>:
 80107dc:	b538      	push	{r3, r4, r5, lr}
 80107de:	4d07      	ldr	r5, [pc, #28]	; (80107fc <_write_r+0x20>)
 80107e0:	4604      	mov	r4, r0
 80107e2:	4608      	mov	r0, r1
 80107e4:	4611      	mov	r1, r2
 80107e6:	2200      	movs	r2, #0
 80107e8:	602a      	str	r2, [r5, #0]
 80107ea:	461a      	mov	r2, r3
 80107ec:	f7f3 fa0e 	bl	8003c0c <_write>
 80107f0:	1c43      	adds	r3, r0, #1
 80107f2:	d102      	bne.n	80107fa <_write_r+0x1e>
 80107f4:	682b      	ldr	r3, [r5, #0]
 80107f6:	b103      	cbz	r3, 80107fa <_write_r+0x1e>
 80107f8:	6023      	str	r3, [r4, #0]
 80107fa:	bd38      	pop	{r3, r4, r5, pc}
 80107fc:	2000314c 	.word	0x2000314c

08010800 <__swsetup_r>:
 8010800:	4b32      	ldr	r3, [pc, #200]	; (80108cc <__swsetup_r+0xcc>)
 8010802:	b570      	push	{r4, r5, r6, lr}
 8010804:	681d      	ldr	r5, [r3, #0]
 8010806:	4606      	mov	r6, r0
 8010808:	460c      	mov	r4, r1
 801080a:	b125      	cbz	r5, 8010816 <__swsetup_r+0x16>
 801080c:	69ab      	ldr	r3, [r5, #24]
 801080e:	b913      	cbnz	r3, 8010816 <__swsetup_r+0x16>
 8010810:	4628      	mov	r0, r5
 8010812:	f001 f809 	bl	8011828 <__sinit>
 8010816:	4b2e      	ldr	r3, [pc, #184]	; (80108d0 <__swsetup_r+0xd0>)
 8010818:	429c      	cmp	r4, r3
 801081a:	d10f      	bne.n	801083c <__swsetup_r+0x3c>
 801081c:	686c      	ldr	r4, [r5, #4]
 801081e:	89a3      	ldrh	r3, [r4, #12]
 8010820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010824:	0719      	lsls	r1, r3, #28
 8010826:	d42c      	bmi.n	8010882 <__swsetup_r+0x82>
 8010828:	06dd      	lsls	r5, r3, #27
 801082a:	d411      	bmi.n	8010850 <__swsetup_r+0x50>
 801082c:	2309      	movs	r3, #9
 801082e:	6033      	str	r3, [r6, #0]
 8010830:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010834:	81a3      	strh	r3, [r4, #12]
 8010836:	f04f 30ff 	mov.w	r0, #4294967295
 801083a:	e03e      	b.n	80108ba <__swsetup_r+0xba>
 801083c:	4b25      	ldr	r3, [pc, #148]	; (80108d4 <__swsetup_r+0xd4>)
 801083e:	429c      	cmp	r4, r3
 8010840:	d101      	bne.n	8010846 <__swsetup_r+0x46>
 8010842:	68ac      	ldr	r4, [r5, #8]
 8010844:	e7eb      	b.n	801081e <__swsetup_r+0x1e>
 8010846:	4b24      	ldr	r3, [pc, #144]	; (80108d8 <__swsetup_r+0xd8>)
 8010848:	429c      	cmp	r4, r3
 801084a:	bf08      	it	eq
 801084c:	68ec      	ldreq	r4, [r5, #12]
 801084e:	e7e6      	b.n	801081e <__swsetup_r+0x1e>
 8010850:	0758      	lsls	r0, r3, #29
 8010852:	d512      	bpl.n	801087a <__swsetup_r+0x7a>
 8010854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010856:	b141      	cbz	r1, 801086a <__swsetup_r+0x6a>
 8010858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801085c:	4299      	cmp	r1, r3
 801085e:	d002      	beq.n	8010866 <__swsetup_r+0x66>
 8010860:	4630      	mov	r0, r6
 8010862:	f002 f95f 	bl	8012b24 <_free_r>
 8010866:	2300      	movs	r3, #0
 8010868:	6363      	str	r3, [r4, #52]	; 0x34
 801086a:	89a3      	ldrh	r3, [r4, #12]
 801086c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010870:	81a3      	strh	r3, [r4, #12]
 8010872:	2300      	movs	r3, #0
 8010874:	6063      	str	r3, [r4, #4]
 8010876:	6923      	ldr	r3, [r4, #16]
 8010878:	6023      	str	r3, [r4, #0]
 801087a:	89a3      	ldrh	r3, [r4, #12]
 801087c:	f043 0308 	orr.w	r3, r3, #8
 8010880:	81a3      	strh	r3, [r4, #12]
 8010882:	6923      	ldr	r3, [r4, #16]
 8010884:	b94b      	cbnz	r3, 801089a <__swsetup_r+0x9a>
 8010886:	89a3      	ldrh	r3, [r4, #12]
 8010888:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801088c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010890:	d003      	beq.n	801089a <__swsetup_r+0x9a>
 8010892:	4621      	mov	r1, r4
 8010894:	4630      	mov	r0, r6
 8010896:	f001 fc13 	bl	80120c0 <__smakebuf_r>
 801089a:	89a0      	ldrh	r0, [r4, #12]
 801089c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80108a0:	f010 0301 	ands.w	r3, r0, #1
 80108a4:	d00a      	beq.n	80108bc <__swsetup_r+0xbc>
 80108a6:	2300      	movs	r3, #0
 80108a8:	60a3      	str	r3, [r4, #8]
 80108aa:	6963      	ldr	r3, [r4, #20]
 80108ac:	425b      	negs	r3, r3
 80108ae:	61a3      	str	r3, [r4, #24]
 80108b0:	6923      	ldr	r3, [r4, #16]
 80108b2:	b943      	cbnz	r3, 80108c6 <__swsetup_r+0xc6>
 80108b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80108b8:	d1ba      	bne.n	8010830 <__swsetup_r+0x30>
 80108ba:	bd70      	pop	{r4, r5, r6, pc}
 80108bc:	0781      	lsls	r1, r0, #30
 80108be:	bf58      	it	pl
 80108c0:	6963      	ldrpl	r3, [r4, #20]
 80108c2:	60a3      	str	r3, [r4, #8]
 80108c4:	e7f4      	b.n	80108b0 <__swsetup_r+0xb0>
 80108c6:	2000      	movs	r0, #0
 80108c8:	e7f7      	b.n	80108ba <__swsetup_r+0xba>
 80108ca:	bf00      	nop
 80108cc:	20000110 	.word	0x20000110
 80108d0:	080153d8 	.word	0x080153d8
 80108d4:	080153f8 	.word	0x080153f8
 80108d8:	080153b8 	.word	0x080153b8

080108dc <_close_r>:
 80108dc:	b538      	push	{r3, r4, r5, lr}
 80108de:	4d06      	ldr	r5, [pc, #24]	; (80108f8 <_close_r+0x1c>)
 80108e0:	2300      	movs	r3, #0
 80108e2:	4604      	mov	r4, r0
 80108e4:	4608      	mov	r0, r1
 80108e6:	602b      	str	r3, [r5, #0]
 80108e8:	f7f3 fcf7 	bl	80042da <_close>
 80108ec:	1c43      	adds	r3, r0, #1
 80108ee:	d102      	bne.n	80108f6 <_close_r+0x1a>
 80108f0:	682b      	ldr	r3, [r5, #0]
 80108f2:	b103      	cbz	r3, 80108f6 <_close_r+0x1a>
 80108f4:	6023      	str	r3, [r4, #0]
 80108f6:	bd38      	pop	{r3, r4, r5, pc}
 80108f8:	2000314c 	.word	0x2000314c

080108fc <quorem>:
 80108fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010900:	6903      	ldr	r3, [r0, #16]
 8010902:	690c      	ldr	r4, [r1, #16]
 8010904:	42a3      	cmp	r3, r4
 8010906:	4607      	mov	r7, r0
 8010908:	f2c0 8081 	blt.w	8010a0e <quorem+0x112>
 801090c:	3c01      	subs	r4, #1
 801090e:	f101 0814 	add.w	r8, r1, #20
 8010912:	f100 0514 	add.w	r5, r0, #20
 8010916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801091a:	9301      	str	r3, [sp, #4]
 801091c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010920:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010924:	3301      	adds	r3, #1
 8010926:	429a      	cmp	r2, r3
 8010928:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801092c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010930:	fbb2 f6f3 	udiv	r6, r2, r3
 8010934:	d331      	bcc.n	801099a <quorem+0x9e>
 8010936:	f04f 0e00 	mov.w	lr, #0
 801093a:	4640      	mov	r0, r8
 801093c:	46ac      	mov	ip, r5
 801093e:	46f2      	mov	sl, lr
 8010940:	f850 2b04 	ldr.w	r2, [r0], #4
 8010944:	b293      	uxth	r3, r2
 8010946:	fb06 e303 	mla	r3, r6, r3, lr
 801094a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801094e:	b29b      	uxth	r3, r3
 8010950:	ebaa 0303 	sub.w	r3, sl, r3
 8010954:	f8dc a000 	ldr.w	sl, [ip]
 8010958:	0c12      	lsrs	r2, r2, #16
 801095a:	fa13 f38a 	uxtah	r3, r3, sl
 801095e:	fb06 e202 	mla	r2, r6, r2, lr
 8010962:	9300      	str	r3, [sp, #0]
 8010964:	9b00      	ldr	r3, [sp, #0]
 8010966:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801096a:	b292      	uxth	r2, r2
 801096c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010970:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010974:	f8bd 3000 	ldrh.w	r3, [sp]
 8010978:	4581      	cmp	r9, r0
 801097a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801097e:	f84c 3b04 	str.w	r3, [ip], #4
 8010982:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010986:	d2db      	bcs.n	8010940 <quorem+0x44>
 8010988:	f855 300b 	ldr.w	r3, [r5, fp]
 801098c:	b92b      	cbnz	r3, 801099a <quorem+0x9e>
 801098e:	9b01      	ldr	r3, [sp, #4]
 8010990:	3b04      	subs	r3, #4
 8010992:	429d      	cmp	r5, r3
 8010994:	461a      	mov	r2, r3
 8010996:	d32e      	bcc.n	80109f6 <quorem+0xfa>
 8010998:	613c      	str	r4, [r7, #16]
 801099a:	4638      	mov	r0, r7
 801099c:	f001 feb6 	bl	801270c <__mcmp>
 80109a0:	2800      	cmp	r0, #0
 80109a2:	db24      	blt.n	80109ee <quorem+0xf2>
 80109a4:	3601      	adds	r6, #1
 80109a6:	4628      	mov	r0, r5
 80109a8:	f04f 0c00 	mov.w	ip, #0
 80109ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80109b0:	f8d0 e000 	ldr.w	lr, [r0]
 80109b4:	b293      	uxth	r3, r2
 80109b6:	ebac 0303 	sub.w	r3, ip, r3
 80109ba:	0c12      	lsrs	r2, r2, #16
 80109bc:	fa13 f38e 	uxtah	r3, r3, lr
 80109c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80109c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109ce:	45c1      	cmp	r9, r8
 80109d0:	f840 3b04 	str.w	r3, [r0], #4
 80109d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80109d8:	d2e8      	bcs.n	80109ac <quorem+0xb0>
 80109da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80109e2:	b922      	cbnz	r2, 80109ee <quorem+0xf2>
 80109e4:	3b04      	subs	r3, #4
 80109e6:	429d      	cmp	r5, r3
 80109e8:	461a      	mov	r2, r3
 80109ea:	d30a      	bcc.n	8010a02 <quorem+0x106>
 80109ec:	613c      	str	r4, [r7, #16]
 80109ee:	4630      	mov	r0, r6
 80109f0:	b003      	add	sp, #12
 80109f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109f6:	6812      	ldr	r2, [r2, #0]
 80109f8:	3b04      	subs	r3, #4
 80109fa:	2a00      	cmp	r2, #0
 80109fc:	d1cc      	bne.n	8010998 <quorem+0x9c>
 80109fe:	3c01      	subs	r4, #1
 8010a00:	e7c7      	b.n	8010992 <quorem+0x96>
 8010a02:	6812      	ldr	r2, [r2, #0]
 8010a04:	3b04      	subs	r3, #4
 8010a06:	2a00      	cmp	r2, #0
 8010a08:	d1f0      	bne.n	80109ec <quorem+0xf0>
 8010a0a:	3c01      	subs	r4, #1
 8010a0c:	e7eb      	b.n	80109e6 <quorem+0xea>
 8010a0e:	2000      	movs	r0, #0
 8010a10:	e7ee      	b.n	80109f0 <quorem+0xf4>
 8010a12:	0000      	movs	r0, r0
 8010a14:	0000      	movs	r0, r0
	...

08010a18 <_dtoa_r>:
 8010a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a1c:	ed2d 8b04 	vpush	{d8-d9}
 8010a20:	ec57 6b10 	vmov	r6, r7, d0
 8010a24:	b093      	sub	sp, #76	; 0x4c
 8010a26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010a28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010a2c:	9106      	str	r1, [sp, #24]
 8010a2e:	ee10 aa10 	vmov	sl, s0
 8010a32:	4604      	mov	r4, r0
 8010a34:	9209      	str	r2, [sp, #36]	; 0x24
 8010a36:	930c      	str	r3, [sp, #48]	; 0x30
 8010a38:	46bb      	mov	fp, r7
 8010a3a:	b975      	cbnz	r5, 8010a5a <_dtoa_r+0x42>
 8010a3c:	2010      	movs	r0, #16
 8010a3e:	f001 fb7f 	bl	8012140 <malloc>
 8010a42:	4602      	mov	r2, r0
 8010a44:	6260      	str	r0, [r4, #36]	; 0x24
 8010a46:	b920      	cbnz	r0, 8010a52 <_dtoa_r+0x3a>
 8010a48:	4ba7      	ldr	r3, [pc, #668]	; (8010ce8 <_dtoa_r+0x2d0>)
 8010a4a:	21ea      	movs	r1, #234	; 0xea
 8010a4c:	48a7      	ldr	r0, [pc, #668]	; (8010cec <_dtoa_r+0x2d4>)
 8010a4e:	f003 f857 	bl	8013b00 <__assert_func>
 8010a52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010a56:	6005      	str	r5, [r0, #0]
 8010a58:	60c5      	str	r5, [r0, #12]
 8010a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a5c:	6819      	ldr	r1, [r3, #0]
 8010a5e:	b151      	cbz	r1, 8010a76 <_dtoa_r+0x5e>
 8010a60:	685a      	ldr	r2, [r3, #4]
 8010a62:	604a      	str	r2, [r1, #4]
 8010a64:	2301      	movs	r3, #1
 8010a66:	4093      	lsls	r3, r2
 8010a68:	608b      	str	r3, [r1, #8]
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	f001 fbc2 	bl	80121f4 <_Bfree>
 8010a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a72:	2200      	movs	r2, #0
 8010a74:	601a      	str	r2, [r3, #0]
 8010a76:	1e3b      	subs	r3, r7, #0
 8010a78:	bfaa      	itet	ge
 8010a7a:	2300      	movge	r3, #0
 8010a7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010a80:	f8c8 3000 	strge.w	r3, [r8]
 8010a84:	4b9a      	ldr	r3, [pc, #616]	; (8010cf0 <_dtoa_r+0x2d8>)
 8010a86:	bfbc      	itt	lt
 8010a88:	2201      	movlt	r2, #1
 8010a8a:	f8c8 2000 	strlt.w	r2, [r8]
 8010a8e:	ea33 030b 	bics.w	r3, r3, fp
 8010a92:	d11b      	bne.n	8010acc <_dtoa_r+0xb4>
 8010a94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a96:	f242 730f 	movw	r3, #9999	; 0x270f
 8010a9a:	6013      	str	r3, [r2, #0]
 8010a9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010aa0:	4333      	orrs	r3, r6
 8010aa2:	f000 8592 	beq.w	80115ca <_dtoa_r+0xbb2>
 8010aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010aa8:	b963      	cbnz	r3, 8010ac4 <_dtoa_r+0xac>
 8010aaa:	4b92      	ldr	r3, [pc, #584]	; (8010cf4 <_dtoa_r+0x2dc>)
 8010aac:	e022      	b.n	8010af4 <_dtoa_r+0xdc>
 8010aae:	4b92      	ldr	r3, [pc, #584]	; (8010cf8 <_dtoa_r+0x2e0>)
 8010ab0:	9301      	str	r3, [sp, #4]
 8010ab2:	3308      	adds	r3, #8
 8010ab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010ab6:	6013      	str	r3, [r2, #0]
 8010ab8:	9801      	ldr	r0, [sp, #4]
 8010aba:	b013      	add	sp, #76	; 0x4c
 8010abc:	ecbd 8b04 	vpop	{d8-d9}
 8010ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac4:	4b8b      	ldr	r3, [pc, #556]	; (8010cf4 <_dtoa_r+0x2dc>)
 8010ac6:	9301      	str	r3, [sp, #4]
 8010ac8:	3303      	adds	r3, #3
 8010aca:	e7f3      	b.n	8010ab4 <_dtoa_r+0x9c>
 8010acc:	2200      	movs	r2, #0
 8010ace:	2300      	movs	r3, #0
 8010ad0:	4650      	mov	r0, sl
 8010ad2:	4659      	mov	r1, fp
 8010ad4:	f7f0 f818 	bl	8000b08 <__aeabi_dcmpeq>
 8010ad8:	ec4b ab19 	vmov	d9, sl, fp
 8010adc:	4680      	mov	r8, r0
 8010ade:	b158      	cbz	r0, 8010af8 <_dtoa_r+0xe0>
 8010ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	6013      	str	r3, [r2, #0]
 8010ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	f000 856b 	beq.w	80115c4 <_dtoa_r+0xbac>
 8010aee:	4883      	ldr	r0, [pc, #524]	; (8010cfc <_dtoa_r+0x2e4>)
 8010af0:	6018      	str	r0, [r3, #0]
 8010af2:	1e43      	subs	r3, r0, #1
 8010af4:	9301      	str	r3, [sp, #4]
 8010af6:	e7df      	b.n	8010ab8 <_dtoa_r+0xa0>
 8010af8:	ec4b ab10 	vmov	d0, sl, fp
 8010afc:	aa10      	add	r2, sp, #64	; 0x40
 8010afe:	a911      	add	r1, sp, #68	; 0x44
 8010b00:	4620      	mov	r0, r4
 8010b02:	f001 ff25 	bl	8012950 <__d2b>
 8010b06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010b0a:	ee08 0a10 	vmov	s16, r0
 8010b0e:	2d00      	cmp	r5, #0
 8010b10:	f000 8084 	beq.w	8010c1c <_dtoa_r+0x204>
 8010b14:	ee19 3a90 	vmov	r3, s19
 8010b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010b20:	4656      	mov	r6, sl
 8010b22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010b26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010b2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010b2e:	4b74      	ldr	r3, [pc, #464]	; (8010d00 <_dtoa_r+0x2e8>)
 8010b30:	2200      	movs	r2, #0
 8010b32:	4630      	mov	r0, r6
 8010b34:	4639      	mov	r1, r7
 8010b36:	f7ef fbc7 	bl	80002c8 <__aeabi_dsub>
 8010b3a:	a365      	add	r3, pc, #404	; (adr r3, 8010cd0 <_dtoa_r+0x2b8>)
 8010b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b40:	f7ef fd7a 	bl	8000638 <__aeabi_dmul>
 8010b44:	a364      	add	r3, pc, #400	; (adr r3, 8010cd8 <_dtoa_r+0x2c0>)
 8010b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b4a:	f7ef fbbf 	bl	80002cc <__adddf3>
 8010b4e:	4606      	mov	r6, r0
 8010b50:	4628      	mov	r0, r5
 8010b52:	460f      	mov	r7, r1
 8010b54:	f7ef fd06 	bl	8000564 <__aeabi_i2d>
 8010b58:	a361      	add	r3, pc, #388	; (adr r3, 8010ce0 <_dtoa_r+0x2c8>)
 8010b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5e:	f7ef fd6b 	bl	8000638 <__aeabi_dmul>
 8010b62:	4602      	mov	r2, r0
 8010b64:	460b      	mov	r3, r1
 8010b66:	4630      	mov	r0, r6
 8010b68:	4639      	mov	r1, r7
 8010b6a:	f7ef fbaf 	bl	80002cc <__adddf3>
 8010b6e:	4606      	mov	r6, r0
 8010b70:	460f      	mov	r7, r1
 8010b72:	f7f0 f811 	bl	8000b98 <__aeabi_d2iz>
 8010b76:	2200      	movs	r2, #0
 8010b78:	9000      	str	r0, [sp, #0]
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	4630      	mov	r0, r6
 8010b7e:	4639      	mov	r1, r7
 8010b80:	f7ef ffcc 	bl	8000b1c <__aeabi_dcmplt>
 8010b84:	b150      	cbz	r0, 8010b9c <_dtoa_r+0x184>
 8010b86:	9800      	ldr	r0, [sp, #0]
 8010b88:	f7ef fcec 	bl	8000564 <__aeabi_i2d>
 8010b8c:	4632      	mov	r2, r6
 8010b8e:	463b      	mov	r3, r7
 8010b90:	f7ef ffba 	bl	8000b08 <__aeabi_dcmpeq>
 8010b94:	b910      	cbnz	r0, 8010b9c <_dtoa_r+0x184>
 8010b96:	9b00      	ldr	r3, [sp, #0]
 8010b98:	3b01      	subs	r3, #1
 8010b9a:	9300      	str	r3, [sp, #0]
 8010b9c:	9b00      	ldr	r3, [sp, #0]
 8010b9e:	2b16      	cmp	r3, #22
 8010ba0:	d85a      	bhi.n	8010c58 <_dtoa_r+0x240>
 8010ba2:	9a00      	ldr	r2, [sp, #0]
 8010ba4:	4b57      	ldr	r3, [pc, #348]	; (8010d04 <_dtoa_r+0x2ec>)
 8010ba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bae:	ec51 0b19 	vmov	r0, r1, d9
 8010bb2:	f7ef ffb3 	bl	8000b1c <__aeabi_dcmplt>
 8010bb6:	2800      	cmp	r0, #0
 8010bb8:	d050      	beq.n	8010c5c <_dtoa_r+0x244>
 8010bba:	9b00      	ldr	r3, [sp, #0]
 8010bbc:	3b01      	subs	r3, #1
 8010bbe:	9300      	str	r3, [sp, #0]
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8010bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010bc6:	1b5d      	subs	r5, r3, r5
 8010bc8:	1e6b      	subs	r3, r5, #1
 8010bca:	9305      	str	r3, [sp, #20]
 8010bcc:	bf45      	ittet	mi
 8010bce:	f1c5 0301 	rsbmi	r3, r5, #1
 8010bd2:	9304      	strmi	r3, [sp, #16]
 8010bd4:	2300      	movpl	r3, #0
 8010bd6:	2300      	movmi	r3, #0
 8010bd8:	bf4c      	ite	mi
 8010bda:	9305      	strmi	r3, [sp, #20]
 8010bdc:	9304      	strpl	r3, [sp, #16]
 8010bde:	9b00      	ldr	r3, [sp, #0]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	db3d      	blt.n	8010c60 <_dtoa_r+0x248>
 8010be4:	9b05      	ldr	r3, [sp, #20]
 8010be6:	9a00      	ldr	r2, [sp, #0]
 8010be8:	920a      	str	r2, [sp, #40]	; 0x28
 8010bea:	4413      	add	r3, r2
 8010bec:	9305      	str	r3, [sp, #20]
 8010bee:	2300      	movs	r3, #0
 8010bf0:	9307      	str	r3, [sp, #28]
 8010bf2:	9b06      	ldr	r3, [sp, #24]
 8010bf4:	2b09      	cmp	r3, #9
 8010bf6:	f200 8089 	bhi.w	8010d0c <_dtoa_r+0x2f4>
 8010bfa:	2b05      	cmp	r3, #5
 8010bfc:	bfc4      	itt	gt
 8010bfe:	3b04      	subgt	r3, #4
 8010c00:	9306      	strgt	r3, [sp, #24]
 8010c02:	9b06      	ldr	r3, [sp, #24]
 8010c04:	f1a3 0302 	sub.w	r3, r3, #2
 8010c08:	bfcc      	ite	gt
 8010c0a:	2500      	movgt	r5, #0
 8010c0c:	2501      	movle	r5, #1
 8010c0e:	2b03      	cmp	r3, #3
 8010c10:	f200 8087 	bhi.w	8010d22 <_dtoa_r+0x30a>
 8010c14:	e8df f003 	tbb	[pc, r3]
 8010c18:	59383a2d 	.word	0x59383a2d
 8010c1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010c20:	441d      	add	r5, r3
 8010c22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010c26:	2b20      	cmp	r3, #32
 8010c28:	bfc1      	itttt	gt
 8010c2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010c2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010c32:	fa0b f303 	lslgt.w	r3, fp, r3
 8010c36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010c3a:	bfda      	itte	le
 8010c3c:	f1c3 0320 	rsble	r3, r3, #32
 8010c40:	fa06 f003 	lslle.w	r0, r6, r3
 8010c44:	4318      	orrgt	r0, r3
 8010c46:	f7ef fc7d 	bl	8000544 <__aeabi_ui2d>
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	4606      	mov	r6, r0
 8010c4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010c52:	3d01      	subs	r5, #1
 8010c54:	930e      	str	r3, [sp, #56]	; 0x38
 8010c56:	e76a      	b.n	8010b2e <_dtoa_r+0x116>
 8010c58:	2301      	movs	r3, #1
 8010c5a:	e7b2      	b.n	8010bc2 <_dtoa_r+0x1aa>
 8010c5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010c5e:	e7b1      	b.n	8010bc4 <_dtoa_r+0x1ac>
 8010c60:	9b04      	ldr	r3, [sp, #16]
 8010c62:	9a00      	ldr	r2, [sp, #0]
 8010c64:	1a9b      	subs	r3, r3, r2
 8010c66:	9304      	str	r3, [sp, #16]
 8010c68:	4253      	negs	r3, r2
 8010c6a:	9307      	str	r3, [sp, #28]
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8010c70:	e7bf      	b.n	8010bf2 <_dtoa_r+0x1da>
 8010c72:	2300      	movs	r3, #0
 8010c74:	9308      	str	r3, [sp, #32]
 8010c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	dc55      	bgt.n	8010d28 <_dtoa_r+0x310>
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c82:	461a      	mov	r2, r3
 8010c84:	9209      	str	r2, [sp, #36]	; 0x24
 8010c86:	e00c      	b.n	8010ca2 <_dtoa_r+0x28a>
 8010c88:	2301      	movs	r3, #1
 8010c8a:	e7f3      	b.n	8010c74 <_dtoa_r+0x25c>
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c90:	9308      	str	r3, [sp, #32]
 8010c92:	9b00      	ldr	r3, [sp, #0]
 8010c94:	4413      	add	r3, r2
 8010c96:	9302      	str	r3, [sp, #8]
 8010c98:	3301      	adds	r3, #1
 8010c9a:	2b01      	cmp	r3, #1
 8010c9c:	9303      	str	r3, [sp, #12]
 8010c9e:	bfb8      	it	lt
 8010ca0:	2301      	movlt	r3, #1
 8010ca2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	6042      	str	r2, [r0, #4]
 8010ca8:	2204      	movs	r2, #4
 8010caa:	f102 0614 	add.w	r6, r2, #20
 8010cae:	429e      	cmp	r6, r3
 8010cb0:	6841      	ldr	r1, [r0, #4]
 8010cb2:	d93d      	bls.n	8010d30 <_dtoa_r+0x318>
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	f001 fa5d 	bl	8012174 <_Balloc>
 8010cba:	9001      	str	r0, [sp, #4]
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	d13b      	bne.n	8010d38 <_dtoa_r+0x320>
 8010cc0:	4b11      	ldr	r3, [pc, #68]	; (8010d08 <_dtoa_r+0x2f0>)
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010cc8:	e6c0      	b.n	8010a4c <_dtoa_r+0x34>
 8010cca:	2301      	movs	r3, #1
 8010ccc:	e7df      	b.n	8010c8e <_dtoa_r+0x276>
 8010cce:	bf00      	nop
 8010cd0:	636f4361 	.word	0x636f4361
 8010cd4:	3fd287a7 	.word	0x3fd287a7
 8010cd8:	8b60c8b3 	.word	0x8b60c8b3
 8010cdc:	3fc68a28 	.word	0x3fc68a28
 8010ce0:	509f79fb 	.word	0x509f79fb
 8010ce4:	3fd34413 	.word	0x3fd34413
 8010ce8:	08015335 	.word	0x08015335
 8010cec:	0801534c 	.word	0x0801534c
 8010cf0:	7ff00000 	.word	0x7ff00000
 8010cf4:	08015331 	.word	0x08015331
 8010cf8:	08015328 	.word	0x08015328
 8010cfc:	08015602 	.word	0x08015602
 8010d00:	3ff80000 	.word	0x3ff80000
 8010d04:	08015518 	.word	0x08015518
 8010d08:	080153a7 	.word	0x080153a7
 8010d0c:	2501      	movs	r5, #1
 8010d0e:	2300      	movs	r3, #0
 8010d10:	9306      	str	r3, [sp, #24]
 8010d12:	9508      	str	r5, [sp, #32]
 8010d14:	f04f 33ff 	mov.w	r3, #4294967295
 8010d18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	2312      	movs	r3, #18
 8010d20:	e7b0      	b.n	8010c84 <_dtoa_r+0x26c>
 8010d22:	2301      	movs	r3, #1
 8010d24:	9308      	str	r3, [sp, #32]
 8010d26:	e7f5      	b.n	8010d14 <_dtoa_r+0x2fc>
 8010d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010d2e:	e7b8      	b.n	8010ca2 <_dtoa_r+0x28a>
 8010d30:	3101      	adds	r1, #1
 8010d32:	6041      	str	r1, [r0, #4]
 8010d34:	0052      	lsls	r2, r2, #1
 8010d36:	e7b8      	b.n	8010caa <_dtoa_r+0x292>
 8010d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d3a:	9a01      	ldr	r2, [sp, #4]
 8010d3c:	601a      	str	r2, [r3, #0]
 8010d3e:	9b03      	ldr	r3, [sp, #12]
 8010d40:	2b0e      	cmp	r3, #14
 8010d42:	f200 809d 	bhi.w	8010e80 <_dtoa_r+0x468>
 8010d46:	2d00      	cmp	r5, #0
 8010d48:	f000 809a 	beq.w	8010e80 <_dtoa_r+0x468>
 8010d4c:	9b00      	ldr	r3, [sp, #0]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	dd32      	ble.n	8010db8 <_dtoa_r+0x3a0>
 8010d52:	4ab7      	ldr	r2, [pc, #732]	; (8011030 <_dtoa_r+0x618>)
 8010d54:	f003 030f 	and.w	r3, r3, #15
 8010d58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010d5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010d60:	9b00      	ldr	r3, [sp, #0]
 8010d62:	05d8      	lsls	r0, r3, #23
 8010d64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010d68:	d516      	bpl.n	8010d98 <_dtoa_r+0x380>
 8010d6a:	4bb2      	ldr	r3, [pc, #712]	; (8011034 <_dtoa_r+0x61c>)
 8010d6c:	ec51 0b19 	vmov	r0, r1, d9
 8010d70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010d74:	f7ef fd8a 	bl	800088c <__aeabi_ddiv>
 8010d78:	f007 070f 	and.w	r7, r7, #15
 8010d7c:	4682      	mov	sl, r0
 8010d7e:	468b      	mov	fp, r1
 8010d80:	2503      	movs	r5, #3
 8010d82:	4eac      	ldr	r6, [pc, #688]	; (8011034 <_dtoa_r+0x61c>)
 8010d84:	b957      	cbnz	r7, 8010d9c <_dtoa_r+0x384>
 8010d86:	4642      	mov	r2, r8
 8010d88:	464b      	mov	r3, r9
 8010d8a:	4650      	mov	r0, sl
 8010d8c:	4659      	mov	r1, fp
 8010d8e:	f7ef fd7d 	bl	800088c <__aeabi_ddiv>
 8010d92:	4682      	mov	sl, r0
 8010d94:	468b      	mov	fp, r1
 8010d96:	e028      	b.n	8010dea <_dtoa_r+0x3d2>
 8010d98:	2502      	movs	r5, #2
 8010d9a:	e7f2      	b.n	8010d82 <_dtoa_r+0x36a>
 8010d9c:	07f9      	lsls	r1, r7, #31
 8010d9e:	d508      	bpl.n	8010db2 <_dtoa_r+0x39a>
 8010da0:	4640      	mov	r0, r8
 8010da2:	4649      	mov	r1, r9
 8010da4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010da8:	f7ef fc46 	bl	8000638 <__aeabi_dmul>
 8010dac:	3501      	adds	r5, #1
 8010dae:	4680      	mov	r8, r0
 8010db0:	4689      	mov	r9, r1
 8010db2:	107f      	asrs	r7, r7, #1
 8010db4:	3608      	adds	r6, #8
 8010db6:	e7e5      	b.n	8010d84 <_dtoa_r+0x36c>
 8010db8:	f000 809b 	beq.w	8010ef2 <_dtoa_r+0x4da>
 8010dbc:	9b00      	ldr	r3, [sp, #0]
 8010dbe:	4f9d      	ldr	r7, [pc, #628]	; (8011034 <_dtoa_r+0x61c>)
 8010dc0:	425e      	negs	r6, r3
 8010dc2:	4b9b      	ldr	r3, [pc, #620]	; (8011030 <_dtoa_r+0x618>)
 8010dc4:	f006 020f 	and.w	r2, r6, #15
 8010dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd0:	ec51 0b19 	vmov	r0, r1, d9
 8010dd4:	f7ef fc30 	bl	8000638 <__aeabi_dmul>
 8010dd8:	1136      	asrs	r6, r6, #4
 8010dda:	4682      	mov	sl, r0
 8010ddc:	468b      	mov	fp, r1
 8010dde:	2300      	movs	r3, #0
 8010de0:	2502      	movs	r5, #2
 8010de2:	2e00      	cmp	r6, #0
 8010de4:	d17a      	bne.n	8010edc <_dtoa_r+0x4c4>
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d1d3      	bne.n	8010d92 <_dtoa_r+0x37a>
 8010dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	f000 8082 	beq.w	8010ef6 <_dtoa_r+0x4de>
 8010df2:	4b91      	ldr	r3, [pc, #580]	; (8011038 <_dtoa_r+0x620>)
 8010df4:	2200      	movs	r2, #0
 8010df6:	4650      	mov	r0, sl
 8010df8:	4659      	mov	r1, fp
 8010dfa:	f7ef fe8f 	bl	8000b1c <__aeabi_dcmplt>
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	d079      	beq.n	8010ef6 <_dtoa_r+0x4de>
 8010e02:	9b03      	ldr	r3, [sp, #12]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d076      	beq.n	8010ef6 <_dtoa_r+0x4de>
 8010e08:	9b02      	ldr	r3, [sp, #8]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	dd36      	ble.n	8010e7c <_dtoa_r+0x464>
 8010e0e:	9b00      	ldr	r3, [sp, #0]
 8010e10:	4650      	mov	r0, sl
 8010e12:	4659      	mov	r1, fp
 8010e14:	1e5f      	subs	r7, r3, #1
 8010e16:	2200      	movs	r2, #0
 8010e18:	4b88      	ldr	r3, [pc, #544]	; (801103c <_dtoa_r+0x624>)
 8010e1a:	f7ef fc0d 	bl	8000638 <__aeabi_dmul>
 8010e1e:	9e02      	ldr	r6, [sp, #8]
 8010e20:	4682      	mov	sl, r0
 8010e22:	468b      	mov	fp, r1
 8010e24:	3501      	adds	r5, #1
 8010e26:	4628      	mov	r0, r5
 8010e28:	f7ef fb9c 	bl	8000564 <__aeabi_i2d>
 8010e2c:	4652      	mov	r2, sl
 8010e2e:	465b      	mov	r3, fp
 8010e30:	f7ef fc02 	bl	8000638 <__aeabi_dmul>
 8010e34:	4b82      	ldr	r3, [pc, #520]	; (8011040 <_dtoa_r+0x628>)
 8010e36:	2200      	movs	r2, #0
 8010e38:	f7ef fa48 	bl	80002cc <__adddf3>
 8010e3c:	46d0      	mov	r8, sl
 8010e3e:	46d9      	mov	r9, fp
 8010e40:	4682      	mov	sl, r0
 8010e42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010e46:	2e00      	cmp	r6, #0
 8010e48:	d158      	bne.n	8010efc <_dtoa_r+0x4e4>
 8010e4a:	4b7e      	ldr	r3, [pc, #504]	; (8011044 <_dtoa_r+0x62c>)
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	4640      	mov	r0, r8
 8010e50:	4649      	mov	r1, r9
 8010e52:	f7ef fa39 	bl	80002c8 <__aeabi_dsub>
 8010e56:	4652      	mov	r2, sl
 8010e58:	465b      	mov	r3, fp
 8010e5a:	4680      	mov	r8, r0
 8010e5c:	4689      	mov	r9, r1
 8010e5e:	f7ef fe7b 	bl	8000b58 <__aeabi_dcmpgt>
 8010e62:	2800      	cmp	r0, #0
 8010e64:	f040 8295 	bne.w	8011392 <_dtoa_r+0x97a>
 8010e68:	4652      	mov	r2, sl
 8010e6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010e6e:	4640      	mov	r0, r8
 8010e70:	4649      	mov	r1, r9
 8010e72:	f7ef fe53 	bl	8000b1c <__aeabi_dcmplt>
 8010e76:	2800      	cmp	r0, #0
 8010e78:	f040 8289 	bne.w	801138e <_dtoa_r+0x976>
 8010e7c:	ec5b ab19 	vmov	sl, fp, d9
 8010e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	f2c0 8148 	blt.w	8011118 <_dtoa_r+0x700>
 8010e88:	9a00      	ldr	r2, [sp, #0]
 8010e8a:	2a0e      	cmp	r2, #14
 8010e8c:	f300 8144 	bgt.w	8011118 <_dtoa_r+0x700>
 8010e90:	4b67      	ldr	r3, [pc, #412]	; (8011030 <_dtoa_r+0x618>)
 8010e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	f280 80d5 	bge.w	801104c <_dtoa_r+0x634>
 8010ea2:	9b03      	ldr	r3, [sp, #12]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	f300 80d1 	bgt.w	801104c <_dtoa_r+0x634>
 8010eaa:	f040 826f 	bne.w	801138c <_dtoa_r+0x974>
 8010eae:	4b65      	ldr	r3, [pc, #404]	; (8011044 <_dtoa_r+0x62c>)
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	4640      	mov	r0, r8
 8010eb4:	4649      	mov	r1, r9
 8010eb6:	f7ef fbbf 	bl	8000638 <__aeabi_dmul>
 8010eba:	4652      	mov	r2, sl
 8010ebc:	465b      	mov	r3, fp
 8010ebe:	f7ef fe41 	bl	8000b44 <__aeabi_dcmpge>
 8010ec2:	9e03      	ldr	r6, [sp, #12]
 8010ec4:	4637      	mov	r7, r6
 8010ec6:	2800      	cmp	r0, #0
 8010ec8:	f040 8245 	bne.w	8011356 <_dtoa_r+0x93e>
 8010ecc:	9d01      	ldr	r5, [sp, #4]
 8010ece:	2331      	movs	r3, #49	; 0x31
 8010ed0:	f805 3b01 	strb.w	r3, [r5], #1
 8010ed4:	9b00      	ldr	r3, [sp, #0]
 8010ed6:	3301      	adds	r3, #1
 8010ed8:	9300      	str	r3, [sp, #0]
 8010eda:	e240      	b.n	801135e <_dtoa_r+0x946>
 8010edc:	07f2      	lsls	r2, r6, #31
 8010ede:	d505      	bpl.n	8010eec <_dtoa_r+0x4d4>
 8010ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ee4:	f7ef fba8 	bl	8000638 <__aeabi_dmul>
 8010ee8:	3501      	adds	r5, #1
 8010eea:	2301      	movs	r3, #1
 8010eec:	1076      	asrs	r6, r6, #1
 8010eee:	3708      	adds	r7, #8
 8010ef0:	e777      	b.n	8010de2 <_dtoa_r+0x3ca>
 8010ef2:	2502      	movs	r5, #2
 8010ef4:	e779      	b.n	8010dea <_dtoa_r+0x3d2>
 8010ef6:	9f00      	ldr	r7, [sp, #0]
 8010ef8:	9e03      	ldr	r6, [sp, #12]
 8010efa:	e794      	b.n	8010e26 <_dtoa_r+0x40e>
 8010efc:	9901      	ldr	r1, [sp, #4]
 8010efe:	4b4c      	ldr	r3, [pc, #304]	; (8011030 <_dtoa_r+0x618>)
 8010f00:	4431      	add	r1, r6
 8010f02:	910d      	str	r1, [sp, #52]	; 0x34
 8010f04:	9908      	ldr	r1, [sp, #32]
 8010f06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010f0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010f0e:	2900      	cmp	r1, #0
 8010f10:	d043      	beq.n	8010f9a <_dtoa_r+0x582>
 8010f12:	494d      	ldr	r1, [pc, #308]	; (8011048 <_dtoa_r+0x630>)
 8010f14:	2000      	movs	r0, #0
 8010f16:	f7ef fcb9 	bl	800088c <__aeabi_ddiv>
 8010f1a:	4652      	mov	r2, sl
 8010f1c:	465b      	mov	r3, fp
 8010f1e:	f7ef f9d3 	bl	80002c8 <__aeabi_dsub>
 8010f22:	9d01      	ldr	r5, [sp, #4]
 8010f24:	4682      	mov	sl, r0
 8010f26:	468b      	mov	fp, r1
 8010f28:	4649      	mov	r1, r9
 8010f2a:	4640      	mov	r0, r8
 8010f2c:	f7ef fe34 	bl	8000b98 <__aeabi_d2iz>
 8010f30:	4606      	mov	r6, r0
 8010f32:	f7ef fb17 	bl	8000564 <__aeabi_i2d>
 8010f36:	4602      	mov	r2, r0
 8010f38:	460b      	mov	r3, r1
 8010f3a:	4640      	mov	r0, r8
 8010f3c:	4649      	mov	r1, r9
 8010f3e:	f7ef f9c3 	bl	80002c8 <__aeabi_dsub>
 8010f42:	3630      	adds	r6, #48	; 0x30
 8010f44:	f805 6b01 	strb.w	r6, [r5], #1
 8010f48:	4652      	mov	r2, sl
 8010f4a:	465b      	mov	r3, fp
 8010f4c:	4680      	mov	r8, r0
 8010f4e:	4689      	mov	r9, r1
 8010f50:	f7ef fde4 	bl	8000b1c <__aeabi_dcmplt>
 8010f54:	2800      	cmp	r0, #0
 8010f56:	d163      	bne.n	8011020 <_dtoa_r+0x608>
 8010f58:	4642      	mov	r2, r8
 8010f5a:	464b      	mov	r3, r9
 8010f5c:	4936      	ldr	r1, [pc, #216]	; (8011038 <_dtoa_r+0x620>)
 8010f5e:	2000      	movs	r0, #0
 8010f60:	f7ef f9b2 	bl	80002c8 <__aeabi_dsub>
 8010f64:	4652      	mov	r2, sl
 8010f66:	465b      	mov	r3, fp
 8010f68:	f7ef fdd8 	bl	8000b1c <__aeabi_dcmplt>
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	f040 80b5 	bne.w	80110dc <_dtoa_r+0x6c4>
 8010f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f74:	429d      	cmp	r5, r3
 8010f76:	d081      	beq.n	8010e7c <_dtoa_r+0x464>
 8010f78:	4b30      	ldr	r3, [pc, #192]	; (801103c <_dtoa_r+0x624>)
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	4650      	mov	r0, sl
 8010f7e:	4659      	mov	r1, fp
 8010f80:	f7ef fb5a 	bl	8000638 <__aeabi_dmul>
 8010f84:	4b2d      	ldr	r3, [pc, #180]	; (801103c <_dtoa_r+0x624>)
 8010f86:	4682      	mov	sl, r0
 8010f88:	468b      	mov	fp, r1
 8010f8a:	4640      	mov	r0, r8
 8010f8c:	4649      	mov	r1, r9
 8010f8e:	2200      	movs	r2, #0
 8010f90:	f7ef fb52 	bl	8000638 <__aeabi_dmul>
 8010f94:	4680      	mov	r8, r0
 8010f96:	4689      	mov	r9, r1
 8010f98:	e7c6      	b.n	8010f28 <_dtoa_r+0x510>
 8010f9a:	4650      	mov	r0, sl
 8010f9c:	4659      	mov	r1, fp
 8010f9e:	f7ef fb4b 	bl	8000638 <__aeabi_dmul>
 8010fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fa4:	9d01      	ldr	r5, [sp, #4]
 8010fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010fa8:	4682      	mov	sl, r0
 8010faa:	468b      	mov	fp, r1
 8010fac:	4649      	mov	r1, r9
 8010fae:	4640      	mov	r0, r8
 8010fb0:	f7ef fdf2 	bl	8000b98 <__aeabi_d2iz>
 8010fb4:	4606      	mov	r6, r0
 8010fb6:	f7ef fad5 	bl	8000564 <__aeabi_i2d>
 8010fba:	3630      	adds	r6, #48	; 0x30
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	460b      	mov	r3, r1
 8010fc0:	4640      	mov	r0, r8
 8010fc2:	4649      	mov	r1, r9
 8010fc4:	f7ef f980 	bl	80002c8 <__aeabi_dsub>
 8010fc8:	f805 6b01 	strb.w	r6, [r5], #1
 8010fcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fce:	429d      	cmp	r5, r3
 8010fd0:	4680      	mov	r8, r0
 8010fd2:	4689      	mov	r9, r1
 8010fd4:	f04f 0200 	mov.w	r2, #0
 8010fd8:	d124      	bne.n	8011024 <_dtoa_r+0x60c>
 8010fda:	4b1b      	ldr	r3, [pc, #108]	; (8011048 <_dtoa_r+0x630>)
 8010fdc:	4650      	mov	r0, sl
 8010fde:	4659      	mov	r1, fp
 8010fe0:	f7ef f974 	bl	80002cc <__adddf3>
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	460b      	mov	r3, r1
 8010fe8:	4640      	mov	r0, r8
 8010fea:	4649      	mov	r1, r9
 8010fec:	f7ef fdb4 	bl	8000b58 <__aeabi_dcmpgt>
 8010ff0:	2800      	cmp	r0, #0
 8010ff2:	d173      	bne.n	80110dc <_dtoa_r+0x6c4>
 8010ff4:	4652      	mov	r2, sl
 8010ff6:	465b      	mov	r3, fp
 8010ff8:	4913      	ldr	r1, [pc, #76]	; (8011048 <_dtoa_r+0x630>)
 8010ffa:	2000      	movs	r0, #0
 8010ffc:	f7ef f964 	bl	80002c8 <__aeabi_dsub>
 8011000:	4602      	mov	r2, r0
 8011002:	460b      	mov	r3, r1
 8011004:	4640      	mov	r0, r8
 8011006:	4649      	mov	r1, r9
 8011008:	f7ef fd88 	bl	8000b1c <__aeabi_dcmplt>
 801100c:	2800      	cmp	r0, #0
 801100e:	f43f af35 	beq.w	8010e7c <_dtoa_r+0x464>
 8011012:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011014:	1e6b      	subs	r3, r5, #1
 8011016:	930f      	str	r3, [sp, #60]	; 0x3c
 8011018:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801101c:	2b30      	cmp	r3, #48	; 0x30
 801101e:	d0f8      	beq.n	8011012 <_dtoa_r+0x5fa>
 8011020:	9700      	str	r7, [sp, #0]
 8011022:	e049      	b.n	80110b8 <_dtoa_r+0x6a0>
 8011024:	4b05      	ldr	r3, [pc, #20]	; (801103c <_dtoa_r+0x624>)
 8011026:	f7ef fb07 	bl	8000638 <__aeabi_dmul>
 801102a:	4680      	mov	r8, r0
 801102c:	4689      	mov	r9, r1
 801102e:	e7bd      	b.n	8010fac <_dtoa_r+0x594>
 8011030:	08015518 	.word	0x08015518
 8011034:	080154f0 	.word	0x080154f0
 8011038:	3ff00000 	.word	0x3ff00000
 801103c:	40240000 	.word	0x40240000
 8011040:	401c0000 	.word	0x401c0000
 8011044:	40140000 	.word	0x40140000
 8011048:	3fe00000 	.word	0x3fe00000
 801104c:	9d01      	ldr	r5, [sp, #4]
 801104e:	4656      	mov	r6, sl
 8011050:	465f      	mov	r7, fp
 8011052:	4642      	mov	r2, r8
 8011054:	464b      	mov	r3, r9
 8011056:	4630      	mov	r0, r6
 8011058:	4639      	mov	r1, r7
 801105a:	f7ef fc17 	bl	800088c <__aeabi_ddiv>
 801105e:	f7ef fd9b 	bl	8000b98 <__aeabi_d2iz>
 8011062:	4682      	mov	sl, r0
 8011064:	f7ef fa7e 	bl	8000564 <__aeabi_i2d>
 8011068:	4642      	mov	r2, r8
 801106a:	464b      	mov	r3, r9
 801106c:	f7ef fae4 	bl	8000638 <__aeabi_dmul>
 8011070:	4602      	mov	r2, r0
 8011072:	460b      	mov	r3, r1
 8011074:	4630      	mov	r0, r6
 8011076:	4639      	mov	r1, r7
 8011078:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801107c:	f7ef f924 	bl	80002c8 <__aeabi_dsub>
 8011080:	f805 6b01 	strb.w	r6, [r5], #1
 8011084:	9e01      	ldr	r6, [sp, #4]
 8011086:	9f03      	ldr	r7, [sp, #12]
 8011088:	1bae      	subs	r6, r5, r6
 801108a:	42b7      	cmp	r7, r6
 801108c:	4602      	mov	r2, r0
 801108e:	460b      	mov	r3, r1
 8011090:	d135      	bne.n	80110fe <_dtoa_r+0x6e6>
 8011092:	f7ef f91b 	bl	80002cc <__adddf3>
 8011096:	4642      	mov	r2, r8
 8011098:	464b      	mov	r3, r9
 801109a:	4606      	mov	r6, r0
 801109c:	460f      	mov	r7, r1
 801109e:	f7ef fd5b 	bl	8000b58 <__aeabi_dcmpgt>
 80110a2:	b9d0      	cbnz	r0, 80110da <_dtoa_r+0x6c2>
 80110a4:	4642      	mov	r2, r8
 80110a6:	464b      	mov	r3, r9
 80110a8:	4630      	mov	r0, r6
 80110aa:	4639      	mov	r1, r7
 80110ac:	f7ef fd2c 	bl	8000b08 <__aeabi_dcmpeq>
 80110b0:	b110      	cbz	r0, 80110b8 <_dtoa_r+0x6a0>
 80110b2:	f01a 0f01 	tst.w	sl, #1
 80110b6:	d110      	bne.n	80110da <_dtoa_r+0x6c2>
 80110b8:	4620      	mov	r0, r4
 80110ba:	ee18 1a10 	vmov	r1, s16
 80110be:	f001 f899 	bl	80121f4 <_Bfree>
 80110c2:	2300      	movs	r3, #0
 80110c4:	9800      	ldr	r0, [sp, #0]
 80110c6:	702b      	strb	r3, [r5, #0]
 80110c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110ca:	3001      	adds	r0, #1
 80110cc:	6018      	str	r0, [r3, #0]
 80110ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	f43f acf1 	beq.w	8010ab8 <_dtoa_r+0xa0>
 80110d6:	601d      	str	r5, [r3, #0]
 80110d8:	e4ee      	b.n	8010ab8 <_dtoa_r+0xa0>
 80110da:	9f00      	ldr	r7, [sp, #0]
 80110dc:	462b      	mov	r3, r5
 80110de:	461d      	mov	r5, r3
 80110e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110e4:	2a39      	cmp	r2, #57	; 0x39
 80110e6:	d106      	bne.n	80110f6 <_dtoa_r+0x6de>
 80110e8:	9a01      	ldr	r2, [sp, #4]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d1f7      	bne.n	80110de <_dtoa_r+0x6c6>
 80110ee:	9901      	ldr	r1, [sp, #4]
 80110f0:	2230      	movs	r2, #48	; 0x30
 80110f2:	3701      	adds	r7, #1
 80110f4:	700a      	strb	r2, [r1, #0]
 80110f6:	781a      	ldrb	r2, [r3, #0]
 80110f8:	3201      	adds	r2, #1
 80110fa:	701a      	strb	r2, [r3, #0]
 80110fc:	e790      	b.n	8011020 <_dtoa_r+0x608>
 80110fe:	4ba6      	ldr	r3, [pc, #664]	; (8011398 <_dtoa_r+0x980>)
 8011100:	2200      	movs	r2, #0
 8011102:	f7ef fa99 	bl	8000638 <__aeabi_dmul>
 8011106:	2200      	movs	r2, #0
 8011108:	2300      	movs	r3, #0
 801110a:	4606      	mov	r6, r0
 801110c:	460f      	mov	r7, r1
 801110e:	f7ef fcfb 	bl	8000b08 <__aeabi_dcmpeq>
 8011112:	2800      	cmp	r0, #0
 8011114:	d09d      	beq.n	8011052 <_dtoa_r+0x63a>
 8011116:	e7cf      	b.n	80110b8 <_dtoa_r+0x6a0>
 8011118:	9a08      	ldr	r2, [sp, #32]
 801111a:	2a00      	cmp	r2, #0
 801111c:	f000 80d7 	beq.w	80112ce <_dtoa_r+0x8b6>
 8011120:	9a06      	ldr	r2, [sp, #24]
 8011122:	2a01      	cmp	r2, #1
 8011124:	f300 80ba 	bgt.w	801129c <_dtoa_r+0x884>
 8011128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801112a:	2a00      	cmp	r2, #0
 801112c:	f000 80b2 	beq.w	8011294 <_dtoa_r+0x87c>
 8011130:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011134:	9e07      	ldr	r6, [sp, #28]
 8011136:	9d04      	ldr	r5, [sp, #16]
 8011138:	9a04      	ldr	r2, [sp, #16]
 801113a:	441a      	add	r2, r3
 801113c:	9204      	str	r2, [sp, #16]
 801113e:	9a05      	ldr	r2, [sp, #20]
 8011140:	2101      	movs	r1, #1
 8011142:	441a      	add	r2, r3
 8011144:	4620      	mov	r0, r4
 8011146:	9205      	str	r2, [sp, #20]
 8011148:	f001 f956 	bl	80123f8 <__i2b>
 801114c:	4607      	mov	r7, r0
 801114e:	2d00      	cmp	r5, #0
 8011150:	dd0c      	ble.n	801116c <_dtoa_r+0x754>
 8011152:	9b05      	ldr	r3, [sp, #20]
 8011154:	2b00      	cmp	r3, #0
 8011156:	dd09      	ble.n	801116c <_dtoa_r+0x754>
 8011158:	42ab      	cmp	r3, r5
 801115a:	9a04      	ldr	r2, [sp, #16]
 801115c:	bfa8      	it	ge
 801115e:	462b      	movge	r3, r5
 8011160:	1ad2      	subs	r2, r2, r3
 8011162:	9204      	str	r2, [sp, #16]
 8011164:	9a05      	ldr	r2, [sp, #20]
 8011166:	1aed      	subs	r5, r5, r3
 8011168:	1ad3      	subs	r3, r2, r3
 801116a:	9305      	str	r3, [sp, #20]
 801116c:	9b07      	ldr	r3, [sp, #28]
 801116e:	b31b      	cbz	r3, 80111b8 <_dtoa_r+0x7a0>
 8011170:	9b08      	ldr	r3, [sp, #32]
 8011172:	2b00      	cmp	r3, #0
 8011174:	f000 80af 	beq.w	80112d6 <_dtoa_r+0x8be>
 8011178:	2e00      	cmp	r6, #0
 801117a:	dd13      	ble.n	80111a4 <_dtoa_r+0x78c>
 801117c:	4639      	mov	r1, r7
 801117e:	4632      	mov	r2, r6
 8011180:	4620      	mov	r0, r4
 8011182:	f001 f9f9 	bl	8012578 <__pow5mult>
 8011186:	ee18 2a10 	vmov	r2, s16
 801118a:	4601      	mov	r1, r0
 801118c:	4607      	mov	r7, r0
 801118e:	4620      	mov	r0, r4
 8011190:	f001 f948 	bl	8012424 <__multiply>
 8011194:	ee18 1a10 	vmov	r1, s16
 8011198:	4680      	mov	r8, r0
 801119a:	4620      	mov	r0, r4
 801119c:	f001 f82a 	bl	80121f4 <_Bfree>
 80111a0:	ee08 8a10 	vmov	s16, r8
 80111a4:	9b07      	ldr	r3, [sp, #28]
 80111a6:	1b9a      	subs	r2, r3, r6
 80111a8:	d006      	beq.n	80111b8 <_dtoa_r+0x7a0>
 80111aa:	ee18 1a10 	vmov	r1, s16
 80111ae:	4620      	mov	r0, r4
 80111b0:	f001 f9e2 	bl	8012578 <__pow5mult>
 80111b4:	ee08 0a10 	vmov	s16, r0
 80111b8:	2101      	movs	r1, #1
 80111ba:	4620      	mov	r0, r4
 80111bc:	f001 f91c 	bl	80123f8 <__i2b>
 80111c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	4606      	mov	r6, r0
 80111c6:	f340 8088 	ble.w	80112da <_dtoa_r+0x8c2>
 80111ca:	461a      	mov	r2, r3
 80111cc:	4601      	mov	r1, r0
 80111ce:	4620      	mov	r0, r4
 80111d0:	f001 f9d2 	bl	8012578 <__pow5mult>
 80111d4:	9b06      	ldr	r3, [sp, #24]
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	4606      	mov	r6, r0
 80111da:	f340 8081 	ble.w	80112e0 <_dtoa_r+0x8c8>
 80111de:	f04f 0800 	mov.w	r8, #0
 80111e2:	6933      	ldr	r3, [r6, #16]
 80111e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80111e8:	6918      	ldr	r0, [r3, #16]
 80111ea:	f001 f8b5 	bl	8012358 <__hi0bits>
 80111ee:	f1c0 0020 	rsb	r0, r0, #32
 80111f2:	9b05      	ldr	r3, [sp, #20]
 80111f4:	4418      	add	r0, r3
 80111f6:	f010 001f 	ands.w	r0, r0, #31
 80111fa:	f000 8092 	beq.w	8011322 <_dtoa_r+0x90a>
 80111fe:	f1c0 0320 	rsb	r3, r0, #32
 8011202:	2b04      	cmp	r3, #4
 8011204:	f340 808a 	ble.w	801131c <_dtoa_r+0x904>
 8011208:	f1c0 001c 	rsb	r0, r0, #28
 801120c:	9b04      	ldr	r3, [sp, #16]
 801120e:	4403      	add	r3, r0
 8011210:	9304      	str	r3, [sp, #16]
 8011212:	9b05      	ldr	r3, [sp, #20]
 8011214:	4403      	add	r3, r0
 8011216:	4405      	add	r5, r0
 8011218:	9305      	str	r3, [sp, #20]
 801121a:	9b04      	ldr	r3, [sp, #16]
 801121c:	2b00      	cmp	r3, #0
 801121e:	dd07      	ble.n	8011230 <_dtoa_r+0x818>
 8011220:	ee18 1a10 	vmov	r1, s16
 8011224:	461a      	mov	r2, r3
 8011226:	4620      	mov	r0, r4
 8011228:	f001 fa00 	bl	801262c <__lshift>
 801122c:	ee08 0a10 	vmov	s16, r0
 8011230:	9b05      	ldr	r3, [sp, #20]
 8011232:	2b00      	cmp	r3, #0
 8011234:	dd05      	ble.n	8011242 <_dtoa_r+0x82a>
 8011236:	4631      	mov	r1, r6
 8011238:	461a      	mov	r2, r3
 801123a:	4620      	mov	r0, r4
 801123c:	f001 f9f6 	bl	801262c <__lshift>
 8011240:	4606      	mov	r6, r0
 8011242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011244:	2b00      	cmp	r3, #0
 8011246:	d06e      	beq.n	8011326 <_dtoa_r+0x90e>
 8011248:	ee18 0a10 	vmov	r0, s16
 801124c:	4631      	mov	r1, r6
 801124e:	f001 fa5d 	bl	801270c <__mcmp>
 8011252:	2800      	cmp	r0, #0
 8011254:	da67      	bge.n	8011326 <_dtoa_r+0x90e>
 8011256:	9b00      	ldr	r3, [sp, #0]
 8011258:	3b01      	subs	r3, #1
 801125a:	ee18 1a10 	vmov	r1, s16
 801125e:	9300      	str	r3, [sp, #0]
 8011260:	220a      	movs	r2, #10
 8011262:	2300      	movs	r3, #0
 8011264:	4620      	mov	r0, r4
 8011266:	f000 ffe7 	bl	8012238 <__multadd>
 801126a:	9b08      	ldr	r3, [sp, #32]
 801126c:	ee08 0a10 	vmov	s16, r0
 8011270:	2b00      	cmp	r3, #0
 8011272:	f000 81b1 	beq.w	80115d8 <_dtoa_r+0xbc0>
 8011276:	2300      	movs	r3, #0
 8011278:	4639      	mov	r1, r7
 801127a:	220a      	movs	r2, #10
 801127c:	4620      	mov	r0, r4
 801127e:	f000 ffdb 	bl	8012238 <__multadd>
 8011282:	9b02      	ldr	r3, [sp, #8]
 8011284:	2b00      	cmp	r3, #0
 8011286:	4607      	mov	r7, r0
 8011288:	f300 808e 	bgt.w	80113a8 <_dtoa_r+0x990>
 801128c:	9b06      	ldr	r3, [sp, #24]
 801128e:	2b02      	cmp	r3, #2
 8011290:	dc51      	bgt.n	8011336 <_dtoa_r+0x91e>
 8011292:	e089      	b.n	80113a8 <_dtoa_r+0x990>
 8011294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011296:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801129a:	e74b      	b.n	8011134 <_dtoa_r+0x71c>
 801129c:	9b03      	ldr	r3, [sp, #12]
 801129e:	1e5e      	subs	r6, r3, #1
 80112a0:	9b07      	ldr	r3, [sp, #28]
 80112a2:	42b3      	cmp	r3, r6
 80112a4:	bfbf      	itttt	lt
 80112a6:	9b07      	ldrlt	r3, [sp, #28]
 80112a8:	9607      	strlt	r6, [sp, #28]
 80112aa:	1af2      	sublt	r2, r6, r3
 80112ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80112ae:	bfb6      	itet	lt
 80112b0:	189b      	addlt	r3, r3, r2
 80112b2:	1b9e      	subge	r6, r3, r6
 80112b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80112b6:	9b03      	ldr	r3, [sp, #12]
 80112b8:	bfb8      	it	lt
 80112ba:	2600      	movlt	r6, #0
 80112bc:	2b00      	cmp	r3, #0
 80112be:	bfb7      	itett	lt
 80112c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80112c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80112c8:	1a9d      	sublt	r5, r3, r2
 80112ca:	2300      	movlt	r3, #0
 80112cc:	e734      	b.n	8011138 <_dtoa_r+0x720>
 80112ce:	9e07      	ldr	r6, [sp, #28]
 80112d0:	9d04      	ldr	r5, [sp, #16]
 80112d2:	9f08      	ldr	r7, [sp, #32]
 80112d4:	e73b      	b.n	801114e <_dtoa_r+0x736>
 80112d6:	9a07      	ldr	r2, [sp, #28]
 80112d8:	e767      	b.n	80111aa <_dtoa_r+0x792>
 80112da:	9b06      	ldr	r3, [sp, #24]
 80112dc:	2b01      	cmp	r3, #1
 80112de:	dc18      	bgt.n	8011312 <_dtoa_r+0x8fa>
 80112e0:	f1ba 0f00 	cmp.w	sl, #0
 80112e4:	d115      	bne.n	8011312 <_dtoa_r+0x8fa>
 80112e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80112ea:	b993      	cbnz	r3, 8011312 <_dtoa_r+0x8fa>
 80112ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80112f0:	0d1b      	lsrs	r3, r3, #20
 80112f2:	051b      	lsls	r3, r3, #20
 80112f4:	b183      	cbz	r3, 8011318 <_dtoa_r+0x900>
 80112f6:	9b04      	ldr	r3, [sp, #16]
 80112f8:	3301      	adds	r3, #1
 80112fa:	9304      	str	r3, [sp, #16]
 80112fc:	9b05      	ldr	r3, [sp, #20]
 80112fe:	3301      	adds	r3, #1
 8011300:	9305      	str	r3, [sp, #20]
 8011302:	f04f 0801 	mov.w	r8, #1
 8011306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011308:	2b00      	cmp	r3, #0
 801130a:	f47f af6a 	bne.w	80111e2 <_dtoa_r+0x7ca>
 801130e:	2001      	movs	r0, #1
 8011310:	e76f      	b.n	80111f2 <_dtoa_r+0x7da>
 8011312:	f04f 0800 	mov.w	r8, #0
 8011316:	e7f6      	b.n	8011306 <_dtoa_r+0x8ee>
 8011318:	4698      	mov	r8, r3
 801131a:	e7f4      	b.n	8011306 <_dtoa_r+0x8ee>
 801131c:	f43f af7d 	beq.w	801121a <_dtoa_r+0x802>
 8011320:	4618      	mov	r0, r3
 8011322:	301c      	adds	r0, #28
 8011324:	e772      	b.n	801120c <_dtoa_r+0x7f4>
 8011326:	9b03      	ldr	r3, [sp, #12]
 8011328:	2b00      	cmp	r3, #0
 801132a:	dc37      	bgt.n	801139c <_dtoa_r+0x984>
 801132c:	9b06      	ldr	r3, [sp, #24]
 801132e:	2b02      	cmp	r3, #2
 8011330:	dd34      	ble.n	801139c <_dtoa_r+0x984>
 8011332:	9b03      	ldr	r3, [sp, #12]
 8011334:	9302      	str	r3, [sp, #8]
 8011336:	9b02      	ldr	r3, [sp, #8]
 8011338:	b96b      	cbnz	r3, 8011356 <_dtoa_r+0x93e>
 801133a:	4631      	mov	r1, r6
 801133c:	2205      	movs	r2, #5
 801133e:	4620      	mov	r0, r4
 8011340:	f000 ff7a 	bl	8012238 <__multadd>
 8011344:	4601      	mov	r1, r0
 8011346:	4606      	mov	r6, r0
 8011348:	ee18 0a10 	vmov	r0, s16
 801134c:	f001 f9de 	bl	801270c <__mcmp>
 8011350:	2800      	cmp	r0, #0
 8011352:	f73f adbb 	bgt.w	8010ecc <_dtoa_r+0x4b4>
 8011356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011358:	9d01      	ldr	r5, [sp, #4]
 801135a:	43db      	mvns	r3, r3
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	f04f 0800 	mov.w	r8, #0
 8011362:	4631      	mov	r1, r6
 8011364:	4620      	mov	r0, r4
 8011366:	f000 ff45 	bl	80121f4 <_Bfree>
 801136a:	2f00      	cmp	r7, #0
 801136c:	f43f aea4 	beq.w	80110b8 <_dtoa_r+0x6a0>
 8011370:	f1b8 0f00 	cmp.w	r8, #0
 8011374:	d005      	beq.n	8011382 <_dtoa_r+0x96a>
 8011376:	45b8      	cmp	r8, r7
 8011378:	d003      	beq.n	8011382 <_dtoa_r+0x96a>
 801137a:	4641      	mov	r1, r8
 801137c:	4620      	mov	r0, r4
 801137e:	f000 ff39 	bl	80121f4 <_Bfree>
 8011382:	4639      	mov	r1, r7
 8011384:	4620      	mov	r0, r4
 8011386:	f000 ff35 	bl	80121f4 <_Bfree>
 801138a:	e695      	b.n	80110b8 <_dtoa_r+0x6a0>
 801138c:	2600      	movs	r6, #0
 801138e:	4637      	mov	r7, r6
 8011390:	e7e1      	b.n	8011356 <_dtoa_r+0x93e>
 8011392:	9700      	str	r7, [sp, #0]
 8011394:	4637      	mov	r7, r6
 8011396:	e599      	b.n	8010ecc <_dtoa_r+0x4b4>
 8011398:	40240000 	.word	0x40240000
 801139c:	9b08      	ldr	r3, [sp, #32]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f000 80ca 	beq.w	8011538 <_dtoa_r+0xb20>
 80113a4:	9b03      	ldr	r3, [sp, #12]
 80113a6:	9302      	str	r3, [sp, #8]
 80113a8:	2d00      	cmp	r5, #0
 80113aa:	dd05      	ble.n	80113b8 <_dtoa_r+0x9a0>
 80113ac:	4639      	mov	r1, r7
 80113ae:	462a      	mov	r2, r5
 80113b0:	4620      	mov	r0, r4
 80113b2:	f001 f93b 	bl	801262c <__lshift>
 80113b6:	4607      	mov	r7, r0
 80113b8:	f1b8 0f00 	cmp.w	r8, #0
 80113bc:	d05b      	beq.n	8011476 <_dtoa_r+0xa5e>
 80113be:	6879      	ldr	r1, [r7, #4]
 80113c0:	4620      	mov	r0, r4
 80113c2:	f000 fed7 	bl	8012174 <_Balloc>
 80113c6:	4605      	mov	r5, r0
 80113c8:	b928      	cbnz	r0, 80113d6 <_dtoa_r+0x9be>
 80113ca:	4b87      	ldr	r3, [pc, #540]	; (80115e8 <_dtoa_r+0xbd0>)
 80113cc:	4602      	mov	r2, r0
 80113ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80113d2:	f7ff bb3b 	b.w	8010a4c <_dtoa_r+0x34>
 80113d6:	693a      	ldr	r2, [r7, #16]
 80113d8:	3202      	adds	r2, #2
 80113da:	0092      	lsls	r2, r2, #2
 80113dc:	f107 010c 	add.w	r1, r7, #12
 80113e0:	300c      	adds	r0, #12
 80113e2:	f7fd fae3 	bl	800e9ac <memcpy>
 80113e6:	2201      	movs	r2, #1
 80113e8:	4629      	mov	r1, r5
 80113ea:	4620      	mov	r0, r4
 80113ec:	f001 f91e 	bl	801262c <__lshift>
 80113f0:	9b01      	ldr	r3, [sp, #4]
 80113f2:	f103 0901 	add.w	r9, r3, #1
 80113f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80113fa:	4413      	add	r3, r2
 80113fc:	9305      	str	r3, [sp, #20]
 80113fe:	f00a 0301 	and.w	r3, sl, #1
 8011402:	46b8      	mov	r8, r7
 8011404:	9304      	str	r3, [sp, #16]
 8011406:	4607      	mov	r7, r0
 8011408:	4631      	mov	r1, r6
 801140a:	ee18 0a10 	vmov	r0, s16
 801140e:	f7ff fa75 	bl	80108fc <quorem>
 8011412:	4641      	mov	r1, r8
 8011414:	9002      	str	r0, [sp, #8]
 8011416:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801141a:	ee18 0a10 	vmov	r0, s16
 801141e:	f001 f975 	bl	801270c <__mcmp>
 8011422:	463a      	mov	r2, r7
 8011424:	9003      	str	r0, [sp, #12]
 8011426:	4631      	mov	r1, r6
 8011428:	4620      	mov	r0, r4
 801142a:	f001 f98b 	bl	8012744 <__mdiff>
 801142e:	68c2      	ldr	r2, [r0, #12]
 8011430:	f109 3bff 	add.w	fp, r9, #4294967295
 8011434:	4605      	mov	r5, r0
 8011436:	bb02      	cbnz	r2, 801147a <_dtoa_r+0xa62>
 8011438:	4601      	mov	r1, r0
 801143a:	ee18 0a10 	vmov	r0, s16
 801143e:	f001 f965 	bl	801270c <__mcmp>
 8011442:	4602      	mov	r2, r0
 8011444:	4629      	mov	r1, r5
 8011446:	4620      	mov	r0, r4
 8011448:	9207      	str	r2, [sp, #28]
 801144a:	f000 fed3 	bl	80121f4 <_Bfree>
 801144e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011452:	ea43 0102 	orr.w	r1, r3, r2
 8011456:	9b04      	ldr	r3, [sp, #16]
 8011458:	430b      	orrs	r3, r1
 801145a:	464d      	mov	r5, r9
 801145c:	d10f      	bne.n	801147e <_dtoa_r+0xa66>
 801145e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011462:	d02a      	beq.n	80114ba <_dtoa_r+0xaa2>
 8011464:	9b03      	ldr	r3, [sp, #12]
 8011466:	2b00      	cmp	r3, #0
 8011468:	dd02      	ble.n	8011470 <_dtoa_r+0xa58>
 801146a:	9b02      	ldr	r3, [sp, #8]
 801146c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011470:	f88b a000 	strb.w	sl, [fp]
 8011474:	e775      	b.n	8011362 <_dtoa_r+0x94a>
 8011476:	4638      	mov	r0, r7
 8011478:	e7ba      	b.n	80113f0 <_dtoa_r+0x9d8>
 801147a:	2201      	movs	r2, #1
 801147c:	e7e2      	b.n	8011444 <_dtoa_r+0xa2c>
 801147e:	9b03      	ldr	r3, [sp, #12]
 8011480:	2b00      	cmp	r3, #0
 8011482:	db04      	blt.n	801148e <_dtoa_r+0xa76>
 8011484:	9906      	ldr	r1, [sp, #24]
 8011486:	430b      	orrs	r3, r1
 8011488:	9904      	ldr	r1, [sp, #16]
 801148a:	430b      	orrs	r3, r1
 801148c:	d122      	bne.n	80114d4 <_dtoa_r+0xabc>
 801148e:	2a00      	cmp	r2, #0
 8011490:	ddee      	ble.n	8011470 <_dtoa_r+0xa58>
 8011492:	ee18 1a10 	vmov	r1, s16
 8011496:	2201      	movs	r2, #1
 8011498:	4620      	mov	r0, r4
 801149a:	f001 f8c7 	bl	801262c <__lshift>
 801149e:	4631      	mov	r1, r6
 80114a0:	ee08 0a10 	vmov	s16, r0
 80114a4:	f001 f932 	bl	801270c <__mcmp>
 80114a8:	2800      	cmp	r0, #0
 80114aa:	dc03      	bgt.n	80114b4 <_dtoa_r+0xa9c>
 80114ac:	d1e0      	bne.n	8011470 <_dtoa_r+0xa58>
 80114ae:	f01a 0f01 	tst.w	sl, #1
 80114b2:	d0dd      	beq.n	8011470 <_dtoa_r+0xa58>
 80114b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80114b8:	d1d7      	bne.n	801146a <_dtoa_r+0xa52>
 80114ba:	2339      	movs	r3, #57	; 0x39
 80114bc:	f88b 3000 	strb.w	r3, [fp]
 80114c0:	462b      	mov	r3, r5
 80114c2:	461d      	mov	r5, r3
 80114c4:	3b01      	subs	r3, #1
 80114c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80114ca:	2a39      	cmp	r2, #57	; 0x39
 80114cc:	d071      	beq.n	80115b2 <_dtoa_r+0xb9a>
 80114ce:	3201      	adds	r2, #1
 80114d0:	701a      	strb	r2, [r3, #0]
 80114d2:	e746      	b.n	8011362 <_dtoa_r+0x94a>
 80114d4:	2a00      	cmp	r2, #0
 80114d6:	dd07      	ble.n	80114e8 <_dtoa_r+0xad0>
 80114d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80114dc:	d0ed      	beq.n	80114ba <_dtoa_r+0xaa2>
 80114de:	f10a 0301 	add.w	r3, sl, #1
 80114e2:	f88b 3000 	strb.w	r3, [fp]
 80114e6:	e73c      	b.n	8011362 <_dtoa_r+0x94a>
 80114e8:	9b05      	ldr	r3, [sp, #20]
 80114ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80114ee:	4599      	cmp	r9, r3
 80114f0:	d047      	beq.n	8011582 <_dtoa_r+0xb6a>
 80114f2:	ee18 1a10 	vmov	r1, s16
 80114f6:	2300      	movs	r3, #0
 80114f8:	220a      	movs	r2, #10
 80114fa:	4620      	mov	r0, r4
 80114fc:	f000 fe9c 	bl	8012238 <__multadd>
 8011500:	45b8      	cmp	r8, r7
 8011502:	ee08 0a10 	vmov	s16, r0
 8011506:	f04f 0300 	mov.w	r3, #0
 801150a:	f04f 020a 	mov.w	r2, #10
 801150e:	4641      	mov	r1, r8
 8011510:	4620      	mov	r0, r4
 8011512:	d106      	bne.n	8011522 <_dtoa_r+0xb0a>
 8011514:	f000 fe90 	bl	8012238 <__multadd>
 8011518:	4680      	mov	r8, r0
 801151a:	4607      	mov	r7, r0
 801151c:	f109 0901 	add.w	r9, r9, #1
 8011520:	e772      	b.n	8011408 <_dtoa_r+0x9f0>
 8011522:	f000 fe89 	bl	8012238 <__multadd>
 8011526:	4639      	mov	r1, r7
 8011528:	4680      	mov	r8, r0
 801152a:	2300      	movs	r3, #0
 801152c:	220a      	movs	r2, #10
 801152e:	4620      	mov	r0, r4
 8011530:	f000 fe82 	bl	8012238 <__multadd>
 8011534:	4607      	mov	r7, r0
 8011536:	e7f1      	b.n	801151c <_dtoa_r+0xb04>
 8011538:	9b03      	ldr	r3, [sp, #12]
 801153a:	9302      	str	r3, [sp, #8]
 801153c:	9d01      	ldr	r5, [sp, #4]
 801153e:	ee18 0a10 	vmov	r0, s16
 8011542:	4631      	mov	r1, r6
 8011544:	f7ff f9da 	bl	80108fc <quorem>
 8011548:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801154c:	9b01      	ldr	r3, [sp, #4]
 801154e:	f805 ab01 	strb.w	sl, [r5], #1
 8011552:	1aea      	subs	r2, r5, r3
 8011554:	9b02      	ldr	r3, [sp, #8]
 8011556:	4293      	cmp	r3, r2
 8011558:	dd09      	ble.n	801156e <_dtoa_r+0xb56>
 801155a:	ee18 1a10 	vmov	r1, s16
 801155e:	2300      	movs	r3, #0
 8011560:	220a      	movs	r2, #10
 8011562:	4620      	mov	r0, r4
 8011564:	f000 fe68 	bl	8012238 <__multadd>
 8011568:	ee08 0a10 	vmov	s16, r0
 801156c:	e7e7      	b.n	801153e <_dtoa_r+0xb26>
 801156e:	9b02      	ldr	r3, [sp, #8]
 8011570:	2b00      	cmp	r3, #0
 8011572:	bfc8      	it	gt
 8011574:	461d      	movgt	r5, r3
 8011576:	9b01      	ldr	r3, [sp, #4]
 8011578:	bfd8      	it	le
 801157a:	2501      	movle	r5, #1
 801157c:	441d      	add	r5, r3
 801157e:	f04f 0800 	mov.w	r8, #0
 8011582:	ee18 1a10 	vmov	r1, s16
 8011586:	2201      	movs	r2, #1
 8011588:	4620      	mov	r0, r4
 801158a:	f001 f84f 	bl	801262c <__lshift>
 801158e:	4631      	mov	r1, r6
 8011590:	ee08 0a10 	vmov	s16, r0
 8011594:	f001 f8ba 	bl	801270c <__mcmp>
 8011598:	2800      	cmp	r0, #0
 801159a:	dc91      	bgt.n	80114c0 <_dtoa_r+0xaa8>
 801159c:	d102      	bne.n	80115a4 <_dtoa_r+0xb8c>
 801159e:	f01a 0f01 	tst.w	sl, #1
 80115a2:	d18d      	bne.n	80114c0 <_dtoa_r+0xaa8>
 80115a4:	462b      	mov	r3, r5
 80115a6:	461d      	mov	r5, r3
 80115a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80115ac:	2a30      	cmp	r2, #48	; 0x30
 80115ae:	d0fa      	beq.n	80115a6 <_dtoa_r+0xb8e>
 80115b0:	e6d7      	b.n	8011362 <_dtoa_r+0x94a>
 80115b2:	9a01      	ldr	r2, [sp, #4]
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d184      	bne.n	80114c2 <_dtoa_r+0xaaa>
 80115b8:	9b00      	ldr	r3, [sp, #0]
 80115ba:	3301      	adds	r3, #1
 80115bc:	9300      	str	r3, [sp, #0]
 80115be:	2331      	movs	r3, #49	; 0x31
 80115c0:	7013      	strb	r3, [r2, #0]
 80115c2:	e6ce      	b.n	8011362 <_dtoa_r+0x94a>
 80115c4:	4b09      	ldr	r3, [pc, #36]	; (80115ec <_dtoa_r+0xbd4>)
 80115c6:	f7ff ba95 	b.w	8010af4 <_dtoa_r+0xdc>
 80115ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	f47f aa6e 	bne.w	8010aae <_dtoa_r+0x96>
 80115d2:	4b07      	ldr	r3, [pc, #28]	; (80115f0 <_dtoa_r+0xbd8>)
 80115d4:	f7ff ba8e 	b.w	8010af4 <_dtoa_r+0xdc>
 80115d8:	9b02      	ldr	r3, [sp, #8]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	dcae      	bgt.n	801153c <_dtoa_r+0xb24>
 80115de:	9b06      	ldr	r3, [sp, #24]
 80115e0:	2b02      	cmp	r3, #2
 80115e2:	f73f aea8 	bgt.w	8011336 <_dtoa_r+0x91e>
 80115e6:	e7a9      	b.n	801153c <_dtoa_r+0xb24>
 80115e8:	080153a7 	.word	0x080153a7
 80115ec:	08015601 	.word	0x08015601
 80115f0:	08015328 	.word	0x08015328

080115f4 <__sflush_r>:
 80115f4:	898a      	ldrh	r2, [r1, #12]
 80115f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115fa:	4605      	mov	r5, r0
 80115fc:	0710      	lsls	r0, r2, #28
 80115fe:	460c      	mov	r4, r1
 8011600:	d458      	bmi.n	80116b4 <__sflush_r+0xc0>
 8011602:	684b      	ldr	r3, [r1, #4]
 8011604:	2b00      	cmp	r3, #0
 8011606:	dc05      	bgt.n	8011614 <__sflush_r+0x20>
 8011608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801160a:	2b00      	cmp	r3, #0
 801160c:	dc02      	bgt.n	8011614 <__sflush_r+0x20>
 801160e:	2000      	movs	r0, #0
 8011610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011616:	2e00      	cmp	r6, #0
 8011618:	d0f9      	beq.n	801160e <__sflush_r+0x1a>
 801161a:	2300      	movs	r3, #0
 801161c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011620:	682f      	ldr	r7, [r5, #0]
 8011622:	602b      	str	r3, [r5, #0]
 8011624:	d032      	beq.n	801168c <__sflush_r+0x98>
 8011626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011628:	89a3      	ldrh	r3, [r4, #12]
 801162a:	075a      	lsls	r2, r3, #29
 801162c:	d505      	bpl.n	801163a <__sflush_r+0x46>
 801162e:	6863      	ldr	r3, [r4, #4]
 8011630:	1ac0      	subs	r0, r0, r3
 8011632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011634:	b10b      	cbz	r3, 801163a <__sflush_r+0x46>
 8011636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011638:	1ac0      	subs	r0, r0, r3
 801163a:	2300      	movs	r3, #0
 801163c:	4602      	mov	r2, r0
 801163e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011640:	6a21      	ldr	r1, [r4, #32]
 8011642:	4628      	mov	r0, r5
 8011644:	47b0      	blx	r6
 8011646:	1c43      	adds	r3, r0, #1
 8011648:	89a3      	ldrh	r3, [r4, #12]
 801164a:	d106      	bne.n	801165a <__sflush_r+0x66>
 801164c:	6829      	ldr	r1, [r5, #0]
 801164e:	291d      	cmp	r1, #29
 8011650:	d82c      	bhi.n	80116ac <__sflush_r+0xb8>
 8011652:	4a2a      	ldr	r2, [pc, #168]	; (80116fc <__sflush_r+0x108>)
 8011654:	40ca      	lsrs	r2, r1
 8011656:	07d6      	lsls	r6, r2, #31
 8011658:	d528      	bpl.n	80116ac <__sflush_r+0xb8>
 801165a:	2200      	movs	r2, #0
 801165c:	6062      	str	r2, [r4, #4]
 801165e:	04d9      	lsls	r1, r3, #19
 8011660:	6922      	ldr	r2, [r4, #16]
 8011662:	6022      	str	r2, [r4, #0]
 8011664:	d504      	bpl.n	8011670 <__sflush_r+0x7c>
 8011666:	1c42      	adds	r2, r0, #1
 8011668:	d101      	bne.n	801166e <__sflush_r+0x7a>
 801166a:	682b      	ldr	r3, [r5, #0]
 801166c:	b903      	cbnz	r3, 8011670 <__sflush_r+0x7c>
 801166e:	6560      	str	r0, [r4, #84]	; 0x54
 8011670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011672:	602f      	str	r7, [r5, #0]
 8011674:	2900      	cmp	r1, #0
 8011676:	d0ca      	beq.n	801160e <__sflush_r+0x1a>
 8011678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801167c:	4299      	cmp	r1, r3
 801167e:	d002      	beq.n	8011686 <__sflush_r+0x92>
 8011680:	4628      	mov	r0, r5
 8011682:	f001 fa4f 	bl	8012b24 <_free_r>
 8011686:	2000      	movs	r0, #0
 8011688:	6360      	str	r0, [r4, #52]	; 0x34
 801168a:	e7c1      	b.n	8011610 <__sflush_r+0x1c>
 801168c:	6a21      	ldr	r1, [r4, #32]
 801168e:	2301      	movs	r3, #1
 8011690:	4628      	mov	r0, r5
 8011692:	47b0      	blx	r6
 8011694:	1c41      	adds	r1, r0, #1
 8011696:	d1c7      	bne.n	8011628 <__sflush_r+0x34>
 8011698:	682b      	ldr	r3, [r5, #0]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d0c4      	beq.n	8011628 <__sflush_r+0x34>
 801169e:	2b1d      	cmp	r3, #29
 80116a0:	d001      	beq.n	80116a6 <__sflush_r+0xb2>
 80116a2:	2b16      	cmp	r3, #22
 80116a4:	d101      	bne.n	80116aa <__sflush_r+0xb6>
 80116a6:	602f      	str	r7, [r5, #0]
 80116a8:	e7b1      	b.n	801160e <__sflush_r+0x1a>
 80116aa:	89a3      	ldrh	r3, [r4, #12]
 80116ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116b0:	81a3      	strh	r3, [r4, #12]
 80116b2:	e7ad      	b.n	8011610 <__sflush_r+0x1c>
 80116b4:	690f      	ldr	r7, [r1, #16]
 80116b6:	2f00      	cmp	r7, #0
 80116b8:	d0a9      	beq.n	801160e <__sflush_r+0x1a>
 80116ba:	0793      	lsls	r3, r2, #30
 80116bc:	680e      	ldr	r6, [r1, #0]
 80116be:	bf08      	it	eq
 80116c0:	694b      	ldreq	r3, [r1, #20]
 80116c2:	600f      	str	r7, [r1, #0]
 80116c4:	bf18      	it	ne
 80116c6:	2300      	movne	r3, #0
 80116c8:	eba6 0807 	sub.w	r8, r6, r7
 80116cc:	608b      	str	r3, [r1, #8]
 80116ce:	f1b8 0f00 	cmp.w	r8, #0
 80116d2:	dd9c      	ble.n	801160e <__sflush_r+0x1a>
 80116d4:	6a21      	ldr	r1, [r4, #32]
 80116d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80116d8:	4643      	mov	r3, r8
 80116da:	463a      	mov	r2, r7
 80116dc:	4628      	mov	r0, r5
 80116de:	47b0      	blx	r6
 80116e0:	2800      	cmp	r0, #0
 80116e2:	dc06      	bgt.n	80116f2 <__sflush_r+0xfe>
 80116e4:	89a3      	ldrh	r3, [r4, #12]
 80116e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116ea:	81a3      	strh	r3, [r4, #12]
 80116ec:	f04f 30ff 	mov.w	r0, #4294967295
 80116f0:	e78e      	b.n	8011610 <__sflush_r+0x1c>
 80116f2:	4407      	add	r7, r0
 80116f4:	eba8 0800 	sub.w	r8, r8, r0
 80116f8:	e7e9      	b.n	80116ce <__sflush_r+0xda>
 80116fa:	bf00      	nop
 80116fc:	20400001 	.word	0x20400001

08011700 <_fflush_r>:
 8011700:	b538      	push	{r3, r4, r5, lr}
 8011702:	690b      	ldr	r3, [r1, #16]
 8011704:	4605      	mov	r5, r0
 8011706:	460c      	mov	r4, r1
 8011708:	b913      	cbnz	r3, 8011710 <_fflush_r+0x10>
 801170a:	2500      	movs	r5, #0
 801170c:	4628      	mov	r0, r5
 801170e:	bd38      	pop	{r3, r4, r5, pc}
 8011710:	b118      	cbz	r0, 801171a <_fflush_r+0x1a>
 8011712:	6983      	ldr	r3, [r0, #24]
 8011714:	b90b      	cbnz	r3, 801171a <_fflush_r+0x1a>
 8011716:	f000 f887 	bl	8011828 <__sinit>
 801171a:	4b14      	ldr	r3, [pc, #80]	; (801176c <_fflush_r+0x6c>)
 801171c:	429c      	cmp	r4, r3
 801171e:	d11b      	bne.n	8011758 <_fflush_r+0x58>
 8011720:	686c      	ldr	r4, [r5, #4]
 8011722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d0ef      	beq.n	801170a <_fflush_r+0xa>
 801172a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801172c:	07d0      	lsls	r0, r2, #31
 801172e:	d404      	bmi.n	801173a <_fflush_r+0x3a>
 8011730:	0599      	lsls	r1, r3, #22
 8011732:	d402      	bmi.n	801173a <_fflush_r+0x3a>
 8011734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011736:	f000 fc88 	bl	801204a <__retarget_lock_acquire_recursive>
 801173a:	4628      	mov	r0, r5
 801173c:	4621      	mov	r1, r4
 801173e:	f7ff ff59 	bl	80115f4 <__sflush_r>
 8011742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011744:	07da      	lsls	r2, r3, #31
 8011746:	4605      	mov	r5, r0
 8011748:	d4e0      	bmi.n	801170c <_fflush_r+0xc>
 801174a:	89a3      	ldrh	r3, [r4, #12]
 801174c:	059b      	lsls	r3, r3, #22
 801174e:	d4dd      	bmi.n	801170c <_fflush_r+0xc>
 8011750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011752:	f000 fc7b 	bl	801204c <__retarget_lock_release_recursive>
 8011756:	e7d9      	b.n	801170c <_fflush_r+0xc>
 8011758:	4b05      	ldr	r3, [pc, #20]	; (8011770 <_fflush_r+0x70>)
 801175a:	429c      	cmp	r4, r3
 801175c:	d101      	bne.n	8011762 <_fflush_r+0x62>
 801175e:	68ac      	ldr	r4, [r5, #8]
 8011760:	e7df      	b.n	8011722 <_fflush_r+0x22>
 8011762:	4b04      	ldr	r3, [pc, #16]	; (8011774 <_fflush_r+0x74>)
 8011764:	429c      	cmp	r4, r3
 8011766:	bf08      	it	eq
 8011768:	68ec      	ldreq	r4, [r5, #12]
 801176a:	e7da      	b.n	8011722 <_fflush_r+0x22>
 801176c:	080153d8 	.word	0x080153d8
 8011770:	080153f8 	.word	0x080153f8
 8011774:	080153b8 	.word	0x080153b8

08011778 <std>:
 8011778:	2300      	movs	r3, #0
 801177a:	b510      	push	{r4, lr}
 801177c:	4604      	mov	r4, r0
 801177e:	e9c0 3300 	strd	r3, r3, [r0]
 8011782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011786:	6083      	str	r3, [r0, #8]
 8011788:	8181      	strh	r1, [r0, #12]
 801178a:	6643      	str	r3, [r0, #100]	; 0x64
 801178c:	81c2      	strh	r2, [r0, #14]
 801178e:	6183      	str	r3, [r0, #24]
 8011790:	4619      	mov	r1, r3
 8011792:	2208      	movs	r2, #8
 8011794:	305c      	adds	r0, #92	; 0x5c
 8011796:	f7fd f931 	bl	800e9fc <memset>
 801179a:	4b05      	ldr	r3, [pc, #20]	; (80117b0 <std+0x38>)
 801179c:	6263      	str	r3, [r4, #36]	; 0x24
 801179e:	4b05      	ldr	r3, [pc, #20]	; (80117b4 <std+0x3c>)
 80117a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80117a2:	4b05      	ldr	r3, [pc, #20]	; (80117b8 <std+0x40>)
 80117a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80117a6:	4b05      	ldr	r3, [pc, #20]	; (80117bc <std+0x44>)
 80117a8:	6224      	str	r4, [r4, #32]
 80117aa:	6323      	str	r3, [r4, #48]	; 0x30
 80117ac:	bd10      	pop	{r4, pc}
 80117ae:	bf00      	nop
 80117b0:	0800f929 	.word	0x0800f929
 80117b4:	0800f94f 	.word	0x0800f94f
 80117b8:	0800f987 	.word	0x0800f987
 80117bc:	0800f9ab 	.word	0x0800f9ab

080117c0 <_cleanup_r>:
 80117c0:	4901      	ldr	r1, [pc, #4]	; (80117c8 <_cleanup_r+0x8>)
 80117c2:	f000 b8af 	b.w	8011924 <_fwalk_reent>
 80117c6:	bf00      	nop
 80117c8:	08011701 	.word	0x08011701

080117cc <__sfmoreglue>:
 80117cc:	b570      	push	{r4, r5, r6, lr}
 80117ce:	2268      	movs	r2, #104	; 0x68
 80117d0:	1e4d      	subs	r5, r1, #1
 80117d2:	4355      	muls	r5, r2
 80117d4:	460e      	mov	r6, r1
 80117d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80117da:	f001 fa0f 	bl	8012bfc <_malloc_r>
 80117de:	4604      	mov	r4, r0
 80117e0:	b140      	cbz	r0, 80117f4 <__sfmoreglue+0x28>
 80117e2:	2100      	movs	r1, #0
 80117e4:	e9c0 1600 	strd	r1, r6, [r0]
 80117e8:	300c      	adds	r0, #12
 80117ea:	60a0      	str	r0, [r4, #8]
 80117ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80117f0:	f7fd f904 	bl	800e9fc <memset>
 80117f4:	4620      	mov	r0, r4
 80117f6:	bd70      	pop	{r4, r5, r6, pc}

080117f8 <__sfp_lock_acquire>:
 80117f8:	4801      	ldr	r0, [pc, #4]	; (8011800 <__sfp_lock_acquire+0x8>)
 80117fa:	f000 bc26 	b.w	801204a <__retarget_lock_acquire_recursive>
 80117fe:	bf00      	nop
 8011800:	20003141 	.word	0x20003141

08011804 <__sfp_lock_release>:
 8011804:	4801      	ldr	r0, [pc, #4]	; (801180c <__sfp_lock_release+0x8>)
 8011806:	f000 bc21 	b.w	801204c <__retarget_lock_release_recursive>
 801180a:	bf00      	nop
 801180c:	20003141 	.word	0x20003141

08011810 <__sinit_lock_acquire>:
 8011810:	4801      	ldr	r0, [pc, #4]	; (8011818 <__sinit_lock_acquire+0x8>)
 8011812:	f000 bc1a 	b.w	801204a <__retarget_lock_acquire_recursive>
 8011816:	bf00      	nop
 8011818:	20003142 	.word	0x20003142

0801181c <__sinit_lock_release>:
 801181c:	4801      	ldr	r0, [pc, #4]	; (8011824 <__sinit_lock_release+0x8>)
 801181e:	f000 bc15 	b.w	801204c <__retarget_lock_release_recursive>
 8011822:	bf00      	nop
 8011824:	20003142 	.word	0x20003142

08011828 <__sinit>:
 8011828:	b510      	push	{r4, lr}
 801182a:	4604      	mov	r4, r0
 801182c:	f7ff fff0 	bl	8011810 <__sinit_lock_acquire>
 8011830:	69a3      	ldr	r3, [r4, #24]
 8011832:	b11b      	cbz	r3, 801183c <__sinit+0x14>
 8011834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011838:	f7ff bff0 	b.w	801181c <__sinit_lock_release>
 801183c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011840:	6523      	str	r3, [r4, #80]	; 0x50
 8011842:	4b13      	ldr	r3, [pc, #76]	; (8011890 <__sinit+0x68>)
 8011844:	4a13      	ldr	r2, [pc, #76]	; (8011894 <__sinit+0x6c>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	62a2      	str	r2, [r4, #40]	; 0x28
 801184a:	42a3      	cmp	r3, r4
 801184c:	bf04      	itt	eq
 801184e:	2301      	moveq	r3, #1
 8011850:	61a3      	streq	r3, [r4, #24]
 8011852:	4620      	mov	r0, r4
 8011854:	f000 f820 	bl	8011898 <__sfp>
 8011858:	6060      	str	r0, [r4, #4]
 801185a:	4620      	mov	r0, r4
 801185c:	f000 f81c 	bl	8011898 <__sfp>
 8011860:	60a0      	str	r0, [r4, #8]
 8011862:	4620      	mov	r0, r4
 8011864:	f000 f818 	bl	8011898 <__sfp>
 8011868:	2200      	movs	r2, #0
 801186a:	60e0      	str	r0, [r4, #12]
 801186c:	2104      	movs	r1, #4
 801186e:	6860      	ldr	r0, [r4, #4]
 8011870:	f7ff ff82 	bl	8011778 <std>
 8011874:	68a0      	ldr	r0, [r4, #8]
 8011876:	2201      	movs	r2, #1
 8011878:	2109      	movs	r1, #9
 801187a:	f7ff ff7d 	bl	8011778 <std>
 801187e:	68e0      	ldr	r0, [r4, #12]
 8011880:	2202      	movs	r2, #2
 8011882:	2112      	movs	r1, #18
 8011884:	f7ff ff78 	bl	8011778 <std>
 8011888:	2301      	movs	r3, #1
 801188a:	61a3      	str	r3, [r4, #24]
 801188c:	e7d2      	b.n	8011834 <__sinit+0xc>
 801188e:	bf00      	nop
 8011890:	0801529c 	.word	0x0801529c
 8011894:	080117c1 	.word	0x080117c1

08011898 <__sfp>:
 8011898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801189a:	4607      	mov	r7, r0
 801189c:	f7ff ffac 	bl	80117f8 <__sfp_lock_acquire>
 80118a0:	4b1e      	ldr	r3, [pc, #120]	; (801191c <__sfp+0x84>)
 80118a2:	681e      	ldr	r6, [r3, #0]
 80118a4:	69b3      	ldr	r3, [r6, #24]
 80118a6:	b913      	cbnz	r3, 80118ae <__sfp+0x16>
 80118a8:	4630      	mov	r0, r6
 80118aa:	f7ff ffbd 	bl	8011828 <__sinit>
 80118ae:	3648      	adds	r6, #72	; 0x48
 80118b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80118b4:	3b01      	subs	r3, #1
 80118b6:	d503      	bpl.n	80118c0 <__sfp+0x28>
 80118b8:	6833      	ldr	r3, [r6, #0]
 80118ba:	b30b      	cbz	r3, 8011900 <__sfp+0x68>
 80118bc:	6836      	ldr	r6, [r6, #0]
 80118be:	e7f7      	b.n	80118b0 <__sfp+0x18>
 80118c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80118c4:	b9d5      	cbnz	r5, 80118fc <__sfp+0x64>
 80118c6:	4b16      	ldr	r3, [pc, #88]	; (8011920 <__sfp+0x88>)
 80118c8:	60e3      	str	r3, [r4, #12]
 80118ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80118ce:	6665      	str	r5, [r4, #100]	; 0x64
 80118d0:	f000 fbba 	bl	8012048 <__retarget_lock_init_recursive>
 80118d4:	f7ff ff96 	bl	8011804 <__sfp_lock_release>
 80118d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80118dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80118e0:	6025      	str	r5, [r4, #0]
 80118e2:	61a5      	str	r5, [r4, #24]
 80118e4:	2208      	movs	r2, #8
 80118e6:	4629      	mov	r1, r5
 80118e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80118ec:	f7fd f886 	bl	800e9fc <memset>
 80118f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80118f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80118f8:	4620      	mov	r0, r4
 80118fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118fc:	3468      	adds	r4, #104	; 0x68
 80118fe:	e7d9      	b.n	80118b4 <__sfp+0x1c>
 8011900:	2104      	movs	r1, #4
 8011902:	4638      	mov	r0, r7
 8011904:	f7ff ff62 	bl	80117cc <__sfmoreglue>
 8011908:	4604      	mov	r4, r0
 801190a:	6030      	str	r0, [r6, #0]
 801190c:	2800      	cmp	r0, #0
 801190e:	d1d5      	bne.n	80118bc <__sfp+0x24>
 8011910:	f7ff ff78 	bl	8011804 <__sfp_lock_release>
 8011914:	230c      	movs	r3, #12
 8011916:	603b      	str	r3, [r7, #0]
 8011918:	e7ee      	b.n	80118f8 <__sfp+0x60>
 801191a:	bf00      	nop
 801191c:	0801529c 	.word	0x0801529c
 8011920:	ffff0001 	.word	0xffff0001

08011924 <_fwalk_reent>:
 8011924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011928:	4606      	mov	r6, r0
 801192a:	4688      	mov	r8, r1
 801192c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011930:	2700      	movs	r7, #0
 8011932:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011936:	f1b9 0901 	subs.w	r9, r9, #1
 801193a:	d505      	bpl.n	8011948 <_fwalk_reent+0x24>
 801193c:	6824      	ldr	r4, [r4, #0]
 801193e:	2c00      	cmp	r4, #0
 8011940:	d1f7      	bne.n	8011932 <_fwalk_reent+0xe>
 8011942:	4638      	mov	r0, r7
 8011944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011948:	89ab      	ldrh	r3, [r5, #12]
 801194a:	2b01      	cmp	r3, #1
 801194c:	d907      	bls.n	801195e <_fwalk_reent+0x3a>
 801194e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011952:	3301      	adds	r3, #1
 8011954:	d003      	beq.n	801195e <_fwalk_reent+0x3a>
 8011956:	4629      	mov	r1, r5
 8011958:	4630      	mov	r0, r6
 801195a:	47c0      	blx	r8
 801195c:	4307      	orrs	r7, r0
 801195e:	3568      	adds	r5, #104	; 0x68
 8011960:	e7e9      	b.n	8011936 <_fwalk_reent+0x12>

08011962 <rshift>:
 8011962:	6903      	ldr	r3, [r0, #16]
 8011964:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801196c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011970:	f100 0414 	add.w	r4, r0, #20
 8011974:	dd45      	ble.n	8011a02 <rshift+0xa0>
 8011976:	f011 011f 	ands.w	r1, r1, #31
 801197a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801197e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011982:	d10c      	bne.n	801199e <rshift+0x3c>
 8011984:	f100 0710 	add.w	r7, r0, #16
 8011988:	4629      	mov	r1, r5
 801198a:	42b1      	cmp	r1, r6
 801198c:	d334      	bcc.n	80119f8 <rshift+0x96>
 801198e:	1a9b      	subs	r3, r3, r2
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	1eea      	subs	r2, r5, #3
 8011994:	4296      	cmp	r6, r2
 8011996:	bf38      	it	cc
 8011998:	2300      	movcc	r3, #0
 801199a:	4423      	add	r3, r4
 801199c:	e015      	b.n	80119ca <rshift+0x68>
 801199e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80119a2:	f1c1 0820 	rsb	r8, r1, #32
 80119a6:	40cf      	lsrs	r7, r1
 80119a8:	f105 0e04 	add.w	lr, r5, #4
 80119ac:	46a1      	mov	r9, r4
 80119ae:	4576      	cmp	r6, lr
 80119b0:	46f4      	mov	ip, lr
 80119b2:	d815      	bhi.n	80119e0 <rshift+0x7e>
 80119b4:	1a9a      	subs	r2, r3, r2
 80119b6:	0092      	lsls	r2, r2, #2
 80119b8:	3a04      	subs	r2, #4
 80119ba:	3501      	adds	r5, #1
 80119bc:	42ae      	cmp	r6, r5
 80119be:	bf38      	it	cc
 80119c0:	2200      	movcc	r2, #0
 80119c2:	18a3      	adds	r3, r4, r2
 80119c4:	50a7      	str	r7, [r4, r2]
 80119c6:	b107      	cbz	r7, 80119ca <rshift+0x68>
 80119c8:	3304      	adds	r3, #4
 80119ca:	1b1a      	subs	r2, r3, r4
 80119cc:	42a3      	cmp	r3, r4
 80119ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80119d2:	bf08      	it	eq
 80119d4:	2300      	moveq	r3, #0
 80119d6:	6102      	str	r2, [r0, #16]
 80119d8:	bf08      	it	eq
 80119da:	6143      	streq	r3, [r0, #20]
 80119dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119e0:	f8dc c000 	ldr.w	ip, [ip]
 80119e4:	fa0c fc08 	lsl.w	ip, ip, r8
 80119e8:	ea4c 0707 	orr.w	r7, ip, r7
 80119ec:	f849 7b04 	str.w	r7, [r9], #4
 80119f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80119f4:	40cf      	lsrs	r7, r1
 80119f6:	e7da      	b.n	80119ae <rshift+0x4c>
 80119f8:	f851 cb04 	ldr.w	ip, [r1], #4
 80119fc:	f847 cf04 	str.w	ip, [r7, #4]!
 8011a00:	e7c3      	b.n	801198a <rshift+0x28>
 8011a02:	4623      	mov	r3, r4
 8011a04:	e7e1      	b.n	80119ca <rshift+0x68>

08011a06 <__hexdig_fun>:
 8011a06:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011a0a:	2b09      	cmp	r3, #9
 8011a0c:	d802      	bhi.n	8011a14 <__hexdig_fun+0xe>
 8011a0e:	3820      	subs	r0, #32
 8011a10:	b2c0      	uxtb	r0, r0
 8011a12:	4770      	bx	lr
 8011a14:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011a18:	2b05      	cmp	r3, #5
 8011a1a:	d801      	bhi.n	8011a20 <__hexdig_fun+0x1a>
 8011a1c:	3847      	subs	r0, #71	; 0x47
 8011a1e:	e7f7      	b.n	8011a10 <__hexdig_fun+0xa>
 8011a20:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011a24:	2b05      	cmp	r3, #5
 8011a26:	d801      	bhi.n	8011a2c <__hexdig_fun+0x26>
 8011a28:	3827      	subs	r0, #39	; 0x27
 8011a2a:	e7f1      	b.n	8011a10 <__hexdig_fun+0xa>
 8011a2c:	2000      	movs	r0, #0
 8011a2e:	4770      	bx	lr

08011a30 <__gethex>:
 8011a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a34:	ed2d 8b02 	vpush	{d8}
 8011a38:	b089      	sub	sp, #36	; 0x24
 8011a3a:	ee08 0a10 	vmov	s16, r0
 8011a3e:	9304      	str	r3, [sp, #16]
 8011a40:	4bb4      	ldr	r3, [pc, #720]	; (8011d14 <__gethex+0x2e4>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	9301      	str	r3, [sp, #4]
 8011a46:	4618      	mov	r0, r3
 8011a48:	468b      	mov	fp, r1
 8011a4a:	4690      	mov	r8, r2
 8011a4c:	f7ee fbda 	bl	8000204 <strlen>
 8011a50:	9b01      	ldr	r3, [sp, #4]
 8011a52:	f8db 2000 	ldr.w	r2, [fp]
 8011a56:	4403      	add	r3, r0
 8011a58:	4682      	mov	sl, r0
 8011a5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011a5e:	9305      	str	r3, [sp, #20]
 8011a60:	1c93      	adds	r3, r2, #2
 8011a62:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011a66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011a6a:	32fe      	adds	r2, #254	; 0xfe
 8011a6c:	18d1      	adds	r1, r2, r3
 8011a6e:	461f      	mov	r7, r3
 8011a70:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011a74:	9100      	str	r1, [sp, #0]
 8011a76:	2830      	cmp	r0, #48	; 0x30
 8011a78:	d0f8      	beq.n	8011a6c <__gethex+0x3c>
 8011a7a:	f7ff ffc4 	bl	8011a06 <__hexdig_fun>
 8011a7e:	4604      	mov	r4, r0
 8011a80:	2800      	cmp	r0, #0
 8011a82:	d13a      	bne.n	8011afa <__gethex+0xca>
 8011a84:	9901      	ldr	r1, [sp, #4]
 8011a86:	4652      	mov	r2, sl
 8011a88:	4638      	mov	r0, r7
 8011a8a:	f001 ff69 	bl	8013960 <strncmp>
 8011a8e:	4605      	mov	r5, r0
 8011a90:	2800      	cmp	r0, #0
 8011a92:	d168      	bne.n	8011b66 <__gethex+0x136>
 8011a94:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011a98:	eb07 060a 	add.w	r6, r7, sl
 8011a9c:	f7ff ffb3 	bl	8011a06 <__hexdig_fun>
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d062      	beq.n	8011b6a <__gethex+0x13a>
 8011aa4:	4633      	mov	r3, r6
 8011aa6:	7818      	ldrb	r0, [r3, #0]
 8011aa8:	2830      	cmp	r0, #48	; 0x30
 8011aaa:	461f      	mov	r7, r3
 8011aac:	f103 0301 	add.w	r3, r3, #1
 8011ab0:	d0f9      	beq.n	8011aa6 <__gethex+0x76>
 8011ab2:	f7ff ffa8 	bl	8011a06 <__hexdig_fun>
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	fab0 f480 	clz	r4, r0
 8011abc:	0964      	lsrs	r4, r4, #5
 8011abe:	4635      	mov	r5, r6
 8011ac0:	9300      	str	r3, [sp, #0]
 8011ac2:	463a      	mov	r2, r7
 8011ac4:	4616      	mov	r6, r2
 8011ac6:	3201      	adds	r2, #1
 8011ac8:	7830      	ldrb	r0, [r6, #0]
 8011aca:	f7ff ff9c 	bl	8011a06 <__hexdig_fun>
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	d1f8      	bne.n	8011ac4 <__gethex+0x94>
 8011ad2:	9901      	ldr	r1, [sp, #4]
 8011ad4:	4652      	mov	r2, sl
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	f001 ff42 	bl	8013960 <strncmp>
 8011adc:	b980      	cbnz	r0, 8011b00 <__gethex+0xd0>
 8011ade:	b94d      	cbnz	r5, 8011af4 <__gethex+0xc4>
 8011ae0:	eb06 050a 	add.w	r5, r6, sl
 8011ae4:	462a      	mov	r2, r5
 8011ae6:	4616      	mov	r6, r2
 8011ae8:	3201      	adds	r2, #1
 8011aea:	7830      	ldrb	r0, [r6, #0]
 8011aec:	f7ff ff8b 	bl	8011a06 <__hexdig_fun>
 8011af0:	2800      	cmp	r0, #0
 8011af2:	d1f8      	bne.n	8011ae6 <__gethex+0xb6>
 8011af4:	1bad      	subs	r5, r5, r6
 8011af6:	00ad      	lsls	r5, r5, #2
 8011af8:	e004      	b.n	8011b04 <__gethex+0xd4>
 8011afa:	2400      	movs	r4, #0
 8011afc:	4625      	mov	r5, r4
 8011afe:	e7e0      	b.n	8011ac2 <__gethex+0x92>
 8011b00:	2d00      	cmp	r5, #0
 8011b02:	d1f7      	bne.n	8011af4 <__gethex+0xc4>
 8011b04:	7833      	ldrb	r3, [r6, #0]
 8011b06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011b0a:	2b50      	cmp	r3, #80	; 0x50
 8011b0c:	d13b      	bne.n	8011b86 <__gethex+0x156>
 8011b0e:	7873      	ldrb	r3, [r6, #1]
 8011b10:	2b2b      	cmp	r3, #43	; 0x2b
 8011b12:	d02c      	beq.n	8011b6e <__gethex+0x13e>
 8011b14:	2b2d      	cmp	r3, #45	; 0x2d
 8011b16:	d02e      	beq.n	8011b76 <__gethex+0x146>
 8011b18:	1c71      	adds	r1, r6, #1
 8011b1a:	f04f 0900 	mov.w	r9, #0
 8011b1e:	7808      	ldrb	r0, [r1, #0]
 8011b20:	f7ff ff71 	bl	8011a06 <__hexdig_fun>
 8011b24:	1e43      	subs	r3, r0, #1
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	2b18      	cmp	r3, #24
 8011b2a:	d82c      	bhi.n	8011b86 <__gethex+0x156>
 8011b2c:	f1a0 0210 	sub.w	r2, r0, #16
 8011b30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011b34:	f7ff ff67 	bl	8011a06 <__hexdig_fun>
 8011b38:	1e43      	subs	r3, r0, #1
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	2b18      	cmp	r3, #24
 8011b3e:	d91d      	bls.n	8011b7c <__gethex+0x14c>
 8011b40:	f1b9 0f00 	cmp.w	r9, #0
 8011b44:	d000      	beq.n	8011b48 <__gethex+0x118>
 8011b46:	4252      	negs	r2, r2
 8011b48:	4415      	add	r5, r2
 8011b4a:	f8cb 1000 	str.w	r1, [fp]
 8011b4e:	b1e4      	cbz	r4, 8011b8a <__gethex+0x15a>
 8011b50:	9b00      	ldr	r3, [sp, #0]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	bf14      	ite	ne
 8011b56:	2700      	movne	r7, #0
 8011b58:	2706      	moveq	r7, #6
 8011b5a:	4638      	mov	r0, r7
 8011b5c:	b009      	add	sp, #36	; 0x24
 8011b5e:	ecbd 8b02 	vpop	{d8}
 8011b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b66:	463e      	mov	r6, r7
 8011b68:	4625      	mov	r5, r4
 8011b6a:	2401      	movs	r4, #1
 8011b6c:	e7ca      	b.n	8011b04 <__gethex+0xd4>
 8011b6e:	f04f 0900 	mov.w	r9, #0
 8011b72:	1cb1      	adds	r1, r6, #2
 8011b74:	e7d3      	b.n	8011b1e <__gethex+0xee>
 8011b76:	f04f 0901 	mov.w	r9, #1
 8011b7a:	e7fa      	b.n	8011b72 <__gethex+0x142>
 8011b7c:	230a      	movs	r3, #10
 8011b7e:	fb03 0202 	mla	r2, r3, r2, r0
 8011b82:	3a10      	subs	r2, #16
 8011b84:	e7d4      	b.n	8011b30 <__gethex+0x100>
 8011b86:	4631      	mov	r1, r6
 8011b88:	e7df      	b.n	8011b4a <__gethex+0x11a>
 8011b8a:	1bf3      	subs	r3, r6, r7
 8011b8c:	3b01      	subs	r3, #1
 8011b8e:	4621      	mov	r1, r4
 8011b90:	2b07      	cmp	r3, #7
 8011b92:	dc0b      	bgt.n	8011bac <__gethex+0x17c>
 8011b94:	ee18 0a10 	vmov	r0, s16
 8011b98:	f000 faec 	bl	8012174 <_Balloc>
 8011b9c:	4604      	mov	r4, r0
 8011b9e:	b940      	cbnz	r0, 8011bb2 <__gethex+0x182>
 8011ba0:	4b5d      	ldr	r3, [pc, #372]	; (8011d18 <__gethex+0x2e8>)
 8011ba2:	4602      	mov	r2, r0
 8011ba4:	21de      	movs	r1, #222	; 0xde
 8011ba6:	485d      	ldr	r0, [pc, #372]	; (8011d1c <__gethex+0x2ec>)
 8011ba8:	f001 ffaa 	bl	8013b00 <__assert_func>
 8011bac:	3101      	adds	r1, #1
 8011bae:	105b      	asrs	r3, r3, #1
 8011bb0:	e7ee      	b.n	8011b90 <__gethex+0x160>
 8011bb2:	f100 0914 	add.w	r9, r0, #20
 8011bb6:	f04f 0b00 	mov.w	fp, #0
 8011bba:	f1ca 0301 	rsb	r3, sl, #1
 8011bbe:	f8cd 9008 	str.w	r9, [sp, #8]
 8011bc2:	f8cd b000 	str.w	fp, [sp]
 8011bc6:	9306      	str	r3, [sp, #24]
 8011bc8:	42b7      	cmp	r7, r6
 8011bca:	d340      	bcc.n	8011c4e <__gethex+0x21e>
 8011bcc:	9802      	ldr	r0, [sp, #8]
 8011bce:	9b00      	ldr	r3, [sp, #0]
 8011bd0:	f840 3b04 	str.w	r3, [r0], #4
 8011bd4:	eba0 0009 	sub.w	r0, r0, r9
 8011bd8:	1080      	asrs	r0, r0, #2
 8011bda:	0146      	lsls	r6, r0, #5
 8011bdc:	6120      	str	r0, [r4, #16]
 8011bde:	4618      	mov	r0, r3
 8011be0:	f000 fbba 	bl	8012358 <__hi0bits>
 8011be4:	1a30      	subs	r0, r6, r0
 8011be6:	f8d8 6000 	ldr.w	r6, [r8]
 8011bea:	42b0      	cmp	r0, r6
 8011bec:	dd63      	ble.n	8011cb6 <__gethex+0x286>
 8011bee:	1b87      	subs	r7, r0, r6
 8011bf0:	4639      	mov	r1, r7
 8011bf2:	4620      	mov	r0, r4
 8011bf4:	f000 ff5e 	bl	8012ab4 <__any_on>
 8011bf8:	4682      	mov	sl, r0
 8011bfa:	b1a8      	cbz	r0, 8011c28 <__gethex+0x1f8>
 8011bfc:	1e7b      	subs	r3, r7, #1
 8011bfe:	1159      	asrs	r1, r3, #5
 8011c00:	f003 021f 	and.w	r2, r3, #31
 8011c04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011c08:	f04f 0a01 	mov.w	sl, #1
 8011c0c:	fa0a f202 	lsl.w	r2, sl, r2
 8011c10:	420a      	tst	r2, r1
 8011c12:	d009      	beq.n	8011c28 <__gethex+0x1f8>
 8011c14:	4553      	cmp	r3, sl
 8011c16:	dd05      	ble.n	8011c24 <__gethex+0x1f4>
 8011c18:	1eb9      	subs	r1, r7, #2
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	f000 ff4a 	bl	8012ab4 <__any_on>
 8011c20:	2800      	cmp	r0, #0
 8011c22:	d145      	bne.n	8011cb0 <__gethex+0x280>
 8011c24:	f04f 0a02 	mov.w	sl, #2
 8011c28:	4639      	mov	r1, r7
 8011c2a:	4620      	mov	r0, r4
 8011c2c:	f7ff fe99 	bl	8011962 <rshift>
 8011c30:	443d      	add	r5, r7
 8011c32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011c36:	42ab      	cmp	r3, r5
 8011c38:	da4c      	bge.n	8011cd4 <__gethex+0x2a4>
 8011c3a:	ee18 0a10 	vmov	r0, s16
 8011c3e:	4621      	mov	r1, r4
 8011c40:	f000 fad8 	bl	80121f4 <_Bfree>
 8011c44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c46:	2300      	movs	r3, #0
 8011c48:	6013      	str	r3, [r2, #0]
 8011c4a:	27a3      	movs	r7, #163	; 0xa3
 8011c4c:	e785      	b.n	8011b5a <__gethex+0x12a>
 8011c4e:	1e73      	subs	r3, r6, #1
 8011c50:	9a05      	ldr	r2, [sp, #20]
 8011c52:	9303      	str	r3, [sp, #12]
 8011c54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011c58:	4293      	cmp	r3, r2
 8011c5a:	d019      	beq.n	8011c90 <__gethex+0x260>
 8011c5c:	f1bb 0f20 	cmp.w	fp, #32
 8011c60:	d107      	bne.n	8011c72 <__gethex+0x242>
 8011c62:	9b02      	ldr	r3, [sp, #8]
 8011c64:	9a00      	ldr	r2, [sp, #0]
 8011c66:	f843 2b04 	str.w	r2, [r3], #4
 8011c6a:	9302      	str	r3, [sp, #8]
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	9300      	str	r3, [sp, #0]
 8011c70:	469b      	mov	fp, r3
 8011c72:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011c76:	f7ff fec6 	bl	8011a06 <__hexdig_fun>
 8011c7a:	9b00      	ldr	r3, [sp, #0]
 8011c7c:	f000 000f 	and.w	r0, r0, #15
 8011c80:	fa00 f00b 	lsl.w	r0, r0, fp
 8011c84:	4303      	orrs	r3, r0
 8011c86:	9300      	str	r3, [sp, #0]
 8011c88:	f10b 0b04 	add.w	fp, fp, #4
 8011c8c:	9b03      	ldr	r3, [sp, #12]
 8011c8e:	e00d      	b.n	8011cac <__gethex+0x27c>
 8011c90:	9b03      	ldr	r3, [sp, #12]
 8011c92:	9a06      	ldr	r2, [sp, #24]
 8011c94:	4413      	add	r3, r2
 8011c96:	42bb      	cmp	r3, r7
 8011c98:	d3e0      	bcc.n	8011c5c <__gethex+0x22c>
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	9901      	ldr	r1, [sp, #4]
 8011c9e:	9307      	str	r3, [sp, #28]
 8011ca0:	4652      	mov	r2, sl
 8011ca2:	f001 fe5d 	bl	8013960 <strncmp>
 8011ca6:	9b07      	ldr	r3, [sp, #28]
 8011ca8:	2800      	cmp	r0, #0
 8011caa:	d1d7      	bne.n	8011c5c <__gethex+0x22c>
 8011cac:	461e      	mov	r6, r3
 8011cae:	e78b      	b.n	8011bc8 <__gethex+0x198>
 8011cb0:	f04f 0a03 	mov.w	sl, #3
 8011cb4:	e7b8      	b.n	8011c28 <__gethex+0x1f8>
 8011cb6:	da0a      	bge.n	8011cce <__gethex+0x29e>
 8011cb8:	1a37      	subs	r7, r6, r0
 8011cba:	4621      	mov	r1, r4
 8011cbc:	ee18 0a10 	vmov	r0, s16
 8011cc0:	463a      	mov	r2, r7
 8011cc2:	f000 fcb3 	bl	801262c <__lshift>
 8011cc6:	1bed      	subs	r5, r5, r7
 8011cc8:	4604      	mov	r4, r0
 8011cca:	f100 0914 	add.w	r9, r0, #20
 8011cce:	f04f 0a00 	mov.w	sl, #0
 8011cd2:	e7ae      	b.n	8011c32 <__gethex+0x202>
 8011cd4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011cd8:	42a8      	cmp	r0, r5
 8011cda:	dd72      	ble.n	8011dc2 <__gethex+0x392>
 8011cdc:	1b45      	subs	r5, r0, r5
 8011cde:	42ae      	cmp	r6, r5
 8011ce0:	dc36      	bgt.n	8011d50 <__gethex+0x320>
 8011ce2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011ce6:	2b02      	cmp	r3, #2
 8011ce8:	d02a      	beq.n	8011d40 <__gethex+0x310>
 8011cea:	2b03      	cmp	r3, #3
 8011cec:	d02c      	beq.n	8011d48 <__gethex+0x318>
 8011cee:	2b01      	cmp	r3, #1
 8011cf0:	d11c      	bne.n	8011d2c <__gethex+0x2fc>
 8011cf2:	42ae      	cmp	r6, r5
 8011cf4:	d11a      	bne.n	8011d2c <__gethex+0x2fc>
 8011cf6:	2e01      	cmp	r6, #1
 8011cf8:	d112      	bne.n	8011d20 <__gethex+0x2f0>
 8011cfa:	9a04      	ldr	r2, [sp, #16]
 8011cfc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011d00:	6013      	str	r3, [r2, #0]
 8011d02:	2301      	movs	r3, #1
 8011d04:	6123      	str	r3, [r4, #16]
 8011d06:	f8c9 3000 	str.w	r3, [r9]
 8011d0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d0c:	2762      	movs	r7, #98	; 0x62
 8011d0e:	601c      	str	r4, [r3, #0]
 8011d10:	e723      	b.n	8011b5a <__gethex+0x12a>
 8011d12:	bf00      	nop
 8011d14:	08015480 	.word	0x08015480
 8011d18:	080153a7 	.word	0x080153a7
 8011d1c:	08015418 	.word	0x08015418
 8011d20:	1e71      	subs	r1, r6, #1
 8011d22:	4620      	mov	r0, r4
 8011d24:	f000 fec6 	bl	8012ab4 <__any_on>
 8011d28:	2800      	cmp	r0, #0
 8011d2a:	d1e6      	bne.n	8011cfa <__gethex+0x2ca>
 8011d2c:	ee18 0a10 	vmov	r0, s16
 8011d30:	4621      	mov	r1, r4
 8011d32:	f000 fa5f 	bl	80121f4 <_Bfree>
 8011d36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011d38:	2300      	movs	r3, #0
 8011d3a:	6013      	str	r3, [r2, #0]
 8011d3c:	2750      	movs	r7, #80	; 0x50
 8011d3e:	e70c      	b.n	8011b5a <__gethex+0x12a>
 8011d40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d1f2      	bne.n	8011d2c <__gethex+0x2fc>
 8011d46:	e7d8      	b.n	8011cfa <__gethex+0x2ca>
 8011d48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d1d5      	bne.n	8011cfa <__gethex+0x2ca>
 8011d4e:	e7ed      	b.n	8011d2c <__gethex+0x2fc>
 8011d50:	1e6f      	subs	r7, r5, #1
 8011d52:	f1ba 0f00 	cmp.w	sl, #0
 8011d56:	d131      	bne.n	8011dbc <__gethex+0x38c>
 8011d58:	b127      	cbz	r7, 8011d64 <__gethex+0x334>
 8011d5a:	4639      	mov	r1, r7
 8011d5c:	4620      	mov	r0, r4
 8011d5e:	f000 fea9 	bl	8012ab4 <__any_on>
 8011d62:	4682      	mov	sl, r0
 8011d64:	117b      	asrs	r3, r7, #5
 8011d66:	2101      	movs	r1, #1
 8011d68:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011d6c:	f007 071f 	and.w	r7, r7, #31
 8011d70:	fa01 f707 	lsl.w	r7, r1, r7
 8011d74:	421f      	tst	r7, r3
 8011d76:	4629      	mov	r1, r5
 8011d78:	4620      	mov	r0, r4
 8011d7a:	bf18      	it	ne
 8011d7c:	f04a 0a02 	orrne.w	sl, sl, #2
 8011d80:	1b76      	subs	r6, r6, r5
 8011d82:	f7ff fdee 	bl	8011962 <rshift>
 8011d86:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011d8a:	2702      	movs	r7, #2
 8011d8c:	f1ba 0f00 	cmp.w	sl, #0
 8011d90:	d048      	beq.n	8011e24 <__gethex+0x3f4>
 8011d92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011d96:	2b02      	cmp	r3, #2
 8011d98:	d015      	beq.n	8011dc6 <__gethex+0x396>
 8011d9a:	2b03      	cmp	r3, #3
 8011d9c:	d017      	beq.n	8011dce <__gethex+0x39e>
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d109      	bne.n	8011db6 <__gethex+0x386>
 8011da2:	f01a 0f02 	tst.w	sl, #2
 8011da6:	d006      	beq.n	8011db6 <__gethex+0x386>
 8011da8:	f8d9 0000 	ldr.w	r0, [r9]
 8011dac:	ea4a 0a00 	orr.w	sl, sl, r0
 8011db0:	f01a 0f01 	tst.w	sl, #1
 8011db4:	d10e      	bne.n	8011dd4 <__gethex+0x3a4>
 8011db6:	f047 0710 	orr.w	r7, r7, #16
 8011dba:	e033      	b.n	8011e24 <__gethex+0x3f4>
 8011dbc:	f04f 0a01 	mov.w	sl, #1
 8011dc0:	e7d0      	b.n	8011d64 <__gethex+0x334>
 8011dc2:	2701      	movs	r7, #1
 8011dc4:	e7e2      	b.n	8011d8c <__gethex+0x35c>
 8011dc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011dc8:	f1c3 0301 	rsb	r3, r3, #1
 8011dcc:	9315      	str	r3, [sp, #84]	; 0x54
 8011dce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d0f0      	beq.n	8011db6 <__gethex+0x386>
 8011dd4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011dd8:	f104 0314 	add.w	r3, r4, #20
 8011ddc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011de0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011de4:	f04f 0c00 	mov.w	ip, #0
 8011de8:	4618      	mov	r0, r3
 8011dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dee:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011df2:	d01c      	beq.n	8011e2e <__gethex+0x3fe>
 8011df4:	3201      	adds	r2, #1
 8011df6:	6002      	str	r2, [r0, #0]
 8011df8:	2f02      	cmp	r7, #2
 8011dfa:	f104 0314 	add.w	r3, r4, #20
 8011dfe:	d13f      	bne.n	8011e80 <__gethex+0x450>
 8011e00:	f8d8 2000 	ldr.w	r2, [r8]
 8011e04:	3a01      	subs	r2, #1
 8011e06:	42b2      	cmp	r2, r6
 8011e08:	d10a      	bne.n	8011e20 <__gethex+0x3f0>
 8011e0a:	1171      	asrs	r1, r6, #5
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e12:	f006 061f 	and.w	r6, r6, #31
 8011e16:	fa02 f606 	lsl.w	r6, r2, r6
 8011e1a:	421e      	tst	r6, r3
 8011e1c:	bf18      	it	ne
 8011e1e:	4617      	movne	r7, r2
 8011e20:	f047 0720 	orr.w	r7, r7, #32
 8011e24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e26:	601c      	str	r4, [r3, #0]
 8011e28:	9b04      	ldr	r3, [sp, #16]
 8011e2a:	601d      	str	r5, [r3, #0]
 8011e2c:	e695      	b.n	8011b5a <__gethex+0x12a>
 8011e2e:	4299      	cmp	r1, r3
 8011e30:	f843 cc04 	str.w	ip, [r3, #-4]
 8011e34:	d8d8      	bhi.n	8011de8 <__gethex+0x3b8>
 8011e36:	68a3      	ldr	r3, [r4, #8]
 8011e38:	459b      	cmp	fp, r3
 8011e3a:	db19      	blt.n	8011e70 <__gethex+0x440>
 8011e3c:	6861      	ldr	r1, [r4, #4]
 8011e3e:	ee18 0a10 	vmov	r0, s16
 8011e42:	3101      	adds	r1, #1
 8011e44:	f000 f996 	bl	8012174 <_Balloc>
 8011e48:	4681      	mov	r9, r0
 8011e4a:	b918      	cbnz	r0, 8011e54 <__gethex+0x424>
 8011e4c:	4b1a      	ldr	r3, [pc, #104]	; (8011eb8 <__gethex+0x488>)
 8011e4e:	4602      	mov	r2, r0
 8011e50:	2184      	movs	r1, #132	; 0x84
 8011e52:	e6a8      	b.n	8011ba6 <__gethex+0x176>
 8011e54:	6922      	ldr	r2, [r4, #16]
 8011e56:	3202      	adds	r2, #2
 8011e58:	f104 010c 	add.w	r1, r4, #12
 8011e5c:	0092      	lsls	r2, r2, #2
 8011e5e:	300c      	adds	r0, #12
 8011e60:	f7fc fda4 	bl	800e9ac <memcpy>
 8011e64:	4621      	mov	r1, r4
 8011e66:	ee18 0a10 	vmov	r0, s16
 8011e6a:	f000 f9c3 	bl	80121f4 <_Bfree>
 8011e6e:	464c      	mov	r4, r9
 8011e70:	6923      	ldr	r3, [r4, #16]
 8011e72:	1c5a      	adds	r2, r3, #1
 8011e74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011e78:	6122      	str	r2, [r4, #16]
 8011e7a:	2201      	movs	r2, #1
 8011e7c:	615a      	str	r2, [r3, #20]
 8011e7e:	e7bb      	b.n	8011df8 <__gethex+0x3c8>
 8011e80:	6922      	ldr	r2, [r4, #16]
 8011e82:	455a      	cmp	r2, fp
 8011e84:	dd0b      	ble.n	8011e9e <__gethex+0x46e>
 8011e86:	2101      	movs	r1, #1
 8011e88:	4620      	mov	r0, r4
 8011e8a:	f7ff fd6a 	bl	8011962 <rshift>
 8011e8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011e92:	3501      	adds	r5, #1
 8011e94:	42ab      	cmp	r3, r5
 8011e96:	f6ff aed0 	blt.w	8011c3a <__gethex+0x20a>
 8011e9a:	2701      	movs	r7, #1
 8011e9c:	e7c0      	b.n	8011e20 <__gethex+0x3f0>
 8011e9e:	f016 061f 	ands.w	r6, r6, #31
 8011ea2:	d0fa      	beq.n	8011e9a <__gethex+0x46a>
 8011ea4:	4453      	add	r3, sl
 8011ea6:	f1c6 0620 	rsb	r6, r6, #32
 8011eaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011eae:	f000 fa53 	bl	8012358 <__hi0bits>
 8011eb2:	42b0      	cmp	r0, r6
 8011eb4:	dbe7      	blt.n	8011e86 <__gethex+0x456>
 8011eb6:	e7f0      	b.n	8011e9a <__gethex+0x46a>
 8011eb8:	080153a7 	.word	0x080153a7

08011ebc <L_shift>:
 8011ebc:	f1c2 0208 	rsb	r2, r2, #8
 8011ec0:	0092      	lsls	r2, r2, #2
 8011ec2:	b570      	push	{r4, r5, r6, lr}
 8011ec4:	f1c2 0620 	rsb	r6, r2, #32
 8011ec8:	6843      	ldr	r3, [r0, #4]
 8011eca:	6804      	ldr	r4, [r0, #0]
 8011ecc:	fa03 f506 	lsl.w	r5, r3, r6
 8011ed0:	432c      	orrs	r4, r5
 8011ed2:	40d3      	lsrs	r3, r2
 8011ed4:	6004      	str	r4, [r0, #0]
 8011ed6:	f840 3f04 	str.w	r3, [r0, #4]!
 8011eda:	4288      	cmp	r0, r1
 8011edc:	d3f4      	bcc.n	8011ec8 <L_shift+0xc>
 8011ede:	bd70      	pop	{r4, r5, r6, pc}

08011ee0 <__match>:
 8011ee0:	b530      	push	{r4, r5, lr}
 8011ee2:	6803      	ldr	r3, [r0, #0]
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011eea:	b914      	cbnz	r4, 8011ef2 <__match+0x12>
 8011eec:	6003      	str	r3, [r0, #0]
 8011eee:	2001      	movs	r0, #1
 8011ef0:	bd30      	pop	{r4, r5, pc}
 8011ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ef6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011efa:	2d19      	cmp	r5, #25
 8011efc:	bf98      	it	ls
 8011efe:	3220      	addls	r2, #32
 8011f00:	42a2      	cmp	r2, r4
 8011f02:	d0f0      	beq.n	8011ee6 <__match+0x6>
 8011f04:	2000      	movs	r0, #0
 8011f06:	e7f3      	b.n	8011ef0 <__match+0x10>

08011f08 <__hexnan>:
 8011f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f0c:	680b      	ldr	r3, [r1, #0]
 8011f0e:	115e      	asrs	r6, r3, #5
 8011f10:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011f14:	f013 031f 	ands.w	r3, r3, #31
 8011f18:	b087      	sub	sp, #28
 8011f1a:	bf18      	it	ne
 8011f1c:	3604      	addne	r6, #4
 8011f1e:	2500      	movs	r5, #0
 8011f20:	1f37      	subs	r7, r6, #4
 8011f22:	4690      	mov	r8, r2
 8011f24:	6802      	ldr	r2, [r0, #0]
 8011f26:	9301      	str	r3, [sp, #4]
 8011f28:	4682      	mov	sl, r0
 8011f2a:	f846 5c04 	str.w	r5, [r6, #-4]
 8011f2e:	46b9      	mov	r9, r7
 8011f30:	463c      	mov	r4, r7
 8011f32:	9502      	str	r5, [sp, #8]
 8011f34:	46ab      	mov	fp, r5
 8011f36:	7851      	ldrb	r1, [r2, #1]
 8011f38:	1c53      	adds	r3, r2, #1
 8011f3a:	9303      	str	r3, [sp, #12]
 8011f3c:	b341      	cbz	r1, 8011f90 <__hexnan+0x88>
 8011f3e:	4608      	mov	r0, r1
 8011f40:	9205      	str	r2, [sp, #20]
 8011f42:	9104      	str	r1, [sp, #16]
 8011f44:	f7ff fd5f 	bl	8011a06 <__hexdig_fun>
 8011f48:	2800      	cmp	r0, #0
 8011f4a:	d14f      	bne.n	8011fec <__hexnan+0xe4>
 8011f4c:	9904      	ldr	r1, [sp, #16]
 8011f4e:	9a05      	ldr	r2, [sp, #20]
 8011f50:	2920      	cmp	r1, #32
 8011f52:	d818      	bhi.n	8011f86 <__hexnan+0x7e>
 8011f54:	9b02      	ldr	r3, [sp, #8]
 8011f56:	459b      	cmp	fp, r3
 8011f58:	dd13      	ble.n	8011f82 <__hexnan+0x7a>
 8011f5a:	454c      	cmp	r4, r9
 8011f5c:	d206      	bcs.n	8011f6c <__hexnan+0x64>
 8011f5e:	2d07      	cmp	r5, #7
 8011f60:	dc04      	bgt.n	8011f6c <__hexnan+0x64>
 8011f62:	462a      	mov	r2, r5
 8011f64:	4649      	mov	r1, r9
 8011f66:	4620      	mov	r0, r4
 8011f68:	f7ff ffa8 	bl	8011ebc <L_shift>
 8011f6c:	4544      	cmp	r4, r8
 8011f6e:	d950      	bls.n	8012012 <__hexnan+0x10a>
 8011f70:	2300      	movs	r3, #0
 8011f72:	f1a4 0904 	sub.w	r9, r4, #4
 8011f76:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f7a:	f8cd b008 	str.w	fp, [sp, #8]
 8011f7e:	464c      	mov	r4, r9
 8011f80:	461d      	mov	r5, r3
 8011f82:	9a03      	ldr	r2, [sp, #12]
 8011f84:	e7d7      	b.n	8011f36 <__hexnan+0x2e>
 8011f86:	2929      	cmp	r1, #41	; 0x29
 8011f88:	d156      	bne.n	8012038 <__hexnan+0x130>
 8011f8a:	3202      	adds	r2, #2
 8011f8c:	f8ca 2000 	str.w	r2, [sl]
 8011f90:	f1bb 0f00 	cmp.w	fp, #0
 8011f94:	d050      	beq.n	8012038 <__hexnan+0x130>
 8011f96:	454c      	cmp	r4, r9
 8011f98:	d206      	bcs.n	8011fa8 <__hexnan+0xa0>
 8011f9a:	2d07      	cmp	r5, #7
 8011f9c:	dc04      	bgt.n	8011fa8 <__hexnan+0xa0>
 8011f9e:	462a      	mov	r2, r5
 8011fa0:	4649      	mov	r1, r9
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	f7ff ff8a 	bl	8011ebc <L_shift>
 8011fa8:	4544      	cmp	r4, r8
 8011faa:	d934      	bls.n	8012016 <__hexnan+0x10e>
 8011fac:	f1a8 0204 	sub.w	r2, r8, #4
 8011fb0:	4623      	mov	r3, r4
 8011fb2:	f853 1b04 	ldr.w	r1, [r3], #4
 8011fb6:	f842 1f04 	str.w	r1, [r2, #4]!
 8011fba:	429f      	cmp	r7, r3
 8011fbc:	d2f9      	bcs.n	8011fb2 <__hexnan+0xaa>
 8011fbe:	1b3b      	subs	r3, r7, r4
 8011fc0:	f023 0303 	bic.w	r3, r3, #3
 8011fc4:	3304      	adds	r3, #4
 8011fc6:	3401      	adds	r4, #1
 8011fc8:	3e03      	subs	r6, #3
 8011fca:	42b4      	cmp	r4, r6
 8011fcc:	bf88      	it	hi
 8011fce:	2304      	movhi	r3, #4
 8011fd0:	4443      	add	r3, r8
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	f843 2b04 	str.w	r2, [r3], #4
 8011fd8:	429f      	cmp	r7, r3
 8011fda:	d2fb      	bcs.n	8011fd4 <__hexnan+0xcc>
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	b91b      	cbnz	r3, 8011fe8 <__hexnan+0xe0>
 8011fe0:	4547      	cmp	r7, r8
 8011fe2:	d127      	bne.n	8012034 <__hexnan+0x12c>
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	603b      	str	r3, [r7, #0]
 8011fe8:	2005      	movs	r0, #5
 8011fea:	e026      	b.n	801203a <__hexnan+0x132>
 8011fec:	3501      	adds	r5, #1
 8011fee:	2d08      	cmp	r5, #8
 8011ff0:	f10b 0b01 	add.w	fp, fp, #1
 8011ff4:	dd06      	ble.n	8012004 <__hexnan+0xfc>
 8011ff6:	4544      	cmp	r4, r8
 8011ff8:	d9c3      	bls.n	8011f82 <__hexnan+0x7a>
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	f844 3c04 	str.w	r3, [r4, #-4]
 8012000:	2501      	movs	r5, #1
 8012002:	3c04      	subs	r4, #4
 8012004:	6822      	ldr	r2, [r4, #0]
 8012006:	f000 000f 	and.w	r0, r0, #15
 801200a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801200e:	6022      	str	r2, [r4, #0]
 8012010:	e7b7      	b.n	8011f82 <__hexnan+0x7a>
 8012012:	2508      	movs	r5, #8
 8012014:	e7b5      	b.n	8011f82 <__hexnan+0x7a>
 8012016:	9b01      	ldr	r3, [sp, #4]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d0df      	beq.n	8011fdc <__hexnan+0xd4>
 801201c:	f04f 32ff 	mov.w	r2, #4294967295
 8012020:	f1c3 0320 	rsb	r3, r3, #32
 8012024:	fa22 f303 	lsr.w	r3, r2, r3
 8012028:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801202c:	401a      	ands	r2, r3
 801202e:	f846 2c04 	str.w	r2, [r6, #-4]
 8012032:	e7d3      	b.n	8011fdc <__hexnan+0xd4>
 8012034:	3f04      	subs	r7, #4
 8012036:	e7d1      	b.n	8011fdc <__hexnan+0xd4>
 8012038:	2004      	movs	r0, #4
 801203a:	b007      	add	sp, #28
 801203c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012040 <_localeconv_r>:
 8012040:	4800      	ldr	r0, [pc, #0]	; (8012044 <_localeconv_r+0x4>)
 8012042:	4770      	bx	lr
 8012044:	20000268 	.word	0x20000268

08012048 <__retarget_lock_init_recursive>:
 8012048:	4770      	bx	lr

0801204a <__retarget_lock_acquire_recursive>:
 801204a:	4770      	bx	lr

0801204c <__retarget_lock_release_recursive>:
 801204c:	4770      	bx	lr
	...

08012050 <_lseek_r>:
 8012050:	b538      	push	{r3, r4, r5, lr}
 8012052:	4d07      	ldr	r5, [pc, #28]	; (8012070 <_lseek_r+0x20>)
 8012054:	4604      	mov	r4, r0
 8012056:	4608      	mov	r0, r1
 8012058:	4611      	mov	r1, r2
 801205a:	2200      	movs	r2, #0
 801205c:	602a      	str	r2, [r5, #0]
 801205e:	461a      	mov	r2, r3
 8012060:	f7f2 f962 	bl	8004328 <_lseek>
 8012064:	1c43      	adds	r3, r0, #1
 8012066:	d102      	bne.n	801206e <_lseek_r+0x1e>
 8012068:	682b      	ldr	r3, [r5, #0]
 801206a:	b103      	cbz	r3, 801206e <_lseek_r+0x1e>
 801206c:	6023      	str	r3, [r4, #0]
 801206e:	bd38      	pop	{r3, r4, r5, pc}
 8012070:	2000314c 	.word	0x2000314c

08012074 <__swhatbuf_r>:
 8012074:	b570      	push	{r4, r5, r6, lr}
 8012076:	460e      	mov	r6, r1
 8012078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801207c:	2900      	cmp	r1, #0
 801207e:	b096      	sub	sp, #88	; 0x58
 8012080:	4614      	mov	r4, r2
 8012082:	461d      	mov	r5, r3
 8012084:	da08      	bge.n	8012098 <__swhatbuf_r+0x24>
 8012086:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801208a:	2200      	movs	r2, #0
 801208c:	602a      	str	r2, [r5, #0]
 801208e:	061a      	lsls	r2, r3, #24
 8012090:	d410      	bmi.n	80120b4 <__swhatbuf_r+0x40>
 8012092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012096:	e00e      	b.n	80120b6 <__swhatbuf_r+0x42>
 8012098:	466a      	mov	r2, sp
 801209a:	f001 fd61 	bl	8013b60 <_fstat_r>
 801209e:	2800      	cmp	r0, #0
 80120a0:	dbf1      	blt.n	8012086 <__swhatbuf_r+0x12>
 80120a2:	9a01      	ldr	r2, [sp, #4]
 80120a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80120a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80120ac:	425a      	negs	r2, r3
 80120ae:	415a      	adcs	r2, r3
 80120b0:	602a      	str	r2, [r5, #0]
 80120b2:	e7ee      	b.n	8012092 <__swhatbuf_r+0x1e>
 80120b4:	2340      	movs	r3, #64	; 0x40
 80120b6:	2000      	movs	r0, #0
 80120b8:	6023      	str	r3, [r4, #0]
 80120ba:	b016      	add	sp, #88	; 0x58
 80120bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080120c0 <__smakebuf_r>:
 80120c0:	898b      	ldrh	r3, [r1, #12]
 80120c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80120c4:	079d      	lsls	r5, r3, #30
 80120c6:	4606      	mov	r6, r0
 80120c8:	460c      	mov	r4, r1
 80120ca:	d507      	bpl.n	80120dc <__smakebuf_r+0x1c>
 80120cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80120d0:	6023      	str	r3, [r4, #0]
 80120d2:	6123      	str	r3, [r4, #16]
 80120d4:	2301      	movs	r3, #1
 80120d6:	6163      	str	r3, [r4, #20]
 80120d8:	b002      	add	sp, #8
 80120da:	bd70      	pop	{r4, r5, r6, pc}
 80120dc:	ab01      	add	r3, sp, #4
 80120de:	466a      	mov	r2, sp
 80120e0:	f7ff ffc8 	bl	8012074 <__swhatbuf_r>
 80120e4:	9900      	ldr	r1, [sp, #0]
 80120e6:	4605      	mov	r5, r0
 80120e8:	4630      	mov	r0, r6
 80120ea:	f000 fd87 	bl	8012bfc <_malloc_r>
 80120ee:	b948      	cbnz	r0, 8012104 <__smakebuf_r+0x44>
 80120f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120f4:	059a      	lsls	r2, r3, #22
 80120f6:	d4ef      	bmi.n	80120d8 <__smakebuf_r+0x18>
 80120f8:	f023 0303 	bic.w	r3, r3, #3
 80120fc:	f043 0302 	orr.w	r3, r3, #2
 8012100:	81a3      	strh	r3, [r4, #12]
 8012102:	e7e3      	b.n	80120cc <__smakebuf_r+0xc>
 8012104:	4b0d      	ldr	r3, [pc, #52]	; (801213c <__smakebuf_r+0x7c>)
 8012106:	62b3      	str	r3, [r6, #40]	; 0x28
 8012108:	89a3      	ldrh	r3, [r4, #12]
 801210a:	6020      	str	r0, [r4, #0]
 801210c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012110:	81a3      	strh	r3, [r4, #12]
 8012112:	9b00      	ldr	r3, [sp, #0]
 8012114:	6163      	str	r3, [r4, #20]
 8012116:	9b01      	ldr	r3, [sp, #4]
 8012118:	6120      	str	r0, [r4, #16]
 801211a:	b15b      	cbz	r3, 8012134 <__smakebuf_r+0x74>
 801211c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012120:	4630      	mov	r0, r6
 8012122:	f001 fd2f 	bl	8013b84 <_isatty_r>
 8012126:	b128      	cbz	r0, 8012134 <__smakebuf_r+0x74>
 8012128:	89a3      	ldrh	r3, [r4, #12]
 801212a:	f023 0303 	bic.w	r3, r3, #3
 801212e:	f043 0301 	orr.w	r3, r3, #1
 8012132:	81a3      	strh	r3, [r4, #12]
 8012134:	89a0      	ldrh	r0, [r4, #12]
 8012136:	4305      	orrs	r5, r0
 8012138:	81a5      	strh	r5, [r4, #12]
 801213a:	e7cd      	b.n	80120d8 <__smakebuf_r+0x18>
 801213c:	080117c1 	.word	0x080117c1

08012140 <malloc>:
 8012140:	4b02      	ldr	r3, [pc, #8]	; (801214c <malloc+0xc>)
 8012142:	4601      	mov	r1, r0
 8012144:	6818      	ldr	r0, [r3, #0]
 8012146:	f000 bd59 	b.w	8012bfc <_malloc_r>
 801214a:	bf00      	nop
 801214c:	20000110 	.word	0x20000110

08012150 <__ascii_mbtowc>:
 8012150:	b082      	sub	sp, #8
 8012152:	b901      	cbnz	r1, 8012156 <__ascii_mbtowc+0x6>
 8012154:	a901      	add	r1, sp, #4
 8012156:	b142      	cbz	r2, 801216a <__ascii_mbtowc+0x1a>
 8012158:	b14b      	cbz	r3, 801216e <__ascii_mbtowc+0x1e>
 801215a:	7813      	ldrb	r3, [r2, #0]
 801215c:	600b      	str	r3, [r1, #0]
 801215e:	7812      	ldrb	r2, [r2, #0]
 8012160:	1e10      	subs	r0, r2, #0
 8012162:	bf18      	it	ne
 8012164:	2001      	movne	r0, #1
 8012166:	b002      	add	sp, #8
 8012168:	4770      	bx	lr
 801216a:	4610      	mov	r0, r2
 801216c:	e7fb      	b.n	8012166 <__ascii_mbtowc+0x16>
 801216e:	f06f 0001 	mvn.w	r0, #1
 8012172:	e7f8      	b.n	8012166 <__ascii_mbtowc+0x16>

08012174 <_Balloc>:
 8012174:	b570      	push	{r4, r5, r6, lr}
 8012176:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012178:	4604      	mov	r4, r0
 801217a:	460d      	mov	r5, r1
 801217c:	b976      	cbnz	r6, 801219c <_Balloc+0x28>
 801217e:	2010      	movs	r0, #16
 8012180:	f7ff ffde 	bl	8012140 <malloc>
 8012184:	4602      	mov	r2, r0
 8012186:	6260      	str	r0, [r4, #36]	; 0x24
 8012188:	b920      	cbnz	r0, 8012194 <_Balloc+0x20>
 801218a:	4b18      	ldr	r3, [pc, #96]	; (80121ec <_Balloc+0x78>)
 801218c:	4818      	ldr	r0, [pc, #96]	; (80121f0 <_Balloc+0x7c>)
 801218e:	2166      	movs	r1, #102	; 0x66
 8012190:	f001 fcb6 	bl	8013b00 <__assert_func>
 8012194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012198:	6006      	str	r6, [r0, #0]
 801219a:	60c6      	str	r6, [r0, #12]
 801219c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801219e:	68f3      	ldr	r3, [r6, #12]
 80121a0:	b183      	cbz	r3, 80121c4 <_Balloc+0x50>
 80121a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80121aa:	b9b8      	cbnz	r0, 80121dc <_Balloc+0x68>
 80121ac:	2101      	movs	r1, #1
 80121ae:	fa01 f605 	lsl.w	r6, r1, r5
 80121b2:	1d72      	adds	r2, r6, #5
 80121b4:	0092      	lsls	r2, r2, #2
 80121b6:	4620      	mov	r0, r4
 80121b8:	f000 fc9d 	bl	8012af6 <_calloc_r>
 80121bc:	b160      	cbz	r0, 80121d8 <_Balloc+0x64>
 80121be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80121c2:	e00e      	b.n	80121e2 <_Balloc+0x6e>
 80121c4:	2221      	movs	r2, #33	; 0x21
 80121c6:	2104      	movs	r1, #4
 80121c8:	4620      	mov	r0, r4
 80121ca:	f000 fc94 	bl	8012af6 <_calloc_r>
 80121ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121d0:	60f0      	str	r0, [r6, #12]
 80121d2:	68db      	ldr	r3, [r3, #12]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d1e4      	bne.n	80121a2 <_Balloc+0x2e>
 80121d8:	2000      	movs	r0, #0
 80121da:	bd70      	pop	{r4, r5, r6, pc}
 80121dc:	6802      	ldr	r2, [r0, #0]
 80121de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80121e2:	2300      	movs	r3, #0
 80121e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80121e8:	e7f7      	b.n	80121da <_Balloc+0x66>
 80121ea:	bf00      	nop
 80121ec:	08015335 	.word	0x08015335
 80121f0:	08015494 	.word	0x08015494

080121f4 <_Bfree>:
 80121f4:	b570      	push	{r4, r5, r6, lr}
 80121f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80121f8:	4605      	mov	r5, r0
 80121fa:	460c      	mov	r4, r1
 80121fc:	b976      	cbnz	r6, 801221c <_Bfree+0x28>
 80121fe:	2010      	movs	r0, #16
 8012200:	f7ff ff9e 	bl	8012140 <malloc>
 8012204:	4602      	mov	r2, r0
 8012206:	6268      	str	r0, [r5, #36]	; 0x24
 8012208:	b920      	cbnz	r0, 8012214 <_Bfree+0x20>
 801220a:	4b09      	ldr	r3, [pc, #36]	; (8012230 <_Bfree+0x3c>)
 801220c:	4809      	ldr	r0, [pc, #36]	; (8012234 <_Bfree+0x40>)
 801220e:	218a      	movs	r1, #138	; 0x8a
 8012210:	f001 fc76 	bl	8013b00 <__assert_func>
 8012214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012218:	6006      	str	r6, [r0, #0]
 801221a:	60c6      	str	r6, [r0, #12]
 801221c:	b13c      	cbz	r4, 801222e <_Bfree+0x3a>
 801221e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012220:	6862      	ldr	r2, [r4, #4]
 8012222:	68db      	ldr	r3, [r3, #12]
 8012224:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012228:	6021      	str	r1, [r4, #0]
 801222a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801222e:	bd70      	pop	{r4, r5, r6, pc}
 8012230:	08015335 	.word	0x08015335
 8012234:	08015494 	.word	0x08015494

08012238 <__multadd>:
 8012238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801223c:	690d      	ldr	r5, [r1, #16]
 801223e:	4607      	mov	r7, r0
 8012240:	460c      	mov	r4, r1
 8012242:	461e      	mov	r6, r3
 8012244:	f101 0c14 	add.w	ip, r1, #20
 8012248:	2000      	movs	r0, #0
 801224a:	f8dc 3000 	ldr.w	r3, [ip]
 801224e:	b299      	uxth	r1, r3
 8012250:	fb02 6101 	mla	r1, r2, r1, r6
 8012254:	0c1e      	lsrs	r6, r3, #16
 8012256:	0c0b      	lsrs	r3, r1, #16
 8012258:	fb02 3306 	mla	r3, r2, r6, r3
 801225c:	b289      	uxth	r1, r1
 801225e:	3001      	adds	r0, #1
 8012260:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012264:	4285      	cmp	r5, r0
 8012266:	f84c 1b04 	str.w	r1, [ip], #4
 801226a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801226e:	dcec      	bgt.n	801224a <__multadd+0x12>
 8012270:	b30e      	cbz	r6, 80122b6 <__multadd+0x7e>
 8012272:	68a3      	ldr	r3, [r4, #8]
 8012274:	42ab      	cmp	r3, r5
 8012276:	dc19      	bgt.n	80122ac <__multadd+0x74>
 8012278:	6861      	ldr	r1, [r4, #4]
 801227a:	4638      	mov	r0, r7
 801227c:	3101      	adds	r1, #1
 801227e:	f7ff ff79 	bl	8012174 <_Balloc>
 8012282:	4680      	mov	r8, r0
 8012284:	b928      	cbnz	r0, 8012292 <__multadd+0x5a>
 8012286:	4602      	mov	r2, r0
 8012288:	4b0c      	ldr	r3, [pc, #48]	; (80122bc <__multadd+0x84>)
 801228a:	480d      	ldr	r0, [pc, #52]	; (80122c0 <__multadd+0x88>)
 801228c:	21b5      	movs	r1, #181	; 0xb5
 801228e:	f001 fc37 	bl	8013b00 <__assert_func>
 8012292:	6922      	ldr	r2, [r4, #16]
 8012294:	3202      	adds	r2, #2
 8012296:	f104 010c 	add.w	r1, r4, #12
 801229a:	0092      	lsls	r2, r2, #2
 801229c:	300c      	adds	r0, #12
 801229e:	f7fc fb85 	bl	800e9ac <memcpy>
 80122a2:	4621      	mov	r1, r4
 80122a4:	4638      	mov	r0, r7
 80122a6:	f7ff ffa5 	bl	80121f4 <_Bfree>
 80122aa:	4644      	mov	r4, r8
 80122ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80122b0:	3501      	adds	r5, #1
 80122b2:	615e      	str	r6, [r3, #20]
 80122b4:	6125      	str	r5, [r4, #16]
 80122b6:	4620      	mov	r0, r4
 80122b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122bc:	080153a7 	.word	0x080153a7
 80122c0:	08015494 	.word	0x08015494

080122c4 <__s2b>:
 80122c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122c8:	460c      	mov	r4, r1
 80122ca:	4615      	mov	r5, r2
 80122cc:	461f      	mov	r7, r3
 80122ce:	2209      	movs	r2, #9
 80122d0:	3308      	adds	r3, #8
 80122d2:	4606      	mov	r6, r0
 80122d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80122d8:	2100      	movs	r1, #0
 80122da:	2201      	movs	r2, #1
 80122dc:	429a      	cmp	r2, r3
 80122de:	db09      	blt.n	80122f4 <__s2b+0x30>
 80122e0:	4630      	mov	r0, r6
 80122e2:	f7ff ff47 	bl	8012174 <_Balloc>
 80122e6:	b940      	cbnz	r0, 80122fa <__s2b+0x36>
 80122e8:	4602      	mov	r2, r0
 80122ea:	4b19      	ldr	r3, [pc, #100]	; (8012350 <__s2b+0x8c>)
 80122ec:	4819      	ldr	r0, [pc, #100]	; (8012354 <__s2b+0x90>)
 80122ee:	21ce      	movs	r1, #206	; 0xce
 80122f0:	f001 fc06 	bl	8013b00 <__assert_func>
 80122f4:	0052      	lsls	r2, r2, #1
 80122f6:	3101      	adds	r1, #1
 80122f8:	e7f0      	b.n	80122dc <__s2b+0x18>
 80122fa:	9b08      	ldr	r3, [sp, #32]
 80122fc:	6143      	str	r3, [r0, #20]
 80122fe:	2d09      	cmp	r5, #9
 8012300:	f04f 0301 	mov.w	r3, #1
 8012304:	6103      	str	r3, [r0, #16]
 8012306:	dd16      	ble.n	8012336 <__s2b+0x72>
 8012308:	f104 0909 	add.w	r9, r4, #9
 801230c:	46c8      	mov	r8, r9
 801230e:	442c      	add	r4, r5
 8012310:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012314:	4601      	mov	r1, r0
 8012316:	3b30      	subs	r3, #48	; 0x30
 8012318:	220a      	movs	r2, #10
 801231a:	4630      	mov	r0, r6
 801231c:	f7ff ff8c 	bl	8012238 <__multadd>
 8012320:	45a0      	cmp	r8, r4
 8012322:	d1f5      	bne.n	8012310 <__s2b+0x4c>
 8012324:	f1a5 0408 	sub.w	r4, r5, #8
 8012328:	444c      	add	r4, r9
 801232a:	1b2d      	subs	r5, r5, r4
 801232c:	1963      	adds	r3, r4, r5
 801232e:	42bb      	cmp	r3, r7
 8012330:	db04      	blt.n	801233c <__s2b+0x78>
 8012332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012336:	340a      	adds	r4, #10
 8012338:	2509      	movs	r5, #9
 801233a:	e7f6      	b.n	801232a <__s2b+0x66>
 801233c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012340:	4601      	mov	r1, r0
 8012342:	3b30      	subs	r3, #48	; 0x30
 8012344:	220a      	movs	r2, #10
 8012346:	4630      	mov	r0, r6
 8012348:	f7ff ff76 	bl	8012238 <__multadd>
 801234c:	e7ee      	b.n	801232c <__s2b+0x68>
 801234e:	bf00      	nop
 8012350:	080153a7 	.word	0x080153a7
 8012354:	08015494 	.word	0x08015494

08012358 <__hi0bits>:
 8012358:	0c03      	lsrs	r3, r0, #16
 801235a:	041b      	lsls	r3, r3, #16
 801235c:	b9d3      	cbnz	r3, 8012394 <__hi0bits+0x3c>
 801235e:	0400      	lsls	r0, r0, #16
 8012360:	2310      	movs	r3, #16
 8012362:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012366:	bf04      	itt	eq
 8012368:	0200      	lsleq	r0, r0, #8
 801236a:	3308      	addeq	r3, #8
 801236c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012370:	bf04      	itt	eq
 8012372:	0100      	lsleq	r0, r0, #4
 8012374:	3304      	addeq	r3, #4
 8012376:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801237a:	bf04      	itt	eq
 801237c:	0080      	lsleq	r0, r0, #2
 801237e:	3302      	addeq	r3, #2
 8012380:	2800      	cmp	r0, #0
 8012382:	db05      	blt.n	8012390 <__hi0bits+0x38>
 8012384:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012388:	f103 0301 	add.w	r3, r3, #1
 801238c:	bf08      	it	eq
 801238e:	2320      	moveq	r3, #32
 8012390:	4618      	mov	r0, r3
 8012392:	4770      	bx	lr
 8012394:	2300      	movs	r3, #0
 8012396:	e7e4      	b.n	8012362 <__hi0bits+0xa>

08012398 <__lo0bits>:
 8012398:	6803      	ldr	r3, [r0, #0]
 801239a:	f013 0207 	ands.w	r2, r3, #7
 801239e:	4601      	mov	r1, r0
 80123a0:	d00b      	beq.n	80123ba <__lo0bits+0x22>
 80123a2:	07da      	lsls	r2, r3, #31
 80123a4:	d423      	bmi.n	80123ee <__lo0bits+0x56>
 80123a6:	0798      	lsls	r0, r3, #30
 80123a8:	bf49      	itett	mi
 80123aa:	085b      	lsrmi	r3, r3, #1
 80123ac:	089b      	lsrpl	r3, r3, #2
 80123ae:	2001      	movmi	r0, #1
 80123b0:	600b      	strmi	r3, [r1, #0]
 80123b2:	bf5c      	itt	pl
 80123b4:	600b      	strpl	r3, [r1, #0]
 80123b6:	2002      	movpl	r0, #2
 80123b8:	4770      	bx	lr
 80123ba:	b298      	uxth	r0, r3
 80123bc:	b9a8      	cbnz	r0, 80123ea <__lo0bits+0x52>
 80123be:	0c1b      	lsrs	r3, r3, #16
 80123c0:	2010      	movs	r0, #16
 80123c2:	b2da      	uxtb	r2, r3
 80123c4:	b90a      	cbnz	r2, 80123ca <__lo0bits+0x32>
 80123c6:	3008      	adds	r0, #8
 80123c8:	0a1b      	lsrs	r3, r3, #8
 80123ca:	071a      	lsls	r2, r3, #28
 80123cc:	bf04      	itt	eq
 80123ce:	091b      	lsreq	r3, r3, #4
 80123d0:	3004      	addeq	r0, #4
 80123d2:	079a      	lsls	r2, r3, #30
 80123d4:	bf04      	itt	eq
 80123d6:	089b      	lsreq	r3, r3, #2
 80123d8:	3002      	addeq	r0, #2
 80123da:	07da      	lsls	r2, r3, #31
 80123dc:	d403      	bmi.n	80123e6 <__lo0bits+0x4e>
 80123de:	085b      	lsrs	r3, r3, #1
 80123e0:	f100 0001 	add.w	r0, r0, #1
 80123e4:	d005      	beq.n	80123f2 <__lo0bits+0x5a>
 80123e6:	600b      	str	r3, [r1, #0]
 80123e8:	4770      	bx	lr
 80123ea:	4610      	mov	r0, r2
 80123ec:	e7e9      	b.n	80123c2 <__lo0bits+0x2a>
 80123ee:	2000      	movs	r0, #0
 80123f0:	4770      	bx	lr
 80123f2:	2020      	movs	r0, #32
 80123f4:	4770      	bx	lr
	...

080123f8 <__i2b>:
 80123f8:	b510      	push	{r4, lr}
 80123fa:	460c      	mov	r4, r1
 80123fc:	2101      	movs	r1, #1
 80123fe:	f7ff feb9 	bl	8012174 <_Balloc>
 8012402:	4602      	mov	r2, r0
 8012404:	b928      	cbnz	r0, 8012412 <__i2b+0x1a>
 8012406:	4b05      	ldr	r3, [pc, #20]	; (801241c <__i2b+0x24>)
 8012408:	4805      	ldr	r0, [pc, #20]	; (8012420 <__i2b+0x28>)
 801240a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801240e:	f001 fb77 	bl	8013b00 <__assert_func>
 8012412:	2301      	movs	r3, #1
 8012414:	6144      	str	r4, [r0, #20]
 8012416:	6103      	str	r3, [r0, #16]
 8012418:	bd10      	pop	{r4, pc}
 801241a:	bf00      	nop
 801241c:	080153a7 	.word	0x080153a7
 8012420:	08015494 	.word	0x08015494

08012424 <__multiply>:
 8012424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012428:	4691      	mov	r9, r2
 801242a:	690a      	ldr	r2, [r1, #16]
 801242c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012430:	429a      	cmp	r2, r3
 8012432:	bfb8      	it	lt
 8012434:	460b      	movlt	r3, r1
 8012436:	460c      	mov	r4, r1
 8012438:	bfbc      	itt	lt
 801243a:	464c      	movlt	r4, r9
 801243c:	4699      	movlt	r9, r3
 801243e:	6927      	ldr	r7, [r4, #16]
 8012440:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012444:	68a3      	ldr	r3, [r4, #8]
 8012446:	6861      	ldr	r1, [r4, #4]
 8012448:	eb07 060a 	add.w	r6, r7, sl
 801244c:	42b3      	cmp	r3, r6
 801244e:	b085      	sub	sp, #20
 8012450:	bfb8      	it	lt
 8012452:	3101      	addlt	r1, #1
 8012454:	f7ff fe8e 	bl	8012174 <_Balloc>
 8012458:	b930      	cbnz	r0, 8012468 <__multiply+0x44>
 801245a:	4602      	mov	r2, r0
 801245c:	4b44      	ldr	r3, [pc, #272]	; (8012570 <__multiply+0x14c>)
 801245e:	4845      	ldr	r0, [pc, #276]	; (8012574 <__multiply+0x150>)
 8012460:	f240 115d 	movw	r1, #349	; 0x15d
 8012464:	f001 fb4c 	bl	8013b00 <__assert_func>
 8012468:	f100 0514 	add.w	r5, r0, #20
 801246c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012470:	462b      	mov	r3, r5
 8012472:	2200      	movs	r2, #0
 8012474:	4543      	cmp	r3, r8
 8012476:	d321      	bcc.n	80124bc <__multiply+0x98>
 8012478:	f104 0314 	add.w	r3, r4, #20
 801247c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012480:	f109 0314 	add.w	r3, r9, #20
 8012484:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012488:	9202      	str	r2, [sp, #8]
 801248a:	1b3a      	subs	r2, r7, r4
 801248c:	3a15      	subs	r2, #21
 801248e:	f022 0203 	bic.w	r2, r2, #3
 8012492:	3204      	adds	r2, #4
 8012494:	f104 0115 	add.w	r1, r4, #21
 8012498:	428f      	cmp	r7, r1
 801249a:	bf38      	it	cc
 801249c:	2204      	movcc	r2, #4
 801249e:	9201      	str	r2, [sp, #4]
 80124a0:	9a02      	ldr	r2, [sp, #8]
 80124a2:	9303      	str	r3, [sp, #12]
 80124a4:	429a      	cmp	r2, r3
 80124a6:	d80c      	bhi.n	80124c2 <__multiply+0x9e>
 80124a8:	2e00      	cmp	r6, #0
 80124aa:	dd03      	ble.n	80124b4 <__multiply+0x90>
 80124ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d05a      	beq.n	801256a <__multiply+0x146>
 80124b4:	6106      	str	r6, [r0, #16]
 80124b6:	b005      	add	sp, #20
 80124b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124bc:	f843 2b04 	str.w	r2, [r3], #4
 80124c0:	e7d8      	b.n	8012474 <__multiply+0x50>
 80124c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80124c6:	f1ba 0f00 	cmp.w	sl, #0
 80124ca:	d024      	beq.n	8012516 <__multiply+0xf2>
 80124cc:	f104 0e14 	add.w	lr, r4, #20
 80124d0:	46a9      	mov	r9, r5
 80124d2:	f04f 0c00 	mov.w	ip, #0
 80124d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80124da:	f8d9 1000 	ldr.w	r1, [r9]
 80124de:	fa1f fb82 	uxth.w	fp, r2
 80124e2:	b289      	uxth	r1, r1
 80124e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80124e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80124ec:	f8d9 2000 	ldr.w	r2, [r9]
 80124f0:	4461      	add	r1, ip
 80124f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80124f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80124fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80124fe:	b289      	uxth	r1, r1
 8012500:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012504:	4577      	cmp	r7, lr
 8012506:	f849 1b04 	str.w	r1, [r9], #4
 801250a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801250e:	d8e2      	bhi.n	80124d6 <__multiply+0xb2>
 8012510:	9a01      	ldr	r2, [sp, #4]
 8012512:	f845 c002 	str.w	ip, [r5, r2]
 8012516:	9a03      	ldr	r2, [sp, #12]
 8012518:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801251c:	3304      	adds	r3, #4
 801251e:	f1b9 0f00 	cmp.w	r9, #0
 8012522:	d020      	beq.n	8012566 <__multiply+0x142>
 8012524:	6829      	ldr	r1, [r5, #0]
 8012526:	f104 0c14 	add.w	ip, r4, #20
 801252a:	46ae      	mov	lr, r5
 801252c:	f04f 0a00 	mov.w	sl, #0
 8012530:	f8bc b000 	ldrh.w	fp, [ip]
 8012534:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012538:	fb09 220b 	mla	r2, r9, fp, r2
 801253c:	4492      	add	sl, r2
 801253e:	b289      	uxth	r1, r1
 8012540:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012544:	f84e 1b04 	str.w	r1, [lr], #4
 8012548:	f85c 2b04 	ldr.w	r2, [ip], #4
 801254c:	f8be 1000 	ldrh.w	r1, [lr]
 8012550:	0c12      	lsrs	r2, r2, #16
 8012552:	fb09 1102 	mla	r1, r9, r2, r1
 8012556:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801255a:	4567      	cmp	r7, ip
 801255c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012560:	d8e6      	bhi.n	8012530 <__multiply+0x10c>
 8012562:	9a01      	ldr	r2, [sp, #4]
 8012564:	50a9      	str	r1, [r5, r2]
 8012566:	3504      	adds	r5, #4
 8012568:	e79a      	b.n	80124a0 <__multiply+0x7c>
 801256a:	3e01      	subs	r6, #1
 801256c:	e79c      	b.n	80124a8 <__multiply+0x84>
 801256e:	bf00      	nop
 8012570:	080153a7 	.word	0x080153a7
 8012574:	08015494 	.word	0x08015494

08012578 <__pow5mult>:
 8012578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801257c:	4615      	mov	r5, r2
 801257e:	f012 0203 	ands.w	r2, r2, #3
 8012582:	4606      	mov	r6, r0
 8012584:	460f      	mov	r7, r1
 8012586:	d007      	beq.n	8012598 <__pow5mult+0x20>
 8012588:	4c25      	ldr	r4, [pc, #148]	; (8012620 <__pow5mult+0xa8>)
 801258a:	3a01      	subs	r2, #1
 801258c:	2300      	movs	r3, #0
 801258e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012592:	f7ff fe51 	bl	8012238 <__multadd>
 8012596:	4607      	mov	r7, r0
 8012598:	10ad      	asrs	r5, r5, #2
 801259a:	d03d      	beq.n	8012618 <__pow5mult+0xa0>
 801259c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801259e:	b97c      	cbnz	r4, 80125c0 <__pow5mult+0x48>
 80125a0:	2010      	movs	r0, #16
 80125a2:	f7ff fdcd 	bl	8012140 <malloc>
 80125a6:	4602      	mov	r2, r0
 80125a8:	6270      	str	r0, [r6, #36]	; 0x24
 80125aa:	b928      	cbnz	r0, 80125b8 <__pow5mult+0x40>
 80125ac:	4b1d      	ldr	r3, [pc, #116]	; (8012624 <__pow5mult+0xac>)
 80125ae:	481e      	ldr	r0, [pc, #120]	; (8012628 <__pow5mult+0xb0>)
 80125b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80125b4:	f001 faa4 	bl	8013b00 <__assert_func>
 80125b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80125bc:	6004      	str	r4, [r0, #0]
 80125be:	60c4      	str	r4, [r0, #12]
 80125c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80125c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80125c8:	b94c      	cbnz	r4, 80125de <__pow5mult+0x66>
 80125ca:	f240 2171 	movw	r1, #625	; 0x271
 80125ce:	4630      	mov	r0, r6
 80125d0:	f7ff ff12 	bl	80123f8 <__i2b>
 80125d4:	2300      	movs	r3, #0
 80125d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80125da:	4604      	mov	r4, r0
 80125dc:	6003      	str	r3, [r0, #0]
 80125de:	f04f 0900 	mov.w	r9, #0
 80125e2:	07eb      	lsls	r3, r5, #31
 80125e4:	d50a      	bpl.n	80125fc <__pow5mult+0x84>
 80125e6:	4639      	mov	r1, r7
 80125e8:	4622      	mov	r2, r4
 80125ea:	4630      	mov	r0, r6
 80125ec:	f7ff ff1a 	bl	8012424 <__multiply>
 80125f0:	4639      	mov	r1, r7
 80125f2:	4680      	mov	r8, r0
 80125f4:	4630      	mov	r0, r6
 80125f6:	f7ff fdfd 	bl	80121f4 <_Bfree>
 80125fa:	4647      	mov	r7, r8
 80125fc:	106d      	asrs	r5, r5, #1
 80125fe:	d00b      	beq.n	8012618 <__pow5mult+0xa0>
 8012600:	6820      	ldr	r0, [r4, #0]
 8012602:	b938      	cbnz	r0, 8012614 <__pow5mult+0x9c>
 8012604:	4622      	mov	r2, r4
 8012606:	4621      	mov	r1, r4
 8012608:	4630      	mov	r0, r6
 801260a:	f7ff ff0b 	bl	8012424 <__multiply>
 801260e:	6020      	str	r0, [r4, #0]
 8012610:	f8c0 9000 	str.w	r9, [r0]
 8012614:	4604      	mov	r4, r0
 8012616:	e7e4      	b.n	80125e2 <__pow5mult+0x6a>
 8012618:	4638      	mov	r0, r7
 801261a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801261e:	bf00      	nop
 8012620:	080155e0 	.word	0x080155e0
 8012624:	08015335 	.word	0x08015335
 8012628:	08015494 	.word	0x08015494

0801262c <__lshift>:
 801262c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012630:	460c      	mov	r4, r1
 8012632:	6849      	ldr	r1, [r1, #4]
 8012634:	6923      	ldr	r3, [r4, #16]
 8012636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801263a:	68a3      	ldr	r3, [r4, #8]
 801263c:	4607      	mov	r7, r0
 801263e:	4691      	mov	r9, r2
 8012640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012644:	f108 0601 	add.w	r6, r8, #1
 8012648:	42b3      	cmp	r3, r6
 801264a:	db0b      	blt.n	8012664 <__lshift+0x38>
 801264c:	4638      	mov	r0, r7
 801264e:	f7ff fd91 	bl	8012174 <_Balloc>
 8012652:	4605      	mov	r5, r0
 8012654:	b948      	cbnz	r0, 801266a <__lshift+0x3e>
 8012656:	4602      	mov	r2, r0
 8012658:	4b2a      	ldr	r3, [pc, #168]	; (8012704 <__lshift+0xd8>)
 801265a:	482b      	ldr	r0, [pc, #172]	; (8012708 <__lshift+0xdc>)
 801265c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012660:	f001 fa4e 	bl	8013b00 <__assert_func>
 8012664:	3101      	adds	r1, #1
 8012666:	005b      	lsls	r3, r3, #1
 8012668:	e7ee      	b.n	8012648 <__lshift+0x1c>
 801266a:	2300      	movs	r3, #0
 801266c:	f100 0114 	add.w	r1, r0, #20
 8012670:	f100 0210 	add.w	r2, r0, #16
 8012674:	4618      	mov	r0, r3
 8012676:	4553      	cmp	r3, sl
 8012678:	db37      	blt.n	80126ea <__lshift+0xbe>
 801267a:	6920      	ldr	r0, [r4, #16]
 801267c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012680:	f104 0314 	add.w	r3, r4, #20
 8012684:	f019 091f 	ands.w	r9, r9, #31
 8012688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801268c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012690:	d02f      	beq.n	80126f2 <__lshift+0xc6>
 8012692:	f1c9 0e20 	rsb	lr, r9, #32
 8012696:	468a      	mov	sl, r1
 8012698:	f04f 0c00 	mov.w	ip, #0
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	fa02 f209 	lsl.w	r2, r2, r9
 80126a2:	ea42 020c 	orr.w	r2, r2, ip
 80126a6:	f84a 2b04 	str.w	r2, [sl], #4
 80126aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80126ae:	4298      	cmp	r0, r3
 80126b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80126b4:	d8f2      	bhi.n	801269c <__lshift+0x70>
 80126b6:	1b03      	subs	r3, r0, r4
 80126b8:	3b15      	subs	r3, #21
 80126ba:	f023 0303 	bic.w	r3, r3, #3
 80126be:	3304      	adds	r3, #4
 80126c0:	f104 0215 	add.w	r2, r4, #21
 80126c4:	4290      	cmp	r0, r2
 80126c6:	bf38      	it	cc
 80126c8:	2304      	movcc	r3, #4
 80126ca:	f841 c003 	str.w	ip, [r1, r3]
 80126ce:	f1bc 0f00 	cmp.w	ip, #0
 80126d2:	d001      	beq.n	80126d8 <__lshift+0xac>
 80126d4:	f108 0602 	add.w	r6, r8, #2
 80126d8:	3e01      	subs	r6, #1
 80126da:	4638      	mov	r0, r7
 80126dc:	612e      	str	r6, [r5, #16]
 80126de:	4621      	mov	r1, r4
 80126e0:	f7ff fd88 	bl	80121f4 <_Bfree>
 80126e4:	4628      	mov	r0, r5
 80126e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80126ee:	3301      	adds	r3, #1
 80126f0:	e7c1      	b.n	8012676 <__lshift+0x4a>
 80126f2:	3904      	subs	r1, #4
 80126f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80126f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80126fc:	4298      	cmp	r0, r3
 80126fe:	d8f9      	bhi.n	80126f4 <__lshift+0xc8>
 8012700:	e7ea      	b.n	80126d8 <__lshift+0xac>
 8012702:	bf00      	nop
 8012704:	080153a7 	.word	0x080153a7
 8012708:	08015494 	.word	0x08015494

0801270c <__mcmp>:
 801270c:	b530      	push	{r4, r5, lr}
 801270e:	6902      	ldr	r2, [r0, #16]
 8012710:	690c      	ldr	r4, [r1, #16]
 8012712:	1b12      	subs	r2, r2, r4
 8012714:	d10e      	bne.n	8012734 <__mcmp+0x28>
 8012716:	f100 0314 	add.w	r3, r0, #20
 801271a:	3114      	adds	r1, #20
 801271c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012720:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012724:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012728:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801272c:	42a5      	cmp	r5, r4
 801272e:	d003      	beq.n	8012738 <__mcmp+0x2c>
 8012730:	d305      	bcc.n	801273e <__mcmp+0x32>
 8012732:	2201      	movs	r2, #1
 8012734:	4610      	mov	r0, r2
 8012736:	bd30      	pop	{r4, r5, pc}
 8012738:	4283      	cmp	r3, r0
 801273a:	d3f3      	bcc.n	8012724 <__mcmp+0x18>
 801273c:	e7fa      	b.n	8012734 <__mcmp+0x28>
 801273e:	f04f 32ff 	mov.w	r2, #4294967295
 8012742:	e7f7      	b.n	8012734 <__mcmp+0x28>

08012744 <__mdiff>:
 8012744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012748:	460c      	mov	r4, r1
 801274a:	4606      	mov	r6, r0
 801274c:	4611      	mov	r1, r2
 801274e:	4620      	mov	r0, r4
 8012750:	4690      	mov	r8, r2
 8012752:	f7ff ffdb 	bl	801270c <__mcmp>
 8012756:	1e05      	subs	r5, r0, #0
 8012758:	d110      	bne.n	801277c <__mdiff+0x38>
 801275a:	4629      	mov	r1, r5
 801275c:	4630      	mov	r0, r6
 801275e:	f7ff fd09 	bl	8012174 <_Balloc>
 8012762:	b930      	cbnz	r0, 8012772 <__mdiff+0x2e>
 8012764:	4b3a      	ldr	r3, [pc, #232]	; (8012850 <__mdiff+0x10c>)
 8012766:	4602      	mov	r2, r0
 8012768:	f240 2132 	movw	r1, #562	; 0x232
 801276c:	4839      	ldr	r0, [pc, #228]	; (8012854 <__mdiff+0x110>)
 801276e:	f001 f9c7 	bl	8013b00 <__assert_func>
 8012772:	2301      	movs	r3, #1
 8012774:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801277c:	bfa4      	itt	ge
 801277e:	4643      	movge	r3, r8
 8012780:	46a0      	movge	r8, r4
 8012782:	4630      	mov	r0, r6
 8012784:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012788:	bfa6      	itte	ge
 801278a:	461c      	movge	r4, r3
 801278c:	2500      	movge	r5, #0
 801278e:	2501      	movlt	r5, #1
 8012790:	f7ff fcf0 	bl	8012174 <_Balloc>
 8012794:	b920      	cbnz	r0, 80127a0 <__mdiff+0x5c>
 8012796:	4b2e      	ldr	r3, [pc, #184]	; (8012850 <__mdiff+0x10c>)
 8012798:	4602      	mov	r2, r0
 801279a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801279e:	e7e5      	b.n	801276c <__mdiff+0x28>
 80127a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80127a4:	6926      	ldr	r6, [r4, #16]
 80127a6:	60c5      	str	r5, [r0, #12]
 80127a8:	f104 0914 	add.w	r9, r4, #20
 80127ac:	f108 0514 	add.w	r5, r8, #20
 80127b0:	f100 0e14 	add.w	lr, r0, #20
 80127b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80127b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80127bc:	f108 0210 	add.w	r2, r8, #16
 80127c0:	46f2      	mov	sl, lr
 80127c2:	2100      	movs	r1, #0
 80127c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80127c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80127cc:	fa1f f883 	uxth.w	r8, r3
 80127d0:	fa11 f18b 	uxtah	r1, r1, fp
 80127d4:	0c1b      	lsrs	r3, r3, #16
 80127d6:	eba1 0808 	sub.w	r8, r1, r8
 80127da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80127de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80127e2:	fa1f f888 	uxth.w	r8, r8
 80127e6:	1419      	asrs	r1, r3, #16
 80127e8:	454e      	cmp	r6, r9
 80127ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80127ee:	f84a 3b04 	str.w	r3, [sl], #4
 80127f2:	d8e7      	bhi.n	80127c4 <__mdiff+0x80>
 80127f4:	1b33      	subs	r3, r6, r4
 80127f6:	3b15      	subs	r3, #21
 80127f8:	f023 0303 	bic.w	r3, r3, #3
 80127fc:	3304      	adds	r3, #4
 80127fe:	3415      	adds	r4, #21
 8012800:	42a6      	cmp	r6, r4
 8012802:	bf38      	it	cc
 8012804:	2304      	movcc	r3, #4
 8012806:	441d      	add	r5, r3
 8012808:	4473      	add	r3, lr
 801280a:	469e      	mov	lr, r3
 801280c:	462e      	mov	r6, r5
 801280e:	4566      	cmp	r6, ip
 8012810:	d30e      	bcc.n	8012830 <__mdiff+0xec>
 8012812:	f10c 0203 	add.w	r2, ip, #3
 8012816:	1b52      	subs	r2, r2, r5
 8012818:	f022 0203 	bic.w	r2, r2, #3
 801281c:	3d03      	subs	r5, #3
 801281e:	45ac      	cmp	ip, r5
 8012820:	bf38      	it	cc
 8012822:	2200      	movcc	r2, #0
 8012824:	441a      	add	r2, r3
 8012826:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801282a:	b17b      	cbz	r3, 801284c <__mdiff+0x108>
 801282c:	6107      	str	r7, [r0, #16]
 801282e:	e7a3      	b.n	8012778 <__mdiff+0x34>
 8012830:	f856 8b04 	ldr.w	r8, [r6], #4
 8012834:	fa11 f288 	uxtah	r2, r1, r8
 8012838:	1414      	asrs	r4, r2, #16
 801283a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801283e:	b292      	uxth	r2, r2
 8012840:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012844:	f84e 2b04 	str.w	r2, [lr], #4
 8012848:	1421      	asrs	r1, r4, #16
 801284a:	e7e0      	b.n	801280e <__mdiff+0xca>
 801284c:	3f01      	subs	r7, #1
 801284e:	e7ea      	b.n	8012826 <__mdiff+0xe2>
 8012850:	080153a7 	.word	0x080153a7
 8012854:	08015494 	.word	0x08015494

08012858 <__ulp>:
 8012858:	b082      	sub	sp, #8
 801285a:	ed8d 0b00 	vstr	d0, [sp]
 801285e:	9b01      	ldr	r3, [sp, #4]
 8012860:	4912      	ldr	r1, [pc, #72]	; (80128ac <__ulp+0x54>)
 8012862:	4019      	ands	r1, r3
 8012864:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012868:	2900      	cmp	r1, #0
 801286a:	dd05      	ble.n	8012878 <__ulp+0x20>
 801286c:	2200      	movs	r2, #0
 801286e:	460b      	mov	r3, r1
 8012870:	ec43 2b10 	vmov	d0, r2, r3
 8012874:	b002      	add	sp, #8
 8012876:	4770      	bx	lr
 8012878:	4249      	negs	r1, r1
 801287a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801287e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012882:	f04f 0200 	mov.w	r2, #0
 8012886:	f04f 0300 	mov.w	r3, #0
 801288a:	da04      	bge.n	8012896 <__ulp+0x3e>
 801288c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012890:	fa41 f300 	asr.w	r3, r1, r0
 8012894:	e7ec      	b.n	8012870 <__ulp+0x18>
 8012896:	f1a0 0114 	sub.w	r1, r0, #20
 801289a:	291e      	cmp	r1, #30
 801289c:	bfda      	itte	le
 801289e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80128a2:	fa20 f101 	lsrle.w	r1, r0, r1
 80128a6:	2101      	movgt	r1, #1
 80128a8:	460a      	mov	r2, r1
 80128aa:	e7e1      	b.n	8012870 <__ulp+0x18>
 80128ac:	7ff00000 	.word	0x7ff00000

080128b0 <__b2d>:
 80128b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128b2:	6905      	ldr	r5, [r0, #16]
 80128b4:	f100 0714 	add.w	r7, r0, #20
 80128b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80128bc:	1f2e      	subs	r6, r5, #4
 80128be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80128c2:	4620      	mov	r0, r4
 80128c4:	f7ff fd48 	bl	8012358 <__hi0bits>
 80128c8:	f1c0 0320 	rsb	r3, r0, #32
 80128cc:	280a      	cmp	r0, #10
 80128ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801294c <__b2d+0x9c>
 80128d2:	600b      	str	r3, [r1, #0]
 80128d4:	dc14      	bgt.n	8012900 <__b2d+0x50>
 80128d6:	f1c0 0e0b 	rsb	lr, r0, #11
 80128da:	fa24 f10e 	lsr.w	r1, r4, lr
 80128de:	42b7      	cmp	r7, r6
 80128e0:	ea41 030c 	orr.w	r3, r1, ip
 80128e4:	bf34      	ite	cc
 80128e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80128ea:	2100      	movcs	r1, #0
 80128ec:	3015      	adds	r0, #21
 80128ee:	fa04 f000 	lsl.w	r0, r4, r0
 80128f2:	fa21 f10e 	lsr.w	r1, r1, lr
 80128f6:	ea40 0201 	orr.w	r2, r0, r1
 80128fa:	ec43 2b10 	vmov	d0, r2, r3
 80128fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012900:	42b7      	cmp	r7, r6
 8012902:	bf3a      	itte	cc
 8012904:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012908:	f1a5 0608 	subcc.w	r6, r5, #8
 801290c:	2100      	movcs	r1, #0
 801290e:	380b      	subs	r0, #11
 8012910:	d017      	beq.n	8012942 <__b2d+0x92>
 8012912:	f1c0 0c20 	rsb	ip, r0, #32
 8012916:	fa04 f500 	lsl.w	r5, r4, r0
 801291a:	42be      	cmp	r6, r7
 801291c:	fa21 f40c 	lsr.w	r4, r1, ip
 8012920:	ea45 0504 	orr.w	r5, r5, r4
 8012924:	bf8c      	ite	hi
 8012926:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801292a:	2400      	movls	r4, #0
 801292c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012930:	fa01 f000 	lsl.w	r0, r1, r0
 8012934:	fa24 f40c 	lsr.w	r4, r4, ip
 8012938:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801293c:	ea40 0204 	orr.w	r2, r0, r4
 8012940:	e7db      	b.n	80128fa <__b2d+0x4a>
 8012942:	ea44 030c 	orr.w	r3, r4, ip
 8012946:	460a      	mov	r2, r1
 8012948:	e7d7      	b.n	80128fa <__b2d+0x4a>
 801294a:	bf00      	nop
 801294c:	3ff00000 	.word	0x3ff00000

08012950 <__d2b>:
 8012950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012954:	4689      	mov	r9, r1
 8012956:	2101      	movs	r1, #1
 8012958:	ec57 6b10 	vmov	r6, r7, d0
 801295c:	4690      	mov	r8, r2
 801295e:	f7ff fc09 	bl	8012174 <_Balloc>
 8012962:	4604      	mov	r4, r0
 8012964:	b930      	cbnz	r0, 8012974 <__d2b+0x24>
 8012966:	4602      	mov	r2, r0
 8012968:	4b25      	ldr	r3, [pc, #148]	; (8012a00 <__d2b+0xb0>)
 801296a:	4826      	ldr	r0, [pc, #152]	; (8012a04 <__d2b+0xb4>)
 801296c:	f240 310a 	movw	r1, #778	; 0x30a
 8012970:	f001 f8c6 	bl	8013b00 <__assert_func>
 8012974:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801297c:	bb35      	cbnz	r5, 80129cc <__d2b+0x7c>
 801297e:	2e00      	cmp	r6, #0
 8012980:	9301      	str	r3, [sp, #4]
 8012982:	d028      	beq.n	80129d6 <__d2b+0x86>
 8012984:	4668      	mov	r0, sp
 8012986:	9600      	str	r6, [sp, #0]
 8012988:	f7ff fd06 	bl	8012398 <__lo0bits>
 801298c:	9900      	ldr	r1, [sp, #0]
 801298e:	b300      	cbz	r0, 80129d2 <__d2b+0x82>
 8012990:	9a01      	ldr	r2, [sp, #4]
 8012992:	f1c0 0320 	rsb	r3, r0, #32
 8012996:	fa02 f303 	lsl.w	r3, r2, r3
 801299a:	430b      	orrs	r3, r1
 801299c:	40c2      	lsrs	r2, r0
 801299e:	6163      	str	r3, [r4, #20]
 80129a0:	9201      	str	r2, [sp, #4]
 80129a2:	9b01      	ldr	r3, [sp, #4]
 80129a4:	61a3      	str	r3, [r4, #24]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	bf14      	ite	ne
 80129aa:	2202      	movne	r2, #2
 80129ac:	2201      	moveq	r2, #1
 80129ae:	6122      	str	r2, [r4, #16]
 80129b0:	b1d5      	cbz	r5, 80129e8 <__d2b+0x98>
 80129b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80129b6:	4405      	add	r5, r0
 80129b8:	f8c9 5000 	str.w	r5, [r9]
 80129bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80129c0:	f8c8 0000 	str.w	r0, [r8]
 80129c4:	4620      	mov	r0, r4
 80129c6:	b003      	add	sp, #12
 80129c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80129d0:	e7d5      	b.n	801297e <__d2b+0x2e>
 80129d2:	6161      	str	r1, [r4, #20]
 80129d4:	e7e5      	b.n	80129a2 <__d2b+0x52>
 80129d6:	a801      	add	r0, sp, #4
 80129d8:	f7ff fcde 	bl	8012398 <__lo0bits>
 80129dc:	9b01      	ldr	r3, [sp, #4]
 80129de:	6163      	str	r3, [r4, #20]
 80129e0:	2201      	movs	r2, #1
 80129e2:	6122      	str	r2, [r4, #16]
 80129e4:	3020      	adds	r0, #32
 80129e6:	e7e3      	b.n	80129b0 <__d2b+0x60>
 80129e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80129ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80129f0:	f8c9 0000 	str.w	r0, [r9]
 80129f4:	6918      	ldr	r0, [r3, #16]
 80129f6:	f7ff fcaf 	bl	8012358 <__hi0bits>
 80129fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80129fe:	e7df      	b.n	80129c0 <__d2b+0x70>
 8012a00:	080153a7 	.word	0x080153a7
 8012a04:	08015494 	.word	0x08015494

08012a08 <__ratio>:
 8012a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a0c:	4688      	mov	r8, r1
 8012a0e:	4669      	mov	r1, sp
 8012a10:	4681      	mov	r9, r0
 8012a12:	f7ff ff4d 	bl	80128b0 <__b2d>
 8012a16:	a901      	add	r1, sp, #4
 8012a18:	4640      	mov	r0, r8
 8012a1a:	ec55 4b10 	vmov	r4, r5, d0
 8012a1e:	f7ff ff47 	bl	80128b0 <__b2d>
 8012a22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012a26:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012a2a:	eba3 0c02 	sub.w	ip, r3, r2
 8012a2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012a32:	1a9b      	subs	r3, r3, r2
 8012a34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012a38:	ec51 0b10 	vmov	r0, r1, d0
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	bfd6      	itet	le
 8012a40:	460a      	movle	r2, r1
 8012a42:	462a      	movgt	r2, r5
 8012a44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012a48:	468b      	mov	fp, r1
 8012a4a:	462f      	mov	r7, r5
 8012a4c:	bfd4      	ite	le
 8012a4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012a52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012a56:	4620      	mov	r0, r4
 8012a58:	ee10 2a10 	vmov	r2, s0
 8012a5c:	465b      	mov	r3, fp
 8012a5e:	4639      	mov	r1, r7
 8012a60:	f7ed ff14 	bl	800088c <__aeabi_ddiv>
 8012a64:	ec41 0b10 	vmov	d0, r0, r1
 8012a68:	b003      	add	sp, #12
 8012a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012a6e <__copybits>:
 8012a6e:	3901      	subs	r1, #1
 8012a70:	b570      	push	{r4, r5, r6, lr}
 8012a72:	1149      	asrs	r1, r1, #5
 8012a74:	6914      	ldr	r4, [r2, #16]
 8012a76:	3101      	adds	r1, #1
 8012a78:	f102 0314 	add.w	r3, r2, #20
 8012a7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012a80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012a84:	1f05      	subs	r5, r0, #4
 8012a86:	42a3      	cmp	r3, r4
 8012a88:	d30c      	bcc.n	8012aa4 <__copybits+0x36>
 8012a8a:	1aa3      	subs	r3, r4, r2
 8012a8c:	3b11      	subs	r3, #17
 8012a8e:	f023 0303 	bic.w	r3, r3, #3
 8012a92:	3211      	adds	r2, #17
 8012a94:	42a2      	cmp	r2, r4
 8012a96:	bf88      	it	hi
 8012a98:	2300      	movhi	r3, #0
 8012a9a:	4418      	add	r0, r3
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	4288      	cmp	r0, r1
 8012aa0:	d305      	bcc.n	8012aae <__copybits+0x40>
 8012aa2:	bd70      	pop	{r4, r5, r6, pc}
 8012aa4:	f853 6b04 	ldr.w	r6, [r3], #4
 8012aa8:	f845 6f04 	str.w	r6, [r5, #4]!
 8012aac:	e7eb      	b.n	8012a86 <__copybits+0x18>
 8012aae:	f840 3b04 	str.w	r3, [r0], #4
 8012ab2:	e7f4      	b.n	8012a9e <__copybits+0x30>

08012ab4 <__any_on>:
 8012ab4:	f100 0214 	add.w	r2, r0, #20
 8012ab8:	6900      	ldr	r0, [r0, #16]
 8012aba:	114b      	asrs	r3, r1, #5
 8012abc:	4298      	cmp	r0, r3
 8012abe:	b510      	push	{r4, lr}
 8012ac0:	db11      	blt.n	8012ae6 <__any_on+0x32>
 8012ac2:	dd0a      	ble.n	8012ada <__any_on+0x26>
 8012ac4:	f011 011f 	ands.w	r1, r1, #31
 8012ac8:	d007      	beq.n	8012ada <__any_on+0x26>
 8012aca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012ace:	fa24 f001 	lsr.w	r0, r4, r1
 8012ad2:	fa00 f101 	lsl.w	r1, r0, r1
 8012ad6:	428c      	cmp	r4, r1
 8012ad8:	d10b      	bne.n	8012af2 <__any_on+0x3e>
 8012ada:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	d803      	bhi.n	8012aea <__any_on+0x36>
 8012ae2:	2000      	movs	r0, #0
 8012ae4:	bd10      	pop	{r4, pc}
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	e7f7      	b.n	8012ada <__any_on+0x26>
 8012aea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012aee:	2900      	cmp	r1, #0
 8012af0:	d0f5      	beq.n	8012ade <__any_on+0x2a>
 8012af2:	2001      	movs	r0, #1
 8012af4:	e7f6      	b.n	8012ae4 <__any_on+0x30>

08012af6 <_calloc_r>:
 8012af6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012af8:	fba1 2402 	umull	r2, r4, r1, r2
 8012afc:	b94c      	cbnz	r4, 8012b12 <_calloc_r+0x1c>
 8012afe:	4611      	mov	r1, r2
 8012b00:	9201      	str	r2, [sp, #4]
 8012b02:	f000 f87b 	bl	8012bfc <_malloc_r>
 8012b06:	9a01      	ldr	r2, [sp, #4]
 8012b08:	4605      	mov	r5, r0
 8012b0a:	b930      	cbnz	r0, 8012b1a <_calloc_r+0x24>
 8012b0c:	4628      	mov	r0, r5
 8012b0e:	b003      	add	sp, #12
 8012b10:	bd30      	pop	{r4, r5, pc}
 8012b12:	220c      	movs	r2, #12
 8012b14:	6002      	str	r2, [r0, #0]
 8012b16:	2500      	movs	r5, #0
 8012b18:	e7f8      	b.n	8012b0c <_calloc_r+0x16>
 8012b1a:	4621      	mov	r1, r4
 8012b1c:	f7fb ff6e 	bl	800e9fc <memset>
 8012b20:	e7f4      	b.n	8012b0c <_calloc_r+0x16>
	...

08012b24 <_free_r>:
 8012b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b26:	2900      	cmp	r1, #0
 8012b28:	d044      	beq.n	8012bb4 <_free_r+0x90>
 8012b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b2e:	9001      	str	r0, [sp, #4]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	f1a1 0404 	sub.w	r4, r1, #4
 8012b36:	bfb8      	it	lt
 8012b38:	18e4      	addlt	r4, r4, r3
 8012b3a:	f001 f833 	bl	8013ba4 <__malloc_lock>
 8012b3e:	4a1e      	ldr	r2, [pc, #120]	; (8012bb8 <_free_r+0x94>)
 8012b40:	9801      	ldr	r0, [sp, #4]
 8012b42:	6813      	ldr	r3, [r2, #0]
 8012b44:	b933      	cbnz	r3, 8012b54 <_free_r+0x30>
 8012b46:	6063      	str	r3, [r4, #4]
 8012b48:	6014      	str	r4, [r2, #0]
 8012b4a:	b003      	add	sp, #12
 8012b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b50:	f001 b82e 	b.w	8013bb0 <__malloc_unlock>
 8012b54:	42a3      	cmp	r3, r4
 8012b56:	d908      	bls.n	8012b6a <_free_r+0x46>
 8012b58:	6825      	ldr	r5, [r4, #0]
 8012b5a:	1961      	adds	r1, r4, r5
 8012b5c:	428b      	cmp	r3, r1
 8012b5e:	bf01      	itttt	eq
 8012b60:	6819      	ldreq	r1, [r3, #0]
 8012b62:	685b      	ldreq	r3, [r3, #4]
 8012b64:	1949      	addeq	r1, r1, r5
 8012b66:	6021      	streq	r1, [r4, #0]
 8012b68:	e7ed      	b.n	8012b46 <_free_r+0x22>
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	685b      	ldr	r3, [r3, #4]
 8012b6e:	b10b      	cbz	r3, 8012b74 <_free_r+0x50>
 8012b70:	42a3      	cmp	r3, r4
 8012b72:	d9fa      	bls.n	8012b6a <_free_r+0x46>
 8012b74:	6811      	ldr	r1, [r2, #0]
 8012b76:	1855      	adds	r5, r2, r1
 8012b78:	42a5      	cmp	r5, r4
 8012b7a:	d10b      	bne.n	8012b94 <_free_r+0x70>
 8012b7c:	6824      	ldr	r4, [r4, #0]
 8012b7e:	4421      	add	r1, r4
 8012b80:	1854      	adds	r4, r2, r1
 8012b82:	42a3      	cmp	r3, r4
 8012b84:	6011      	str	r1, [r2, #0]
 8012b86:	d1e0      	bne.n	8012b4a <_free_r+0x26>
 8012b88:	681c      	ldr	r4, [r3, #0]
 8012b8a:	685b      	ldr	r3, [r3, #4]
 8012b8c:	6053      	str	r3, [r2, #4]
 8012b8e:	4421      	add	r1, r4
 8012b90:	6011      	str	r1, [r2, #0]
 8012b92:	e7da      	b.n	8012b4a <_free_r+0x26>
 8012b94:	d902      	bls.n	8012b9c <_free_r+0x78>
 8012b96:	230c      	movs	r3, #12
 8012b98:	6003      	str	r3, [r0, #0]
 8012b9a:	e7d6      	b.n	8012b4a <_free_r+0x26>
 8012b9c:	6825      	ldr	r5, [r4, #0]
 8012b9e:	1961      	adds	r1, r4, r5
 8012ba0:	428b      	cmp	r3, r1
 8012ba2:	bf04      	itt	eq
 8012ba4:	6819      	ldreq	r1, [r3, #0]
 8012ba6:	685b      	ldreq	r3, [r3, #4]
 8012ba8:	6063      	str	r3, [r4, #4]
 8012baa:	bf04      	itt	eq
 8012bac:	1949      	addeq	r1, r1, r5
 8012bae:	6021      	streq	r1, [r4, #0]
 8012bb0:	6054      	str	r4, [r2, #4]
 8012bb2:	e7ca      	b.n	8012b4a <_free_r+0x26>
 8012bb4:	b003      	add	sp, #12
 8012bb6:	bd30      	pop	{r4, r5, pc}
 8012bb8:	20003144 	.word	0x20003144

08012bbc <sbrk_aligned>:
 8012bbc:	b570      	push	{r4, r5, r6, lr}
 8012bbe:	4e0e      	ldr	r6, [pc, #56]	; (8012bf8 <sbrk_aligned+0x3c>)
 8012bc0:	460c      	mov	r4, r1
 8012bc2:	6831      	ldr	r1, [r6, #0]
 8012bc4:	4605      	mov	r5, r0
 8012bc6:	b911      	cbnz	r1, 8012bce <sbrk_aligned+0x12>
 8012bc8:	f000 fe82 	bl	80138d0 <_sbrk_r>
 8012bcc:	6030      	str	r0, [r6, #0]
 8012bce:	4621      	mov	r1, r4
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	f000 fe7d 	bl	80138d0 <_sbrk_r>
 8012bd6:	1c43      	adds	r3, r0, #1
 8012bd8:	d00a      	beq.n	8012bf0 <sbrk_aligned+0x34>
 8012bda:	1cc4      	adds	r4, r0, #3
 8012bdc:	f024 0403 	bic.w	r4, r4, #3
 8012be0:	42a0      	cmp	r0, r4
 8012be2:	d007      	beq.n	8012bf4 <sbrk_aligned+0x38>
 8012be4:	1a21      	subs	r1, r4, r0
 8012be6:	4628      	mov	r0, r5
 8012be8:	f000 fe72 	bl	80138d0 <_sbrk_r>
 8012bec:	3001      	adds	r0, #1
 8012bee:	d101      	bne.n	8012bf4 <sbrk_aligned+0x38>
 8012bf0:	f04f 34ff 	mov.w	r4, #4294967295
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	bd70      	pop	{r4, r5, r6, pc}
 8012bf8:	20003148 	.word	0x20003148

08012bfc <_malloc_r>:
 8012bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c00:	1ccd      	adds	r5, r1, #3
 8012c02:	f025 0503 	bic.w	r5, r5, #3
 8012c06:	3508      	adds	r5, #8
 8012c08:	2d0c      	cmp	r5, #12
 8012c0a:	bf38      	it	cc
 8012c0c:	250c      	movcc	r5, #12
 8012c0e:	2d00      	cmp	r5, #0
 8012c10:	4607      	mov	r7, r0
 8012c12:	db01      	blt.n	8012c18 <_malloc_r+0x1c>
 8012c14:	42a9      	cmp	r1, r5
 8012c16:	d905      	bls.n	8012c24 <_malloc_r+0x28>
 8012c18:	230c      	movs	r3, #12
 8012c1a:	603b      	str	r3, [r7, #0]
 8012c1c:	2600      	movs	r6, #0
 8012c1e:	4630      	mov	r0, r6
 8012c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c24:	4e2e      	ldr	r6, [pc, #184]	; (8012ce0 <_malloc_r+0xe4>)
 8012c26:	f000 ffbd 	bl	8013ba4 <__malloc_lock>
 8012c2a:	6833      	ldr	r3, [r6, #0]
 8012c2c:	461c      	mov	r4, r3
 8012c2e:	bb34      	cbnz	r4, 8012c7e <_malloc_r+0x82>
 8012c30:	4629      	mov	r1, r5
 8012c32:	4638      	mov	r0, r7
 8012c34:	f7ff ffc2 	bl	8012bbc <sbrk_aligned>
 8012c38:	1c43      	adds	r3, r0, #1
 8012c3a:	4604      	mov	r4, r0
 8012c3c:	d14d      	bne.n	8012cda <_malloc_r+0xde>
 8012c3e:	6834      	ldr	r4, [r6, #0]
 8012c40:	4626      	mov	r6, r4
 8012c42:	2e00      	cmp	r6, #0
 8012c44:	d140      	bne.n	8012cc8 <_malloc_r+0xcc>
 8012c46:	6823      	ldr	r3, [r4, #0]
 8012c48:	4631      	mov	r1, r6
 8012c4a:	4638      	mov	r0, r7
 8012c4c:	eb04 0803 	add.w	r8, r4, r3
 8012c50:	f000 fe3e 	bl	80138d0 <_sbrk_r>
 8012c54:	4580      	cmp	r8, r0
 8012c56:	d13a      	bne.n	8012cce <_malloc_r+0xd2>
 8012c58:	6821      	ldr	r1, [r4, #0]
 8012c5a:	3503      	adds	r5, #3
 8012c5c:	1a6d      	subs	r5, r5, r1
 8012c5e:	f025 0503 	bic.w	r5, r5, #3
 8012c62:	3508      	adds	r5, #8
 8012c64:	2d0c      	cmp	r5, #12
 8012c66:	bf38      	it	cc
 8012c68:	250c      	movcc	r5, #12
 8012c6a:	4629      	mov	r1, r5
 8012c6c:	4638      	mov	r0, r7
 8012c6e:	f7ff ffa5 	bl	8012bbc <sbrk_aligned>
 8012c72:	3001      	adds	r0, #1
 8012c74:	d02b      	beq.n	8012cce <_malloc_r+0xd2>
 8012c76:	6823      	ldr	r3, [r4, #0]
 8012c78:	442b      	add	r3, r5
 8012c7a:	6023      	str	r3, [r4, #0]
 8012c7c:	e00e      	b.n	8012c9c <_malloc_r+0xa0>
 8012c7e:	6822      	ldr	r2, [r4, #0]
 8012c80:	1b52      	subs	r2, r2, r5
 8012c82:	d41e      	bmi.n	8012cc2 <_malloc_r+0xc6>
 8012c84:	2a0b      	cmp	r2, #11
 8012c86:	d916      	bls.n	8012cb6 <_malloc_r+0xba>
 8012c88:	1961      	adds	r1, r4, r5
 8012c8a:	42a3      	cmp	r3, r4
 8012c8c:	6025      	str	r5, [r4, #0]
 8012c8e:	bf18      	it	ne
 8012c90:	6059      	strne	r1, [r3, #4]
 8012c92:	6863      	ldr	r3, [r4, #4]
 8012c94:	bf08      	it	eq
 8012c96:	6031      	streq	r1, [r6, #0]
 8012c98:	5162      	str	r2, [r4, r5]
 8012c9a:	604b      	str	r3, [r1, #4]
 8012c9c:	4638      	mov	r0, r7
 8012c9e:	f104 060b 	add.w	r6, r4, #11
 8012ca2:	f000 ff85 	bl	8013bb0 <__malloc_unlock>
 8012ca6:	f026 0607 	bic.w	r6, r6, #7
 8012caa:	1d23      	adds	r3, r4, #4
 8012cac:	1af2      	subs	r2, r6, r3
 8012cae:	d0b6      	beq.n	8012c1e <_malloc_r+0x22>
 8012cb0:	1b9b      	subs	r3, r3, r6
 8012cb2:	50a3      	str	r3, [r4, r2]
 8012cb4:	e7b3      	b.n	8012c1e <_malloc_r+0x22>
 8012cb6:	6862      	ldr	r2, [r4, #4]
 8012cb8:	42a3      	cmp	r3, r4
 8012cba:	bf0c      	ite	eq
 8012cbc:	6032      	streq	r2, [r6, #0]
 8012cbe:	605a      	strne	r2, [r3, #4]
 8012cc0:	e7ec      	b.n	8012c9c <_malloc_r+0xa0>
 8012cc2:	4623      	mov	r3, r4
 8012cc4:	6864      	ldr	r4, [r4, #4]
 8012cc6:	e7b2      	b.n	8012c2e <_malloc_r+0x32>
 8012cc8:	4634      	mov	r4, r6
 8012cca:	6876      	ldr	r6, [r6, #4]
 8012ccc:	e7b9      	b.n	8012c42 <_malloc_r+0x46>
 8012cce:	230c      	movs	r3, #12
 8012cd0:	603b      	str	r3, [r7, #0]
 8012cd2:	4638      	mov	r0, r7
 8012cd4:	f000 ff6c 	bl	8013bb0 <__malloc_unlock>
 8012cd8:	e7a1      	b.n	8012c1e <_malloc_r+0x22>
 8012cda:	6025      	str	r5, [r4, #0]
 8012cdc:	e7de      	b.n	8012c9c <_malloc_r+0xa0>
 8012cde:	bf00      	nop
 8012ce0:	20003144 	.word	0x20003144

08012ce4 <__ssputs_r>:
 8012ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ce8:	688e      	ldr	r6, [r1, #8]
 8012cea:	429e      	cmp	r6, r3
 8012cec:	4682      	mov	sl, r0
 8012cee:	460c      	mov	r4, r1
 8012cf0:	4690      	mov	r8, r2
 8012cf2:	461f      	mov	r7, r3
 8012cf4:	d838      	bhi.n	8012d68 <__ssputs_r+0x84>
 8012cf6:	898a      	ldrh	r2, [r1, #12]
 8012cf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012cfc:	d032      	beq.n	8012d64 <__ssputs_r+0x80>
 8012cfe:	6825      	ldr	r5, [r4, #0]
 8012d00:	6909      	ldr	r1, [r1, #16]
 8012d02:	eba5 0901 	sub.w	r9, r5, r1
 8012d06:	6965      	ldr	r5, [r4, #20]
 8012d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012d10:	3301      	adds	r3, #1
 8012d12:	444b      	add	r3, r9
 8012d14:	106d      	asrs	r5, r5, #1
 8012d16:	429d      	cmp	r5, r3
 8012d18:	bf38      	it	cc
 8012d1a:	461d      	movcc	r5, r3
 8012d1c:	0553      	lsls	r3, r2, #21
 8012d1e:	d531      	bpl.n	8012d84 <__ssputs_r+0xa0>
 8012d20:	4629      	mov	r1, r5
 8012d22:	f7ff ff6b 	bl	8012bfc <_malloc_r>
 8012d26:	4606      	mov	r6, r0
 8012d28:	b950      	cbnz	r0, 8012d40 <__ssputs_r+0x5c>
 8012d2a:	230c      	movs	r3, #12
 8012d2c:	f8ca 3000 	str.w	r3, [sl]
 8012d30:	89a3      	ldrh	r3, [r4, #12]
 8012d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d36:	81a3      	strh	r3, [r4, #12]
 8012d38:	f04f 30ff 	mov.w	r0, #4294967295
 8012d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d40:	6921      	ldr	r1, [r4, #16]
 8012d42:	464a      	mov	r2, r9
 8012d44:	f7fb fe32 	bl	800e9ac <memcpy>
 8012d48:	89a3      	ldrh	r3, [r4, #12]
 8012d4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d52:	81a3      	strh	r3, [r4, #12]
 8012d54:	6126      	str	r6, [r4, #16]
 8012d56:	6165      	str	r5, [r4, #20]
 8012d58:	444e      	add	r6, r9
 8012d5a:	eba5 0509 	sub.w	r5, r5, r9
 8012d5e:	6026      	str	r6, [r4, #0]
 8012d60:	60a5      	str	r5, [r4, #8]
 8012d62:	463e      	mov	r6, r7
 8012d64:	42be      	cmp	r6, r7
 8012d66:	d900      	bls.n	8012d6a <__ssputs_r+0x86>
 8012d68:	463e      	mov	r6, r7
 8012d6a:	6820      	ldr	r0, [r4, #0]
 8012d6c:	4632      	mov	r2, r6
 8012d6e:	4641      	mov	r1, r8
 8012d70:	f7fb fe2a 	bl	800e9c8 <memmove>
 8012d74:	68a3      	ldr	r3, [r4, #8]
 8012d76:	1b9b      	subs	r3, r3, r6
 8012d78:	60a3      	str	r3, [r4, #8]
 8012d7a:	6823      	ldr	r3, [r4, #0]
 8012d7c:	4433      	add	r3, r6
 8012d7e:	6023      	str	r3, [r4, #0]
 8012d80:	2000      	movs	r0, #0
 8012d82:	e7db      	b.n	8012d3c <__ssputs_r+0x58>
 8012d84:	462a      	mov	r2, r5
 8012d86:	f000 ff19 	bl	8013bbc <_realloc_r>
 8012d8a:	4606      	mov	r6, r0
 8012d8c:	2800      	cmp	r0, #0
 8012d8e:	d1e1      	bne.n	8012d54 <__ssputs_r+0x70>
 8012d90:	6921      	ldr	r1, [r4, #16]
 8012d92:	4650      	mov	r0, sl
 8012d94:	f7ff fec6 	bl	8012b24 <_free_r>
 8012d98:	e7c7      	b.n	8012d2a <__ssputs_r+0x46>
	...

08012d9c <_svfiprintf_r>:
 8012d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012da0:	4698      	mov	r8, r3
 8012da2:	898b      	ldrh	r3, [r1, #12]
 8012da4:	061b      	lsls	r3, r3, #24
 8012da6:	b09d      	sub	sp, #116	; 0x74
 8012da8:	4607      	mov	r7, r0
 8012daa:	460d      	mov	r5, r1
 8012dac:	4614      	mov	r4, r2
 8012dae:	d50e      	bpl.n	8012dce <_svfiprintf_r+0x32>
 8012db0:	690b      	ldr	r3, [r1, #16]
 8012db2:	b963      	cbnz	r3, 8012dce <_svfiprintf_r+0x32>
 8012db4:	2140      	movs	r1, #64	; 0x40
 8012db6:	f7ff ff21 	bl	8012bfc <_malloc_r>
 8012dba:	6028      	str	r0, [r5, #0]
 8012dbc:	6128      	str	r0, [r5, #16]
 8012dbe:	b920      	cbnz	r0, 8012dca <_svfiprintf_r+0x2e>
 8012dc0:	230c      	movs	r3, #12
 8012dc2:	603b      	str	r3, [r7, #0]
 8012dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8012dc8:	e0d1      	b.n	8012f6e <_svfiprintf_r+0x1d2>
 8012dca:	2340      	movs	r3, #64	; 0x40
 8012dcc:	616b      	str	r3, [r5, #20]
 8012dce:	2300      	movs	r3, #0
 8012dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8012dd2:	2320      	movs	r3, #32
 8012dd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012dd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ddc:	2330      	movs	r3, #48	; 0x30
 8012dde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012f88 <_svfiprintf_r+0x1ec>
 8012de2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012de6:	f04f 0901 	mov.w	r9, #1
 8012dea:	4623      	mov	r3, r4
 8012dec:	469a      	mov	sl, r3
 8012dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012df2:	b10a      	cbz	r2, 8012df8 <_svfiprintf_r+0x5c>
 8012df4:	2a25      	cmp	r2, #37	; 0x25
 8012df6:	d1f9      	bne.n	8012dec <_svfiprintf_r+0x50>
 8012df8:	ebba 0b04 	subs.w	fp, sl, r4
 8012dfc:	d00b      	beq.n	8012e16 <_svfiprintf_r+0x7a>
 8012dfe:	465b      	mov	r3, fp
 8012e00:	4622      	mov	r2, r4
 8012e02:	4629      	mov	r1, r5
 8012e04:	4638      	mov	r0, r7
 8012e06:	f7ff ff6d 	bl	8012ce4 <__ssputs_r>
 8012e0a:	3001      	adds	r0, #1
 8012e0c:	f000 80aa 	beq.w	8012f64 <_svfiprintf_r+0x1c8>
 8012e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e12:	445a      	add	r2, fp
 8012e14:	9209      	str	r2, [sp, #36]	; 0x24
 8012e16:	f89a 3000 	ldrb.w	r3, [sl]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	f000 80a2 	beq.w	8012f64 <_svfiprintf_r+0x1c8>
 8012e20:	2300      	movs	r3, #0
 8012e22:	f04f 32ff 	mov.w	r2, #4294967295
 8012e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e2a:	f10a 0a01 	add.w	sl, sl, #1
 8012e2e:	9304      	str	r3, [sp, #16]
 8012e30:	9307      	str	r3, [sp, #28]
 8012e32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e36:	931a      	str	r3, [sp, #104]	; 0x68
 8012e38:	4654      	mov	r4, sl
 8012e3a:	2205      	movs	r2, #5
 8012e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e40:	4851      	ldr	r0, [pc, #324]	; (8012f88 <_svfiprintf_r+0x1ec>)
 8012e42:	f7ed f9ed 	bl	8000220 <memchr>
 8012e46:	9a04      	ldr	r2, [sp, #16]
 8012e48:	b9d8      	cbnz	r0, 8012e82 <_svfiprintf_r+0xe6>
 8012e4a:	06d0      	lsls	r0, r2, #27
 8012e4c:	bf44      	itt	mi
 8012e4e:	2320      	movmi	r3, #32
 8012e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e54:	0711      	lsls	r1, r2, #28
 8012e56:	bf44      	itt	mi
 8012e58:	232b      	movmi	r3, #43	; 0x2b
 8012e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8012e62:	2b2a      	cmp	r3, #42	; 0x2a
 8012e64:	d015      	beq.n	8012e92 <_svfiprintf_r+0xf6>
 8012e66:	9a07      	ldr	r2, [sp, #28]
 8012e68:	4654      	mov	r4, sl
 8012e6a:	2000      	movs	r0, #0
 8012e6c:	f04f 0c0a 	mov.w	ip, #10
 8012e70:	4621      	mov	r1, r4
 8012e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e76:	3b30      	subs	r3, #48	; 0x30
 8012e78:	2b09      	cmp	r3, #9
 8012e7a:	d94e      	bls.n	8012f1a <_svfiprintf_r+0x17e>
 8012e7c:	b1b0      	cbz	r0, 8012eac <_svfiprintf_r+0x110>
 8012e7e:	9207      	str	r2, [sp, #28]
 8012e80:	e014      	b.n	8012eac <_svfiprintf_r+0x110>
 8012e82:	eba0 0308 	sub.w	r3, r0, r8
 8012e86:	fa09 f303 	lsl.w	r3, r9, r3
 8012e8a:	4313      	orrs	r3, r2
 8012e8c:	9304      	str	r3, [sp, #16]
 8012e8e:	46a2      	mov	sl, r4
 8012e90:	e7d2      	b.n	8012e38 <_svfiprintf_r+0x9c>
 8012e92:	9b03      	ldr	r3, [sp, #12]
 8012e94:	1d19      	adds	r1, r3, #4
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	9103      	str	r1, [sp, #12]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	bfbb      	ittet	lt
 8012e9e:	425b      	neglt	r3, r3
 8012ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8012ea4:	9307      	strge	r3, [sp, #28]
 8012ea6:	9307      	strlt	r3, [sp, #28]
 8012ea8:	bfb8      	it	lt
 8012eaa:	9204      	strlt	r2, [sp, #16]
 8012eac:	7823      	ldrb	r3, [r4, #0]
 8012eae:	2b2e      	cmp	r3, #46	; 0x2e
 8012eb0:	d10c      	bne.n	8012ecc <_svfiprintf_r+0x130>
 8012eb2:	7863      	ldrb	r3, [r4, #1]
 8012eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8012eb6:	d135      	bne.n	8012f24 <_svfiprintf_r+0x188>
 8012eb8:	9b03      	ldr	r3, [sp, #12]
 8012eba:	1d1a      	adds	r2, r3, #4
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	9203      	str	r2, [sp, #12]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	bfb8      	it	lt
 8012ec4:	f04f 33ff 	movlt.w	r3, #4294967295
 8012ec8:	3402      	adds	r4, #2
 8012eca:	9305      	str	r3, [sp, #20]
 8012ecc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012f98 <_svfiprintf_r+0x1fc>
 8012ed0:	7821      	ldrb	r1, [r4, #0]
 8012ed2:	2203      	movs	r2, #3
 8012ed4:	4650      	mov	r0, sl
 8012ed6:	f7ed f9a3 	bl	8000220 <memchr>
 8012eda:	b140      	cbz	r0, 8012eee <_svfiprintf_r+0x152>
 8012edc:	2340      	movs	r3, #64	; 0x40
 8012ede:	eba0 000a 	sub.w	r0, r0, sl
 8012ee2:	fa03 f000 	lsl.w	r0, r3, r0
 8012ee6:	9b04      	ldr	r3, [sp, #16]
 8012ee8:	4303      	orrs	r3, r0
 8012eea:	3401      	adds	r4, #1
 8012eec:	9304      	str	r3, [sp, #16]
 8012eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ef2:	4826      	ldr	r0, [pc, #152]	; (8012f8c <_svfiprintf_r+0x1f0>)
 8012ef4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ef8:	2206      	movs	r2, #6
 8012efa:	f7ed f991 	bl	8000220 <memchr>
 8012efe:	2800      	cmp	r0, #0
 8012f00:	d038      	beq.n	8012f74 <_svfiprintf_r+0x1d8>
 8012f02:	4b23      	ldr	r3, [pc, #140]	; (8012f90 <_svfiprintf_r+0x1f4>)
 8012f04:	bb1b      	cbnz	r3, 8012f4e <_svfiprintf_r+0x1b2>
 8012f06:	9b03      	ldr	r3, [sp, #12]
 8012f08:	3307      	adds	r3, #7
 8012f0a:	f023 0307 	bic.w	r3, r3, #7
 8012f0e:	3308      	adds	r3, #8
 8012f10:	9303      	str	r3, [sp, #12]
 8012f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f14:	4433      	add	r3, r6
 8012f16:	9309      	str	r3, [sp, #36]	; 0x24
 8012f18:	e767      	b.n	8012dea <_svfiprintf_r+0x4e>
 8012f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f1e:	460c      	mov	r4, r1
 8012f20:	2001      	movs	r0, #1
 8012f22:	e7a5      	b.n	8012e70 <_svfiprintf_r+0xd4>
 8012f24:	2300      	movs	r3, #0
 8012f26:	3401      	adds	r4, #1
 8012f28:	9305      	str	r3, [sp, #20]
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	f04f 0c0a 	mov.w	ip, #10
 8012f30:	4620      	mov	r0, r4
 8012f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f36:	3a30      	subs	r2, #48	; 0x30
 8012f38:	2a09      	cmp	r2, #9
 8012f3a:	d903      	bls.n	8012f44 <_svfiprintf_r+0x1a8>
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d0c5      	beq.n	8012ecc <_svfiprintf_r+0x130>
 8012f40:	9105      	str	r1, [sp, #20]
 8012f42:	e7c3      	b.n	8012ecc <_svfiprintf_r+0x130>
 8012f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f48:	4604      	mov	r4, r0
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	e7f0      	b.n	8012f30 <_svfiprintf_r+0x194>
 8012f4e:	ab03      	add	r3, sp, #12
 8012f50:	9300      	str	r3, [sp, #0]
 8012f52:	462a      	mov	r2, r5
 8012f54:	4b0f      	ldr	r3, [pc, #60]	; (8012f94 <_svfiprintf_r+0x1f8>)
 8012f56:	a904      	add	r1, sp, #16
 8012f58:	4638      	mov	r0, r7
 8012f5a:	f7fb fdf7 	bl	800eb4c <_printf_float>
 8012f5e:	1c42      	adds	r2, r0, #1
 8012f60:	4606      	mov	r6, r0
 8012f62:	d1d6      	bne.n	8012f12 <_svfiprintf_r+0x176>
 8012f64:	89ab      	ldrh	r3, [r5, #12]
 8012f66:	065b      	lsls	r3, r3, #25
 8012f68:	f53f af2c 	bmi.w	8012dc4 <_svfiprintf_r+0x28>
 8012f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f6e:	b01d      	add	sp, #116	; 0x74
 8012f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f74:	ab03      	add	r3, sp, #12
 8012f76:	9300      	str	r3, [sp, #0]
 8012f78:	462a      	mov	r2, r5
 8012f7a:	4b06      	ldr	r3, [pc, #24]	; (8012f94 <_svfiprintf_r+0x1f8>)
 8012f7c:	a904      	add	r1, sp, #16
 8012f7e:	4638      	mov	r0, r7
 8012f80:	f7fc f888 	bl	800f094 <_printf_i>
 8012f84:	e7eb      	b.n	8012f5e <_svfiprintf_r+0x1c2>
 8012f86:	bf00      	nop
 8012f88:	080155ec 	.word	0x080155ec
 8012f8c:	080155f6 	.word	0x080155f6
 8012f90:	0800eb4d 	.word	0x0800eb4d
 8012f94:	08012ce5 	.word	0x08012ce5
 8012f98:	080155f2 	.word	0x080155f2

08012f9c <_sungetc_r>:
 8012f9c:	b538      	push	{r3, r4, r5, lr}
 8012f9e:	1c4b      	adds	r3, r1, #1
 8012fa0:	4614      	mov	r4, r2
 8012fa2:	d103      	bne.n	8012fac <_sungetc_r+0x10>
 8012fa4:	f04f 35ff 	mov.w	r5, #4294967295
 8012fa8:	4628      	mov	r0, r5
 8012faa:	bd38      	pop	{r3, r4, r5, pc}
 8012fac:	8993      	ldrh	r3, [r2, #12]
 8012fae:	f023 0320 	bic.w	r3, r3, #32
 8012fb2:	8193      	strh	r3, [r2, #12]
 8012fb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012fb6:	6852      	ldr	r2, [r2, #4]
 8012fb8:	b2cd      	uxtb	r5, r1
 8012fba:	b18b      	cbz	r3, 8012fe0 <_sungetc_r+0x44>
 8012fbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	dd08      	ble.n	8012fd4 <_sungetc_r+0x38>
 8012fc2:	6823      	ldr	r3, [r4, #0]
 8012fc4:	1e5a      	subs	r2, r3, #1
 8012fc6:	6022      	str	r2, [r4, #0]
 8012fc8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012fcc:	6863      	ldr	r3, [r4, #4]
 8012fce:	3301      	adds	r3, #1
 8012fd0:	6063      	str	r3, [r4, #4]
 8012fd2:	e7e9      	b.n	8012fa8 <_sungetc_r+0xc>
 8012fd4:	4621      	mov	r1, r4
 8012fd6:	f000 fd4b 	bl	8013a70 <__submore>
 8012fda:	2800      	cmp	r0, #0
 8012fdc:	d0f1      	beq.n	8012fc2 <_sungetc_r+0x26>
 8012fde:	e7e1      	b.n	8012fa4 <_sungetc_r+0x8>
 8012fe0:	6921      	ldr	r1, [r4, #16]
 8012fe2:	6823      	ldr	r3, [r4, #0]
 8012fe4:	b151      	cbz	r1, 8012ffc <_sungetc_r+0x60>
 8012fe6:	4299      	cmp	r1, r3
 8012fe8:	d208      	bcs.n	8012ffc <_sungetc_r+0x60>
 8012fea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012fee:	42a9      	cmp	r1, r5
 8012ff0:	d104      	bne.n	8012ffc <_sungetc_r+0x60>
 8012ff2:	3b01      	subs	r3, #1
 8012ff4:	3201      	adds	r2, #1
 8012ff6:	6023      	str	r3, [r4, #0]
 8012ff8:	6062      	str	r2, [r4, #4]
 8012ffa:	e7d5      	b.n	8012fa8 <_sungetc_r+0xc>
 8012ffc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013004:	6363      	str	r3, [r4, #52]	; 0x34
 8013006:	2303      	movs	r3, #3
 8013008:	63a3      	str	r3, [r4, #56]	; 0x38
 801300a:	4623      	mov	r3, r4
 801300c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013010:	6023      	str	r3, [r4, #0]
 8013012:	2301      	movs	r3, #1
 8013014:	e7dc      	b.n	8012fd0 <_sungetc_r+0x34>

08013016 <__ssrefill_r>:
 8013016:	b510      	push	{r4, lr}
 8013018:	460c      	mov	r4, r1
 801301a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801301c:	b169      	cbz	r1, 801303a <__ssrefill_r+0x24>
 801301e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013022:	4299      	cmp	r1, r3
 8013024:	d001      	beq.n	801302a <__ssrefill_r+0x14>
 8013026:	f7ff fd7d 	bl	8012b24 <_free_r>
 801302a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801302c:	6063      	str	r3, [r4, #4]
 801302e:	2000      	movs	r0, #0
 8013030:	6360      	str	r0, [r4, #52]	; 0x34
 8013032:	b113      	cbz	r3, 801303a <__ssrefill_r+0x24>
 8013034:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013036:	6023      	str	r3, [r4, #0]
 8013038:	bd10      	pop	{r4, pc}
 801303a:	6923      	ldr	r3, [r4, #16]
 801303c:	6023      	str	r3, [r4, #0]
 801303e:	2300      	movs	r3, #0
 8013040:	6063      	str	r3, [r4, #4]
 8013042:	89a3      	ldrh	r3, [r4, #12]
 8013044:	f043 0320 	orr.w	r3, r3, #32
 8013048:	81a3      	strh	r3, [r4, #12]
 801304a:	f04f 30ff 	mov.w	r0, #4294967295
 801304e:	e7f3      	b.n	8013038 <__ssrefill_r+0x22>

08013050 <__ssvfiscanf_r>:
 8013050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013054:	460c      	mov	r4, r1
 8013056:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801305a:	2100      	movs	r1, #0
 801305c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013060:	49a6      	ldr	r1, [pc, #664]	; (80132fc <__ssvfiscanf_r+0x2ac>)
 8013062:	91a0      	str	r1, [sp, #640]	; 0x280
 8013064:	f10d 0804 	add.w	r8, sp, #4
 8013068:	49a5      	ldr	r1, [pc, #660]	; (8013300 <__ssvfiscanf_r+0x2b0>)
 801306a:	4fa6      	ldr	r7, [pc, #664]	; (8013304 <__ssvfiscanf_r+0x2b4>)
 801306c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013308 <__ssvfiscanf_r+0x2b8>
 8013070:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013074:	4606      	mov	r6, r0
 8013076:	91a1      	str	r1, [sp, #644]	; 0x284
 8013078:	9300      	str	r3, [sp, #0]
 801307a:	7813      	ldrb	r3, [r2, #0]
 801307c:	2b00      	cmp	r3, #0
 801307e:	f000 815a 	beq.w	8013336 <__ssvfiscanf_r+0x2e6>
 8013082:	5dd9      	ldrb	r1, [r3, r7]
 8013084:	f011 0108 	ands.w	r1, r1, #8
 8013088:	f102 0501 	add.w	r5, r2, #1
 801308c:	d019      	beq.n	80130c2 <__ssvfiscanf_r+0x72>
 801308e:	6863      	ldr	r3, [r4, #4]
 8013090:	2b00      	cmp	r3, #0
 8013092:	dd0f      	ble.n	80130b4 <__ssvfiscanf_r+0x64>
 8013094:	6823      	ldr	r3, [r4, #0]
 8013096:	781a      	ldrb	r2, [r3, #0]
 8013098:	5cba      	ldrb	r2, [r7, r2]
 801309a:	0712      	lsls	r2, r2, #28
 801309c:	d401      	bmi.n	80130a2 <__ssvfiscanf_r+0x52>
 801309e:	462a      	mov	r2, r5
 80130a0:	e7eb      	b.n	801307a <__ssvfiscanf_r+0x2a>
 80130a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80130a4:	3201      	adds	r2, #1
 80130a6:	9245      	str	r2, [sp, #276]	; 0x114
 80130a8:	6862      	ldr	r2, [r4, #4]
 80130aa:	3301      	adds	r3, #1
 80130ac:	3a01      	subs	r2, #1
 80130ae:	6062      	str	r2, [r4, #4]
 80130b0:	6023      	str	r3, [r4, #0]
 80130b2:	e7ec      	b.n	801308e <__ssvfiscanf_r+0x3e>
 80130b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80130b6:	4621      	mov	r1, r4
 80130b8:	4630      	mov	r0, r6
 80130ba:	4798      	blx	r3
 80130bc:	2800      	cmp	r0, #0
 80130be:	d0e9      	beq.n	8013094 <__ssvfiscanf_r+0x44>
 80130c0:	e7ed      	b.n	801309e <__ssvfiscanf_r+0x4e>
 80130c2:	2b25      	cmp	r3, #37	; 0x25
 80130c4:	d012      	beq.n	80130ec <__ssvfiscanf_r+0x9c>
 80130c6:	469a      	mov	sl, r3
 80130c8:	6863      	ldr	r3, [r4, #4]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	f340 8091 	ble.w	80131f2 <__ssvfiscanf_r+0x1a2>
 80130d0:	6822      	ldr	r2, [r4, #0]
 80130d2:	7813      	ldrb	r3, [r2, #0]
 80130d4:	4553      	cmp	r3, sl
 80130d6:	f040 812e 	bne.w	8013336 <__ssvfiscanf_r+0x2e6>
 80130da:	6863      	ldr	r3, [r4, #4]
 80130dc:	3b01      	subs	r3, #1
 80130de:	6063      	str	r3, [r4, #4]
 80130e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80130e2:	3201      	adds	r2, #1
 80130e4:	3301      	adds	r3, #1
 80130e6:	6022      	str	r2, [r4, #0]
 80130e8:	9345      	str	r3, [sp, #276]	; 0x114
 80130ea:	e7d8      	b.n	801309e <__ssvfiscanf_r+0x4e>
 80130ec:	9141      	str	r1, [sp, #260]	; 0x104
 80130ee:	9143      	str	r1, [sp, #268]	; 0x10c
 80130f0:	7853      	ldrb	r3, [r2, #1]
 80130f2:	2b2a      	cmp	r3, #42	; 0x2a
 80130f4:	bf02      	ittt	eq
 80130f6:	2310      	moveq	r3, #16
 80130f8:	1c95      	addeq	r5, r2, #2
 80130fa:	9341      	streq	r3, [sp, #260]	; 0x104
 80130fc:	220a      	movs	r2, #10
 80130fe:	46aa      	mov	sl, r5
 8013100:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013104:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013108:	2b09      	cmp	r3, #9
 801310a:	d91d      	bls.n	8013148 <__ssvfiscanf_r+0xf8>
 801310c:	487e      	ldr	r0, [pc, #504]	; (8013308 <__ssvfiscanf_r+0x2b8>)
 801310e:	2203      	movs	r2, #3
 8013110:	f7ed f886 	bl	8000220 <memchr>
 8013114:	b140      	cbz	r0, 8013128 <__ssvfiscanf_r+0xd8>
 8013116:	2301      	movs	r3, #1
 8013118:	eba0 0009 	sub.w	r0, r0, r9
 801311c:	fa03 f000 	lsl.w	r0, r3, r0
 8013120:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013122:	4318      	orrs	r0, r3
 8013124:	9041      	str	r0, [sp, #260]	; 0x104
 8013126:	4655      	mov	r5, sl
 8013128:	f815 3b01 	ldrb.w	r3, [r5], #1
 801312c:	2b78      	cmp	r3, #120	; 0x78
 801312e:	d806      	bhi.n	801313e <__ssvfiscanf_r+0xee>
 8013130:	2b57      	cmp	r3, #87	; 0x57
 8013132:	d810      	bhi.n	8013156 <__ssvfiscanf_r+0x106>
 8013134:	2b25      	cmp	r3, #37	; 0x25
 8013136:	d0c6      	beq.n	80130c6 <__ssvfiscanf_r+0x76>
 8013138:	d856      	bhi.n	80131e8 <__ssvfiscanf_r+0x198>
 801313a:	2b00      	cmp	r3, #0
 801313c:	d064      	beq.n	8013208 <__ssvfiscanf_r+0x1b8>
 801313e:	2303      	movs	r3, #3
 8013140:	9347      	str	r3, [sp, #284]	; 0x11c
 8013142:	230a      	movs	r3, #10
 8013144:	9342      	str	r3, [sp, #264]	; 0x108
 8013146:	e071      	b.n	801322c <__ssvfiscanf_r+0x1dc>
 8013148:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801314a:	fb02 1103 	mla	r1, r2, r3, r1
 801314e:	3930      	subs	r1, #48	; 0x30
 8013150:	9143      	str	r1, [sp, #268]	; 0x10c
 8013152:	4655      	mov	r5, sl
 8013154:	e7d3      	b.n	80130fe <__ssvfiscanf_r+0xae>
 8013156:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801315a:	2a20      	cmp	r2, #32
 801315c:	d8ef      	bhi.n	801313e <__ssvfiscanf_r+0xee>
 801315e:	a101      	add	r1, pc, #4	; (adr r1, 8013164 <__ssvfiscanf_r+0x114>)
 8013160:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013164:	08013217 	.word	0x08013217
 8013168:	0801313f 	.word	0x0801313f
 801316c:	0801313f 	.word	0x0801313f
 8013170:	08013275 	.word	0x08013275
 8013174:	0801313f 	.word	0x0801313f
 8013178:	0801313f 	.word	0x0801313f
 801317c:	0801313f 	.word	0x0801313f
 8013180:	0801313f 	.word	0x0801313f
 8013184:	0801313f 	.word	0x0801313f
 8013188:	0801313f 	.word	0x0801313f
 801318c:	0801313f 	.word	0x0801313f
 8013190:	0801328b 	.word	0x0801328b
 8013194:	08013261 	.word	0x08013261
 8013198:	080131ef 	.word	0x080131ef
 801319c:	080131ef 	.word	0x080131ef
 80131a0:	080131ef 	.word	0x080131ef
 80131a4:	0801313f 	.word	0x0801313f
 80131a8:	08013265 	.word	0x08013265
 80131ac:	0801313f 	.word	0x0801313f
 80131b0:	0801313f 	.word	0x0801313f
 80131b4:	0801313f 	.word	0x0801313f
 80131b8:	0801313f 	.word	0x0801313f
 80131bc:	0801329b 	.word	0x0801329b
 80131c0:	0801326d 	.word	0x0801326d
 80131c4:	0801320f 	.word	0x0801320f
 80131c8:	0801313f 	.word	0x0801313f
 80131cc:	0801313f 	.word	0x0801313f
 80131d0:	08013297 	.word	0x08013297
 80131d4:	0801313f 	.word	0x0801313f
 80131d8:	08013261 	.word	0x08013261
 80131dc:	0801313f 	.word	0x0801313f
 80131e0:	0801313f 	.word	0x0801313f
 80131e4:	08013217 	.word	0x08013217
 80131e8:	3b45      	subs	r3, #69	; 0x45
 80131ea:	2b02      	cmp	r3, #2
 80131ec:	d8a7      	bhi.n	801313e <__ssvfiscanf_r+0xee>
 80131ee:	2305      	movs	r3, #5
 80131f0:	e01b      	b.n	801322a <__ssvfiscanf_r+0x1da>
 80131f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80131f4:	4621      	mov	r1, r4
 80131f6:	4630      	mov	r0, r6
 80131f8:	4798      	blx	r3
 80131fa:	2800      	cmp	r0, #0
 80131fc:	f43f af68 	beq.w	80130d0 <__ssvfiscanf_r+0x80>
 8013200:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013202:	2800      	cmp	r0, #0
 8013204:	f040 808d 	bne.w	8013322 <__ssvfiscanf_r+0x2d2>
 8013208:	f04f 30ff 	mov.w	r0, #4294967295
 801320c:	e08f      	b.n	801332e <__ssvfiscanf_r+0x2de>
 801320e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013210:	f042 0220 	orr.w	r2, r2, #32
 8013214:	9241      	str	r2, [sp, #260]	; 0x104
 8013216:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801321c:	9241      	str	r2, [sp, #260]	; 0x104
 801321e:	2210      	movs	r2, #16
 8013220:	2b6f      	cmp	r3, #111	; 0x6f
 8013222:	9242      	str	r2, [sp, #264]	; 0x108
 8013224:	bf34      	ite	cc
 8013226:	2303      	movcc	r3, #3
 8013228:	2304      	movcs	r3, #4
 801322a:	9347      	str	r3, [sp, #284]	; 0x11c
 801322c:	6863      	ldr	r3, [r4, #4]
 801322e:	2b00      	cmp	r3, #0
 8013230:	dd42      	ble.n	80132b8 <__ssvfiscanf_r+0x268>
 8013232:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013234:	0659      	lsls	r1, r3, #25
 8013236:	d404      	bmi.n	8013242 <__ssvfiscanf_r+0x1f2>
 8013238:	6823      	ldr	r3, [r4, #0]
 801323a:	781a      	ldrb	r2, [r3, #0]
 801323c:	5cba      	ldrb	r2, [r7, r2]
 801323e:	0712      	lsls	r2, r2, #28
 8013240:	d441      	bmi.n	80132c6 <__ssvfiscanf_r+0x276>
 8013242:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013244:	2b02      	cmp	r3, #2
 8013246:	dc50      	bgt.n	80132ea <__ssvfiscanf_r+0x29a>
 8013248:	466b      	mov	r3, sp
 801324a:	4622      	mov	r2, r4
 801324c:	a941      	add	r1, sp, #260	; 0x104
 801324e:	4630      	mov	r0, r6
 8013250:	f000 f9d0 	bl	80135f4 <_scanf_chars>
 8013254:	2801      	cmp	r0, #1
 8013256:	d06e      	beq.n	8013336 <__ssvfiscanf_r+0x2e6>
 8013258:	2802      	cmp	r0, #2
 801325a:	f47f af20 	bne.w	801309e <__ssvfiscanf_r+0x4e>
 801325e:	e7cf      	b.n	8013200 <__ssvfiscanf_r+0x1b0>
 8013260:	220a      	movs	r2, #10
 8013262:	e7dd      	b.n	8013220 <__ssvfiscanf_r+0x1d0>
 8013264:	2300      	movs	r3, #0
 8013266:	9342      	str	r3, [sp, #264]	; 0x108
 8013268:	2303      	movs	r3, #3
 801326a:	e7de      	b.n	801322a <__ssvfiscanf_r+0x1da>
 801326c:	2308      	movs	r3, #8
 801326e:	9342      	str	r3, [sp, #264]	; 0x108
 8013270:	2304      	movs	r3, #4
 8013272:	e7da      	b.n	801322a <__ssvfiscanf_r+0x1da>
 8013274:	4629      	mov	r1, r5
 8013276:	4640      	mov	r0, r8
 8013278:	f000 fb3a 	bl	80138f0 <__sccl>
 801327c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801327e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013282:	9341      	str	r3, [sp, #260]	; 0x104
 8013284:	4605      	mov	r5, r0
 8013286:	2301      	movs	r3, #1
 8013288:	e7cf      	b.n	801322a <__ssvfiscanf_r+0x1da>
 801328a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801328c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013290:	9341      	str	r3, [sp, #260]	; 0x104
 8013292:	2300      	movs	r3, #0
 8013294:	e7c9      	b.n	801322a <__ssvfiscanf_r+0x1da>
 8013296:	2302      	movs	r3, #2
 8013298:	e7c7      	b.n	801322a <__ssvfiscanf_r+0x1da>
 801329a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801329c:	06c3      	lsls	r3, r0, #27
 801329e:	f53f aefe 	bmi.w	801309e <__ssvfiscanf_r+0x4e>
 80132a2:	9b00      	ldr	r3, [sp, #0]
 80132a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80132a6:	1d19      	adds	r1, r3, #4
 80132a8:	9100      	str	r1, [sp, #0]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	f010 0f01 	tst.w	r0, #1
 80132b0:	bf14      	ite	ne
 80132b2:	801a      	strhne	r2, [r3, #0]
 80132b4:	601a      	streq	r2, [r3, #0]
 80132b6:	e6f2      	b.n	801309e <__ssvfiscanf_r+0x4e>
 80132b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80132ba:	4621      	mov	r1, r4
 80132bc:	4630      	mov	r0, r6
 80132be:	4798      	blx	r3
 80132c0:	2800      	cmp	r0, #0
 80132c2:	d0b6      	beq.n	8013232 <__ssvfiscanf_r+0x1e2>
 80132c4:	e79c      	b.n	8013200 <__ssvfiscanf_r+0x1b0>
 80132c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80132c8:	3201      	adds	r2, #1
 80132ca:	9245      	str	r2, [sp, #276]	; 0x114
 80132cc:	6862      	ldr	r2, [r4, #4]
 80132ce:	3a01      	subs	r2, #1
 80132d0:	2a00      	cmp	r2, #0
 80132d2:	6062      	str	r2, [r4, #4]
 80132d4:	dd02      	ble.n	80132dc <__ssvfiscanf_r+0x28c>
 80132d6:	3301      	adds	r3, #1
 80132d8:	6023      	str	r3, [r4, #0]
 80132da:	e7ad      	b.n	8013238 <__ssvfiscanf_r+0x1e8>
 80132dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80132de:	4621      	mov	r1, r4
 80132e0:	4630      	mov	r0, r6
 80132e2:	4798      	blx	r3
 80132e4:	2800      	cmp	r0, #0
 80132e6:	d0a7      	beq.n	8013238 <__ssvfiscanf_r+0x1e8>
 80132e8:	e78a      	b.n	8013200 <__ssvfiscanf_r+0x1b0>
 80132ea:	2b04      	cmp	r3, #4
 80132ec:	dc0e      	bgt.n	801330c <__ssvfiscanf_r+0x2bc>
 80132ee:	466b      	mov	r3, sp
 80132f0:	4622      	mov	r2, r4
 80132f2:	a941      	add	r1, sp, #260	; 0x104
 80132f4:	4630      	mov	r0, r6
 80132f6:	f000 f9d7 	bl	80136a8 <_scanf_i>
 80132fa:	e7ab      	b.n	8013254 <__ssvfiscanf_r+0x204>
 80132fc:	08012f9d 	.word	0x08012f9d
 8013300:	08013017 	.word	0x08013017
 8013304:	08015199 	.word	0x08015199
 8013308:	080155f2 	.word	0x080155f2
 801330c:	4b0b      	ldr	r3, [pc, #44]	; (801333c <__ssvfiscanf_r+0x2ec>)
 801330e:	2b00      	cmp	r3, #0
 8013310:	f43f aec5 	beq.w	801309e <__ssvfiscanf_r+0x4e>
 8013314:	466b      	mov	r3, sp
 8013316:	4622      	mov	r2, r4
 8013318:	a941      	add	r1, sp, #260	; 0x104
 801331a:	4630      	mov	r0, r6
 801331c:	f7fb ffe0 	bl	800f2e0 <_scanf_float>
 8013320:	e798      	b.n	8013254 <__ssvfiscanf_r+0x204>
 8013322:	89a3      	ldrh	r3, [r4, #12]
 8013324:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013328:	bf18      	it	ne
 801332a:	f04f 30ff 	movne.w	r0, #4294967295
 801332e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013336:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013338:	e7f9      	b.n	801332e <__ssvfiscanf_r+0x2de>
 801333a:	bf00      	nop
 801333c:	0800f2e1 	.word	0x0800f2e1

08013340 <__sfputc_r>:
 8013340:	6893      	ldr	r3, [r2, #8]
 8013342:	3b01      	subs	r3, #1
 8013344:	2b00      	cmp	r3, #0
 8013346:	b410      	push	{r4}
 8013348:	6093      	str	r3, [r2, #8]
 801334a:	da08      	bge.n	801335e <__sfputc_r+0x1e>
 801334c:	6994      	ldr	r4, [r2, #24]
 801334e:	42a3      	cmp	r3, r4
 8013350:	db01      	blt.n	8013356 <__sfputc_r+0x16>
 8013352:	290a      	cmp	r1, #10
 8013354:	d103      	bne.n	801335e <__sfputc_r+0x1e>
 8013356:	f85d 4b04 	ldr.w	r4, [sp], #4
 801335a:	f7fd b9ed 	b.w	8010738 <__swbuf_r>
 801335e:	6813      	ldr	r3, [r2, #0]
 8013360:	1c58      	adds	r0, r3, #1
 8013362:	6010      	str	r0, [r2, #0]
 8013364:	7019      	strb	r1, [r3, #0]
 8013366:	4608      	mov	r0, r1
 8013368:	f85d 4b04 	ldr.w	r4, [sp], #4
 801336c:	4770      	bx	lr

0801336e <__sfputs_r>:
 801336e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013370:	4606      	mov	r6, r0
 8013372:	460f      	mov	r7, r1
 8013374:	4614      	mov	r4, r2
 8013376:	18d5      	adds	r5, r2, r3
 8013378:	42ac      	cmp	r4, r5
 801337a:	d101      	bne.n	8013380 <__sfputs_r+0x12>
 801337c:	2000      	movs	r0, #0
 801337e:	e007      	b.n	8013390 <__sfputs_r+0x22>
 8013380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013384:	463a      	mov	r2, r7
 8013386:	4630      	mov	r0, r6
 8013388:	f7ff ffda 	bl	8013340 <__sfputc_r>
 801338c:	1c43      	adds	r3, r0, #1
 801338e:	d1f3      	bne.n	8013378 <__sfputs_r+0xa>
 8013390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013394 <_vfiprintf_r>:
 8013394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013398:	460d      	mov	r5, r1
 801339a:	b09d      	sub	sp, #116	; 0x74
 801339c:	4614      	mov	r4, r2
 801339e:	4698      	mov	r8, r3
 80133a0:	4606      	mov	r6, r0
 80133a2:	b118      	cbz	r0, 80133ac <_vfiprintf_r+0x18>
 80133a4:	6983      	ldr	r3, [r0, #24]
 80133a6:	b90b      	cbnz	r3, 80133ac <_vfiprintf_r+0x18>
 80133a8:	f7fe fa3e 	bl	8011828 <__sinit>
 80133ac:	4b89      	ldr	r3, [pc, #548]	; (80135d4 <_vfiprintf_r+0x240>)
 80133ae:	429d      	cmp	r5, r3
 80133b0:	d11b      	bne.n	80133ea <_vfiprintf_r+0x56>
 80133b2:	6875      	ldr	r5, [r6, #4]
 80133b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133b6:	07d9      	lsls	r1, r3, #31
 80133b8:	d405      	bmi.n	80133c6 <_vfiprintf_r+0x32>
 80133ba:	89ab      	ldrh	r3, [r5, #12]
 80133bc:	059a      	lsls	r2, r3, #22
 80133be:	d402      	bmi.n	80133c6 <_vfiprintf_r+0x32>
 80133c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80133c2:	f7fe fe42 	bl	801204a <__retarget_lock_acquire_recursive>
 80133c6:	89ab      	ldrh	r3, [r5, #12]
 80133c8:	071b      	lsls	r3, r3, #28
 80133ca:	d501      	bpl.n	80133d0 <_vfiprintf_r+0x3c>
 80133cc:	692b      	ldr	r3, [r5, #16]
 80133ce:	b9eb      	cbnz	r3, 801340c <_vfiprintf_r+0x78>
 80133d0:	4629      	mov	r1, r5
 80133d2:	4630      	mov	r0, r6
 80133d4:	f7fd fa14 	bl	8010800 <__swsetup_r>
 80133d8:	b1c0      	cbz	r0, 801340c <_vfiprintf_r+0x78>
 80133da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80133dc:	07dc      	lsls	r4, r3, #31
 80133de:	d50e      	bpl.n	80133fe <_vfiprintf_r+0x6a>
 80133e0:	f04f 30ff 	mov.w	r0, #4294967295
 80133e4:	b01d      	add	sp, #116	; 0x74
 80133e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ea:	4b7b      	ldr	r3, [pc, #492]	; (80135d8 <_vfiprintf_r+0x244>)
 80133ec:	429d      	cmp	r5, r3
 80133ee:	d101      	bne.n	80133f4 <_vfiprintf_r+0x60>
 80133f0:	68b5      	ldr	r5, [r6, #8]
 80133f2:	e7df      	b.n	80133b4 <_vfiprintf_r+0x20>
 80133f4:	4b79      	ldr	r3, [pc, #484]	; (80135dc <_vfiprintf_r+0x248>)
 80133f6:	429d      	cmp	r5, r3
 80133f8:	bf08      	it	eq
 80133fa:	68f5      	ldreq	r5, [r6, #12]
 80133fc:	e7da      	b.n	80133b4 <_vfiprintf_r+0x20>
 80133fe:	89ab      	ldrh	r3, [r5, #12]
 8013400:	0598      	lsls	r0, r3, #22
 8013402:	d4ed      	bmi.n	80133e0 <_vfiprintf_r+0x4c>
 8013404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013406:	f7fe fe21 	bl	801204c <__retarget_lock_release_recursive>
 801340a:	e7e9      	b.n	80133e0 <_vfiprintf_r+0x4c>
 801340c:	2300      	movs	r3, #0
 801340e:	9309      	str	r3, [sp, #36]	; 0x24
 8013410:	2320      	movs	r3, #32
 8013412:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013416:	f8cd 800c 	str.w	r8, [sp, #12]
 801341a:	2330      	movs	r3, #48	; 0x30
 801341c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80135e0 <_vfiprintf_r+0x24c>
 8013420:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013424:	f04f 0901 	mov.w	r9, #1
 8013428:	4623      	mov	r3, r4
 801342a:	469a      	mov	sl, r3
 801342c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013430:	b10a      	cbz	r2, 8013436 <_vfiprintf_r+0xa2>
 8013432:	2a25      	cmp	r2, #37	; 0x25
 8013434:	d1f9      	bne.n	801342a <_vfiprintf_r+0x96>
 8013436:	ebba 0b04 	subs.w	fp, sl, r4
 801343a:	d00b      	beq.n	8013454 <_vfiprintf_r+0xc0>
 801343c:	465b      	mov	r3, fp
 801343e:	4622      	mov	r2, r4
 8013440:	4629      	mov	r1, r5
 8013442:	4630      	mov	r0, r6
 8013444:	f7ff ff93 	bl	801336e <__sfputs_r>
 8013448:	3001      	adds	r0, #1
 801344a:	f000 80aa 	beq.w	80135a2 <_vfiprintf_r+0x20e>
 801344e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013450:	445a      	add	r2, fp
 8013452:	9209      	str	r2, [sp, #36]	; 0x24
 8013454:	f89a 3000 	ldrb.w	r3, [sl]
 8013458:	2b00      	cmp	r3, #0
 801345a:	f000 80a2 	beq.w	80135a2 <_vfiprintf_r+0x20e>
 801345e:	2300      	movs	r3, #0
 8013460:	f04f 32ff 	mov.w	r2, #4294967295
 8013464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013468:	f10a 0a01 	add.w	sl, sl, #1
 801346c:	9304      	str	r3, [sp, #16]
 801346e:	9307      	str	r3, [sp, #28]
 8013470:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013474:	931a      	str	r3, [sp, #104]	; 0x68
 8013476:	4654      	mov	r4, sl
 8013478:	2205      	movs	r2, #5
 801347a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801347e:	4858      	ldr	r0, [pc, #352]	; (80135e0 <_vfiprintf_r+0x24c>)
 8013480:	f7ec fece 	bl	8000220 <memchr>
 8013484:	9a04      	ldr	r2, [sp, #16]
 8013486:	b9d8      	cbnz	r0, 80134c0 <_vfiprintf_r+0x12c>
 8013488:	06d1      	lsls	r1, r2, #27
 801348a:	bf44      	itt	mi
 801348c:	2320      	movmi	r3, #32
 801348e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013492:	0713      	lsls	r3, r2, #28
 8013494:	bf44      	itt	mi
 8013496:	232b      	movmi	r3, #43	; 0x2b
 8013498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801349c:	f89a 3000 	ldrb.w	r3, [sl]
 80134a0:	2b2a      	cmp	r3, #42	; 0x2a
 80134a2:	d015      	beq.n	80134d0 <_vfiprintf_r+0x13c>
 80134a4:	9a07      	ldr	r2, [sp, #28]
 80134a6:	4654      	mov	r4, sl
 80134a8:	2000      	movs	r0, #0
 80134aa:	f04f 0c0a 	mov.w	ip, #10
 80134ae:	4621      	mov	r1, r4
 80134b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80134b4:	3b30      	subs	r3, #48	; 0x30
 80134b6:	2b09      	cmp	r3, #9
 80134b8:	d94e      	bls.n	8013558 <_vfiprintf_r+0x1c4>
 80134ba:	b1b0      	cbz	r0, 80134ea <_vfiprintf_r+0x156>
 80134bc:	9207      	str	r2, [sp, #28]
 80134be:	e014      	b.n	80134ea <_vfiprintf_r+0x156>
 80134c0:	eba0 0308 	sub.w	r3, r0, r8
 80134c4:	fa09 f303 	lsl.w	r3, r9, r3
 80134c8:	4313      	orrs	r3, r2
 80134ca:	9304      	str	r3, [sp, #16]
 80134cc:	46a2      	mov	sl, r4
 80134ce:	e7d2      	b.n	8013476 <_vfiprintf_r+0xe2>
 80134d0:	9b03      	ldr	r3, [sp, #12]
 80134d2:	1d19      	adds	r1, r3, #4
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	9103      	str	r1, [sp, #12]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	bfbb      	ittet	lt
 80134dc:	425b      	neglt	r3, r3
 80134de:	f042 0202 	orrlt.w	r2, r2, #2
 80134e2:	9307      	strge	r3, [sp, #28]
 80134e4:	9307      	strlt	r3, [sp, #28]
 80134e6:	bfb8      	it	lt
 80134e8:	9204      	strlt	r2, [sp, #16]
 80134ea:	7823      	ldrb	r3, [r4, #0]
 80134ec:	2b2e      	cmp	r3, #46	; 0x2e
 80134ee:	d10c      	bne.n	801350a <_vfiprintf_r+0x176>
 80134f0:	7863      	ldrb	r3, [r4, #1]
 80134f2:	2b2a      	cmp	r3, #42	; 0x2a
 80134f4:	d135      	bne.n	8013562 <_vfiprintf_r+0x1ce>
 80134f6:	9b03      	ldr	r3, [sp, #12]
 80134f8:	1d1a      	adds	r2, r3, #4
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	9203      	str	r2, [sp, #12]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	bfb8      	it	lt
 8013502:	f04f 33ff 	movlt.w	r3, #4294967295
 8013506:	3402      	adds	r4, #2
 8013508:	9305      	str	r3, [sp, #20]
 801350a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80135f0 <_vfiprintf_r+0x25c>
 801350e:	7821      	ldrb	r1, [r4, #0]
 8013510:	2203      	movs	r2, #3
 8013512:	4650      	mov	r0, sl
 8013514:	f7ec fe84 	bl	8000220 <memchr>
 8013518:	b140      	cbz	r0, 801352c <_vfiprintf_r+0x198>
 801351a:	2340      	movs	r3, #64	; 0x40
 801351c:	eba0 000a 	sub.w	r0, r0, sl
 8013520:	fa03 f000 	lsl.w	r0, r3, r0
 8013524:	9b04      	ldr	r3, [sp, #16]
 8013526:	4303      	orrs	r3, r0
 8013528:	3401      	adds	r4, #1
 801352a:	9304      	str	r3, [sp, #16]
 801352c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013530:	482c      	ldr	r0, [pc, #176]	; (80135e4 <_vfiprintf_r+0x250>)
 8013532:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013536:	2206      	movs	r2, #6
 8013538:	f7ec fe72 	bl	8000220 <memchr>
 801353c:	2800      	cmp	r0, #0
 801353e:	d03f      	beq.n	80135c0 <_vfiprintf_r+0x22c>
 8013540:	4b29      	ldr	r3, [pc, #164]	; (80135e8 <_vfiprintf_r+0x254>)
 8013542:	bb1b      	cbnz	r3, 801358c <_vfiprintf_r+0x1f8>
 8013544:	9b03      	ldr	r3, [sp, #12]
 8013546:	3307      	adds	r3, #7
 8013548:	f023 0307 	bic.w	r3, r3, #7
 801354c:	3308      	adds	r3, #8
 801354e:	9303      	str	r3, [sp, #12]
 8013550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013552:	443b      	add	r3, r7
 8013554:	9309      	str	r3, [sp, #36]	; 0x24
 8013556:	e767      	b.n	8013428 <_vfiprintf_r+0x94>
 8013558:	fb0c 3202 	mla	r2, ip, r2, r3
 801355c:	460c      	mov	r4, r1
 801355e:	2001      	movs	r0, #1
 8013560:	e7a5      	b.n	80134ae <_vfiprintf_r+0x11a>
 8013562:	2300      	movs	r3, #0
 8013564:	3401      	adds	r4, #1
 8013566:	9305      	str	r3, [sp, #20]
 8013568:	4619      	mov	r1, r3
 801356a:	f04f 0c0a 	mov.w	ip, #10
 801356e:	4620      	mov	r0, r4
 8013570:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013574:	3a30      	subs	r2, #48	; 0x30
 8013576:	2a09      	cmp	r2, #9
 8013578:	d903      	bls.n	8013582 <_vfiprintf_r+0x1ee>
 801357a:	2b00      	cmp	r3, #0
 801357c:	d0c5      	beq.n	801350a <_vfiprintf_r+0x176>
 801357e:	9105      	str	r1, [sp, #20]
 8013580:	e7c3      	b.n	801350a <_vfiprintf_r+0x176>
 8013582:	fb0c 2101 	mla	r1, ip, r1, r2
 8013586:	4604      	mov	r4, r0
 8013588:	2301      	movs	r3, #1
 801358a:	e7f0      	b.n	801356e <_vfiprintf_r+0x1da>
 801358c:	ab03      	add	r3, sp, #12
 801358e:	9300      	str	r3, [sp, #0]
 8013590:	462a      	mov	r2, r5
 8013592:	4b16      	ldr	r3, [pc, #88]	; (80135ec <_vfiprintf_r+0x258>)
 8013594:	a904      	add	r1, sp, #16
 8013596:	4630      	mov	r0, r6
 8013598:	f7fb fad8 	bl	800eb4c <_printf_float>
 801359c:	4607      	mov	r7, r0
 801359e:	1c78      	adds	r0, r7, #1
 80135a0:	d1d6      	bne.n	8013550 <_vfiprintf_r+0x1bc>
 80135a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80135a4:	07d9      	lsls	r1, r3, #31
 80135a6:	d405      	bmi.n	80135b4 <_vfiprintf_r+0x220>
 80135a8:	89ab      	ldrh	r3, [r5, #12]
 80135aa:	059a      	lsls	r2, r3, #22
 80135ac:	d402      	bmi.n	80135b4 <_vfiprintf_r+0x220>
 80135ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80135b0:	f7fe fd4c 	bl	801204c <__retarget_lock_release_recursive>
 80135b4:	89ab      	ldrh	r3, [r5, #12]
 80135b6:	065b      	lsls	r3, r3, #25
 80135b8:	f53f af12 	bmi.w	80133e0 <_vfiprintf_r+0x4c>
 80135bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80135be:	e711      	b.n	80133e4 <_vfiprintf_r+0x50>
 80135c0:	ab03      	add	r3, sp, #12
 80135c2:	9300      	str	r3, [sp, #0]
 80135c4:	462a      	mov	r2, r5
 80135c6:	4b09      	ldr	r3, [pc, #36]	; (80135ec <_vfiprintf_r+0x258>)
 80135c8:	a904      	add	r1, sp, #16
 80135ca:	4630      	mov	r0, r6
 80135cc:	f7fb fd62 	bl	800f094 <_printf_i>
 80135d0:	e7e4      	b.n	801359c <_vfiprintf_r+0x208>
 80135d2:	bf00      	nop
 80135d4:	080153d8 	.word	0x080153d8
 80135d8:	080153f8 	.word	0x080153f8
 80135dc:	080153b8 	.word	0x080153b8
 80135e0:	080155ec 	.word	0x080155ec
 80135e4:	080155f6 	.word	0x080155f6
 80135e8:	0800eb4d 	.word	0x0800eb4d
 80135ec:	0801336f 	.word	0x0801336f
 80135f0:	080155f2 	.word	0x080155f2

080135f4 <_scanf_chars>:
 80135f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135f8:	4615      	mov	r5, r2
 80135fa:	688a      	ldr	r2, [r1, #8]
 80135fc:	4680      	mov	r8, r0
 80135fe:	460c      	mov	r4, r1
 8013600:	b932      	cbnz	r2, 8013610 <_scanf_chars+0x1c>
 8013602:	698a      	ldr	r2, [r1, #24]
 8013604:	2a00      	cmp	r2, #0
 8013606:	bf0c      	ite	eq
 8013608:	2201      	moveq	r2, #1
 801360a:	f04f 32ff 	movne.w	r2, #4294967295
 801360e:	608a      	str	r2, [r1, #8]
 8013610:	6822      	ldr	r2, [r4, #0]
 8013612:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80136a4 <_scanf_chars+0xb0>
 8013616:	06d1      	lsls	r1, r2, #27
 8013618:	bf5f      	itttt	pl
 801361a:	681a      	ldrpl	r2, [r3, #0]
 801361c:	1d11      	addpl	r1, r2, #4
 801361e:	6019      	strpl	r1, [r3, #0]
 8013620:	6816      	ldrpl	r6, [r2, #0]
 8013622:	2700      	movs	r7, #0
 8013624:	69a0      	ldr	r0, [r4, #24]
 8013626:	b188      	cbz	r0, 801364c <_scanf_chars+0x58>
 8013628:	2801      	cmp	r0, #1
 801362a:	d107      	bne.n	801363c <_scanf_chars+0x48>
 801362c:	682a      	ldr	r2, [r5, #0]
 801362e:	7811      	ldrb	r1, [r2, #0]
 8013630:	6962      	ldr	r2, [r4, #20]
 8013632:	5c52      	ldrb	r2, [r2, r1]
 8013634:	b952      	cbnz	r2, 801364c <_scanf_chars+0x58>
 8013636:	2f00      	cmp	r7, #0
 8013638:	d031      	beq.n	801369e <_scanf_chars+0xaa>
 801363a:	e022      	b.n	8013682 <_scanf_chars+0x8e>
 801363c:	2802      	cmp	r0, #2
 801363e:	d120      	bne.n	8013682 <_scanf_chars+0x8e>
 8013640:	682b      	ldr	r3, [r5, #0]
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013648:	071b      	lsls	r3, r3, #28
 801364a:	d41a      	bmi.n	8013682 <_scanf_chars+0x8e>
 801364c:	6823      	ldr	r3, [r4, #0]
 801364e:	06da      	lsls	r2, r3, #27
 8013650:	bf5e      	ittt	pl
 8013652:	682b      	ldrpl	r3, [r5, #0]
 8013654:	781b      	ldrbpl	r3, [r3, #0]
 8013656:	f806 3b01 	strbpl.w	r3, [r6], #1
 801365a:	682a      	ldr	r2, [r5, #0]
 801365c:	686b      	ldr	r3, [r5, #4]
 801365e:	3201      	adds	r2, #1
 8013660:	602a      	str	r2, [r5, #0]
 8013662:	68a2      	ldr	r2, [r4, #8]
 8013664:	3b01      	subs	r3, #1
 8013666:	3a01      	subs	r2, #1
 8013668:	606b      	str	r3, [r5, #4]
 801366a:	3701      	adds	r7, #1
 801366c:	60a2      	str	r2, [r4, #8]
 801366e:	b142      	cbz	r2, 8013682 <_scanf_chars+0x8e>
 8013670:	2b00      	cmp	r3, #0
 8013672:	dcd7      	bgt.n	8013624 <_scanf_chars+0x30>
 8013674:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013678:	4629      	mov	r1, r5
 801367a:	4640      	mov	r0, r8
 801367c:	4798      	blx	r3
 801367e:	2800      	cmp	r0, #0
 8013680:	d0d0      	beq.n	8013624 <_scanf_chars+0x30>
 8013682:	6823      	ldr	r3, [r4, #0]
 8013684:	f013 0310 	ands.w	r3, r3, #16
 8013688:	d105      	bne.n	8013696 <_scanf_chars+0xa2>
 801368a:	68e2      	ldr	r2, [r4, #12]
 801368c:	3201      	adds	r2, #1
 801368e:	60e2      	str	r2, [r4, #12]
 8013690:	69a2      	ldr	r2, [r4, #24]
 8013692:	b102      	cbz	r2, 8013696 <_scanf_chars+0xa2>
 8013694:	7033      	strb	r3, [r6, #0]
 8013696:	6923      	ldr	r3, [r4, #16]
 8013698:	443b      	add	r3, r7
 801369a:	6123      	str	r3, [r4, #16]
 801369c:	2000      	movs	r0, #0
 801369e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136a2:	bf00      	nop
 80136a4:	08015199 	.word	0x08015199

080136a8 <_scanf_i>:
 80136a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ac:	4698      	mov	r8, r3
 80136ae:	4b76      	ldr	r3, [pc, #472]	; (8013888 <_scanf_i+0x1e0>)
 80136b0:	460c      	mov	r4, r1
 80136b2:	4682      	mov	sl, r0
 80136b4:	4616      	mov	r6, r2
 80136b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80136ba:	b087      	sub	sp, #28
 80136bc:	ab03      	add	r3, sp, #12
 80136be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80136c2:	4b72      	ldr	r3, [pc, #456]	; (801388c <_scanf_i+0x1e4>)
 80136c4:	69a1      	ldr	r1, [r4, #24]
 80136c6:	4a72      	ldr	r2, [pc, #456]	; (8013890 <_scanf_i+0x1e8>)
 80136c8:	2903      	cmp	r1, #3
 80136ca:	bf18      	it	ne
 80136cc:	461a      	movne	r2, r3
 80136ce:	68a3      	ldr	r3, [r4, #8]
 80136d0:	9201      	str	r2, [sp, #4]
 80136d2:	1e5a      	subs	r2, r3, #1
 80136d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80136d8:	bf88      	it	hi
 80136da:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80136de:	4627      	mov	r7, r4
 80136e0:	bf82      	ittt	hi
 80136e2:	eb03 0905 	addhi.w	r9, r3, r5
 80136e6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80136ea:	60a3      	strhi	r3, [r4, #8]
 80136ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 80136f0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80136f4:	bf98      	it	ls
 80136f6:	f04f 0900 	movls.w	r9, #0
 80136fa:	6023      	str	r3, [r4, #0]
 80136fc:	463d      	mov	r5, r7
 80136fe:	f04f 0b00 	mov.w	fp, #0
 8013702:	6831      	ldr	r1, [r6, #0]
 8013704:	ab03      	add	r3, sp, #12
 8013706:	7809      	ldrb	r1, [r1, #0]
 8013708:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801370c:	2202      	movs	r2, #2
 801370e:	f7ec fd87 	bl	8000220 <memchr>
 8013712:	b328      	cbz	r0, 8013760 <_scanf_i+0xb8>
 8013714:	f1bb 0f01 	cmp.w	fp, #1
 8013718:	d159      	bne.n	80137ce <_scanf_i+0x126>
 801371a:	6862      	ldr	r2, [r4, #4]
 801371c:	b92a      	cbnz	r2, 801372a <_scanf_i+0x82>
 801371e:	6822      	ldr	r2, [r4, #0]
 8013720:	2308      	movs	r3, #8
 8013722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013726:	6063      	str	r3, [r4, #4]
 8013728:	6022      	str	r2, [r4, #0]
 801372a:	6822      	ldr	r2, [r4, #0]
 801372c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013730:	6022      	str	r2, [r4, #0]
 8013732:	68a2      	ldr	r2, [r4, #8]
 8013734:	1e51      	subs	r1, r2, #1
 8013736:	60a1      	str	r1, [r4, #8]
 8013738:	b192      	cbz	r2, 8013760 <_scanf_i+0xb8>
 801373a:	6832      	ldr	r2, [r6, #0]
 801373c:	1c51      	adds	r1, r2, #1
 801373e:	6031      	str	r1, [r6, #0]
 8013740:	7812      	ldrb	r2, [r2, #0]
 8013742:	f805 2b01 	strb.w	r2, [r5], #1
 8013746:	6872      	ldr	r2, [r6, #4]
 8013748:	3a01      	subs	r2, #1
 801374a:	2a00      	cmp	r2, #0
 801374c:	6072      	str	r2, [r6, #4]
 801374e:	dc07      	bgt.n	8013760 <_scanf_i+0xb8>
 8013750:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013754:	4631      	mov	r1, r6
 8013756:	4650      	mov	r0, sl
 8013758:	4790      	blx	r2
 801375a:	2800      	cmp	r0, #0
 801375c:	f040 8085 	bne.w	801386a <_scanf_i+0x1c2>
 8013760:	f10b 0b01 	add.w	fp, fp, #1
 8013764:	f1bb 0f03 	cmp.w	fp, #3
 8013768:	d1cb      	bne.n	8013702 <_scanf_i+0x5a>
 801376a:	6863      	ldr	r3, [r4, #4]
 801376c:	b90b      	cbnz	r3, 8013772 <_scanf_i+0xca>
 801376e:	230a      	movs	r3, #10
 8013770:	6063      	str	r3, [r4, #4]
 8013772:	6863      	ldr	r3, [r4, #4]
 8013774:	4947      	ldr	r1, [pc, #284]	; (8013894 <_scanf_i+0x1ec>)
 8013776:	6960      	ldr	r0, [r4, #20]
 8013778:	1ac9      	subs	r1, r1, r3
 801377a:	f000 f8b9 	bl	80138f0 <__sccl>
 801377e:	f04f 0b00 	mov.w	fp, #0
 8013782:	68a3      	ldr	r3, [r4, #8]
 8013784:	6822      	ldr	r2, [r4, #0]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d03d      	beq.n	8013806 <_scanf_i+0x15e>
 801378a:	6831      	ldr	r1, [r6, #0]
 801378c:	6960      	ldr	r0, [r4, #20]
 801378e:	f891 c000 	ldrb.w	ip, [r1]
 8013792:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013796:	2800      	cmp	r0, #0
 8013798:	d035      	beq.n	8013806 <_scanf_i+0x15e>
 801379a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801379e:	d124      	bne.n	80137ea <_scanf_i+0x142>
 80137a0:	0510      	lsls	r0, r2, #20
 80137a2:	d522      	bpl.n	80137ea <_scanf_i+0x142>
 80137a4:	f10b 0b01 	add.w	fp, fp, #1
 80137a8:	f1b9 0f00 	cmp.w	r9, #0
 80137ac:	d003      	beq.n	80137b6 <_scanf_i+0x10e>
 80137ae:	3301      	adds	r3, #1
 80137b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80137b4:	60a3      	str	r3, [r4, #8]
 80137b6:	6873      	ldr	r3, [r6, #4]
 80137b8:	3b01      	subs	r3, #1
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	6073      	str	r3, [r6, #4]
 80137be:	dd1b      	ble.n	80137f8 <_scanf_i+0x150>
 80137c0:	6833      	ldr	r3, [r6, #0]
 80137c2:	3301      	adds	r3, #1
 80137c4:	6033      	str	r3, [r6, #0]
 80137c6:	68a3      	ldr	r3, [r4, #8]
 80137c8:	3b01      	subs	r3, #1
 80137ca:	60a3      	str	r3, [r4, #8]
 80137cc:	e7d9      	b.n	8013782 <_scanf_i+0xda>
 80137ce:	f1bb 0f02 	cmp.w	fp, #2
 80137d2:	d1ae      	bne.n	8013732 <_scanf_i+0x8a>
 80137d4:	6822      	ldr	r2, [r4, #0]
 80137d6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80137da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80137de:	d1bf      	bne.n	8013760 <_scanf_i+0xb8>
 80137e0:	2310      	movs	r3, #16
 80137e2:	6063      	str	r3, [r4, #4]
 80137e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80137e8:	e7a2      	b.n	8013730 <_scanf_i+0x88>
 80137ea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80137ee:	6022      	str	r2, [r4, #0]
 80137f0:	780b      	ldrb	r3, [r1, #0]
 80137f2:	f805 3b01 	strb.w	r3, [r5], #1
 80137f6:	e7de      	b.n	80137b6 <_scanf_i+0x10e>
 80137f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80137fc:	4631      	mov	r1, r6
 80137fe:	4650      	mov	r0, sl
 8013800:	4798      	blx	r3
 8013802:	2800      	cmp	r0, #0
 8013804:	d0df      	beq.n	80137c6 <_scanf_i+0x11e>
 8013806:	6823      	ldr	r3, [r4, #0]
 8013808:	05db      	lsls	r3, r3, #23
 801380a:	d50d      	bpl.n	8013828 <_scanf_i+0x180>
 801380c:	42bd      	cmp	r5, r7
 801380e:	d909      	bls.n	8013824 <_scanf_i+0x17c>
 8013810:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013814:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013818:	4632      	mov	r2, r6
 801381a:	4650      	mov	r0, sl
 801381c:	4798      	blx	r3
 801381e:	f105 39ff 	add.w	r9, r5, #4294967295
 8013822:	464d      	mov	r5, r9
 8013824:	42bd      	cmp	r5, r7
 8013826:	d02d      	beq.n	8013884 <_scanf_i+0x1dc>
 8013828:	6822      	ldr	r2, [r4, #0]
 801382a:	f012 0210 	ands.w	r2, r2, #16
 801382e:	d113      	bne.n	8013858 <_scanf_i+0x1b0>
 8013830:	702a      	strb	r2, [r5, #0]
 8013832:	6863      	ldr	r3, [r4, #4]
 8013834:	9e01      	ldr	r6, [sp, #4]
 8013836:	4639      	mov	r1, r7
 8013838:	4650      	mov	r0, sl
 801383a:	47b0      	blx	r6
 801383c:	6821      	ldr	r1, [r4, #0]
 801383e:	f8d8 3000 	ldr.w	r3, [r8]
 8013842:	f011 0f20 	tst.w	r1, #32
 8013846:	d013      	beq.n	8013870 <_scanf_i+0x1c8>
 8013848:	1d1a      	adds	r2, r3, #4
 801384a:	f8c8 2000 	str.w	r2, [r8]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	6018      	str	r0, [r3, #0]
 8013852:	68e3      	ldr	r3, [r4, #12]
 8013854:	3301      	adds	r3, #1
 8013856:	60e3      	str	r3, [r4, #12]
 8013858:	1bed      	subs	r5, r5, r7
 801385a:	44ab      	add	fp, r5
 801385c:	6925      	ldr	r5, [r4, #16]
 801385e:	445d      	add	r5, fp
 8013860:	6125      	str	r5, [r4, #16]
 8013862:	2000      	movs	r0, #0
 8013864:	b007      	add	sp, #28
 8013866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801386a:	f04f 0b00 	mov.w	fp, #0
 801386e:	e7ca      	b.n	8013806 <_scanf_i+0x15e>
 8013870:	1d1a      	adds	r2, r3, #4
 8013872:	f8c8 2000 	str.w	r2, [r8]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	f011 0f01 	tst.w	r1, #1
 801387c:	bf14      	ite	ne
 801387e:	8018      	strhne	r0, [r3, #0]
 8013880:	6018      	streq	r0, [r3, #0]
 8013882:	e7e6      	b.n	8013852 <_scanf_i+0x1aa>
 8013884:	2001      	movs	r0, #1
 8013886:	e7ed      	b.n	8013864 <_scanf_i+0x1bc>
 8013888:	080149c4 	.word	0x080149c4
 801388c:	08013a6d 	.word	0x08013a6d
 8013890:	08010735 	.word	0x08010735
 8013894:	08015616 	.word	0x08015616

08013898 <_read_r>:
 8013898:	b538      	push	{r3, r4, r5, lr}
 801389a:	4d07      	ldr	r5, [pc, #28]	; (80138b8 <_read_r+0x20>)
 801389c:	4604      	mov	r4, r0
 801389e:	4608      	mov	r0, r1
 80138a0:	4611      	mov	r1, r2
 80138a2:	2200      	movs	r2, #0
 80138a4:	602a      	str	r2, [r5, #0]
 80138a6:	461a      	mov	r2, r3
 80138a8:	f7f0 fcfa 	bl	80042a0 <_read>
 80138ac:	1c43      	adds	r3, r0, #1
 80138ae:	d102      	bne.n	80138b6 <_read_r+0x1e>
 80138b0:	682b      	ldr	r3, [r5, #0]
 80138b2:	b103      	cbz	r3, 80138b6 <_read_r+0x1e>
 80138b4:	6023      	str	r3, [r4, #0]
 80138b6:	bd38      	pop	{r3, r4, r5, pc}
 80138b8:	2000314c 	.word	0x2000314c
 80138bc:	00000000 	.word	0x00000000

080138c0 <nan>:
 80138c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80138c8 <nan+0x8>
 80138c4:	4770      	bx	lr
 80138c6:	bf00      	nop
 80138c8:	00000000 	.word	0x00000000
 80138cc:	7ff80000 	.word	0x7ff80000

080138d0 <_sbrk_r>:
 80138d0:	b538      	push	{r3, r4, r5, lr}
 80138d2:	4d06      	ldr	r5, [pc, #24]	; (80138ec <_sbrk_r+0x1c>)
 80138d4:	2300      	movs	r3, #0
 80138d6:	4604      	mov	r4, r0
 80138d8:	4608      	mov	r0, r1
 80138da:	602b      	str	r3, [r5, #0]
 80138dc:	f7f0 fd32 	bl	8004344 <_sbrk>
 80138e0:	1c43      	adds	r3, r0, #1
 80138e2:	d102      	bne.n	80138ea <_sbrk_r+0x1a>
 80138e4:	682b      	ldr	r3, [r5, #0]
 80138e6:	b103      	cbz	r3, 80138ea <_sbrk_r+0x1a>
 80138e8:	6023      	str	r3, [r4, #0]
 80138ea:	bd38      	pop	{r3, r4, r5, pc}
 80138ec:	2000314c 	.word	0x2000314c

080138f0 <__sccl>:
 80138f0:	b570      	push	{r4, r5, r6, lr}
 80138f2:	780b      	ldrb	r3, [r1, #0]
 80138f4:	4604      	mov	r4, r0
 80138f6:	2b5e      	cmp	r3, #94	; 0x5e
 80138f8:	bf0b      	itete	eq
 80138fa:	784b      	ldrbeq	r3, [r1, #1]
 80138fc:	1c48      	addne	r0, r1, #1
 80138fe:	1c88      	addeq	r0, r1, #2
 8013900:	2200      	movne	r2, #0
 8013902:	bf08      	it	eq
 8013904:	2201      	moveq	r2, #1
 8013906:	1e61      	subs	r1, r4, #1
 8013908:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801390c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013910:	42a9      	cmp	r1, r5
 8013912:	d1fb      	bne.n	801390c <__sccl+0x1c>
 8013914:	b90b      	cbnz	r3, 801391a <__sccl+0x2a>
 8013916:	3801      	subs	r0, #1
 8013918:	bd70      	pop	{r4, r5, r6, pc}
 801391a:	f082 0201 	eor.w	r2, r2, #1
 801391e:	54e2      	strb	r2, [r4, r3]
 8013920:	4605      	mov	r5, r0
 8013922:	4628      	mov	r0, r5
 8013924:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013928:	292d      	cmp	r1, #45	; 0x2d
 801392a:	d006      	beq.n	801393a <__sccl+0x4a>
 801392c:	295d      	cmp	r1, #93	; 0x5d
 801392e:	d0f3      	beq.n	8013918 <__sccl+0x28>
 8013930:	b909      	cbnz	r1, 8013936 <__sccl+0x46>
 8013932:	4628      	mov	r0, r5
 8013934:	e7f0      	b.n	8013918 <__sccl+0x28>
 8013936:	460b      	mov	r3, r1
 8013938:	e7f1      	b.n	801391e <__sccl+0x2e>
 801393a:	786e      	ldrb	r6, [r5, #1]
 801393c:	2e5d      	cmp	r6, #93	; 0x5d
 801393e:	d0fa      	beq.n	8013936 <__sccl+0x46>
 8013940:	42b3      	cmp	r3, r6
 8013942:	dcf8      	bgt.n	8013936 <__sccl+0x46>
 8013944:	3502      	adds	r5, #2
 8013946:	4619      	mov	r1, r3
 8013948:	3101      	adds	r1, #1
 801394a:	428e      	cmp	r6, r1
 801394c:	5462      	strb	r2, [r4, r1]
 801394e:	dcfb      	bgt.n	8013948 <__sccl+0x58>
 8013950:	1af1      	subs	r1, r6, r3
 8013952:	3901      	subs	r1, #1
 8013954:	1c58      	adds	r0, r3, #1
 8013956:	42b3      	cmp	r3, r6
 8013958:	bfa8      	it	ge
 801395a:	2100      	movge	r1, #0
 801395c:	1843      	adds	r3, r0, r1
 801395e:	e7e0      	b.n	8013922 <__sccl+0x32>

08013960 <strncmp>:
 8013960:	b510      	push	{r4, lr}
 8013962:	b17a      	cbz	r2, 8013984 <strncmp+0x24>
 8013964:	4603      	mov	r3, r0
 8013966:	3901      	subs	r1, #1
 8013968:	1884      	adds	r4, r0, r2
 801396a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801396e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013972:	4290      	cmp	r0, r2
 8013974:	d101      	bne.n	801397a <strncmp+0x1a>
 8013976:	42a3      	cmp	r3, r4
 8013978:	d101      	bne.n	801397e <strncmp+0x1e>
 801397a:	1a80      	subs	r0, r0, r2
 801397c:	bd10      	pop	{r4, pc}
 801397e:	2800      	cmp	r0, #0
 8013980:	d1f3      	bne.n	801396a <strncmp+0xa>
 8013982:	e7fa      	b.n	801397a <strncmp+0x1a>
 8013984:	4610      	mov	r0, r2
 8013986:	e7f9      	b.n	801397c <strncmp+0x1c>

08013988 <_strtoul_l.constprop.0>:
 8013988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801398c:	4f36      	ldr	r7, [pc, #216]	; (8013a68 <_strtoul_l.constprop.0+0xe0>)
 801398e:	4686      	mov	lr, r0
 8013990:	460d      	mov	r5, r1
 8013992:	4628      	mov	r0, r5
 8013994:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013998:	5de6      	ldrb	r6, [r4, r7]
 801399a:	f016 0608 	ands.w	r6, r6, #8
 801399e:	d1f8      	bne.n	8013992 <_strtoul_l.constprop.0+0xa>
 80139a0:	2c2d      	cmp	r4, #45	; 0x2d
 80139a2:	d12f      	bne.n	8013a04 <_strtoul_l.constprop.0+0x7c>
 80139a4:	782c      	ldrb	r4, [r5, #0]
 80139a6:	2601      	movs	r6, #1
 80139a8:	1c85      	adds	r5, r0, #2
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d057      	beq.n	8013a5e <_strtoul_l.constprop.0+0xd6>
 80139ae:	2b10      	cmp	r3, #16
 80139b0:	d109      	bne.n	80139c6 <_strtoul_l.constprop.0+0x3e>
 80139b2:	2c30      	cmp	r4, #48	; 0x30
 80139b4:	d107      	bne.n	80139c6 <_strtoul_l.constprop.0+0x3e>
 80139b6:	7828      	ldrb	r0, [r5, #0]
 80139b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80139bc:	2858      	cmp	r0, #88	; 0x58
 80139be:	d149      	bne.n	8013a54 <_strtoul_l.constprop.0+0xcc>
 80139c0:	786c      	ldrb	r4, [r5, #1]
 80139c2:	2310      	movs	r3, #16
 80139c4:	3502      	adds	r5, #2
 80139c6:	f04f 38ff 	mov.w	r8, #4294967295
 80139ca:	2700      	movs	r7, #0
 80139cc:	fbb8 f8f3 	udiv	r8, r8, r3
 80139d0:	fb03 f908 	mul.w	r9, r3, r8
 80139d4:	ea6f 0909 	mvn.w	r9, r9
 80139d8:	4638      	mov	r0, r7
 80139da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80139de:	f1bc 0f09 	cmp.w	ip, #9
 80139e2:	d814      	bhi.n	8013a0e <_strtoul_l.constprop.0+0x86>
 80139e4:	4664      	mov	r4, ip
 80139e6:	42a3      	cmp	r3, r4
 80139e8:	dd22      	ble.n	8013a30 <_strtoul_l.constprop.0+0xa8>
 80139ea:	2f00      	cmp	r7, #0
 80139ec:	db1d      	blt.n	8013a2a <_strtoul_l.constprop.0+0xa2>
 80139ee:	4580      	cmp	r8, r0
 80139f0:	d31b      	bcc.n	8013a2a <_strtoul_l.constprop.0+0xa2>
 80139f2:	d101      	bne.n	80139f8 <_strtoul_l.constprop.0+0x70>
 80139f4:	45a1      	cmp	r9, r4
 80139f6:	db18      	blt.n	8013a2a <_strtoul_l.constprop.0+0xa2>
 80139f8:	fb00 4003 	mla	r0, r0, r3, r4
 80139fc:	2701      	movs	r7, #1
 80139fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a02:	e7ea      	b.n	80139da <_strtoul_l.constprop.0+0x52>
 8013a04:	2c2b      	cmp	r4, #43	; 0x2b
 8013a06:	bf04      	itt	eq
 8013a08:	782c      	ldrbeq	r4, [r5, #0]
 8013a0a:	1c85      	addeq	r5, r0, #2
 8013a0c:	e7cd      	b.n	80139aa <_strtoul_l.constprop.0+0x22>
 8013a0e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013a12:	f1bc 0f19 	cmp.w	ip, #25
 8013a16:	d801      	bhi.n	8013a1c <_strtoul_l.constprop.0+0x94>
 8013a18:	3c37      	subs	r4, #55	; 0x37
 8013a1a:	e7e4      	b.n	80139e6 <_strtoul_l.constprop.0+0x5e>
 8013a1c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013a20:	f1bc 0f19 	cmp.w	ip, #25
 8013a24:	d804      	bhi.n	8013a30 <_strtoul_l.constprop.0+0xa8>
 8013a26:	3c57      	subs	r4, #87	; 0x57
 8013a28:	e7dd      	b.n	80139e6 <_strtoul_l.constprop.0+0x5e>
 8013a2a:	f04f 37ff 	mov.w	r7, #4294967295
 8013a2e:	e7e6      	b.n	80139fe <_strtoul_l.constprop.0+0x76>
 8013a30:	2f00      	cmp	r7, #0
 8013a32:	da07      	bge.n	8013a44 <_strtoul_l.constprop.0+0xbc>
 8013a34:	2322      	movs	r3, #34	; 0x22
 8013a36:	f8ce 3000 	str.w	r3, [lr]
 8013a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a3e:	b932      	cbnz	r2, 8013a4e <_strtoul_l.constprop.0+0xc6>
 8013a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a44:	b106      	cbz	r6, 8013a48 <_strtoul_l.constprop.0+0xc0>
 8013a46:	4240      	negs	r0, r0
 8013a48:	2a00      	cmp	r2, #0
 8013a4a:	d0f9      	beq.n	8013a40 <_strtoul_l.constprop.0+0xb8>
 8013a4c:	b107      	cbz	r7, 8013a50 <_strtoul_l.constprop.0+0xc8>
 8013a4e:	1e69      	subs	r1, r5, #1
 8013a50:	6011      	str	r1, [r2, #0]
 8013a52:	e7f5      	b.n	8013a40 <_strtoul_l.constprop.0+0xb8>
 8013a54:	2430      	movs	r4, #48	; 0x30
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d1b5      	bne.n	80139c6 <_strtoul_l.constprop.0+0x3e>
 8013a5a:	2308      	movs	r3, #8
 8013a5c:	e7b3      	b.n	80139c6 <_strtoul_l.constprop.0+0x3e>
 8013a5e:	2c30      	cmp	r4, #48	; 0x30
 8013a60:	d0a9      	beq.n	80139b6 <_strtoul_l.constprop.0+0x2e>
 8013a62:	230a      	movs	r3, #10
 8013a64:	e7af      	b.n	80139c6 <_strtoul_l.constprop.0+0x3e>
 8013a66:	bf00      	nop
 8013a68:	08015199 	.word	0x08015199

08013a6c <_strtoul_r>:
 8013a6c:	f7ff bf8c 	b.w	8013988 <_strtoul_l.constprop.0>

08013a70 <__submore>:
 8013a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a74:	460c      	mov	r4, r1
 8013a76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013a78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a7c:	4299      	cmp	r1, r3
 8013a7e:	d11d      	bne.n	8013abc <__submore+0x4c>
 8013a80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013a84:	f7ff f8ba 	bl	8012bfc <_malloc_r>
 8013a88:	b918      	cbnz	r0, 8013a92 <__submore+0x22>
 8013a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a96:	63a3      	str	r3, [r4, #56]	; 0x38
 8013a98:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013a9c:	6360      	str	r0, [r4, #52]	; 0x34
 8013a9e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013aa2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013aa6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013aaa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013aae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013ab2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013ab6:	6020      	str	r0, [r4, #0]
 8013ab8:	2000      	movs	r0, #0
 8013aba:	e7e8      	b.n	8013a8e <__submore+0x1e>
 8013abc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013abe:	0077      	lsls	r7, r6, #1
 8013ac0:	463a      	mov	r2, r7
 8013ac2:	f000 f87b 	bl	8013bbc <_realloc_r>
 8013ac6:	4605      	mov	r5, r0
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	d0de      	beq.n	8013a8a <__submore+0x1a>
 8013acc:	eb00 0806 	add.w	r8, r0, r6
 8013ad0:	4601      	mov	r1, r0
 8013ad2:	4632      	mov	r2, r6
 8013ad4:	4640      	mov	r0, r8
 8013ad6:	f7fa ff69 	bl	800e9ac <memcpy>
 8013ada:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013ade:	f8c4 8000 	str.w	r8, [r4]
 8013ae2:	e7e9      	b.n	8013ab8 <__submore+0x48>

08013ae4 <__ascii_wctomb>:
 8013ae4:	b149      	cbz	r1, 8013afa <__ascii_wctomb+0x16>
 8013ae6:	2aff      	cmp	r2, #255	; 0xff
 8013ae8:	bf85      	ittet	hi
 8013aea:	238a      	movhi	r3, #138	; 0x8a
 8013aec:	6003      	strhi	r3, [r0, #0]
 8013aee:	700a      	strbls	r2, [r1, #0]
 8013af0:	f04f 30ff 	movhi.w	r0, #4294967295
 8013af4:	bf98      	it	ls
 8013af6:	2001      	movls	r0, #1
 8013af8:	4770      	bx	lr
 8013afa:	4608      	mov	r0, r1
 8013afc:	4770      	bx	lr
	...

08013b00 <__assert_func>:
 8013b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b02:	4614      	mov	r4, r2
 8013b04:	461a      	mov	r2, r3
 8013b06:	4b09      	ldr	r3, [pc, #36]	; (8013b2c <__assert_func+0x2c>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	4605      	mov	r5, r0
 8013b0c:	68d8      	ldr	r0, [r3, #12]
 8013b0e:	b14c      	cbz	r4, 8013b24 <__assert_func+0x24>
 8013b10:	4b07      	ldr	r3, [pc, #28]	; (8013b30 <__assert_func+0x30>)
 8013b12:	9100      	str	r1, [sp, #0]
 8013b14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013b18:	4906      	ldr	r1, [pc, #24]	; (8013b34 <__assert_func+0x34>)
 8013b1a:	462b      	mov	r3, r5
 8013b1c:	f000 f80e 	bl	8013b3c <fiprintf>
 8013b20:	f000 f87b 	bl	8013c1a <abort>
 8013b24:	4b04      	ldr	r3, [pc, #16]	; (8013b38 <__assert_func+0x38>)
 8013b26:	461c      	mov	r4, r3
 8013b28:	e7f3      	b.n	8013b12 <__assert_func+0x12>
 8013b2a:	bf00      	nop
 8013b2c:	20000110 	.word	0x20000110
 8013b30:	08015618 	.word	0x08015618
 8013b34:	08015625 	.word	0x08015625
 8013b38:	08015653 	.word	0x08015653

08013b3c <fiprintf>:
 8013b3c:	b40e      	push	{r1, r2, r3}
 8013b3e:	b503      	push	{r0, r1, lr}
 8013b40:	4601      	mov	r1, r0
 8013b42:	ab03      	add	r3, sp, #12
 8013b44:	4805      	ldr	r0, [pc, #20]	; (8013b5c <fiprintf+0x20>)
 8013b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b4a:	6800      	ldr	r0, [r0, #0]
 8013b4c:	9301      	str	r3, [sp, #4]
 8013b4e:	f7ff fc21 	bl	8013394 <_vfiprintf_r>
 8013b52:	b002      	add	sp, #8
 8013b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b58:	b003      	add	sp, #12
 8013b5a:	4770      	bx	lr
 8013b5c:	20000110 	.word	0x20000110

08013b60 <_fstat_r>:
 8013b60:	b538      	push	{r3, r4, r5, lr}
 8013b62:	4d07      	ldr	r5, [pc, #28]	; (8013b80 <_fstat_r+0x20>)
 8013b64:	2300      	movs	r3, #0
 8013b66:	4604      	mov	r4, r0
 8013b68:	4608      	mov	r0, r1
 8013b6a:	4611      	mov	r1, r2
 8013b6c:	602b      	str	r3, [r5, #0]
 8013b6e:	f7f0 fbc0 	bl	80042f2 <_fstat>
 8013b72:	1c43      	adds	r3, r0, #1
 8013b74:	d102      	bne.n	8013b7c <_fstat_r+0x1c>
 8013b76:	682b      	ldr	r3, [r5, #0]
 8013b78:	b103      	cbz	r3, 8013b7c <_fstat_r+0x1c>
 8013b7a:	6023      	str	r3, [r4, #0]
 8013b7c:	bd38      	pop	{r3, r4, r5, pc}
 8013b7e:	bf00      	nop
 8013b80:	2000314c 	.word	0x2000314c

08013b84 <_isatty_r>:
 8013b84:	b538      	push	{r3, r4, r5, lr}
 8013b86:	4d06      	ldr	r5, [pc, #24]	; (8013ba0 <_isatty_r+0x1c>)
 8013b88:	2300      	movs	r3, #0
 8013b8a:	4604      	mov	r4, r0
 8013b8c:	4608      	mov	r0, r1
 8013b8e:	602b      	str	r3, [r5, #0]
 8013b90:	f7f0 fbbf 	bl	8004312 <_isatty>
 8013b94:	1c43      	adds	r3, r0, #1
 8013b96:	d102      	bne.n	8013b9e <_isatty_r+0x1a>
 8013b98:	682b      	ldr	r3, [r5, #0]
 8013b9a:	b103      	cbz	r3, 8013b9e <_isatty_r+0x1a>
 8013b9c:	6023      	str	r3, [r4, #0]
 8013b9e:	bd38      	pop	{r3, r4, r5, pc}
 8013ba0:	2000314c 	.word	0x2000314c

08013ba4 <__malloc_lock>:
 8013ba4:	4801      	ldr	r0, [pc, #4]	; (8013bac <__malloc_lock+0x8>)
 8013ba6:	f7fe ba50 	b.w	801204a <__retarget_lock_acquire_recursive>
 8013baa:	bf00      	nop
 8013bac:	20003140 	.word	0x20003140

08013bb0 <__malloc_unlock>:
 8013bb0:	4801      	ldr	r0, [pc, #4]	; (8013bb8 <__malloc_unlock+0x8>)
 8013bb2:	f7fe ba4b 	b.w	801204c <__retarget_lock_release_recursive>
 8013bb6:	bf00      	nop
 8013bb8:	20003140 	.word	0x20003140

08013bbc <_realloc_r>:
 8013bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc0:	4680      	mov	r8, r0
 8013bc2:	4614      	mov	r4, r2
 8013bc4:	460e      	mov	r6, r1
 8013bc6:	b921      	cbnz	r1, 8013bd2 <_realloc_r+0x16>
 8013bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bcc:	4611      	mov	r1, r2
 8013bce:	f7ff b815 	b.w	8012bfc <_malloc_r>
 8013bd2:	b92a      	cbnz	r2, 8013be0 <_realloc_r+0x24>
 8013bd4:	f7fe ffa6 	bl	8012b24 <_free_r>
 8013bd8:	4625      	mov	r5, r4
 8013bda:	4628      	mov	r0, r5
 8013bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013be0:	f000 f822 	bl	8013c28 <_malloc_usable_size_r>
 8013be4:	4284      	cmp	r4, r0
 8013be6:	4607      	mov	r7, r0
 8013be8:	d802      	bhi.n	8013bf0 <_realloc_r+0x34>
 8013bea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013bee:	d812      	bhi.n	8013c16 <_realloc_r+0x5a>
 8013bf0:	4621      	mov	r1, r4
 8013bf2:	4640      	mov	r0, r8
 8013bf4:	f7ff f802 	bl	8012bfc <_malloc_r>
 8013bf8:	4605      	mov	r5, r0
 8013bfa:	2800      	cmp	r0, #0
 8013bfc:	d0ed      	beq.n	8013bda <_realloc_r+0x1e>
 8013bfe:	42bc      	cmp	r4, r7
 8013c00:	4622      	mov	r2, r4
 8013c02:	4631      	mov	r1, r6
 8013c04:	bf28      	it	cs
 8013c06:	463a      	movcs	r2, r7
 8013c08:	f7fa fed0 	bl	800e9ac <memcpy>
 8013c0c:	4631      	mov	r1, r6
 8013c0e:	4640      	mov	r0, r8
 8013c10:	f7fe ff88 	bl	8012b24 <_free_r>
 8013c14:	e7e1      	b.n	8013bda <_realloc_r+0x1e>
 8013c16:	4635      	mov	r5, r6
 8013c18:	e7df      	b.n	8013bda <_realloc_r+0x1e>

08013c1a <abort>:
 8013c1a:	b508      	push	{r3, lr}
 8013c1c:	2006      	movs	r0, #6
 8013c1e:	f000 f833 	bl	8013c88 <raise>
 8013c22:	2001      	movs	r0, #1
 8013c24:	f7f0 fb32 	bl	800428c <_exit>

08013c28 <_malloc_usable_size_r>:
 8013c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c2c:	1f18      	subs	r0, r3, #4
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	bfbc      	itt	lt
 8013c32:	580b      	ldrlt	r3, [r1, r0]
 8013c34:	18c0      	addlt	r0, r0, r3
 8013c36:	4770      	bx	lr

08013c38 <_raise_r>:
 8013c38:	291f      	cmp	r1, #31
 8013c3a:	b538      	push	{r3, r4, r5, lr}
 8013c3c:	4604      	mov	r4, r0
 8013c3e:	460d      	mov	r5, r1
 8013c40:	d904      	bls.n	8013c4c <_raise_r+0x14>
 8013c42:	2316      	movs	r3, #22
 8013c44:	6003      	str	r3, [r0, #0]
 8013c46:	f04f 30ff 	mov.w	r0, #4294967295
 8013c4a:	bd38      	pop	{r3, r4, r5, pc}
 8013c4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013c4e:	b112      	cbz	r2, 8013c56 <_raise_r+0x1e>
 8013c50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c54:	b94b      	cbnz	r3, 8013c6a <_raise_r+0x32>
 8013c56:	4620      	mov	r0, r4
 8013c58:	f000 f830 	bl	8013cbc <_getpid_r>
 8013c5c:	462a      	mov	r2, r5
 8013c5e:	4601      	mov	r1, r0
 8013c60:	4620      	mov	r0, r4
 8013c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c66:	f000 b817 	b.w	8013c98 <_kill_r>
 8013c6a:	2b01      	cmp	r3, #1
 8013c6c:	d00a      	beq.n	8013c84 <_raise_r+0x4c>
 8013c6e:	1c59      	adds	r1, r3, #1
 8013c70:	d103      	bne.n	8013c7a <_raise_r+0x42>
 8013c72:	2316      	movs	r3, #22
 8013c74:	6003      	str	r3, [r0, #0]
 8013c76:	2001      	movs	r0, #1
 8013c78:	e7e7      	b.n	8013c4a <_raise_r+0x12>
 8013c7a:	2400      	movs	r4, #0
 8013c7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013c80:	4628      	mov	r0, r5
 8013c82:	4798      	blx	r3
 8013c84:	2000      	movs	r0, #0
 8013c86:	e7e0      	b.n	8013c4a <_raise_r+0x12>

08013c88 <raise>:
 8013c88:	4b02      	ldr	r3, [pc, #8]	; (8013c94 <raise+0xc>)
 8013c8a:	4601      	mov	r1, r0
 8013c8c:	6818      	ldr	r0, [r3, #0]
 8013c8e:	f7ff bfd3 	b.w	8013c38 <_raise_r>
 8013c92:	bf00      	nop
 8013c94:	20000110 	.word	0x20000110

08013c98 <_kill_r>:
 8013c98:	b538      	push	{r3, r4, r5, lr}
 8013c9a:	4d07      	ldr	r5, [pc, #28]	; (8013cb8 <_kill_r+0x20>)
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	4604      	mov	r4, r0
 8013ca0:	4608      	mov	r0, r1
 8013ca2:	4611      	mov	r1, r2
 8013ca4:	602b      	str	r3, [r5, #0]
 8013ca6:	f7f0 fae1 	bl	800426c <_kill>
 8013caa:	1c43      	adds	r3, r0, #1
 8013cac:	d102      	bne.n	8013cb4 <_kill_r+0x1c>
 8013cae:	682b      	ldr	r3, [r5, #0]
 8013cb0:	b103      	cbz	r3, 8013cb4 <_kill_r+0x1c>
 8013cb2:	6023      	str	r3, [r4, #0]
 8013cb4:	bd38      	pop	{r3, r4, r5, pc}
 8013cb6:	bf00      	nop
 8013cb8:	2000314c 	.word	0x2000314c

08013cbc <_getpid_r>:
 8013cbc:	f7f0 bace 	b.w	800425c <_getpid>

08013cc0 <_init>:
 8013cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cc2:	bf00      	nop
 8013cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cc6:	bc08      	pop	{r3}
 8013cc8:	469e      	mov	lr, r3
 8013cca:	4770      	bx	lr

08013ccc <_fini>:
 8013ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cce:	bf00      	nop
 8013cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cd2:	bc08      	pop	{r3}
 8013cd4:	469e      	mov	lr, r3
 8013cd6:	4770      	bx	lr
