
LFDI Tuning Control Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013db8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001394  08013f68  08013f68  00023f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080152fc  080152fc  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  080152fc  080152fc  000252fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015304  08015304  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015304  08015304  00025304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015308  08015308  00025308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  0801530c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302e4  2**0
                  CONTENTS
 10 .bss          00002ed8  200002e8  200002e8  000302e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200031c0  200031c0  000302e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020f16  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e3f  00000000  00000000  0005122a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a78  00000000  00000000  00056070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001838  00000000  00000000  00057ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a314  00000000  00000000  00059320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002394a  00000000  00000000  00083634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0e09  00000000  00000000  000a6f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00187d87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008708  00000000  00000000  00187dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002e8 	.word	0x200002e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013f50 	.word	0x08013f50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002ec 	.word	0x200002ec
 80001ec:	08013f50 	.word	0x08013f50

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <CameraController_InitStruct>:
#include "CameraController.h"


//Initalize the Camera Structure
void CameraController_InitStruct(struct sCameraController *pCameraController, struct sDAC_Channel *pDAC)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
    pCameraController->pDAC = pDAC;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	601a      	str	r2, [r3, #0]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <Compensator_InitStruct>:




//Initalize the Structure of the Compensator
void Compensator_InitStruct(struct sCompensator* s, struct sTMP117 *t,struct sDAC_Channel *c){
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	  //is the Channel enabled
	  s->Enable = false;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
	  //Should we be tryying to Compensate to a specific Wavelength
	  s->compensate = false;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2235 	strb.w	r2, [r3, #565]	; 0x235
	  //Use the Average stored in the TMP117 struct or the last temperature
	  s->useAverage = false;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2236 	strb.w	r2, [r3, #566]	; 0x236

	  //Wavelength to Compensate to
	  s->wavelength =  0;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	  //if we are not using the auto compensation what should this be outputting
	  s->voltage = 0;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	s->Channel = *c;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001094:	ca07      	ldmia	r2, {r0, r1, r2}
 8001096:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	s->Sensor = *t;
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 730a 	mov.w	r3, #552	; 0x228
 80010a6:	461a      	mov	r2, r3
 80010a8:	f00d fdc8 	bl	800ec3c <memcpy>

	return;
 80010ac:	bf00      	nop
}
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <DAC_InitStruct>:
//Reference Voltage scales the Ouput Voltage
float REFERENCE_VOLTAGE = 3.3;


//
void DAC_InitStruct(struct sDAC* s, SPI_HandleTypeDef* hspi){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	
	s->spi = hspi;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	601a      	str	r2, [r3, #0]
	Set_Config(s);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f849 	bl	800115c <Set_Config>
	Set_Max_Peak_To_Peak_Voltage(s, 0);
 80010ca:	2100      	movs	r1, #0
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f9b1 	bl	8001434 <Set_Max_Peak_To_Peak_Voltage>
	/* USER CODE BEGIN 1 */
	//Set all DAC Channels Up. Should probably be put into TCB init
	for (int i = 0; i < 6; i++){
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	e039      	b.n	800114c <DAC_InitStruct+0x98>
		s->DAC_Channels[i].DAC_number = i;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	b2d8      	uxtb	r0, r3
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	3318      	adds	r3, #24
 80010ec:	4602      	mov	r2, r0
 80010ee:	701a      	strb	r2, [r3, #0]
		s->DAC_Channels[i].upper_bound = 0x7FFF;
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	3314      	adds	r3, #20
 8001100:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001104:	801a      	strh	r2, [r3, #0]
		s->DAC_Channels[i].lower_bound = 0x7FFF;
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	3316      	adds	r3, #22
 8001116:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800111a:	801a      	strh	r2, [r3, #0]
		s->DAC_Channels[i].enabled = true;
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	331a      	adds	r3, #26
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
		s->DAC_Channels[i].max_peak2peak = s->max_peak2peak;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6919      	ldr	r1, [r3, #16]
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4403      	add	r3, r0
 8001142:	331c      	adds	r3, #28
 8001144:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < 6; i++){
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3301      	adds	r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b05      	cmp	r3, #5
 8001150:	ddc2      	ble.n	80010d8 <DAC_InitStruct+0x24>
	}

}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <Set_Config>:
//@brief: This function will set a configuration value to the configuration register
//@param s: The DAC struct to use
//@return: None
void Set_Config(struct sDAC* s){
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	uint8_t Data[3] = {0x00, 0x00, 0x00};
 8001164:	4a30      	ldr	r2, [pc, #192]	; (8001228 <Set_Config+0xcc>)
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	4611      	mov	r1, r2
 800116e:	8019      	strh	r1, [r3, #0]
 8001170:	3302      	adds	r3, #2
 8001172:	0c12      	lsrs	r2, r2, #16
 8001174:	701a      	strb	r2, [r3, #0]
	uint8_t read_command[3] = {READ|CONFIG, 0x00, 0x00};
 8001176:	4b2d      	ldr	r3, [pc, #180]	; (800122c <Set_Config+0xd0>)
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <Set_Config+0xd4>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4313      	orrs	r3, r2
 8001180:	b2db      	uxtb	r3, r3
 8001182:	743b      	strb	r3, [r7, #16]
 8001184:	2300      	movs	r3, #0
 8001186:	747b      	strb	r3, [r7, #17]
 8001188:	2300      	movs	r3, #0
 800118a:	74bb      	strb	r3, [r7, #18]
	
	Hardware_Reset(s);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f923 	bl	80013d8 <Hardware_Reset>
	//Make sure SCE is 0. This will make it so that the DAC will use the Values direclty written to it
	//rather than trying to use the individual offset and gain of each register to re-adjust
	//the value
	//Gain_A = 1 -> gain is set to 4xVref GAIN_A = 0 -> gain is set to 6xVref
	
	uint8_t tx_data[3] = {WRITE|CONFIG, AB, 0x00};
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <Set_Config+0xd8>)
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <Set_Config+0xd4>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4313      	orrs	r3, r2
 800119c:	b2db      	uxtb	r3, r3
 800119e:	733b      	strb	r3, [r7, #12]
 80011a0:	4b25      	ldr	r3, [pc, #148]	; (8001238 <Set_Config+0xdc>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	737b      	strb	r3, [r7, #13]
 80011a6:	2300      	movs	r3, #0
 80011a8:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4619      	mov	r1, r3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f843 	bl	800123c <Send_Command>
	Send_Command(s, read_command);
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4619      	mov	r1, r3
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f83d 	bl	800123c <Send_Command>
	Recieve_Data(s, Data);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f85b 	bl	8001284 <Recieve_Data>
	
	//if Data is the same as tx_data then the command was successful
	if(Data[1] == tx_data[1] && Data[2] == tx_data[2]){
 80011ce:	7d7a      	ldrb	r2, [r7, #21]
 80011d0:	7b7b      	ldrb	r3, [r7, #13]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d117      	bne.n	8001206 <Set_Config+0xaa>
 80011d6:	7dba      	ldrb	r2, [r7, #22]
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d113      	bne.n	8001206 <Set_Config+0xaa>
		s->config = (Data[1] << 8) | Data[2];
 80011de:	7d7b      	ldrb	r3, [r7, #21]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	7dbb      	ldrb	r3, [r7, #22]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	809a      	strh	r2, [r3, #4]
		s->Configured = true;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	729a      	strb	r2, [r3, #10]
		s->State = DAC_STATE_OK;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2204      	movs	r2, #4
 80011fc:	72da      	strb	r2, [r3, #11]
		s->Ready = true;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	731a      	strb	r2, [r3, #12]
 8001204:	e00c      	b.n	8001220 <Set_Config+0xc4>
	}else{
		s->State = DAC_STATE_INITFAILED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	72da      	strb	r2, [r3, #11]
		s->Ready = false;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	731a      	strb	r2, [r3, #12]
		s->Errors++;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	89db      	ldrh	r3, [r3, #14]
 8001216:	3301      	adds	r3, #1
 8001218:	b29a      	uxth	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	81da      	strh	r2, [r3, #14]
	}
			

}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	08013f68 	.word	0x08013f68
 800122c:	20000000 	.word	0x20000000
 8001230:	20000305 	.word	0x20000305
 8001234:	20000304 	.word	0x20000304
 8001238:	20000002 	.word	0x20000002

0800123c <Send_Command>:
//        The second byte is the MSB of the register
//        The third byte is the LSB of the register
//@param: spi: The spi handle to use
//@param: command: The command to send
//@return: none
void Send_Command(struct sDAC* s, uint8_t* Command){
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f8aa 	bl	80013a0 <Set_nCS_high>
	hal_status = HAL_SPI_Transmit(s->spi, Command, 3, 1);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	f008 fa42 	bl	80096de <HAL_SPI_Transmit>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]
	while (!(s->spi->Instance->SR & SPI_SR_TXE));
 800125e:	bf00      	nop
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f7      	beq.n	8001260 <Send_Command+0x24>
	Set_nCS_high(true);
 8001270:	2001      	movs	r0, #1
 8001272:	f000 f895 	bl	80013a0 <Set_nCS_high>
	Delay_us(10);
 8001276:	200a      	movs	r0, #10
 8001278:	f002 f8c8 	bl	800340c <Delay_us>
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <Recieve_Data>:

//@brief: This function recieves data from the DAC and stores it in the data array
//@param: spi: The spi handle
//@param: Data: buffer to store the data in
//@return: None
void Recieve_Data(struct sDAC* s, uint8_t* Data){
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af02      	add	r7, sp, #8
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 800128e:	2000      	movs	r0, #0
 8001290:	f000 f886 	bl	80013a0 <Set_nCS_high>
	hal_status = HAL_SPI_TransmitReceive(s->spi,NOP_Send, Data, 3, 100);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	2364      	movs	r3, #100	; 0x64
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2303      	movs	r3, #3
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	490b      	ldr	r1, [pc, #44]	; (80012d0 <Recieve_Data+0x4c>)
 80012a2:	f008 fb58 	bl	8009956 <HAL_SPI_TransmitReceive>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
	while ((s->spi->Instance->SR & SPI_SR_RXNE));
 80012aa:	bf00      	nop
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f7      	bne.n	80012ac <Recieve_Data+0x28>
	Set_nCS_high(true);
 80012bc:	2001      	movs	r0, #1
 80012be:	f000 f86f 	bl	80013a0 <Set_nCS_high>
	Delay_us(10);
 80012c2:	200a      	movs	r0, #10
 80012c4:	f002 f8a2 	bl	800340c <Delay_us>

}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000004 	.word	0x20000004

080012d4 <Set_DAC_Value>:
//@brief: This function sets the value of the given dac
//@param: DAC_Num: The DAC number to set the offset of
//@param: val: The value to set the dac to
//@param spi: The spi handle to use
//@return: None
void Set_DAC_Value(struct sDAC* s, uint8_t DAC_Num, uint16_t val){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	70fb      	strb	r3, [r7, #3]
 80012e0:	4613      	mov	r3, r2
 80012e2:	803b      	strh	r3, [r7, #0]
	//Make sure DAC is between 0 and 7
	if(DAC_Num > 7){
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	2b07      	cmp	r3, #7
 80012e8:	d819      	bhi.n	800131e <Set_DAC_Value+0x4a>
		return;
	}
	uint8_t DAC_REG = Set_DAC0+DAC_Num;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <Set_DAC_Value+0x54>)
 80012ec:	781a      	ldrb	r2, [r3, #0]
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	4413      	add	r3, r2
 80012f2:	73fb      	strb	r3, [r7, #15]
	//Set the DAC to the correct value by adding the DAC number to the Set_DAC0 command
	uint8_t tx_data[3] = {WRITE|DAC_REG, (val >> 8), (val & 0xFF)};
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <Set_DAC_Value+0x58>)
 80012f6:	781a      	ldrb	r2, [r3, #0]
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	733b      	strb	r3, [r7, #12]
 8001300:	883b      	ldrh	r3, [r7, #0]
 8001302:	0a1b      	lsrs	r3, r3, #8
 8001304:	b29b      	uxth	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	737b      	strb	r3, [r7, #13]
 800130a:	883b      	ldrh	r3, [r7, #0]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4619      	mov	r1, r3
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ff90 	bl	800123c <Send_Command>
 800131c:	e000      	b.n	8001320 <Set_DAC_Value+0x4c>
		return;
 800131e:	bf00      	nop
	
}
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000001 	.word	0x20000001
 800132c:	20000304 	.word	0x20000304

08001330 <Set_nLDAC_high>:
}

//@brief: This function sets the nLDAC pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nLDAC_high(bool HIGH){
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <Set_nLDAC_high+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <Set_nLDAC_high+0x34>)
 8001348:	f003 fd3a 	bl	8004dc0 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
	}
}
 800134c:	e005      	b.n	800135a <Set_nLDAC_high+0x2a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <Set_nLDAC_high+0x34>)
 8001356:	f003 fd33 	bl	8004dc0 <HAL_GPIO_WritePin>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40020c00 	.word	0x40020c00

08001368 <Set_nRST_high>:
}

//@brief: This function sets the nRST pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nRST_high(bool HIGH){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <Set_nRST_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <Set_nRST_high+0x34>)
 8001380:	f003 fd1e 	bl	8004dc0 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
	}

}
 8001384:	e005      	b.n	8001392 <Set_nRST_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <Set_nRST_high+0x34>)
 800138e:	f003 fd17 	bl	8004dc0 <HAL_GPIO_WritePin>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000

080013a0 <Set_nCS_high>:
}

//@brief: This function sets the nCS pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nCS_high(bool HIGH){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <Set_nCS_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <Set_nCS_high+0x34>)
 80013b8:	f003 fd02 	bl	8004dc0 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
	}

}
 80013bc:	e005      	b.n	80013ca <Set_nCS_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <Set_nCS_high+0x34>)
 80013c6:	f003 fcfb 	bl	8004dc0 <HAL_GPIO_WritePin>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000

080013d8 <Hardware_Reset>:
	return state;
}


//Reset the DAC Values using the nRST Pin
void Hardware_Reset(struct sDAC* s){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	Set_nRST_high(false);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff ffc1 	bl	8001368 <Set_nRST_high>
	Delay_us(10);
 80013e6:	200a      	movs	r0, #10
 80013e8:	f002 f810 	bl	800340c <Delay_us>
	Set_nRST_high(true);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff ffbb 	bl	8001368 <Set_nRST_high>
	Delay_us(10);
 80013f2:	200a      	movs	r0, #10
 80013f4:	f002 f80a 	bl	800340c <Delay_us>
	s->State = DAC_STATE_UNKNOWN;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	72da      	strb	r2, [r3, #11]
	s->Ready= false;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	731a      	strb	r2, [r3, #12]
	s->Errors = 0;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	81da      	strh	r2, [r3, #14]
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <Syncronous_Update>:


//Syncronous Update of LDAC using the nLDAC Pin NOTE: Only Needed if nLDAC is tied High
void Syncronous_Update(void){
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
	Set_nLDAC_high(false);
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff ff8a 	bl	8001330 <Set_nLDAC_high>
	Delay_us(10);
 800141c:	200a      	movs	r0, #10
 800141e:	f001 fff5 	bl	800340c <Delay_us>
	Set_nLDAC_high(true);
 8001422:	2001      	movs	r0, #1
 8001424:	f7ff ff84 	bl	8001330 <Set_nLDAC_high>
	Delay_us(10);
 8001428:	200a      	movs	r0, #10
 800142a:	f001 ffef 	bl	800340c <Delay_us>
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <Set_Max_Peak_To_Peak_Voltage>:


//@brief: This function calculates the max peak to peak voltage that can be achieved
void Set_Max_Peak_To_Peak_Voltage(struct sDAC* s, bool Gain){
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	70fb      	strb	r3, [r7, #3]
	//The max Voltage is 11.2V so we need to scale the voltage to fit in 16 bits
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	if(Gain){
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00a      	beq.n	800145c <Set_Max_Peak_To_Peak_Voltage+0x28>
		s->max_peak2peak = REFERENCE_VOLTAGE*4;
 8001446:	4b0d      	ldr	r3, [pc, #52]	; (800147c <Set_Max_Peak_To_Peak_Voltage+0x48>)
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	edc3 7a04 	vstr	s15, [r3, #16]
	}else
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
	return;
 800145a:	e00a      	b.n	8001472 <Set_Max_Peak_To_Peak_Voltage+0x3e>
		s->max_peak2peak = REFERENCE_VOLTAGE*6;
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <Set_Max_Peak_To_Peak_Voltage+0x48>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	edc3 7a04 	vstr	s15, [r3, #16]
	return;
 8001470:	bf00      	nop
}
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	20000008 	.word	0x20000008

08001480 <PID_InitStruct>:
 */

#include "pid.h"

void PID_InitStruct(struct sPID* s)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->Config.Kp = 0.0f;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
  s->Config.Ki = 0.0f;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
  s->Config.Kd = 0.0f;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
  s->Config.Li = 1.0f;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80014b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014b6:	601a      	str	r2, [r3, #0]
  s->Config.TargetP = -273.0f;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80014be:	4a22      	ldr	r2, [pc, #136]	; (8001548 <PID_InitStruct+0xc8>)
 80014c0:	601a      	str	r2, [r3, #0]
  s->Config.Enabled = false;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
  s->Config.History = 16;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2210      	movs	r2, #16
 80014ce:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
  s->DeltaT = 0.013f;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014d8:	4a1c      	ldr	r2, [pc, #112]	; (800154c <PID_InitStruct+0xcc>)
 80014da:	601a      	str	r2, [r3, #0]
  s->IntegratorCount = 0;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  for (i=0;i<255;i++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	e009      	b.n	80014fe <PID_InitStruct+0x7e>
    s->LastP[i]=0.0f;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
  for (i=0;i<255;i++)
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	3301      	adds	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	2bff      	cmp	r3, #255	; 0xff
 8001502:	d1f2      	bne.n	80014ea <PID_InitStruct+0x6a>
  s->Effort = 0.0f;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
  s->Ep = 0.0f;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
  s->Ei = 0.0f;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
  s->Ed = 0.0f;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
  s->Config.Frequency = 200;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	22c8      	movs	r2, #200	; 0xc8
 8001538:	f8a3 242e 	strh.w	r2, [r3, #1070]	; 0x42e
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	c3888000 	.word	0xc3888000
 800154c:	3c54fdf4 	.word	0x3c54fdf4

08001550 <PID_SavePoint>:

void PID_SavePoint(struct sPID* s, float p)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	ed87 0a00 	vstr	s0, [r7]
  uint8_t i;
  for (i=(s->Config.History-1); i>0; i--)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8001562:	3b01      	subs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
 8001566:	e00d      	b.n	8001584 <PID_SavePoint+0x34>
    s->LastP[i] = s->LastP[i-1];
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	1e5a      	subs	r2, r3, #1
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	0092      	lsls	r2, r2, #2
 8001572:	440a      	add	r2, r1
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	601a      	str	r2, [r3, #0]
  for (i=(s->Config.History-1); i>0; i--)
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	3b01      	subs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1ee      	bne.n	8001568 <PID_SavePoint+0x18>
  s->LastP[0] = p;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	601a      	str	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <PID_SumError>:

float PID_SumError(struct sPID* s)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  s->IntegratorCount++;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80015aa:	3301      	adds	r3, #1
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  if (s->IntegratorCount < s->Config.History)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 2414 	ldrb.w	r2, [r3, #1044]	; 0x414
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d202      	bcs.n	80015ca <PID_SumError+0x2e>
    return 0;
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	e05b      	b.n	8001682 <PID_SumError+0xe6>
  else
    s->IntegratorCount = s->Config.History;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 242d 	ldrb.w	r2, [r3, #1069]	; 0x42d
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  float err = 0;
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  for (i=0; i<(s->Config.History); i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	e015      	b.n	800160e <PID_SumError+0x72>
    err += (s->Config.TargetP - s->LastP[i]);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80015e8:	ed93 7a00 	vldr	s14, [r3]
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001604:	edc7 7a02 	vstr	s15, [r7, #8]
  for (i=0; i<(s->Config.History); i++)
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	3301      	adds	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 342d 	ldrb.w	r3, [r3, #1069]	; 0x42d
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	429a      	cmp	r2, r3
 8001618:	d3e3      	bcc.n	80015e2 <PID_SumError+0x46>
  err *= (s->Config.Ki);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ed97 7a02 	vldr	s14, [r7, #8]
 8001628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162c:	edc7 7a02 	vstr	s15, [r7, #8]
  if (err < (-s->Config.Li))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	eef1 7a67 	vneg.f32	s15, s15
 800163e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	d508      	bpl.n	800165e <PID_SumError+0xc2>
    err = -(s->Config.Li);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	eef1 7a67 	vneg.f32	s15, s15
 800165a:	edc7 7a02 	vstr	s15, [r7, #8]
  if (err > s->Config.Li)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ed97 7a02 	vldr	s14, [r7, #8]
 800166c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001674:	dd04      	ble.n	8001680 <PID_SumError+0xe4>
    err = s->Config.Li;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	60bb      	str	r3, [r7, #8]
  return err;
 8001680:	68bb      	ldr	r3, [r7, #8]
}
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eeb0 0a67 	vmov.f32	s0, s15
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <PID_Velocity>:


float PID_Velocity(struct sPID* s)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint8_t periods = 4;
 800169c:	2304      	movs	r3, #4
 800169e:	73fb      	strb	r3, [r7, #15]
  if (s->IntegratorCount > periods)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d219      	bcs.n	80016e0 <PID_Velocity+0x4c>
    return (s->LastP[0]-s->LastP[periods])/(s->DeltaT*periods);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	ed93 7a00 	vldr	s14, [r3]
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016c8:	edd3 6a00 	vldr	s13, [r3]
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016de:	e001      	b.n	80016e4 <PID_Velocity+0x50>
  else
    return 0;
 80016e0:	eddf 6a05 	vldr	s13, [pc, #20]	; 80016f8 <PID_Velocity+0x64>
}
 80016e4:	eef0 7a66 	vmov.f32	s15, s13
 80016e8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	00000000 	.word	0x00000000

080016fc <PID_CalculateEffort>:

// calculate the error and return a value between 0 and 1
float PID_CalculateEffort(struct sPID* s, float p)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	ed87 0a00 	vstr	s0, [r7]
  float eff;
  if ((s->Config.Enabled == false) ||
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 342c 	ldrb.w	r3, [r3, #1068]	; 0x42c
 800170e:	f083 0301 	eor.w	r3, r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d115      	bne.n	8001744 <PID_CalculateEffort+0x48>
      (s->Config.TargetP < -200) ||
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800171e:	edd3 7a00 	vldr	s15, [r3]
  if ((s->Config.Enabled == false) ||
 8001722:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001858 <PID_CalculateEffort+0x15c>
 8001726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	d409      	bmi.n	8001744 <PID_CalculateEffort+0x48>
      (s->DeltaT == 0))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001736:	edd3 7a00 	vldr	s15, [r3]
      (s->Config.TargetP < -200) ||
 800173a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	d117      	bne.n	8001774 <PID_CalculateEffort+0x78>
  {
    s->Ep = -1;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800174a:	4a44      	ldr	r2, [pc, #272]	; (800185c <PID_CalculateEffort+0x160>)
 800174c:	601a      	str	r2, [r3, #0]
    s->Ed = -1;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001754:	4a41      	ldr	r2, [pc, #260]	; (800185c <PID_CalculateEffort+0x160>)
 8001756:	601a      	str	r2, [r3, #0]
    s->Ei = -1;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800175e:	4a3f      	ldr	r2, [pc, #252]	; (800185c <PID_CalculateEffort+0x160>)
 8001760:	601a      	str	r2, [r3, #0]
    s->Effort = 0;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
    return 0;
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	e069      	b.n	8001848 <PID_CalculateEffort+0x14c>
  }
  s->Ep = (s->Config.TargetP - p) * (s->Config.Kp);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800177a:	ed93 7a00 	vldr	s14, [r3]
 800177e:	edd7 7a00 	vldr	s15, [r7]
 8001782:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800179a:	edc3 7a00 	vstr	s15, [r3]
  s->Ed = (0 - PID_Velocity(s)) * (s->Config.Kd);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ff78 	bl	8001694 <PID_Velocity>
 80017a4:	eef0 7a40 	vmov.f32	s15, s0
 80017a8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001860 <PID_CalculateEffort+0x164>
 80017ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017c4:	edc3 7a00 	vstr	s15, [r3]
  s->Ei = PID_SumError(s);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fee7 	bl	800159c <PID_SumError>
 80017ce:	eef0 7a40 	vmov.f32	s15, s0
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80017d8:	edc3 7a00 	vstr	s15, [r3]
  eff = s->Ep + s->Ed + s->Ei;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80017e2:	ed93 7a00 	vldr	s14, [r3]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80017ec:	edd3 7a00 	vldr	s15, [r3]
 80017f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001802:	edc7 7a03 	vstr	s15, [r7, #12]

  if (eff > 1)
 8001806:	edd7 7a03 	vldr	s15, [r7, #12]
 800180a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800180e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	dd02      	ble.n	800181e <PID_CalculateEffort+0x122>
    eff = 1;
 8001818:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800181c:	60fb      	str	r3, [r7, #12]
  if (eff < 0)
 800181e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	d502      	bpl.n	8001832 <PID_CalculateEffort+0x136>
    eff = 0;
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
  PID_SavePoint(s, p);
 8001832:	ed97 0a00 	vldr	s0, [r7]
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fe8a 	bl	8001550 <PID_SavePoint>
  s->Effort = eff;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	601a      	str	r2, [r3, #0]
  return eff;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eeb0 0a67 	vmov.f32	s0, s15
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	c3480000 	.word	0xc3480000
 800185c:	bf800000 	.word	0xbf800000
	...

08001868 <TMP117_InitStruct>:
//@param s Pointer to the structure to initialize
//@param interface Pointer to the I2C interface to use
//@param addpin Value of the address pin
//@return None
void TMP117_InitStruct(struct sTMP117* s, I2C_HandleTypeDef* interface, uint8_t addpin)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	4613      	mov	r3, r2
 8001874:	71fb      	strb	r3, [r7, #7]
   * 0x01 V+
   * 0x10 SDA
   * 0x11 SCL
   */
  uint8_t i;
  s->Address = 0b1001000 | addpin;
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 800187c:	b2da      	uxtb	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	701a      	strb	r2, [r3, #0]
  s->Interface = interface;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	605a      	str	r2, [r3, #4]
  s->Average = -273;
 8001888:	68f9      	ldr	r1, [r7, #12]
 800188a:	a31f      	add	r3, pc, #124	; (adr r3, 8001908 <TMP117_InitStruct+0xa0>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
  s->Configured = false;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
  s->SamplesInAverage = 16;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2210      	movs	r2, #16
 80018a0:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
  s->Index = 0;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  s->State = TMP117_STATE_UNKNOWN;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  for (i=0;i<64;i++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	75fb      	strb	r3, [r7, #23]
 80018b8:	e00c      	b.n	80018d4 <TMP117_InitStruct+0x6c>
    s->Temperature[i] = -273;
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	3301      	adds	r3, #1
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	18d1      	adds	r1, r2, r3
 80018c4:	a310      	add	r3, pc, #64	; (adr r3, 8001908 <TMP117_InitStruct+0xa0>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	e9c1 2300 	strd	r2, r3, [r1]
  for (i=0;i<64;i++)
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	3301      	adds	r3, #1
 80018d2:	75fb      	strb	r3, [r7, #23]
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	2b3f      	cmp	r3, #63	; 0x3f
 80018d8:	d9ef      	bls.n	80018ba <TMP117_InitStruct+0x52>
  s->LastTemperature = -273;
 80018da:	68f9      	ldr	r1, [r7, #12]
 80018dc:	a30a      	add	r3, pc, #40	; (adr r3, 8001908 <TMP117_InitStruct+0xa0>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Ready = false;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
  s->Errors = 0;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
}
 80018f6:	bf00      	nop
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	f3af 8000 	nop.w
 8001908:	00000000 	.word	0x00000000
 800190c:	c0711000 	.word	0xc0711000

08001910 <TMP117_Configure>:

//@brief Configure the TMP117
//@param s Pointer to the structure to configure
//@return None
void TMP117_Configure(struct sTMP117* s)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af02      	add	r7, sp, #8
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef res;
  printf("Attempting to init... ");
 8001918:	481c      	ldr	r0, [pc, #112]	; (800198c <TMP117_Configure+0x7c>)
 800191a:	f00e f839 	bl	800f990 <iprintf>
  uint8_t buffer[3] = {0};
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <TMP117_Configure+0x80>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	81bb      	strh	r3, [r7, #12]
 8001924:	2300      	movs	r3, #0
 8001926:	73bb      	strb	r3, [r7, #14]
  buffer[0] = 1;
 8001928:	2301      	movs	r3, #1
 800192a:	733b      	strb	r3, [r7, #12]
  buffer[2] = 1 << 5;
 800192c:	2320      	movs	r3, #32
 800192e:	73bb      	strb	r3, [r7, #14]
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 3, 10); // 8 samples averaged
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6858      	ldr	r0, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	b299      	uxth	r1, r3
 800193e:	f107 020c 	add.w	r2, r7, #12
 8001942:	230a      	movs	r3, #10
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2303      	movs	r3, #3
 8001948:	f003 fb98 	bl	800507c <HAL_I2C_Master_Transmit>
 800194c:	4603      	mov	r3, r0
 800194e:	73fb      	strb	r3, [r7, #15]
  if (res == HAL_OK)
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d107      	bne.n	8001966 <TMP117_Configure+0x56>
  {
    s->Configured = true;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
    printf("OK!\n");
 800195e:	480d      	ldr	r0, [pc, #52]	; (8001994 <TMP117_Configure+0x84>)
 8001960:	f00e f89c 	bl	800fa9c <puts>
  {
    s->Errors++;
    s->State = TMP117_STATE_INITFAILED;
    printf("Failed!\n");
  }
}
 8001964:	e00e      	b.n	8001984 <TMP117_Configure+0x74>
    s->Errors++;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 800196c:	3301      	adds	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    s->State = TMP117_STATE_INITFAILED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    printf("Failed!\n");
 800197e:	4806      	ldr	r0, [pc, #24]	; (8001998 <TMP117_Configure+0x88>)
 8001980:	f00e f88c 	bl	800fa9c <puts>
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	08013f90 	.word	0x08013f90
 8001990:	08013fb4 	.word	0x08013fb4
 8001994:	08013fa8 	.word	0x08013fa8
 8001998:	08013fac 	.word	0x08013fac

0800199c <TMP117_GetTemperature>:

//@brief Get the temperature from the TMP117
//@param s Pointer to the structure to get the temperature from
//@return None
void TMP117_GetTemperature(struct sTMP117* s)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b08b      	sub	sp, #44	; 0x2c
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t u;
  double t = 0;
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
  //setup an empty Buffer to request the temperature
  uint8_t buffer[2] = {0};
 80019b0:	2300      	movs	r3, #0
 80019b2:	81bb      	strh	r3, [r7, #12]
  uint16_t data = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef res;
  res = HAL_I2C_Master_Transmit(s->Interface, (s->Address) << 1, buffer, 1, 10); // request temperature
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6858      	ldr	r0, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	b299      	uxth	r1, r3
 80019c6:	f107 020c 	add.w	r2, r7, #12
 80019ca:	230a      	movs	r3, #10
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2301      	movs	r3, #1
 80019d0:	f003 fb54 	bl	800507c <HAL_I2C_Master_Transmit>
 80019d4:	4603      	mov	r3, r0
 80019d6:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 80019d8:	7cfb      	ldrb	r3, [r7, #19]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d01a      	beq.n	8001a14 <TMP117_GetTemperature+0x78>
  {
    s->State = TMP117_STATE_REQUESTNOACK;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2202      	movs	r2, #2
 80019e2:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019ec:	3301      	adds	r3, #1
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    //If this temperature sensor gets more than 100 errors in a row, it's probably not connected
    if (s->Errors > 100)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 80019fc:	2b64      	cmp	r3, #100	; 0x64
 80019fe:	f240 80b3 	bls.w	8001b68 <TMP117_GetTemperature+0x1cc>
    {
      s->Configured = false;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 8001a12:	e0a9      	b.n	8001b68 <TMP117_GetTemperature+0x1cc>
  }

  res = HAL_I2C_Master_Receive(s->Interface, (s->Address << 1), buffer, 2, 10); // receive temperature
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6858      	ldr	r0, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	b299      	uxth	r1, r3
 8001a22:	f107 020c 	add.w	r2, r7, #12
 8001a26:	230a      	movs	r3, #10
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	f003 fc24 	bl	8005278 <HAL_I2C_Master_Receive>
 8001a30:	4603      	mov	r3, r0
 8001a32:	74fb      	strb	r3, [r7, #19]
  if (res != HAL_OK)
 8001a34:	7cfb      	ldrb	r3, [r7, #19]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d01a      	beq.n	8001a70 <TMP117_GetTemperature+0xd4>
  {
    s->State = TMP117_STATE_RECEIVEFAIL;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
    s->Errors++;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a48:	3301      	adds	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    if (s->Errors > 100)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8001a58:	2b64      	cmp	r3, #100	; 0x64
 8001a5a:	f240 8087 	bls.w	8001b6c <TMP117_GetTemperature+0x1d0>
    {
      s->Configured = false;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
      s->Errors = 0;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    }
    return;
 8001a6e:	e07d      	b.n	8001b6c <TMP117_GetTemperature+0x1d0>
  }

  
  s->State = TMP117_STATE_VALIDTEMP;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2204      	movs	r2, #4
 8001a74:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
  data = (buffer[0] << 8) | buffer[1];
 8001a78:	7b3b      	ldrb	r3, [r7, #12]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	7b7b      	ldrb	r3, [r7, #13]
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	4313      	orrs	r3, r2
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	817b      	strh	r3, [r7, #10]
  u = *(&(data));
 8001a8a:	897b      	ldrh	r3, [r7, #10]
 8001a8c:	823b      	strh	r3, [r7, #16]
  //Conver the Temp as per documentation
  s->Temperature[s->Index] = ((double)u) * 0.0078125;
 8001a8e:	8a3b      	ldrh	r3, [r7, #16]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fd57 	bl	8000544 <__aeabi_ui2d>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001a9c:	461c      	mov	r4, r3
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001aa6:	f7fe fdc7 	bl	8000638 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	1c61      	adds	r1, r4, #1
 8001ab2:	00c9      	lsls	r1, r1, #3
 8001ab4:	4401      	add	r1, r0
 8001ab6:	e9c1 2300 	strd	r2, r3, [r1]
  s->LastTemperature = s->Temperature[s->Index];
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
  s->Index++;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  //If we finally have enough Temperatures to average, set the Ready flag
  //if we have engough samples, set the flags
  if (s->Index >= s->SamplesInAverage)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 2211 	ldrb.w	r2, [r3, #529]	; 0x211
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d307      	bcc.n	8001b02 <TMP117_GetTemperature+0x166>
  {
    s->Ready = true;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
    s->Index = 0;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
  }
  
  //average the Temperatures
  if (s->Ready)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d030      	beq.n	8001b6e <TMP117_GetTemperature+0x1d2>
  {
    for (int i=0;i<(s->SamplesInAverage); i++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e011      	b.n	8001b36 <TMP117_GetTemperature+0x19a>
    {
      t += s->Temperature[i];
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b24:	f7fe fbd2 	bl	80002cc <__adddf3>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i=0;i<(s->SamplesInAverage); i++)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	dbe6      	blt.n	8001b12 <TMP117_GetTemperature+0x176>
    }
    s->Average = t / s->SamplesInAverage;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd0a 	bl	8000564 <__aeabi_i2d>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b58:	f7fe fe98 	bl	800088c <__aeabi_ddiv>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	e9c1 2382 	strd	r2, r3, [r1, #520]	; 0x208
 8001b66:	e002      	b.n	8001b6e <TMP117_GetTemperature+0x1d2>
    return;
 8001b68:	bf00      	nop
 8001b6a:	e000      	b.n	8001b6e <TMP117_GetTemperature+0x1d2>
    return;
 8001b6c:	bf00      	nop
  }


}
 8001b6e:	3724      	adds	r7, #36	; 0x24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd90      	pop	{r4, r7, pc}

08001b74 <TCB_InitStruct>:
#include "DAC.h"
#include "Compensator.h"
#include "CameraController.h"

//This Will Setup the TCB structer by initiallizing the DAC and the TMP117 and the Controller
void TCB_InitStruct(struct sTuningControlBoard* s, I2C_HandleTypeDef* hi2c, SPI_HandleTypeDef* hspi){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]

    //For each of the Seven Temperature sensors initialize the struct
    for(int i = 0; i < 4; i++){
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	e00f      	b.n	8001ba6 <TCB_InitStruct+0x32>
        TMP117_InitStruct(&s->TMP117[i], hi2c, i);
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f44f 720a 	mov.w	r2, #552	; 0x228
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fe64 	bl	8001868 <TMP117_InitStruct>
    for(int i = 0; i < 4; i++){
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	ddec      	ble.n	8001b86 <TCB_InitStruct+0x12>
    }   
   
    //Init
    DAC_InitStruct(&s->DAC8718, hspi);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fa7d 	bl	80010b4 <DAC_InitStruct>
    
    
    //Use the First Sensor as the Input for the Controller
    Controller_InitStruct(&s->Controller,&s->TMP117[0], 0);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f001 fb19 	bl	80031fc <Controller_InitStruct>

    //Initialize all of the Compensators
    for(int i = 0; i < 4; i++){
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	e020      	b.n	8001c12 <TCB_InitStruct+0x9e>
        Compensator_InitStruct(&s->Compensator[i], &s->TMP117[i+1], &s->DAC8718.DAC_Channels[i]);
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	019b      	lsls	r3, r3, #6
 8001bda:	f603 7378 	addw	r3, r3, #3960	; 0xf78
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	18d0      	adds	r0, r2, r3
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	3301      	adds	r3, #1
 8001be6:	f44f 720a 	mov.w	r2, #552	; 0x228
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	18d1      	adds	r1, r2, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	3304      	adds	r3, #4
 8001c06:	461a      	mov	r2, r3
 8001c08:	f7ff fa24 	bl	8001054 <Compensator_InitStruct>
    for(int i = 0; i < 4; i++){
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	dddb      	ble.n	8001bd0 <TCB_InitStruct+0x5c>
    }
    //Initalize the CameraController
    for(int i = 0; i < 2; i++){
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e016      	b.n	8001c4c <TCB_InitStruct+0xd8>
        CameraController_InitStruct(&s->CameraController[i], &s->DAC8718.DAC_Channels[i+6]);
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f203 538e 	addw	r3, r3, #1422	; 0x58e
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	18d0      	adds	r0, r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	1d9a      	adds	r2, r3, #6
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	f503 630b 	add.w	r3, r3, #2224	; 0x8b0
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3304      	adds	r3, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7ff f9f9 	bl	8001038 <CameraController_InitStruct>
    for(int i = 0; i < 2; i++){
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	dde5      	ble.n	8001c1e <TCB_InitStruct+0xaa>
    }

}
 8001c52:	bf00      	nop
 8001c54:	bf00      	nop
 8001c56:	3720      	adds	r7, #32
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c60:	f3bf 8f4f 	dsb	sy
}
 8001c64:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <__NVIC_SystemReset+0x24>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001c6e:	4904      	ldr	r1, [pc, #16]	; (8001c80 <__NVIC_SystemReset+0x24>)
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <__NVIC_SystemReset+0x28>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c76:	f3bf 8f4f 	dsb	sy
}
 8001c7a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <__NVIC_SystemReset+0x20>
 8001c80:	e000ed00 	.word	0xe000ed00
 8001c84:	05fa0004 	.word	0x05fa0004

08001c88 <ProcessUserInput>:

//Get the User Input and process it
//@param Controller: pointer to the controller struct
//@param buffer: pointer to the buffer
void ProcessUserInput(struct sTuningControlBoard* TCB, uint8_t* buffer)
{
 8001c88:	b5b0      	push	{r4, r5, r7, lr}
 8001c8a:	b0ca      	sub	sp, #296	; 0x128
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c96:	6018      	str	r0, [r3, #0]
 8001c98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ca0:	6019      	str	r1, [r3, #0]
  uint16_t i = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
  uint8_t u = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
  char output[250];
  char c;
  float f = 0;
 8001cae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
  for (i=0; buffer[i]; i++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001cc2:	e02c      	b.n	8001d1e <ProcessUserInput+0x96>
    buffer[i] = tolower(buffer[i]);
 8001cc4:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001cc8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001ccc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8001cda:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001cde:	3301      	adds	r3, #1
 8001ce0:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <ProcessUserInput+0x70>)
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d106      	bne.n	8001cfc <ProcessUserInput+0x74>
 8001cee:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001cf2:	3320      	adds	r3, #32
 8001cf4:	e004      	b.n	8001d00 <ProcessUserInput+0x78>
 8001cf6:	bf00      	nop
 8001cf8:	08014e3c 	.word	0x08014e3c
 8001cfc:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001d00:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8001d04:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001d08:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001d0c:	6809      	ldr	r1, [r1, #0]
 8001d0e:	440a      	add	r2, r1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	7013      	strb	r3, [r2, #0]
  for (i=0; buffer[i]; i++)
 8001d14:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
 8001d1e:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001d22:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001d26:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1c7      	bne.n	8001cc4 <ProcessUserInput+0x3c>
//  printf("String: %s\n", buffer);

  replacestr(buffer, "=", "");
 8001d34:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d3c:	4abd      	ldr	r2, [pc, #756]	; (8002034 <ProcessUserInput+0x3ac>)
 8001d3e:	49be      	ldr	r1, [pc, #760]	; (8002038 <ProcessUserInput+0x3b0>)
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	f001 fb89 	bl	8003458 <replacestr>
  replacestr(buffer, " ", "");
 8001d46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d4a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d4e:	4ab9      	ldr	r2, [pc, #740]	; (8002034 <ProcessUserInput+0x3ac>)
 8001d50:	49ba      	ldr	r1, [pc, #744]	; (800203c <ProcessUserInput+0x3b4>)
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	f001 fb80 	bl	8003458 <replacestr>
  replacestr(buffer, " ", "");
 8001d58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d60:	4ab4      	ldr	r2, [pc, #720]	; (8002034 <ProcessUserInput+0x3ac>)
 8001d62:	49b6      	ldr	r1, [pc, #728]	; (800203c <ProcessUserInput+0x3b4>)
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	f001 fb77 	bl	8003458 <replacestr>
  replacestr(buffer, " ", "");
 8001d6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d6e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d72:	4ab0      	ldr	r2, [pc, #704]	; (8002034 <ProcessUserInput+0x3ac>)
 8001d74:	49b1      	ldr	r1, [pc, #708]	; (800203c <ProcessUserInput+0x3b4>)
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	f001 fb6e 	bl	8003458 <replacestr>
  replacestr(buffer, " ", "");
 8001d7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d80:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d84:	4aab      	ldr	r2, [pc, #684]	; (8002034 <ProcessUserInput+0x3ac>)
 8001d86:	49ad      	ldr	r1, [pc, #692]	; (800203c <ProcessUserInput+0x3b4>)
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	f001 fb65 	bl	8003458 <replacestr>
  replacestr(buffer, " ", "");
 8001d8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d92:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d96:	4aa7      	ldr	r2, [pc, #668]	; (8002034 <ProcessUserInput+0x3ac>)
 8001d98:	49a8      	ldr	r1, [pc, #672]	; (800203c <ProcessUserInput+0x3b4>)
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	f001 fb5c 	bl	8003458 <replacestr>
  replacestr(buffer, "channel", "c");
 8001da0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001da4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001da8:	4aa5      	ldr	r2, [pc, #660]	; (8002040 <ProcessUserInput+0x3b8>)
 8001daa:	49a6      	ldr	r1, [pc, #664]	; (8002044 <ProcessUserInput+0x3bc>)
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	f001 fb53 	bl	8003458 <replacestr>
//  replacestr(buffer, "controller", "c");
  replacestr(buffer, "chan", "c");
 8001db2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001db6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dba:	4aa1      	ldr	r2, [pc, #644]	; (8002040 <ProcessUserInput+0x3b8>)
 8001dbc:	49a2      	ldr	r1, [pc, #648]	; (8002048 <ProcessUserInput+0x3c0>)
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	f001 fb4a 	bl	8003458 <replacestr>
//  replacestr(buffer, "con", "c");
  replacestr(buffer, "address", "a");
 8001dc4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dc8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dcc:	4a9f      	ldr	r2, [pc, #636]	; (800204c <ProcessUserInput+0x3c4>)
 8001dce:	49a0      	ldr	r1, [pc, #640]	; (8002050 <ProcessUserInput+0x3c8>)
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	f001 fb41 	bl	8003458 <replacestr>
  replacestr(buffer, "kp", "p");
 8001dd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dda:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dde:	4a9d      	ldr	r2, [pc, #628]	; (8002054 <ProcessUserInput+0x3cc>)
 8001de0:	499d      	ldr	r1, [pc, #628]	; (8002058 <ProcessUserInput+0x3d0>)
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	f001 fb38 	bl	8003458 <replacestr>
  replacestr(buffer, "kd", "d");
 8001de8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001df0:	4a9a      	ldr	r2, [pc, #616]	; (800205c <ProcessUserInput+0x3d4>)
 8001df2:	499b      	ldr	r1, [pc, #620]	; (8002060 <ProcessUserInput+0x3d8>)
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	f001 fb2f 	bl	8003458 <replacestr>
  replacestr(buffer, "ki", "i");
 8001dfa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001dfe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e02:	4a98      	ldr	r2, [pc, #608]	; (8002064 <ProcessUserInput+0x3dc>)
 8001e04:	4998      	ldr	r1, [pc, #608]	; (8002068 <ProcessUserInput+0x3e0>)
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	f001 fb26 	bl	8003458 <replacestr>
  replacestr(buffer, "li", "l");
 8001e0c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e14:	4a95      	ldr	r2, [pc, #596]	; (800206c <ProcessUserInput+0x3e4>)
 8001e16:	4996      	ldr	r1, [pc, #600]	; (8002070 <ProcessUserInput+0x3e8>)
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	f001 fb1d 	bl	8003458 <replacestr>
  replacestr(buffer, "target", "t");
 8001e1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e22:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e26:	4a93      	ldr	r2, [pc, #588]	; (8002074 <ProcessUserInput+0x3ec>)
 8001e28:	4993      	ldr	r1, [pc, #588]	; (8002078 <ProcessUserInput+0x3f0>)
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	f001 fb14 	bl	8003458 <replacestr>
  replacestr(buffer, "temperature", "t");
 8001e30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e38:	4a8e      	ldr	r2, [pc, #568]	; (8002074 <ProcessUserInput+0x3ec>)
 8001e3a:	4990      	ldr	r1, [pc, #576]	; (800207c <ProcessUserInput+0x3f4>)
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	f001 fb0b 	bl	8003458 <replacestr>
  replacestr(buffer, "temp", "t");
 8001e42:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e46:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e4a:	4a8a      	ldr	r2, [pc, #552]	; (8002074 <ProcessUserInput+0x3ec>)
 8001e4c:	498c      	ldr	r1, [pc, #560]	; (8002080 <ProcessUserInput+0x3f8>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	f001 fb02 	bl	8003458 <replacestr>
  replacestr(buffer, "frequency", "f");
 8001e54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e5c:	4a89      	ldr	r2, [pc, #548]	; (8002084 <ProcessUserInput+0x3fc>)
 8001e5e:	498a      	ldr	r1, [pc, #552]	; (8002088 <ProcessUserInput+0x400>)
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	f001 faf9 	bl	8003458 <replacestr>
  replacestr(buffer, "freq", "f");
 8001e66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e6a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e6e:	4a85      	ldr	r2, [pc, #532]	; (8002084 <ProcessUserInput+0x3fc>)
 8001e70:	4986      	ldr	r1, [pc, #536]	; (800208c <ProcessUserInput+0x404>)
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	f001 faf0 	bl	8003458 <replacestr>
  replacestr(buffer, "enable", "n");
 8001e78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e80:	4a83      	ldr	r2, [pc, #524]	; (8002090 <ProcessUserInput+0x408>)
 8001e82:	4984      	ldr	r1, [pc, #528]	; (8002094 <ProcessUserInput+0x40c>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	f001 fae7 	bl	8003458 <replacestr>
  replacestr(buffer, "disable", "f");
 8001e8a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e8e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e92:	4a7c      	ldr	r2, [pc, #496]	; (8002084 <ProcessUserInput+0x3fc>)
 8001e94:	4980      	ldr	r1, [pc, #512]	; (8002098 <ProcessUserInput+0x410>)
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	f001 fade 	bl	8003458 <replacestr>
  replacestr(buffer, "save", "s");
 8001e9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ea0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ea4:	4a7d      	ldr	r2, [pc, #500]	; (800209c <ProcessUserInput+0x414>)
 8001ea6:	497e      	ldr	r1, [pc, #504]	; (80020a0 <ProcessUserInput+0x418>)
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	f001 fad5 	bl	8003458 <replacestr>
  replacestr(buffer, "load", "l");
 8001eae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001eb2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001eb6:	4a6d      	ldr	r2, [pc, #436]	; (800206c <ProcessUserInput+0x3e4>)
 8001eb8:	497a      	ldr	r1, [pc, #488]	; (80020a4 <ProcessUserInput+0x41c>)
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	f001 facc 	bl	8003458 <replacestr>
  replacestr(buffer, "history", "h");
 8001ec0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ec4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ec8:	4a77      	ldr	r2, [pc, #476]	; (80020a8 <ProcessUserInput+0x420>)
 8001eca:	4978      	ldr	r1, [pc, #480]	; (80020ac <ProcessUserInput+0x424>)
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	f001 fac3 	bl	8003458 <replacestr>
  replacestr(buffer, "update", "u");
 8001ed2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ed6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001eda:	4a75      	ldr	r2, [pc, #468]	; (80020b0 <ProcessUserInput+0x428>)
 8001edc:	4975      	ldr	r1, [pc, #468]	; (80020b4 <ProcessUserInput+0x42c>)
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	f001 faba 	bl	8003458 <replacestr>
  replacestr(buffer, "raw", "r");
 8001ee4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ee8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001eec:	4a72      	ldr	r2, [pc, #456]	; (80020b8 <ProcessUserInput+0x430>)
 8001eee:	4973      	ldr	r1, [pc, #460]	; (80020bc <ProcessUserInput+0x434>)
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	f001 fab1 	bl	8003458 <replacestr>
  replacestr(buffer, "bounce", "b");
 8001ef6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001efa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001efe:	4a70      	ldr	r2, [pc, #448]	; (80020c0 <ProcessUserInput+0x438>)
 8001f00:	4970      	ldr	r1, [pc, #448]	; (80020c4 <ProcessUserInput+0x43c>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	f001 faa8 	bl	8003458 <replacestr>
  replacestr(buffer, "wipe", "w");
 8001f08:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f10:	4a6d      	ldr	r2, [pc, #436]	; (80020c8 <ProcessUserInput+0x440>)
 8001f12:	496e      	ldr	r1, [pc, #440]	; (80020cc <ProcessUserInput+0x444>)
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	f001 fa9f 	bl	8003458 <replacestr>
  replacestr(buffer, "voltage", "v");
 8001f1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f1e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f22:	4a6b      	ldr	r2, [pc, #428]	; (80020d0 <ProcessUserInput+0x448>)
 8001f24:	496b      	ldr	r1, [pc, #428]	; (80020d4 <ProcessUserInput+0x44c>)
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	f001 fa96 	bl	8003458 <replacestr>
  replacestr(buffer, "heater", "heater");
 8001f2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f34:	4a68      	ldr	r2, [pc, #416]	; (80020d8 <ProcessUserInput+0x450>)
 8001f36:	4968      	ldr	r1, [pc, #416]	; (80020d8 <ProcessUserInput+0x450>)
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	f001 fa8d 	bl	8003458 <replacestr>


//  printf("New String: %s\n", buffer);

  if ((strcmp((char*) buffer, "?") == 0) || (strcmp((char*) buffer, "help") == 0))
 8001f3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f42:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f46:	4965      	ldr	r1, [pc, #404]	; (80020dc <ProcessUserInput+0x454>)
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	f7fe f951 	bl	80001f0 <strcmp>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00b      	beq.n	8001f6c <ProcessUserInput+0x2e4>
 8001f54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001f58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f5c:	4960      	ldr	r1, [pc, #384]	; (80020e0 <ProcessUserInput+0x458>)
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	f7fe f946 	bl	80001f0 <strcmp>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 80f2 	bne.w	8002150 <ProcessUserInput+0x4c8>
  {
    USBSendString("\nLFDI TCB Firmware v1.3\n");
 8001f6c:	485d      	ldr	r0, [pc, #372]	; (80020e4 <ProcessUserInput+0x45c>)
 8001f6e:	f001 fa0f 	bl	8003390 <USBSendString>
    USBSendString("Commands can be upper or lower case. Variables can be set with an equals sign or space or nothing.\n");
 8001f72:	485d      	ldr	r0, [pc, #372]	; (80020e8 <ProcessUserInput+0x460>)
 8001f74:	f001 fa0c 	bl	8003390 <USBSendString>
    USBSendString("\"channel=1\", \"channel 1\", \"channel1\", \"c1\" are all treated the same.\n");
 8001f78:	485c      	ldr	r0, [pc, #368]	; (80020ec <ProcessUserInput+0x464>)
 8001f7a:	f001 fa09 	bl	8003390 <USBSendString>
    USBSendString("\n");
 8001f7e:	485c      	ldr	r0, [pc, #368]	; (80020f0 <ProcessUserInput+0x468>)
 8001f80:	f001 fa06 	bl	8003390 <USBSendString>
//    USBSendString("Controller = n  -- chooses which controller to configure\n");
    USBSendString("Channel = n     -- chooses which Compensator channel to configure\n");
 8001f84:	485b      	ldr	r0, [pc, #364]	; (80020f4 <ProcessUserInput+0x46c>)
 8001f86:	f001 fa03 	bl	8003390 <USBSendString>
    USBSendString("Heater  = n     -- chooses the Heater channel to configure\n");
 8001f8a:	485b      	ldr	r0, [pc, #364]	; (80020f8 <ProcessUserInput+0x470>)
 8001f8c:	f001 fa00 	bl	8003390 <USBSendString>
    USBSendString("Address = nn    -- sets the address of the temperature sensor of the current Compensator Channel or the Heater (00, 01, 10, or 11)\n");
 8001f90:	485a      	ldr	r0, [pc, #360]	; (80020fc <ProcessUserInput+0x474>)
 8001f92:	f001 f9fd 	bl	8003390 <USBSendString>
    USBSendString("kP = n.nn       -- sets the proportional gain for the Selected Heater\n");
 8001f96:	485a      	ldr	r0, [pc, #360]	; (8002100 <ProcessUserInput+0x478>)
 8001f98:	f001 f9fa 	bl	8003390 <USBSendString>
    USBSendString("kD = n.nn       -- sets the derivative gain for the Selected Heater\n");
 8001f9c:	4859      	ldr	r0, [pc, #356]	; (8002104 <ProcessUserInput+0x47c>)
 8001f9e:	f001 f9f7 	bl	8003390 <USBSendString>
    USBSendString("kI = n.nn       -- sets the integral gain for the Selected Heater\n");
 8001fa2:	4859      	ldr	r0, [pc, #356]	; (8002108 <ProcessUserInput+0x480>)
 8001fa4:	f001 f9f4 	bl	8003390 <USBSendString>
    USBSendString("Li = n.nn       -- sets the integral gain limit for the Selected Heater\n");
 8001fa8:	4858      	ldr	r0, [pc, #352]	; (800210c <ProcessUserInput+0x484>)
 8001faa:	f001 f9f1 	bl	8003390 <USBSendString>
    USBSendString("History = nn    -- sets the number of points used in the integral (1-255) for the Selected Heater\n");
 8001fae:	4858      	ldr	r0, [pc, #352]	; (8002110 <ProcessUserInput+0x488>)
 8001fb0:	f001 f9ee 	bl	8003390 <USBSendString>
    USBSendString("Target = n      -- sets the target temperature for the Selected Heater\n");
 8001fb4:	4857      	ldr	r0, [pc, #348]	; (8002114 <ProcessUserInput+0x48c>)
 8001fb6:	f001 f9eb 	bl	8003390 <USBSendString>
    USBSendString("Temperature = n -- sets the target temperature for the Selected Heater\n");
 8001fba:	4857      	ldr	r0, [pc, #348]	; (8002118 <ProcessUserInput+0x490>)
 8001fbc:	f001 f9e8 	bl	8003390 <USBSendString>
    USBSendString("Freq = n        -- sets the PWM frequency (40 = 1 second) for the Selected Heater\n");
 8001fc0:	4856      	ldr	r0, [pc, #344]	; (800211c <ProcessUserInput+0x494>)
 8001fc2:	f001 f9e5 	bl	8003390 <USBSendString>
    USBSendString("Enable          -- starts the temperature control loop for the Heater or the Compensator\n");
 8001fc6:	4856      	ldr	r0, [pc, #344]	; (8002120 <ProcessUserInput+0x498>)
 8001fc8:	f001 f9e2 	bl	8003390 <USBSendString>
    USBSendString("Disable         -- stops the temperature control loop for the Heater or the Compensator\n");
 8001fcc:	4855      	ldr	r0, [pc, #340]	; (8002124 <ProcessUserInput+0x49c>)
 8001fce:	f001 f9df 	bl	8003390 <USBSendString>
    USBSendString("Update          -- shows the status of all of the controllers and compensators\n");
 8001fd2:	4855      	ldr	r0, [pc, #340]	; (8002128 <ProcessUserInput+0x4a0>)
 8001fd4:	f001 f9dc 	bl	8003390 <USBSendString>
    USBSendString("Raw             -- shows an easily parsable version of Update\n");
 8001fd8:	4854      	ldr	r0, [pc, #336]	; (800212c <ProcessUserInput+0x4a4>)
 8001fda:	f001 f9d9 	bl	8003390 <USBSendString>
    USBSendString("Wipe            -- wipes the existing configuration and load new defaults\n");
 8001fde:	4854      	ldr	r0, [pc, #336]	; (8002130 <ProcessUserInput+0x4a8>)
 8001fe0:	f001 f9d6 	bl	8003390 <USBSendString>
    USBSendString("Bounce          -- performs a power-cycle / reboot on the system\n");
 8001fe4:	4853      	ldr	r0, [pc, #332]	; (8002134 <ProcessUserInput+0x4ac>)
 8001fe6:	f001 f9d3 	bl	8003390 <USBSendString>
    USBSendString("Load            -- reloads the previously saved values (automatic at power-on)\n");
 8001fea:	4853      	ldr	r0, [pc, #332]	; (8002138 <ProcessUserInput+0x4b0>)
 8001fec:	f001 f9d0 	bl	8003390 <USBSendString>
    USBSendString("Save            -- saves the currently configured values\n");
 8001ff0:	4852      	ldr	r0, [pc, #328]	; (800213c <ProcessUserInput+0x4b4>)
 8001ff2:	f001 f9cd 	bl	8003390 <USBSendString>
    USBSendString("Voltage         -- Set the Peak to Peak Voltage to output on Compensator\n");
 8001ff6:	4852      	ldr	r0, [pc, #328]	; (8002140 <ProcessUserInput+0x4b8>)
 8001ff8:	f001 f9ca 	bl	8003390 <USBSendString>
    USBSendString("\n");
 8001ffc:	483c      	ldr	r0, [pc, #240]	; (80020f0 <ProcessUserInput+0x468>)
 8001ffe:	f001 f9c7 	bl	8003390 <USBSendString>
    USBSendString("Compensate\n");
 8002002:	4850      	ldr	r0, [pc, #320]	; (8002144 <ProcessUserInput+0x4bc>)
 8002004:	f001 f9c4 	bl	8003390 <USBSendString>
    
    if (UI_Controller == 9)
 8002008:	4b4f      	ldr	r3, [pc, #316]	; (8002148 <ProcessUserInput+0x4c0>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b09      	cmp	r3, #9
 800200e:	d104      	bne.n	800201a <ProcessUserInput+0x392>
      USBSendString("No controller selected.\n");
 8002010:	484e      	ldr	r0, [pc, #312]	; (800214c <ProcessUserInput+0x4c4>)
 8002012:	f001 f9bd 	bl	8003390 <USBSendString>
      ShowEffort(&TCB.Controller);
      USBSendString("\n");
      */
      ShowAll(&TCB->Controller, true);
    }
    return;
 8002016:	f000 bd8f 	b.w	8002b38 <ProcessUserInput+0xeb0>
      ShowAll(&TCB->Controller, true);
 800201a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800201e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8002028:	2101      	movs	r1, #1
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fe6e 	bl	8002d0c <ShowAll>
    return;
 8002030:	f000 bd82 	b.w	8002b38 <ProcessUserInput+0xeb0>
 8002034:	08013fb8 	.word	0x08013fb8
 8002038:	08013fbc 	.word	0x08013fbc
 800203c:	08013fc0 	.word	0x08013fc0
 8002040:	08013fc4 	.word	0x08013fc4
 8002044:	08013fc8 	.word	0x08013fc8
 8002048:	08013fd0 	.word	0x08013fd0
 800204c:	08013fd8 	.word	0x08013fd8
 8002050:	08013fdc 	.word	0x08013fdc
 8002054:	08013fe4 	.word	0x08013fe4
 8002058:	08013fe8 	.word	0x08013fe8
 800205c:	08013fec 	.word	0x08013fec
 8002060:	08013ff0 	.word	0x08013ff0
 8002064:	08013ff4 	.word	0x08013ff4
 8002068:	08013ff8 	.word	0x08013ff8
 800206c:	08013ffc 	.word	0x08013ffc
 8002070:	08014000 	.word	0x08014000
 8002074:	08014004 	.word	0x08014004
 8002078:	08014008 	.word	0x08014008
 800207c:	08014010 	.word	0x08014010
 8002080:	0801401c 	.word	0x0801401c
 8002084:	08014024 	.word	0x08014024
 8002088:	08014028 	.word	0x08014028
 800208c:	08014034 	.word	0x08014034
 8002090:	0801403c 	.word	0x0801403c
 8002094:	08014040 	.word	0x08014040
 8002098:	08014048 	.word	0x08014048
 800209c:	08014050 	.word	0x08014050
 80020a0:	08014054 	.word	0x08014054
 80020a4:	0801405c 	.word	0x0801405c
 80020a8:	08014064 	.word	0x08014064
 80020ac:	08014068 	.word	0x08014068
 80020b0:	08014070 	.word	0x08014070
 80020b4:	08014074 	.word	0x08014074
 80020b8:	0801407c 	.word	0x0801407c
 80020bc:	08014080 	.word	0x08014080
 80020c0:	08014084 	.word	0x08014084
 80020c4:	08014088 	.word	0x08014088
 80020c8:	08014090 	.word	0x08014090
 80020cc:	08014094 	.word	0x08014094
 80020d0:	0801409c 	.word	0x0801409c
 80020d4:	080140a0 	.word	0x080140a0
 80020d8:	080140a8 	.word	0x080140a8
 80020dc:	080140b0 	.word	0x080140b0
 80020e0:	080140b4 	.word	0x080140b4
 80020e4:	080140bc 	.word	0x080140bc
 80020e8:	080140d8 	.word	0x080140d8
 80020ec:	0801413c 	.word	0x0801413c
 80020f0:	08014184 	.word	0x08014184
 80020f4:	08014188 	.word	0x08014188
 80020f8:	080141cc 	.word	0x080141cc
 80020fc:	08014208 	.word	0x08014208
 8002100:	0801428c 	.word	0x0801428c
 8002104:	080142d4 	.word	0x080142d4
 8002108:	0801431c 	.word	0x0801431c
 800210c:	08014360 	.word	0x08014360
 8002110:	080143ac 	.word	0x080143ac
 8002114:	08014410 	.word	0x08014410
 8002118:	08014458 	.word	0x08014458
 800211c:	080144a0 	.word	0x080144a0
 8002120:	080144f4 	.word	0x080144f4
 8002124:	08014550 	.word	0x08014550
 8002128:	080145ac 	.word	0x080145ac
 800212c:	080145fc 	.word	0x080145fc
 8002130:	0801463c 	.word	0x0801463c
 8002134:	08014688 	.word	0x08014688
 8002138:	080146cc 	.word	0x080146cc
 800213c:	0801471c 	.word	0x0801471c
 8002140:	08014758 	.word	0x08014758
 8002144:	080147a4 	.word	0x080147a4
 8002148:	2000000c 	.word	0x2000000c
 800214c:	080147b0 	.word	0x080147b0
  }

  //Print the Status all the Controllers
  if ((strcmp((char*) buffer, "u") == 0) || (strcmp((char*) buffer, "/") == 0))
 8002150:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002154:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002158:	49c2      	ldr	r1, [pc, #776]	; (8002464 <ProcessUserInput+0x7dc>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	f7fe f848 	bl	80001f0 <strcmp>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <ProcessUserInput+0x4f4>
 8002166:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800216a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800216e:	49be      	ldr	r1, [pc, #760]	; (8002468 <ProcessUserInput+0x7e0>)
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	f7fe f83d 	bl	80001f0 <strcmp>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10c      	bne.n	8002196 <ProcessUserInput+0x50e>
  {
    ShowAll(&TCB->Controller, true);
 800217c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002180:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f603 1318 	addw	r3, r3, #2328	; 0x918
 800218a:	2101      	movs	r1, #1
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fdbd 	bl	8002d0c <ShowAll>
    return;
 8002192:	f000 bcd1 	b.w	8002b38 <ProcessUserInput+0xeb0>
  }
  //Print the Status all the Controllers in non readable format
  if (strcmp((char*) buffer, "r") == 0)
 8002196:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800219a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800219e:	49b3      	ldr	r1, [pc, #716]	; (800246c <ProcessUserInput+0x7e4>)
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	f7fe f825 	bl	80001f0 <strcmp>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10c      	bne.n	80021c6 <ProcessUserInput+0x53e>
  {
    ShowAll(&TCB->Controller, false);
 80021ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f603 1318 	addw	r3, r3, #2328	; 0x918
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fda5 	bl	8002d0c <ShowAll>
    return;
 80021c2:	f000 bcb9 	b.w	8002b38 <ProcessUserInput+0xeb0>
  }

  //Save the Configuration of a controller
  if (strcmp((char*) buffer, "s") == 0)
 80021c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021ce:	49a8      	ldr	r1, [pc, #672]	; (8002470 <ProcessUserInput+0x7e8>)
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	f7fe f80d 	bl	80001f0 <strcmp>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d104      	bne.n	80021e6 <ProcessUserInput+0x55e>
  {

    USBSendString("Cannot Save, No EEPROM.\n");
 80021dc:	48a5      	ldr	r0, [pc, #660]	; (8002474 <ProcessUserInput+0x7ec>)
 80021de:	f001 f8d7 	bl	8003390 <USBSendString>
    return;
 80021e2:	f000 bca9 	b.w	8002b38 <ProcessUserInput+0xeb0>
  }

//Load the Configuration of a controller
  if (strcmp((char*) buffer, "l") == 0)
 80021e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021ee:	49a2      	ldr	r1, [pc, #648]	; (8002478 <ProcessUserInput+0x7f0>)
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	f7fd fffd 	bl	80001f0 <strcmp>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d104      	bne.n	8002206 <ProcessUserInput+0x57e>
  {
    USBSendString("Cannot load Configuration, No EEPROM.\n");
 80021fc:	489f      	ldr	r0, [pc, #636]	; (800247c <ProcessUserInput+0x7f4>)
 80021fe:	f001 f8c7 	bl	8003390 <USBSendString>
    return;
 8002202:	f000 bc99 	b.w	8002b38 <ProcessUserInput+0xeb0>
  }

  //Reset the Controller
  if (strcmp((char*) buffer, "b") == 0)
 8002206:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800220a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800220e:	499c      	ldr	r1, [pc, #624]	; (8002480 <ProcessUserInput+0x7f8>)
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	f7fd ffed 	bl	80001f0 <strcmp>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <ProcessUserInput+0x598>
  {
    NVIC_SystemReset();
 800221c:	f7ff fd1e 	bl	8001c5c <__NVIC_SystemReset>
  }

  //Wipe the Configuration of a controller
  if (strcmp((char*) buffer, "w") == 0)
 8002220:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002224:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002228:	4996      	ldr	r1, [pc, #600]	; (8002484 <ProcessUserInput+0x7fc>)
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	f7fd ffe0 	bl	80001f0 <strcmp>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10e      	bne.n	8002254 <ProcessUserInput+0x5cc>
  {
    Controller_WipeConfig(&TCB->Controller);
 8002236:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800223a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8002244:	4618      	mov	r0, r3
 8002246:	f001 f845 	bl	80032d4 <Controller_WipeConfig>
    USBSendString("Configuration wiped.\n");
 800224a:	488f      	ldr	r0, [pc, #572]	; (8002488 <ProcessUserInput+0x800>)
 800224c:	f001 f8a0 	bl	8003390 <USBSendString>
    return;
 8002250:	f000 bc72 	b.w	8002b38 <ProcessUserInput+0xeb0>
  }

  //Choose the Compensator to Configure
  if ((strcmp((char*) buffer, "1") == 0) || (strcmp((char*) buffer, "c1") == 0))
 8002254:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002258:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800225c:	498b      	ldr	r1, [pc, #556]	; (800248c <ProcessUserInput+0x804>)
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	f7fd ffc6 	bl	80001f0 <strcmp>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <ProcessUserInput+0x5f8>
 800226a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800226e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002272:	4987      	ldr	r1, [pc, #540]	; (8002490 <ProcessUserInput+0x808>)
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	f7fd ffbb 	bl	80001f0 <strcmp>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10e      	bne.n	800229e <ProcessUserInput+0x616>
  {
    UI_Controller = 0;
 8002280:	4b84      	ldr	r3, [pc, #528]	; (8002494 <ProcessUserInput+0x80c>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(&TCB->Controller);
 8002286:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800228a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fc6f 	bl	8002b78 <ShowControllerConfig>
    return;
 800229a:	f000 bc4d 	b.w	8002b38 <ProcessUserInput+0xeb0>
  }
  if ((strcmp((char*) buffer, "2") == 0) || (strcmp((char*) buffer, "c2") == 0))
 800229e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022a2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022a6:	497c      	ldr	r1, [pc, #496]	; (8002498 <ProcessUserInput+0x810>)
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	f7fd ffa1 	bl	80001f0 <strcmp>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <ProcessUserInput+0x642>
 80022b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022bc:	4977      	ldr	r1, [pc, #476]	; (800249c <ProcessUserInput+0x814>)
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	f7fd ff96 	bl	80001f0 <strcmp>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10e      	bne.n	80022e8 <ProcessUserInput+0x660>
  {
    UI_Controller = 1;
 80022ca:	4b72      	ldr	r3, [pc, #456]	; (8002494 <ProcessUserInput+0x80c>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(&TCB->Controller);
 80022d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f603 1318 	addw	r3, r3, #2328	; 0x918
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fc4a 	bl	8002b78 <ShowControllerConfig>
    return;
 80022e4:	f000 bc28 	b.w	8002b38 <ProcessUserInput+0xeb0>
  }

  if ((strcmp((char*) buffer, "3") == 0) || (strcmp((char*) buffer, "c3") == 0))
 80022e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022f0:	496b      	ldr	r1, [pc, #428]	; (80024a0 <ProcessUserInput+0x818>)
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	f7fd ff7c 	bl	80001f0 <strcmp>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <ProcessUserInput+0x68c>
 80022fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002302:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002306:	4967      	ldr	r1, [pc, #412]	; (80024a4 <ProcessUserInput+0x81c>)
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	f7fd ff71 	bl	80001f0 <strcmp>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10e      	bne.n	8002332 <ProcessUserInput+0x6aa>
  {
    UI_Controller = 2;
 8002314:	4b5f      	ldr	r3, [pc, #380]	; (8002494 <ProcessUserInput+0x80c>)
 8002316:	2202      	movs	r2, #2
 8002318:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(&TCB->Controller);
 800231a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800231e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fc25 	bl	8002b78 <ShowControllerConfig>
    return;
 800232e:	f000 bc03 	b.w	8002b38 <ProcessUserInput+0xeb0>
  }

  if ((strcmp((char*) buffer, "4") == 0) || (strcmp((char*) buffer, "c4") == 0))
 8002332:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002336:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800233a:	495b      	ldr	r1, [pc, #364]	; (80024a8 <ProcessUserInput+0x820>)
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	f7fd ff57 	bl	80001f0 <strcmp>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <ProcessUserInput+0x6d6>
 8002348:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800234c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002350:	4956      	ldr	r1, [pc, #344]	; (80024ac <ProcessUserInput+0x824>)
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	f7fd ff4c 	bl	80001f0 <strcmp>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10d      	bne.n	800237a <ProcessUserInput+0x6f2>
  {
    UI_Controller = 3;
 800235e:	4b4d      	ldr	r3, [pc, #308]	; (8002494 <ProcessUserInput+0x80c>)
 8002360:	2203      	movs	r2, #3
 8002362:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(&TCB->Controller);
 8002364:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002368:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fc00 	bl	8002b78 <ShowControllerConfig>
    return;
 8002378:	e3de      	b.n	8002b38 <ProcessUserInput+0xeb0>
  }
  if ((strcmp((char*) buffer, "5") == 0) || (strcmp((char*) buffer, "c5") == 0))
 800237a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800237e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002382:	494b      	ldr	r1, [pc, #300]	; (80024b0 <ProcessUserInput+0x828>)
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	f7fd ff33 	bl	80001f0 <strcmp>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <ProcessUserInput+0x71e>
 8002390:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002394:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002398:	4946      	ldr	r1, [pc, #280]	; (80024b4 <ProcessUserInput+0x82c>)
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	f7fd ff28 	bl	80001f0 <strcmp>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10d      	bne.n	80023c2 <ProcessUserInput+0x73a>
  {
    UI_Controller = 4;
 80023a6:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <ProcessUserInput+0x80c>)
 80023a8:	2204      	movs	r2, #4
 80023aa:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(&TCB->Controller);
 80023ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80023b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f603 1318 	addw	r3, r3, #2328	; 0x918
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fbdc 	bl	8002b78 <ShowControllerConfig>
    return;
 80023c0:	e3ba      	b.n	8002b38 <ProcessUserInput+0xeb0>
  }
  if ((strcmp((char*) buffer, "6") == 0) || (strcmp((char*) buffer, "c6") == 0))
 80023c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80023c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023ca:	493b      	ldr	r1, [pc, #236]	; (80024b8 <ProcessUserInput+0x830>)
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	f7fd ff0f 	bl	80001f0 <strcmp>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <ProcessUserInput+0x766>
 80023d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80023dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023e0:	4936      	ldr	r1, [pc, #216]	; (80024bc <ProcessUserInput+0x834>)
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	f7fd ff04 	bl	80001f0 <strcmp>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10d      	bne.n	800240a <ProcessUserInput+0x782>
  {
    UI_Controller = 5;
 80023ee:	4b29      	ldr	r3, [pc, #164]	; (8002494 <ProcessUserInput+0x80c>)
 80023f0:	2205      	movs	r2, #5
 80023f2:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(&TCB->Controller);
 80023f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80023f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fbb8 	bl	8002b78 <ShowControllerConfig>
    return;
 8002408:	e396      	b.n	8002b38 <ProcessUserInput+0xeb0>
  }
  //This is for the Heater
  if ((strcmp((char*) buffer, "7") == 0) || (strcmp((char*) buffer, "c7") == 0))
 800240a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800240e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002412:	492b      	ldr	r1, [pc, #172]	; (80024c0 <ProcessUserInput+0x838>)
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	f7fd feeb 	bl	80001f0 <strcmp>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <ProcessUserInput+0x7ae>
 8002420:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002424:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002428:	4926      	ldr	r1, [pc, #152]	; (80024c4 <ProcessUserInput+0x83c>)
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	f7fd fee0 	bl	80001f0 <strcmp>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10d      	bne.n	8002452 <ProcessUserInput+0x7ca>
  {
    UI_Controller = 6;
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <ProcessUserInput+0x80c>)
 8002438:	2206      	movs	r2, #6
 800243a:	701a      	strb	r2, [r3, #0]
    ShowControllerConfig(&TCB->Controller);
 800243c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002440:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f603 1318 	addw	r3, r3, #2328	; 0x918
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fb94 	bl	8002b78 <ShowControllerConfig>
    return;
 8002450:	e372      	b.n	8002b38 <ProcessUserInput+0xeb0>
  }
  
  
  if (UI_Controller == 9)
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <ProcessUserInput+0x80c>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b09      	cmp	r3, #9
 8002458:	d138      	bne.n	80024cc <ProcessUserInput+0x844>
  {
    USBSendString("No controller selected.\n");
 800245a:	481b      	ldr	r0, [pc, #108]	; (80024c8 <ProcessUserInput+0x840>)
 800245c:	f000 ff98 	bl	8003390 <USBSendString>
    return;
 8002460:	e36a      	b.n	8002b38 <ProcessUserInput+0xeb0>
 8002462:	bf00      	nop
 8002464:	08014070 	.word	0x08014070
 8002468:	080147cc 	.word	0x080147cc
 800246c:	0801407c 	.word	0x0801407c
 8002470:	08014050 	.word	0x08014050
 8002474:	080147d0 	.word	0x080147d0
 8002478:	08013ffc 	.word	0x08013ffc
 800247c:	080147ec 	.word	0x080147ec
 8002480:	08014084 	.word	0x08014084
 8002484:	08014090 	.word	0x08014090
 8002488:	08014814 	.word	0x08014814
 800248c:	0801482c 	.word	0x0801482c
 8002490:	08014830 	.word	0x08014830
 8002494:	2000000c 	.word	0x2000000c
 8002498:	08014834 	.word	0x08014834
 800249c:	08014838 	.word	0x08014838
 80024a0:	0801483c 	.word	0x0801483c
 80024a4:	08014840 	.word	0x08014840
 80024a8:	08014844 	.word	0x08014844
 80024ac:	08014848 	.word	0x08014848
 80024b0:	0801484c 	.word	0x0801484c
 80024b4:	08014850 	.word	0x08014850
 80024b8:	08014854 	.word	0x08014854
 80024bc:	08014858 	.word	0x08014858
 80024c0:	0801485c 	.word	0x0801485c
 80024c4:	08014860 	.word	0x08014860
 80024c8:	080147b0 	.word	0x080147b0
  }
  //Turn on the Temperature Controller
  if (strcmp((char*) buffer, "e") == 0)
 80024cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024d4:	49bd      	ldr	r1, [pc, #756]	; (80027cc <ProcessUserInput+0xb44>)
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	f7fd fe8a 	bl	80001f0 <strcmp>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d129      	bne.n	8002536 <ProcessUserInput+0x8ae>
  {
    if (UI_Controller == 6){
 80024e2:	4bbb      	ldr	r3, [pc, #748]	; (80027d0 <ProcessUserInput+0xb48>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d10b      	bne.n	8002502 <ProcessUserInput+0x87a>
      USBSendString("Controller enabled.\n");
 80024ea:	48ba      	ldr	r0, [pc, #744]	; (80027d4 <ProcessUserInput+0xb4c>)
 80024ec:	f000 ff50 	bl	8003390 <USBSendString>
      TCB->Controller.PID.Config.Enabled = true;
 80024f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2f74 	strb.w	r2, [r3, #3956]	; 0xf74
      return;
 8002500:	e31a      	b.n	8002b38 <ProcessUserInput+0xeb0>
    }
    //Check to see if the controller is a Compensator
    if (UI_Controller < 6){
 8002502:	4bb3      	ldr	r3, [pc, #716]	; (80027d0 <ProcessUserInput+0xb48>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b05      	cmp	r3, #5
 8002508:	d815      	bhi.n	8002536 <ProcessUserInput+0x8ae>
      USBSendString("Compensator enabled.\n");
 800250a:	48b3      	ldr	r0, [pc, #716]	; (80027d8 <ProcessUserInput+0xb50>)
 800250c:	f000 ff40 	bl	8003390 <USBSendString>
      TCB->Compensator[UI_Controller].Enable = true;
 8002510:	4baf      	ldr	r3, [pc, #700]	; (80027d0 <ProcessUserInput+0xb48>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800251a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	460b      	mov	r3, r1
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	440b      	add	r3, r1
 8002526:	019b      	lsls	r3, r3, #6
 8002528:	4413      	add	r3, r2
 800252a:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 800252e:	330c      	adds	r3, #12
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
      return;
 8002534:	e300      	b.n	8002b38 <ProcessUserInput+0xeb0>
    }
  }
  //Turn off the Temperature Controller
  if (strcmp((char*) buffer, "d") == 0)
 8002536:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800253a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800253e:	49a7      	ldr	r1, [pc, #668]	; (80027dc <ProcessUserInput+0xb54>)
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	f7fd fe55 	bl	80001f0 <strcmp>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d129      	bne.n	80025a0 <ProcessUserInput+0x918>
  {

    if (UI_Controller == 6){
 800254c:	4ba0      	ldr	r3, [pc, #640]	; (80027d0 <ProcessUserInput+0xb48>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b06      	cmp	r3, #6
 8002552:	d10b      	bne.n	800256c <ProcessUserInput+0x8e4>
      USBSendString("Controller disabled.\n");
 8002554:	48a2      	ldr	r0, [pc, #648]	; (80027e0 <ProcessUserInput+0xb58>)
 8002556:	f000 ff1b 	bl	8003390 <USBSendString>
      TCB->Controller.PID.Config.Enabled = false;
 800255a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800255e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2f74 	strb.w	r2, [r3, #3956]	; 0xf74
      return;
 800256a:	e2e5      	b.n	8002b38 <ProcessUserInput+0xeb0>
    }
    //Check to see if the controller is a Compensator
    if (UI_Controller < 6){
 800256c:	4b98      	ldr	r3, [pc, #608]	; (80027d0 <ProcessUserInput+0xb48>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b05      	cmp	r3, #5
 8002572:	d815      	bhi.n	80025a0 <ProcessUserInput+0x918>
      USBSendString("Compensator disabled.\n");
 8002574:	489b      	ldr	r0, [pc, #620]	; (80027e4 <ProcessUserInput+0xb5c>)
 8002576:	f000 ff0b 	bl	8003390 <USBSendString>
      TCB->Compensator[UI_Controller].Enable = false;
 800257a:	4b95      	ldr	r3, [pc, #596]	; (80027d0 <ProcessUserInput+0xb48>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	4619      	mov	r1, r3
 8002580:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002584:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	460b      	mov	r3, r1
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	440b      	add	r3, r1
 8002590:	019b      	lsls	r3, r3, #6
 8002592:	4413      	add	r3, r2
 8002594:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 8002598:	330c      	adds	r3, #12
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
      return;
 800259e:	e2cb      	b.n	8002b38 <ProcessUserInput+0xeb0>
    }
  }
  //if the incoming command is a {character}{Float}
  if (sscanf((char*) buffer, "%c%f", &c, &f) == 2)
 80025a0:	f107 0310 	add.w	r3, r7, #16
 80025a4:	f107 0217 	add.w	r2, r7, #23
 80025a8:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80025ac:	f5a1 7088 	sub.w	r0, r1, #272	; 0x110
 80025b0:	498d      	ldr	r1, [pc, #564]	; (80027e8 <ProcessUserInput+0xb60>)
 80025b2:	6800      	ldr	r0, [r0, #0]
 80025b4:	f00d fad4 	bl	800fb60 <siscanf>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	f040 82bc 	bne.w	8002b38 <ProcessUserInput+0xeb0>
  {
    //Convert number to an integer
    u = (uint8_t) f;
 80025c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025c8:	edd3 7a00 	vldr	s15, [r3]
 80025cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80025d4:	793b      	ldrb	r3, [r7, #4]
 80025d6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    //Switch on the character
    switch (c)
 80025da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025de:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	3b61      	subs	r3, #97	; 0x61
 80025e6:	2b15      	cmp	r3, #21
 80025e8:	f200 82a1 	bhi.w	8002b2e <ProcessUserInput+0xea6>
 80025ec:	a201      	add	r2, pc, #4	; (adr r2, 80025f4 <ProcessUserInput+0x96c>)
 80025ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f2:	bf00      	nop
 80025f4:	08002655 	.word	0x08002655
 80025f8:	08002b2f 	.word	0x08002b2f
 80025fc:	0800264d 	.word	0x0800264d
 8002600:	080028bb 	.word	0x080028bb
 8002604:	08002b2f 	.word	0x08002b2f
 8002608:	08002923 	.word	0x08002923
 800260c:	08002b2f 	.word	0x08002b2f
 8002610:	08002a3b 	.word	0x08002a3b
 8002614:	08002853 	.word	0x08002853
 8002618:	08002b2f 	.word	0x08002b2f
 800261c:	08002b2f 	.word	0x08002b2f
 8002620:	080029d3 	.word	0x080029d3
 8002624:	08002b2f 	.word	0x08002b2f
 8002628:	08002b2f 	.word	0x08002b2f
 800262c:	08002b2f 	.word	0x08002b2f
 8002630:	080027ad 	.word	0x080027ad
 8002634:	08002b2f 	.word	0x08002b2f
 8002638:	08002b2f 	.word	0x08002b2f
 800263c:	08002b2f 	.word	0x08002b2f
 8002640:	08002a79 	.word	0x08002a79
 8002644:	08002b2f 	.word	0x08002b2f
 8002648:	08002ac3 	.word	0x08002ac3
    {
      //User is trying to set the Channel
      case 'c':
        // we shouldn't get here if a valid number was used
        USBSendString("Invalid controller number.\n");
 800264c:	4867      	ldr	r0, [pc, #412]	; (80027ec <ProcessUserInput+0xb64>)
 800264e:	f000 fe9f 	bl	8003390 <USBSendString>
        return;
 8002652:	e271      	b.n	8002b38 <ProcessUserInput+0xeb0>
        break;
      //User is trying to set the Sensor Address
      case 'a':
        switch (u)
 8002654:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002658:	2b0b      	cmp	r3, #11
 800265a:	f200 80a3 	bhi.w	80027a4 <ProcessUserInput+0xb1c>
 800265e:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <ProcessUserInput+0x9dc>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	08002695 	.word	0x08002695
 8002668:	0800271d 	.word	0x0800271d
 800266c:	080027a5 	.word	0x080027a5
 8002670:	080027a5 	.word	0x080027a5
 8002674:	080027a5 	.word	0x080027a5
 8002678:	080027a5 	.word	0x080027a5
 800267c:	080027a5 	.word	0x080027a5
 8002680:	080027a5 	.word	0x080027a5
 8002684:	080027a5 	.word	0x080027a5
 8002688:	080027a5 	.word	0x080027a5
 800268c:	080026d9 	.word	0x080026d9
 8002690:	08002761 	.word	0x08002761
        {
          case 0:
            USBSendString("Address set to 0b 10 01 00 0x.\n");
 8002694:	4856      	ldr	r0, [pc, #344]	; (80027f0 <ProcessUserInput+0xb68>)
 8002696:	f000 fe7b 	bl	8003390 <USBSendString>
            if(UI_Controller == 6){
 800269a:	4b4d      	ldr	r3, [pc, #308]	; (80027d0 <ProcessUserInput+0xb48>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b06      	cmp	r3, #6
 80026a0:	d108      	bne.n	80026b4 <ProcessUserInput+0xa2c>
              TCB->Controller.Sensor.Address = 0b1001000;
 80026a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2248      	movs	r2, #72	; 0x48
 80026ae:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
            }else{
              TCB->Compensator[UI_Controller].Sensor.Address = 0b1001000;
            }
            return;
 80026b2:	e241      	b.n	8002b38 <ProcessUserInput+0xeb0>
              TCB->Compensator[UI_Controller].Sensor.Address = 0b1001000;
 80026b4:	4b46      	ldr	r3, [pc, #280]	; (80027d0 <ProcessUserInput+0xb48>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	460b      	mov	r3, r1
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	019b      	lsls	r3, r3, #6
 80026cc:	4413      	add	r3, r2
 80026ce:	f603 7378 	addw	r3, r3, #3960	; 0xf78
 80026d2:	2248      	movs	r2, #72	; 0x48
 80026d4:	701a      	strb	r2, [r3, #0]
            return;
 80026d6:	e22f      	b.n	8002b38 <ProcessUserInput+0xeb0>
            break;
          case 10:
            USBSendString("Address set to 0b 10 01 01 0x.\n");
 80026d8:	4846      	ldr	r0, [pc, #280]	; (80027f4 <ProcessUserInput+0xb6c>)
 80026da:	f000 fe59 	bl	8003390 <USBSendString>
            if(UI_Controller == 6){
 80026de:	4b3c      	ldr	r3, [pc, #240]	; (80027d0 <ProcessUserInput+0xb48>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d108      	bne.n	80026f8 <ProcessUserInput+0xa70>
              TCB->Controller.Sensor.Address = 0b1001010;
 80026e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	224a      	movs	r2, #74	; 0x4a
 80026f2:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
            }else{
              TCB->Compensator[UI_Controller].Sensor.Address = 0b1001010;
            }
            
            return;
 80026f6:	e21f      	b.n	8002b38 <ProcessUserInput+0xeb0>
              TCB->Compensator[UI_Controller].Sensor.Address = 0b1001010;
 80026f8:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <ProcessUserInput+0xb48>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002702:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	460b      	mov	r3, r1
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	019b      	lsls	r3, r3, #6
 8002710:	4413      	add	r3, r2
 8002712:	f603 7378 	addw	r3, r3, #3960	; 0xf78
 8002716:	224a      	movs	r2, #74	; 0x4a
 8002718:	701a      	strb	r2, [r3, #0]
            return;
 800271a:	e20d      	b.n	8002b38 <ProcessUserInput+0xeb0>
            break;
          case 1:
            USBSendString("Address set to 0b 10 01 00 1x.\n");
 800271c:	4836      	ldr	r0, [pc, #216]	; (80027f8 <ProcessUserInput+0xb70>)
 800271e:	f000 fe37 	bl	8003390 <USBSendString>
            if(UI_Controller == 6){
 8002722:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <ProcessUserInput+0xb48>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b06      	cmp	r3, #6
 8002728:	d108      	bne.n	800273c <ProcessUserInput+0xab4>
              TCB->Controller.Sensor.Address = 0b1001001;
 800272a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800272e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2249      	movs	r2, #73	; 0x49
 8002736:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
            }else{
              TCB->Compensator[UI_Controller].Sensor.Address = 0b1001001;
            }
            return;
 800273a:	e1fd      	b.n	8002b38 <ProcessUserInput+0xeb0>
              TCB->Compensator[UI_Controller].Sensor.Address = 0b1001001;
 800273c:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <ProcessUserInput+0xb48>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002746:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	460b      	mov	r3, r1
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	440b      	add	r3, r1
 8002752:	019b      	lsls	r3, r3, #6
 8002754:	4413      	add	r3, r2
 8002756:	f603 7378 	addw	r3, r3, #3960	; 0xf78
 800275a:	2249      	movs	r2, #73	; 0x49
 800275c:	701a      	strb	r2, [r3, #0]
            return;
 800275e:	e1eb      	b.n	8002b38 <ProcessUserInput+0xeb0>
            break;
          case 11:
            USBSendString("Address set to 0b 10 01 01 1x.\n");
 8002760:	4826      	ldr	r0, [pc, #152]	; (80027fc <ProcessUserInput+0xb74>)
 8002762:	f000 fe15 	bl	8003390 <USBSendString>
            if(UI_Controller == 6){
 8002766:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <ProcessUserInput+0xb48>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b06      	cmp	r3, #6
 800276c:	d108      	bne.n	8002780 <ProcessUserInput+0xaf8>
              TCB->Controller.Sensor.Address = 0b1001011;
 800276e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002772:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	224b      	movs	r2, #75	; 0x4b
 800277a:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
            }else{
              TCB->Compensator[UI_Controller].Sensor.Address = 0b1001011;
            }
            return;
 800277e:	e1db      	b.n	8002b38 <ProcessUserInput+0xeb0>
              TCB->Compensator[UI_Controller].Sensor.Address = 0b1001011;
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <ProcessUserInput+0xb48>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4619      	mov	r1, r3
 8002786:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800278a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	460b      	mov	r3, r1
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	019b      	lsls	r3, r3, #6
 8002798:	4413      	add	r3, r2
 800279a:	f603 7378 	addw	r3, r3, #3960	; 0xf78
 800279e:	224b      	movs	r2, #75	; 0x4b
 80027a0:	701a      	strb	r2, [r3, #0]
            return;
 80027a2:	e1c9      	b.n	8002b38 <ProcessUserInput+0xeb0>
            break;
          default:
            USBSendString("Invalid Address.\n");
 80027a4:	4816      	ldr	r0, [pc, #88]	; (8002800 <ProcessUserInput+0xb78>)
 80027a6:	f000 fdf3 	bl	8003390 <USBSendString>
            return;
 80027aa:	e1c5      	b.n	8002b38 <ProcessUserInput+0xeb0>
          TCB->Compensator[UI_Controller].Sensor.Configured = false;
          TCB->Compensator[UI_Controller].Sensor.State = 0;
        break;
      //Set KP
      case 'p':
        if (f < 0)
 80027ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80027b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027b4:	edd3 7a00 	vldr	s15, [r3]
 80027b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c0:	d522      	bpl.n	8002808 <ProcessUserInput+0xb80>
          USBSendString("Invalid value.");
 80027c2:	4810      	ldr	r0, [pc, #64]	; (8002804 <ProcessUserInput+0xb7c>)
 80027c4:	f000 fde4 	bl	8003390 <USBSendString>
        {
          snprintf(output, 200, "kp set to %f.\n", f);
          USBSendString(output);
          TCB->Controller.PID.Config.Kp = f;
        }
        return;
 80027c8:	e1b6      	b.n	8002b38 <ProcessUserInput+0xeb0>
 80027ca:	bf00      	nop
 80027cc:	08014864 	.word	0x08014864
 80027d0:	2000000c 	.word	0x2000000c
 80027d4:	08014868 	.word	0x08014868
 80027d8:	08014880 	.word	0x08014880
 80027dc:	08013fec 	.word	0x08013fec
 80027e0:	08014898 	.word	0x08014898
 80027e4:	080148b0 	.word	0x080148b0
 80027e8:	080148c8 	.word	0x080148c8
 80027ec:	080148d0 	.word	0x080148d0
 80027f0:	080148ec 	.word	0x080148ec
 80027f4:	0801490c 	.word	0x0801490c
 80027f8:	0801492c 	.word	0x0801492c
 80027fc:	0801494c 	.word	0x0801494c
 8002800:	0801496c 	.word	0x0801496c
 8002804:	08014980 	.word	0x08014980
          snprintf(output, 200, "kp set to %f.\n", f);
 8002808:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800280c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd feb8 	bl	8000588 <__aeabi_f2d>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	f107 0018 	add.w	r0, r7, #24
 8002820:	e9cd 2300 	strd	r2, r3, [sp]
 8002824:	4ac6      	ldr	r2, [pc, #792]	; (8002b40 <ProcessUserInput+0xeb8>)
 8002826:	21c8      	movs	r1, #200	; 0xc8
 8002828:	f00d f946 	bl	800fab8 <sniprintf>
          USBSendString(output);
 800282c:	f107 0318 	add.w	r3, r7, #24
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fdad 	bl	8003390 <USBSendString>
          TCB->Controller.PID.Config.Kp = f;
 8002836:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800283a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002844:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800284e:	601a      	str	r2, [r3, #0]
        return;
 8002850:	e172      	b.n	8002b38 <ProcessUserInput+0xeb0>
        break;
      //Set KI
      case 'i':
        if (f < 0)
 8002852:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002866:	d503      	bpl.n	8002870 <ProcessUserInput+0xbe8>
          USBSendString("Invalid value.");
 8002868:	48b6      	ldr	r0, [pc, #728]	; (8002b44 <ProcessUserInput+0xebc>)
 800286a:	f000 fd91 	bl	8003390 <USBSendString>
        {
          snprintf(output, 200, "ki set to %f.\n", f);
          USBSendString(output);
          TCB->Controller.PID.Config.Ki = f;
        }
        return;
 800286e:	e163      	b.n	8002b38 <ProcessUserInput+0xeb0>
          snprintf(output, 200, "ki set to %f.\n", f);
 8002870:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd fe84 	bl	8000588 <__aeabi_f2d>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	f107 0018 	add.w	r0, r7, #24
 8002888:	e9cd 2300 	strd	r2, r3, [sp]
 800288c:	4aae      	ldr	r2, [pc, #696]	; (8002b48 <ProcessUserInput+0xec0>)
 800288e:	21c8      	movs	r1, #200	; 0xc8
 8002890:	f00d f912 	bl	800fab8 <sniprintf>
          USBSendString(output);
 8002894:	f107 0318 	add.w	r3, r7, #24
 8002898:	4618      	mov	r0, r3
 800289a:	f000 fd79 	bl	8003390 <USBSendString>
          TCB->Controller.PID.Config.Ki = f;
 800289e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f603 7368 	addw	r3, r3, #3944	; 0xf68
 80028b6:	601a      	str	r2, [r3, #0]
        return;
 80028b8:	e13e      	b.n	8002b38 <ProcessUserInput+0xeb0>
        break;
      //Set KD
      case 'd':
        if (f < 0)
 80028ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ce:	d503      	bpl.n	80028d8 <ProcessUserInput+0xc50>
          USBSendString("Invalid value.");
 80028d0:	489c      	ldr	r0, [pc, #624]	; (8002b44 <ProcessUserInput+0xebc>)
 80028d2:	f000 fd5d 	bl	8003390 <USBSendString>
        {
          snprintf(output, 200, "kd set to %f.\n", f);
          USBSendString(output);
          TCB->Controller.PID.Config.Kd = f;
        }
        return;
 80028d6:	e12f      	b.n	8002b38 <ProcessUserInput+0xeb0>
          snprintf(output, 200, "kd set to %f.\n", f);
 80028d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fe50 	bl	8000588 <__aeabi_f2d>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	f107 0018 	add.w	r0, r7, #24
 80028f0:	e9cd 2300 	strd	r2, r3, [sp]
 80028f4:	4a95      	ldr	r2, [pc, #596]	; (8002b4c <ProcessUserInput+0xec4>)
 80028f6:	21c8      	movs	r1, #200	; 0xc8
 80028f8:	f00d f8de 	bl	800fab8 <sniprintf>
          USBSendString(output);
 80028fc:	f107 0318 	add.w	r3, r7, #24
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fd45 	bl	8003390 <USBSendString>
          TCB->Controller.PID.Config.Kd = f;
 8002906:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800290a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002914:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f603 736c 	addw	r3, r3, #3948	; 0xf6c
 800291e:	601a      	str	r2, [r3, #0]
        return;
 8002920:	e10a      	b.n	8002b38 <ProcessUserInput+0xeb0>
        break;
      //Set the Frequency at which the Duty Cycle is updated
      case 'f':
        if ((f < 0) || (f > 600))
 8002922:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800292a:	edd3 7a00 	vldr	s15, [r3]
 800292e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002936:	d40c      	bmi.n	8002952 <ProcessUserInput+0xcca>
 8002938:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800293c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002b50 <ProcessUserInput+0xec8>
 8002948:	eef4 7ac7 	vcmpe.f32	s15, s14
 800294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002950:	dd03      	ble.n	800295a <ProcessUserInput+0xcd2>
          USBSendString("Invalid value.");
 8002952:	487c      	ldr	r0, [pc, #496]	; (8002b44 <ProcessUserInput+0xebc>)
 8002954:	f000 fd1c 	bl	8003390 <USBSendString>
        {
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
          USBSendString(output);
          TCB->Controller.PID.Config.Frequency = f;
        }
        return;
 8002958:	e0ee      	b.n	8002b38 <ProcessUserInput+0xeb0>
          snprintf(output, 200, "Frequency set to %.0f (%.2f Hz).\n", f, f/40);
 800295a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800295e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7fd fe0f 	bl	8000588 <__aeabi_f2d>
 800296a:	4604      	mov	r4, r0
 800296c:	460d      	mov	r5, r1
 800296e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002b54 <ProcessUserInput+0xecc>
 800297e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002982:	ee16 0a90 	vmov	r0, s13
 8002986:	f7fd fdff 	bl	8000588 <__aeabi_f2d>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	f107 0018 	add.w	r0, r7, #24
 8002992:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002996:	e9cd 4500 	strd	r4, r5, [sp]
 800299a:	4a6f      	ldr	r2, [pc, #444]	; (8002b58 <ProcessUserInput+0xed0>)
 800299c:	21c8      	movs	r1, #200	; 0xc8
 800299e:	f00d f88b 	bl	800fab8 <sniprintf>
          USBSendString(output);
 80029a2:	f107 0318 	add.w	r3, r7, #24
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fcf2 	bl	8003390 <USBSendString>
          TCB->Controller.PID.Config.Frequency = f;
 80029ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80029b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029b4:	edd3 7a00 	vldr	s15, [r3]
 80029b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029bc:	ee17 3a90 	vmov	r3, s15
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80029c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8a3 2f76 	strh.w	r2, [r3, #3958]	; 0xf76
        return;
 80029d0:	e0b2      	b.n	8002b38 <ProcessUserInput+0xeb0>
        break;

      //Set the Limit of the Integrator
      case 'l':
        if (f < 0)
 80029d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80029d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e6:	d503      	bpl.n	80029f0 <ProcessUserInput+0xd68>
          USBSendString("Invalid value.");
 80029e8:	4856      	ldr	r0, [pc, #344]	; (8002b44 <ProcessUserInput+0xebc>)
 80029ea:	f000 fcd1 	bl	8003390 <USBSendString>
        {
          snprintf(output, 200, "Li set to %f.\n", f);
          USBSendString(output);
          TCB->Controller.PID.Config.Li = f;
        }
        return;
 80029ee:	e0a3      	b.n	8002b38 <ProcessUserInput+0xeb0>
          snprintf(output, 200, "Li set to %f.\n", f);
 80029f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80029f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fd fdc4 	bl	8000588 <__aeabi_f2d>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	f107 0018 	add.w	r0, r7, #24
 8002a08:	e9cd 2300 	strd	r2, r3, [sp]
 8002a0c:	4a53      	ldr	r2, [pc, #332]	; (8002b5c <ProcessUserInput+0xed4>)
 8002a0e:	21c8      	movs	r1, #200	; 0xc8
 8002a10:	f00d f852 	bl	800fab8 <sniprintf>
          USBSendString(output);
 8002a14:	f107 0318 	add.w	r3, r7, #24
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fcb9 	bl	8003390 <USBSendString>
          TCB->Controller.PID.Config.Li = f;
 8002a1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a2c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f503 6377 	add.w	r3, r3, #3952	; 0xf70
 8002a36:	601a      	str	r2, [r3, #0]
        return;
 8002a38:	e07e      	b.n	8002b38 <ProcessUserInput+0xeb0>
        break;
      //Set the History of the PID
      case 'h':
        if (u == 0)
 8002a3a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d103      	bne.n	8002a4a <ProcessUserInput+0xdc2>
          USBSendString("Invalid value.");
 8002a42:	4840      	ldr	r0, [pc, #256]	; (8002b44 <ProcessUserInput+0xebc>)
 8002a44:	f000 fca4 	bl	8003390 <USBSendString>
        {
          snprintf(output, 200, "History set to %u.\n", u);
          USBSendString(output);
          TCB->Controller.PID.Config.History = u;
        }
        return;
 8002a48:	e076      	b.n	8002b38 <ProcessUserInput+0xeb0>
          snprintf(output, 200, "History set to %u.\n", u);
 8002a4a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002a4e:	f107 0018 	add.w	r0, r7, #24
 8002a52:	4a43      	ldr	r2, [pc, #268]	; (8002b60 <ProcessUserInput+0xed8>)
 8002a54:	21c8      	movs	r1, #200	; 0xc8
 8002a56:	f00d f82f 	bl	800fab8 <sniprintf>
          USBSendString(output);
 8002a5a:	f107 0318 	add.w	r3, r7, #24
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fc96 	bl	8003390 <USBSendString>
          TCB->Controller.PID.Config.History = u;
 8002a64:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 8002a72:	f883 2f75 	strb.w	r2, [r3, #3957]	; 0xf75
        return;
 8002a76:	e05f      	b.n	8002b38 <ProcessUserInput+0xeb0>
        break;
      //Set the Target Temperature
      case 't':
        snprintf(output, 200, "Target temperature set to %f.\n", f);
 8002a78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd80 	bl	8000588 <__aeabi_f2d>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	f107 0018 	add.w	r0, r7, #24
 8002a90:	e9cd 2300 	strd	r2, r3, [sp]
 8002a94:	4a33      	ldr	r2, [pc, #204]	; (8002b64 <ProcessUserInput+0xedc>)
 8002a96:	21c8      	movs	r1, #200	; 0xc8
 8002a98:	f00d f80e 	bl	800fab8 <sniprintf>
        USBSendString(output);
 8002a9c:	f107 0318 	add.w	r3, r7, #24
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fc75 	bl	8003390 <USBSendString>
        TCB->Controller.PID.Config.TargetP = f;
 8002aa6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002ab4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f503 6376 	add.w	r3, r3, #3936	; 0xf60
 8002abe:	601a      	str	r2, [r3, #0]
        return;
 8002ac0:	e03a      	b.n	8002b38 <ProcessUserInput+0xeb0>
        break;
      //Set the Voltage of the DAC Channel
      case 'v':
    	  snprintf(output, 200, "Voltage of DAC Channel 0 set to %f.\n", f);
 8002ac2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fd5b 	bl	8000588 <__aeabi_f2d>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	f107 0018 	add.w	r0, r7, #24
 8002ada:	e9cd 2300 	strd	r2, r3, [sp]
 8002ade:	4a22      	ldr	r2, [pc, #136]	; (8002b68 <ProcessUserInput+0xee0>)
 8002ae0:	21c8      	movs	r1, #200	; 0xc8
 8002ae2:	f00c ffe9 	bl	800fab8 <sniprintf>
    	  USBSendString(output);
 8002ae6:	f107 0318 	add.w	r3, r7, #24
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fc50 	bl	8003390 <USBSendString>
    	  if((UI_Controller > 5)||(UI_Controller < 0)){
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <ProcessUserInput+0xee4>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d903      	bls.n	8002b00 <ProcessUserInput+0xe78>
          USBSendString("Invalid Controller.\n");
 8002af8:	481d      	ldr	r0, [pc, #116]	; (8002b70 <ProcessUserInput+0xee8>)
 8002afa:	f000 fc49 	bl	8003390 <USBSendString>
          return;
 8002afe:	e01b      	b.n	8002b38 <ProcessUserInput+0xeb0>
    	  }else{
        	TCB->Compensator[UI_Controller].voltage = f;
 8002b00:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <ProcessUserInput+0xee4>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002b14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b18:	6819      	ldr	r1, [r3, #0]
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4403      	add	r3, r0
 8002b20:	019b      	lsls	r3, r3, #6
 8002b22:	440b      	add	r3, r1
 8002b24:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 8002b28:	3314      	adds	r3, #20
 8002b2a:	601a      	str	r2, [r3, #0]
    	  }
    	  return;
 8002b2c:	e004      	b.n	8002b38 <ProcessUserInput+0xeb0>
    	  break;

      default:
        break;
 8002b2e:	bf00      	nop
    }
  }
  USBSendString("Unknown command.\n");
 8002b30:	4810      	ldr	r0, [pc, #64]	; (8002b74 <ProcessUserInput+0xeec>)
 8002b32:	f000 fc2d 	bl	8003390 <USBSendString>
  return;
 8002b36:	bf00      	nop
}
}
 8002b38:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b40:	08014990 	.word	0x08014990
 8002b44:	08014980 	.word	0x08014980
 8002b48:	080149a0 	.word	0x080149a0
 8002b4c:	080149b0 	.word	0x080149b0
 8002b50:	44160000 	.word	0x44160000
 8002b54:	42200000 	.word	0x42200000
 8002b58:	080149c0 	.word	0x080149c0
 8002b5c:	080149e4 	.word	0x080149e4
 8002b60:	080149f4 	.word	0x080149f4
 8002b64:	08014a08 	.word	0x08014a08
 8002b68:	08014a28 	.word	0x08014a28
 8002b6c:	2000000c 	.word	0x2000000c
 8002b70:	08014a50 	.word	0x08014a50
 8002b74:	08014a68 	.word	0x08014a68

08002b78 <ShowControllerConfig>:
//Show the Configuration of a Controller
void ShowControllerConfig(struct sController* Controller)
{
 8002b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7c:	b0d1      	sub	sp, #324	; 0x144
 8002b7e:	af0c      	add	r7, sp, #48	; 0x30
 8002b80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b88:	6018      	str	r0, [r3, #0]
  char s1[12];
  char buffer[250];
  FormatTemperature(s1, Controller->PID.Config.TargetP);
 8002b8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fcf4 	bl	8000588 <__aeabi_f2d>
 8002ba0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002ba4:	ec41 0b10 	vmov	d0, r0, r1
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fafd 	bl	80031a8 <FormatTemperature>
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002bae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	603b      	str	r3, [r7, #0]
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002bbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bc0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002bca:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fcdb 	bl	8000588 <__aeabi_f2d>
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	460d      	mov	r5, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002bd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002be4:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fcce 	bl	8000588 <__aeabi_f2d>
 8002bec:	4680      	mov	r8, r0
 8002bee:	4689      	mov	r9, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002bf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002bf4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002bfe:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fd fcc1 	bl	8000588 <__aeabi_f2d>
 8002c06:	4682      	mov	sl, r0
 8002c08:	468b      	mov	fp, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002c0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8002c18:	681b      	ldr	r3, [r3, #0]
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fcb4 	bl	8000588 <__aeabi_f2d>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002c24:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002c28:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002c2c:	6809      	ldr	r1, [r1, #0]
 8002c2e:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002c32:	460e      	mov	r6, r1
      Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki, Controller->PID.Config.Li, s1, Controller->PID.Config.History, Controller->PID.Config.Frequency);
 8002c34:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002c38:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002c3c:	6809      	ldr	r1, [r1, #0]
 8002c3e:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
  snprintf(buffer, 200, "C%u: kp=%6.2f  kd=%6.2f  ki=%6.2f  li=%6.2f  target=%8s  history= %3u  frequency= %04u  address=", Controller->Heater,
 8002c42:	f107 0008 	add.w	r0, r7, #8
 8002c46:	910a      	str	r1, [sp, #40]	; 0x28
 8002c48:	9609      	str	r6, [sp, #36]	; 0x24
 8002c4a:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8002c4e:	9108      	str	r1, [sp, #32]
 8002c50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002c54:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002c58:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002c5c:	e9cd 4500 	strd	r4, r5, [sp]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4a23      	ldr	r2, [pc, #140]	; (8002cf0 <ShowControllerConfig+0x178>)
 8002c64:	21c8      	movs	r1, #200	; 0xc8
 8002c66:	f00c ff27 	bl	800fab8 <sniprintf>
  USBSendString(buffer);
 8002c6a:	f107 0308 	add.w	r3, r7, #8
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fb8e 	bl	8003390 <USBSendString>
  switch (Controller->Sensor.Address & 0x03)
 8002c74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002c78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	7a1b      	ldrb	r3, [r3, #8]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d81b      	bhi.n	8002cc0 <ShowControllerConfig+0x148>
 8002c88:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <ShowControllerConfig+0x118>)
 8002c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8e:	bf00      	nop
 8002c90:	08002ca1 	.word	0x08002ca1
 8002c94:	08002ca9 	.word	0x08002ca9
 8002c98:	08002cb1 	.word	0x08002cb1
 8002c9c:	08002cb9 	.word	0x08002cb9
  {
    case 0:
      USBSendString("00");
 8002ca0:	4814      	ldr	r0, [pc, #80]	; (8002cf4 <ShowControllerConfig+0x17c>)
 8002ca2:	f000 fb75 	bl	8003390 <USBSendString>
      break;
 8002ca6:	e00c      	b.n	8002cc2 <ShowControllerConfig+0x14a>
    case 1:
      USBSendString("01");
 8002ca8:	4813      	ldr	r0, [pc, #76]	; (8002cf8 <ShowControllerConfig+0x180>)
 8002caa:	f000 fb71 	bl	8003390 <USBSendString>
      break;
 8002cae:	e008      	b.n	8002cc2 <ShowControllerConfig+0x14a>
    case 2:
      USBSendString("10");
 8002cb0:	4812      	ldr	r0, [pc, #72]	; (8002cfc <ShowControllerConfig+0x184>)
 8002cb2:	f000 fb6d 	bl	8003390 <USBSendString>
      break;
 8002cb6:	e004      	b.n	8002cc2 <ShowControllerConfig+0x14a>
    case 3:
      USBSendString("11");
 8002cb8:	4811      	ldr	r0, [pc, #68]	; (8002d00 <ShowControllerConfig+0x188>)
 8002cba:	f000 fb69 	bl	8003390 <USBSendString>
      break;
 8002cbe:	e000      	b.n	8002cc2 <ShowControllerConfig+0x14a>
    default:
      break;
 8002cc0:	bf00      	nop
  }
  if (Controller->PID.Config.Enabled)
 8002cc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002cc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <ShowControllerConfig+0x164>
    USBSendString("  ENABLED\n");
 8002cd4:	480b      	ldr	r0, [pc, #44]	; (8002d04 <ShowControllerConfig+0x18c>)
 8002cd6:	f000 fb5b 	bl	8003390 <USBSendString>
  else
    USBSendString("  DISABLED\n");
}
 8002cda:	e002      	b.n	8002ce2 <ShowControllerConfig+0x16a>
    USBSendString("  DISABLED\n");
 8002cdc:	480a      	ldr	r0, [pc, #40]	; (8002d08 <ShowControllerConfig+0x190>)
 8002cde:	f000 fb57 	bl	8003390 <USBSendString>
}
 8002ce2:	bf00      	nop
 8002ce4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cee:	bf00      	nop
 8002cf0:	08014a7c 	.word	0x08014a7c
 8002cf4:	08014ae0 	.word	0x08014ae0
 8002cf8:	08014ae4 	.word	0x08014ae4
 8002cfc:	08014ae8 	.word	0x08014ae8
 8002d00:	08014aec 	.word	0x08014aec
 8002d04:	08014af0 	.word	0x08014af0
 8002d08:	08014afc 	.word	0x08014afc

08002d0c <ShowAll>:
//Show the Status of a Controller
//@brief Show the Status of a Controller
//@param Controller The Controller to show
//@param readable If true, show the status in human readable form
void ShowAll(struct sController* Controller, bool readable)
{
 8002d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d10:	b0b7      	sub	sp, #220	; 0xdc
 8002d12:	af16      	add	r7, sp, #88	; 0x58
 8002d14:	6278      	str	r0, [r7, #36]	; 0x24
 8002d16:	460b      	mov	r3, r1
 8002d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint32_t ADCVal = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint8_t i;
    char target[12];
    FormatTemperature(target, Controller->PID.Config.TargetP);
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd fc2d 	bl	8000588 <__aeabi_f2d>
 8002d2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d32:	ec41 0b10 	vmov	d0, r0, r1
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fa36 	bl	80031a8 <FormatTemperature>
    char address[3];
    switch (Controller->Sensor.Address & 0x03)
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	7a1b      	ldrb	r3, [r3, #8]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d833      	bhi.n	8002db0 <ShowAll+0xa4>
 8002d48:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <ShowAll+0x44>)
 8002d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4e:	bf00      	nop
 8002d50:	08002d61 	.word	0x08002d61
 8002d54:	08002d75 	.word	0x08002d75
 8002d58:	08002d89 	.word	0x08002d89
 8002d5c:	08002d9d 	.word	0x08002d9d
    {
      case 0: strcpy(address, "00"); break;
 8002d60:	4aaa      	ldr	r2, [pc, #680]	; (800300c <ShowAll+0x300>)
 8002d62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	4611      	mov	r1, r2
 8002d6a:	8019      	strh	r1, [r3, #0]
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	0c12      	lsrs	r2, r2, #16
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e01e      	b.n	8002db2 <ShowAll+0xa6>
      case 1: strcpy(address, "01"); break;
 8002d74:	4aa6      	ldr	r2, [pc, #664]	; (8003010 <ShowAll+0x304>)
 8002d76:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	8019      	strh	r1, [r3, #0]
 8002d80:	3302      	adds	r3, #2
 8002d82:	0c12      	lsrs	r2, r2, #16
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e014      	b.n	8002db2 <ShowAll+0xa6>
      case 2: strcpy(address, "10"); break;
 8002d88:	4aa2      	ldr	r2, [pc, #648]	; (8003014 <ShowAll+0x308>)
 8002d8a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	4611      	mov	r1, r2
 8002d92:	8019      	strh	r1, [r3, #0]
 8002d94:	3302      	adds	r3, #2
 8002d96:	0c12      	lsrs	r2, r2, #16
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	e00a      	b.n	8002db2 <ShowAll+0xa6>
      case 3: strcpy(address, "11"); break;
 8002d9c:	4a9e      	ldr	r2, [pc, #632]	; (8003018 <ShowAll+0x30c>)
 8002d9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	4611      	mov	r1, r2
 8002da6:	8019      	strh	r1, [r3, #0]
 8002da8:	3302      	adds	r3, #2
 8002daa:	0c12      	lsrs	r2, r2, #16
 8002dac:	701a      	strb	r2, [r3, #0]
 8002dae:	e000      	b.n	8002db2 <ShowAll+0xa6>
      default: break;
 8002db0:	bf00      	nop
    }
    char enabled[10];
    if (Controller->PID.Config.Enabled)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d006      	beq.n	8002dca <ShowAll+0xbe>
      strcpy(enabled, "ENABLED ");
 8002dbc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002dc0:	4a96      	ldr	r2, [pc, #600]	; (800301c <ShowAll+0x310>)
 8002dc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dc4:	c303      	stmia	r3!, {r0, r1}
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	e005      	b.n	8002dd6 <ShowAll+0xca>
    else
      strcpy(enabled, "DISABLED");
 8002dca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002dce:	4a94      	ldr	r2, [pc, #592]	; (8003020 <ShowAll+0x314>)
 8002dd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dd2:	c303      	stmia	r3!, {r0, r1}
 8002dd4:	701a      	strb	r2, [r3, #0]
    char average[12], last[12], targetp[12];
    FormatTemperature(average, Controller->Sensor.Average);
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	ed93 7b84 	vldr	d7, [r3, #528]	; 0x210
 8002ddc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002de0:	eeb0 0a47 	vmov.f32	s0, s14
 8002de4:	eef0 0a67 	vmov.f32	s1, s15
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f9dd 	bl	80031a8 <FormatTemperature>
    FormatTemperature(last, Controller->Sensor.LastTemperature);
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	ed93 7b88 	vldr	d7, [r3, #544]	; 0x220
 8002df4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002df8:	eeb0 0a47 	vmov.f32	s0, s14
 8002dfc:	eef0 0a67 	vmov.f32	s1, s15
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 f9d1 	bl	80031a8 <FormatTemperature>
    FormatTemperature(targetp, Controller->PID.Config.TargetP);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	f503 63c9 	add.w	r3, r3, #1608	; 0x648
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fbba 	bl	8000588 <__aeabi_f2d>
 8002e14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e18:	ec41 0b10 	vmov	d0, r0, r1
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 f9c3 	bl	80031a8 <FormatTemperature>

    char sensor[15];
    switch (Controller->Sensor.State)
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d839      	bhi.n	8002ea0 <ShowAll+0x194>
 8002e2c:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <ShowAll+0x128>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e49 	.word	0x08002e49
 8002e38:	08002e59 	.word	0x08002e59
 8002e3c:	08002e6b 	.word	0x08002e6b
 8002e40:	08002e7f 	.word	0x08002e7f
 8002e44:	08002e8d 	.word	0x08002e8d
    {
      case TMP117_STATE_UNKNOWN:      strcpy(sensor, "Unknown");       break;
 8002e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e4c:	4a75      	ldr	r2, [pc, #468]	; (8003024 <ShowAll+0x318>)
 8002e4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e52:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e56:	e024      	b.n	8002ea2 <ShowAll+0x196>
      case TMP117_STATE_INITFAILED:   strcpy(sensor, "Config failed"); break;
 8002e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e5c:	4a72      	ldr	r2, [pc, #456]	; (8003028 <ShowAll+0x31c>)
 8002e5e:	461c      	mov	r4, r3
 8002e60:	4613      	mov	r3, r2
 8002e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e64:	c407      	stmia	r4!, {r0, r1, r2}
 8002e66:	8023      	strh	r3, [r4, #0]
 8002e68:	e01b      	b.n	8002ea2 <ShowAll+0x196>
      case TMP117_STATE_REQUESTNOACK: strcpy(sensor, "Req failed");    break;
 8002e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e6e:	4a6f      	ldr	r2, [pc, #444]	; (800302c <ShowAll+0x320>)
 8002e70:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e72:	c303      	stmia	r3!, {r0, r1}
 8002e74:	801a      	strh	r2, [r3, #0]
 8002e76:	3302      	adds	r3, #2
 8002e78:	0c12      	lsrs	r2, r2, #16
 8002e7a:	701a      	strb	r2, [r3, #0]
 8002e7c:	e011      	b.n	8002ea2 <ShowAll+0x196>
      case TMP117_STATE_RECEIVEFAIL:  strcpy(sensor, "No response");   break;
 8002e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e82:	4a6b      	ldr	r2, [pc, #428]	; (8003030 <ShowAll+0x324>)
 8002e84:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e8a:	e00a      	b.n	8002ea2 <ShowAll+0x196>
      case TMP117_STATE_VALIDTEMP:    strcpy(sensor, "OK");            break;
 8002e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e90:	4a68      	ldr	r2, [pc, #416]	; (8003034 <ShowAll+0x328>)
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	4611      	mov	r1, r2
 8002e96:	8019      	strh	r1, [r3, #0]
 8002e98:	3302      	adds	r3, #2
 8002e9a:	0c12      	lsrs	r2, r2, #16
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	e000      	b.n	8002ea2 <ShowAll+0x196>
      default: break;
 8002ea0:	bf00      	nop
    }

    static char buffer[250];

    if (readable)
 8002ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80d2 	beq.w	8003050 <ShowAll+0x344>
    {
      snprintf(buffer, 200, "C%u: kp=%5.2f   ep=% 7.1f    temp=%8s  freq: %04u  %s\n", Controller->Heater, Controller->PID.Config.Kp, 100 * Controller->PID.Ep, last, Controller->PID.Config.Frequency, enabled);
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	461e      	mov	r6, r3
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd fb64 	bl	8000588 <__aeabi_f2d>
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	460d      	mov	r5, r1
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8002eca:	edd3 7a00 	vldr	s15, [r3]
 8002ece:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800304c <ShowAll+0x340>
 8002ed2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ed6:	ee17 0a90 	vmov	r0, s15
 8002eda:	f7fd fb55 	bl	8000588 <__aeabi_f2d>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee4:	f8b1 165e 	ldrh.w	r1, [r1, #1630]	; 0x65e
 8002ee8:	4608      	mov	r0, r1
 8002eea:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002eee:	9106      	str	r1, [sp, #24]
 8002ef0:	9005      	str	r0, [sp, #20]
 8002ef2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002ef6:	9104      	str	r1, [sp, #16]
 8002ef8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002efc:	e9cd 4500 	strd	r4, r5, [sp]
 8002f00:	4633      	mov	r3, r6
 8002f02:	4a4d      	ldr	r2, [pc, #308]	; (8003038 <ShowAll+0x32c>)
 8002f04:	21c8      	movs	r1, #200	; 0xc8
 8002f06:	484d      	ldr	r0, [pc, #308]	; (800303c <ShowAll+0x330>)
 8002f08:	f00c fdd6 	bl	800fab8 <sniprintf>
      USBSendString(buffer);
 8002f0c:	484b      	ldr	r0, [pc, #300]	; (800303c <ShowAll+0x330>)
 8002f0e:	f000 fa3f 	bl	8003390 <USBSendString>
      snprintf(buffer, 200,  "  : kd=%5.2f   ed=% 7.1f     avg=%8s  i2c: %2s\n", Controller->PID.Config.Kd, 100 * Controller->PID.Ed, average, address);
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fb34 	bl	8000588 <__aeabi_f2d>
 8002f20:	4604      	mov	r4, r0
 8002f22:	460d      	mov	r5, r1
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 8002f2a:	edd3 7a00 	vldr	s15, [r3]
 8002f2e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800304c <ShowAll+0x340>
 8002f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f36:	ee17 0a90 	vmov	r0, s15
 8002f3a:	f7fd fb25 	bl	8000588 <__aeabi_f2d>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002f46:	9105      	str	r1, [sp, #20]
 8002f48:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002f4c:	9104      	str	r1, [sp, #16]
 8002f4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f52:	e9cd 4500 	strd	r4, r5, [sp]
 8002f56:	4a3a      	ldr	r2, [pc, #232]	; (8003040 <ShowAll+0x334>)
 8002f58:	21c8      	movs	r1, #200	; 0xc8
 8002f5a:	4838      	ldr	r0, [pc, #224]	; (800303c <ShowAll+0x330>)
 8002f5c:	f00c fdac 	bl	800fab8 <sniprintf>
      USBSendString(buffer);
 8002f60:	4836      	ldr	r0, [pc, #216]	; (800303c <ShowAll+0x330>)
 8002f62:	f000 fa15 	bl	8003390 <USBSendString>
      snprintf(buffer, 200,  "  : ki=%5.2f   ei=% 7.1f  target=%8s  history=%3u\n", Controller->PID.Config.Ki, 100 * Controller->PID.Ei, target, Controller->PID.Config.History);
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd fb0a 	bl	8000588 <__aeabi_f2d>
 8002f74:	4604      	mov	r4, r0
 8002f76:	460d      	mov	r5, r1
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 8002f7e:	edd3 7a00 	vldr	s15, [r3]
 8002f82:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800304c <ShowAll+0x340>
 8002f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f8a:	ee17 0a90 	vmov	r0, s15
 8002f8e:	f7fd fafb 	bl	8000588 <__aeabi_f2d>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f98:	f891 165d 	ldrb.w	r1, [r1, #1629]	; 0x65d
 8002f9c:	9105      	str	r1, [sp, #20]
 8002f9e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002fa2:	9104      	str	r1, [sp, #16]
 8002fa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002fa8:	e9cd 4500 	strd	r4, r5, [sp]
 8002fac:	4a25      	ldr	r2, [pc, #148]	; (8003044 <ShowAll+0x338>)
 8002fae:	21c8      	movs	r1, #200	; 0xc8
 8002fb0:	4822      	ldr	r0, [pc, #136]	; (800303c <ShowAll+0x330>)
 8002fb2:	f00c fd81 	bl	800fab8 <sniprintf>
      USBSendString(buffer);
 8002fb6:	4821      	ldr	r0, [pc, #132]	; (800303c <ShowAll+0x330>)
 8002fb8:	f000 f9ea 	bl	8003390 <USBSendString>
      snprintf(buffer, 200,  "  : li=%5.2f  eff=% 7.1f  sensor: %s\n\n", Controller->PID.Config.Li, 100 * Controller->PID.Effort, sensor);
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd fadf 	bl	8000588 <__aeabi_f2d>
 8002fca:	4604      	mov	r4, r0
 8002fcc:	460d      	mov	r5, r1
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8002fd4:	edd3 7a00 	vldr	s15, [r3]
 8002fd8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800304c <ShowAll+0x340>
 8002fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fe0:	ee17 0a90 	vmov	r0, s15
 8002fe4:	f7fd fad0 	bl	8000588 <__aeabi_f2d>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002ff0:	9104      	str	r1, [sp, #16]
 8002ff2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ff6:	e9cd 4500 	strd	r4, r5, [sp]
 8002ffa:	4a13      	ldr	r2, [pc, #76]	; (8003048 <ShowAll+0x33c>)
 8002ffc:	21c8      	movs	r1, #200	; 0xc8
 8002ffe:	480f      	ldr	r0, [pc, #60]	; (800303c <ShowAll+0x330>)
 8003000:	f00c fd5a 	bl	800fab8 <sniprintf>
      USBSendString(buffer);
 8003004:	480d      	ldr	r0, [pc, #52]	; (800303c <ShowAll+0x330>)
 8003006:	f000 f9c3 	bl	8003390 <USBSendString>
      USBSendString(buffer);
      //}

//      HAL_Delay(1); // don't butcher our buffer before we're done with it
    }
}
 800300a:	e0b4      	b.n	8003176 <ShowAll+0x46a>
 800300c:	08014ae0 	.word	0x08014ae0
 8003010:	08014ae4 	.word	0x08014ae4
 8003014:	08014ae8 	.word	0x08014ae8
 8003018:	08014aec 	.word	0x08014aec
 800301c:	08014b9c 	.word	0x08014b9c
 8003020:	08014ba8 	.word	0x08014ba8
 8003024:	08014bb4 	.word	0x08014bb4
 8003028:	08014bbc 	.word	0x08014bbc
 800302c:	08014bcc 	.word	0x08014bcc
 8003030:	08014bd8 	.word	0x08014bd8
 8003034:	08014be4 	.word	0x08014be4
 8003038:	08014be8 	.word	0x08014be8
 800303c:	20000308 	.word	0x20000308
 8003040:	08014c20 	.word	0x08014c20
 8003044:	08014c50 	.word	0x08014c50
 8003048:	08014c84 	.word	0x08014c84
 800304c:	42c80000 	.word	0x42c80000
        ShowRawHeader();
 8003050:	f000 f89a 	bl	8003188 <ShowRawHeader>
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	781b      	ldrb	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8003058:	61fb      	str	r3, [r7, #28]
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8003060:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fa90 	bl	8000588 <__aeabi_f2d>
 8003068:	4680      	mov	r8, r0
 800306a:	4689      	mov	r9, r1
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8003072:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd fa87 	bl	8000588 <__aeabi_f2d>
 800307a:	4682      	mov	sl, r0
 800307c:	468b      	mov	fp, r1
          Controller->Heater, Controller->PID.Config.Kp, Controller->PID.Config.Kd, Controller->PID.Config.Ki,
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8003084:	681b      	ldr	r3, [r3, #0]
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fa7e 	bl	8000588 <__aeabi_f2d>
 800308c:	e9c7 0104 	strd	r0, r1, [r7, #16]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	f203 6334 	addw	r3, r3, #1588	; 0x634
 8003096:	edd3 7a00 	vldr	s15, [r3]
 800309a:	ed1f 7a14 	vldr	s14, [pc, #-80]	; 800304c <ShowAll+0x340>
 800309e:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 80030a2:	ee17 0a90 	vmov	r0, s15
 80030a6:	f7fd fa6f 	bl	8000588 <__aeabi_f2d>
 80030aa:	e9c7 0102 	strd	r0, r1, [r7, #8]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	f203 633c 	addw	r3, r3, #1596	; 0x63c
 80030b4:	edd3 7a00 	vldr	s15, [r3]
 80030b8:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 800304c <ShowAll+0x340>
 80030bc:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 80030c0:	ee17 0a90 	vmov	r0, s15
 80030c4:	f7fd fa60 	bl	8000588 <__aeabi_f2d>
 80030c8:	e9c7 0100 	strd	r0, r1, [r7]
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	f503 63c7 	add.w	r3, r3, #1592	; 0x638
 80030d2:	edd3 7a00 	vldr	s15, [r3]
 80030d6:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 800304c <ShowAll+0x340>
 80030da:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 80030de:	ee17 0a90 	vmov	r0, s15
 80030e2:	f7fd fa51 	bl	8000588 <__aeabi_f2d>
 80030e6:	4604      	mov	r4, r0
 80030e8:	460d      	mov	r5, r1
          100 * Controller->PID.Ep, 100 * Controller->PID.Ed, 100 * Controller->PID.Ei, 100 * Controller->PID.Effort,
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80030f0:	edd3 7a00 	vldr	s15, [r3]
 80030f4:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 800304c <ShowAll+0x340>
 80030f8:	ee67 7a87 	vmul.f32	s15, s15, s14
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 80030fc:	ee17 0a90 	vmov	r0, s15
 8003100:	f7fd fa42 	bl	8000588 <__aeabi_f2d>
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	f893 365d 	ldrb.w	r3, [r3, #1629]	; 0x65d
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 800310a:	461e      	mov	r6, r3
          last, average, target, address, Controller->PID.Config.History, Controller->PID.Config.Frequency, enabled, sensor);
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	f8b3 365e 	ldrh.w	r3, [r3, #1630]	; 0x65e
      snprintf(buffer, 200, "C%u\t%5.2f\t%5.2f\t%5.2f\t%7.1f\t%7.1f\t%7.1f\t%7.1f\t%8s\t%8s\t%8s\t%2s\t%03u\t%04u\t%s\t%s\n",
 8003112:	461a      	mov	r2, r3
 8003114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003118:	9315      	str	r3, [sp, #84]	; 0x54
 800311a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800311e:	9314      	str	r3, [sp, #80]	; 0x50
 8003120:	9213      	str	r2, [sp, #76]	; 0x4c
 8003122:	9612      	str	r6, [sp, #72]	; 0x48
 8003124:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003128:	9311      	str	r3, [sp, #68]	; 0x44
 800312a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800312e:	9310      	str	r3, [sp, #64]	; 0x40
 8003130:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003134:	930f      	str	r3, [sp, #60]	; 0x3c
 8003136:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800313a:	930e      	str	r3, [sp, #56]	; 0x38
 800313c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003140:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003144:	ed97 7b00 	vldr	d7, [r7]
 8003148:	ed8d 7b08 	vstr	d7, [sp, #32]
 800314c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003150:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003154:	ed97 7b04 	vldr	d7, [r7, #16]
 8003158:	ed8d 7b04 	vstr	d7, [sp, #16]
 800315c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003160:	e9cd 8900 	strd	r8, r9, [sp]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	4a06      	ldr	r2, [pc, #24]	; (8003180 <ShowAll+0x474>)
 8003168:	21c8      	movs	r1, #200	; 0xc8
 800316a:	4806      	ldr	r0, [pc, #24]	; (8003184 <ShowAll+0x478>)
 800316c:	f00c fca4 	bl	800fab8 <sniprintf>
      USBSendString(buffer);
 8003170:	4804      	ldr	r0, [pc, #16]	; (8003184 <ShowAll+0x478>)
 8003172:	f000 f90d 	bl	8003390 <USBSendString>
}
 8003176:	bf00      	nop
 8003178:	3784      	adds	r7, #132	; 0x84
 800317a:	46bd      	mov	sp, r7
 800317c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003180:	08014cac 	.word	0x08014cac
 8003184:	20000308 	.word	0x20000308

08003188 <ShowRawHeader>:


//Prints the header for the raw data
//TODO Need to add to this
void ShowRawHeader(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  static char buffer[250];
  snprintf(buffer, 200,  "Chan\tkp\tkd\tki\tep\ted\tei\teffort\ttemp\taverage\ttarget\ti2c\thist\tfreq\tenabled\t       sensor\n");
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <ShowRawHeader+0x18>)
 800318e:	21c8      	movs	r1, #200	; 0xc8
 8003190:	4804      	ldr	r0, [pc, #16]	; (80031a4 <ShowRawHeader+0x1c>)
 8003192:	f00c fc91 	bl	800fab8 <sniprintf>
  USBSendString(buffer);
 8003196:	4803      	ldr	r0, [pc, #12]	; (80031a4 <ShowRawHeader+0x1c>)
 8003198:	f000 f8fa 	bl	8003390 <USBSendString>
//  HAL_Delay(1); // don't butcher our buffer before we're done with it
}
 800319c:	bf00      	nop
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	08014cfc 	.word	0x08014cfc
 80031a4:	20000404 	.word	0x20000404

080031a8 <FormatTemperature>:


//Formats the Float to fit into the Temperature Display
void FormatTemperature(char* buffer, double temp)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	ed87 0b00 	vstr	d0, [r7]
  if (temp > -100){
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <FormatTemperature+0x48>)
 80031ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031be:	f7fd fccb 	bl	8000b58 <__aeabi_dcmpgt>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d009      	beq.n	80031dc <FormatTemperature+0x34>
    snprintf(buffer, 10, "% 7.3fC", temp);
 80031c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031cc:	e9cd 2300 	strd	r2, r3, [sp]
 80031d0:	4a08      	ldr	r2, [pc, #32]	; (80031f4 <FormatTemperature+0x4c>)
 80031d2:	210a      	movs	r1, #10
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f00c fc6f 	bl	800fab8 <sniprintf>
  }else{
    snprintf(buffer, 10, "  error ");
  }
 }
 80031da:	e004      	b.n	80031e6 <FormatTemperature+0x3e>
    snprintf(buffer, 10, "  error ");
 80031dc:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <FormatTemperature+0x50>)
 80031de:	210a      	movs	r1, #10
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f00c fc69 	bl	800fab8 <sniprintf>
 }
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	c0590000 	.word	0xc0590000
 80031f4:	08014d54 	.word	0x08014d54
 80031f8:	08014d5c 	.word	0x08014d5c

080031fc <Controller_InitStruct>:
#include "Controller.h"




void Controller_InitStruct(struct sController* s, struct sTMP117 *t,uint8_t heater){
 80031fc:	b580      	push	{r7, lr}
 80031fe:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8003202:	af00      	add	r7, sp, #0
 8003204:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003208:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800320c:	6018      	str	r0, [r3, #0]
 800320e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003212:	f5a3 6387 	sub.w	r3, r3, #1080	; 0x438
 8003216:	6019      	str	r1, [r3, #0]
 8003218:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800321c:	f2a3 4339 	subw	r3, r3, #1081	; 0x439
 8003220:	701a      	strb	r2, [r3, #0]
  struct sPID PID;
  PID_InitStruct(&PID);
 8003222:	f107 0310 	add.w	r3, r7, #16
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe f92a 	bl	8001480 <PID_InitStruct>

  s->Heater = heater;
 800322c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003230:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800323a:	f2a2 4239 	subw	r2, r2, #1081	; 0x439
 800323e:	7812      	ldrb	r2, [r2, #0]
 8003240:	701a      	strb	r2, [r3, #0]
  s->Sensor = *t;
 8003242:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003246:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8003250:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	3308      	adds	r3, #8
 8003258:	4611      	mov	r1, r2
 800325a:	f44f 720a 	mov.w	r2, #552	; 0x228
 800325e:	4618      	mov	r0, r3
 8003260:	f00b fcec 	bl	800ec3c <memcpy>
  s->PID = PID;
 8003264:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003268:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8003272:	f5a2 6286 	sub.w	r2, r2, #1072	; 0x430
 8003276:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800327a:	4611      	mov	r1, r2
 800327c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8003280:	4618      	mov	r0, r3
 8003282:	f00b fcdb 	bl	800ec3c <memcpy>
}
 8003286:	bf00      	nop
 8003288:	f507 6788 	add.w	r7, r7, #1088	; 0x440
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <Controller_SetHeater>:

// this doesn't sit in the struct because we want something global that the interrupt can call
//This Has been Edited so that it can be used in the TCB
void Controller_SetHeater(uint8_t heater, bool state)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	460a      	mov	r2, r1
 800329a:	71fb      	strb	r3, [r7, #7]
 800329c:	4613      	mov	r3, r2
 800329e:	71bb      	strb	r3, [r7, #6]
  //For the TCB
  uint16_t Pin;
  GPIO_TypeDef* Port;
  Port = GPIOC;
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <Controller_SetHeater+0x40>)
 80032a2:	60fb      	str	r3, [r7, #12]
  Pin = GPIO_PIN_5;
 80032a4:	2320      	movs	r3, #32
 80032a6:	817b      	strh	r3, [r7, #10]
  
  if (state)
 80032a8:	79bb      	ldrb	r3, [r7, #6]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d006      	beq.n	80032bc <Controller_SetHeater+0x2c>
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_SET);
 80032ae:	897b      	ldrh	r3, [r7, #10]
 80032b0:	2201      	movs	r2, #1
 80032b2:	4619      	mov	r1, r3
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f001 fd83 	bl	8004dc0 <HAL_GPIO_WritePin>
  else
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);

}
 80032ba:	e005      	b.n	80032c8 <Controller_SetHeater+0x38>
    HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 80032bc:	897b      	ldrh	r3, [r7, #10]
 80032be:	2200      	movs	r2, #0
 80032c0:	4619      	mov	r1, r3
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f001 fd7c 	bl	8004dc0 <HAL_GPIO_WritePin>
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40020800 	.word	0x40020800

080032d4 <Controller_WipeConfig>:

void Controller_WipeConfig(struct sController* Controller)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

  Controller_InitStruct(Controller, &Controller->Sensor, 0);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3308      	adds	r3, #8
 80032e0:	2200      	movs	r2, #0
 80032e2:	4619      	mov	r1, r3
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff89 	bl	80031fc <Controller_InitStruct>
  printf("Cannot Save No EEPROM");
 80032ea:	4803      	ldr	r0, [pc, #12]	; (80032f8 <Controller_WipeConfig+0x24>)
 80032ec:	f00c fb50 	bl	800f990 <iprintf>
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	08014d68 	.word	0x08014d68

080032fc <Controller_Step>:



void Controller_Step(struct sController* Controller)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint8_t i = Controller->Heater - 1;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	3b01      	subs	r3, #1
 800330a:	75fb      	strb	r3, [r7, #23]
  float temp, eff;
  if (Controller->PID.Config.Enabled == false)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 8003312:	f083 0301 	eor.w	r3, r3, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <Controller_Step+0x28>
  {
    HeaterDwell = 100; // duty cycle of 0, disabled
 800331c:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <Controller_Step+0x8c>)
 800331e:	2264      	movs	r2, #100	; 0x64
 8003320:	701a      	strb	r2, [r3, #0]
    return;
 8003322:	e02d      	b.n	8003380 <Controller_Step+0x84>
  }
  if (Controller->Sensor.State != TMP117_STATE_VALIDTEMP)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 800332a:	2b04      	cmp	r3, #4
 800332c:	d003      	beq.n	8003336 <Controller_Step+0x3a>
  {
    HeaterDwell = 100; // duty cycle of 0, disabled
 800332e:	4b16      	ldr	r3, [pc, #88]	; (8003388 <Controller_Step+0x8c>)
 8003330:	2264      	movs	r2, #100	; 0x64
 8003332:	701a      	strb	r2, [r3, #0]
    return;
 8003334:	e024      	b.n	8003380 <Controller_Step+0x84>
  }

  temp = Controller->Sensor.Average;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	; 0x210
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	f7fd fc72 	bl	8000c28 <__aeabi_d2f>
 8003344:	4603      	mov	r3, r0
 8003346:	613b      	str	r3, [r7, #16]
  eff = PID_CalculateEffort(&Controller->PID, temp);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800334e:	ed97 0a04 	vldr	s0, [r7, #16]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe f9d2 	bl	80016fc <PID_CalculateEffort>
 8003358:	ed87 0a03 	vstr	s0, [r7, #12]
  // dwell is a value between 0 and 100 which tells the heater controller how many
  // heater ticks the heater spends off. A complete heater cycle is 200 ticks.
  // For a 40% duty cycle (effort), dwell becomes 60, making the heater off for 60,
  // on for 80, and off for another 60. This weird design causes heaters with
  // different effort values to turn on and off at different times.
  HeaterDwell = 100 * (1 - eff);
 800335c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003360:	edd7 7a03 	vldr	s15, [r7, #12]
 8003364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003368:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800338c <Controller_Step+0x90>
 800336c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003374:	edc7 7a00 	vstr	s15, [r7]
 8003378:	783b      	ldrb	r3, [r7, #0]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	4b02      	ldr	r3, [pc, #8]	; (8003388 <Controller_Step+0x8c>)
 800337e:	701a      	strb	r2, [r3, #0]
}
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000010 	.word	0x20000010
 800338c:	42c80000 	.word	0x42c80000

08003390 <USBSendString>:
   }
   return --i;
}

void USBSendString(char* buf)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  int i, res;
  for (i=0;i<50; i++)
 8003398:	2300      	movs	r3, #0
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	e013      	b.n	80033c6 <USBSendString+0x36>
  {
    res = CDC_Transmit_FS((uint8_t *)buf, strlen(buf));
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fc ff30 	bl	8000204 <strlen>
 80033a4:	4603      	mov	r3, r0
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f00a ffc0 	bl	800e330 <CDC_Transmit_FS>
 80033b0:	4603      	mov	r3, r0
 80033b2:	60bb      	str	r3, [r7, #8]
    if (res == USBD_OK)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <USBSendString+0x3e>
      return;

    HAL_Delay(1);
 80033ba:	2001      	movs	r0, #1
 80033bc:	f001 f9ee 	bl	800479c <HAL_Delay>
  for (i=0;i<50; i++)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3301      	adds	r3, #1
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b31      	cmp	r3, #49	; 0x31
 80033ca:	dde8      	ble.n	800339e <USBSendString+0xe>
 80033cc:	e000      	b.n	80033d0 <USBSendString+0x40>
      return;
 80033ce:	bf00      	nop
  }
}
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <InitDWTTimer>:

void InitDWTTimer(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <InitDWTTimer+0x2c>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a08      	ldr	r2, [pc, #32]	; (8003404 <InitDWTTimer+0x2c>)
 80033e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e6:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; // reset the counter
 80033e8:	4b07      	ldr	r3, [pc, #28]	; (8003408 <InitDWTTimer+0x30>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk ; // enable the counter
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <InitDWTTimer+0x30>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a05      	ldr	r2, [pc, #20]	; (8003408 <InitDWTTimer+0x30>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6013      	str	r3, [r2, #0]
}
 80033fa:	bf00      	nop
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000edf0 	.word	0xe000edf0
 8003408:	e0001000 	.word	0xe0001000

0800340c <Delay_us>:

void Delay_us(uint32_t us)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8003414:	4b0d      	ldr	r3, [pc, #52]	; (800344c <Delay_us+0x40>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0d      	ldr	r2, [pc, #52]	; (8003450 <Delay_us+0x44>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	0c9b      	lsrs	r3, r3, #18
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	60fb      	str	r3, [r7, #12]
  volatile uint32_t start = DWT->CYCCNT;
 8003428:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <Delay_us+0x48>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60bb      	str	r3, [r7, #8]
  do  {
  } while((DWT->CYCCNT - start) < cycles);
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <Delay_us+0x48>)
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	1ad2      	subs	r2, r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	429a      	cmp	r2, r3
 800343a:	d3f8      	bcc.n	800342e <Delay_us+0x22>
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	20000014 	.word	0x20000014
 8003450:	431bde83 	.word	0x431bde83
 8003454:	e0001000 	.word	0xe0001000

08003458 <replacestr>:
    return un.u;
}

// in-place string replacement which only works if the new string is smaller than the old string
void replacestr(uint8_t *buffer, const char *search, const char *replace)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
     char *sp;
     char* line = (char*) buffer;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
     if ((sp = strstr(line, search)) == NULL) {
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800346c:	f00c fbe9 	bl	800fc42 <strstr>
 8003470:	6238      	str	r0, [r7, #32]
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d023      	beq.n	80034c0 <replacestr+0x68>
         return;
     }
     int search_len = strlen(search);
 8003478:	68b8      	ldr	r0, [r7, #8]
 800347a:	f7fc fec3 	bl	8000204 <strlen>
 800347e:	4603      	mov	r3, r0
 8003480:	61fb      	str	r3, [r7, #28]
     int replace_len = strlen(replace);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fc febe 	bl	8000204 <strlen>
 8003488:	4603      	mov	r3, r0
 800348a:	61bb      	str	r3, [r7, #24]
     int tail_len = strlen(sp+search_len);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	6a3a      	ldr	r2, [r7, #32]
 8003490:	4413      	add	r3, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f7fc feb6 	bl	8000204 <strlen>
 8003498:	4603      	mov	r3, r0
 800349a:	617b      	str	r3, [r7, #20]

     memmove(sp+replace_len,sp+search_len,tail_len+1);
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	6a3a      	ldr	r2, [r7, #32]
 80034a0:	18d0      	adds	r0, r2, r3
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	6a3a      	ldr	r2, [r7, #32]
 80034a6:	18d1      	adds	r1, r2, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3301      	adds	r3, #1
 80034ac:	461a      	mov	r2, r3
 80034ae:	f00b fbd3 	bl	800ec58 <memmove>
     memcpy(sp, replace, replace_len);
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	461a      	mov	r2, r3
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	6a38      	ldr	r0, [r7, #32]
 80034ba:	f00b fbbf 	bl	800ec3c <memcpy>
 80034be:	e000      	b.n	80034c2 <replacestr+0x6a>
         return;
 80034c0:	bf00      	nop
}
 80034c2:	3728      	adds	r7, #40	; 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80034d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80034d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d013      	beq.n	8003508 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80034e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80034e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80034e8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00b      	beq.n	8003508 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80034f0:	e000      	b.n	80034f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80034f2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80034f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f9      	beq.n	80034f2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80034fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003508:	687b      	ldr	r3, [r7, #4]
}
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//This Intterupot is called every .25ms Will Toggle the State of the Dac Channels
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a7c      	ldr	r2, [pc, #496]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d169      	bne.n	80035fc <HAL_TIM_PeriodElapsedCallback+0xe4>
  {
    //Syncronous Update of the DACs
    for (int i = 0; i < 6; i++){
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	e061      	b.n	80035f2 <HAL_TIM_PeriodElapsedCallback+0xda>
      if(TCB.DAC8718.DAC_Channels[i].enabled){
 800352e:	497a      	ldr	r1, [pc, #488]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4613      	mov	r3, r2
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	f603 03ba 	addw	r3, r3, #2234	; 0x8ba
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d052      	beq.n	80035ec <HAL_TIM_PeriodElapsedCallback+0xd4>
        if(TCB.DAC8718.DAC_Channels[i].state_high){
 8003546:	4974      	ldr	r1, [pc, #464]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	f603 03b9 	addw	r3, r3, #2233	; 0x8b9
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d023      	beq.n	80035a6 <HAL_TIM_PeriodElapsedCallback+0x8e>

          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].lower_bound);
 800355e:	496e      	ldr	r1, [pc, #440]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4613      	mov	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 8003570:	7819      	ldrb	r1, [r3, #0]
 8003572:	4869      	ldr	r0, [pc, #420]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4403      	add	r3, r0
 8003580:	f603 03b6 	addw	r3, r3, #2230	; 0x8b6
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	4864      	ldr	r0, [pc, #400]	; (800371c <HAL_TIM_PeriodElapsedCallback+0x204>)
 800358a:	f7fd fea3 	bl	80012d4 <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = false;
 800358e:	4962      	ldr	r1, [pc, #392]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4613      	mov	r3, r2
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	f603 03b9 	addw	r3, r3, #2233	; 0x8b9
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	e022      	b.n	80035ec <HAL_TIM_PeriodElapsedCallback+0xd4>
        }else{
          Set_DAC_Value(&TCB.DAC8718, TCB.DAC8718.DAC_Channels[i].DAC_number, TCB.DAC8718.DAC_Channels[i].upper_bound);
 80035a6:	495c      	ldr	r1, [pc, #368]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 80035b8:	7819      	ldrb	r1, [r3, #0]
 80035ba:	4857      	ldr	r0, [pc, #348]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4403      	add	r3, r0
 80035c8:	f603 03b4 	addw	r3, r3, #2228	; 0x8b4
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	4852      	ldr	r0, [pc, #328]	; (800371c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80035d2:	f7fd fe7f 	bl	80012d4 <Set_DAC_Value>
          TCB.DAC8718.DAC_Channels[i].state_high = true;
 80035d6:	4950      	ldr	r1, [pc, #320]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	f603 03b9 	addw	r3, r3, #2233	; 0x8b9
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 6; i++){
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3301      	adds	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b05      	cmp	r3, #5
 80035f6:	dd9a      	ble.n	800352e <HAL_TIM_PeriodElapsedCallback+0x16>

        }
      }
    }//End For
    Syncronous_Update();
 80035f8:	f7fd ff0b 	bl	8001412 <Syncronous_Update>
  }//End Timer 2


//--------------------This is from Damons Code-----------------------
  uint8_t i;
  if (htim == &htim6)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a48      	ldr	r2, [pc, #288]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d123      	bne.n	800364c <HAL_TIM_PeriodElapsedCallback+0x134>
  {
    HeaterSubtick += HeaterFrequency;
 8003604:	4b47      	ldr	r3, [pc, #284]	; (8003724 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	b29a      	uxth	r2, r3
 800360a:	4b47      	ldr	r3, [pc, #284]	; (8003728 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	b29b      	uxth	r3, r3
 8003610:	4413      	add	r3, r2
 8003612:	b29a      	uxth	r2, r3
 8003614:	4b44      	ldr	r3, [pc, #272]	; (8003728 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003616:	801a      	strh	r2, [r3, #0]
    if (HeaterSubtick > 1000){
 8003618:	4b43      	ldr	r3, [pc, #268]	; (8003728 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003622:	d913      	bls.n	800364c <HAL_TIM_PeriodElapsedCallback+0x134>
        HeaterTick = (HeaterTick + 1) % 200;
 8003624:	4b41      	ldr	r3, [pc, #260]	; (800372c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	3301      	adds	r3, #1
 800362c:	4a40      	ldr	r2, [pc, #256]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800362e:	fb82 1203 	smull	r1, r2, r2, r3
 8003632:	1191      	asrs	r1, r2, #6
 8003634:	17da      	asrs	r2, r3, #31
 8003636:	1a8a      	subs	r2, r1, r2
 8003638:	21c8      	movs	r1, #200	; 0xc8
 800363a:	fb01 f202 	mul.w	r2, r1, r2
 800363e:	1a9a      	subs	r2, r3, r2
 8003640:	b292      	uxth	r2, r2
 8003642:	4b3a      	ldr	r3, [pc, #232]	; (800372c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003644:	801a      	strh	r2, [r3, #0]
        HeaterSubtick = 0;
 8003646:	4b38      	ldr	r3, [pc, #224]	; (8003728 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003648:	2200      	movs	r2, #0
 800364a:	801a      	strh	r2, [r3, #0]
    }
  }//End Timer 3

  if ((HeaterTick > HeaterDwell)&& (HeaterTick < (200 - HeaterDwell))){
 800364c:	4b39      	ldr	r3, [pc, #228]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	b29a      	uxth	r2, r3
 8003654:	4b35      	ldr	r3, [pc, #212]	; (800372c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	b29b      	uxth	r3, r3
 800365a:	429a      	cmp	r2, r3
 800365c:	d210      	bcs.n	8003680 <HAL_TIM_PeriodElapsedCallback+0x168>
 800365e:	4b33      	ldr	r3, [pc, #204]	; (800372c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	4b33      	ldr	r3, [pc, #204]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8003670:	429a      	cmp	r2, r3
 8003672:	da05      	bge.n	8003680 <HAL_TIM_PeriodElapsedCallback+0x168>
        Controller_SetHeater(i, true);
 8003674:	7afb      	ldrb	r3, [r7, #11]
 8003676:	2101      	movs	r1, #1
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fe09 	bl	8003290 <Controller_SetHeater>
 800367e:	e004      	b.n	800368a <HAL_TIM_PeriodElapsedCallback+0x172>
  }else{
        Controller_SetHeater(i, false);
 8003680:	7afb      	ldrb	r3, [r7, #11]
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fe03 	bl	8003290 <Controller_SetHeater>
  }//Dictates If heater is on or off

  //Removed ADC stuff

  if (htim == &htim4)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a2a      	ldr	r2, [pc, #168]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d13c      	bne.n	800370c <HAL_TIM_PeriodElapsedCallback+0x1f4>
  {
    ClockTick = (ClockTick + 1) % 100;
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	3301      	adds	r3, #1
 800369a:	4a25      	ldr	r2, [pc, #148]	; (8003730 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800369c:	fb82 1203 	smull	r1, r2, r2, r3
 80036a0:	1151      	asrs	r1, r2, #5
 80036a2:	17da      	asrs	r2, r3, #31
 80036a4:	1a8a      	subs	r2, r1, r2
 80036a6:	2164      	movs	r1, #100	; 0x64
 80036a8:	fb01 f202 	mul.w	r2, r1, r2
 80036ac:	1a9a      	subs	r2, r3, r2
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	4b22      	ldr	r3, [pc, #136]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80036b2:	701a      	strb	r2, [r3, #0]
    // this should be after the ClockTick increment
    if (ClockTick == 0)
 80036b4:	4b21      	ldr	r3, [pc, #132]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x224>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_TIM_PeriodElapsedCallback+0x1b4>
      ElapsedSeconds++;
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80036ca:	801a      	strh	r2, [r3, #0]

    if (++Ticks_TMP117 >= 13)
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	3301      	adds	r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80036d8:	4619      	mov	r1, r3
 80036da:	7011      	strb	r1, [r2, #0]
 80036dc:	2b0c      	cmp	r3, #12
 80036de:	d905      	bls.n	80036ec <HAL_TIM_PeriodElapsedCallback+0x1d4>
    {
      Ticks_TMP117 = 0;
 80036e0:	4b18      	ldr	r3, [pc, #96]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
      DoSampleTMP117 = true;
 80036e6:	4b18      	ldr	r3, [pc, #96]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	701a      	strb	r2, [r3, #0]
    }

    if (++Ticks_CalculatePWM >= 100)
 80036ec:	4b17      	ldr	r3, [pc, #92]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	3301      	adds	r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	4a15      	ldr	r2, [pc, #84]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80036f8:	4619      	mov	r1, r3
 80036fa:	7011      	strb	r1, [r2, #0]
 80036fc:	2b63      	cmp	r3, #99	; 0x63
 80036fe:	d905      	bls.n	800370c <HAL_TIM_PeriodElapsedCallback+0x1f4>
    {
      Ticks_CalculatePWM = 0;
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]
      DoCalculatePWM = true;
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003708:	2201      	movs	r2, #1
 800370a:	701a      	strb	r2, [r3, #0]
    }

  }
}
 800370c:	bf00      	nop
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	200005ac 	.word	0x200005ac
 8003718:	20000690 	.word	0x20000690
 800371c:	20000f30 	.word	0x20000f30
 8003720:	2000063c 	.word	0x2000063c
 8003724:	2000000e 	.word	0x2000000e
 8003728:	20000688 	.word	0x20000688
 800372c:	20000686 	.word	0x20000686
 8003730:	51eb851f 	.word	0x51eb851f
 8003734:	20000010 	.word	0x20000010
 8003738:	200005f4 	.word	0x200005f4
 800373c:	2000068c 	.word	0x2000068c
 8003740:	2000068e 	.word	0x2000068e
 8003744:	2000068a 	.word	0x2000068a
 8003748:	20000684 	.word	0x20000684
 800374c:	2000068b 	.word	0x2000068b
 8003750:	20000685 	.word	0x20000685

08003754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08e      	sub	sp, #56	; 0x38
 8003758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800375a:	f000 ffad 	bl	80046b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  
  StringFIFOInit(&USBFIFO);
 800375e:	485a      	ldr	r0, [pc, #360]	; (80038c8 <main+0x174>)
 8003760:	f000 fd76 	bl	8004250 <StringFIFOInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003764:	f000 f8cc 	bl	8003900 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */


  InitDWTTimer(); // we need this for delay_us
 8003768:	f7ff fe36 	bl	80033d8 <InitDWTTimer>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800376c:	f000 fa78 	bl	8003c60 <MX_GPIO_Init>
  MX_SPI4_Init();
 8003770:	f000 f970 	bl	8003a54 <MX_SPI4_Init>
  MX_I2C1_Init();
 8003774:	f000 f92e 	bl	80039d4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003778:	f000 f9a2 	bl	8003ac0 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800377c:	f00a fd0e 	bl	800e19c <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8003780:	f000 f9ea 	bl	8003b58 <MX_TIM4_Init>
  MX_TIM6_Init();
 8003784:	f000 fa36 	bl	8003bf4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  TCB_InitStruct(&TCB, &hi2c1, &hspi4);
 8003788:	4a50      	ldr	r2, [pc, #320]	; (80038cc <main+0x178>)
 800378a:	4951      	ldr	r1, [pc, #324]	; (80038d0 <main+0x17c>)
 800378c:	4851      	ldr	r0, [pc, #324]	; (80038d4 <main+0x180>)
 800378e:	f7fe f9f1 	bl	8001b74 <TCB_InitStruct>
  for (int i = 0; i < 6; i++){
 8003792:	2300      	movs	r3, #0
 8003794:	637b      	str	r3, [r7, #52]	; 0x34
 8003796:	e03d      	b.n	8003814 <main+0xc0>
    TCB.DAC8718.DAC_Channels[i].enabled = true;
 8003798:	494e      	ldr	r1, [pc, #312]	; (80038d4 <main+0x180>)
 800379a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800379c:	4613      	mov	r3, r2
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	f603 03ba 	addw	r3, r3, #2234	; 0x8ba
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
    TCB.DAC8718.DAC_Channels[i].DAC_number = i;
 80037ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b0:	b2d8      	uxtb	r0, r3
 80037b2:	4948      	ldr	r1, [pc, #288]	; (80038d4 <main+0x180>)
 80037b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	f603 03b8 	addw	r3, r3, #2232	; 0x8b8
 80037c4:	4602      	mov	r2, r0
 80037c6:	701a      	strb	r2, [r3, #0]
    TCB.DAC8718.DAC_Channels[i].lower_bound = 0x7FFF;
 80037c8:	4942      	ldr	r1, [pc, #264]	; (80038d4 <main+0x180>)
 80037ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	f603 03b6 	addw	r3, r3, #2230	; 0x8b6
 80037da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80037de:	801a      	strh	r2, [r3, #0]
    TCB.DAC8718.DAC_Channels[i].upper_bound = 0x7FFF;
 80037e0:	493c      	ldr	r1, [pc, #240]	; (80038d4 <main+0x180>)
 80037e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037e4:	4613      	mov	r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	f603 03b4 	addw	r3, r3, #2228	; 0x8b4
 80037f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80037f6:	801a      	strh	r2, [r3, #0]
    TCB.DAC8718.DAC_Channels[i].state_high = false;
 80037f8:	4936      	ldr	r1, [pc, #216]	; (80038d4 <main+0x180>)
 80037fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	f603 03b9 	addw	r3, r3, #2233	; 0x8b9
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 6; i++){
 800380e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003810:	3301      	adds	r3, #1
 8003812:	637b      	str	r3, [r7, #52]	; 0x34
 8003814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003816:	2b05      	cmp	r3, #5
 8003818:	ddbe      	ble.n	8003798 <main+0x44>
  }
  HAL_Delay(500);
 800381a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800381e:	f000 ffbd 	bl	800479c <HAL_Delay>
  printf("-- REBOOT --\n");
 8003822:	482d      	ldr	r0, [pc, #180]	; (80038d8 <main+0x184>)
 8003824:	f00c f93a 	bl	800fa9c <puts>

// if you rearrange the PID.CONFIG struct, you should force rewriting defaults
  // over the EEPROM on next startup. This will *probably* be caught by checking
  // the address of the last controller rather than the first.
  //Welcome to OOP hell
  if (!(TCB.Controller.Sensor.Address & 0b1001000)) // if the stored address is not valid, we probably have invalid data.
 8003828:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <main+0x180>)
 800382a:	f893 3920 	ldrb.w	r3, [r3, #2336]	; 0x920
 800382e:	f003 0348 	and.w	r3, r3, #72	; 0x48
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <main+0xe8>
  {
    printf("The configuration is invalid. Rewriting defaults.");
 8003836:	4829      	ldr	r0, [pc, #164]	; (80038dc <main+0x188>)
 8003838:	f00c f8aa 	bl	800f990 <iprintf>
  }

  TMP117_Configure(&TCB.Controller.Sensor);
 800383c:	4828      	ldr	r0, [pc, #160]	; (80038e0 <main+0x18c>)
 800383e:	f7fe f867 	bl	8001910 <TMP117_Configure>
  HAL_TIM_Base_Start_IT(&htim2); //DAC Timer
 8003842:	4828      	ldr	r0, [pc, #160]	; (80038e4 <main+0x190>)
 8003844:	f006 fc62 	bl	800a10c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6); // Heater Timer
 8003848:	4827      	ldr	r0, [pc, #156]	; (80038e8 <main+0x194>)
 800384a:	f006 fc5f 	bl	800a10c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4); // Main Timer
 800384e:	4827      	ldr	r0, [pc, #156]	; (80038ec <main+0x198>)
 8003850:	f006 fc5c 	bl	800a10c <HAL_TIM_Base_Start_IT>
		//   //HAL_Delay(100);
	  // }

    //-------- Damons Code ----------------------
    // we keep a global copy of this for the timer interrupt
    HeaterFrequency = TCB.Controller.PID.Config.Frequency;
 8003854:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <main+0x180>)
 8003856:	f8b3 2f76 	ldrh.w	r2, [r3, #3958]	; 0xf76
 800385a:	4b25      	ldr	r3, [pc, #148]	; (80038f0 <main+0x19c>)
 800385c:	801a      	strh	r2, [r3, #0]

    if (TCB.Controller.Sensor.Errors > 10)
 800385e:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <main+0x180>)
 8003860:	f8b3 3b42 	ldrh.w	r3, [r3, #2882]	; 0xb42
 8003864:	2b0a      	cmp	r3, #10
 8003866:	d901      	bls.n	800386c <main+0x118>
      MX_I2C1_Init();
 8003868:	f000 f8b4 	bl	80039d4 <MX_I2C1_Init>

    if (DoSampleTMP117)
 800386c:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <main+0x1a0>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00e      	beq.n	8003894 <main+0x140>
    {
      DoSampleTMP117 = false;
 8003876:	4b1f      	ldr	r3, [pc, #124]	; (80038f4 <main+0x1a0>)
 8003878:	2200      	movs	r2, #0
 800387a:	701a      	strb	r2, [r3, #0]
      if (TCB.Controller.Sensor.Configured){
 800387c:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <main+0x180>)
 800387e:	f893 3b30 	ldrb.w	r3, [r3, #2864]	; 0xb30
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <main+0x13a>
          TMP117_GetTemperature(&TCB.Controller.Sensor);
 8003886:	4816      	ldr	r0, [pc, #88]	; (80038e0 <main+0x18c>)
 8003888:	f7fe f888 	bl	800199c <TMP117_GetTemperature>
 800388c:	e002      	b.n	8003894 <main+0x140>
      }else{
          TMP117_Configure(&TCB.Controller.Sensor);
 800388e:	4814      	ldr	r0, [pc, #80]	; (80038e0 <main+0x18c>)
 8003890:	f7fe f83e 	bl	8001910 <TMP117_Configure>
      }
    }


    if (DoCalculatePWM)
 8003894:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <main+0x1a4>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <main+0x156>
    {
      DoCalculatePWM = false;
 800389e:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <main+0x1a4>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
      Controller_Step(&TCB.Controller);
 80038a4:	4815      	ldr	r0, [pc, #84]	; (80038fc <main+0x1a8>)
 80038a6:	f7ff fd29 	bl	80032fc <Controller_Step>
    }

    if (StringFIFORemove(&USBFIFO, buffer) == 0)
 80038aa:	463b      	mov	r3, r7
 80038ac:	4619      	mov	r1, r3
 80038ae:	4806      	ldr	r0, [pc, #24]	; (80038c8 <main+0x174>)
 80038b0:	f000 fd62 	bl	8004378 <StringFIFORemove>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1cc      	bne.n	8003854 <main+0x100>
    {
      ProcessUserInput(&TCB, buffer);
 80038ba:	463b      	mov	r3, r7
 80038bc:	4619      	mov	r1, r3
 80038be:	4805      	ldr	r0, [pc, #20]	; (80038d4 <main+0x180>)
 80038c0:	f7fe f9e2 	bl	8001c88 <ProcessUserInput>
    HeaterFrequency = TCB.Controller.PID.Config.Frequency;
 80038c4:	e7c6      	b.n	8003854 <main+0x100>
 80038c6:	bf00      	nop
 80038c8:	20001cd0 	.word	0x20001cd0
 80038cc:	20000554 	.word	0x20000554
 80038d0:	20000500 	.word	0x20000500
 80038d4:	20000690 	.word	0x20000690
 80038d8:	08014d80 	.word	0x08014d80
 80038dc:	08014d90 	.word	0x08014d90
 80038e0:	20000fb0 	.word	0x20000fb0
 80038e4:	200005ac 	.word	0x200005ac
 80038e8:	2000063c 	.word	0x2000063c
 80038ec:	200005f4 	.word	0x200005f4
 80038f0:	2000000e 	.word	0x2000000e
 80038f4:	20000684 	.word	0x20000684
 80038f8:	20000685 	.word	0x20000685
 80038fc:	20000fa8 	.word	0x20000fa8

08003900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b094      	sub	sp, #80	; 0x50
 8003904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003906:	f107 0320 	add.w	r3, r7, #32
 800390a:	2230      	movs	r2, #48	; 0x30
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f00b f9bc 	bl	800ec8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003914:	f107 030c 	add.w	r3, r7, #12
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003924:	2300      	movs	r3, #0
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	4b28      	ldr	r3, [pc, #160]	; (80039cc <SystemClock_Config+0xcc>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	4a27      	ldr	r2, [pc, #156]	; (80039cc <SystemClock_Config+0xcc>)
 800392e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003932:	6413      	str	r3, [r2, #64]	; 0x40
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <SystemClock_Config+0xcc>)
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003940:	2300      	movs	r3, #0
 8003942:	607b      	str	r3, [r7, #4]
 8003944:	4b22      	ldr	r3, [pc, #136]	; (80039d0 <SystemClock_Config+0xd0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a21      	ldr	r2, [pc, #132]	; (80039d0 <SystemClock_Config+0xd0>)
 800394a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b1f      	ldr	r3, [pc, #124]	; (80039d0 <SystemClock_Config+0xd0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800395c:	2301      	movs	r3, #1
 800395e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003966:	2302      	movs	r3, #2
 8003968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800396a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800396e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003970:	2304      	movs	r3, #4
 8003972:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003974:	23a8      	movs	r3, #168	; 0xa8
 8003976:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003978:	2302      	movs	r3, #2
 800397a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800397c:	2307      	movs	r3, #7
 800397e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003980:	f107 0320 	add.w	r3, r7, #32
 8003984:	4618      	mov	r0, r3
 8003986:	f005 f99d 	bl	8008cc4 <HAL_RCC_OscConfig>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003990:	f000 fab6 	bl	8003f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003994:	230f      	movs	r3, #15
 8003996:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003998:	2302      	movs	r3, #2
 800399a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80039a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	2105      	movs	r1, #5
 80039b2:	4618      	mov	r0, r3
 80039b4:	f005 fbfe 	bl	80091b4 <HAL_RCC_ClockConfig>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80039be:	f000 fa9f 	bl	8003f00 <Error_Handler>
  }
}
 80039c2:	bf00      	nop
 80039c4:	3750      	adds	r7, #80	; 0x50
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40007000 	.word	0x40007000

080039d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <MX_I2C1_Init+0x74>)
 80039da:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <MX_I2C1_Init+0x78>)
 80039dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <MX_I2C1_Init+0x74>)
 80039e0:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <MX_I2C1_Init+0x7c>)
 80039e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039e4:	4b18      	ldr	r3, [pc, #96]	; (8003a48 <MX_I2C1_Init+0x74>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80039ea:	4b17      	ldr	r3, [pc, #92]	; (8003a48 <MX_I2C1_Init+0x74>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039f0:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <MX_I2C1_Init+0x74>)
 80039f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039f8:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <MX_I2C1_Init+0x74>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80039fe:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <MX_I2C1_Init+0x74>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a04:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <MX_I2C1_Init+0x74>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <MX_I2C1_Init+0x74>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a10:	480d      	ldr	r0, [pc, #52]	; (8003a48 <MX_I2C1_Init+0x74>)
 8003a12:	f001 f9ef 	bl	8004df4 <HAL_I2C_Init>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003a1c:	f000 fa70 	bl	8003f00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a20:	2100      	movs	r1, #0
 8003a22:	4809      	ldr	r0, [pc, #36]	; (8003a48 <MX_I2C1_Init+0x74>)
 8003a24:	f003 fe56 	bl	80076d4 <HAL_I2CEx_ConfigAnalogFilter>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003a2e:	f000 fa67 	bl	8003f00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003a32:	2100      	movs	r1, #0
 8003a34:	4804      	ldr	r0, [pc, #16]	; (8003a48 <MX_I2C1_Init+0x74>)
 8003a36:	f003 fe89 	bl	800774c <HAL_I2CEx_ConfigDigitalFilter>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003a40:	f000 fa5e 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a44:	bf00      	nop
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000500 	.word	0x20000500
 8003a4c:	40005400 	.word	0x40005400
 8003a50:	000186a0 	.word	0x000186a0

08003a54 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003a58:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <MX_SPI4_Init+0x64>)
 8003a5a:	4a18      	ldr	r2, [pc, #96]	; (8003abc <MX_SPI4_Init+0x68>)
 8003a5c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003a5e:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <MX_SPI4_Init+0x64>)
 8003a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a64:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003a66:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <MX_SPI4_Init+0x64>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a6c:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <MX_SPI4_Init+0x64>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a72:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <MX_SPI4_Init+0x64>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <MX_SPI4_Init+0x64>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003a7e:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <MX_SPI4_Init+0x64>)
 8003a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a84:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <MX_SPI4_Init+0x64>)
 8003a88:	2220      	movs	r2, #32
 8003a8a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <MX_SPI4_Init+0x64>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <MX_SPI4_Init+0x64>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <MX_SPI4_Init+0x64>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <MX_SPI4_Init+0x64>)
 8003aa0:	220a      	movs	r2, #10
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003aa4:	4804      	ldr	r0, [pc, #16]	; (8003ab8 <MX_SPI4_Init+0x64>)
 8003aa6:	f005 fd91 	bl	80095cc <HAL_SPI_Init>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003ab0:	f000 fa26 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000554 	.word	0x20000554
 8003abc:	40013400 	.word	0x40013400

08003ac0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ac6:	f107 0308 	add.w	r3, r7, #8
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003adc:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <MX_TIM2_Init+0x94>)
 8003ade:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ae2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420;
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <MX_TIM2_Init+0x94>)
 8003ae6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8003aea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aec:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <MX_TIM2_Init+0x94>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8003af2:	4b18      	ldr	r3, [pc, #96]	; (8003b54 <MX_TIM2_Init+0x94>)
 8003af4:	2232      	movs	r2, #50	; 0x32
 8003af6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <MX_TIM2_Init+0x94>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003afe:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <MX_TIM2_Init+0x94>)
 8003b00:	2280      	movs	r2, #128	; 0x80
 8003b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b04:	4813      	ldr	r0, [pc, #76]	; (8003b54 <MX_TIM2_Init+0x94>)
 8003b06:	f006 fab1 	bl	800a06c <HAL_TIM_Base_Init>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003b10:	f000 f9f6 	bl	8003f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b1a:	f107 0308 	add.w	r3, r7, #8
 8003b1e:	4619      	mov	r1, r3
 8003b20:	480c      	ldr	r0, [pc, #48]	; (8003b54 <MX_TIM2_Init+0x94>)
 8003b22:	f006 fc6b 	bl	800a3fc <HAL_TIM_ConfigClockSource>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003b2c:	f000 f9e8 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b30:	2300      	movs	r3, #0
 8003b32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b38:	463b      	mov	r3, r7
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4805      	ldr	r0, [pc, #20]	; (8003b54 <MX_TIM2_Init+0x94>)
 8003b3e:	f006 fe87 	bl	800a850 <HAL_TIMEx_MasterConfigSynchronization>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003b48:	f000 f9da 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b4c:	bf00      	nop
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	200005ac 	.word	0x200005ac

08003b58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b5e:	f107 0308 	add.w	r3, r7, #8
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b6c:	463b      	mov	r3, r7
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b74:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <MX_TIM4_Init+0x94>)
 8003b76:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <MX_TIM4_Init+0x98>)
 8003b78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4200;
 8003b7a:	4b1c      	ldr	r3, [pc, #112]	; (8003bec <MX_TIM4_Init+0x94>)
 8003b7c:	f241 0268 	movw	r2, #4200	; 0x1068
 8003b80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b82:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <MX_TIM4_Init+0x94>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8003b88:	4b18      	ldr	r3, [pc, #96]	; (8003bec <MX_TIM4_Init+0x94>)
 8003b8a:	2264      	movs	r2, #100	; 0x64
 8003b8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003b8e:	4b17      	ldr	r3, [pc, #92]	; (8003bec <MX_TIM4_Init+0x94>)
 8003b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <MX_TIM4_Init+0x94>)
 8003b98:	2280      	movs	r2, #128	; 0x80
 8003b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003b9c:	4813      	ldr	r0, [pc, #76]	; (8003bec <MX_TIM4_Init+0x94>)
 8003b9e:	f006 fa65 	bl	800a06c <HAL_TIM_Base_Init>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003ba8:	f000 f9aa 	bl	8003f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003bb2:	f107 0308 	add.w	r3, r7, #8
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	480c      	ldr	r0, [pc, #48]	; (8003bec <MX_TIM4_Init+0x94>)
 8003bba:	f006 fc1f 	bl	800a3fc <HAL_TIM_ConfigClockSource>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003bc4:	f000 f99c 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003bd0:	463b      	mov	r3, r7
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4805      	ldr	r0, [pc, #20]	; (8003bec <MX_TIM4_Init+0x94>)
 8003bd6:	f006 fe3b 	bl	800a850 <HAL_TIMEx_MasterConfigSynchronization>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003be0:	f000 f98e 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003be4:	bf00      	nop
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	200005f4 	.word	0x200005f4
 8003bf0:	40000800 	.word	0x40000800

08003bf4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bfa:	463b      	mov	r3, r7
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <MX_TIM6_Init+0x64>)
 8003c04:	4a15      	ldr	r2, [pc, #84]	; (8003c5c <MX_TIM6_Init+0x68>)
 8003c06:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1680;
 8003c08:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <MX_TIM6_Init+0x64>)
 8003c0a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8003c0e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c10:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <MX_TIM6_Init+0x64>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <MX_TIM6_Init+0x64>)
 8003c18:	2264      	movs	r2, #100	; 0x64
 8003c1a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c1c:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <MX_TIM6_Init+0x64>)
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003c22:	480d      	ldr	r0, [pc, #52]	; (8003c58 <MX_TIM6_Init+0x64>)
 8003c24:	f006 fa22 	bl	800a06c <HAL_TIM_Base_Init>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003c2e:	f000 f967 	bl	8003f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003c3a:	463b      	mov	r3, r7
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4806      	ldr	r0, [pc, #24]	; (8003c58 <MX_TIM6_Init+0x64>)
 8003c40:	f006 fe06 	bl	800a850 <HAL_TIMEx_MasterConfigSynchronization>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003c4a:	f000 f959 	bl	8003f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	2000063c 	.word	0x2000063c
 8003c5c:	40001000 	.word	0x40001000

08003c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08c      	sub	sp, #48	; 0x30
 8003c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c66:	f107 031c 	add.w	r3, r7, #28
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	605a      	str	r2, [r3, #4]
 8003c70:	609a      	str	r2, [r3, #8]
 8003c72:	60da      	str	r2, [r3, #12]
 8003c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	4b83      	ldr	r3, [pc, #524]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	4a82      	ldr	r2, [pc, #520]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003c80:	f043 0310 	orr.w	r3, r3, #16
 8003c84:	6313      	str	r3, [r2, #48]	; 0x30
 8003c86:	4b80      	ldr	r3, [pc, #512]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	4b7c      	ldr	r3, [pc, #496]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	4a7b      	ldr	r2, [pc, #492]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca2:	4b79      	ldr	r3, [pc, #484]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	4b75      	ldr	r3, [pc, #468]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	4a74      	ldr	r2, [pc, #464]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cbe:	4b72      	ldr	r3, [pc, #456]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	4b6e      	ldr	r3, [pc, #440]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4a6d      	ldr	r2, [pc, #436]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003cd4:	f043 0304 	orr.w	r3, r3, #4
 8003cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cda:	4b6b      	ldr	r3, [pc, #428]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	4b67      	ldr	r3, [pc, #412]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	4a66      	ldr	r2, [pc, #408]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003cf0:	f043 0308 	orr.w	r3, r3, #8
 8003cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf6:	4b64      	ldr	r3, [pc, #400]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	4b60      	ldr	r3, [pc, #384]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	4a5f      	ldr	r2, [pc, #380]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003d0c:	f043 0302 	orr.w	r3, r3, #2
 8003d10:	6313      	str	r3, [r2, #48]	; 0x30
 8003d12:	4b5d      	ldr	r3, [pc, #372]	; (8003e88 <MX_GPIO_Init+0x228>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	607b      	str	r3, [r7, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|nWakeUp_Pin, GPIO_PIN_RESET);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f44f 7184 	mov.w	r1, #264	; 0x108
 8003d24:	4859      	ldr	r0, [pc, #356]	; (8003e8c <MX_GPIO_Init+0x22c>)
 8003d26:	f001 f84b 	bl	8004dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heater_GPIO_Port, Heater_Pin, GPIO_PIN_RESET);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2120      	movs	r1, #32
 8003d2e:	4858      	ldr	r0, [pc, #352]	; (8003e90 <MX_GPIO_Init+0x230>)
 8003d30:	f001 f846 	bl	8004dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, nRst_Pin|nClr_Pin|nCS_Pin, GPIO_PIN_SET);
 8003d34:	2201      	movs	r2, #1
 8003d36:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8003d3a:	4854      	ldr	r0, [pc, #336]	; (8003e8c <MX_GPIO_Init+0x22c>)
 8003d3c:	f001 f840 	bl	8004dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nLDAC_GPIO_Port, nLDAC_Pin, GPIO_PIN_SET);
 8003d40:	2201      	movs	r2, #1
 8003d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d46:	4853      	ldr	r0, [pc, #332]	; (8003e94 <MX_GPIO_Init+0x234>)
 8003d48:	f001 f83a 	bl	8004dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2101      	movs	r1, #1
 8003d50:	4850      	ldr	r0, [pc, #320]	; (8003e94 <MX_GPIO_Init+0x234>)
 8003d52:	f001 f835 	bl	8004dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d56:	2308      	movs	r3, #8
 8003d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d62:	2300      	movs	r3, #0
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d66:	f107 031c 	add.w	r3, r7, #28
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4847      	ldr	r0, [pc, #284]	; (8003e8c <MX_GPIO_Init+0x22c>)
 8003d6e:	f000 fe7b 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d72:	2303      	movs	r3, #3
 8003d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d76:	2302      	movs	r3, #2
 8003d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003d82:	2308      	movs	r3, #8
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d86:	f107 031c 	add.w	r3, r7, #28
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4842      	ldr	r0, [pc, #264]	; (8003e98 <MX_GPIO_Init+0x238>)
 8003d8e:	f000 fe6b 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d92:	23f0      	movs	r3, #240	; 0xf0
 8003d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d96:	2302      	movs	r3, #2
 8003d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003da2:	2305      	movs	r3, #5
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da6:	f107 031c 	add.w	r3, r7, #28
 8003daa:	4619      	mov	r1, r3
 8003dac:	483a      	ldr	r0, [pc, #232]	; (8003e98 <MX_GPIO_Init+0x238>)
 8003dae:	f000 fe5b 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003db2:	2310      	movs	r3, #16
 8003db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003db6:	2303      	movs	r3, #3
 8003db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dbe:	f107 031c 	add.w	r3, r7, #28
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4832      	ldr	r0, [pc, #200]	; (8003e90 <MX_GPIO_Init+0x230>)
 8003dc6:	f000 fe4f 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Heater_Pin */
  GPIO_InitStruct.Pin = Heater_Pin;
 8003dca:	2320      	movs	r3, #32
 8003dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Heater_GPIO_Port, &GPIO_InitStruct);
 8003dda:	f107 031c 	add.w	r3, r7, #28
 8003dde:	4619      	mov	r1, r3
 8003de0:	482b      	ldr	r0, [pc, #172]	; (8003e90 <MX_GPIO_Init+0x230>)
 8003de2:	f000 fe41 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : nWakeUp_Pin nRst_Pin nClr_Pin nCS_Pin */
  GPIO_InitStruct.Pin = nWakeUp_Pin|nRst_Pin|nClr_Pin|nCS_Pin;
 8003de6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dec:	2301      	movs	r3, #1
 8003dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003df4:	2302      	movs	r3, #2
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003df8:	f107 031c 	add.w	r3, r7, #28
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4823      	ldr	r0, [pc, #140]	; (8003e8c <MX_GPIO_Init+0x22c>)
 8003e00:	f000 fe32 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : nLDAC_Pin */
  GPIO_InitStruct.Pin = nLDAC_Pin;
 8003e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e12:	2302      	movs	r3, #2
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nLDAC_GPIO_Port, &GPIO_InitStruct);
 8003e16:	f107 031c 	add.w	r3, r7, #28
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	481d      	ldr	r0, [pc, #116]	; (8003e94 <MX_GPIO_Init+0x234>)
 8003e1e:	f000 fe23 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003e22:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003e26:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e30:	2303      	movs	r3, #3
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003e34:	230c      	movs	r3, #12
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e38:	f107 031c 	add.w	r3, r7, #28
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4814      	ldr	r0, [pc, #80]	; (8003e90 <MX_GPIO_Init+0x230>)
 8003e40:	f000 fe12 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e44:	2301      	movs	r3, #1
 8003e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e54:	f107 031c 	add.w	r3, r7, #28
 8003e58:	4619      	mov	r1, r3
 8003e5a:	480e      	ldr	r0, [pc, #56]	; (8003e94 <MX_GPIO_Init+0x234>)
 8003e5c:	f000 fe04 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e60:	2304      	movs	r3, #4
 8003e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e64:	2302      	movs	r3, #2
 8003e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003e70:	230c      	movs	r3, #12
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e74:	f107 031c 	add.w	r3, r7, #28
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4806      	ldr	r0, [pc, #24]	; (8003e94 <MX_GPIO_Init+0x234>)
 8003e7c:	f000 fdf4 	bl	8004a68 <HAL_GPIO_Init>

}
 8003e80:	bf00      	nop
 8003e82:	3730      	adds	r7, #48	; 0x30
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40020800 	.word	0x40020800
 8003e94:	40020c00 	.word	0x40020c00
 8003e98:	40020000 	.word	0x40020000

08003e9c <_write>:

/* This allows printf to write to the debugger and USB */
/* USB needs #include "usbd_cdc_if.h" */
/* ITM Stimulus port 0 must be enabled in your trace settings */
int _write(int file, char *ptr, int len)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  int i, res;

  for (i=0;i<20; i++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	e00d      	b.n	8003eca <_write+0x2e>
  {
    res = CDC_Transmit_FS((uint8_t*) ptr, len);  // USB out
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	68b8      	ldr	r0, [r7, #8]
 8003eb6:	f00a fa3b 	bl	800e330 <CDC_Transmit_FS>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	617b      	str	r3, [r7, #20]
    if (res == USBD_OK)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d006      	beq.n	8003ed2 <_write+0x36>
  for (i=0;i<20; i++)
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	2b13      	cmp	r3, #19
 8003ece:	ddee      	ble.n	8003eae <_write+0x12>
 8003ed0:	e000      	b.n	8003ed4 <_write+0x38>
      break;
 8003ed2:	bf00      	nop
  }

  for (int i = 0; i < len; i++)
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	e009      	b.n	8003eee <_write+0x52>
    ITM_SendChar((*ptr++));              // debugger out
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	60ba      	str	r2, [r7, #8]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff faf0 	bl	80034c8 <ITM_SendChar>
  for (int i = 0; i < len; i++)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	3301      	adds	r3, #1
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	dbf1      	blt.n	8003eda <_write+0x3e>
  return len;
 8003ef6:	687b      	ldr	r3, [r7, #4]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003f04:	b672      	cpsid	i
}
 8003f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f08:	e7fe      	b.n	8003f08 <Error_Handler+0x8>
	...

08003f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <HAL_MspInit+0x4c>)
 8003f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1a:	4a0f      	ldr	r2, [pc, #60]	; (8003f58 <HAL_MspInit+0x4c>)
 8003f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f20:	6453      	str	r3, [r2, #68]	; 0x44
 8003f22:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <HAL_MspInit+0x4c>)
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f2a:	607b      	str	r3, [r7, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_MspInit+0x4c>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	4a08      	ldr	r2, [pc, #32]	; (8003f58 <HAL_MspInit+0x4c>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_MspInit+0x4c>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40023800 	.word	0x40023800

08003f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	f107 0314 	add.w	r3, r7, #20
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a21      	ldr	r2, [pc, #132]	; (8004000 <HAL_I2C_MspInit+0xa4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d13b      	bne.n	8003ff6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	4b20      	ldr	r3, [pc, #128]	; (8004004 <HAL_I2C_MspInit+0xa8>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	4a1f      	ldr	r2, [pc, #124]	; (8004004 <HAL_I2C_MspInit+0xa8>)
 8003f88:	f043 0302 	orr.w	r3, r3, #2
 8003f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8e:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <HAL_I2C_MspInit+0xa8>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f9a:	23c0      	movs	r3, #192	; 0xc0
 8003f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f9e:	2312      	movs	r3, #18
 8003fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003faa:	2304      	movs	r3, #4
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fae:	f107 0314 	add.w	r3, r7, #20
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4814      	ldr	r0, [pc, #80]	; (8004008 <HAL_I2C_MspInit+0xac>)
 8003fb6:	f000 fd57 	bl	8004a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	4b11      	ldr	r3, [pc, #68]	; (8004004 <HAL_I2C_MspInit+0xa8>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	4a10      	ldr	r2, [pc, #64]	; (8004004 <HAL_I2C_MspInit+0xa8>)
 8003fc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fca:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <HAL_I2C_MspInit+0xa8>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2100      	movs	r1, #0
 8003fda:	201f      	movs	r0, #31
 8003fdc:	f000 fcdd 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003fe0:	201f      	movs	r0, #31
 8003fe2:	f000 fcf6 	bl	80049d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2100      	movs	r1, #0
 8003fea:	2020      	movs	r0, #32
 8003fec:	f000 fcd5 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003ff0:	2020      	movs	r0, #32
 8003ff2:	f000 fcee 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ff6:	bf00      	nop
 8003ff8:	3728      	adds	r7, #40	; 0x28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40005400 	.word	0x40005400
 8004004:	40023800 	.word	0x40023800
 8004008:	40020400 	.word	0x40020400

0800400c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	; 0x28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004014:	f107 0314 	add.w	r3, r7, #20
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	605a      	str	r2, [r3, #4]
 800401e:	609a      	str	r2, [r3, #8]
 8004020:	60da      	str	r2, [r3, #12]
 8004022:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1d      	ldr	r2, [pc, #116]	; (80040a0 <HAL_SPI_MspInit+0x94>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d134      	bne.n	8004098 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <HAL_SPI_MspInit+0x98>)
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <HAL_SPI_MspInit+0x98>)
 8004038:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800403c:	6453      	str	r3, [r2, #68]	; 0x44
 800403e:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <HAL_SPI_MspInit+0x98>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_SPI_MspInit+0x98>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <HAL_SPI_MspInit+0x98>)
 8004054:	f043 0310 	orr.w	r3, r3, #16
 8004058:	6313      	str	r3, [r2, #48]	; 0x30
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <HAL_SPI_MspInit+0x98>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8004066:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800406a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406c:	2302      	movs	r3, #2
 800406e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004070:	2300      	movs	r3, #0
 8004072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004074:	2303      	movs	r3, #3
 8004076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004078:	2305      	movs	r3, #5
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800407c:	f107 0314 	add.w	r3, r7, #20
 8004080:	4619      	mov	r1, r3
 8004082:	4809      	ldr	r0, [pc, #36]	; (80040a8 <HAL_SPI_MspInit+0x9c>)
 8004084:	f000 fcf0 	bl	8004a68 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8004088:	2200      	movs	r2, #0
 800408a:	2100      	movs	r1, #0
 800408c:	2054      	movs	r0, #84	; 0x54
 800408e:	f000 fc84 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8004092:	2054      	movs	r0, #84	; 0x54
 8004094:	f000 fc9d 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8004098:	bf00      	nop
 800409a:	3728      	adds	r7, #40	; 0x28
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40013400 	.word	0x40013400
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40021000 	.word	0x40021000

080040ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040bc:	d116      	bne.n	80040ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	4b28      	ldr	r3, [pc, #160]	; (8004164 <HAL_TIM_Base_MspInit+0xb8>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	4a27      	ldr	r2, [pc, #156]	; (8004164 <HAL_TIM_Base_MspInit+0xb8>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6413      	str	r3, [r2, #64]	; 0x40
 80040ce:	4b25      	ldr	r3, [pc, #148]	; (8004164 <HAL_TIM_Base_MspInit+0xb8>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80040da:	2200      	movs	r2, #0
 80040dc:	2100      	movs	r1, #0
 80040de:	201c      	movs	r0, #28
 80040e0:	f000 fc5b 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040e4:	201c      	movs	r0, #28
 80040e6:	f000 fc74 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80040ea:	e036      	b.n	800415a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1d      	ldr	r2, [pc, #116]	; (8004168 <HAL_TIM_Base_MspInit+0xbc>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d116      	bne.n	8004124 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <HAL_TIM_Base_MspInit+0xb8>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	4a19      	ldr	r2, [pc, #100]	; (8004164 <HAL_TIM_Base_MspInit+0xb8>)
 8004100:	f043 0304 	orr.w	r3, r3, #4
 8004104:	6413      	str	r3, [r2, #64]	; 0x40
 8004106:	4b17      	ldr	r3, [pc, #92]	; (8004164 <HAL_TIM_Base_MspInit+0xb8>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004112:	2200      	movs	r2, #0
 8004114:	2100      	movs	r1, #0
 8004116:	201e      	movs	r0, #30
 8004118:	f000 fc3f 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800411c:	201e      	movs	r0, #30
 800411e:	f000 fc58 	bl	80049d2 <HAL_NVIC_EnableIRQ>
}
 8004122:	e01a      	b.n	800415a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a10      	ldr	r2, [pc, #64]	; (800416c <HAL_TIM_Base_MspInit+0xc0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d115      	bne.n	800415a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <HAL_TIM_Base_MspInit+0xb8>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	4a0b      	ldr	r2, [pc, #44]	; (8004164 <HAL_TIM_Base_MspInit+0xb8>)
 8004138:	f043 0310 	orr.w	r3, r3, #16
 800413c:	6413      	str	r3, [r2, #64]	; 0x40
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <HAL_TIM_Base_MspInit+0xb8>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800414a:	2200      	movs	r2, #0
 800414c:	2100      	movs	r1, #0
 800414e:	2036      	movs	r0, #54	; 0x36
 8004150:	f000 fc23 	bl	800499a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004154:	2036      	movs	r0, #54	; 0x36
 8004156:	f000 fc3c 	bl	80049d2 <HAL_NVIC_EnableIRQ>
}
 800415a:	bf00      	nop
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	40000800 	.word	0x40000800
 800416c:	40001000 	.word	0x40001000

08004170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004174:	e7fe      	b.n	8004174 <NMI_Handler+0x4>

08004176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004176:	b480      	push	{r7}
 8004178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800417a:	e7fe      	b.n	800417a <HardFault_Handler+0x4>

0800417c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004180:	e7fe      	b.n	8004180 <MemManage_Handler+0x4>

08004182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004182:	b480      	push	{r7}
 8004184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004186:	e7fe      	b.n	8004186 <BusFault_Handler+0x4>

08004188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800418c:	e7fe      	b.n	800418c <UsageFault_Handler+0x4>

0800418e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800418e:	b480      	push	{r7}
 8004190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041aa:	b480      	push	{r7}
 80041ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041ae:	bf00      	nop
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041bc:	f000 face 	bl	800475c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041c0:	bf00      	nop
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041c8:	4802      	ldr	r0, [pc, #8]	; (80041d4 <TIM2_IRQHandler+0x10>)
 80041ca:	f006 f80f 	bl	800a1ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	200005ac 	.word	0x200005ac

080041d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80041dc:	4802      	ldr	r0, [pc, #8]	; (80041e8 <TIM4_IRQHandler+0x10>)
 80041de:	f006 f805 	bl	800a1ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	200005f4 	.word	0x200005f4

080041ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80041f0:	4802      	ldr	r0, [pc, #8]	; (80041fc <I2C1_EV_IRQHandler+0x10>)
 80041f2:	f001 fa67 	bl	80056c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80041f6:	bf00      	nop
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000500 	.word	0x20000500

08004200 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004204:	4802      	ldr	r0, [pc, #8]	; (8004210 <I2C1_ER_IRQHandler+0x10>)
 8004206:	f001 fbce 	bl	80059a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800420a:	bf00      	nop
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000500 	.word	0x20000500

08004214 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004218:	4802      	ldr	r0, [pc, #8]	; (8004224 <TIM6_DAC_IRQHandler+0x10>)
 800421a:	f005 ffe7 	bl	800a1ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800421e:	bf00      	nop
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	2000063c 	.word	0x2000063c

08004228 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800422c:	4802      	ldr	r0, [pc, #8]	; (8004238 <OTG_FS_IRQHandler+0x10>)
 800422e:	f003 fc1c 	bl	8007a6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004232:	bf00      	nop
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20002a84 	.word	0x20002a84

0800423c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8004240:	4802      	ldr	r0, [pc, #8]	; (800424c <SPI4_IRQHandler+0x10>)
 8004242:	f005 fd2b 	bl	8009c9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8004246:	bf00      	nop
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000554 	.word	0x20000554

08004250 <StringFIFOInit>:

#include <stringfifo.h>
#include "string.h"

void StringFIFOInit(struct sStringFIFO* fifo)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint16_t i;
  fifo->head = 0;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
  fifo->tail = 0;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  for (i=0; i<FIFO_BUFFER_SIZE; i++)
 8004268:	2300      	movs	r3, #0
 800426a:	81fb      	strh	r3, [r7, #14]
 800426c:	e006      	b.n	800427c <StringFIFOInit+0x2c>
    fifo->buffer[i]=0;
 800426e:	89fb      	ldrh	r3, [r7, #14]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	2100      	movs	r1, #0
 8004274:	54d1      	strb	r1, [r2, r3]
  for (i=0; i<FIFO_BUFFER_SIZE; i++)
 8004276:	89fb      	ldrh	r3, [r7, #14]
 8004278:	3301      	adds	r3, #1
 800427a:	81fb      	strh	r3, [r7, #14]
 800427c:	89fb      	ldrh	r3, [r7, #14]
 800427e:	2bf9      	cmp	r3, #249	; 0xf9
 8004280:	d9f5      	bls.n	800426e <StringFIFOInit+0x1e>
}
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <StringFIFOUsed>:

uint16_t StringFIFOUsed(struct sStringFIFO* fifo)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  int16_t used = fifo->tail - fifo->head;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800429e:	b29a      	uxth	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	81fb      	strh	r3, [r7, #14]
  if (used < 0)
 80042ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	da03      	bge.n	80042be <StringFIFOUsed+0x2e>
    used += FIFO_BUFFER_SIZE;
 80042b6:	89fb      	ldrh	r3, [r7, #14]
 80042b8:	33fa      	adds	r3, #250	; 0xfa
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	81fb      	strh	r3, [r7, #14]
  return (uint16_t) used;
 80042be:	89fb      	ldrh	r3, [r7, #14]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <StringFIFOAvailable>:

uint16_t StringFIFOAvailable(struct sStringFIFO* fifo)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint16_t used = StringFIFOUsed(fifo);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff ffdb 	bl	8004290 <StringFIFOUsed>
 80042da:	4603      	mov	r3, r0
 80042dc:	81fb      	strh	r3, [r7, #14]
  int16_t available = FIFO_BUFFER_SIZE - used - 1; // don't use the last byte, otherwise we won't know that we're full
 80042de:	89fb      	ldrh	r3, [r7, #14]
 80042e0:	f1c3 03f9 	rsb	r3, r3, #249	; 0xf9
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	81bb      	strh	r3, [r7, #12]
  return available;
 80042e8:	89bb      	ldrh	r3, [r7, #12]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <StringFIFOAdd>:

uint8_t StringFIFOAdd(struct sStringFIFO* fifo, uint8_t* item, size_t size)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  int16_t available = StringFIFOAvailable(fifo);
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f7ff ffe3 	bl	80042cc <StringFIFOAvailable>
 8004306:	4603      	mov	r3, r0
 8004308:	82fb      	strh	r3, [r7, #22]

  if (available == 0)
 800430a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d104      	bne.n	800431c <StringFIFOAdd+0x28>
  {
    printf("Fifo full\n");
 8004312:	4817      	ldr	r0, [pc, #92]	; (8004370 <StringFIFOAdd+0x7c>)
 8004314:	f00b fbc2 	bl	800fa9c <puts>
    return 1;
 8004318:	2301      	movs	r3, #1
 800431a:	e025      	b.n	8004368 <StringFIFOAdd+0x74>
  }

  if (size > available)
 800431c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	429a      	cmp	r2, r3
 8004324:	d902      	bls.n	800432c <StringFIFOAdd+0x38>
    size = available;
 8004326:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800432a:	607b      	str	r3, [r7, #4]

  memcpy(&fifo->buffer[fifo->tail], item, size);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004332:	461a      	mov	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	4618      	mov	r0, r3
 800433e:	f00a fc7d 	bl	800ec3c <memcpy>
  fifo->tail = (fifo->tail + size) % FIFO_BUFFER_SIZE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004348:	461a      	mov	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	441a      	add	r2, r3
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <StringFIFOAdd+0x80>)
 8004350:	fba3 1302 	umull	r1, r3, r3, r2
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	21fa      	movs	r1, #250	; 0xfa
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	b2da      	uxtb	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  return 0;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	08014dc4 	.word	0x08014dc4
 8004374:	10624dd3 	.word	0x10624dd3

08004378 <StringFIFORemove>:

uint8_t StringFIFORemove(struct sStringFIFO* fifo, uint8_t* string)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint16_t i, pos;
  uint16_t used = StringFIFOUsed(fifo);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ff84 	bl	8004290 <StringFIFOUsed>
 8004388:	4603      	mov	r3, r0
 800438a:	81fb      	strh	r3, [r7, #14]
  uint16_t h_length, t_length;
  int16_t len;

  if (fifo->head == fifo->tail)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 20fa 	ldrb.w	r2, [r3, #250]	; 0xfa
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8004398:	429a      	cmp	r2, r3
 800439a:	d101      	bne.n	80043a0 <StringFIFORemove+0x28>
  {
	  //printf("Empty fifo.\n");
    return 3;
 800439c:	2303      	movs	r3, #3
 800439e:	e09e      	b.n	80044de <StringFIFORemove+0x166>
  }

  for (i=0; i<used; i++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	82fb      	strh	r3, [r7, #22]
 80043a4:	e095      	b.n	80044d2 <StringFIFORemove+0x15a>
  {
    pos = (fifo->head + i) % FIFO_BUFFER_SIZE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80043ac:	461a      	mov	r2, r3
 80043ae:	8afb      	ldrh	r3, [r7, #22]
 80043b0:	4413      	add	r3, r2
 80043b2:	4a4d      	ldr	r2, [pc, #308]	; (80044e8 <StringFIFORemove+0x170>)
 80043b4:	fb82 1203 	smull	r1, r2, r2, r3
 80043b8:	1111      	asrs	r1, r2, #4
 80043ba:	17da      	asrs	r2, r3, #31
 80043bc:	1a8a      	subs	r2, r1, r2
 80043be:	21fa      	movs	r1, #250	; 0xfa
 80043c0:	fb01 f202 	mul.w	r2, r1, r2
 80043c4:	1a9a      	subs	r2, r3, r2
 80043c6:	4613      	mov	r3, r2
 80043c8:	81bb      	strh	r3, [r7, #12]
    if ((fifo->buffer[pos] == '\n') || (fifo->buffer[pos] == '\r'))
 80043ca:	89bb      	ldrh	r3, [r7, #12]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	5cd3      	ldrb	r3, [r2, r3]
 80043d0:	2b0a      	cmp	r3, #10
 80043d2:	d004      	beq.n	80043de <StringFIFORemove+0x66>
 80043d4:	89bb      	ldrh	r3, [r7, #12]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	5cd3      	ldrb	r3, [r2, r3]
 80043da:	2b0d      	cmp	r3, #13
 80043dc:	d176      	bne.n	80044cc <StringFIFORemove+0x154>
    {
      if (i == 0)
 80043de:	8afb      	ldrh	r3, [r7, #22]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d116      	bne.n	8004412 <StringFIFORemove+0x9a>
      {
        fifo->head = (fifo->head + 1) % FIFO_BUFFER_SIZE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80043ea:	3301      	adds	r3, #1
 80043ec:	4a3e      	ldr	r2, [pc, #248]	; (80044e8 <StringFIFORemove+0x170>)
 80043ee:	fb82 1203 	smull	r1, r2, r2, r3
 80043f2:	1111      	asrs	r1, r2, #4
 80043f4:	17da      	asrs	r2, r3, #31
 80043f6:	1a8a      	subs	r2, r1, r2
 80043f8:	21fa      	movs	r1, #250	; 0xfa
 80043fa:	fb01 f202 	mul.w	r2, r1, r2
 80043fe:	1a9a      	subs	r2, r3, r2
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
        string[0] = 0;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
//        printf("Zero length string in fifo.\n");
        return 1;
 800440e:	2301      	movs	r3, #1
 8004410:	e065      	b.n	80044de <StringFIFORemove+0x166>
      }
      len = (pos - fifo->head);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004418:	b29b      	uxth	r3, r3
 800441a:	89ba      	ldrh	r2, [r7, #12]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	b29b      	uxth	r3, r3
 8004420:	823b      	strh	r3, [r7, #16]
      if (len < 0)
 8004422:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	da03      	bge.n	8004432 <StringFIFORemove+0xba>
        len += FIFO_BUFFER_SIZE;
 800442a:	8a3b      	ldrh	r3, [r7, #16]
 800442c:	33fa      	adds	r3, #250	; 0xfa
 800442e:	b29b      	uxth	r3, r3
 8004430:	823b      	strh	r3, [r7, #16]
      if (len > (FIFO_BUFFER_SIZE - fifo->head))
 8004432:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800443c:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8004440:	429a      	cmp	r2, r3
 8004442:	dd0b      	ble.n	800445c <StringFIFORemove+0xe4>
      {
        h_length = FIFO_BUFFER_SIZE - fifo->head;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800444a:	b29b      	uxth	r3, r3
 800444c:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 8004450:	82bb      	strh	r3, [r7, #20]
        t_length = len - h_length;
 8004452:	8a3a      	ldrh	r2, [r7, #16]
 8004454:	8abb      	ldrh	r3, [r7, #20]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	827b      	strh	r3, [r7, #18]
 800445a:	e003      	b.n	8004464 <StringFIFORemove+0xec>
      }
      else
      {
        h_length = len;
 800445c:	8a3b      	ldrh	r3, [r7, #16]
 800445e:	82bb      	strh	r3, [r7, #20]
        t_length = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	827b      	strh	r3, [r7, #18]
      }
      memcpy(string, &fifo->buffer[fifo->head], h_length);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800446a:	461a      	mov	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4413      	add	r3, r2
 8004470:	8aba      	ldrh	r2, [r7, #20]
 8004472:	4619      	mov	r1, r3
 8004474:	6838      	ldr	r0, [r7, #0]
 8004476:	f00a fbe1 	bl	800ec3c <memcpy>
      if (t_length)
 800447a:	8a7b      	ldrh	r3, [r7, #18]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <StringFIFORemove+0x118>
        memcpy(&string[h_length], fifo->buffer, t_length);
 8004480:	8abb      	ldrh	r3, [r7, #20]
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	4413      	add	r3, r2
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	8a7a      	ldrh	r2, [r7, #18]
 800448a:	4618      	mov	r0, r3
 800448c:	f00a fbd6 	bl	800ec3c <memcpy>
      fifo->head = (fifo->head + len + 1) % FIFO_BUFFER_SIZE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8004496:	461a      	mov	r2, r3
 8004498:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800449c:	4413      	add	r3, r2
 800449e:	3301      	adds	r3, #1
 80044a0:	4a11      	ldr	r2, [pc, #68]	; (80044e8 <StringFIFORemove+0x170>)
 80044a2:	fb82 1203 	smull	r1, r2, r2, r3
 80044a6:	1111      	asrs	r1, r2, #4
 80044a8:	17da      	asrs	r2, r3, #31
 80044aa:	1a8a      	subs	r2, r1, r2
 80044ac:	21fa      	movs	r1, #250	; 0xfa
 80044ae:	fb01 f202 	mul.w	r2, r1, r2
 80044b2:	1a9a      	subs	r2, r3, r2
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      string[len] = 0;
 80044bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	4413      	add	r3, r2
 80044c4:	2200      	movs	r2, #0
 80044c6:	701a      	strb	r2, [r3, #0]
      return 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e008      	b.n	80044de <StringFIFORemove+0x166>
  for (i=0; i<used; i++)
 80044cc:	8afb      	ldrh	r3, [r7, #22]
 80044ce:	3301      	adds	r3, #1
 80044d0:	82fb      	strh	r3, [r7, #22]
 80044d2:	8afa      	ldrh	r2, [r7, #22]
 80044d4:	89fb      	ldrh	r3, [r7, #14]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	f4ff af65 	bcc.w	80043a6 <StringFIFORemove+0x2e>
    }
  }
//  printf("Fifo has no terminator\n");
  return 2;
 80044dc:	2302      	movs	r3, #2
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	10624dd3 	.word	0x10624dd3

080044ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
	return 1;
 80044f0:	2301      	movs	r3, #1
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <_kill>:

int _kill(int pid, int sig)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004506:	f00a fb6f 	bl	800ebe8 <__errno>
 800450a:	4603      	mov	r3, r0
 800450c:	2216      	movs	r2, #22
 800450e:	601a      	str	r2, [r3, #0]
	return -1;
 8004510:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <_exit>:

void _exit (int status)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004524:	f04f 31ff 	mov.w	r1, #4294967295
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ffe7 	bl	80044fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800452e:	e7fe      	b.n	800452e <_exit+0x12>

08004530 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	e00a      	b.n	8004558 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004542:	f3af 8000 	nop.w
 8004546:	4601      	mov	r1, r0
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	60ba      	str	r2, [r7, #8]
 800454e:	b2ca      	uxtb	r2, r1
 8004550:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	3301      	adds	r3, #1
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	429a      	cmp	r2, r3
 800455e:	dbf0      	blt.n	8004542 <_read+0x12>
	}

return len;
 8004560:	687b      	ldr	r3, [r7, #4]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <_close>:
	}
	return len;
}

int _close(int file)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
	return -1;
 8004572:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004592:	605a      	str	r2, [r3, #4]
	return 0;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <_isatty>:

int _isatty(int file)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
	return 1;
 80045aa:	2301      	movs	r3, #1
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
	return 0;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045dc:	4a14      	ldr	r2, [pc, #80]	; (8004630 <_sbrk+0x5c>)
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <_sbrk+0x60>)
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045e8:	4b13      	ldr	r3, [pc, #76]	; (8004638 <_sbrk+0x64>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d102      	bne.n	80045f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045f0:	4b11      	ldr	r3, [pc, #68]	; (8004638 <_sbrk+0x64>)
 80045f2:	4a12      	ldr	r2, [pc, #72]	; (800463c <_sbrk+0x68>)
 80045f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <_sbrk+0x64>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4413      	add	r3, r2
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	429a      	cmp	r2, r3
 8004602:	d207      	bcs.n	8004614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004604:	f00a faf0 	bl	800ebe8 <__errno>
 8004608:	4603      	mov	r3, r0
 800460a:	220c      	movs	r2, #12
 800460c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800460e:	f04f 33ff 	mov.w	r3, #4294967295
 8004612:	e009      	b.n	8004628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <_sbrk+0x64>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800461a:	4b07      	ldr	r3, [pc, #28]	; (8004638 <_sbrk+0x64>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4413      	add	r3, r2
 8004622:	4a05      	ldr	r2, [pc, #20]	; (8004638 <_sbrk+0x64>)
 8004624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004626:	68fb      	ldr	r3, [r7, #12]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20030000 	.word	0x20030000
 8004634:	00000400 	.word	0x00000400
 8004638:	20001dcc 	.word	0x20001dcc
 800463c:	200031c0 	.word	0x200031c0

08004640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <SystemInit+0x20>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	4a05      	ldr	r2, [pc, #20]	; (8004660 <SystemInit+0x20>)
 800464c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <Reset_Handler>:
 8004664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800469c <LoopFillZerobss+0x12>
 8004668:	480d      	ldr	r0, [pc, #52]	; (80046a0 <LoopFillZerobss+0x16>)
 800466a:	490e      	ldr	r1, [pc, #56]	; (80046a4 <LoopFillZerobss+0x1a>)
 800466c:	4a0e      	ldr	r2, [pc, #56]	; (80046a8 <LoopFillZerobss+0x1e>)
 800466e:	2300      	movs	r3, #0
 8004670:	e002      	b.n	8004678 <LoopCopyDataInit>

08004672 <CopyDataInit>:
 8004672:	58d4      	ldr	r4, [r2, r3]
 8004674:	50c4      	str	r4, [r0, r3]
 8004676:	3304      	adds	r3, #4

08004678 <LoopCopyDataInit>:
 8004678:	18c4      	adds	r4, r0, r3
 800467a:	428c      	cmp	r4, r1
 800467c:	d3f9      	bcc.n	8004672 <CopyDataInit>
 800467e:	4a0b      	ldr	r2, [pc, #44]	; (80046ac <LoopFillZerobss+0x22>)
 8004680:	4c0b      	ldr	r4, [pc, #44]	; (80046b0 <LoopFillZerobss+0x26>)
 8004682:	2300      	movs	r3, #0
 8004684:	e001      	b.n	800468a <LoopFillZerobss>

08004686 <FillZerobss>:
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	3204      	adds	r2, #4

0800468a <LoopFillZerobss>:
 800468a:	42a2      	cmp	r2, r4
 800468c:	d3fb      	bcc.n	8004686 <FillZerobss>
 800468e:	f7ff ffd7 	bl	8004640 <SystemInit>
 8004692:	f00a faaf 	bl	800ebf4 <__libc_init_array>
 8004696:	f7ff f85d 	bl	8003754 <main>
 800469a:	4770      	bx	lr
 800469c:	20030000 	.word	0x20030000
 80046a0:	20000000 	.word	0x20000000
 80046a4:	200002e4 	.word	0x200002e4
 80046a8:	0801530c 	.word	0x0801530c
 80046ac:	200002e8 	.word	0x200002e8
 80046b0:	200031c0 	.word	0x200031c0

080046b4 <ADC_IRQHandler>:
 80046b4:	e7fe      	b.n	80046b4 <ADC_IRQHandler>
	...

080046b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046bc:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <HAL_Init+0x40>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a0d      	ldr	r2, [pc, #52]	; (80046f8 <HAL_Init+0x40>)
 80046c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_Init+0x40>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a0a      	ldr	r2, [pc, #40]	; (80046f8 <HAL_Init+0x40>)
 80046ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046d4:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <HAL_Init+0x40>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a07      	ldr	r2, [pc, #28]	; (80046f8 <HAL_Init+0x40>)
 80046da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046e0:	2003      	movs	r0, #3
 80046e2:	f000 f94f 	bl	8004984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046e6:	200f      	movs	r0, #15
 80046e8:	f000 f808 	bl	80046fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046ec:	f7ff fc0e 	bl	8003f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40023c00 	.word	0x40023c00

080046fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004704:	4b12      	ldr	r3, [pc, #72]	; (8004750 <HAL_InitTick+0x54>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b12      	ldr	r3, [pc, #72]	; (8004754 <HAL_InitTick+0x58>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	4619      	mov	r1, r3
 800470e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004712:	fbb3 f3f1 	udiv	r3, r3, r1
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	4618      	mov	r0, r3
 800471c:	f000 f967 	bl	80049ee <HAL_SYSTICK_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e00e      	b.n	8004748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b0f      	cmp	r3, #15
 800472e:	d80a      	bhi.n	8004746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004730:	2200      	movs	r2, #0
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	f000 f92f 	bl	800499a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800473c:	4a06      	ldr	r2, [pc, #24]	; (8004758 <HAL_InitTick+0x5c>)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20000014 	.word	0x20000014
 8004754:	2000001c 	.word	0x2000001c
 8004758:	20000018 	.word	0x20000018

0800475c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <HAL_IncTick+0x20>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	4b06      	ldr	r3, [pc, #24]	; (8004780 <HAL_IncTick+0x24>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4413      	add	r3, r2
 800476c:	4a04      	ldr	r2, [pc, #16]	; (8004780 <HAL_IncTick+0x24>)
 800476e:	6013      	str	r3, [r2, #0]
}
 8004770:	bf00      	nop
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	2000001c 	.word	0x2000001c
 8004780:	20001dd0 	.word	0x20001dd0

08004784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return uwTick;
 8004788:	4b03      	ldr	r3, [pc, #12]	; (8004798 <HAL_GetTick+0x14>)
 800478a:	681b      	ldr	r3, [r3, #0]
}
 800478c:	4618      	mov	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	20001dd0 	.word	0x20001dd0

0800479c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7ff ffee 	bl	8004784 <HAL_GetTick>
 80047a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d005      	beq.n	80047c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047b6:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <HAL_Delay+0x44>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047c2:	bf00      	nop
 80047c4:	f7ff ffde 	bl	8004784 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d8f7      	bhi.n	80047c4 <HAL_Delay+0x28>
  {
  }
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	2000001c 	.word	0x2000001c

080047e4 <__NVIC_SetPriorityGrouping>:
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <__NVIC_SetPriorityGrouping+0x44>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004800:	4013      	ands	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800480c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004816:	4a04      	ldr	r2, [pc, #16]	; (8004828 <__NVIC_SetPriorityGrouping+0x44>)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	60d3      	str	r3, [r2, #12]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	e000ed00 	.word	0xe000ed00

0800482c <__NVIC_GetPriorityGrouping>:
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <__NVIC_GetPriorityGrouping+0x18>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	f003 0307 	and.w	r3, r3, #7
}
 800483a:	4618      	mov	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	e000ed00 	.word	0xe000ed00

08004848 <__NVIC_EnableIRQ>:
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004856:	2b00      	cmp	r3, #0
 8004858:	db0b      	blt.n	8004872 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	f003 021f 	and.w	r2, r3, #31
 8004860:	4907      	ldr	r1, [pc, #28]	; (8004880 <__NVIC_EnableIRQ+0x38>)
 8004862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	2001      	movs	r0, #1
 800486a:	fa00 f202 	lsl.w	r2, r0, r2
 800486e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	e000e100 	.word	0xe000e100

08004884 <__NVIC_SetPriority>:
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	6039      	str	r1, [r7, #0]
 800488e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004894:	2b00      	cmp	r3, #0
 8004896:	db0a      	blt.n	80048ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	b2da      	uxtb	r2, r3
 800489c:	490c      	ldr	r1, [pc, #48]	; (80048d0 <__NVIC_SetPriority+0x4c>)
 800489e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a2:	0112      	lsls	r2, r2, #4
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	440b      	add	r3, r1
 80048a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80048ac:	e00a      	b.n	80048c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	4908      	ldr	r1, [pc, #32]	; (80048d4 <__NVIC_SetPriority+0x50>)
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	3b04      	subs	r3, #4
 80048bc:	0112      	lsls	r2, r2, #4
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	440b      	add	r3, r1
 80048c2:	761a      	strb	r2, [r3, #24]
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	e000e100 	.word	0xe000e100
 80048d4:	e000ed00 	.word	0xe000ed00

080048d8 <NVIC_EncodePriority>:
{
 80048d8:	b480      	push	{r7}
 80048da:	b089      	sub	sp, #36	; 0x24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f1c3 0307 	rsb	r3, r3, #7
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	bf28      	it	cs
 80048f6:	2304      	movcs	r3, #4
 80048f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	3304      	adds	r3, #4
 80048fe:	2b06      	cmp	r3, #6
 8004900:	d902      	bls.n	8004908 <NVIC_EncodePriority+0x30>
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3b03      	subs	r3, #3
 8004906:	e000      	b.n	800490a <NVIC_EncodePriority+0x32>
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800490c:	f04f 32ff 	mov.w	r2, #4294967295
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43da      	mvns	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	401a      	ands	r2, r3
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004920:	f04f 31ff 	mov.w	r1, #4294967295
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	fa01 f303 	lsl.w	r3, r1, r3
 800492a:	43d9      	mvns	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004930:	4313      	orrs	r3, r2
}
 8004932:	4618      	mov	r0, r3
 8004934:	3724      	adds	r7, #36	; 0x24
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <SysTick_Config>:
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3b01      	subs	r3, #1
 800494c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004950:	d301      	bcc.n	8004956 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004952:	2301      	movs	r3, #1
 8004954:	e00f      	b.n	8004976 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004956:	4a0a      	ldr	r2, [pc, #40]	; (8004980 <SysTick_Config+0x40>)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3b01      	subs	r3, #1
 800495c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800495e:	210f      	movs	r1, #15
 8004960:	f04f 30ff 	mov.w	r0, #4294967295
 8004964:	f7ff ff8e 	bl	8004884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <SysTick_Config+0x40>)
 800496a:	2200      	movs	r2, #0
 800496c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800496e:	4b04      	ldr	r3, [pc, #16]	; (8004980 <SysTick_Config+0x40>)
 8004970:	2207      	movs	r2, #7
 8004972:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	e000e010 	.word	0xe000e010

08004984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ff29 	bl	80047e4 <__NVIC_SetPriorityGrouping>
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800499a:	b580      	push	{r7, lr}
 800499c:	b086      	sub	sp, #24
 800499e:	af00      	add	r7, sp, #0
 80049a0:	4603      	mov	r3, r0
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049ac:	f7ff ff3e 	bl	800482c <__NVIC_GetPriorityGrouping>
 80049b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	6978      	ldr	r0, [r7, #20]
 80049b8:	f7ff ff8e 	bl	80048d8 <NVIC_EncodePriority>
 80049bc:	4602      	mov	r2, r0
 80049be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff ff5d 	bl	8004884 <__NVIC_SetPriority>
}
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	4603      	mov	r3, r0
 80049da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff ff31 	bl	8004848 <__NVIC_EnableIRQ>
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff ffa2 	bl	8004940 <SysTick_Config>
 80049fc:	4603      	mov	r3, r0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d004      	beq.n	8004a24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2280      	movs	r2, #128	; 0x80
 8004a1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e00c      	b.n	8004a3e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2205      	movs	r2, #5
 8004a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a58:	b2db      	uxtb	r3, r3
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
	...

08004a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b089      	sub	sp, #36	; 0x24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	e177      	b.n	8004d74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a84:	2201      	movs	r2, #1
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4013      	ands	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	f040 8166 	bne.w	8004d6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d005      	beq.n	8004aba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d130      	bne.n	8004b1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	43db      	mvns	r3, r3
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004af0:	2201      	movs	r2, #1
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	43db      	mvns	r3, r3
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	4013      	ands	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 0201 	and.w	r2, r3, #1
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d017      	beq.n	8004b58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	2203      	movs	r2, #3
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d123      	bne.n	8004bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	08da      	lsrs	r2, r3, #3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3208      	adds	r2, #8
 8004b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	220f      	movs	r2, #15
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	43db      	mvns	r3, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4013      	ands	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	08da      	lsrs	r2, r3, #3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3208      	adds	r2, #8
 8004ba6:	69b9      	ldr	r1, [r7, #24]
 8004ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	2203      	movs	r2, #3
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	43db      	mvns	r3, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 0203 	and.w	r2, r3, #3
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80c0 	beq.w	8004d6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	4b66      	ldr	r3, [pc, #408]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	4a65      	ldr	r2, [pc, #404]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfe:	4b63      	ldr	r3, [pc, #396]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c0a:	4a61      	ldr	r2, [pc, #388]	; (8004d90 <HAL_GPIO_Init+0x328>)
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	089b      	lsrs	r3, r3, #2
 8004c10:	3302      	adds	r3, #2
 8004c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	220f      	movs	r2, #15
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	43db      	mvns	r3, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a58      	ldr	r2, [pc, #352]	; (8004d94 <HAL_GPIO_Init+0x32c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d037      	beq.n	8004ca6 <HAL_GPIO_Init+0x23e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a57      	ldr	r2, [pc, #348]	; (8004d98 <HAL_GPIO_Init+0x330>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d031      	beq.n	8004ca2 <HAL_GPIO_Init+0x23a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a56      	ldr	r2, [pc, #344]	; (8004d9c <HAL_GPIO_Init+0x334>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d02b      	beq.n	8004c9e <HAL_GPIO_Init+0x236>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a55      	ldr	r2, [pc, #340]	; (8004da0 <HAL_GPIO_Init+0x338>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d025      	beq.n	8004c9a <HAL_GPIO_Init+0x232>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a54      	ldr	r2, [pc, #336]	; (8004da4 <HAL_GPIO_Init+0x33c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d01f      	beq.n	8004c96 <HAL_GPIO_Init+0x22e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a53      	ldr	r2, [pc, #332]	; (8004da8 <HAL_GPIO_Init+0x340>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d019      	beq.n	8004c92 <HAL_GPIO_Init+0x22a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a52      	ldr	r2, [pc, #328]	; (8004dac <HAL_GPIO_Init+0x344>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d013      	beq.n	8004c8e <HAL_GPIO_Init+0x226>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a51      	ldr	r2, [pc, #324]	; (8004db0 <HAL_GPIO_Init+0x348>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00d      	beq.n	8004c8a <HAL_GPIO_Init+0x222>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a50      	ldr	r2, [pc, #320]	; (8004db4 <HAL_GPIO_Init+0x34c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d007      	beq.n	8004c86 <HAL_GPIO_Init+0x21e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a4f      	ldr	r2, [pc, #316]	; (8004db8 <HAL_GPIO_Init+0x350>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d101      	bne.n	8004c82 <HAL_GPIO_Init+0x21a>
 8004c7e:	2309      	movs	r3, #9
 8004c80:	e012      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c82:	230a      	movs	r3, #10
 8004c84:	e010      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c86:	2308      	movs	r3, #8
 8004c88:	e00e      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c8a:	2307      	movs	r3, #7
 8004c8c:	e00c      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c8e:	2306      	movs	r3, #6
 8004c90:	e00a      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c92:	2305      	movs	r3, #5
 8004c94:	e008      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c96:	2304      	movs	r3, #4
 8004c98:	e006      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e004      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e002      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	f002 0203 	and.w	r2, r2, #3
 8004cae:	0092      	lsls	r2, r2, #2
 8004cb0:	4093      	lsls	r3, r2
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cb8:	4935      	ldr	r1, [pc, #212]	; (8004d90 <HAL_GPIO_Init+0x328>)
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	089b      	lsrs	r3, r3, #2
 8004cbe:	3302      	adds	r3, #2
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cc6:	4b3d      	ldr	r3, [pc, #244]	; (8004dbc <HAL_GPIO_Init+0x354>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cea:	4a34      	ldr	r2, [pc, #208]	; (8004dbc <HAL_GPIO_Init+0x354>)
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cf0:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <HAL_GPIO_Init+0x354>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d14:	4a29      	ldr	r2, [pc, #164]	; (8004dbc <HAL_GPIO_Init+0x354>)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d1a:	4b28      	ldr	r3, [pc, #160]	; (8004dbc <HAL_GPIO_Init+0x354>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	43db      	mvns	r3, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4013      	ands	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d3e:	4a1f      	ldr	r2, [pc, #124]	; (8004dbc <HAL_GPIO_Init+0x354>)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d44:	4b1d      	ldr	r3, [pc, #116]	; (8004dbc <HAL_GPIO_Init+0x354>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4013      	ands	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d68:	4a14      	ldr	r2, [pc, #80]	; (8004dbc <HAL_GPIO_Init+0x354>)
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	3301      	adds	r3, #1
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b0f      	cmp	r3, #15
 8004d78:	f67f ae84 	bls.w	8004a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	3724      	adds	r7, #36	; 0x24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	40013800 	.word	0x40013800
 8004d94:	40020000 	.word	0x40020000
 8004d98:	40020400 	.word	0x40020400
 8004d9c:	40020800 	.word	0x40020800
 8004da0:	40020c00 	.word	0x40020c00
 8004da4:	40021000 	.word	0x40021000
 8004da8:	40021400 	.word	0x40021400
 8004dac:	40021800 	.word	0x40021800
 8004db0:	40021c00 	.word	0x40021c00
 8004db4:	40022000 	.word	0x40022000
 8004db8:	40022400 	.word	0x40022400
 8004dbc:	40013c00 	.word	0x40013c00

08004dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	807b      	strh	r3, [r7, #2]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dd0:	787b      	ldrb	r3, [r7, #1]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dd6:	887a      	ldrh	r2, [r7, #2]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ddc:	e003      	b.n	8004de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dde:	887b      	ldrh	r3, [r7, #2]
 8004de0:	041a      	lsls	r2, r3, #16
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	619a      	str	r2, [r3, #24]
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e12b      	b.n	800505e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff f89e 	bl	8003f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2224      	movs	r2, #36	; 0x24
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0201 	bic.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e58:	f004 fba4 	bl	80095a4 <HAL_RCC_GetPCLK1Freq>
 8004e5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4a81      	ldr	r2, [pc, #516]	; (8005068 <HAL_I2C_Init+0x274>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d807      	bhi.n	8004e78 <HAL_I2C_Init+0x84>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4a80      	ldr	r2, [pc, #512]	; (800506c <HAL_I2C_Init+0x278>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	bf94      	ite	ls
 8004e70:	2301      	movls	r3, #1
 8004e72:	2300      	movhi	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	e006      	b.n	8004e86 <HAL_I2C_Init+0x92>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4a7d      	ldr	r2, [pc, #500]	; (8005070 <HAL_I2C_Init+0x27c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	bf94      	ite	ls
 8004e80:	2301      	movls	r3, #1
 8004e82:	2300      	movhi	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e0e7      	b.n	800505e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4a78      	ldr	r2, [pc, #480]	; (8005074 <HAL_I2C_Init+0x280>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	0c9b      	lsrs	r3, r3, #18
 8004e98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4a6a      	ldr	r2, [pc, #424]	; (8005068 <HAL_I2C_Init+0x274>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d802      	bhi.n	8004ec8 <HAL_I2C_Init+0xd4>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	e009      	b.n	8004edc <HAL_I2C_Init+0xe8>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	4a69      	ldr	r2, [pc, #420]	; (8005078 <HAL_I2C_Init+0x284>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	099b      	lsrs	r3, r3, #6
 8004eda:	3301      	adds	r3, #1
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004eee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	495c      	ldr	r1, [pc, #368]	; (8005068 <HAL_I2C_Init+0x274>)
 8004ef8:	428b      	cmp	r3, r1
 8004efa:	d819      	bhi.n	8004f30 <HAL_I2C_Init+0x13c>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	1e59      	subs	r1, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f0a:	1c59      	adds	r1, r3, #1
 8004f0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f10:	400b      	ands	r3, r1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_I2C_Init+0x138>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1e59      	subs	r1, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f24:	3301      	adds	r3, #1
 8004f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f2a:	e051      	b.n	8004fd0 <HAL_I2C_Init+0x1dc>
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	e04f      	b.n	8004fd0 <HAL_I2C_Init+0x1dc>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d111      	bne.n	8004f5c <HAL_I2C_Init+0x168>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	1e58      	subs	r0, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6859      	ldr	r1, [r3, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	440b      	add	r3, r1
 8004f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bf0c      	ite	eq
 8004f54:	2301      	moveq	r3, #1
 8004f56:	2300      	movne	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	e012      	b.n	8004f82 <HAL_I2C_Init+0x18e>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	1e58      	subs	r0, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6859      	ldr	r1, [r3, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	0099      	lsls	r1, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f72:	3301      	adds	r3, #1
 8004f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_I2C_Init+0x196>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e022      	b.n	8004fd0 <HAL_I2C_Init+0x1dc>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10e      	bne.n	8004fb0 <HAL_I2C_Init+0x1bc>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1e58      	subs	r0, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6859      	ldr	r1, [r3, #4]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	440b      	add	r3, r1
 8004fa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fae:	e00f      	b.n	8004fd0 <HAL_I2C_Init+0x1dc>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	1e58      	subs	r0, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6859      	ldr	r1, [r3, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	0099      	lsls	r1, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	6809      	ldr	r1, [r1, #0]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69da      	ldr	r2, [r3, #28]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ffe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6911      	ldr	r1, [r2, #16]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	68d2      	ldr	r2, [r2, #12]
 800500a:	4311      	orrs	r1, r2
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6812      	ldr	r2, [r2, #0]
 8005010:	430b      	orrs	r3, r1
 8005012:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695a      	ldr	r2, [r3, #20]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	000186a0 	.word	0x000186a0
 800506c:	001e847f 	.word	0x001e847f
 8005070:	003d08ff 	.word	0x003d08ff
 8005074:	431bde83 	.word	0x431bde83
 8005078:	10624dd3 	.word	0x10624dd3

0800507c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af02      	add	r7, sp, #8
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	461a      	mov	r2, r3
 8005088:	460b      	mov	r3, r1
 800508a:	817b      	strh	r3, [r7, #10]
 800508c:	4613      	mov	r3, r2
 800508e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005090:	f7ff fb78 	bl	8004784 <HAL_GetTick>
 8005094:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b20      	cmp	r3, #32
 80050a0:	f040 80e0 	bne.w	8005264 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2319      	movs	r3, #25
 80050aa:	2201      	movs	r2, #1
 80050ac:	4970      	ldr	r1, [pc, #448]	; (8005270 <HAL_I2C_Master_Transmit+0x1f4>)
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f002 f8e6 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80050ba:	2302      	movs	r3, #2
 80050bc:	e0d3      	b.n	8005266 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_I2C_Master_Transmit+0x50>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e0cc      	b.n	8005266 <HAL_I2C_Master_Transmit+0x1ea>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d007      	beq.n	80050f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0201 	orr.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005100:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2221      	movs	r2, #33	; 0x21
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2210      	movs	r2, #16
 800510e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	893a      	ldrh	r2, [r7, #8]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4a50      	ldr	r2, [pc, #320]	; (8005274 <HAL_I2C_Master_Transmit+0x1f8>)
 8005132:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005134:	8979      	ldrh	r1, [r7, #10]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	6a3a      	ldr	r2, [r7, #32]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f001 fea8 	bl	8006e90 <I2C_MasterRequestWrite>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e08d      	b.n	8005266 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005160:	e066      	b.n	8005230 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	6a39      	ldr	r1, [r7, #32]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f002 f960 	bl	800742c <I2C_WaitOnTXEFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00d      	beq.n	800518e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	2b04      	cmp	r3, #4
 8005178:	d107      	bne.n	800518a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005188:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e06b      	b.n	8005266 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	781a      	ldrb	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d11b      	bne.n	8005204 <HAL_I2C_Master_Transmit+0x188>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d017      	beq.n	8005204 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	781a      	ldrb	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	6a39      	ldr	r1, [r7, #32]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f002 f950 	bl	80074ae <I2C_WaitOnBTFFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00d      	beq.n	8005230 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	2b04      	cmp	r3, #4
 800521a:	d107      	bne.n	800522c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e01a      	b.n	8005266 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005234:	2b00      	cmp	r3, #0
 8005236:	d194      	bne.n	8005162 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	e000      	b.n	8005266 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005264:	2302      	movs	r3, #2
  }
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	00100002 	.word	0x00100002
 8005274:	ffff0000 	.word	0xffff0000

08005278 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08c      	sub	sp, #48	; 0x30
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	607a      	str	r2, [r7, #4]
 8005282:	461a      	mov	r2, r3
 8005284:	460b      	mov	r3, r1
 8005286:	817b      	strh	r3, [r7, #10]
 8005288:	4613      	mov	r3, r2
 800528a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800528c:	f7ff fa7a 	bl	8004784 <HAL_GetTick>
 8005290:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b20      	cmp	r3, #32
 800529c:	f040 820b 	bne.w	80056b6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	2319      	movs	r3, #25
 80052a6:	2201      	movs	r2, #1
 80052a8:	497c      	ldr	r1, [pc, #496]	; (800549c <HAL_I2C_Master_Receive+0x224>)
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f001 ffe8 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80052b6:	2302      	movs	r3, #2
 80052b8:	e1fe      	b.n	80056b8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_I2C_Master_Receive+0x50>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e1f7      	b.n	80056b8 <HAL_I2C_Master_Receive+0x440>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d007      	beq.n	80052ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0201 	orr.w	r2, r2, #1
 80052ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2222      	movs	r2, #34	; 0x22
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2210      	movs	r2, #16
 800530a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	893a      	ldrh	r2, [r7, #8]
 800531e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4a5c      	ldr	r2, [pc, #368]	; (80054a0 <HAL_I2C_Master_Receive+0x228>)
 800532e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005330:	8979      	ldrh	r1, [r7, #10]
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f001 fe2c 	bl	8006f94 <I2C_MasterRequestRead>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e1b8      	b.n	80056b8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534a:	2b00      	cmp	r3, #0
 800534c:	d113      	bne.n	8005376 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534e:	2300      	movs	r3, #0
 8005350:	623b      	str	r3, [r7, #32]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	623b      	str	r3, [r7, #32]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	623b      	str	r3, [r7, #32]
 8005362:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	e18c      	b.n	8005690 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537a:	2b01      	cmp	r3, #1
 800537c:	d11b      	bne.n	80053b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538e:	2300      	movs	r3, #0
 8005390:	61fb      	str	r3, [r7, #28]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	e16c      	b.n	8005690 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d11b      	bne.n	80053f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053de:	2300      	movs	r3, #0
 80053e0:	61bb      	str	r3, [r7, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	e14c      	b.n	8005690 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005404:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800541c:	e138      	b.n	8005690 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005422:	2b03      	cmp	r3, #3
 8005424:	f200 80f1 	bhi.w	800560a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542c:	2b01      	cmp	r3, #1
 800542e:	d123      	bne.n	8005478 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005432:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f002 f8ad 	bl	8007594 <I2C_WaitOnRXNEFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e139      	b.n	80056b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29b      	uxth	r3, r3
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005476:	e10b      	b.n	8005690 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547c:	2b02      	cmp	r3, #2
 800547e:	d14e      	bne.n	800551e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005486:	2200      	movs	r2, #0
 8005488:	4906      	ldr	r1, [pc, #24]	; (80054a4 <HAL_I2C_Master_Receive+0x22c>)
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f001 fef8 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e10e      	b.n	80056b8 <HAL_I2C_Master_Receive+0x440>
 800549a:	bf00      	nop
 800549c:	00100002 	.word	0x00100002
 80054a0:	ffff0000 	.word	0xffff0000
 80054a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800551c:	e0b8      	b.n	8005690 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	2200      	movs	r2, #0
 8005526:	4966      	ldr	r1, [pc, #408]	; (80056c0 <HAL_I2C_Master_Receive+0x448>)
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f001 fea9 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e0bf      	b.n	80056b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	2200      	movs	r2, #0
 8005582:	494f      	ldr	r1, [pc, #316]	; (80056c0 <HAL_I2C_Master_Receive+0x448>)
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f001 fe7b 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e091      	b.n	80056b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005608:	e042      	b.n	8005690 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800560a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f001 ffc0 	bl	8007594 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e04c      	b.n	80056b8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	2b04      	cmp	r3, #4
 800565c:	d118      	bne.n	8005690 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005694:	2b00      	cmp	r3, #0
 8005696:	f47f aec2 	bne.w	800541e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e000      	b.n	80056b8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
  }
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3728      	adds	r7, #40	; 0x28
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	00010004 	.word	0x00010004

080056c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d003      	beq.n	80056fc <HAL_I2C_EV_IRQHandler+0x38>
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	2b40      	cmp	r3, #64	; 0x40
 80056f8:	f040 80c1 	bne.w	800587e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10d      	bne.n	8005732 <HAL_I2C_EV_IRQHandler+0x6e>
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800571c:	d003      	beq.n	8005726 <HAL_I2C_EV_IRQHandler+0x62>
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005724:	d101      	bne.n	800572a <HAL_I2C_EV_IRQHandler+0x66>
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <HAL_I2C_EV_IRQHandler+0x68>
 800572a:	2300      	movs	r3, #0
 800572c:	2b01      	cmp	r3, #1
 800572e:	f000 8132 	beq.w	8005996 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00c      	beq.n	8005756 <HAL_I2C_EV_IRQHandler+0x92>
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	0a5b      	lsrs	r3, r3, #9
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d006      	beq.n	8005756 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 ffa8 	bl	800769e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fd83 	bl	800625a <I2C_Master_SB>
 8005754:	e092      	b.n	800587c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	08db      	lsrs	r3, r3, #3
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <HAL_I2C_EV_IRQHandler+0xb2>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	0a5b      	lsrs	r3, r3, #9
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fdf9 	bl	8006366 <I2C_Master_ADD10>
 8005774:	e082      	b.n	800587c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	085b      	lsrs	r3, r3, #1
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d009      	beq.n	8005796 <HAL_I2C_EV_IRQHandler+0xd2>
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	0a5b      	lsrs	r3, r3, #9
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fe13 	bl	80063ba <I2C_Master_ADDR>
 8005794:	e072      	b.n	800587c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	089b      	lsrs	r3, r3, #2
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d03b      	beq.n	800581a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b0:	f000 80f3 	beq.w	800599a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	09db      	lsrs	r3, r3, #7
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00f      	beq.n	80057e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	0a9b      	lsrs	r3, r3, #10
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	089b      	lsrs	r3, r3, #2
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d103      	bne.n	80057e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f9f3 	bl	8005bc4 <I2C_MasterTransmit_TXE>
 80057de:	e04d      	b.n	800587c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80d6 	beq.w	800599a <HAL_I2C_EV_IRQHandler+0x2d6>
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	0a5b      	lsrs	r3, r3, #9
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80cf 	beq.w	800599a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80057fc:	7bbb      	ldrb	r3, [r7, #14]
 80057fe:	2b21      	cmp	r3, #33	; 0x21
 8005800:	d103      	bne.n	800580a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fa7a 	bl	8005cfc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005808:	e0c7      	b.n	800599a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	f040 80c4 	bne.w	800599a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fae8 	bl	8005de8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005818:	e0bf      	b.n	800599a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005828:	f000 80b7 	beq.w	800599a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	099b      	lsrs	r3, r3, #6
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00f      	beq.n	8005858 <HAL_I2C_EV_IRQHandler+0x194>
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	0a9b      	lsrs	r3, r3, #10
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d009      	beq.n	8005858 <HAL_I2C_EV_IRQHandler+0x194>
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	089b      	lsrs	r3, r3, #2
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d103      	bne.n	8005858 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fb5d 	bl	8005f10 <I2C_MasterReceive_RXNE>
 8005856:	e011      	b.n	800587c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	089b      	lsrs	r3, r3, #2
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 809a 	beq.w	800599a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	0a5b      	lsrs	r3, r3, #9
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 8093 	beq.w	800599a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fc06 	bl	8006086 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800587a:	e08e      	b.n	800599a <HAL_I2C_EV_IRQHandler+0x2d6>
 800587c:	e08d      	b.n	800599a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	2b00      	cmp	r3, #0
 8005884:	d004      	beq.n	8005890 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	e007      	b.n	80058a0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d012      	beq.n	80058d2 <HAL_I2C_EV_IRQHandler+0x20e>
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	0a5b      	lsrs	r3, r3, #9
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00c      	beq.n	80058d2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80058c8:	69b9      	ldr	r1, [r7, #24]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 ffc4 	bl	8006858 <I2C_Slave_ADDR>
 80058d0:	e066      	b.n	80059a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	091b      	lsrs	r3, r3, #4
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d009      	beq.n	80058f2 <HAL_I2C_EV_IRQHandler+0x22e>
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	0a5b      	lsrs	r3, r3, #9
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fffe 	bl	80068ec <I2C_Slave_STOPF>
 80058f0:	e056      	b.n	80059a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058f2:	7bbb      	ldrb	r3, [r7, #14]
 80058f4:	2b21      	cmp	r3, #33	; 0x21
 80058f6:	d002      	beq.n	80058fe <HAL_I2C_EV_IRQHandler+0x23a>
 80058f8:	7bbb      	ldrb	r3, [r7, #14]
 80058fa:	2b29      	cmp	r3, #41	; 0x29
 80058fc:	d125      	bne.n	800594a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	09db      	lsrs	r3, r3, #7
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00f      	beq.n	800592a <HAL_I2C_EV_IRQHandler+0x266>
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	0a9b      	lsrs	r3, r3, #10
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <HAL_I2C_EV_IRQHandler+0x266>
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	089b      	lsrs	r3, r3, #2
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d103      	bne.n	800592a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 feda 	bl	80066dc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005928:	e039      	b.n	800599e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	089b      	lsrs	r3, r3, #2
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d033      	beq.n	800599e <HAL_I2C_EV_IRQHandler+0x2da>
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	0a5b      	lsrs	r3, r3, #9
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d02d      	beq.n	800599e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 ff07 	bl	8006756 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005948:	e029      	b.n	800599e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	099b      	lsrs	r3, r3, #6
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00f      	beq.n	8005976 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	0a9b      	lsrs	r3, r3, #10
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d009      	beq.n	8005976 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	089b      	lsrs	r3, r3, #2
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d103      	bne.n	8005976 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 ff12 	bl	8006798 <I2C_SlaveReceive_RXNE>
 8005974:	e014      	b.n	80059a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	089b      	lsrs	r3, r3, #2
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00e      	beq.n	80059a0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	0a5b      	lsrs	r3, r3, #9
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d008      	beq.n	80059a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 ff40 	bl	8006814 <I2C_SlaveReceive_BTF>
 8005994:	e004      	b.n	80059a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005996:	bf00      	nop
 8005998:	e002      	b.n	80059a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800599a:	bf00      	nop
 800599c:	e000      	b.n	80059a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800599e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80059a0:	3720      	adds	r7, #32
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b08a      	sub	sp, #40	; 0x28
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80059be:	2300      	movs	r3, #0
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059c8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	0a1b      	lsrs	r3, r3, #8
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00e      	beq.n	80059f4 <HAL_I2C_ER_IRQHandler+0x4e>
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	0a1b      	lsrs	r3, r3, #8
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d008      	beq.n	80059f4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	f043 0301 	orr.w	r3, r3, #1
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059f2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	0a5b      	lsrs	r3, r3, #9
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00e      	beq.n	8005a1e <HAL_I2C_ER_IRQHandler+0x78>
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	0a1b      	lsrs	r3, r3, #8
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d008      	beq.n	8005a1e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	f043 0302 	orr.w	r3, r3, #2
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005a1c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	0a9b      	lsrs	r3, r3, #10
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d03f      	beq.n	8005aaa <HAL_I2C_ER_IRQHandler+0x104>
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	0a1b      	lsrs	r3, r3, #8
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d039      	beq.n	8005aaa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005a36:	7efb      	ldrb	r3, [r7, #27]
 8005a38:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a48:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005a50:	7ebb      	ldrb	r3, [r7, #26]
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d112      	bne.n	8005a7c <HAL_I2C_ER_IRQHandler+0xd6>
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10f      	bne.n	8005a7c <HAL_I2C_ER_IRQHandler+0xd6>
 8005a5c:	7cfb      	ldrb	r3, [r7, #19]
 8005a5e:	2b21      	cmp	r3, #33	; 0x21
 8005a60:	d008      	beq.n	8005a74 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005a62:	7cfb      	ldrb	r3, [r7, #19]
 8005a64:	2b29      	cmp	r3, #41	; 0x29
 8005a66:	d005      	beq.n	8005a74 <HAL_I2C_ER_IRQHandler+0xce>
 8005a68:	7cfb      	ldrb	r3, [r7, #19]
 8005a6a:	2b28      	cmp	r3, #40	; 0x28
 8005a6c:	d106      	bne.n	8005a7c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b21      	cmp	r3, #33	; 0x21
 8005a72:	d103      	bne.n	8005a7c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 f869 	bl	8006b4c <I2C_Slave_AF>
 8005a7a:	e016      	b.n	8005aaa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a84:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	f043 0304 	orr.w	r3, r3, #4
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a8e:	7efb      	ldrb	r3, [r7, #27]
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d002      	beq.n	8005a9a <HAL_I2C_ER_IRQHandler+0xf4>
 8005a94:	7efb      	ldrb	r3, [r7, #27]
 8005a96:	2b40      	cmp	r3, #64	; 0x40
 8005a98:	d107      	bne.n	8005aaa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	0adb      	lsrs	r3, r3, #11
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00e      	beq.n	8005ad4 <HAL_I2C_ER_IRQHandler+0x12e>
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	0a1b      	lsrs	r3, r3, #8
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d008      	beq.n	8005ad4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	f043 0308 	orr.w	r3, r3, #8
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005ad2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d008      	beq.n	8005aec <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f001 f8a0 	bl	8006c2c <I2C_ITError>
  }
}
 8005aec:	bf00      	nop
 8005aee:	3728      	adds	r7, #40	; 0x28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
 8005b50:	4613      	mov	r3, r2
 8005b52:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bda:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d150      	bne.n	8005c8c <I2C_MasterTransmit_TXE+0xc8>
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	2b21      	cmp	r3, #33	; 0x21
 8005bee:	d14d      	bne.n	8005c8c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d01d      	beq.n	8005c32 <I2C_MasterTransmit_TXE+0x6e>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d01a      	beq.n	8005c32 <I2C_MasterTransmit_TXE+0x6e>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c02:	d016      	beq.n	8005c32 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c12:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2211      	movs	r2, #17
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7ff ff62 	bl	8005af4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c30:	e060      	b.n	8005cf4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c40:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c50:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b40      	cmp	r3, #64	; 0x40
 8005c6a:	d107      	bne.n	8005c7c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff ff7d 	bl	8005b74 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c7a:	e03b      	b.n	8005cf4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff ff35 	bl	8005af4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c8a:	e033      	b.n	8005cf4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	2b21      	cmp	r3, #33	; 0x21
 8005c90:	d005      	beq.n	8005c9e <I2C_MasterTransmit_TXE+0xda>
 8005c92:	7bbb      	ldrb	r3, [r7, #14]
 8005c94:	2b40      	cmp	r3, #64	; 0x40
 8005c96:	d12d      	bne.n	8005cf4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b22      	cmp	r3, #34	; 0x22
 8005c9c:	d12a      	bne.n	8005cf4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d108      	bne.n	8005cba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005cb8:	e01c      	b.n	8005cf4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b40      	cmp	r3, #64	; 0x40
 8005cc4:	d103      	bne.n	8005cce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f88e 	bl	8005de8 <I2C_MemoryTransmit_TXE_BTF>
}
 8005ccc:	e012      	b.n	8005cf4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	781a      	ldrb	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005cf2:	e7ff      	b.n	8005cf4 <I2C_MasterTransmit_TXE+0x130>
 8005cf4:	bf00      	nop
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b21      	cmp	r3, #33	; 0x21
 8005d14:	d164      	bne.n	8005de0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d012      	beq.n	8005d46 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	781a      	ldrb	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005d44:	e04c      	b.n	8005de0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d01d      	beq.n	8005d88 <I2C_MasterTransmit_BTF+0x8c>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d01a      	beq.n	8005d88 <I2C_MasterTransmit_BTF+0x8c>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d58:	d016      	beq.n	8005d88 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d68:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2211      	movs	r2, #17
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff feb7 	bl	8005af4 <HAL_I2C_MasterTxCpltCallback>
}
 8005d86:	e02b      	b.n	8005de0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d96:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b40      	cmp	r3, #64	; 0x40
 8005dc0:	d107      	bne.n	8005dd2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7ff fed2 	bl	8005b74 <HAL_I2C_MemTxCpltCallback>
}
 8005dd0:	e006      	b.n	8005de0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff fe8a 	bl	8005af4 <HAL_I2C_MasterTxCpltCallback>
}
 8005de0:	bf00      	nop
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d11d      	bne.n	8005e3c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d10b      	bne.n	8005e20 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e18:	1c9a      	adds	r2, r3, #2
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005e1e:	e073      	b.n	8005f08 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	121b      	asrs	r3, r3, #8
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e3a:	e065      	b.n	8005f08 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d10b      	bne.n	8005e5c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e5a:	e055      	b.n	8005f08 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d151      	bne.n	8005f08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	2b22      	cmp	r3, #34	; 0x22
 8005e68:	d10d      	bne.n	8005e86 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e78:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e84:	e040      	b.n	8005f08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d015      	beq.n	8005ebc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	2b21      	cmp	r3, #33	; 0x21
 8005e94:	d112      	bne.n	8005ebc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	781a      	ldrb	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005eba:	e025      	b.n	8005f08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d120      	bne.n	8005f08 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	2b21      	cmp	r3, #33	; 0x21
 8005eca:	d11d      	bne.n	8005f08 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005eda:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff fe36 	bl	8005b74 <HAL_I2C_MemTxCpltCallback>
}
 8005f08:	bf00      	nop
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b22      	cmp	r3, #34	; 0x22
 8005f22:	f040 80ac 	bne.w	800607e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d921      	bls.n	8005f78 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	f040 808c 	bne.w	800607e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f74:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005f76:	e082      	b.n	800607e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d075      	beq.n	800606c <I2C_MasterReceive_RXNE+0x15c>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d002      	beq.n	8005f8c <I2C_MasterReceive_RXNE+0x7c>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d16f      	bne.n	800606c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 facf 	bl	8007530 <I2C_WaitOnSTOPRequestThroughIT>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d142      	bne.n	800601e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fb6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d10a      	bne.n	8006008 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff fdc1 	bl	8005b88 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006006:	e03a      	b.n	800607e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2212      	movs	r2, #18
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff fd76 	bl	8005b08 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800601c:	e02f      	b.n	800607e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800602c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff fd99 	bl	8005b9c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800606a:	e008      	b.n	800607e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800607a:	605a      	str	r2, [r3, #4]
}
 800607c:	e7ff      	b.n	800607e <I2C_MasterReceive_RXNE+0x16e>
 800607e:	bf00      	nop
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b04      	cmp	r3, #4
 800609c:	d11b      	bne.n	80060d6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	691a      	ldr	r2, [r3, #16]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	b2d2      	uxtb	r2, r2
 80060ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3b01      	subs	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80060d4:	e0bd      	b.n	8006252 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d129      	bne.n	8006134 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d00a      	beq.n	800610c <I2C_MasterReceive_BTF+0x86>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d007      	beq.n	800610c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800610a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006132:	e08e      	b.n	8006252 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d176      	bne.n	800622c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d002      	beq.n	800614a <I2C_MasterReceive_BTF+0xc4>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b10      	cmp	r3, #16
 8006148:	d108      	bne.n	800615c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	e019      	b.n	8006190 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b04      	cmp	r3, #4
 8006160:	d002      	beq.n	8006168 <I2C_MasterReceive_BTF+0xe2>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d108      	bne.n	800617a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e00a      	b.n	8006190 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b10      	cmp	r3, #16
 800617e:	d007      	beq.n	8006190 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800618e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	3b01      	subs	r3, #1
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80061ea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b40      	cmp	r3, #64	; 0x40
 80061fe:	d10a      	bne.n	8006216 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff fcba 	bl	8005b88 <HAL_I2C_MemRxCpltCallback>
}
 8006214:	e01d      	b.n	8006252 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2212      	movs	r2, #18
 8006222:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff fc6f 	bl	8005b08 <HAL_I2C_MasterRxCpltCallback>
}
 800622a:	e012      	b.n	8006252 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	691a      	ldr	r2, [r3, #16]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b40      	cmp	r3, #64	; 0x40
 800626c:	d117      	bne.n	800629e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006272:	2b00      	cmp	r3, #0
 8006274:	d109      	bne.n	800628a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627a:	b2db      	uxtb	r3, r3
 800627c:	461a      	mov	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006286:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006288:	e067      	b.n	800635a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	b2db      	uxtb	r3, r3
 8006290:	f043 0301 	orr.w	r3, r3, #1
 8006294:	b2da      	uxtb	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	611a      	str	r2, [r3, #16]
}
 800629c:	e05d      	b.n	800635a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062a6:	d133      	bne.n	8006310 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b21      	cmp	r3, #33	; 0x21
 80062b2:	d109      	bne.n	80062c8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062c4:	611a      	str	r2, [r3, #16]
 80062c6:	e008      	b.n	80062da <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	f043 0301 	orr.w	r3, r3, #1
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <I2C_Master_SB+0x92>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d108      	bne.n	80062fe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d032      	beq.n	800635a <I2C_Master_SB+0x100>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d02d      	beq.n	800635a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800630c:	605a      	str	r2, [r3, #4]
}
 800630e:	e024      	b.n	800635a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10e      	bne.n	8006336 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631c:	b29b      	uxth	r3, r3
 800631e:	11db      	asrs	r3, r3, #7
 8006320:	b2db      	uxtb	r3, r3
 8006322:	f003 0306 	and.w	r3, r3, #6
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f063 030f 	orn	r3, r3, #15
 800632c:	b2da      	uxtb	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	611a      	str	r2, [r3, #16]
}
 8006334:	e011      	b.n	800635a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633a:	2b01      	cmp	r3, #1
 800633c:	d10d      	bne.n	800635a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006342:	b29b      	uxth	r3, r3
 8006344:	11db      	asrs	r3, r3, #7
 8006346:	b2db      	uxtb	r3, r3
 8006348:	f003 0306 	and.w	r3, r3, #6
 800634c:	b2db      	uxtb	r3, r3
 800634e:	f063 030e 	orn	r3, r3, #14
 8006352:	b2da      	uxtb	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	611a      	str	r2, [r3, #16]
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	b2da      	uxtb	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637e:	2b00      	cmp	r3, #0
 8006380:	d004      	beq.n	800638c <I2C_Master_ADD10+0x26>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d108      	bne.n	800639e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00c      	beq.n	80063ae <I2C_Master_ADD10+0x48>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063ac:	605a      	str	r2, [r3, #4]
  }
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b091      	sub	sp, #68	; 0x44
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b22      	cmp	r3, #34	; 0x22
 80063e2:	f040 8169 	bne.w	80066b8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10f      	bne.n	800640e <I2C_Master_ADDR+0x54>
 80063ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80063f2:	2b40      	cmp	r3, #64	; 0x40
 80063f4:	d10b      	bne.n	800640e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063f6:	2300      	movs	r3, #0
 80063f8:	633b      	str	r3, [r7, #48]	; 0x30
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	633b      	str	r3, [r7, #48]	; 0x30
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	633b      	str	r3, [r7, #48]	; 0x30
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	e160      	b.n	80066d0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006412:	2b00      	cmp	r3, #0
 8006414:	d11d      	bne.n	8006452 <I2C_Master_ADDR+0x98>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800641e:	d118      	bne.n	8006452 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006420:	2300      	movs	r3, #0
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006444:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	651a      	str	r2, [r3, #80]	; 0x50
 8006450:	e13e      	b.n	80066d0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006456:	b29b      	uxth	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d113      	bne.n	8006484 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645c:	2300      	movs	r3, #0
 800645e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e115      	b.n	80066b0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b01      	cmp	r3, #1
 800648c:	f040 808a 	bne.w	80065a4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006496:	d137      	bne.n	8006508 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064b6:	d113      	bne.n	80064e0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c8:	2300      	movs	r3, #0
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	e0e7      	b.n	80066b0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064e0:	2300      	movs	r3, #0
 80064e2:	623b      	str	r3, [r7, #32]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	623b      	str	r3, [r7, #32]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	623b      	str	r3, [r7, #32]
 80064f4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	e0d3      	b.n	80066b0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	2b08      	cmp	r3, #8
 800650c:	d02e      	beq.n	800656c <I2C_Master_ADDR+0x1b2>
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	2b20      	cmp	r3, #32
 8006512:	d02b      	beq.n	800656c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006516:	2b12      	cmp	r3, #18
 8006518:	d102      	bne.n	8006520 <I2C_Master_ADDR+0x166>
 800651a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651c:	2b01      	cmp	r3, #1
 800651e:	d125      	bne.n	800656c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	2b04      	cmp	r3, #4
 8006524:	d00e      	beq.n	8006544 <I2C_Master_ADDR+0x18a>
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	2b02      	cmp	r3, #2
 800652a:	d00b      	beq.n	8006544 <I2C_Master_ADDR+0x18a>
 800652c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652e:	2b10      	cmp	r3, #16
 8006530:	d008      	beq.n	8006544 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	e007      	b.n	8006554 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006552:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006554:	2300      	movs	r3, #0
 8006556:	61fb      	str	r3, [r7, #28]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	61fb      	str	r3, [r7, #28]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	e0a1      	b.n	80066b0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800657c:	2300      	movs	r3, #0
 800657e:	61bb      	str	r3, [r7, #24]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	e085      	b.n	80066b0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d14d      	bne.n	800664a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	d016      	beq.n	80065e2 <I2C_Master_ADDR+0x228>
 80065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d013      	beq.n	80065e2 <I2C_Master_ADDR+0x228>
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	2b10      	cmp	r3, #16
 80065be:	d010      	beq.n	80065e2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ce:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	e007      	b.n	80065f2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065f0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006600:	d117      	bne.n	8006632 <I2C_Master_ADDR+0x278>
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006608:	d00b      	beq.n	8006622 <I2C_Master_ADDR+0x268>
 800660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660c:	2b01      	cmp	r3, #1
 800660e:	d008      	beq.n	8006622 <I2C_Master_ADDR+0x268>
 8006610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006612:	2b08      	cmp	r3, #8
 8006614:	d005      	beq.n	8006622 <I2C_Master_ADDR+0x268>
 8006616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006618:	2b10      	cmp	r3, #16
 800661a:	d002      	beq.n	8006622 <I2C_Master_ADDR+0x268>
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	2b20      	cmp	r3, #32
 8006620:	d107      	bne.n	8006632 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006630:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	617b      	str	r3, [r7, #20]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	e032      	b.n	80066b0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006658:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006668:	d117      	bne.n	800669a <I2C_Master_ADDR+0x2e0>
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006670:	d00b      	beq.n	800668a <I2C_Master_ADDR+0x2d0>
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	2b01      	cmp	r3, #1
 8006676:	d008      	beq.n	800668a <I2C_Master_ADDR+0x2d0>
 8006678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667a:	2b08      	cmp	r3, #8
 800667c:	d005      	beq.n	800668a <I2C_Master_ADDR+0x2d0>
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	2b10      	cmp	r3, #16
 8006682:	d002      	beq.n	800668a <I2C_Master_ADDR+0x2d0>
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	2b20      	cmp	r3, #32
 8006688:	d107      	bne.n	800669a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006698:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800669a:	2300      	movs	r3, #0
 800669c:	613b      	str	r3, [r7, #16]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	613b      	str	r3, [r7, #16]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80066b6:	e00b      	b.n	80066d0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]
}
 80066ce:	e7ff      	b.n	80066d0 <I2C_Master_ADDR+0x316>
 80066d0:	bf00      	nop
 80066d2:	3744      	adds	r7, #68	; 0x44
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d02b      	beq.n	800674e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	781a      	ldrb	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006710:	b29b      	uxth	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d114      	bne.n	800674e <I2C_SlaveTransmit_TXE+0x72>
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	2b29      	cmp	r3, #41	; 0x29
 8006728:	d111      	bne.n	800674e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006738:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2221      	movs	r2, #33	; 0x21
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2228      	movs	r2, #40	; 0x28
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff f9e7 	bl	8005b1c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800674e:	bf00      	nop
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006762:	b29b      	uxth	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d011      	beq.n	800678c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	781a      	ldrb	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d02c      	beq.n	800680c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691a      	ldr	r2, [r3, #16]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d114      	bne.n	800680c <I2C_SlaveReceive_RXNE+0x74>
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
 80067e4:	2b2a      	cmp	r3, #42	; 0x2a
 80067e6:	d111      	bne.n	800680c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2222      	movs	r2, #34	; 0x22
 80067fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2228      	movs	r2, #40	; 0x28
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff f992 	bl	8005b30 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800680c:	bf00      	nop
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d012      	beq.n	800684c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006842:	b29b      	uxth	r3, r3
 8006844:	3b01      	subs	r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686c:	b2db      	uxtb	r3, r3
 800686e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006872:	2b28      	cmp	r3, #40	; 0x28
 8006874:	d127      	bne.n	80068c6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006884:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	089b      	lsrs	r3, r3, #2
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006892:	2301      	movs	r3, #1
 8006894:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	09db      	lsrs	r3, r3, #7
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d103      	bne.n	80068aa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	81bb      	strh	r3, [r7, #12]
 80068a8:	e002      	b.n	80068b0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80068b8:	89ba      	ldrh	r2, [r7, #12]
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff f940 	bl	8005b44 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80068c4:	e00e      	b.n	80068e4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068c6:	2300      	movs	r3, #0
 80068c8:	60bb      	str	r3, [r7, #8]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	60bb      	str	r3, [r7, #8]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	60bb      	str	r3, [r7, #8]
 80068da:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80068e4:	bf00      	nop
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800690a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800690c:	2300      	movs	r3, #0
 800690e:	60bb      	str	r3, [r7, #8]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	60bb      	str	r3, [r7, #8]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0201 	orr.w	r2, r2, #1
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006938:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006948:	d172      	bne.n	8006a30 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	2b22      	cmp	r3, #34	; 0x22
 800694e:	d002      	beq.n	8006956 <I2C_Slave_STOPF+0x6a>
 8006950:	7bfb      	ldrb	r3, [r7, #15]
 8006952:	2b2a      	cmp	r3, #42	; 0x2a
 8006954:	d135      	bne.n	80069c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	b29a      	uxth	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	f043 0204 	orr.w	r2, r3, #4
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006988:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe f85b 	bl	8004a4a <HAL_DMA_GetState>
 8006994:	4603      	mov	r3, r0
 8006996:	2b01      	cmp	r3, #1
 8006998:	d049      	beq.n	8006a2e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	4a69      	ldr	r2, [pc, #420]	; (8006b44 <I2C_Slave_STOPF+0x258>)
 80069a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe f82d 	bl	8004a06 <HAL_DMA_Abort_IT>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d03d      	beq.n	8006a2e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069bc:	4610      	mov	r0, r2
 80069be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069c0:	e035      	b.n	8006a2e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d005      	beq.n	80069e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	f043 0204 	orr.w	r2, r3, #4
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe f825 	bl	8004a4a <HAL_DMA_GetState>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d014      	beq.n	8006a30 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0a:	4a4e      	ldr	r2, [pc, #312]	; (8006b44 <I2C_Slave_STOPF+0x258>)
 8006a0c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fd fff7 	bl	8004a06 <HAL_DMA_Abort_IT>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d008      	beq.n	8006a30 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4798      	blx	r3
 8006a2c:	e000      	b.n	8006a30 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a2e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d03e      	beq.n	8006ab8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d112      	bne.n	8006a6e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691a      	ldr	r2, [r3, #16]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	b2d2      	uxtb	r2, r2
 8006a54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a78:	2b40      	cmp	r3, #64	; 0x40
 8006a7a:	d112      	bne.n	8006aa2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	f043 0204 	orr.w	r2, r3, #4
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f8b3 	bl	8006c2c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006ac6:	e039      	b.n	8006b3c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	2b2a      	cmp	r3, #42	; 0x2a
 8006acc:	d109      	bne.n	8006ae2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2228      	movs	r2, #40	; 0x28
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff f827 	bl	8005b30 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b28      	cmp	r3, #40	; 0x28
 8006aec:	d111      	bne.n	8006b12 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <I2C_Slave_STOPF+0x25c>)
 8006af2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff f828 	bl	8005b60 <HAL_I2C_ListenCpltCallback>
}
 8006b10:	e014      	b.n	8006b3c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	2b22      	cmp	r3, #34	; 0x22
 8006b18:	d002      	beq.n	8006b20 <I2C_Slave_STOPF+0x234>
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	2b22      	cmp	r3, #34	; 0x22
 8006b1e:	d10d      	bne.n	8006b3c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7fe fffa 	bl	8005b30 <HAL_I2C_SlaveRxCpltCallback>
}
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	08007131 	.word	0x08007131
 8006b48:	ffff0000 	.word	0xffff0000

08006b4c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d002      	beq.n	8006b6e <I2C_Slave_AF+0x22>
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d129      	bne.n	8006bc2 <I2C_Slave_AF+0x76>
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	2b28      	cmp	r3, #40	; 0x28
 8006b72:	d126      	bne.n	8006bc2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a2c      	ldr	r2, [pc, #176]	; (8006c28 <I2C_Slave_AF+0xdc>)
 8006b78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b88:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b92:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7fe ffd0 	bl	8005b60 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006bc0:	e02e      	b.n	8006c20 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
 8006bc4:	2b21      	cmp	r3, #33	; 0x21
 8006bc6:	d126      	bne.n	8006c16 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a17      	ldr	r2, [pc, #92]	; (8006c28 <I2C_Slave_AF+0xdc>)
 8006bcc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2221      	movs	r2, #33	; 0x21
 8006bd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bf2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bfc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fe ff84 	bl	8005b1c <HAL_I2C_SlaveTxCpltCallback>
}
 8006c14:	e004      	b.n	8006c20 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c1e:	615a      	str	r2, [r3, #20]
}
 8006c20:	bf00      	nop
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	ffff0000 	.word	0xffff0000

08006c2c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	2b10      	cmp	r3, #16
 8006c48:	d002      	beq.n	8006c50 <I2C_ITError+0x24>
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	2b40      	cmp	r3, #64	; 0x40
 8006c4e:	d10a      	bne.n	8006c66 <I2C_ITError+0x3a>
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	2b22      	cmp	r3, #34	; 0x22
 8006c54:	d107      	bne.n	8006c66 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c64:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c6c:	2b28      	cmp	r3, #40	; 0x28
 8006c6e:	d107      	bne.n	8006c80 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2228      	movs	r2, #40	; 0x28
 8006c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c7e:	e015      	b.n	8006cac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c8e:	d00a      	beq.n	8006ca6 <I2C_ITError+0x7a>
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	2b60      	cmp	r3, #96	; 0x60
 8006c94:	d007      	beq.n	8006ca6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cba:	d162      	bne.n	8006d82 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d020      	beq.n	8006d1c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cde:	4a6a      	ldr	r2, [pc, #424]	; (8006e88 <I2C_ITError+0x25c>)
 8006ce0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fd fe8d 	bl	8004a06 <HAL_DMA_Abort_IT>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 8089 	beq.w	8006e06 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0201 	bic.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d16:	4610      	mov	r0, r2
 8006d18:	4798      	blx	r3
 8006d1a:	e074      	b.n	8006e06 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d20:	4a59      	ldr	r2, [pc, #356]	; (8006e88 <I2C_ITError+0x25c>)
 8006d22:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fd fe6c 	bl	8004a06 <HAL_DMA_Abort_IT>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d068      	beq.n	8006e06 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b40      	cmp	r3, #64	; 0x40
 8006d40:	d10b      	bne.n	8006d5a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0201 	bic.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	4798      	blx	r3
 8006d80:	e041      	b.n	8006e06 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b60      	cmp	r3, #96	; 0x60
 8006d8c:	d125      	bne.n	8006dda <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da6:	2b40      	cmp	r3, #64	; 0x40
 8006da8:	d10b      	bne.n	8006dc2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0201 	bic.w	r2, r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7fe feec 	bl	8005bb0 <HAL_I2C_AbortCpltCallback>
 8006dd8:	e015      	b.n	8006e06 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de4:	2b40      	cmp	r3, #64	; 0x40
 8006de6:	d10b      	bne.n	8006e00 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	691a      	ldr	r2, [r3, #16]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7fe fecb 	bl	8005b9c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10e      	bne.n	8006e34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d109      	bne.n	8006e34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d104      	bne.n	8006e34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d007      	beq.n	8006e44 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e42:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e4a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d113      	bne.n	8006e80 <I2C_ITError+0x254>
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	2b28      	cmp	r3, #40	; 0x28
 8006e5c:	d110      	bne.n	8006e80 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a0a      	ldr	r2, [pc, #40]	; (8006e8c <I2C_ITError+0x260>)
 8006e62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7fe fe70 	bl	8005b60 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e80:	bf00      	nop
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	08007131 	.word	0x08007131
 8006e8c:	ffff0000 	.word	0xffff0000

08006e90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	607a      	str	r2, [r7, #4]
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d006      	beq.n	8006eba <I2C_MasterRequestWrite+0x2a>
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d003      	beq.n	8006eba <I2C_MasterRequestWrite+0x2a>
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006eb8:	d108      	bne.n	8006ecc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	e00b      	b.n	8006ee4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed0:	2b12      	cmp	r3, #18
 8006ed2:	d107      	bne.n	8006ee4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ee2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 f9c5 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00d      	beq.n	8006f18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f0a:	d103      	bne.n	8006f14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e035      	b.n	8006f84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f20:	d108      	bne.n	8006f34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f22:	897b      	ldrh	r3, [r7, #10]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f30:	611a      	str	r2, [r3, #16]
 8006f32:	e01b      	b.n	8006f6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006f34:	897b      	ldrh	r3, [r7, #10]
 8006f36:	11db      	asrs	r3, r3, #7
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	f003 0306 	and.w	r3, r3, #6
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	f063 030f 	orn	r3, r3, #15
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	490e      	ldr	r1, [pc, #56]	; (8006f8c <I2C_MasterRequestWrite+0xfc>)
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 f9eb 	bl	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e010      	b.n	8006f84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006f62:	897b      	ldrh	r3, [r7, #10]
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	4907      	ldr	r1, [pc, #28]	; (8006f90 <I2C_MasterRequestWrite+0x100>)
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 f9db 	bl	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	00010008 	.word	0x00010008
 8006f90:	00010002 	.word	0x00010002

08006f94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	607a      	str	r2, [r7, #4]
 8006f9e:	603b      	str	r3, [r7, #0]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fb8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d006      	beq.n	8006fce <I2C_MasterRequestRead+0x3a>
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d003      	beq.n	8006fce <I2C_MasterRequestRead+0x3a>
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fcc:	d108      	bne.n	8006fe0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e00b      	b.n	8006ff8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe4:	2b11      	cmp	r3, #17
 8006fe6:	d107      	bne.n	8006ff8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ff6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f93b 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00d      	beq.n	800702c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701e:	d103      	bne.n	8007028 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007026:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e079      	b.n	8007120 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007034:	d108      	bne.n	8007048 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007036:	897b      	ldrh	r3, [r7, #10]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	f043 0301 	orr.w	r3, r3, #1
 800703e:	b2da      	uxtb	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	611a      	str	r2, [r3, #16]
 8007046:	e05f      	b.n	8007108 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007048:	897b      	ldrh	r3, [r7, #10]
 800704a:	11db      	asrs	r3, r3, #7
 800704c:	b2db      	uxtb	r3, r3
 800704e:	f003 0306 	and.w	r3, r3, #6
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f063 030f 	orn	r3, r3, #15
 8007058:	b2da      	uxtb	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	4930      	ldr	r1, [pc, #192]	; (8007128 <I2C_MasterRequestRead+0x194>)
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 f961 	bl	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e054      	b.n	8007120 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007076:	897b      	ldrh	r3, [r7, #10]
 8007078:	b2da      	uxtb	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	4929      	ldr	r1, [pc, #164]	; (800712c <I2C_MasterRequestRead+0x198>)
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 f951 	bl	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e044      	b.n	8007120 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007096:	2300      	movs	r3, #0
 8007098:	613b      	str	r3, [r7, #16]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	613b      	str	r3, [r7, #16]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	613b      	str	r3, [r7, #16]
 80070aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f8d9 	bl	8007280 <I2C_WaitOnFlagUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00d      	beq.n	80070f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e2:	d103      	bne.n	80070ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e017      	b.n	8007120 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80070f0:	897b      	ldrh	r3, [r7, #10]
 80070f2:	11db      	asrs	r3, r3, #7
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	f003 0306 	and.w	r3, r3, #6
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f063 030e 	orn	r3, r3, #14
 8007100:	b2da      	uxtb	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	4907      	ldr	r1, [pc, #28]	; (800712c <I2C_MasterRequestRead+0x198>)
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 f90d 	bl	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e000      	b.n	8007120 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	00010008 	.word	0x00010008
 800712c:	00010002 	.word	0x00010002

08007130 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007140:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007148:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800714a:	4b4b      	ldr	r3, [pc, #300]	; (8007278 <I2C_DMAAbort+0x148>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	08db      	lsrs	r3, r3, #3
 8007150:	4a4a      	ldr	r2, [pc, #296]	; (800727c <I2C_DMAAbort+0x14c>)
 8007152:	fba2 2303 	umull	r2, r3, r2, r3
 8007156:	0a1a      	lsrs	r2, r3, #8
 8007158:	4613      	mov	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	00da      	lsls	r2, r3, #3
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	f043 0220 	orr.w	r2, r3, #32
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007176:	e00a      	b.n	800718e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	3b01      	subs	r3, #1
 800717c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800718c:	d0ea      	beq.n	8007164 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719a:	2200      	movs	r2, #0
 800719c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	2200      	movs	r2, #0
 80071ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2200      	movs	r2, #0
 80071c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d0:	2200      	movs	r2, #0
 80071d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	2200      	movs	r2, #0
 80071e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f022 0201 	bic.w	r2, r2, #1
 80071f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b60      	cmp	r3, #96	; 0x60
 80071fe:	d10e      	bne.n	800721e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	2220      	movs	r2, #32
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2200      	movs	r2, #0
 8007214:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007216:	6978      	ldr	r0, [r7, #20]
 8007218:	f7fe fcca 	bl	8005bb0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800721c:	e027      	b.n	800726e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800721e:	7cfb      	ldrb	r3, [r7, #19]
 8007220:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007224:	2b28      	cmp	r3, #40	; 0x28
 8007226:	d117      	bne.n	8007258 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0201 	orr.w	r2, r2, #1
 8007236:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007246:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2200      	movs	r2, #0
 800724c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2228      	movs	r2, #40	; 0x28
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007256:	e007      	b.n	8007268 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007268:	6978      	ldr	r0, [r7, #20]
 800726a:	f7fe fc97 	bl	8005b9c <HAL_I2C_ErrorCallback>
}
 800726e:	bf00      	nop
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20000014 	.word	0x20000014
 800727c:	14f8b589 	.word	0x14f8b589

08007280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	4613      	mov	r3, r2
 800728e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007290:	e025      	b.n	80072de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d021      	beq.n	80072de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729a:	f7fd fa73 	bl	8004784 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d302      	bcc.n	80072b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d116      	bne.n	80072de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	f043 0220 	orr.w	r2, r3, #32
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e023      	b.n	8007326 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d10d      	bne.n	8007304 <I2C_WaitOnFlagUntilTimeout+0x84>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	43da      	mvns	r2, r3
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4013      	ands	r3, r2
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bf0c      	ite	eq
 80072fa:	2301      	moveq	r3, #1
 80072fc:	2300      	movne	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	e00c      	b.n	800731e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	43da      	mvns	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4013      	ands	r3, r2
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	bf0c      	ite	eq
 8007316:	2301      	moveq	r3, #1
 8007318:	2300      	movne	r3, #0
 800731a:	b2db      	uxtb	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	429a      	cmp	r2, r3
 8007322:	d0b6      	beq.n	8007292 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	60b9      	str	r1, [r7, #8]
 8007338:	607a      	str	r2, [r7, #4]
 800733a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800733c:	e051      	b.n	80073e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734c:	d123      	bne.n	8007396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800735c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007366:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2220      	movs	r2, #32
 8007372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f043 0204 	orr.w	r2, r3, #4
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e046      	b.n	8007424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739c:	d021      	beq.n	80073e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800739e:	f7fd f9f1 	bl	8004784 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d302      	bcc.n	80073b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d116      	bne.n	80073e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2220      	movs	r2, #32
 80073be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	f043 0220 	orr.w	r2, r3, #32
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e020      	b.n	8007424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	0c1b      	lsrs	r3, r3, #16
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d10c      	bne.n	8007406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	43da      	mvns	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	4013      	ands	r3, r2
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bf14      	ite	ne
 80073fe:	2301      	movne	r3, #1
 8007400:	2300      	moveq	r3, #0
 8007402:	b2db      	uxtb	r3, r3
 8007404:	e00b      	b.n	800741e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	43da      	mvns	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	4013      	ands	r3, r2
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	bf14      	ite	ne
 8007418:	2301      	movne	r3, #1
 800741a:	2300      	moveq	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d18d      	bne.n	800733e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007438:	e02d      	b.n	8007496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 f900 	bl	8007640 <I2C_IsAcknowledgeFailed>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e02d      	b.n	80074a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007450:	d021      	beq.n	8007496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007452:	f7fd f997 	bl	8004784 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	429a      	cmp	r2, r3
 8007460:	d302      	bcc.n	8007468 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d116      	bne.n	8007496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2220      	movs	r2, #32
 8007472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	f043 0220 	orr.w	r2, r3, #32
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e007      	b.n	80074a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a0:	2b80      	cmp	r3, #128	; 0x80
 80074a2:	d1ca      	bne.n	800743a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074ba:	e02d      	b.n	8007518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 f8bf 	bl	8007640 <I2C_IsAcknowledgeFailed>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e02d      	b.n	8007528 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	d021      	beq.n	8007518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074d4:	f7fd f956 	bl	8004784 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d302      	bcc.n	80074ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d116      	bne.n	8007518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007504:	f043 0220 	orr.w	r2, r3, #32
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e007      	b.n	8007528 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b04      	cmp	r3, #4
 8007524:	d1ca      	bne.n	80074bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800753c:	4b13      	ldr	r3, [pc, #76]	; (800758c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	08db      	lsrs	r3, r3, #3
 8007542:	4a13      	ldr	r2, [pc, #76]	; (8007590 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007544:	fba2 2303 	umull	r2, r3, r2, r3
 8007548:	0a1a      	lsrs	r2, r3, #8
 800754a:	4613      	mov	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3b01      	subs	r3, #1
 8007556:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d107      	bne.n	800756e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	f043 0220 	orr.w	r2, r3, #32
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e008      	b.n	8007580 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800757c:	d0e9      	beq.n	8007552 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	20000014 	.word	0x20000014
 8007590:	14f8b589 	.word	0x14f8b589

08007594 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075a0:	e042      	b.n	8007628 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	f003 0310 	and.w	r3, r3, #16
 80075ac:	2b10      	cmp	r3, #16
 80075ae:	d119      	bne.n	80075e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f06f 0210 	mvn.w	r2, #16
 80075b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e029      	b.n	8007638 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075e4:	f7fd f8ce 	bl	8004784 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d302      	bcc.n	80075fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d116      	bne.n	8007628 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	f043 0220 	orr.w	r2, r3, #32
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e007      	b.n	8007638 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007632:	2b40      	cmp	r3, #64	; 0x40
 8007634:	d1b5      	bne.n	80075a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007656:	d11b      	bne.n	8007690 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007660:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2220      	movs	r2, #32
 800766c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767c:	f043 0204 	orr.w	r2, r3, #4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e000      	b.n	8007692 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80076ae:	d103      	bne.n	80076b8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80076b6:	e007      	b.n	80076c8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80076c0:	d102      	bne.n	80076c8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2208      	movs	r2, #8
 80076c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d129      	bne.n	800773e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2224      	movs	r2, #36	; 0x24
 80076ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0201 	bic.w	r2, r2, #1
 8007700:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 0210 	bic.w	r2, r2, #16
 8007710:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f042 0201 	orr.w	r2, r2, #1
 8007730:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2220      	movs	r2, #32
 8007736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	e000      	b.n	8007740 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800773e:	2302      	movs	r3, #2
  }
}
 8007740:	4618      	mov	r0, r3
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b20      	cmp	r3, #32
 8007764:	d12a      	bne.n	80077bc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2224      	movs	r2, #36	; 0x24
 800776a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0201 	bic.w	r2, r2, #1
 800777c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007786:	89fb      	ldrh	r3, [r7, #14]
 8007788:	f023 030f 	bic.w	r3, r3, #15
 800778c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	b29a      	uxth	r2, r3
 8007792:	89fb      	ldrh	r3, [r7, #14]
 8007794:	4313      	orrs	r3, r2
 8007796:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	89fa      	ldrh	r2, [r7, #14]
 800779e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0201 	orr.w	r2, r2, #1
 80077ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	e000      	b.n	80077be <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80077bc:	2302      	movs	r3, #2
  }
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80077ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077cc:	b08f      	sub	sp, #60	; 0x3c
 80077ce:	af0a      	add	r7, sp, #40	; 0x28
 80077d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d101      	bne.n	80077dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e10f      	b.n	80079fc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d106      	bne.n	80077fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f006 fee2 	bl	800e5c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2203      	movs	r2, #3
 8007800:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780c:	2b00      	cmp	r3, #0
 800780e:	d102      	bne.n	8007816 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4618      	mov	r0, r3
 800781c:	f003 f9bd 	bl	800ab9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	603b      	str	r3, [r7, #0]
 8007826:	687e      	ldr	r6, [r7, #4]
 8007828:	466d      	mov	r5, sp
 800782a:	f106 0410 	add.w	r4, r6, #16
 800782e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007834:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007836:	e894 0003 	ldmia.w	r4, {r0, r1}
 800783a:	e885 0003 	stmia.w	r5, {r0, r1}
 800783e:	1d33      	adds	r3, r6, #4
 8007840:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007842:	6838      	ldr	r0, [r7, #0]
 8007844:	f003 f894 	bl	800a970 <USB_CoreInit>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2202      	movs	r2, #2
 8007852:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e0d0      	b.n	80079fc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2100      	movs	r1, #0
 8007860:	4618      	mov	r0, r3
 8007862:	f003 f9ab 	bl	800abbc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007866:	2300      	movs	r3, #0
 8007868:	73fb      	strb	r3, [r7, #15]
 800786a:	e04a      	b.n	8007902 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800786c:	7bfa      	ldrb	r2, [r7, #15]
 800786e:	6879      	ldr	r1, [r7, #4]
 8007870:	4613      	mov	r3, r2
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	440b      	add	r3, r1
 800787a:	333d      	adds	r3, #61	; 0x3d
 800787c:	2201      	movs	r2, #1
 800787e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007880:	7bfa      	ldrb	r2, [r7, #15]
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	4613      	mov	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	440b      	add	r3, r1
 800788e:	333c      	adds	r3, #60	; 0x3c
 8007890:	7bfa      	ldrb	r2, [r7, #15]
 8007892:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007894:	7bfa      	ldrb	r2, [r7, #15]
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	b298      	uxth	r0, r3
 800789a:	6879      	ldr	r1, [r7, #4]
 800789c:	4613      	mov	r3, r2
 800789e:	00db      	lsls	r3, r3, #3
 80078a0:	4413      	add	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	440b      	add	r3, r1
 80078a6:	3344      	adds	r3, #68	; 0x44
 80078a8:	4602      	mov	r2, r0
 80078aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80078ac:	7bfa      	ldrb	r2, [r7, #15]
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	4613      	mov	r3, r2
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	4413      	add	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	440b      	add	r3, r1
 80078ba:	3340      	adds	r3, #64	; 0x40
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80078c0:	7bfa      	ldrb	r2, [r7, #15]
 80078c2:	6879      	ldr	r1, [r7, #4]
 80078c4:	4613      	mov	r3, r2
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	4413      	add	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	440b      	add	r3, r1
 80078ce:	3348      	adds	r3, #72	; 0x48
 80078d0:	2200      	movs	r2, #0
 80078d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80078d4:	7bfa      	ldrb	r2, [r7, #15]
 80078d6:	6879      	ldr	r1, [r7, #4]
 80078d8:	4613      	mov	r3, r2
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	4413      	add	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	440b      	add	r3, r1
 80078e2:	334c      	adds	r3, #76	; 0x4c
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80078e8:	7bfa      	ldrb	r2, [r7, #15]
 80078ea:	6879      	ldr	r1, [r7, #4]
 80078ec:	4613      	mov	r3, r2
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	440b      	add	r3, r1
 80078f6:	3354      	adds	r3, #84	; 0x54
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	3301      	adds	r3, #1
 8007900:	73fb      	strb	r3, [r7, #15]
 8007902:	7bfa      	ldrb	r2, [r7, #15]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d3af      	bcc.n	800786c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800790c:	2300      	movs	r3, #0
 800790e:	73fb      	strb	r3, [r7, #15]
 8007910:	e044      	b.n	800799c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007912:	7bfa      	ldrb	r2, [r7, #15]
 8007914:	6879      	ldr	r1, [r7, #4]
 8007916:	4613      	mov	r3, r2
 8007918:	00db      	lsls	r3, r3, #3
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	440b      	add	r3, r1
 8007920:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007924:	2200      	movs	r2, #0
 8007926:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007928:	7bfa      	ldrb	r2, [r7, #15]
 800792a:	6879      	ldr	r1, [r7, #4]
 800792c:	4613      	mov	r3, r2
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	4413      	add	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	440b      	add	r3, r1
 8007936:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800793a:	7bfa      	ldrb	r2, [r7, #15]
 800793c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800793e:	7bfa      	ldrb	r2, [r7, #15]
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007950:	2200      	movs	r2, #0
 8007952:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007954:	7bfa      	ldrb	r2, [r7, #15]
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	4613      	mov	r3, r2
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	4413      	add	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	440b      	add	r3, r1
 8007962:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007966:	2200      	movs	r2, #0
 8007968:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800796a:	7bfa      	ldrb	r2, [r7, #15]
 800796c:	6879      	ldr	r1, [r7, #4]
 800796e:	4613      	mov	r3, r2
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	4413      	add	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	440b      	add	r3, r1
 8007978:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007980:	7bfa      	ldrb	r2, [r7, #15]
 8007982:	6879      	ldr	r1, [r7, #4]
 8007984:	4613      	mov	r3, r2
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	440b      	add	r3, r1
 800798e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	3301      	adds	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]
 800799c:	7bfa      	ldrb	r2, [r7, #15]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d3b5      	bcc.n	8007912 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	687e      	ldr	r6, [r7, #4]
 80079ae:	466d      	mov	r5, sp
 80079b0:	f106 0410 	add.w	r4, r6, #16
 80079b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80079c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80079c4:	1d33      	adds	r3, r6, #4
 80079c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079c8:	6838      	ldr	r0, [r7, #0]
 80079ca:	f003 f943 	bl	800ac54 <USB_DevInit>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e00d      	b.n	80079fc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f004 fa92 	bl	800bf1e <USB_DevDisconnect>

  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_PCD_Start+0x1c>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e020      	b.n	8007a62 <HAL_PCD_Start+0x5e>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d109      	bne.n	8007a44 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d005      	beq.n	8007a44 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f003 f895 	bl	800ab78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f004 fa42 	bl	800bedc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007a6a:	b590      	push	{r4, r7, lr}
 8007a6c:	b08d      	sub	sp, #52	; 0x34
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f004 fb00 	bl	800c086 <USB_GetMode>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f040 848a 	bne.w	80083a2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f004 fa64 	bl	800bf60 <USB_ReadInterrupts>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 8480 	beq.w	80083a0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	0a1b      	lsrs	r3, r3, #8
 8007aaa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f004 fa51 	bl	800bf60 <USB_ReadInterrupts>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d107      	bne.n	8007ad8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695a      	ldr	r2, [r3, #20]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f002 0202 	and.w	r2, r2, #2
 8007ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f004 fa3f 	bl	800bf60 <USB_ReadInterrupts>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f003 0310 	and.w	r3, r3, #16
 8007ae8:	2b10      	cmp	r3, #16
 8007aea:	d161      	bne.n	8007bb0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	699a      	ldr	r2, [r3, #24]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0210 	bic.w	r2, r2, #16
 8007afa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	f003 020f 	and.w	r2, r3, #15
 8007b08:	4613      	mov	r3, r2
 8007b0a:	00db      	lsls	r3, r3, #3
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	4413      	add	r3, r2
 8007b18:	3304      	adds	r3, #4
 8007b1a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	0c5b      	lsrs	r3, r3, #17
 8007b20:	f003 030f 	and.w	r3, r3, #15
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d124      	bne.n	8007b72 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007b2e:	4013      	ands	r3, r2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d035      	beq.n	8007ba0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	091b      	lsrs	r3, r3, #4
 8007b3c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	461a      	mov	r2, r3
 8007b46:	6a38      	ldr	r0, [r7, #32]
 8007b48:	f004 f876 	bl	800bc38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	691a      	ldr	r2, [r3, #16]
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	091b      	lsrs	r3, r3, #4
 8007b54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b58:	441a      	add	r2, r3
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	6a1a      	ldr	r2, [r3, #32]
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	091b      	lsrs	r3, r3, #4
 8007b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b6a:	441a      	add	r2, r3
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	621a      	str	r2, [r3, #32]
 8007b70:	e016      	b.n	8007ba0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	0c5b      	lsrs	r3, r3, #17
 8007b76:	f003 030f 	and.w	r3, r3, #15
 8007b7a:	2b06      	cmp	r3, #6
 8007b7c:	d110      	bne.n	8007ba0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b84:	2208      	movs	r2, #8
 8007b86:	4619      	mov	r1, r3
 8007b88:	6a38      	ldr	r0, [r7, #32]
 8007b8a:	f004 f855 	bl	800bc38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	6a1a      	ldr	r2, [r3, #32]
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	091b      	lsrs	r3, r3, #4
 8007b96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b9a:	441a      	add	r2, r3
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	699a      	ldr	r2, [r3, #24]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f042 0210 	orr.w	r2, r2, #16
 8007bae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f004 f9d3 	bl	800bf60 <USB_ReadInterrupts>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007bc4:	f040 80a7 	bne.w	8007d16 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f004 f9d8 	bl	800bf86 <USB_ReadDevAllOutEpInterrupt>
 8007bd6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007bd8:	e099      	b.n	8007d0e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 808e 	beq.w	8007d02 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bec:	b2d2      	uxtb	r2, r2
 8007bee:	4611      	mov	r1, r2
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f004 f9fc 	bl	800bfee <USB_ReadDevOutEPInterrupt>
 8007bf6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00c      	beq.n	8007c1c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0e:	461a      	mov	r2, r3
 8007c10:	2301      	movs	r3, #1
 8007c12:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007c14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fec2 	bl	80089a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00c      	beq.n	8007c40 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c32:	461a      	mov	r2, r3
 8007c34:	2308      	movs	r3, #8
 8007c36:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 ff98 	bl	8008b70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	f003 0310 	and.w	r3, r3, #16
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d008      	beq.n	8007c5c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c56:	461a      	mov	r2, r3
 8007c58:	2310      	movs	r3, #16
 8007c5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f003 0302 	and.w	r3, r3, #2
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d030      	beq.n	8007cc8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6e:	2b80      	cmp	r3, #128	; 0x80
 8007c70:	d109      	bne.n	8007c86 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c84:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c88:	4613      	mov	r3, r2
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	4413      	add	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	4413      	add	r3, r2
 8007c98:	3304      	adds	r3, #4
 8007c9a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	78db      	ldrb	r3, [r3, #3]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d108      	bne.n	8007cb6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f006 fd8b 	bl	800e7cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f003 0320 	and.w	r3, r3, #32
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d008      	beq.n	8007ce4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cde:	461a      	mov	r2, r3
 8007ce0:	2320      	movs	r3, #32
 8007ce2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d009      	beq.n	8007d02 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	015a      	lsls	r2, r3, #5
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d00:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	3301      	adds	r3, #1
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0a:	085b      	lsrs	r3, r3, #1
 8007d0c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f47f af62 	bne.w	8007bda <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f004 f920 	bl	800bf60 <USB_ReadInterrupts>
 8007d20:	4603      	mov	r3, r0
 8007d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d2a:	f040 80db 	bne.w	8007ee4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f004 f941 	bl	800bfba <USB_ReadDevAllInEpInterrupt>
 8007d38:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007d3e:	e0cd      	b.n	8007edc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 80c2 	beq.w	8007ed0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	4611      	mov	r1, r2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f004 f967 	bl	800c02a <USB_ReadDevInEPInterrupt>
 8007d5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d057      	beq.n	8007e18 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	2201      	movs	r2, #1
 8007d70:	fa02 f303 	lsl.w	r3, r2, r3
 8007d74:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	43db      	mvns	r3, r3
 8007d82:	69f9      	ldr	r1, [r7, #28]
 8007d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d88:	4013      	ands	r3, r2
 8007d8a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d98:	461a      	mov	r2, r3
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d132      	bne.n	8007e0c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007daa:	4613      	mov	r3, r2
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	4413      	add	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	440b      	add	r3, r1
 8007db4:	334c      	adds	r3, #76	; 0x4c
 8007db6:	6819      	ldr	r1, [r3, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4403      	add	r3, r0
 8007dc6:	3348      	adds	r3, #72	; 0x48
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4419      	add	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4403      	add	r3, r0
 8007dda:	334c      	adds	r3, #76	; 0x4c
 8007ddc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d113      	bne.n	8007e0c <HAL_PCD_IRQHandler+0x3a2>
 8007de4:	6879      	ldr	r1, [r7, #4]
 8007de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de8:	4613      	mov	r3, r2
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	4413      	add	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	440b      	add	r3, r1
 8007df2:	3354      	adds	r3, #84	; 0x54
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d108      	bne.n	8007e0c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6818      	ldr	r0, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007e04:	461a      	mov	r2, r3
 8007e06:	2101      	movs	r1, #1
 8007e08:	f004 f96e 	bl	800c0e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f006 fc55 	bl	800e6c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f003 0308 	and.w	r3, r3, #8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d008      	beq.n	8007e34 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2e:	461a      	mov	r2, r3
 8007e30:	2308      	movs	r3, #8
 8007e32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	f003 0310 	and.w	r3, r3, #16
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d008      	beq.n	8007e50 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	2310      	movs	r3, #16
 8007e4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d008      	beq.n	8007e6c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e66:	461a      	mov	r2, r3
 8007e68:	2340      	movs	r3, #64	; 0x40
 8007e6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d023      	beq.n	8007ebe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007e76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e78:	6a38      	ldr	r0, [r7, #32]
 8007e7a:	f003 f84f 	bl	800af1c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e80:	4613      	mov	r3, r2
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	4413      	add	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	3338      	adds	r3, #56	; 0x38
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	3304      	adds	r3, #4
 8007e90:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	78db      	ldrb	r3, [r3, #3]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d108      	bne.n	8007eac <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f006 fca2 	bl	800e7f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	461a      	mov	r2, r3
 8007eba:	2302      	movs	r3, #2
 8007ebc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fcdb 	bl	8008886 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	085b      	lsrs	r3, r3, #1
 8007eda:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f47f af2e 	bne.w	8007d40 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f004 f839 	bl	800bf60 <USB_ReadInterrupts>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ef8:	d122      	bne.n	8007f40 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	69fa      	ldr	r2, [r7, #28]
 8007f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f08:	f023 0301 	bic.w	r3, r3, #1
 8007f0c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d108      	bne.n	8007f2a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007f20:	2100      	movs	r1, #0
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fec2 	bl	8008cac <HAL_PCDEx_LPM_Callback>
 8007f28:	e002      	b.n	8007f30 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f006 fc40 	bl	800e7b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	695a      	ldr	r2, [r3, #20]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007f3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f004 f80b 	bl	800bf60 <USB_ReadInterrupts>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f54:	d112      	bne.n	8007f7c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d102      	bne.n	8007f6c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f006 fbfc 	bl	800e764 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	695a      	ldr	r2, [r3, #20]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007f7a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f003 ffed 	bl	800bf60 <USB_ReadInterrupts>
 8007f86:	4603      	mov	r3, r0
 8007f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f90:	f040 80b7 	bne.w	8008102 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	69fa      	ldr	r2, [r7, #28]
 8007f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fa2:	f023 0301 	bic.w	r3, r3, #1
 8007fa6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2110      	movs	r1, #16
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f002 ffb4 	bl	800af1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fb8:	e046      	b.n	8008048 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fcc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fde:	0151      	lsls	r1, r2, #5
 8007fe0:	69fa      	ldr	r2, [r7, #28]
 8007fe2:	440a      	add	r2, r1
 8007fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007fec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008000:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	4413      	add	r3, r2
 800800a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008012:	0151      	lsls	r1, r2, #5
 8008014:	69fa      	ldr	r2, [r7, #28]
 8008016:	440a      	add	r2, r1
 8008018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800801c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008020:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008032:	0151      	lsls	r1, r2, #5
 8008034:	69fa      	ldr	r2, [r7, #28]
 8008036:	440a      	add	r2, r1
 8008038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800803c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008040:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008044:	3301      	adds	r3, #1
 8008046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800804e:	429a      	cmp	r2, r3
 8008050:	d3b3      	bcc.n	8007fba <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008060:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008064:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806a:	2b00      	cmp	r3, #0
 800806c:	d016      	beq.n	800809c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008078:	69fa      	ldr	r2, [r7, #28]
 800807a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800807e:	f043 030b 	orr.w	r3, r3, #11
 8008082:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808e:	69fa      	ldr	r2, [r7, #28]
 8008090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008094:	f043 030b 	orr.w	r3, r3, #11
 8008098:	6453      	str	r3, [r2, #68]	; 0x44
 800809a:	e015      	b.n	80080c8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	69fa      	ldr	r2, [r7, #28]
 80080a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80080ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80080b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	69fa      	ldr	r2, [r7, #28]
 80080be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080c2:	f043 030b 	orr.w	r3, r3, #11
 80080c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69fa      	ldr	r2, [r7, #28]
 80080d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80080da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80080ec:	461a      	mov	r2, r3
 80080ee:	f003 fffb 	bl	800c0e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	695a      	ldr	r2, [r3, #20]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008100:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4618      	mov	r0, r3
 8008108:	f003 ff2a 	bl	800bf60 <USB_ReadInterrupts>
 800810c:	4603      	mov	r3, r0
 800810e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008116:	d124      	bne.n	8008162 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4618      	mov	r0, r3
 800811e:	f003 ffc0 	bl	800c0a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4618      	mov	r0, r3
 8008128:	f002 ff75 	bl	800b016 <USB_GetDevSpeed>
 800812c:	4603      	mov	r3, r0
 800812e:	461a      	mov	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681c      	ldr	r4, [r3, #0]
 8008138:	f001 fa28 	bl	800958c <HAL_RCC_GetHCLKFreq>
 800813c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008142:	b2db      	uxtb	r3, r3
 8008144:	461a      	mov	r2, r3
 8008146:	4620      	mov	r0, r4
 8008148:	f002 fc74 	bl	800aa34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f006 fae0 	bl	800e712 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	695a      	ldr	r2, [r3, #20]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008160:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4618      	mov	r0, r3
 8008168:	f003 fefa 	bl	800bf60 <USB_ReadInterrupts>
 800816c:	4603      	mov	r3, r0
 800816e:	f003 0308 	and.w	r3, r3, #8
 8008172:	2b08      	cmp	r3, #8
 8008174:	d10a      	bne.n	800818c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f006 fabd 	bl	800e6f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	695a      	ldr	r2, [r3, #20]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f002 0208 	and.w	r2, r2, #8
 800818a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4618      	mov	r0, r3
 8008192:	f003 fee5 	bl	800bf60 <USB_ReadInterrupts>
 8008196:	4603      	mov	r3, r0
 8008198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819c:	2b80      	cmp	r3, #128	; 0x80
 800819e:	d122      	bne.n	80081e6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081ac:	2301      	movs	r3, #1
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
 80081b0:	e014      	b.n	80081dc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b6:	4613      	mov	r3, r2
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	440b      	add	r3, r1
 80081c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d105      	bne.n	80081d6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fb27 	bl	8008824 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	3301      	adds	r3, #1
 80081da:	627b      	str	r3, [r7, #36]	; 0x24
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d3e5      	bcc.n	80081b2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f003 feb8 	bl	800bf60 <USB_ReadInterrupts>
 80081f0:	4603      	mov	r3, r0
 80081f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081fa:	d13b      	bne.n	8008274 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081fc:	2301      	movs	r3, #1
 80081fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008200:	e02b      	b.n	800825a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008216:	4613      	mov	r3, r2
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	4413      	add	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	440b      	add	r3, r1
 8008220:	3340      	adds	r3, #64	; 0x40
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d115      	bne.n	8008254 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008228:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800822a:	2b00      	cmp	r3, #0
 800822c:	da12      	bge.n	8008254 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008232:	4613      	mov	r3, r2
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	440b      	add	r3, r1
 800823c:	333f      	adds	r3, #63	; 0x3f
 800823e:	2201      	movs	r2, #1
 8008240:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800824a:	b2db      	uxtb	r3, r3
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fae8 	bl	8008824 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	3301      	adds	r3, #1
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008260:	429a      	cmp	r2, r3
 8008262:	d3ce      	bcc.n	8008202 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	695a      	ldr	r2, [r3, #20]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008272:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4618      	mov	r0, r3
 800827a:	f003 fe71 	bl	800bf60 <USB_ReadInterrupts>
 800827e:	4603      	mov	r3, r0
 8008280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008284:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008288:	d155      	bne.n	8008336 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800828a:	2301      	movs	r3, #1
 800828c:	627b      	str	r3, [r7, #36]	; 0x24
 800828e:	e045      	b.n	800831c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082a4:	4613      	mov	r3, r2
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d12e      	bne.n	8008316 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80082b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	da2b      	bge.n	8008316 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80082ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d121      	bne.n	8008316 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80082d2:	6879      	ldr	r1, [r7, #4]
 80082d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d6:	4613      	mov	r3, r2
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	4413      	add	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	440b      	add	r3, r1
 80082e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80082e4:	2201      	movs	r2, #1
 80082e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10a      	bne.n	8008316 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	69fa      	ldr	r2, [r7, #28]
 800830a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800830e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008312:	6053      	str	r3, [r2, #4]
            break;
 8008314:	e007      	b.n	8008326 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	3301      	adds	r3, #1
 800831a:	627b      	str	r3, [r7, #36]	; 0x24
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008322:	429a      	cmp	r2, r3
 8008324:	d3b4      	bcc.n	8008290 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	695a      	ldr	r2, [r3, #20]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008334:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4618      	mov	r0, r3
 800833c:	f003 fe10 	bl	800bf60 <USB_ReadInterrupts>
 8008340:	4603      	mov	r3, r0
 8008342:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800834a:	d10a      	bne.n	8008362 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f006 fa61 	bl	800e814 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	695a      	ldr	r2, [r3, #20]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008360:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4618      	mov	r0, r3
 8008368:	f003 fdfa 	bl	800bf60 <USB_ReadInterrupts>
 800836c:	4603      	mov	r3, r0
 800836e:	f003 0304 	and.w	r3, r3, #4
 8008372:	2b04      	cmp	r3, #4
 8008374:	d115      	bne.n	80083a2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f006 fa51 	bl	800e830 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6859      	ldr	r1, [r3, #4]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	69ba      	ldr	r2, [r7, #24]
 800839a:	430a      	orrs	r2, r1
 800839c:	605a      	str	r2, [r3, #4]
 800839e:	e000      	b.n	80083a2 <HAL_PCD_IRQHandler+0x938>
      return;
 80083a0:	bf00      	nop
    }
  }
}
 80083a2:	3734      	adds	r7, #52	; 0x34
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd90      	pop	{r4, r7, pc}

080083a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d101      	bne.n	80083c2 <HAL_PCD_SetAddress+0x1a>
 80083be:	2302      	movs	r3, #2
 80083c0:	e013      	b.n	80083ea <HAL_PCD_SetAddress+0x42>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	78fa      	ldrb	r2, [r7, #3]
 80083ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	4611      	mov	r1, r2
 80083da:	4618      	mov	r0, r3
 80083dc:	f003 fd58 	bl	800be90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	4608      	mov	r0, r1
 80083fc:	4611      	mov	r1, r2
 80083fe:	461a      	mov	r2, r3
 8008400:	4603      	mov	r3, r0
 8008402:	70fb      	strb	r3, [r7, #3]
 8008404:	460b      	mov	r3, r1
 8008406:	803b      	strh	r3, [r7, #0]
 8008408:	4613      	mov	r3, r2
 800840a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008414:	2b00      	cmp	r3, #0
 8008416:	da0f      	bge.n	8008438 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008418:	78fb      	ldrb	r3, [r7, #3]
 800841a:	f003 020f 	and.w	r2, r3, #15
 800841e:	4613      	mov	r3, r2
 8008420:	00db      	lsls	r3, r3, #3
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	3338      	adds	r3, #56	; 0x38
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	4413      	add	r3, r2
 800842c:	3304      	adds	r3, #4
 800842e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2201      	movs	r2, #1
 8008434:	705a      	strb	r2, [r3, #1]
 8008436:	e00f      	b.n	8008458 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	f003 020f 	and.w	r2, r3, #15
 800843e:	4613      	mov	r3, r2
 8008440:	00db      	lsls	r3, r3, #3
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	4413      	add	r3, r2
 800844e:	3304      	adds	r3, #4
 8008450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008458:	78fb      	ldrb	r3, [r7, #3]
 800845a:	f003 030f 	and.w	r3, r3, #15
 800845e:	b2da      	uxtb	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008464:	883a      	ldrh	r2, [r7, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	78ba      	ldrb	r2, [r7, #2]
 800846e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d004      	beq.n	8008482 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	b29a      	uxth	r2, r3
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008482:	78bb      	ldrb	r3, [r7, #2]
 8008484:	2b02      	cmp	r3, #2
 8008486:	d102      	bne.n	800848e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008494:	2b01      	cmp	r3, #1
 8008496:	d101      	bne.n	800849c <HAL_PCD_EP_Open+0xaa>
 8008498:	2302      	movs	r3, #2
 800849a:	e00e      	b.n	80084ba <HAL_PCD_EP_Open+0xc8>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68f9      	ldr	r1, [r7, #12]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f002 fdd8 	bl	800b060 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80084b8:	7afb      	ldrb	r3, [r7, #11]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
 80084ca:	460b      	mov	r3, r1
 80084cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80084ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	da0f      	bge.n	80084f6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084d6:	78fb      	ldrb	r3, [r7, #3]
 80084d8:	f003 020f 	and.w	r2, r3, #15
 80084dc:	4613      	mov	r3, r2
 80084de:	00db      	lsls	r3, r3, #3
 80084e0:	4413      	add	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	3338      	adds	r3, #56	; 0x38
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	4413      	add	r3, r2
 80084ea:	3304      	adds	r3, #4
 80084ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2201      	movs	r2, #1
 80084f2:	705a      	strb	r2, [r3, #1]
 80084f4:	e00f      	b.n	8008516 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	f003 020f 	and.w	r2, r3, #15
 80084fc:	4613      	mov	r3, r2
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	4413      	add	r3, r2
 800850c:	3304      	adds	r3, #4
 800850e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	f003 030f 	and.w	r3, r3, #15
 800851c:	b2da      	uxtb	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008528:	2b01      	cmp	r3, #1
 800852a:	d101      	bne.n	8008530 <HAL_PCD_EP_Close+0x6e>
 800852c:	2302      	movs	r3, #2
 800852e:	e00e      	b.n	800854e <HAL_PCD_EP_Close+0x8c>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68f9      	ldr	r1, [r7, #12]
 800853e:	4618      	mov	r0, r3
 8008540:	f002 fe16 	bl	800b170 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b086      	sub	sp, #24
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	603b      	str	r3, [r7, #0]
 8008562:	460b      	mov	r3, r1
 8008564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008566:	7afb      	ldrb	r3, [r7, #11]
 8008568:	f003 020f 	and.w	r2, r3, #15
 800856c:	4613      	mov	r3, r2
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4413      	add	r3, r2
 800857c:	3304      	adds	r3, #4
 800857e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2200      	movs	r2, #0
 8008590:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2200      	movs	r2, #0
 8008596:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008598:	7afb      	ldrb	r3, [r7, #11]
 800859a:	f003 030f 	and.w	r3, r3, #15
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d102      	bne.n	80085b2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80085b2:	7afb      	ldrb	r3, [r7, #11]
 80085b4:	f003 030f 	and.w	r3, r3, #15
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d109      	bne.n	80085d0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	461a      	mov	r2, r3
 80085c8:	6979      	ldr	r1, [r7, #20]
 80085ca:	f003 f8f5 	bl	800b7b8 <USB_EP0StartXfer>
 80085ce:	e008      	b.n	80085e2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6818      	ldr	r0, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	461a      	mov	r2, r3
 80085dc:	6979      	ldr	r1, [r7, #20]
 80085de:	f002 fea3 	bl	800b328 <USB_EPStartXfer>
  }

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	f003 020f 	and.w	r2, r3, #15
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	4613      	mov	r3, r2
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	4413      	add	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	440b      	add	r3, r1
 800860a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800860e:	681b      	ldr	r3, [r3, #0]
}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	607a      	str	r2, [r7, #4]
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	460b      	mov	r3, r1
 800862a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800862c:	7afb      	ldrb	r3, [r7, #11]
 800862e:	f003 020f 	and.w	r2, r3, #15
 8008632:	4613      	mov	r3, r2
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	4413      	add	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	3338      	adds	r3, #56	; 0x38
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4413      	add	r3, r2
 8008640:	3304      	adds	r3, #4
 8008642:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2200      	movs	r2, #0
 8008654:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2201      	movs	r2, #1
 800865a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800865c:	7afb      	ldrb	r3, [r7, #11]
 800865e:	f003 030f 	and.w	r3, r3, #15
 8008662:	b2da      	uxtb	r2, r3
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d102      	bne.n	8008676 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008676:	7afb      	ldrb	r3, [r7, #11]
 8008678:	f003 030f 	and.w	r3, r3, #15
 800867c:	2b00      	cmp	r3, #0
 800867e:	d109      	bne.n	8008694 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	b2db      	uxtb	r3, r3
 800868a:	461a      	mov	r2, r3
 800868c:	6979      	ldr	r1, [r7, #20]
 800868e:	f003 f893 	bl	800b7b8 <USB_EP0StartXfer>
 8008692:	e008      	b.n	80086a6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6818      	ldr	r0, [r3, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	b2db      	uxtb	r3, r3
 800869e:	461a      	mov	r2, r3
 80086a0:	6979      	ldr	r1, [r7, #20]
 80086a2:	f002 fe41 	bl	800b328 <USB_EPStartXfer>
  }

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3718      	adds	r7, #24
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80086bc:	78fb      	ldrb	r3, [r7, #3]
 80086be:	f003 020f 	and.w	r2, r3, #15
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d901      	bls.n	80086ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e050      	b.n	8008770 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80086ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	da0f      	bge.n	80086f6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086d6:	78fb      	ldrb	r3, [r7, #3]
 80086d8:	f003 020f 	and.w	r2, r3, #15
 80086dc:	4613      	mov	r3, r2
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	3338      	adds	r3, #56	; 0x38
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	4413      	add	r3, r2
 80086ea:	3304      	adds	r3, #4
 80086ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2201      	movs	r2, #1
 80086f2:	705a      	strb	r2, [r3, #1]
 80086f4:	e00d      	b.n	8008712 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80086f6:	78fa      	ldrb	r2, [r7, #3]
 80086f8:	4613      	mov	r3, r2
 80086fa:	00db      	lsls	r3, r3, #3
 80086fc:	4413      	add	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	4413      	add	r3, r2
 8008708:	3304      	adds	r3, #4
 800870a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2201      	movs	r2, #1
 8008716:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008718:	78fb      	ldrb	r3, [r7, #3]
 800871a:	f003 030f 	and.w	r3, r3, #15
 800871e:	b2da      	uxtb	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800872a:	2b01      	cmp	r3, #1
 800872c:	d101      	bne.n	8008732 <HAL_PCD_EP_SetStall+0x82>
 800872e:	2302      	movs	r3, #2
 8008730:	e01e      	b.n	8008770 <HAL_PCD_EP_SetStall+0xc0>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68f9      	ldr	r1, [r7, #12]
 8008740:	4618      	mov	r0, r3
 8008742:	f003 fad1 	bl	800bce8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008746:	78fb      	ldrb	r3, [r7, #3]
 8008748:	f003 030f 	and.w	r3, r3, #15
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6818      	ldr	r0, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	b2d9      	uxtb	r1, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008760:	461a      	mov	r2, r3
 8008762:	f003 fcc1 	bl	800c0e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008784:	78fb      	ldrb	r3, [r7, #3]
 8008786:	f003 020f 	and.w	r2, r3, #15
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	429a      	cmp	r2, r3
 8008790:	d901      	bls.n	8008796 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e042      	b.n	800881c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800879a:	2b00      	cmp	r3, #0
 800879c:	da0f      	bge.n	80087be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	f003 020f 	and.w	r2, r3, #15
 80087a4:	4613      	mov	r3, r2
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	3338      	adds	r3, #56	; 0x38
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	4413      	add	r3, r2
 80087b2:	3304      	adds	r3, #4
 80087b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	705a      	strb	r2, [r3, #1]
 80087bc:	e00f      	b.n	80087de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80087be:	78fb      	ldrb	r3, [r7, #3]
 80087c0:	f003 020f 	and.w	r2, r3, #15
 80087c4:	4613      	mov	r3, r2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	4413      	add	r3, r2
 80087d4:	3304      	adds	r3, #4
 80087d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	f003 030f 	and.w	r3, r3, #15
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d101      	bne.n	80087fe <HAL_PCD_EP_ClrStall+0x86>
 80087fa:	2302      	movs	r3, #2
 80087fc:	e00e      	b.n	800881c <HAL_PCD_EP_ClrStall+0xa4>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68f9      	ldr	r1, [r7, #12]
 800880c:	4618      	mov	r0, r3
 800880e:	f003 fad9 	bl	800bdc4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	460b      	mov	r3, r1
 800882e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008834:	2b00      	cmp	r3, #0
 8008836:	da0c      	bge.n	8008852 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	f003 020f 	and.w	r2, r3, #15
 800883e:	4613      	mov	r3, r2
 8008840:	00db      	lsls	r3, r3, #3
 8008842:	4413      	add	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	3338      	adds	r3, #56	; 0x38
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	4413      	add	r3, r2
 800884c:	3304      	adds	r3, #4
 800884e:	60fb      	str	r3, [r7, #12]
 8008850:	e00c      	b.n	800886c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008852:	78fb      	ldrb	r3, [r7, #3]
 8008854:	f003 020f 	and.w	r2, r3, #15
 8008858:	4613      	mov	r3, r2
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	4413      	add	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	4413      	add	r3, r2
 8008868:	3304      	adds	r3, #4
 800886a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68f9      	ldr	r1, [r7, #12]
 8008872:	4618      	mov	r0, r3
 8008874:	f003 f8f8 	bl	800ba68 <USB_EPStopXfer>
 8008878:	4603      	mov	r3, r0
 800887a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800887c:	7afb      	ldrb	r3, [r7, #11]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b08a      	sub	sp, #40	; 0x28
 800888a:	af02      	add	r7, sp, #8
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	4613      	mov	r3, r2
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	4413      	add	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	3338      	adds	r3, #56	; 0x38
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	4413      	add	r3, r2
 80088aa:	3304      	adds	r3, #4
 80088ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a1a      	ldr	r2, [r3, #32]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d901      	bls.n	80088be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e06c      	b.n	8008998 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	699a      	ldr	r2, [r3, #24]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	69fa      	ldr	r2, [r7, #28]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d902      	bls.n	80088da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	3303      	adds	r3, #3
 80088de:	089b      	lsrs	r3, r3, #2
 80088e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80088e2:	e02b      	b.n	800893c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	699a      	ldr	r2, [r3, #24]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6a1b      	ldr	r3, [r3, #32]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	69fa      	ldr	r2, [r7, #28]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d902      	bls.n	8008900 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	3303      	adds	r3, #3
 8008904:	089b      	lsrs	r3, r3, #2
 8008906:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6919      	ldr	r1, [r3, #16]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	b2da      	uxtb	r2, r3
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008918:	b2db      	uxtb	r3, r3
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	4603      	mov	r3, r0
 800891e:	6978      	ldr	r0, [r7, #20]
 8008920:	f003 f94c 	bl	800bbbc <USB_WritePacket>

    ep->xfer_buff  += len;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	691a      	ldr	r2, [r3, #16]
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	441a      	add	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6a1a      	ldr	r2, [r3, #32]
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	441a      	add	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	b29b      	uxth	r3, r3
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	429a      	cmp	r2, r3
 8008950:	d809      	bhi.n	8008966 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6a1a      	ldr	r2, [r3, #32]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800895a:	429a      	cmp	r2, r3
 800895c:	d203      	bcs.n	8008966 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1be      	bne.n	80088e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	699a      	ldr	r2, [r3, #24]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	429a      	cmp	r2, r3
 8008970:	d811      	bhi.n	8008996 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	f003 030f 	and.w	r3, r3, #15
 8008978:	2201      	movs	r2, #1
 800897a:	fa02 f303 	lsl.w	r3, r2, r3
 800897e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	43db      	mvns	r3, r3
 800898c:	6939      	ldr	r1, [r7, #16]
 800898e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008992:	4013      	ands	r3, r2
 8008994:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3720      	adds	r7, #32
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	333c      	adds	r3, #60	; 0x3c
 80089b8:	3304      	adds	r3, #4
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d17b      	bne.n	8008ace <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f003 0308 	and.w	r3, r3, #8
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d015      	beq.n	8008a0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	4a61      	ldr	r2, [pc, #388]	; (8008b68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	f240 80b9 	bls.w	8008b5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 80b3 	beq.w	8008b5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	015a      	lsls	r2, r3, #5
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a02:	461a      	mov	r2, r3
 8008a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a08:	6093      	str	r3, [r2, #8]
 8008a0a:	e0a7      	b.n	8008b5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f003 0320 	and.w	r3, r3, #32
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d009      	beq.n	8008a2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a22:	461a      	mov	r2, r3
 8008a24:	2320      	movs	r3, #32
 8008a26:	6093      	str	r3, [r2, #8]
 8008a28:	e098      	b.n	8008b5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f040 8093 	bne.w	8008b5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	4a4b      	ldr	r2, [pc, #300]	; (8008b68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d90f      	bls.n	8008a5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00a      	beq.n	8008a5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a54:	461a      	mov	r2, r3
 8008a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a5a:	6093      	str	r3, [r2, #8]
 8008a5c:	e07e      	b.n	8008b5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	4613      	mov	r3, r2
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	4413      	add	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	4413      	add	r3, r2
 8008a70:	3304      	adds	r3, #4
 8008a72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	69da      	ldr	r2, [r3, #28]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	0159      	lsls	r1, r3, #5
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	440b      	add	r3, r1
 8008a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a8a:	1ad2      	subs	r2, r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d114      	bne.n	8008ac0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d109      	bne.n	8008ab2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	2101      	movs	r1, #1
 8008aac:	f003 fb1c 	bl	800c0e8 <USB_EP0_OutStart>
 8008ab0:	e006      	b.n	8008ac0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	691a      	ldr	r2, [r3, #16]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	441a      	add	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f005 fde0 	bl	800e68c <HAL_PCD_DataOutStageCallback>
 8008acc:	e046      	b.n	8008b5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	4a26      	ldr	r2, [pc, #152]	; (8008b6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d124      	bne.n	8008b20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00a      	beq.n	8008af6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	015a      	lsls	r2, r3, #5
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aec:	461a      	mov	r2, r3
 8008aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008af2:	6093      	str	r3, [r2, #8]
 8008af4:	e032      	b.n	8008b5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f003 0320 	and.w	r3, r3, #32
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d008      	beq.n	8008b12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	2320      	movs	r3, #32
 8008b10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f005 fdb7 	bl	800e68c <HAL_PCD_DataOutStageCallback>
 8008b1e:	e01d      	b.n	8008b5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d114      	bne.n	8008b50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	440b      	add	r3, r1
 8008b34:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d108      	bne.n	8008b50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6818      	ldr	r0, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008b48:	461a      	mov	r2, r3
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	f003 facc 	bl	800c0e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	4619      	mov	r1, r3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f005 fd98 	bl	800e68c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3720      	adds	r7, #32
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	4f54300a 	.word	0x4f54300a
 8008b6c:	4f54310a 	.word	0x4f54310a

08008b70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	333c      	adds	r3, #60	; 0x3c
 8008b88:	3304      	adds	r3, #4
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	4a15      	ldr	r2, [pc, #84]	; (8008bf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d90e      	bls.n	8008bc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d009      	beq.n	8008bc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f005 fd4f 	bl	800e668 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4a0a      	ldr	r2, [pc, #40]	; (8008bf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d90c      	bls.n	8008bec <PCD_EP_OutSetupPacket_int+0x7c>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d108      	bne.n	8008bec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008be4:	461a      	mov	r2, r3
 8008be6:	2101      	movs	r1, #1
 8008be8:	f003 fa7e 	bl	800c0e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	4f54300a 	.word	0x4f54300a

08008bfc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70fb      	strb	r3, [r7, #3]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d107      	bne.n	8008c2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008c1a:	883b      	ldrh	r3, [r7, #0]
 8008c1c:	0419      	lsls	r1, r3, #16
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	430a      	orrs	r2, r1
 8008c26:	629a      	str	r2, [r3, #40]	; 0x28
 8008c28:	e028      	b.n	8008c7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c30:	0c1b      	lsrs	r3, r3, #16
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	4413      	add	r3, r2
 8008c36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]
 8008c3c:	e00d      	b.n	8008c5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
 8008c44:	3340      	adds	r3, #64	; 0x40
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	0c1b      	lsrs	r3, r3, #16
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	4413      	add	r3, r2
 8008c52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	3301      	adds	r3, #1
 8008c58:	73fb      	strb	r3, [r7, #15]
 8008c5a:	7bfa      	ldrb	r2, [r7, #15]
 8008c5c:	78fb      	ldrb	r3, [r7, #3]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d3ec      	bcc.n	8008c3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008c64:	883b      	ldrh	r3, [r7, #0]
 8008c66:	0418      	lsls	r0, r3, #16
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6819      	ldr	r1, [r3, #0]
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	4302      	orrs	r2, r0
 8008c74:	3340      	adds	r3, #64	; 0x40
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	440b      	add	r3, r1
 8008c7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b083      	sub	sp, #12
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	460b      	mov	r3, r1
 8008c94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	887a      	ldrh	r2, [r7, #2]
 8008c9c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e267      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d075      	beq.n	8008dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ce2:	4b88      	ldr	r3, [pc, #544]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f003 030c 	and.w	r3, r3, #12
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d00c      	beq.n	8008d08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cee:	4b85      	ldr	r3, [pc, #532]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008cf6:	2b08      	cmp	r3, #8
 8008cf8:	d112      	bne.n	8008d20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cfa:	4b82      	ldr	r3, [pc, #520]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d06:	d10b      	bne.n	8008d20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d08:	4b7e      	ldr	r3, [pc, #504]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d05b      	beq.n	8008dcc <HAL_RCC_OscConfig+0x108>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d157      	bne.n	8008dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e242      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d28:	d106      	bne.n	8008d38 <HAL_RCC_OscConfig+0x74>
 8008d2a:	4b76      	ldr	r3, [pc, #472]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a75      	ldr	r2, [pc, #468]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d34:	6013      	str	r3, [r2, #0]
 8008d36:	e01d      	b.n	8008d74 <HAL_RCC_OscConfig+0xb0>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d40:	d10c      	bne.n	8008d5c <HAL_RCC_OscConfig+0x98>
 8008d42:	4b70      	ldr	r3, [pc, #448]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a6f      	ldr	r2, [pc, #444]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	4b6d      	ldr	r3, [pc, #436]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a6c      	ldr	r2, [pc, #432]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d58:	6013      	str	r3, [r2, #0]
 8008d5a:	e00b      	b.n	8008d74 <HAL_RCC_OscConfig+0xb0>
 8008d5c:	4b69      	ldr	r3, [pc, #420]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a68      	ldr	r2, [pc, #416]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d66:	6013      	str	r3, [r2, #0]
 8008d68:	4b66      	ldr	r3, [pc, #408]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a65      	ldr	r2, [pc, #404]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d013      	beq.n	8008da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d7c:	f7fb fd02 	bl	8004784 <HAL_GetTick>
 8008d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d82:	e008      	b.n	8008d96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d84:	f7fb fcfe 	bl	8004784 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	2b64      	cmp	r3, #100	; 0x64
 8008d90:	d901      	bls.n	8008d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e207      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d96:	4b5b      	ldr	r3, [pc, #364]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0f0      	beq.n	8008d84 <HAL_RCC_OscConfig+0xc0>
 8008da2:	e014      	b.n	8008dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008da4:	f7fb fcee 	bl	8004784 <HAL_GetTick>
 8008da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008daa:	e008      	b.n	8008dbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008dac:	f7fb fcea 	bl	8004784 <HAL_GetTick>
 8008db0:	4602      	mov	r2, r0
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	2b64      	cmp	r3, #100	; 0x64
 8008db8:	d901      	bls.n	8008dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e1f3      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dbe:	4b51      	ldr	r3, [pc, #324]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1f0      	bne.n	8008dac <HAL_RCC_OscConfig+0xe8>
 8008dca:	e000      	b.n	8008dce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0302 	and.w	r3, r3, #2
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d063      	beq.n	8008ea2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008dda:	4b4a      	ldr	r3, [pc, #296]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f003 030c 	and.w	r3, r3, #12
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00b      	beq.n	8008dfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008de6:	4b47      	ldr	r3, [pc, #284]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008dee:	2b08      	cmp	r3, #8
 8008df0:	d11c      	bne.n	8008e2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008df2:	4b44      	ldr	r3, [pc, #272]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d116      	bne.n	8008e2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dfe:	4b41      	ldr	r3, [pc, #260]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d005      	beq.n	8008e16 <HAL_RCC_OscConfig+0x152>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d001      	beq.n	8008e16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e1c7      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e16:	4b3b      	ldr	r3, [pc, #236]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	00db      	lsls	r3, r3, #3
 8008e24:	4937      	ldr	r1, [pc, #220]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e2a:	e03a      	b.n	8008ea2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d020      	beq.n	8008e76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e34:	4b34      	ldr	r3, [pc, #208]	; (8008f08 <HAL_RCC_OscConfig+0x244>)
 8008e36:	2201      	movs	r2, #1
 8008e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e3a:	f7fb fca3 	bl	8004784 <HAL_GetTick>
 8008e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e40:	e008      	b.n	8008e54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e42:	f7fb fc9f 	bl	8004784 <HAL_GetTick>
 8008e46:	4602      	mov	r2, r0
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d901      	bls.n	8008e54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e1a8      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e54:	4b2b      	ldr	r3, [pc, #172]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0f0      	beq.n	8008e42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e60:	4b28      	ldr	r3, [pc, #160]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	4925      	ldr	r1, [pc, #148]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008e70:	4313      	orrs	r3, r2
 8008e72:	600b      	str	r3, [r1, #0]
 8008e74:	e015      	b.n	8008ea2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e76:	4b24      	ldr	r3, [pc, #144]	; (8008f08 <HAL_RCC_OscConfig+0x244>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e7c:	f7fb fc82 	bl	8004784 <HAL_GetTick>
 8008e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e82:	e008      	b.n	8008e96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e84:	f7fb fc7e 	bl	8004784 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d901      	bls.n	8008e96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e187      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e96:	4b1b      	ldr	r3, [pc, #108]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1f0      	bne.n	8008e84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0308 	and.w	r3, r3, #8
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d036      	beq.n	8008f1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d016      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008eb6:	4b15      	ldr	r3, [pc, #84]	; (8008f0c <HAL_RCC_OscConfig+0x248>)
 8008eb8:	2201      	movs	r2, #1
 8008eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ebc:	f7fb fc62 	bl	8004784 <HAL_GetTick>
 8008ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ec2:	e008      	b.n	8008ed6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ec4:	f7fb fc5e 	bl	8004784 <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d901      	bls.n	8008ed6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e167      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ed6:	4b0b      	ldr	r3, [pc, #44]	; (8008f04 <HAL_RCC_OscConfig+0x240>)
 8008ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0f0      	beq.n	8008ec4 <HAL_RCC_OscConfig+0x200>
 8008ee2:	e01b      	b.n	8008f1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ee4:	4b09      	ldr	r3, [pc, #36]	; (8008f0c <HAL_RCC_OscConfig+0x248>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008eea:	f7fb fc4b 	bl	8004784 <HAL_GetTick>
 8008eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ef0:	e00e      	b.n	8008f10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ef2:	f7fb fc47 	bl	8004784 <HAL_GetTick>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d907      	bls.n	8008f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008f00:	2303      	movs	r3, #3
 8008f02:	e150      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
 8008f04:	40023800 	.word	0x40023800
 8008f08:	42470000 	.word	0x42470000
 8008f0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f10:	4b88      	ldr	r3, [pc, #544]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f14:	f003 0302 	and.w	r3, r3, #2
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1ea      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0304 	and.w	r3, r3, #4
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 8097 	beq.w	8009058 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f2e:	4b81      	ldr	r3, [pc, #516]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10f      	bne.n	8008f5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60bb      	str	r3, [r7, #8]
 8008f3e:	4b7d      	ldr	r3, [pc, #500]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	4a7c      	ldr	r2, [pc, #496]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f48:	6413      	str	r3, [r2, #64]	; 0x40
 8008f4a:	4b7a      	ldr	r3, [pc, #488]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f52:	60bb      	str	r3, [r7, #8]
 8008f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f56:	2301      	movs	r3, #1
 8008f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f5a:	4b77      	ldr	r3, [pc, #476]	; (8009138 <HAL_RCC_OscConfig+0x474>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d118      	bne.n	8008f98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f66:	4b74      	ldr	r3, [pc, #464]	; (8009138 <HAL_RCC_OscConfig+0x474>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a73      	ldr	r2, [pc, #460]	; (8009138 <HAL_RCC_OscConfig+0x474>)
 8008f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f72:	f7fb fc07 	bl	8004784 <HAL_GetTick>
 8008f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f78:	e008      	b.n	8008f8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f7a:	f7fb fc03 	bl	8004784 <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d901      	bls.n	8008f8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e10c      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f8c:	4b6a      	ldr	r3, [pc, #424]	; (8009138 <HAL_RCC_OscConfig+0x474>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d0f0      	beq.n	8008f7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d106      	bne.n	8008fae <HAL_RCC_OscConfig+0x2ea>
 8008fa0:	4b64      	ldr	r3, [pc, #400]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa4:	4a63      	ldr	r2, [pc, #396]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008fa6:	f043 0301 	orr.w	r3, r3, #1
 8008faa:	6713      	str	r3, [r2, #112]	; 0x70
 8008fac:	e01c      	b.n	8008fe8 <HAL_RCC_OscConfig+0x324>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	2b05      	cmp	r3, #5
 8008fb4:	d10c      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x30c>
 8008fb6:	4b5f      	ldr	r3, [pc, #380]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fba:	4a5e      	ldr	r2, [pc, #376]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008fbc:	f043 0304 	orr.w	r3, r3, #4
 8008fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8008fc2:	4b5c      	ldr	r3, [pc, #368]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc6:	4a5b      	ldr	r2, [pc, #364]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008fc8:	f043 0301 	orr.w	r3, r3, #1
 8008fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8008fce:	e00b      	b.n	8008fe8 <HAL_RCC_OscConfig+0x324>
 8008fd0:	4b58      	ldr	r3, [pc, #352]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd4:	4a57      	ldr	r2, [pc, #348]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008fd6:	f023 0301 	bic.w	r3, r3, #1
 8008fda:	6713      	str	r3, [r2, #112]	; 0x70
 8008fdc:	4b55      	ldr	r3, [pc, #340]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe0:	4a54      	ldr	r2, [pc, #336]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8008fe2:	f023 0304 	bic.w	r3, r3, #4
 8008fe6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d015      	beq.n	800901c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ff0:	f7fb fbc8 	bl	8004784 <HAL_GetTick>
 8008ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ff6:	e00a      	b.n	800900e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ff8:	f7fb fbc4 	bl	8004784 <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	f241 3288 	movw	r2, #5000	; 0x1388
 8009006:	4293      	cmp	r3, r2
 8009008:	d901      	bls.n	800900e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e0cb      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800900e:	4b49      	ldr	r3, [pc, #292]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8009010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0ee      	beq.n	8008ff8 <HAL_RCC_OscConfig+0x334>
 800901a:	e014      	b.n	8009046 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800901c:	f7fb fbb2 	bl	8004784 <HAL_GetTick>
 8009020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009022:	e00a      	b.n	800903a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009024:	f7fb fbae 	bl	8004784 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009032:	4293      	cmp	r3, r2
 8009034:	d901      	bls.n	800903a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e0b5      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800903a:	4b3e      	ldr	r3, [pc, #248]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 800903c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1ee      	bne.n	8009024 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009046:	7dfb      	ldrb	r3, [r7, #23]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d105      	bne.n	8009058 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800904c:	4b39      	ldr	r3, [pc, #228]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 800904e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009050:	4a38      	ldr	r2, [pc, #224]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8009052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009056:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 80a1 	beq.w	80091a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009062:	4b34      	ldr	r3, [pc, #208]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f003 030c 	and.w	r3, r3, #12
 800906a:	2b08      	cmp	r3, #8
 800906c:	d05c      	beq.n	8009128 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	2b02      	cmp	r3, #2
 8009074:	d141      	bne.n	80090fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009076:	4b31      	ldr	r3, [pc, #196]	; (800913c <HAL_RCC_OscConfig+0x478>)
 8009078:	2200      	movs	r2, #0
 800907a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800907c:	f7fb fb82 	bl	8004784 <HAL_GetTick>
 8009080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009082:	e008      	b.n	8009096 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009084:	f7fb fb7e 	bl	8004784 <HAL_GetTick>
 8009088:	4602      	mov	r2, r0
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	2b02      	cmp	r3, #2
 8009090:	d901      	bls.n	8009096 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e087      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009096:	4b27      	ldr	r3, [pc, #156]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1f0      	bne.n	8009084 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	69da      	ldr	r2, [r3, #28]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	431a      	orrs	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b0:	019b      	lsls	r3, r3, #6
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b8:	085b      	lsrs	r3, r3, #1
 80090ba:	3b01      	subs	r3, #1
 80090bc:	041b      	lsls	r3, r3, #16
 80090be:	431a      	orrs	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	061b      	lsls	r3, r3, #24
 80090c6:	491b      	ldr	r1, [pc, #108]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 80090c8:	4313      	orrs	r3, r2
 80090ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090cc:	4b1b      	ldr	r3, [pc, #108]	; (800913c <HAL_RCC_OscConfig+0x478>)
 80090ce:	2201      	movs	r2, #1
 80090d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090d2:	f7fb fb57 	bl	8004784 <HAL_GetTick>
 80090d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090d8:	e008      	b.n	80090ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090da:	f7fb fb53 	bl	8004784 <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d901      	bls.n	80090ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e05c      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090ec:	4b11      	ldr	r3, [pc, #68]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d0f0      	beq.n	80090da <HAL_RCC_OscConfig+0x416>
 80090f8:	e054      	b.n	80091a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090fa:	4b10      	ldr	r3, [pc, #64]	; (800913c <HAL_RCC_OscConfig+0x478>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009100:	f7fb fb40 	bl	8004784 <HAL_GetTick>
 8009104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009106:	e008      	b.n	800911a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009108:	f7fb fb3c 	bl	8004784 <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	2b02      	cmp	r3, #2
 8009114:	d901      	bls.n	800911a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e045      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800911a:	4b06      	ldr	r3, [pc, #24]	; (8009134 <HAL_RCC_OscConfig+0x470>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1f0      	bne.n	8009108 <HAL_RCC_OscConfig+0x444>
 8009126:	e03d      	b.n	80091a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d107      	bne.n	8009140 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e038      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
 8009134:	40023800 	.word	0x40023800
 8009138:	40007000 	.word	0x40007000
 800913c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009140:	4b1b      	ldr	r3, [pc, #108]	; (80091b0 <HAL_RCC_OscConfig+0x4ec>)
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d028      	beq.n	80091a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009158:	429a      	cmp	r2, r3
 800915a:	d121      	bne.n	80091a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009166:	429a      	cmp	r2, r3
 8009168:	d11a      	bne.n	80091a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009170:	4013      	ands	r3, r2
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009178:	4293      	cmp	r3, r2
 800917a:	d111      	bne.n	80091a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009186:	085b      	lsrs	r3, r3, #1
 8009188:	3b01      	subs	r3, #1
 800918a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800918c:	429a      	cmp	r2, r3
 800918e:	d107      	bne.n	80091a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800919c:	429a      	cmp	r2, r3
 800919e:	d001      	beq.n	80091a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	e000      	b.n	80091a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	40023800 	.word	0x40023800

080091b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d101      	bne.n	80091c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e0cc      	b.n	8009362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80091c8:	4b68      	ldr	r3, [pc, #416]	; (800936c <HAL_RCC_ClockConfig+0x1b8>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 030f 	and.w	r3, r3, #15
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d90c      	bls.n	80091f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091d6:	4b65      	ldr	r3, [pc, #404]	; (800936c <HAL_RCC_ClockConfig+0x1b8>)
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	b2d2      	uxtb	r2, r2
 80091dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091de:	4b63      	ldr	r3, [pc, #396]	; (800936c <HAL_RCC_ClockConfig+0x1b8>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 030f 	and.w	r3, r3, #15
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d001      	beq.n	80091f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e0b8      	b.n	8009362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d020      	beq.n	800923e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0304 	and.w	r3, r3, #4
 8009204:	2b00      	cmp	r3, #0
 8009206:	d005      	beq.n	8009214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009208:	4b59      	ldr	r3, [pc, #356]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	4a58      	ldr	r2, [pc, #352]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 800920e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009212:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0308 	and.w	r3, r3, #8
 800921c:	2b00      	cmp	r3, #0
 800921e:	d005      	beq.n	800922c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009220:	4b53      	ldr	r3, [pc, #332]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	4a52      	ldr	r2, [pc, #328]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 8009226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800922a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800922c:	4b50      	ldr	r3, [pc, #320]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	494d      	ldr	r1, [pc, #308]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 800923a:	4313      	orrs	r3, r2
 800923c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	2b00      	cmp	r3, #0
 8009248:	d044      	beq.n	80092d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d107      	bne.n	8009262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009252:	4b47      	ldr	r3, [pc, #284]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800925a:	2b00      	cmp	r3, #0
 800925c:	d119      	bne.n	8009292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e07f      	b.n	8009362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	2b02      	cmp	r3, #2
 8009268:	d003      	beq.n	8009272 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800926e:	2b03      	cmp	r3, #3
 8009270:	d107      	bne.n	8009282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009272:	4b3f      	ldr	r3, [pc, #252]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d109      	bne.n	8009292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e06f      	b.n	8009362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009282:	4b3b      	ldr	r3, [pc, #236]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e067      	b.n	8009362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009292:	4b37      	ldr	r3, [pc, #220]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	f023 0203 	bic.w	r2, r3, #3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	4934      	ldr	r1, [pc, #208]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 80092a0:	4313      	orrs	r3, r2
 80092a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80092a4:	f7fb fa6e 	bl	8004784 <HAL_GetTick>
 80092a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092aa:	e00a      	b.n	80092c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092ac:	f7fb fa6a 	bl	8004784 <HAL_GetTick>
 80092b0:	4602      	mov	r2, r0
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d901      	bls.n	80092c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e04f      	b.n	8009362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092c2:	4b2b      	ldr	r3, [pc, #172]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f003 020c 	and.w	r2, r3, #12
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d1eb      	bne.n	80092ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80092d4:	4b25      	ldr	r3, [pc, #148]	; (800936c <HAL_RCC_ClockConfig+0x1b8>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 030f 	and.w	r3, r3, #15
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d20c      	bcs.n	80092fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092e2:	4b22      	ldr	r3, [pc, #136]	; (800936c <HAL_RCC_ClockConfig+0x1b8>)
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	b2d2      	uxtb	r2, r2
 80092e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092ea:	4b20      	ldr	r3, [pc, #128]	; (800936c <HAL_RCC_ClockConfig+0x1b8>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 030f 	and.w	r3, r3, #15
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d001      	beq.n	80092fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e032      	b.n	8009362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b00      	cmp	r3, #0
 8009306:	d008      	beq.n	800931a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009308:	4b19      	ldr	r3, [pc, #100]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	4916      	ldr	r1, [pc, #88]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 8009316:	4313      	orrs	r3, r2
 8009318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 0308 	and.w	r3, r3, #8
 8009322:	2b00      	cmp	r3, #0
 8009324:	d009      	beq.n	800933a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009326:	4b12      	ldr	r3, [pc, #72]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	00db      	lsls	r3, r3, #3
 8009334:	490e      	ldr	r1, [pc, #56]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 8009336:	4313      	orrs	r3, r2
 8009338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800933a:	f000 f821 	bl	8009380 <HAL_RCC_GetSysClockFreq>
 800933e:	4602      	mov	r2, r0
 8009340:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <HAL_RCC_ClockConfig+0x1bc>)
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	091b      	lsrs	r3, r3, #4
 8009346:	f003 030f 	and.w	r3, r3, #15
 800934a:	490a      	ldr	r1, [pc, #40]	; (8009374 <HAL_RCC_ClockConfig+0x1c0>)
 800934c:	5ccb      	ldrb	r3, [r1, r3]
 800934e:	fa22 f303 	lsr.w	r3, r2, r3
 8009352:	4a09      	ldr	r2, [pc, #36]	; (8009378 <HAL_RCC_ClockConfig+0x1c4>)
 8009354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009356:	4b09      	ldr	r3, [pc, #36]	; (800937c <HAL_RCC_ClockConfig+0x1c8>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4618      	mov	r0, r3
 800935c:	f7fb f9ce 	bl	80046fc <HAL_InitTick>

  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	40023c00 	.word	0x40023c00
 8009370:	40023800 	.word	0x40023800
 8009374:	08014e24 	.word	0x08014e24
 8009378:	20000014 	.word	0x20000014
 800937c:	20000018 	.word	0x20000018

08009380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009384:	b094      	sub	sp, #80	; 0x50
 8009386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009388:	2300      	movs	r3, #0
 800938a:	647b      	str	r3, [r7, #68]	; 0x44
 800938c:	2300      	movs	r3, #0
 800938e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009390:	2300      	movs	r3, #0
 8009392:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009394:	2300      	movs	r3, #0
 8009396:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009398:	4b79      	ldr	r3, [pc, #484]	; (8009580 <HAL_RCC_GetSysClockFreq+0x200>)
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	f003 030c 	and.w	r3, r3, #12
 80093a0:	2b08      	cmp	r3, #8
 80093a2:	d00d      	beq.n	80093c0 <HAL_RCC_GetSysClockFreq+0x40>
 80093a4:	2b08      	cmp	r3, #8
 80093a6:	f200 80e1 	bhi.w	800956c <HAL_RCC_GetSysClockFreq+0x1ec>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <HAL_RCC_GetSysClockFreq+0x34>
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	d003      	beq.n	80093ba <HAL_RCC_GetSysClockFreq+0x3a>
 80093b2:	e0db      	b.n	800956c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80093b4:	4b73      	ldr	r3, [pc, #460]	; (8009584 <HAL_RCC_GetSysClockFreq+0x204>)
 80093b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80093b8:	e0db      	b.n	8009572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80093ba:	4b73      	ldr	r3, [pc, #460]	; (8009588 <HAL_RCC_GetSysClockFreq+0x208>)
 80093bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80093be:	e0d8      	b.n	8009572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80093c0:	4b6f      	ldr	r3, [pc, #444]	; (8009580 <HAL_RCC_GetSysClockFreq+0x200>)
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80093ca:	4b6d      	ldr	r3, [pc, #436]	; (8009580 <HAL_RCC_GetSysClockFreq+0x200>)
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d063      	beq.n	800949e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093d6:	4b6a      	ldr	r3, [pc, #424]	; (8009580 <HAL_RCC_GetSysClockFreq+0x200>)
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	099b      	lsrs	r3, r3, #6
 80093dc:	2200      	movs	r2, #0
 80093de:	63bb      	str	r3, [r7, #56]	; 0x38
 80093e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80093e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e8:	633b      	str	r3, [r7, #48]	; 0x30
 80093ea:	2300      	movs	r3, #0
 80093ec:	637b      	str	r3, [r7, #52]	; 0x34
 80093ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80093f2:	4622      	mov	r2, r4
 80093f4:	462b      	mov	r3, r5
 80093f6:	f04f 0000 	mov.w	r0, #0
 80093fa:	f04f 0100 	mov.w	r1, #0
 80093fe:	0159      	lsls	r1, r3, #5
 8009400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009404:	0150      	lsls	r0, r2, #5
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	4621      	mov	r1, r4
 800940c:	1a51      	subs	r1, r2, r1
 800940e:	6139      	str	r1, [r7, #16]
 8009410:	4629      	mov	r1, r5
 8009412:	eb63 0301 	sbc.w	r3, r3, r1
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	f04f 0200 	mov.w	r2, #0
 800941c:	f04f 0300 	mov.w	r3, #0
 8009420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009424:	4659      	mov	r1, fp
 8009426:	018b      	lsls	r3, r1, #6
 8009428:	4651      	mov	r1, sl
 800942a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800942e:	4651      	mov	r1, sl
 8009430:	018a      	lsls	r2, r1, #6
 8009432:	4651      	mov	r1, sl
 8009434:	ebb2 0801 	subs.w	r8, r2, r1
 8009438:	4659      	mov	r1, fp
 800943a:	eb63 0901 	sbc.w	r9, r3, r1
 800943e:	f04f 0200 	mov.w	r2, #0
 8009442:	f04f 0300 	mov.w	r3, #0
 8009446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800944a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800944e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009452:	4690      	mov	r8, r2
 8009454:	4699      	mov	r9, r3
 8009456:	4623      	mov	r3, r4
 8009458:	eb18 0303 	adds.w	r3, r8, r3
 800945c:	60bb      	str	r3, [r7, #8]
 800945e:	462b      	mov	r3, r5
 8009460:	eb49 0303 	adc.w	r3, r9, r3
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	f04f 0200 	mov.w	r2, #0
 800946a:	f04f 0300 	mov.w	r3, #0
 800946e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009472:	4629      	mov	r1, r5
 8009474:	024b      	lsls	r3, r1, #9
 8009476:	4621      	mov	r1, r4
 8009478:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800947c:	4621      	mov	r1, r4
 800947e:	024a      	lsls	r2, r1, #9
 8009480:	4610      	mov	r0, r2
 8009482:	4619      	mov	r1, r3
 8009484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009486:	2200      	movs	r2, #0
 8009488:	62bb      	str	r3, [r7, #40]	; 0x28
 800948a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800948c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009490:	f7f7 fc1a 	bl	8000cc8 <__aeabi_uldivmod>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4613      	mov	r3, r2
 800949a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800949c:	e058      	b.n	8009550 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800949e:	4b38      	ldr	r3, [pc, #224]	; (8009580 <HAL_RCC_GetSysClockFreq+0x200>)
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	099b      	lsrs	r3, r3, #6
 80094a4:	2200      	movs	r2, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	4611      	mov	r1, r2
 80094aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80094ae:	623b      	str	r3, [r7, #32]
 80094b0:	2300      	movs	r3, #0
 80094b2:	627b      	str	r3, [r7, #36]	; 0x24
 80094b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80094b8:	4642      	mov	r2, r8
 80094ba:	464b      	mov	r3, r9
 80094bc:	f04f 0000 	mov.w	r0, #0
 80094c0:	f04f 0100 	mov.w	r1, #0
 80094c4:	0159      	lsls	r1, r3, #5
 80094c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80094ca:	0150      	lsls	r0, r2, #5
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	4641      	mov	r1, r8
 80094d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80094d6:	4649      	mov	r1, r9
 80094d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80094dc:	f04f 0200 	mov.w	r2, #0
 80094e0:	f04f 0300 	mov.w	r3, #0
 80094e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80094e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80094ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80094f0:	ebb2 040a 	subs.w	r4, r2, sl
 80094f4:	eb63 050b 	sbc.w	r5, r3, fp
 80094f8:	f04f 0200 	mov.w	r2, #0
 80094fc:	f04f 0300 	mov.w	r3, #0
 8009500:	00eb      	lsls	r3, r5, #3
 8009502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009506:	00e2      	lsls	r2, r4, #3
 8009508:	4614      	mov	r4, r2
 800950a:	461d      	mov	r5, r3
 800950c:	4643      	mov	r3, r8
 800950e:	18e3      	adds	r3, r4, r3
 8009510:	603b      	str	r3, [r7, #0]
 8009512:	464b      	mov	r3, r9
 8009514:	eb45 0303 	adc.w	r3, r5, r3
 8009518:	607b      	str	r3, [r7, #4]
 800951a:	f04f 0200 	mov.w	r2, #0
 800951e:	f04f 0300 	mov.w	r3, #0
 8009522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009526:	4629      	mov	r1, r5
 8009528:	028b      	lsls	r3, r1, #10
 800952a:	4621      	mov	r1, r4
 800952c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009530:	4621      	mov	r1, r4
 8009532:	028a      	lsls	r2, r1, #10
 8009534:	4610      	mov	r0, r2
 8009536:	4619      	mov	r1, r3
 8009538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800953a:	2200      	movs	r2, #0
 800953c:	61bb      	str	r3, [r7, #24]
 800953e:	61fa      	str	r2, [r7, #28]
 8009540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009544:	f7f7 fbc0 	bl	8000cc8 <__aeabi_uldivmod>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	4613      	mov	r3, r2
 800954e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009550:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <HAL_RCC_GetSysClockFreq+0x200>)
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	0c1b      	lsrs	r3, r3, #16
 8009556:	f003 0303 	and.w	r3, r3, #3
 800955a:	3301      	adds	r3, #1
 800955c:	005b      	lsls	r3, r3, #1
 800955e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009560:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009564:	fbb2 f3f3 	udiv	r3, r2, r3
 8009568:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800956a:	e002      	b.n	8009572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800956c:	4b05      	ldr	r3, [pc, #20]	; (8009584 <HAL_RCC_GetSysClockFreq+0x204>)
 800956e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009574:	4618      	mov	r0, r3
 8009576:	3750      	adds	r7, #80	; 0x50
 8009578:	46bd      	mov	sp, r7
 800957a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800957e:	bf00      	nop
 8009580:	40023800 	.word	0x40023800
 8009584:	00f42400 	.word	0x00f42400
 8009588:	007a1200 	.word	0x007a1200

0800958c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800958c:	b480      	push	{r7}
 800958e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009590:	4b03      	ldr	r3, [pc, #12]	; (80095a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009592:	681b      	ldr	r3, [r3, #0]
}
 8009594:	4618      	mov	r0, r3
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	20000014 	.word	0x20000014

080095a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80095a8:	f7ff fff0 	bl	800958c <HAL_RCC_GetHCLKFreq>
 80095ac:	4602      	mov	r2, r0
 80095ae:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	0a9b      	lsrs	r3, r3, #10
 80095b4:	f003 0307 	and.w	r3, r3, #7
 80095b8:	4903      	ldr	r1, [pc, #12]	; (80095c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095ba:	5ccb      	ldrb	r3, [r1, r3]
 80095bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	40023800 	.word	0x40023800
 80095c8:	08014e34 	.word	0x08014e34

080095cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e07b      	b.n	80096d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d108      	bne.n	80095f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095ee:	d009      	beq.n	8009604 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	61da      	str	r2, [r3, #28]
 80095f6:	e005      	b.n	8009604 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	d106      	bne.n	8009624 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7fa fcf4 	bl	800400c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2202      	movs	r2, #2
 8009628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800963a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800964c:	431a      	orrs	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009656:	431a      	orrs	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	431a      	orrs	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	f003 0301 	and.w	r3, r3, #1
 800966a:	431a      	orrs	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009674:	431a      	orrs	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800967e:	431a      	orrs	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a1b      	ldr	r3, [r3, #32]
 8009684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009688:	ea42 0103 	orr.w	r1, r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009690:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	430a      	orrs	r2, r1
 800969a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	0c1b      	lsrs	r3, r3, #16
 80096a2:	f003 0104 	and.w	r1, r3, #4
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096aa:	f003 0210 	and.w	r2, r3, #16
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	69da      	ldr	r2, [r3, #28]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b088      	sub	sp, #32
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	60b9      	str	r1, [r7, #8]
 80096e8:	603b      	str	r3, [r7, #0]
 80096ea:	4613      	mov	r3, r2
 80096ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d101      	bne.n	8009700 <HAL_SPI_Transmit+0x22>
 80096fc:	2302      	movs	r3, #2
 80096fe:	e126      	b.n	800994e <HAL_SPI_Transmit+0x270>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009708:	f7fb f83c 	bl	8004784 <HAL_GetTick>
 800970c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800970e:	88fb      	ldrh	r3, [r7, #6]
 8009710:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b01      	cmp	r3, #1
 800971c:	d002      	beq.n	8009724 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800971e:	2302      	movs	r3, #2
 8009720:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009722:	e10b      	b.n	800993c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <HAL_SPI_Transmit+0x52>
 800972a:	88fb      	ldrh	r3, [r7, #6]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d102      	bne.n	8009736 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009734:	e102      	b.n	800993c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2203      	movs	r2, #3
 800973a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	88fa      	ldrh	r2, [r7, #6]
 800974e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	88fa      	ldrh	r2, [r7, #6]
 8009754:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800977c:	d10f      	bne.n	800979e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800978c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800979c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a8:	2b40      	cmp	r3, #64	; 0x40
 80097aa:	d007      	beq.n	80097bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097c4:	d14b      	bne.n	800985e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d002      	beq.n	80097d4 <HAL_SPI_Transmit+0xf6>
 80097ce:	8afb      	ldrh	r3, [r7, #22]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d13e      	bne.n	8009852 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d8:	881a      	ldrh	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e4:	1c9a      	adds	r2, r3, #2
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	3b01      	subs	r3, #1
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80097f8:	e02b      	b.n	8009852 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f003 0302 	and.w	r3, r3, #2
 8009804:	2b02      	cmp	r3, #2
 8009806:	d112      	bne.n	800982e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980c:	881a      	ldrh	r2, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009818:	1c9a      	adds	r2, r3, #2
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009822:	b29b      	uxth	r3, r3
 8009824:	3b01      	subs	r3, #1
 8009826:	b29a      	uxth	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	86da      	strh	r2, [r3, #54]	; 0x36
 800982c:	e011      	b.n	8009852 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800982e:	f7fa ffa9 	bl	8004784 <HAL_GetTick>
 8009832:	4602      	mov	r2, r0
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	429a      	cmp	r2, r3
 800983c:	d803      	bhi.n	8009846 <HAL_SPI_Transmit+0x168>
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009844:	d102      	bne.n	800984c <HAL_SPI_Transmit+0x16e>
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d102      	bne.n	8009852 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009850:	e074      	b.n	800993c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009856:	b29b      	uxth	r3, r3
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1ce      	bne.n	80097fa <HAL_SPI_Transmit+0x11c>
 800985c:	e04c      	b.n	80098f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <HAL_SPI_Transmit+0x18e>
 8009866:	8afb      	ldrh	r3, [r7, #22]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d140      	bne.n	80098ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	330c      	adds	r3, #12
 8009876:	7812      	ldrb	r2, [r2, #0]
 8009878:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987e:	1c5a      	adds	r2, r3, #1
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009888:	b29b      	uxth	r3, r3
 800988a:	3b01      	subs	r3, #1
 800988c:	b29a      	uxth	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009892:	e02c      	b.n	80098ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	f003 0302 	and.w	r3, r3, #2
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d113      	bne.n	80098ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	330c      	adds	r3, #12
 80098ac:	7812      	ldrb	r2, [r2, #0]
 80098ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b4:	1c5a      	adds	r2, r3, #1
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098be:	b29b      	uxth	r3, r3
 80098c0:	3b01      	subs	r3, #1
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80098c8:	e011      	b.n	80098ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098ca:	f7fa ff5b 	bl	8004784 <HAL_GetTick>
 80098ce:	4602      	mov	r2, r0
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d803      	bhi.n	80098e2 <HAL_SPI_Transmit+0x204>
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e0:	d102      	bne.n	80098e8 <HAL_SPI_Transmit+0x20a>
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d102      	bne.n	80098ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80098ec:	e026      	b.n	800993c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1cd      	bne.n	8009894 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 fb73 	bl	8009fe8 <SPI_EndRxTxTransaction>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d002      	beq.n	800990e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2220      	movs	r2, #32
 800990c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10a      	bne.n	800992c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009916:	2300      	movs	r3, #0
 8009918:	613b      	str	r3, [r7, #16]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	613b      	str	r3, [r7, #16]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	613b      	str	r3, [r7, #16]
 800992a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	77fb      	strb	r3, [r7, #31]
 8009938:	e000      	b.n	800993c <HAL_SPI_Transmit+0x25e>
  }

error:
 800993a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800994c:	7ffb      	ldrb	r3, [r7, #31]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3720      	adds	r7, #32
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b08c      	sub	sp, #48	; 0x30
 800995a:	af00      	add	r7, sp, #0
 800995c:	60f8      	str	r0, [r7, #12]
 800995e:	60b9      	str	r1, [r7, #8]
 8009960:	607a      	str	r2, [r7, #4]
 8009962:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009964:	2301      	movs	r3, #1
 8009966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009968:	2300      	movs	r3, #0
 800996a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009974:	2b01      	cmp	r3, #1
 8009976:	d101      	bne.n	800997c <HAL_SPI_TransmitReceive+0x26>
 8009978:	2302      	movs	r3, #2
 800997a:	e18a      	b.n	8009c92 <HAL_SPI_TransmitReceive+0x33c>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009984:	f7fa fefe 	bl	8004784 <HAL_GetTick>
 8009988:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800999a:	887b      	ldrh	r3, [r7, #2]
 800999c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800999e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d00f      	beq.n	80099c6 <HAL_SPI_TransmitReceive+0x70>
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099ac:	d107      	bne.n	80099be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d103      	bne.n	80099be <HAL_SPI_TransmitReceive+0x68>
 80099b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099ba:	2b04      	cmp	r3, #4
 80099bc:	d003      	beq.n	80099c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80099be:	2302      	movs	r3, #2
 80099c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80099c4:	e15b      	b.n	8009c7e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d005      	beq.n	80099d8 <HAL_SPI_TransmitReceive+0x82>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <HAL_SPI_TransmitReceive+0x82>
 80099d2:	887b      	ldrh	r3, [r7, #2]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d103      	bne.n	80099e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80099de:	e14e      	b.n	8009c7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b04      	cmp	r3, #4
 80099ea:	d003      	beq.n	80099f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2205      	movs	r2, #5
 80099f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	887a      	ldrh	r2, [r7, #2]
 8009a04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	887a      	ldrh	r2, [r7, #2]
 8009a0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	887a      	ldrh	r2, [r7, #2]
 8009a16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	887a      	ldrh	r2, [r7, #2]
 8009a1c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a34:	2b40      	cmp	r3, #64	; 0x40
 8009a36:	d007      	beq.n	8009a48 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a50:	d178      	bne.n	8009b44 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <HAL_SPI_TransmitReceive+0x10a>
 8009a5a:	8b7b      	ldrh	r3, [r7, #26]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d166      	bne.n	8009b2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a64:	881a      	ldrh	r2, [r3, #0]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a70:	1c9a      	adds	r2, r3, #2
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a84:	e053      	b.n	8009b2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f003 0302 	and.w	r3, r3, #2
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d11b      	bne.n	8009acc <HAL_SPI_TransmitReceive+0x176>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d016      	beq.n	8009acc <HAL_SPI_TransmitReceive+0x176>
 8009a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d113      	bne.n	8009acc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa8:	881a      	ldrh	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab4:	1c9a      	adds	r2, r3, #2
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d119      	bne.n	8009b0e <HAL_SPI_TransmitReceive+0x1b8>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d014      	beq.n	8009b0e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68da      	ldr	r2, [r3, #12]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aee:	b292      	uxth	r2, r2
 8009af0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af6:	1c9a      	adds	r2, r3, #2
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	3b01      	subs	r3, #1
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b0e:	f7fa fe39 	bl	8004784 <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d807      	bhi.n	8009b2e <HAL_SPI_TransmitReceive+0x1d8>
 8009b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b24:	d003      	beq.n	8009b2e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009b2c:	e0a7      	b.n	8009c7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1a6      	bne.n	8009a86 <HAL_SPI_TransmitReceive+0x130>
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1a1      	bne.n	8009a86 <HAL_SPI_TransmitReceive+0x130>
 8009b42:	e07c      	b.n	8009c3e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <HAL_SPI_TransmitReceive+0x1fc>
 8009b4c:	8b7b      	ldrh	r3, [r7, #26]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d16b      	bne.n	8009c2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	330c      	adds	r3, #12
 8009b5c:	7812      	ldrb	r2, [r2, #0]
 8009b5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	3b01      	subs	r3, #1
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b78:	e057      	b.n	8009c2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f003 0302 	and.w	r3, r3, #2
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d11c      	bne.n	8009bc2 <HAL_SPI_TransmitReceive+0x26c>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d017      	beq.n	8009bc2 <HAL_SPI_TransmitReceive+0x26c>
 8009b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d114      	bne.n	8009bc2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	330c      	adds	r3, #12
 8009ba2:	7812      	ldrb	r2, [r2, #0]
 8009ba4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d119      	bne.n	8009c04 <HAL_SPI_TransmitReceive+0x2ae>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d014      	beq.n	8009c04 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68da      	ldr	r2, [r3, #12]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be4:	b2d2      	uxtb	r2, r2
 8009be6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bec:	1c5a      	adds	r2, r3, #1
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c00:	2301      	movs	r3, #1
 8009c02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c04:	f7fa fdbe 	bl	8004784 <HAL_GetTick>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d803      	bhi.n	8009c1c <HAL_SPI_TransmitReceive+0x2c6>
 8009c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c1a:	d102      	bne.n	8009c22 <HAL_SPI_TransmitReceive+0x2cc>
 8009c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d103      	bne.n	8009c2a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009c28:	e029      	b.n	8009c7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1a2      	bne.n	8009b7a <HAL_SPI_TransmitReceive+0x224>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d19d      	bne.n	8009b7a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f000 f9d0 	bl	8009fe8 <SPI_EndRxTxTransaction>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d006      	beq.n	8009c5c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2220      	movs	r2, #32
 8009c58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009c5a:	e010      	b.n	8009c7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10b      	bne.n	8009c7c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c64:	2300      	movs	r3, #0
 8009c66:	617b      	str	r3, [r7, #20]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	617b      	str	r3, [r7, #20]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	617b      	str	r3, [r7, #20]
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	e000      	b.n	8009c7e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009c7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3730      	adds	r7, #48	; 0x30
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b088      	sub	sp, #32
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	099b      	lsrs	r3, r3, #6
 8009cb8:	f003 0301 	and.w	r3, r3, #1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10f      	bne.n	8009ce0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00a      	beq.n	8009ce0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	099b      	lsrs	r3, r3, #6
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d004      	beq.n	8009ce0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	4798      	blx	r3
    return;
 8009cde:	e0d7      	b.n	8009e90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	085b      	lsrs	r3, r3, #1
 8009ce4:	f003 0301 	and.w	r3, r3, #1
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00a      	beq.n	8009d02 <HAL_SPI_IRQHandler+0x66>
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	09db      	lsrs	r3, r3, #7
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d004      	beq.n	8009d02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	4798      	blx	r3
    return;
 8009d00:	e0c6      	b.n	8009e90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	095b      	lsrs	r3, r3, #5
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10c      	bne.n	8009d28 <HAL_SPI_IRQHandler+0x8c>
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	099b      	lsrs	r3, r3, #6
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d106      	bne.n	8009d28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	0a1b      	lsrs	r3, r3, #8
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f000 80b4 	beq.w	8009e90 <HAL_SPI_IRQHandler+0x1f4>
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	095b      	lsrs	r3, r3, #5
 8009d2c:	f003 0301 	and.w	r3, r3, #1
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f000 80ad 	beq.w	8009e90 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	099b      	lsrs	r3, r3, #6
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d023      	beq.n	8009d8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d011      	beq.n	8009d72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d52:	f043 0204 	orr.w	r2, r3, #4
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	617b      	str	r3, [r7, #20]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	617b      	str	r3, [r7, #20]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	617b      	str	r3, [r7, #20]
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	e00b      	b.n	8009d8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d72:	2300      	movs	r3, #0
 8009d74:	613b      	str	r3, [r7, #16]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	613b      	str	r3, [r7, #16]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	613b      	str	r3, [r7, #16]
 8009d86:	693b      	ldr	r3, [r7, #16]
        return;
 8009d88:	e082      	b.n	8009e90 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	095b      	lsrs	r3, r3, #5
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d014      	beq.n	8009dc0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d9a:	f043 0201 	orr.w	r2, r3, #1
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009da2:	2300      	movs	r3, #0
 8009da4:	60fb      	str	r3, [r7, #12]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	60fb      	str	r3, [r7, #12]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dbc:	601a      	str	r2, [r3, #0]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	0a1b      	lsrs	r3, r3, #8
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00c      	beq.n	8009de6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd0:	f043 0208 	orr.w	r2, r3, #8
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60bb      	str	r3, [r7, #8]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	60bb      	str	r3, [r7, #8]
 8009de4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d04f      	beq.n	8009e8e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009dfc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	f003 0302 	and.w	r3, r3, #2
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d104      	bne.n	8009e1a <HAL_SPI_IRQHandler+0x17e>
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	f003 0301 	and.w	r3, r3, #1
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d034      	beq.n	8009e84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	685a      	ldr	r2, [r3, #4]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f022 0203 	bic.w	r2, r2, #3
 8009e28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d011      	beq.n	8009e56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e36:	4a18      	ldr	r2, [pc, #96]	; (8009e98 <HAL_SPI_IRQHandler+0x1fc>)
 8009e38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fa fde1 	bl	8004a06 <HAL_DMA_Abort_IT>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d005      	beq.n	8009e56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d016      	beq.n	8009e8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e62:	4a0d      	ldr	r2, [pc, #52]	; (8009e98 <HAL_SPI_IRQHandler+0x1fc>)
 8009e64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fa fdcb 	bl	8004a06 <HAL_DMA_Abort_IT>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00a      	beq.n	8009e8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009e82:	e003      	b.n	8009e8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f809 	bl	8009e9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009e8a:	e000      	b.n	8009e8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009e8c:	bf00      	nop
    return;
 8009e8e:	bf00      	nop
  }
}
 8009e90:	3720      	adds	r7, #32
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	08009eb1 	.word	0x08009eb1

08009e9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ebc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f7ff ffe6 	bl	8009e9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ed0:	bf00      	nop
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	603b      	str	r3, [r7, #0]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009ee8:	f7fa fc4c 	bl	8004784 <HAL_GetTick>
 8009eec:	4602      	mov	r2, r0
 8009eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef0:	1a9b      	subs	r3, r3, r2
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009ef8:	f7fa fc44 	bl	8004784 <HAL_GetTick>
 8009efc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009efe:	4b39      	ldr	r3, [pc, #228]	; (8009fe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	015b      	lsls	r3, r3, #5
 8009f04:	0d1b      	lsrs	r3, r3, #20
 8009f06:	69fa      	ldr	r2, [r7, #28]
 8009f08:	fb02 f303 	mul.w	r3, r2, r3
 8009f0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f0e:	e054      	b.n	8009fba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f16:	d050      	beq.n	8009fba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f18:	f7fa fc34 	bl	8004784 <HAL_GetTick>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	69fa      	ldr	r2, [r7, #28]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d902      	bls.n	8009f2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d13d      	bne.n	8009faa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009f3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f46:	d111      	bne.n	8009f6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f50:	d004      	beq.n	8009f5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f5a:	d107      	bne.n	8009f6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f74:	d10f      	bne.n	8009f96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e017      	b.n	8009fda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d101      	bne.n	8009fb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	689a      	ldr	r2, [r3, #8]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	bf0c      	ite	eq
 8009fca:	2301      	moveq	r3, #1
 8009fcc:	2300      	movne	r3, #0
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	79fb      	ldrb	r3, [r7, #7]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d19b      	bne.n	8009f10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3720      	adds	r7, #32
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20000014 	.word	0x20000014

08009fe8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af02      	add	r7, sp, #8
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009ff4:	4b1b      	ldr	r3, [pc, #108]	; (800a064 <SPI_EndRxTxTransaction+0x7c>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a1b      	ldr	r2, [pc, #108]	; (800a068 <SPI_EndRxTxTransaction+0x80>)
 8009ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8009ffe:	0d5b      	lsrs	r3, r3, #21
 800a000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a004:	fb02 f303 	mul.w	r3, r2, r3
 800a008:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a012:	d112      	bne.n	800a03a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	2200      	movs	r2, #0
 800a01c:	2180      	movs	r1, #128	; 0x80
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f7ff ff5a 	bl	8009ed8 <SPI_WaitFlagStateUntilTimeout>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d016      	beq.n	800a058 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a02e:	f043 0220 	orr.w	r2, r3, #32
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e00f      	b.n	800a05a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00a      	beq.n	800a056 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	3b01      	subs	r3, #1
 800a044:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a050:	2b80      	cmp	r3, #128	; 0x80
 800a052:	d0f2      	beq.n	800a03a <SPI_EndRxTxTransaction+0x52>
 800a054:	e000      	b.n	800a058 <SPI_EndRxTxTransaction+0x70>
        break;
 800a056:	bf00      	nop
  }

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20000014 	.word	0x20000014
 800a068:	165e9f81 	.word	0x165e9f81

0800a06c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e041      	b.n	800a102 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d106      	bne.n	800a098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7fa f80a 	bl	80040ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2202      	movs	r2, #2
 800a09c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	f000 fa96 	bl	800a5dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
	...

0800a10c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d001      	beq.n	800a124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e04e      	b.n	800a1c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2202      	movs	r2, #2
 800a128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68da      	ldr	r2, [r3, #12]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f042 0201 	orr.w	r2, r2, #1
 800a13a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a23      	ldr	r2, [pc, #140]	; (800a1d0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d022      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x80>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a14e:	d01d      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x80>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a1f      	ldr	r2, [pc, #124]	; (800a1d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d018      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x80>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a1e      	ldr	r2, [pc, #120]	; (800a1d8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d013      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x80>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a1c      	ldr	r2, [pc, #112]	; (800a1dc <HAL_TIM_Base_Start_IT+0xd0>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d00e      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x80>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a1b      	ldr	r2, [pc, #108]	; (800a1e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d009      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x80>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a19      	ldr	r2, [pc, #100]	; (800a1e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d004      	beq.n	800a18c <HAL_TIM_Base_Start_IT+0x80>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a18      	ldr	r2, [pc, #96]	; (800a1e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d111      	bne.n	800a1b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f003 0307 	and.w	r3, r3, #7
 800a196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2b06      	cmp	r3, #6
 800a19c:	d010      	beq.n	800a1c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f042 0201 	orr.w	r2, r2, #1
 800a1ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ae:	e007      	b.n	800a1c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f042 0201 	orr.w	r2, r2, #1
 800a1be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	40010000 	.word	0x40010000
 800a1d4:	40000400 	.word	0x40000400
 800a1d8:	40000800 	.word	0x40000800
 800a1dc:	40000c00 	.word	0x40000c00
 800a1e0:	40010400 	.word	0x40010400
 800a1e4:	40014000 	.word	0x40014000
 800a1e8:	40001800 	.word	0x40001800

0800a1ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	f003 0302 	and.w	r3, r3, #2
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d122      	bne.n	800a248 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	f003 0302 	and.w	r3, r3, #2
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d11b      	bne.n	800a248 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f06f 0202 	mvn.w	r2, #2
 800a218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	f003 0303 	and.w	r3, r3, #3
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d003      	beq.n	800a236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f9b5 	bl	800a59e <HAL_TIM_IC_CaptureCallback>
 800a234:	e005      	b.n	800a242 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f9a7 	bl	800a58a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f9b8 	bl	800a5b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	f003 0304 	and.w	r3, r3, #4
 800a252:	2b04      	cmp	r3, #4
 800a254:	d122      	bne.n	800a29c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b04      	cmp	r3, #4
 800a262:	d11b      	bne.n	800a29c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f06f 0204 	mvn.w	r2, #4
 800a26c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2202      	movs	r2, #2
 800a272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d003      	beq.n	800a28a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f98b 	bl	800a59e <HAL_TIM_IC_CaptureCallback>
 800a288:	e005      	b.n	800a296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f97d 	bl	800a58a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f98e 	bl	800a5b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	f003 0308 	and.w	r3, r3, #8
 800a2a6:	2b08      	cmp	r3, #8
 800a2a8:	d122      	bne.n	800a2f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	f003 0308 	and.w	r3, r3, #8
 800a2b4:	2b08      	cmp	r3, #8
 800a2b6:	d11b      	bne.n	800a2f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f06f 0208 	mvn.w	r2, #8
 800a2c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2204      	movs	r2, #4
 800a2c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	f003 0303 	and.w	r3, r3, #3
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f961 	bl	800a59e <HAL_TIM_IC_CaptureCallback>
 800a2dc:	e005      	b.n	800a2ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f953 	bl	800a58a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 f964 	bl	800a5b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	f003 0310 	and.w	r3, r3, #16
 800a2fa:	2b10      	cmp	r3, #16
 800a2fc:	d122      	bne.n	800a344 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f003 0310 	and.w	r3, r3, #16
 800a308:	2b10      	cmp	r3, #16
 800a30a:	d11b      	bne.n	800a344 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f06f 0210 	mvn.w	r2, #16
 800a314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2208      	movs	r2, #8
 800a31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	69db      	ldr	r3, [r3, #28]
 800a322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f937 	bl	800a59e <HAL_TIM_IC_CaptureCallback>
 800a330:	e005      	b.n	800a33e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f929 	bl	800a58a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 f93a 	bl	800a5b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d10e      	bne.n	800a370 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	f003 0301 	and.w	r3, r3, #1
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d107      	bne.n	800a370 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f06f 0201 	mvn.w	r2, #1
 800a368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7f9 f8d4 	bl	8003518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a37a:	2b80      	cmp	r3, #128	; 0x80
 800a37c:	d10e      	bne.n	800a39c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a388:	2b80      	cmp	r3, #128	; 0x80
 800a38a:	d107      	bne.n	800a39c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 fae0 	bl	800a95c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a6:	2b40      	cmp	r3, #64	; 0x40
 800a3a8:	d10e      	bne.n	800a3c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b4:	2b40      	cmp	r3, #64	; 0x40
 800a3b6:	d107      	bne.n	800a3c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f8ff 	bl	800a5c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	f003 0320 	and.w	r3, r3, #32
 800a3d2:	2b20      	cmp	r3, #32
 800a3d4:	d10e      	bne.n	800a3f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	f003 0320 	and.w	r3, r3, #32
 800a3e0:	2b20      	cmp	r3, #32
 800a3e2:	d107      	bne.n	800a3f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f06f 0220 	mvn.w	r2, #32
 800a3ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 faaa 	bl	800a948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a406:	2300      	movs	r3, #0
 800a408:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a410:	2b01      	cmp	r3, #1
 800a412:	d101      	bne.n	800a418 <HAL_TIM_ConfigClockSource+0x1c>
 800a414:	2302      	movs	r3, #2
 800a416:	e0b4      	b.n	800a582 <HAL_TIM_ConfigClockSource+0x186>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2202      	movs	r2, #2
 800a424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a43e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a450:	d03e      	beq.n	800a4d0 <HAL_TIM_ConfigClockSource+0xd4>
 800a452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a456:	f200 8087 	bhi.w	800a568 <HAL_TIM_ConfigClockSource+0x16c>
 800a45a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a45e:	f000 8086 	beq.w	800a56e <HAL_TIM_ConfigClockSource+0x172>
 800a462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a466:	d87f      	bhi.n	800a568 <HAL_TIM_ConfigClockSource+0x16c>
 800a468:	2b70      	cmp	r3, #112	; 0x70
 800a46a:	d01a      	beq.n	800a4a2 <HAL_TIM_ConfigClockSource+0xa6>
 800a46c:	2b70      	cmp	r3, #112	; 0x70
 800a46e:	d87b      	bhi.n	800a568 <HAL_TIM_ConfigClockSource+0x16c>
 800a470:	2b60      	cmp	r3, #96	; 0x60
 800a472:	d050      	beq.n	800a516 <HAL_TIM_ConfigClockSource+0x11a>
 800a474:	2b60      	cmp	r3, #96	; 0x60
 800a476:	d877      	bhi.n	800a568 <HAL_TIM_ConfigClockSource+0x16c>
 800a478:	2b50      	cmp	r3, #80	; 0x50
 800a47a:	d03c      	beq.n	800a4f6 <HAL_TIM_ConfigClockSource+0xfa>
 800a47c:	2b50      	cmp	r3, #80	; 0x50
 800a47e:	d873      	bhi.n	800a568 <HAL_TIM_ConfigClockSource+0x16c>
 800a480:	2b40      	cmp	r3, #64	; 0x40
 800a482:	d058      	beq.n	800a536 <HAL_TIM_ConfigClockSource+0x13a>
 800a484:	2b40      	cmp	r3, #64	; 0x40
 800a486:	d86f      	bhi.n	800a568 <HAL_TIM_ConfigClockSource+0x16c>
 800a488:	2b30      	cmp	r3, #48	; 0x30
 800a48a:	d064      	beq.n	800a556 <HAL_TIM_ConfigClockSource+0x15a>
 800a48c:	2b30      	cmp	r3, #48	; 0x30
 800a48e:	d86b      	bhi.n	800a568 <HAL_TIM_ConfigClockSource+0x16c>
 800a490:	2b20      	cmp	r3, #32
 800a492:	d060      	beq.n	800a556 <HAL_TIM_ConfigClockSource+0x15a>
 800a494:	2b20      	cmp	r3, #32
 800a496:	d867      	bhi.n	800a568 <HAL_TIM_ConfigClockSource+0x16c>
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d05c      	beq.n	800a556 <HAL_TIM_ConfigClockSource+0x15a>
 800a49c:	2b10      	cmp	r3, #16
 800a49e:	d05a      	beq.n	800a556 <HAL_TIM_ConfigClockSource+0x15a>
 800a4a0:	e062      	b.n	800a568 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6818      	ldr	r0, [r3, #0]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	6899      	ldr	r1, [r3, #8]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	f000 f9ad 	bl	800a810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a4c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	609a      	str	r2, [r3, #8]
      break;
 800a4ce:	e04f      	b.n	800a570 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6818      	ldr	r0, [r3, #0]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	6899      	ldr	r1, [r3, #8]
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	f000 f996 	bl	800a810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	689a      	ldr	r2, [r3, #8]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4f2:	609a      	str	r2, [r3, #8]
      break;
 800a4f4:	e03c      	b.n	800a570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6818      	ldr	r0, [r3, #0]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	6859      	ldr	r1, [r3, #4]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	461a      	mov	r2, r3
 800a504:	f000 f90a 	bl	800a71c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2150      	movs	r1, #80	; 0x50
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 f963 	bl	800a7da <TIM_ITRx_SetConfig>
      break;
 800a514:	e02c      	b.n	800a570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6818      	ldr	r0, [r3, #0]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	6859      	ldr	r1, [r3, #4]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	461a      	mov	r2, r3
 800a524:	f000 f929 	bl	800a77a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2160      	movs	r1, #96	; 0x60
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 f953 	bl	800a7da <TIM_ITRx_SetConfig>
      break;
 800a534:	e01c      	b.n	800a570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6818      	ldr	r0, [r3, #0]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	6859      	ldr	r1, [r3, #4]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	461a      	mov	r2, r3
 800a544:	f000 f8ea 	bl	800a71c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2140      	movs	r1, #64	; 0x40
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 f943 	bl	800a7da <TIM_ITRx_SetConfig>
      break;
 800a554:	e00c      	b.n	800a570 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4619      	mov	r1, r3
 800a560:	4610      	mov	r0, r2
 800a562:	f000 f93a 	bl	800a7da <TIM_ITRx_SetConfig>
      break;
 800a566:	e003      	b.n	800a570 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	73fb      	strb	r3, [r7, #15]
      break;
 800a56c:	e000      	b.n	800a570 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a56e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a580:	7bfb      	ldrb	r3, [r7, #15]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b083      	sub	sp, #12
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a592:	bf00      	nop
 800a594:	370c      	adds	r7, #12
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b083      	sub	sp, #12
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5a6:	bf00      	nop
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b083      	sub	sp, #12
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5ba:	bf00      	nop
 800a5bc:	370c      	adds	r7, #12
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b083      	sub	sp, #12
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5ce:	bf00      	nop
 800a5d0:	370c      	adds	r7, #12
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
	...

0800a5dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a40      	ldr	r2, [pc, #256]	; (800a6f0 <TIM_Base_SetConfig+0x114>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d013      	beq.n	800a61c <TIM_Base_SetConfig+0x40>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5fa:	d00f      	beq.n	800a61c <TIM_Base_SetConfig+0x40>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a3d      	ldr	r2, [pc, #244]	; (800a6f4 <TIM_Base_SetConfig+0x118>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d00b      	beq.n	800a61c <TIM_Base_SetConfig+0x40>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a3c      	ldr	r2, [pc, #240]	; (800a6f8 <TIM_Base_SetConfig+0x11c>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d007      	beq.n	800a61c <TIM_Base_SetConfig+0x40>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a3b      	ldr	r2, [pc, #236]	; (800a6fc <TIM_Base_SetConfig+0x120>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d003      	beq.n	800a61c <TIM_Base_SetConfig+0x40>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a3a      	ldr	r2, [pc, #232]	; (800a700 <TIM_Base_SetConfig+0x124>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d108      	bne.n	800a62e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a2f      	ldr	r2, [pc, #188]	; (800a6f0 <TIM_Base_SetConfig+0x114>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d02b      	beq.n	800a68e <TIM_Base_SetConfig+0xb2>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a63c:	d027      	beq.n	800a68e <TIM_Base_SetConfig+0xb2>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a2c      	ldr	r2, [pc, #176]	; (800a6f4 <TIM_Base_SetConfig+0x118>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d023      	beq.n	800a68e <TIM_Base_SetConfig+0xb2>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a2b      	ldr	r2, [pc, #172]	; (800a6f8 <TIM_Base_SetConfig+0x11c>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d01f      	beq.n	800a68e <TIM_Base_SetConfig+0xb2>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a2a      	ldr	r2, [pc, #168]	; (800a6fc <TIM_Base_SetConfig+0x120>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d01b      	beq.n	800a68e <TIM_Base_SetConfig+0xb2>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a29      	ldr	r2, [pc, #164]	; (800a700 <TIM_Base_SetConfig+0x124>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d017      	beq.n	800a68e <TIM_Base_SetConfig+0xb2>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a28      	ldr	r2, [pc, #160]	; (800a704 <TIM_Base_SetConfig+0x128>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d013      	beq.n	800a68e <TIM_Base_SetConfig+0xb2>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a27      	ldr	r2, [pc, #156]	; (800a708 <TIM_Base_SetConfig+0x12c>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d00f      	beq.n	800a68e <TIM_Base_SetConfig+0xb2>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a26      	ldr	r2, [pc, #152]	; (800a70c <TIM_Base_SetConfig+0x130>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d00b      	beq.n	800a68e <TIM_Base_SetConfig+0xb2>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a25      	ldr	r2, [pc, #148]	; (800a710 <TIM_Base_SetConfig+0x134>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d007      	beq.n	800a68e <TIM_Base_SetConfig+0xb2>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a24      	ldr	r2, [pc, #144]	; (800a714 <TIM_Base_SetConfig+0x138>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d003      	beq.n	800a68e <TIM_Base_SetConfig+0xb2>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a23      	ldr	r2, [pc, #140]	; (800a718 <TIM_Base_SetConfig+0x13c>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d108      	bne.n	800a6a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	68fa      	ldr	r2, [r7, #12]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	695b      	ldr	r3, [r3, #20]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	689a      	ldr	r2, [r3, #8]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a0a      	ldr	r2, [pc, #40]	; (800a6f0 <TIM_Base_SetConfig+0x114>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d003      	beq.n	800a6d4 <TIM_Base_SetConfig+0xf8>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a0c      	ldr	r2, [pc, #48]	; (800a700 <TIM_Base_SetConfig+0x124>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d103      	bne.n	800a6dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	691a      	ldr	r2, [r3, #16]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	615a      	str	r2, [r3, #20]
}
 800a6e2:	bf00      	nop
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	40010000 	.word	0x40010000
 800a6f4:	40000400 	.word	0x40000400
 800a6f8:	40000800 	.word	0x40000800
 800a6fc:	40000c00 	.word	0x40000c00
 800a700:	40010400 	.word	0x40010400
 800a704:	40014000 	.word	0x40014000
 800a708:	40014400 	.word	0x40014400
 800a70c:	40014800 	.word	0x40014800
 800a710:	40001800 	.word	0x40001800
 800a714:	40001c00 	.word	0x40001c00
 800a718:	40002000 	.word	0x40002000

0800a71c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b087      	sub	sp, #28
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6a1b      	ldr	r3, [r3, #32]
 800a732:	f023 0201 	bic.w	r2, r3, #1
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	011b      	lsls	r3, r3, #4
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	4313      	orrs	r3, r2
 800a750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f023 030a 	bic.w	r3, r3, #10
 800a758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	4313      	orrs	r3, r2
 800a760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	621a      	str	r2, [r3, #32]
}
 800a76e:	bf00      	nop
 800a770:	371c      	adds	r7, #28
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b087      	sub	sp, #28
 800a77e:	af00      	add	r7, sp, #0
 800a780:	60f8      	str	r0, [r7, #12]
 800a782:	60b9      	str	r1, [r7, #8]
 800a784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6a1b      	ldr	r3, [r3, #32]
 800a78a:	f023 0210 	bic.w	r2, r3, #16
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6a1b      	ldr	r3, [r3, #32]
 800a79c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	031b      	lsls	r3, r3, #12
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	011b      	lsls	r3, r3, #4
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	697a      	ldr	r2, [r7, #20]
 800a7c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	621a      	str	r2, [r3, #32]
}
 800a7ce:	bf00      	nop
 800a7d0:	371c      	adds	r7, #28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b085      	sub	sp, #20
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	f043 0307 	orr.w	r3, r3, #7
 800a7fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	609a      	str	r2, [r3, #8]
}
 800a804:	bf00      	nop
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a810:	b480      	push	{r7}
 800a812:	b087      	sub	sp, #28
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
 800a81c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a82a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	021a      	lsls	r2, r3, #8
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	431a      	orrs	r2, r3
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	4313      	orrs	r3, r2
 800a838:	697a      	ldr	r2, [r7, #20]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	697a      	ldr	r2, [r7, #20]
 800a842:	609a      	str	r2, [r3, #8]
}
 800a844:	bf00      	nop
 800a846:	371c      	adds	r7, #28
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a860:	2b01      	cmp	r3, #1
 800a862:	d101      	bne.n	800a868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a864:	2302      	movs	r3, #2
 800a866:	e05a      	b.n	800a91e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2202      	movs	r2, #2
 800a874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a88e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	4313      	orrs	r3, r2
 800a898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a21      	ldr	r2, [pc, #132]	; (800a92c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d022      	beq.n	800a8f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8b4:	d01d      	beq.n	800a8f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a1d      	ldr	r2, [pc, #116]	; (800a930 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d018      	beq.n	800a8f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a1b      	ldr	r2, [pc, #108]	; (800a934 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d013      	beq.n	800a8f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a1a      	ldr	r2, [pc, #104]	; (800a938 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d00e      	beq.n	800a8f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a18      	ldr	r2, [pc, #96]	; (800a93c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d009      	beq.n	800a8f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a17      	ldr	r2, [pc, #92]	; (800a940 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d004      	beq.n	800a8f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a15      	ldr	r2, [pc, #84]	; (800a944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d10c      	bne.n	800a90c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	4313      	orrs	r3, r2
 800a902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	40010000 	.word	0x40010000
 800a930:	40000400 	.word	0x40000400
 800a934:	40000800 	.word	0x40000800
 800a938:	40000c00 	.word	0x40000c00
 800a93c:	40010400 	.word	0x40010400
 800a940:	40014000 	.word	0x40014000
 800a944:	40001800 	.word	0x40001800

0800a948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a970:	b084      	sub	sp, #16
 800a972:	b580      	push	{r7, lr}
 800a974:	b084      	sub	sp, #16
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	f107 001c 	add.w	r0, r7, #28
 800a97e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a984:	2b01      	cmp	r3, #1
 800a986:	d122      	bne.n	800a9ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a99c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a9b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d105      	bne.n	800a9c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f001 fbee 	bl	800c1a4 <USB_CoreReset>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	73fb      	strb	r3, [r7, #15]
 800a9cc:	e01a      	b.n	800aa04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f001 fbe2 	bl	800c1a4 <USB_CoreReset>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a9e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d106      	bne.n	800a9f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	639a      	str	r2, [r3, #56]	; 0x38
 800a9f6:	e005      	b.n	800aa04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d10b      	bne.n	800aa22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	f043 0206 	orr.w	r2, r3, #6
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	f043 0220 	orr.w	r2, r3, #32
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa2e:	b004      	add	sp, #16
 800aa30:	4770      	bx	lr
	...

0800aa34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b087      	sub	sp, #28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	4613      	mov	r3, r2
 800aa40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800aa42:	79fb      	ldrb	r3, [r7, #7]
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d165      	bne.n	800ab14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	4a41      	ldr	r2, [pc, #260]	; (800ab50 <USB_SetTurnaroundTime+0x11c>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d906      	bls.n	800aa5e <USB_SetTurnaroundTime+0x2a>
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	4a40      	ldr	r2, [pc, #256]	; (800ab54 <USB_SetTurnaroundTime+0x120>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d202      	bcs.n	800aa5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800aa58:	230f      	movs	r3, #15
 800aa5a:	617b      	str	r3, [r7, #20]
 800aa5c:	e062      	b.n	800ab24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	4a3c      	ldr	r2, [pc, #240]	; (800ab54 <USB_SetTurnaroundTime+0x120>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d306      	bcc.n	800aa74 <USB_SetTurnaroundTime+0x40>
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	4a3b      	ldr	r2, [pc, #236]	; (800ab58 <USB_SetTurnaroundTime+0x124>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d202      	bcs.n	800aa74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800aa6e:	230e      	movs	r3, #14
 800aa70:	617b      	str	r3, [r7, #20]
 800aa72:	e057      	b.n	800ab24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	4a38      	ldr	r2, [pc, #224]	; (800ab58 <USB_SetTurnaroundTime+0x124>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d306      	bcc.n	800aa8a <USB_SetTurnaroundTime+0x56>
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	4a37      	ldr	r2, [pc, #220]	; (800ab5c <USB_SetTurnaroundTime+0x128>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d202      	bcs.n	800aa8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800aa84:	230d      	movs	r3, #13
 800aa86:	617b      	str	r3, [r7, #20]
 800aa88:	e04c      	b.n	800ab24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	4a33      	ldr	r2, [pc, #204]	; (800ab5c <USB_SetTurnaroundTime+0x128>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d306      	bcc.n	800aaa0 <USB_SetTurnaroundTime+0x6c>
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	4a32      	ldr	r2, [pc, #200]	; (800ab60 <USB_SetTurnaroundTime+0x12c>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d802      	bhi.n	800aaa0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aa9a:	230c      	movs	r3, #12
 800aa9c:	617b      	str	r3, [r7, #20]
 800aa9e:	e041      	b.n	800ab24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	4a2f      	ldr	r2, [pc, #188]	; (800ab60 <USB_SetTurnaroundTime+0x12c>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d906      	bls.n	800aab6 <USB_SetTurnaroundTime+0x82>
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	4a2e      	ldr	r2, [pc, #184]	; (800ab64 <USB_SetTurnaroundTime+0x130>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d802      	bhi.n	800aab6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aab0:	230b      	movs	r3, #11
 800aab2:	617b      	str	r3, [r7, #20]
 800aab4:	e036      	b.n	800ab24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	4a2a      	ldr	r2, [pc, #168]	; (800ab64 <USB_SetTurnaroundTime+0x130>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d906      	bls.n	800aacc <USB_SetTurnaroundTime+0x98>
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	4a29      	ldr	r2, [pc, #164]	; (800ab68 <USB_SetTurnaroundTime+0x134>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d802      	bhi.n	800aacc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800aac6:	230a      	movs	r3, #10
 800aac8:	617b      	str	r3, [r7, #20]
 800aaca:	e02b      	b.n	800ab24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	4a26      	ldr	r2, [pc, #152]	; (800ab68 <USB_SetTurnaroundTime+0x134>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d906      	bls.n	800aae2 <USB_SetTurnaroundTime+0xae>
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	4a25      	ldr	r2, [pc, #148]	; (800ab6c <USB_SetTurnaroundTime+0x138>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d202      	bcs.n	800aae2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800aadc:	2309      	movs	r3, #9
 800aade:	617b      	str	r3, [r7, #20]
 800aae0:	e020      	b.n	800ab24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	4a21      	ldr	r2, [pc, #132]	; (800ab6c <USB_SetTurnaroundTime+0x138>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d306      	bcc.n	800aaf8 <USB_SetTurnaroundTime+0xc4>
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	4a20      	ldr	r2, [pc, #128]	; (800ab70 <USB_SetTurnaroundTime+0x13c>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d802      	bhi.n	800aaf8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aaf2:	2308      	movs	r3, #8
 800aaf4:	617b      	str	r3, [r7, #20]
 800aaf6:	e015      	b.n	800ab24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	4a1d      	ldr	r2, [pc, #116]	; (800ab70 <USB_SetTurnaroundTime+0x13c>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d906      	bls.n	800ab0e <USB_SetTurnaroundTime+0xda>
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	4a1c      	ldr	r2, [pc, #112]	; (800ab74 <USB_SetTurnaroundTime+0x140>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d202      	bcs.n	800ab0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ab08:	2307      	movs	r3, #7
 800ab0a:	617b      	str	r3, [r7, #20]
 800ab0c:	e00a      	b.n	800ab24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ab0e:	2306      	movs	r3, #6
 800ab10:	617b      	str	r3, [r7, #20]
 800ab12:	e007      	b.n	800ab24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ab14:	79fb      	ldrb	r3, [r7, #7]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d102      	bne.n	800ab20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ab1a:	2309      	movs	r3, #9
 800ab1c:	617b      	str	r3, [r7, #20]
 800ab1e:	e001      	b.n	800ab24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ab20:	2309      	movs	r3, #9
 800ab22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	68da      	ldr	r2, [r3, #12]
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	029b      	lsls	r3, r3, #10
 800ab38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ab3c:	431a      	orrs	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	371c      	adds	r7, #28
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr
 800ab50:	00d8acbf 	.word	0x00d8acbf
 800ab54:	00e4e1c0 	.word	0x00e4e1c0
 800ab58:	00f42400 	.word	0x00f42400
 800ab5c:	01067380 	.word	0x01067380
 800ab60:	011a499f 	.word	0x011a499f
 800ab64:	01312cff 	.word	0x01312cff
 800ab68:	014ca43f 	.word	0x014ca43f
 800ab6c:	016e3600 	.word	0x016e3600
 800ab70:	01a6ab1f 	.word	0x01a6ab1f
 800ab74:	01e84800 	.word	0x01e84800

0800ab78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	f043 0201 	orr.w	r2, r3, #1
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	f023 0201 	bic.w	r2, r3, #1
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	460b      	mov	r3, r1
 800abc6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800abc8:	2300      	movs	r3, #0
 800abca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800abd8:	78fb      	ldrb	r3, [r7, #3]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d115      	bne.n	800ac0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800abea:	2001      	movs	r0, #1
 800abec:	f7f9 fdd6 	bl	800479c <HAL_Delay>
      ms++;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	3301      	adds	r3, #1
 800abf4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f001 fa45 	bl	800c086 <USB_GetMode>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d01e      	beq.n	800ac40 <USB_SetCurrentMode+0x84>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2b31      	cmp	r3, #49	; 0x31
 800ac06:	d9f0      	bls.n	800abea <USB_SetCurrentMode+0x2e>
 800ac08:	e01a      	b.n	800ac40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ac0a:	78fb      	ldrb	r3, [r7, #3]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d115      	bne.n	800ac3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac1c:	2001      	movs	r0, #1
 800ac1e:	f7f9 fdbd 	bl	800479c <HAL_Delay>
      ms++;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3301      	adds	r3, #1
 800ac26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f001 fa2c 	bl	800c086 <USB_GetMode>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d005      	beq.n	800ac40 <USB_SetCurrentMode+0x84>
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b31      	cmp	r3, #49	; 0x31
 800ac38:	d9f0      	bls.n	800ac1c <USB_SetCurrentMode+0x60>
 800ac3a:	e001      	b.n	800ac40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e005      	b.n	800ac4c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2b32      	cmp	r3, #50	; 0x32
 800ac44:	d101      	bne.n	800ac4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e000      	b.n	800ac4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac54:	b084      	sub	sp, #16
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b086      	sub	sp, #24
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ac62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ac66:	2300      	movs	r3, #0
 800ac68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ac6e:	2300      	movs	r3, #0
 800ac70:	613b      	str	r3, [r7, #16]
 800ac72:	e009      	b.n	800ac88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	3340      	adds	r3, #64	; 0x40
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	2200      	movs	r2, #0
 800ac80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	3301      	adds	r3, #1
 800ac86:	613b      	str	r3, [r7, #16]
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	2b0e      	cmp	r3, #14
 800ac8c:	d9f2      	bls.n	800ac74 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ac8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d11c      	bne.n	800acce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aca2:	f043 0302 	orr.w	r3, r3, #2
 800aca6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	639a      	str	r2, [r3, #56]	; 0x38
 800accc:	e00b      	b.n	800ace6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800acec:	461a      	mov	r2, r3
 800acee:	2300      	movs	r3, #0
 800acf0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf8:	4619      	mov	r1, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad00:	461a      	mov	r2, r3
 800ad02:	680b      	ldr	r3, [r1, #0]
 800ad04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d10c      	bne.n	800ad26 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ad0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d104      	bne.n	800ad1c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ad12:	2100      	movs	r1, #0
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 f965 	bl	800afe4 <USB_SetDevSpeed>
 800ad1a:	e008      	b.n	800ad2e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ad1c:	2101      	movs	r1, #1
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f960 	bl	800afe4 <USB_SetDevSpeed>
 800ad24:	e003      	b.n	800ad2e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ad26:	2103      	movs	r1, #3
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 f95b 	bl	800afe4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ad2e:	2110      	movs	r1, #16
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f8f3 	bl	800af1c <USB_FlushTxFifo>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d001      	beq.n	800ad40 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f91f 	bl	800af84 <USB_FlushRxFifo>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d001      	beq.n	800ad50 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad56:	461a      	mov	r2, r3
 800ad58:	2300      	movs	r3, #0
 800ad5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad62:	461a      	mov	r2, r3
 800ad64:	2300      	movs	r3, #0
 800ad66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad6e:	461a      	mov	r2, r3
 800ad70:	2300      	movs	r3, #0
 800ad72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad74:	2300      	movs	r3, #0
 800ad76:	613b      	str	r3, [r7, #16]
 800ad78:	e043      	b.n	800ae02 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	015a      	lsls	r2, r3, #5
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	4413      	add	r3, r2
 800ad82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad90:	d118      	bne.n	800adc4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10a      	bne.n	800adae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	015a      	lsls	r2, r3, #5
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4413      	add	r3, r2
 800ada0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ada4:	461a      	mov	r2, r3
 800ada6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800adaa:	6013      	str	r3, [r2, #0]
 800adac:	e013      	b.n	800add6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adba:	461a      	mov	r2, r3
 800adbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800adc0:	6013      	str	r3, [r2, #0]
 800adc2:	e008      	b.n	800add6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	015a      	lsls	r2, r3, #5
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	4413      	add	r3, r2
 800adcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add0:	461a      	mov	r2, r3
 800add2:	2300      	movs	r3, #0
 800add4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	015a      	lsls	r2, r3, #5
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	4413      	add	r3, r2
 800adde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade2:	461a      	mov	r2, r3
 800ade4:	2300      	movs	r3, #0
 800ade6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	015a      	lsls	r2, r3, #5
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4413      	add	r3, r2
 800adf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf4:	461a      	mov	r2, r3
 800adf6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800adfa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	3301      	adds	r3, #1
 800ae00:	613b      	str	r3, [r7, #16]
 800ae02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae04:	693a      	ldr	r2, [r7, #16]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d3b7      	bcc.n	800ad7a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	613b      	str	r3, [r7, #16]
 800ae0e:	e043      	b.n	800ae98 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae26:	d118      	bne.n	800ae5a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10a      	bne.n	800ae44 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	015a      	lsls	r2, r3, #5
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	4413      	add	r3, r2
 800ae36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae40:	6013      	str	r3, [r2, #0]
 800ae42:	e013      	b.n	800ae6c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	015a      	lsls	r2, r3, #5
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae50:	461a      	mov	r2, r3
 800ae52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae56:	6013      	str	r3, [r2, #0]
 800ae58:	e008      	b.n	800ae6c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	015a      	lsls	r2, r3, #5
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	4413      	add	r3, r2
 800ae62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae66:	461a      	mov	r2, r3
 800ae68:	2300      	movs	r3, #0
 800ae6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	015a      	lsls	r2, r3, #5
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	4413      	add	r3, r2
 800ae74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae78:	461a      	mov	r2, r3
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	015a      	lsls	r2, r3, #5
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	4413      	add	r3, r2
 800ae86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	3301      	adds	r3, #1
 800ae96:	613b      	str	r3, [r7, #16]
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d3b7      	bcc.n	800ae10 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aeae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aeb2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aec0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d105      	bne.n	800aed4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	699b      	ldr	r3, [r3, #24]
 800aecc:	f043 0210 	orr.w	r2, r3, #16
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	699a      	ldr	r2, [r3, #24]
 800aed8:	4b0f      	ldr	r3, [pc, #60]	; (800af18 <USB_DevInit+0x2c4>)
 800aeda:	4313      	orrs	r3, r2
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d005      	beq.n	800aef2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	f043 0208 	orr.w	r2, r3, #8
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d107      	bne.n	800af08 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af00:	f043 0304 	orr.w	r3, r3, #4
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800af08:	7dfb      	ldrb	r3, [r7, #23]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3718      	adds	r7, #24
 800af0e:	46bd      	mov	sp, r7
 800af10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af14:	b004      	add	sp, #16
 800af16:	4770      	bx	lr
 800af18:	803c3800 	.word	0x803c3800

0800af1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af26:	2300      	movs	r3, #0
 800af28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	3301      	adds	r3, #1
 800af2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	4a13      	ldr	r2, [pc, #76]	; (800af80 <USB_FlushTxFifo+0x64>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d901      	bls.n	800af3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800af38:	2303      	movs	r3, #3
 800af3a:	e01b      	b.n	800af74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	2b00      	cmp	r3, #0
 800af42:	daf2      	bge.n	800af2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800af44:	2300      	movs	r3, #0
 800af46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	019b      	lsls	r3, r3, #6
 800af4c:	f043 0220 	orr.w	r2, r3, #32
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	3301      	adds	r3, #1
 800af58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	4a08      	ldr	r2, [pc, #32]	; (800af80 <USB_FlushTxFifo+0x64>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d901      	bls.n	800af66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800af62:	2303      	movs	r3, #3
 800af64:	e006      	b.n	800af74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	f003 0320 	and.w	r3, r3, #32
 800af6e:	2b20      	cmp	r3, #32
 800af70:	d0f0      	beq.n	800af54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3714      	adds	r7, #20
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	00030d40 	.word	0x00030d40

0800af84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af8c:	2300      	movs	r3, #0
 800af8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	3301      	adds	r3, #1
 800af94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	4a11      	ldr	r2, [pc, #68]	; (800afe0 <USB_FlushRxFifo+0x5c>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d901      	bls.n	800afa2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e018      	b.n	800afd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	daf2      	bge.n	800af90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800afaa:	2300      	movs	r3, #0
 800afac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2210      	movs	r2, #16
 800afb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	3301      	adds	r3, #1
 800afb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	4a08      	ldr	r2, [pc, #32]	; (800afe0 <USB_FlushRxFifo+0x5c>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d901      	bls.n	800afc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e006      	b.n	800afd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	f003 0310 	and.w	r3, r3, #16
 800afce:	2b10      	cmp	r3, #16
 800afd0:	d0f0      	beq.n	800afb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	00030d40 	.word	0x00030d40

0800afe4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	460b      	mov	r3, r1
 800afee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	78fb      	ldrb	r3, [r7, #3]
 800affe:	68f9      	ldr	r1, [r7, #12]
 800b000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b004:	4313      	orrs	r3, r2
 800b006:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b016:	b480      	push	{r7}
 800b018:	b087      	sub	sp, #28
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	f003 0306 	and.w	r3, r3, #6
 800b02e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d102      	bne.n	800b03c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b036:	2300      	movs	r3, #0
 800b038:	75fb      	strb	r3, [r7, #23]
 800b03a:	e00a      	b.n	800b052 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d002      	beq.n	800b048 <USB_GetDevSpeed+0x32>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2b06      	cmp	r3, #6
 800b046:	d102      	bne.n	800b04e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b048:	2302      	movs	r3, #2
 800b04a:	75fb      	strb	r3, [r7, #23]
 800b04c:	e001      	b.n	800b052 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b04e:	230f      	movs	r3, #15
 800b050:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b052:	7dfb      	ldrb	r3, [r7, #23]
}
 800b054:	4618      	mov	r0, r3
 800b056:	371c      	adds	r7, #28
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	785b      	ldrb	r3, [r3, #1]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d13a      	bne.n	800b0f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b082:	69da      	ldr	r2, [r3, #28]
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	f003 030f 	and.w	r3, r3, #15
 800b08c:	2101      	movs	r1, #1
 800b08e:	fa01 f303 	lsl.w	r3, r1, r3
 800b092:	b29b      	uxth	r3, r3
 800b094:	68f9      	ldr	r1, [r7, #12]
 800b096:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b09a:	4313      	orrs	r3, r2
 800b09c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	015a      	lsls	r2, r3, #5
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d155      	bne.n	800b160 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	791b      	ldrb	r3, [r3, #4]
 800b0ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b0d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	059b      	lsls	r3, r3, #22
 800b0d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	0151      	lsls	r1, r2, #5
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	440a      	add	r2, r1
 800b0e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0ee:	6013      	str	r3, [r2, #0]
 800b0f0:	e036      	b.n	800b160 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0f8:	69da      	ldr	r2, [r3, #28]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	f003 030f 	and.w	r3, r3, #15
 800b102:	2101      	movs	r1, #1
 800b104:	fa01 f303 	lsl.w	r3, r1, r3
 800b108:	041b      	lsls	r3, r3, #16
 800b10a:	68f9      	ldr	r1, [r7, #12]
 800b10c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b110:	4313      	orrs	r3, r2
 800b112:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b126:	2b00      	cmp	r3, #0
 800b128:	d11a      	bne.n	800b160 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	015a      	lsls	r2, r3, #5
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	4413      	add	r3, r2
 800b132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	791b      	ldrb	r3, [r3, #4]
 800b144:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b146:	430b      	orrs	r3, r1
 800b148:	4313      	orrs	r3, r2
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	0151      	lsls	r1, r2, #5
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	440a      	add	r2, r1
 800b152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b15a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b15e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
	...

0800b170 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	785b      	ldrb	r3, [r3, #1]
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d161      	bne.n	800b250 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	015a      	lsls	r2, r3, #5
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	4413      	add	r3, r2
 800b194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b19e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1a2:	d11f      	bne.n	800b1e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	015a      	lsls	r2, r3, #5
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	0151      	lsls	r1, r2, #5
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	440a      	add	r2, r1
 800b1ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b1c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	015a      	lsls	r2, r3, #5
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	68ba      	ldr	r2, [r7, #8]
 800b1d4:	0151      	lsls	r1, r2, #5
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	440a      	add	r2, r1
 800b1da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b1e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	f003 030f 	and.w	r3, r3, #15
 800b1f4:	2101      	movs	r1, #1
 800b1f6:	fa01 f303 	lsl.w	r3, r1, r3
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	43db      	mvns	r3, r3
 800b1fe:	68f9      	ldr	r1, [r7, #12]
 800b200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b204:	4013      	ands	r3, r2
 800b206:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b20e:	69da      	ldr	r2, [r3, #28]
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	f003 030f 	and.w	r3, r3, #15
 800b218:	2101      	movs	r1, #1
 800b21a:	fa01 f303 	lsl.w	r3, r1, r3
 800b21e:	b29b      	uxth	r3, r3
 800b220:	43db      	mvns	r3, r3
 800b222:	68f9      	ldr	r1, [r7, #12]
 800b224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b228:	4013      	ands	r3, r2
 800b22a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	015a      	lsls	r2, r3, #5
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	4413      	add	r3, r2
 800b234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	0159      	lsls	r1, r3, #5
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	440b      	add	r3, r1
 800b242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b246:	4619      	mov	r1, r3
 800b248:	4b35      	ldr	r3, [pc, #212]	; (800b320 <USB_DeactivateEndpoint+0x1b0>)
 800b24a:	4013      	ands	r3, r2
 800b24c:	600b      	str	r3, [r1, #0]
 800b24e:	e060      	b.n	800b312 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	015a      	lsls	r2, r3, #5
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	4413      	add	r3, r2
 800b258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b266:	d11f      	bne.n	800b2a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	015a      	lsls	r2, r3, #5
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	4413      	add	r3, r2
 800b270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	0151      	lsls	r1, r2, #5
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	440a      	add	r2, r1
 800b27e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b282:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b286:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	015a      	lsls	r2, r3, #5
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	4413      	add	r3, r2
 800b290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68ba      	ldr	r2, [r7, #8]
 800b298:	0151      	lsls	r1, r2, #5
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	440a      	add	r2, r1
 800b29e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	f003 030f 	and.w	r3, r3, #15
 800b2b8:	2101      	movs	r1, #1
 800b2ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b2be:	041b      	lsls	r3, r3, #16
 800b2c0:	43db      	mvns	r3, r3
 800b2c2:	68f9      	ldr	r1, [r7, #12]
 800b2c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d2:	69da      	ldr	r2, [r3, #28]
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	f003 030f 	and.w	r3, r3, #15
 800b2dc:	2101      	movs	r1, #1
 800b2de:	fa01 f303 	lsl.w	r3, r1, r3
 800b2e2:	041b      	lsls	r3, r3, #16
 800b2e4:	43db      	mvns	r3, r3
 800b2e6:	68f9      	ldr	r1, [r7, #12]
 800b2e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	015a      	lsls	r2, r3, #5
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	0159      	lsls	r1, r3, #5
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	440b      	add	r3, r1
 800b306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b30a:	4619      	mov	r1, r3
 800b30c:	4b05      	ldr	r3, [pc, #20]	; (800b324 <USB_DeactivateEndpoint+0x1b4>)
 800b30e:	4013      	ands	r3, r2
 800b310:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr
 800b320:	ec337800 	.word	0xec337800
 800b324:	eff37800 	.word	0xeff37800

0800b328 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b08a      	sub	sp, #40	; 0x28
 800b32c:	af02      	add	r7, sp, #8
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	4613      	mov	r3, r2
 800b334:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	785b      	ldrb	r3, [r3, #1]
 800b344:	2b01      	cmp	r3, #1
 800b346:	f040 815c 	bne.w	800b602 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d132      	bne.n	800b3b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	015a      	lsls	r2, r3, #5
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	4413      	add	r3, r2
 800b35a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	69ba      	ldr	r2, [r7, #24]
 800b362:	0151      	lsls	r1, r2, #5
 800b364:	69fa      	ldr	r2, [r7, #28]
 800b366:	440a      	add	r2, r1
 800b368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b36c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b370:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b374:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	015a      	lsls	r2, r3, #5
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	4413      	add	r3, r2
 800b37e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	69ba      	ldr	r2, [r7, #24]
 800b386:	0151      	lsls	r1, r2, #5
 800b388:	69fa      	ldr	r2, [r7, #28]
 800b38a:	440a      	add	r2, r1
 800b38c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b390:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b394:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	015a      	lsls	r2, r3, #5
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	4413      	add	r3, r2
 800b39e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	69ba      	ldr	r2, [r7, #24]
 800b3a6:	0151      	lsls	r1, r2, #5
 800b3a8:	69fa      	ldr	r2, [r7, #28]
 800b3aa:	440a      	add	r2, r1
 800b3ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3b0:	0cdb      	lsrs	r3, r3, #19
 800b3b2:	04db      	lsls	r3, r3, #19
 800b3b4:	6113      	str	r3, [r2, #16]
 800b3b6:	e074      	b.n	800b4a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	69ba      	ldr	r2, [r7, #24]
 800b3c8:	0151      	lsls	r1, r2, #5
 800b3ca:	69fa      	ldr	r2, [r7, #28]
 800b3cc:	440a      	add	r2, r1
 800b3ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3d2:	0cdb      	lsrs	r3, r3, #19
 800b3d4:	04db      	lsls	r3, r3, #19
 800b3d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	015a      	lsls	r2, r3, #5
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	4413      	add	r3, r2
 800b3e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	69ba      	ldr	r2, [r7, #24]
 800b3e8:	0151      	lsls	r1, r2, #5
 800b3ea:	69fa      	ldr	r2, [r7, #28]
 800b3ec:	440a      	add	r2, r1
 800b3ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b3f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b3fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	4413      	add	r3, r2
 800b404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b408:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	6999      	ldr	r1, [r3, #24]
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	440b      	add	r3, r1
 800b414:	1e59      	subs	r1, r3, #1
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b41e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b420:	4b9d      	ldr	r3, [pc, #628]	; (800b698 <USB_EPStartXfer+0x370>)
 800b422:	400b      	ands	r3, r1
 800b424:	69b9      	ldr	r1, [r7, #24]
 800b426:	0148      	lsls	r0, r1, #5
 800b428:	69f9      	ldr	r1, [r7, #28]
 800b42a:	4401      	add	r1, r0
 800b42c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b430:	4313      	orrs	r3, r2
 800b432:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	015a      	lsls	r2, r3, #5
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	4413      	add	r3, r2
 800b43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b440:	691a      	ldr	r2, [r3, #16]
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b44a:	69b9      	ldr	r1, [r7, #24]
 800b44c:	0148      	lsls	r0, r1, #5
 800b44e:	69f9      	ldr	r1, [r7, #28]
 800b450:	4401      	add	r1, r0
 800b452:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b456:	4313      	orrs	r3, r2
 800b458:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	791b      	ldrb	r3, [r3, #4]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d11f      	bne.n	800b4a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	015a      	lsls	r2, r3, #5
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	4413      	add	r3, r2
 800b46a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	69ba      	ldr	r2, [r7, #24]
 800b472:	0151      	lsls	r1, r2, #5
 800b474:	69fa      	ldr	r2, [r7, #28]
 800b476:	440a      	add	r2, r1
 800b478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b47c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b480:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	015a      	lsls	r2, r3, #5
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	4413      	add	r3, r2
 800b48a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	69ba      	ldr	r2, [r7, #24]
 800b492:	0151      	lsls	r1, r2, #5
 800b494:	69fa      	ldr	r2, [r7, #28]
 800b496:	440a      	add	r2, r1
 800b498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b49c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b4a2:	79fb      	ldrb	r3, [r7, #7]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d14b      	bne.n	800b540 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	695b      	ldr	r3, [r3, #20]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d009      	beq.n	800b4c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	015a      	lsls	r2, r3, #5
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4bc:	461a      	mov	r2, r3
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	695b      	ldr	r3, [r3, #20]
 800b4c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	791b      	ldrb	r3, [r3, #4]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d128      	bne.n	800b51e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d110      	bne.n	800b4fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	015a      	lsls	r2, r3, #5
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	69ba      	ldr	r2, [r7, #24]
 800b4ec:	0151      	lsls	r1, r2, #5
 800b4ee:	69fa      	ldr	r2, [r7, #28]
 800b4f0:	440a      	add	r2, r1
 800b4f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4fa:	6013      	str	r3, [r2, #0]
 800b4fc:	e00f      	b.n	800b51e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	015a      	lsls	r2, r3, #5
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	4413      	add	r3, r2
 800b506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	69ba      	ldr	r2, [r7, #24]
 800b50e:	0151      	lsls	r1, r2, #5
 800b510:	69fa      	ldr	r2, [r7, #28]
 800b512:	440a      	add	r2, r1
 800b514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b51c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	015a      	lsls	r2, r3, #5
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	4413      	add	r3, r2
 800b526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	69ba      	ldr	r2, [r7, #24]
 800b52e:	0151      	lsls	r1, r2, #5
 800b530:	69fa      	ldr	r2, [r7, #28]
 800b532:	440a      	add	r2, r1
 800b534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b538:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b53c:	6013      	str	r3, [r2, #0]
 800b53e:	e133      	b.n	800b7a8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	015a      	lsls	r2, r3, #5
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	4413      	add	r3, r2
 800b548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	69ba      	ldr	r2, [r7, #24]
 800b550:	0151      	lsls	r1, r2, #5
 800b552:	69fa      	ldr	r2, [r7, #28]
 800b554:	440a      	add	r2, r1
 800b556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b55a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b55e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	791b      	ldrb	r3, [r3, #4]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d015      	beq.n	800b594 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f000 811b 	beq.w	800b7a8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	f003 030f 	and.w	r3, r3, #15
 800b582:	2101      	movs	r1, #1
 800b584:	fa01 f303 	lsl.w	r3, r1, r3
 800b588:	69f9      	ldr	r1, [r7, #28]
 800b58a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b58e:	4313      	orrs	r3, r2
 800b590:	634b      	str	r3, [r1, #52]	; 0x34
 800b592:	e109      	b.n	800b7a8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d110      	bne.n	800b5c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	015a      	lsls	r2, r3, #5
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	69ba      	ldr	r2, [r7, #24]
 800b5b4:	0151      	lsls	r1, r2, #5
 800b5b6:	69fa      	ldr	r2, [r7, #28]
 800b5b8:	440a      	add	r2, r1
 800b5ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5c2:	6013      	str	r3, [r2, #0]
 800b5c4:	e00f      	b.n	800b5e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	015a      	lsls	r2, r3, #5
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	69ba      	ldr	r2, [r7, #24]
 800b5d6:	0151      	lsls	r1, r2, #5
 800b5d8:	69fa      	ldr	r2, [r7, #28]
 800b5da:	440a      	add	r2, r1
 800b5dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	6919      	ldr	r1, [r3, #16]
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	781a      	ldrb	r2, [r3, #0]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	699b      	ldr	r3, [r3, #24]
 800b5f2:	b298      	uxth	r0, r3
 800b5f4:	79fb      	ldrb	r3, [r7, #7]
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f000 fade 	bl	800bbbc <USB_WritePacket>
 800b600:	e0d2      	b.n	800b7a8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	015a      	lsls	r2, r3, #5
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	4413      	add	r3, r2
 800b60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	69ba      	ldr	r2, [r7, #24]
 800b612:	0151      	lsls	r1, r2, #5
 800b614:	69fa      	ldr	r2, [r7, #28]
 800b616:	440a      	add	r2, r1
 800b618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b61c:	0cdb      	lsrs	r3, r3, #19
 800b61e:	04db      	lsls	r3, r3, #19
 800b620:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	015a      	lsls	r2, r3, #5
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	4413      	add	r3, r2
 800b62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	69ba      	ldr	r2, [r7, #24]
 800b632:	0151      	lsls	r1, r2, #5
 800b634:	69fa      	ldr	r2, [r7, #28]
 800b636:	440a      	add	r2, r1
 800b638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b63c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b640:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b644:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d126      	bne.n	800b69c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	015a      	lsls	r2, r3, #5
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	4413      	add	r3, r2
 800b656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b65a:	691a      	ldr	r2, [r3, #16]
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b664:	69b9      	ldr	r1, [r7, #24]
 800b666:	0148      	lsls	r0, r1, #5
 800b668:	69f9      	ldr	r1, [r7, #28]
 800b66a:	4401      	add	r1, r0
 800b66c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b670:	4313      	orrs	r3, r2
 800b672:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	015a      	lsls	r2, r3, #5
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	4413      	add	r3, r2
 800b67c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	69ba      	ldr	r2, [r7, #24]
 800b684:	0151      	lsls	r1, r2, #5
 800b686:	69fa      	ldr	r2, [r7, #28]
 800b688:	440a      	add	r2, r1
 800b68a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b68e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b692:	6113      	str	r3, [r2, #16]
 800b694:	e03a      	b.n	800b70c <USB_EPStartXfer+0x3e4>
 800b696:	bf00      	nop
 800b698:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	699a      	ldr	r2, [r3, #24]
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	1e5a      	subs	r2, r3, #1
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6b0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	8afa      	ldrh	r2, [r7, #22]
 800b6b8:	fb03 f202 	mul.w	r2, r3, r2
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	015a      	lsls	r2, r3, #5
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6cc:	691a      	ldr	r2, [r3, #16]
 800b6ce:	8afb      	ldrh	r3, [r7, #22]
 800b6d0:	04d9      	lsls	r1, r3, #19
 800b6d2:	4b38      	ldr	r3, [pc, #224]	; (800b7b4 <USB_EPStartXfer+0x48c>)
 800b6d4:	400b      	ands	r3, r1
 800b6d6:	69b9      	ldr	r1, [r7, #24]
 800b6d8:	0148      	lsls	r0, r1, #5
 800b6da:	69f9      	ldr	r1, [r7, #28]
 800b6dc:	4401      	add	r1, r0
 800b6de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	015a      	lsls	r2, r3, #5
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f2:	691a      	ldr	r2, [r3, #16]
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	69db      	ldr	r3, [r3, #28]
 800b6f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6fc:	69b9      	ldr	r1, [r7, #24]
 800b6fe:	0148      	lsls	r0, r1, #5
 800b700:	69f9      	ldr	r1, [r7, #28]
 800b702:	4401      	add	r1, r0
 800b704:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b708:	4313      	orrs	r3, r2
 800b70a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b70c:	79fb      	ldrb	r3, [r7, #7]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d10d      	bne.n	800b72e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d009      	beq.n	800b72e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	6919      	ldr	r1, [r3, #16]
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	015a      	lsls	r2, r3, #5
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	4413      	add	r3, r2
 800b726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b72a:	460a      	mov	r2, r1
 800b72c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	791b      	ldrb	r3, [r3, #4]
 800b732:	2b01      	cmp	r3, #1
 800b734:	d128      	bne.n	800b788 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b742:	2b00      	cmp	r3, #0
 800b744:	d110      	bne.n	800b768 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	015a      	lsls	r2, r3, #5
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	4413      	add	r3, r2
 800b74e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	69ba      	ldr	r2, [r7, #24]
 800b756:	0151      	lsls	r1, r2, #5
 800b758:	69fa      	ldr	r2, [r7, #28]
 800b75a:	440a      	add	r2, r1
 800b75c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b760:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b764:	6013      	str	r3, [r2, #0]
 800b766:	e00f      	b.n	800b788 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	015a      	lsls	r2, r3, #5
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	4413      	add	r3, r2
 800b770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	69ba      	ldr	r2, [r7, #24]
 800b778:	0151      	lsls	r1, r2, #5
 800b77a:	69fa      	ldr	r2, [r7, #28]
 800b77c:	440a      	add	r2, r1
 800b77e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b786:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	015a      	lsls	r2, r3, #5
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	4413      	add	r3, r2
 800b790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	69ba      	ldr	r2, [r7, #24]
 800b798:	0151      	lsls	r1, r2, #5
 800b79a:	69fa      	ldr	r2, [r7, #28]
 800b79c:	440a      	add	r2, r1
 800b79e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b7a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3720      	adds	r7, #32
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	1ff80000 	.word	0x1ff80000

0800b7b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b087      	sub	sp, #28
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	785b      	ldrb	r3, [r3, #1]
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	f040 80ce 	bne.w	800b976 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	699b      	ldr	r3, [r3, #24]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d132      	bne.n	800b848 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	015a      	lsls	r2, r3, #5
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7ee:	691b      	ldr	r3, [r3, #16]
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	0151      	lsls	r1, r2, #5
 800b7f4:	697a      	ldr	r2, [r7, #20]
 800b7f6:	440a      	add	r2, r1
 800b7f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b800:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b804:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	015a      	lsls	r2, r3, #5
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	4413      	add	r3, r2
 800b80e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	0151      	lsls	r1, r2, #5
 800b818:	697a      	ldr	r2, [r7, #20]
 800b81a:	440a      	add	r2, r1
 800b81c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b824:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	015a      	lsls	r2, r3, #5
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	4413      	add	r3, r2
 800b82e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	693a      	ldr	r2, [r7, #16]
 800b836:	0151      	lsls	r1, r2, #5
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	440a      	add	r2, r1
 800b83c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b840:	0cdb      	lsrs	r3, r3, #19
 800b842:	04db      	lsls	r3, r3, #19
 800b844:	6113      	str	r3, [r2, #16]
 800b846:	e04e      	b.n	800b8e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	015a      	lsls	r2, r3, #5
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	4413      	add	r3, r2
 800b850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b854:	691b      	ldr	r3, [r3, #16]
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	0151      	lsls	r1, r2, #5
 800b85a:	697a      	ldr	r2, [r7, #20]
 800b85c:	440a      	add	r2, r1
 800b85e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b862:	0cdb      	lsrs	r3, r3, #19
 800b864:	04db      	lsls	r3, r3, #19
 800b866:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	015a      	lsls	r2, r3, #5
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	4413      	add	r3, r2
 800b870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	0151      	lsls	r1, r2, #5
 800b87a:	697a      	ldr	r2, [r7, #20]
 800b87c:	440a      	add	r2, r1
 800b87e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b882:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b886:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b88a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	699a      	ldr	r2, [r3, #24]
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	429a      	cmp	r2, r3
 800b896:	d903      	bls.n	800b8a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	68da      	ldr	r2, [r3, #12]
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	015a      	lsls	r2, r3, #5
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	693a      	ldr	r2, [r7, #16]
 800b8b0:	0151      	lsls	r1, r2, #5
 800b8b2:	697a      	ldr	r2, [r7, #20]
 800b8b4:	440a      	add	r2, r1
 800b8b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	015a      	lsls	r2, r3, #5
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8cc:	691a      	ldr	r2, [r3, #16]
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	699b      	ldr	r3, [r3, #24]
 800b8d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8d6:	6939      	ldr	r1, [r7, #16]
 800b8d8:	0148      	lsls	r0, r1, #5
 800b8da:	6979      	ldr	r1, [r7, #20]
 800b8dc:	4401      	add	r1, r0
 800b8de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b8e6:	79fb      	ldrb	r3, [r7, #7]
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d11e      	bne.n	800b92a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	695b      	ldr	r3, [r3, #20]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d009      	beq.n	800b908 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	015a      	lsls	r2, r3, #5
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b900:	461a      	mov	r2, r3
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	695b      	ldr	r3, [r3, #20]
 800b906:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	015a      	lsls	r2, r3, #5
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	4413      	add	r3, r2
 800b910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	0151      	lsls	r1, r2, #5
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	440a      	add	r2, r1
 800b91e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b922:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	e097      	b.n	800ba5a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	015a      	lsls	r2, r3, #5
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	4413      	add	r3, r2
 800b932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	0151      	lsls	r1, r2, #5
 800b93c:	697a      	ldr	r2, [r7, #20]
 800b93e:	440a      	add	r2, r1
 800b940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b944:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b948:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f000 8083 	beq.w	800ba5a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b95a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	f003 030f 	and.w	r3, r3, #15
 800b964:	2101      	movs	r1, #1
 800b966:	fa01 f303 	lsl.w	r3, r1, r3
 800b96a:	6979      	ldr	r1, [r7, #20]
 800b96c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b970:	4313      	orrs	r3, r2
 800b972:	634b      	str	r3, [r1, #52]	; 0x34
 800b974:	e071      	b.n	800ba5a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	015a      	lsls	r2, r3, #5
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	4413      	add	r3, r2
 800b97e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	0151      	lsls	r1, r2, #5
 800b988:	697a      	ldr	r2, [r7, #20]
 800b98a:	440a      	add	r2, r1
 800b98c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b990:	0cdb      	lsrs	r3, r3, #19
 800b992:	04db      	lsls	r3, r3, #19
 800b994:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	015a      	lsls	r2, r3, #5
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	4413      	add	r3, r2
 800b99e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9a2:	691b      	ldr	r3, [r3, #16]
 800b9a4:	693a      	ldr	r2, [r7, #16]
 800b9a6:	0151      	lsls	r1, r2, #5
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	440a      	add	r2, r1
 800b9ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b9b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b9b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d003      	beq.n	800b9ca <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	68da      	ldr	r2, [r3, #12]
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	68da      	ldr	r2, [r3, #12]
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	015a      	lsls	r2, r3, #5
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	4413      	add	r3, r2
 800b9da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	0151      	lsls	r1, r2, #5
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	440a      	add	r2, r1
 800b9e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	015a      	lsls	r2, r3, #5
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9fe:	691a      	ldr	r2, [r3, #16]
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	69db      	ldr	r3, [r3, #28]
 800ba04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba08:	6939      	ldr	r1, [r7, #16]
 800ba0a:	0148      	lsls	r0, r1, #5
 800ba0c:	6979      	ldr	r1, [r7, #20]
 800ba0e:	4401      	add	r1, r0
 800ba10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba14:	4313      	orrs	r3, r2
 800ba16:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ba18:	79fb      	ldrb	r3, [r7, #7]
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d10d      	bne.n	800ba3a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	691b      	ldr	r3, [r3, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d009      	beq.n	800ba3a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	6919      	ldr	r1, [r3, #16]
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	015a      	lsls	r2, r3, #5
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	4413      	add	r3, r2
 800ba32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba36:	460a      	mov	r2, r1
 800ba38:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	015a      	lsls	r2, r3, #5
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	4413      	add	r3, r2
 800ba42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	693a      	ldr	r2, [r7, #16]
 800ba4a:	0151      	lsls	r1, r2, #5
 800ba4c:	697a      	ldr	r2, [r7, #20]
 800ba4e:	440a      	add	r2, r1
 800ba50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ba58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	371c      	adds	r7, #28
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b087      	sub	sp, #28
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ba72:	2300      	movs	r3, #0
 800ba74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ba76:	2300      	movs	r3, #0
 800ba78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	785b      	ldrb	r3, [r3, #1]
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d14a      	bne.n	800bb1c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba9e:	f040 8086 	bne.w	800bbae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	015a      	lsls	r2, r3, #5
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	4413      	add	r3, r2
 800baac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	7812      	ldrb	r2, [r2, #0]
 800bab6:	0151      	lsls	r1, r2, #5
 800bab8:	693a      	ldr	r2, [r7, #16]
 800baba:	440a      	add	r2, r1
 800babc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bac0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bac4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	015a      	lsls	r2, r3, #5
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	4413      	add	r3, r2
 800bad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	7812      	ldrb	r2, [r2, #0]
 800bada:	0151      	lsls	r1, r2, #5
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	440a      	add	r2, r1
 800bae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bae8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	3301      	adds	r3, #1
 800baee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f242 7210 	movw	r2, #10000	; 0x2710
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d902      	bls.n	800bb00 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bafa:	2301      	movs	r3, #1
 800bafc:	75fb      	strb	r3, [r7, #23]
          break;
 800bafe:	e056      	b.n	800bbae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	015a      	lsls	r2, r3, #5
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	4413      	add	r3, r2
 800bb0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb18:	d0e7      	beq.n	800baea <USB_EPStopXfer+0x82>
 800bb1a:	e048      	b.n	800bbae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	015a      	lsls	r2, r3, #5
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	4413      	add	r3, r2
 800bb26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb34:	d13b      	bne.n	800bbae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	015a      	lsls	r2, r3, #5
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	4413      	add	r3, r2
 800bb40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	683a      	ldr	r2, [r7, #0]
 800bb48:	7812      	ldrb	r2, [r2, #0]
 800bb4a:	0151      	lsls	r1, r2, #5
 800bb4c:	693a      	ldr	r2, [r7, #16]
 800bb4e:	440a      	add	r2, r1
 800bb50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb58:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	7812      	ldrb	r2, [r2, #0]
 800bb6e:	0151      	lsls	r1, r2, #5
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	440a      	add	r2, r1
 800bb74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	3301      	adds	r3, #1
 800bb82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f242 7210 	movw	r2, #10000	; 0x2710
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d902      	bls.n	800bb94 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	75fb      	strb	r3, [r7, #23]
          break;
 800bb92:	e00c      	b.n	800bbae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	015a      	lsls	r2, r3, #5
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbac:	d0e7      	beq.n	800bb7e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bbae:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	371c      	adds	r7, #28
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b089      	sub	sp, #36	; 0x24
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	4611      	mov	r1, r2
 800bbc8:	461a      	mov	r2, r3
 800bbca:	460b      	mov	r3, r1
 800bbcc:	71fb      	strb	r3, [r7, #7]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bbda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d123      	bne.n	800bc2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bbe2:	88bb      	ldrh	r3, [r7, #4]
 800bbe4:	3303      	adds	r3, #3
 800bbe6:	089b      	lsrs	r3, r3, #2
 800bbe8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bbea:	2300      	movs	r3, #0
 800bbec:	61bb      	str	r3, [r7, #24]
 800bbee:	e018      	b.n	800bc22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bbf0:	79fb      	ldrb	r3, [r7, #7]
 800bbf2:	031a      	lsls	r2, r3, #12
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	3301      	adds	r3, #1
 800bc08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	3301      	adds	r3, #1
 800bc14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	61bb      	str	r3, [r7, #24]
 800bc22:	69ba      	ldr	r2, [r7, #24]
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d3e2      	bcc.n	800bbf0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3724      	adds	r7, #36	; 0x24
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b08b      	sub	sp, #44	; 0x2c
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	4613      	mov	r3, r2
 800bc44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bc4e:	88fb      	ldrh	r3, [r7, #6]
 800bc50:	089b      	lsrs	r3, r3, #2
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bc56:	88fb      	ldrh	r3, [r7, #6]
 800bc58:	f003 0303 	and.w	r3, r3, #3
 800bc5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bc5e:	2300      	movs	r3, #0
 800bc60:	623b      	str	r3, [r7, #32]
 800bc62:	e014      	b.n	800bc8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6e:	601a      	str	r2, [r3, #0]
    pDest++;
 800bc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc72:	3301      	adds	r3, #1
 800bc74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc78:	3301      	adds	r3, #1
 800bc7a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7e:	3301      	adds	r3, #1
 800bc80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc84:	3301      	adds	r3, #1
 800bc86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bc88:	6a3b      	ldr	r3, [r7, #32]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	623b      	str	r3, [r7, #32]
 800bc8e:	6a3a      	ldr	r2, [r7, #32]
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d3e6      	bcc.n	800bc64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bc96:	8bfb      	ldrh	r3, [r7, #30]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d01e      	beq.n	800bcda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bca6:	461a      	mov	r2, r3
 800bca8:	f107 0310 	add.w	r3, r7, #16
 800bcac:	6812      	ldr	r2, [r2, #0]
 800bcae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	6a3b      	ldr	r3, [r7, #32]
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc0:	701a      	strb	r2, [r3, #0]
      i++;
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	623b      	str	r3, [r7, #32]
      pDest++;
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcca:	3301      	adds	r3, #1
 800bccc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bcce:	8bfb      	ldrh	r3, [r7, #30]
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bcd4:	8bfb      	ldrh	r3, [r7, #30]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d1ea      	bne.n	800bcb0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	372c      	adds	r7, #44	; 0x2c
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	785b      	ldrb	r3, [r3, #1]
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d12c      	bne.n	800bd5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	015a      	lsls	r2, r3, #5
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	db12      	blt.n	800bd3c <USB_EPSetStall+0x54>
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00f      	beq.n	800bd3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	015a      	lsls	r2, r3, #5
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	4413      	add	r3, r2
 800bd24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68ba      	ldr	r2, [r7, #8]
 800bd2c:	0151      	lsls	r1, r2, #5
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	440a      	add	r2, r1
 800bd32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bd3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	015a      	lsls	r2, r3, #5
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	0151      	lsls	r1, r2, #5
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	440a      	add	r2, r1
 800bd52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	e02b      	b.n	800bdb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	015a      	lsls	r2, r3, #5
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	4413      	add	r3, r2
 800bd66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	db12      	blt.n	800bd96 <USB_EPSetStall+0xae>
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d00f      	beq.n	800bd96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	68ba      	ldr	r2, [r7, #8]
 800bd86:	0151      	lsls	r1, r2, #5
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	440a      	add	r2, r1
 800bd8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bd94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	015a      	lsls	r2, r3, #5
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	68ba      	ldr	r2, [r7, #8]
 800bda6:	0151      	lsls	r1, r2, #5
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	440a      	add	r2, r1
 800bdac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bdb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	785b      	ldrb	r3, [r3, #1]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d128      	bne.n	800be32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	015a      	lsls	r2, r3, #5
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	4413      	add	r3, r2
 800bde8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	68ba      	ldr	r2, [r7, #8]
 800bdf0:	0151      	lsls	r1, r2, #5
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	440a      	add	r2, r1
 800bdf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bdfe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	791b      	ldrb	r3, [r3, #4]
 800be04:	2b03      	cmp	r3, #3
 800be06:	d003      	beq.n	800be10 <USB_EPClearStall+0x4c>
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	791b      	ldrb	r3, [r3, #4]
 800be0c:	2b02      	cmp	r3, #2
 800be0e:	d138      	bne.n	800be82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	015a      	lsls	r2, r3, #5
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	4413      	add	r3, r2
 800be18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	0151      	lsls	r1, r2, #5
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	440a      	add	r2, r1
 800be26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be2e:	6013      	str	r3, [r2, #0]
 800be30:	e027      	b.n	800be82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	015a      	lsls	r2, r3, #5
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	4413      	add	r3, r2
 800be3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	0151      	lsls	r1, r2, #5
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	440a      	add	r2, r1
 800be48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	791b      	ldrb	r3, [r3, #4]
 800be56:	2b03      	cmp	r3, #3
 800be58:	d003      	beq.n	800be62 <USB_EPClearStall+0x9e>
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	791b      	ldrb	r3, [r3, #4]
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d10f      	bne.n	800be82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	015a      	lsls	r2, r3, #5
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	4413      	add	r3, r2
 800be6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	0151      	lsls	r1, r2, #5
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	440a      	add	r2, r1
 800be78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3714      	adds	r7, #20
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	460b      	mov	r3, r1
 800be9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800beae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800beb2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	78fb      	ldrb	r3, [r7, #3]
 800bebe:	011b      	lsls	r3, r3, #4
 800bec0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bec4:	68f9      	ldr	r1, [r7, #12]
 800bec6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800beca:	4313      	orrs	r3, r2
 800becc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bece:	2300      	movs	r3, #0
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bef6:	f023 0303 	bic.w	r3, r3, #3
 800befa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf0a:	f023 0302 	bic.w	r3, r3, #2
 800bf0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3714      	adds	r7, #20
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr

0800bf1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf1e:	b480      	push	{r7}
 800bf20:	b085      	sub	sp, #20
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf38:	f023 0303 	bic.w	r3, r3, #3
 800bf3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	68fa      	ldr	r2, [r7, #12]
 800bf48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf4c:	f043 0302 	orr.w	r3, r3, #2
 800bf50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	695b      	ldr	r3, [r3, #20]
 800bf6c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	68fa      	ldr	r2, [r7, #12]
 800bf74:	4013      	ands	r3, r2
 800bf76:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bf78:	68fb      	ldr	r3, [r7, #12]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3714      	adds	r7, #20
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr

0800bf86 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf86:	b480      	push	{r7}
 800bf88:	b085      	sub	sp, #20
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfa2:	69db      	ldr	r3, [r3, #28]
 800bfa4:	68ba      	ldr	r2, [r7, #8]
 800bfa6:	4013      	ands	r3, r2
 800bfa8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	0c1b      	lsrs	r3, r3, #16
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfba:	b480      	push	{r7}
 800bfbc:	b085      	sub	sp, #20
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfcc:	699b      	ldr	r3, [r3, #24]
 800bfce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfd6:	69db      	ldr	r3, [r3, #28]
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	4013      	ands	r3, r2
 800bfdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	b29b      	uxth	r3, r3
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3714      	adds	r7, #20
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr

0800bfee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bfee:	b480      	push	{r7}
 800bff0:	b085      	sub	sp, #20
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	460b      	mov	r3, r1
 800bff8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bffe:	78fb      	ldrb	r3, [r7, #3]
 800c000:	015a      	lsls	r2, r3, #5
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	4413      	add	r3, r2
 800c006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c014:	695b      	ldr	r3, [r3, #20]
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	4013      	ands	r3, r2
 800c01a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c01c:	68bb      	ldr	r3, [r7, #8]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3714      	adds	r7, #20
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr

0800c02a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c02a:	b480      	push	{r7}
 800c02c:	b087      	sub	sp, #28
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
 800c032:	460b      	mov	r3, r1
 800c034:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c04c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c04e:	78fb      	ldrb	r3, [r7, #3]
 800c050:	f003 030f 	and.w	r3, r3, #15
 800c054:	68fa      	ldr	r2, [r7, #12]
 800c056:	fa22 f303 	lsr.w	r3, r2, r3
 800c05a:	01db      	lsls	r3, r3, #7
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	693a      	ldr	r2, [r7, #16]
 800c060:	4313      	orrs	r3, r2
 800c062:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c064:	78fb      	ldrb	r3, [r7, #3]
 800c066:	015a      	lsls	r2, r3, #5
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	4413      	add	r3, r2
 800c06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	693a      	ldr	r2, [r7, #16]
 800c074:	4013      	ands	r3, r2
 800c076:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c078:	68bb      	ldr	r3, [r7, #8]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	371c      	adds	r7, #28
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c086:	b480      	push	{r7}
 800c088:	b083      	sub	sp, #12
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	f003 0301 	and.w	r3, r3, #1
}
 800c096:	4618      	mov	r0, r3
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c0a2:	b480      	push	{r7}
 800c0a4:	b085      	sub	sp, #20
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68fa      	ldr	r2, [r7, #12]
 800c0b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c0c0:	f023 0307 	bic.w	r3, r3, #7
 800c0c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3714      	adds	r7, #20
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b087      	sub	sp, #28
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	607a      	str	r2, [r7, #4]
 800c0f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	333c      	adds	r3, #60	; 0x3c
 800c0fe:	3304      	adds	r3, #4
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	4a26      	ldr	r2, [pc, #152]	; (800c1a0 <USB_EP0_OutStart+0xb8>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d90a      	bls.n	800c122 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c11c:	d101      	bne.n	800c122 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c11e:	2300      	movs	r3, #0
 800c120:	e037      	b.n	800c192 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c128:	461a      	mov	r2, r3
 800c12a:	2300      	movs	r3, #0
 800c12c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	697a      	ldr	r2, [r7, #20]
 800c138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c13c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	697a      	ldr	r2, [r7, #20]
 800c14c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c150:	f043 0318 	orr.w	r3, r3, #24
 800c154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c164:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c168:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c16a:	7afb      	ldrb	r3, [r7, #11]
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d10f      	bne.n	800c190 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c176:	461a      	mov	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	697a      	ldr	r2, [r7, #20]
 800c186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c18a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c18e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	371c      	adds	r7, #28
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	4f54300a 	.word	0x4f54300a

0800c1a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	4a13      	ldr	r2, [pc, #76]	; (800c208 <USB_CoreReset+0x64>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d901      	bls.n	800c1c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c1be:	2303      	movs	r3, #3
 800c1c0:	e01b      	b.n	800c1fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	daf2      	bge.n	800c1b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	f043 0201 	orr.w	r2, r3, #1
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4a09      	ldr	r2, [pc, #36]	; (800c208 <USB_CoreReset+0x64>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d901      	bls.n	800c1ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	e006      	b.n	800c1fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	f003 0301 	and.w	r3, r3, #1
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d0f0      	beq.n	800c1da <USB_CoreReset+0x36>

  return HAL_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3714      	adds	r7, #20
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	00030d40 	.word	0x00030d40

0800c20c <USBD_CDC_Init>:
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	460b      	mov	r3, r1
 800c216:	70fb      	strb	r3, [r7, #3]
 800c218:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c21c:	f002 fca0 	bl	800eb60 <USBD_static_malloc>
 800c220:	60f8      	str	r0, [r7, #12]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d109      	bne.n	800c23c <USBD_CDC_Init+0x30>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	32b0      	adds	r2, #176	; 0xb0
 800c232:	2100      	movs	r1, #0
 800c234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c238:	2302      	movs	r3, #2
 800c23a:	e0d4      	b.n	800c3e6 <USBD_CDC_Init+0x1da>
 800c23c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c240:	2100      	movs	r1, #0
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f002 fd22 	bl	800ec8c <memset>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	32b0      	adds	r2, #176	; 0xb0
 800c252:	68f9      	ldr	r1, [r7, #12]
 800c254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	32b0      	adds	r2, #176	; 0xb0
 800c262:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	7c1b      	ldrb	r3, [r3, #16]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d138      	bne.n	800c2e6 <USBD_CDC_Init+0xda>
 800c274:	4b5e      	ldr	r3, [pc, #376]	; (800c3f0 <USBD_CDC_Init+0x1e4>)
 800c276:	7819      	ldrb	r1, [r3, #0]
 800c278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c27c:	2202      	movs	r2, #2
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f002 fb4b 	bl	800e91a <USBD_LL_OpenEP>
 800c284:	4b5a      	ldr	r3, [pc, #360]	; (800c3f0 <USBD_CDC_Init+0x1e4>)
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	f003 020f 	and.w	r2, r3, #15
 800c28c:	6879      	ldr	r1, [r7, #4]
 800c28e:	4613      	mov	r3, r2
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4413      	add	r3, r2
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	440b      	add	r3, r1
 800c298:	3324      	adds	r3, #36	; 0x24
 800c29a:	2201      	movs	r2, #1
 800c29c:	801a      	strh	r2, [r3, #0]
 800c29e:	4b55      	ldr	r3, [pc, #340]	; (800c3f4 <USBD_CDC_Init+0x1e8>)
 800c2a0:	7819      	ldrb	r1, [r3, #0]
 800c2a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f002 fb36 	bl	800e91a <USBD_LL_OpenEP>
 800c2ae:	4b51      	ldr	r3, [pc, #324]	; (800c3f4 <USBD_CDC_Init+0x1e8>)
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	f003 020f 	and.w	r2, r3, #15
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	4613      	mov	r3, r2
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	4413      	add	r3, r2
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	440b      	add	r3, r1
 800c2c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	801a      	strh	r2, [r3, #0]
 800c2ca:	4b4b      	ldr	r3, [pc, #300]	; (800c3f8 <USBD_CDC_Init+0x1ec>)
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	f003 020f 	and.w	r2, r3, #15
 800c2d2:	6879      	ldr	r1, [r7, #4]
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4413      	add	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	440b      	add	r3, r1
 800c2de:	3326      	adds	r3, #38	; 0x26
 800c2e0:	2210      	movs	r2, #16
 800c2e2:	801a      	strh	r2, [r3, #0]
 800c2e4:	e035      	b.n	800c352 <USBD_CDC_Init+0x146>
 800c2e6:	4b42      	ldr	r3, [pc, #264]	; (800c3f0 <USBD_CDC_Init+0x1e4>)
 800c2e8:	7819      	ldrb	r1, [r3, #0]
 800c2ea:	2340      	movs	r3, #64	; 0x40
 800c2ec:	2202      	movs	r2, #2
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f002 fb13 	bl	800e91a <USBD_LL_OpenEP>
 800c2f4:	4b3e      	ldr	r3, [pc, #248]	; (800c3f0 <USBD_CDC_Init+0x1e4>)
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	f003 020f 	and.w	r2, r3, #15
 800c2fc:	6879      	ldr	r1, [r7, #4]
 800c2fe:	4613      	mov	r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	4413      	add	r3, r2
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	440b      	add	r3, r1
 800c308:	3324      	adds	r3, #36	; 0x24
 800c30a:	2201      	movs	r2, #1
 800c30c:	801a      	strh	r2, [r3, #0]
 800c30e:	4b39      	ldr	r3, [pc, #228]	; (800c3f4 <USBD_CDC_Init+0x1e8>)
 800c310:	7819      	ldrb	r1, [r3, #0]
 800c312:	2340      	movs	r3, #64	; 0x40
 800c314:	2202      	movs	r2, #2
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f002 faff 	bl	800e91a <USBD_LL_OpenEP>
 800c31c:	4b35      	ldr	r3, [pc, #212]	; (800c3f4 <USBD_CDC_Init+0x1e8>)
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	f003 020f 	and.w	r2, r3, #15
 800c324:	6879      	ldr	r1, [r7, #4]
 800c326:	4613      	mov	r3, r2
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4413      	add	r3, r2
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	440b      	add	r3, r1
 800c330:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c334:	2201      	movs	r2, #1
 800c336:	801a      	strh	r2, [r3, #0]
 800c338:	4b2f      	ldr	r3, [pc, #188]	; (800c3f8 <USBD_CDC_Init+0x1ec>)
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	f003 020f 	and.w	r2, r3, #15
 800c340:	6879      	ldr	r1, [r7, #4]
 800c342:	4613      	mov	r3, r2
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	4413      	add	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	440b      	add	r3, r1
 800c34c:	3326      	adds	r3, #38	; 0x26
 800c34e:	2210      	movs	r2, #16
 800c350:	801a      	strh	r2, [r3, #0]
 800c352:	4b29      	ldr	r3, [pc, #164]	; (800c3f8 <USBD_CDC_Init+0x1ec>)
 800c354:	7819      	ldrb	r1, [r3, #0]
 800c356:	2308      	movs	r3, #8
 800c358:	2203      	movs	r2, #3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f002 fadd 	bl	800e91a <USBD_LL_OpenEP>
 800c360:	4b25      	ldr	r3, [pc, #148]	; (800c3f8 <USBD_CDC_Init+0x1ec>)
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	f003 020f 	and.w	r2, r3, #15
 800c368:	6879      	ldr	r1, [r7, #4]
 800c36a:	4613      	mov	r3, r2
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	4413      	add	r3, r2
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	440b      	add	r3, r1
 800c374:	3324      	adds	r3, #36	; 0x24
 800c376:	2201      	movs	r2, #1
 800c378:	801a      	strh	r2, [r3, #0]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	33b0      	adds	r3, #176	; 0xb0
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	4413      	add	r3, r2
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4798      	blx	r3
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2200      	movs	r2, #0
 800c39a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d101      	bne.n	800c3b4 <USBD_CDC_Init+0x1a8>
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	e018      	b.n	800c3e6 <USBD_CDC_Init+0x1da>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	7c1b      	ldrb	r3, [r3, #16]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10a      	bne.n	800c3d2 <USBD_CDC_Init+0x1c6>
 800c3bc:	4b0d      	ldr	r3, [pc, #52]	; (800c3f4 <USBD_CDC_Init+0x1e8>)
 800c3be:	7819      	ldrb	r1, [r3, #0]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c3c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f002 fb94 	bl	800eaf8 <USBD_LL_PrepareReceive>
 800c3d0:	e008      	b.n	800c3e4 <USBD_CDC_Init+0x1d8>
 800c3d2:	4b08      	ldr	r3, [pc, #32]	; (800c3f4 <USBD_CDC_Init+0x1e8>)
 800c3d4:	7819      	ldrb	r1, [r3, #0]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c3dc:	2340      	movs	r3, #64	; 0x40
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f002 fb8a 	bl	800eaf8 <USBD_LL_PrepareReceive>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3710      	adds	r7, #16
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	200000a7 	.word	0x200000a7
 800c3f4:	200000a8 	.word	0x200000a8
 800c3f8:	200000a9 	.word	0x200000a9

0800c3fc <USBD_CDC_DeInit>:
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	460b      	mov	r3, r1
 800c406:	70fb      	strb	r3, [r7, #3]
 800c408:	4b3a      	ldr	r3, [pc, #232]	; (800c4f4 <USBD_CDC_DeInit+0xf8>)
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	4619      	mov	r1, r3
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f002 faa9 	bl	800e966 <USBD_LL_CloseEP>
 800c414:	4b37      	ldr	r3, [pc, #220]	; (800c4f4 <USBD_CDC_DeInit+0xf8>)
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	f003 020f 	and.w	r2, r3, #15
 800c41c:	6879      	ldr	r1, [r7, #4]
 800c41e:	4613      	mov	r3, r2
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	4413      	add	r3, r2
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	440b      	add	r3, r1
 800c428:	3324      	adds	r3, #36	; 0x24
 800c42a:	2200      	movs	r2, #0
 800c42c:	801a      	strh	r2, [r3, #0]
 800c42e:	4b32      	ldr	r3, [pc, #200]	; (800c4f8 <USBD_CDC_DeInit+0xfc>)
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	4619      	mov	r1, r3
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f002 fa96 	bl	800e966 <USBD_LL_CloseEP>
 800c43a:	4b2f      	ldr	r3, [pc, #188]	; (800c4f8 <USBD_CDC_DeInit+0xfc>)
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	f003 020f 	and.w	r2, r3, #15
 800c442:	6879      	ldr	r1, [r7, #4]
 800c444:	4613      	mov	r3, r2
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4413      	add	r3, r2
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	440b      	add	r3, r1
 800c44e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c452:	2200      	movs	r2, #0
 800c454:	801a      	strh	r2, [r3, #0]
 800c456:	4b29      	ldr	r3, [pc, #164]	; (800c4fc <USBD_CDC_DeInit+0x100>)
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	4619      	mov	r1, r3
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f002 fa82 	bl	800e966 <USBD_LL_CloseEP>
 800c462:	4b26      	ldr	r3, [pc, #152]	; (800c4fc <USBD_CDC_DeInit+0x100>)
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	f003 020f 	and.w	r2, r3, #15
 800c46a:	6879      	ldr	r1, [r7, #4]
 800c46c:	4613      	mov	r3, r2
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	4413      	add	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	440b      	add	r3, r1
 800c476:	3324      	adds	r3, #36	; 0x24
 800c478:	2200      	movs	r2, #0
 800c47a:	801a      	strh	r2, [r3, #0]
 800c47c:	4b1f      	ldr	r3, [pc, #124]	; (800c4fc <USBD_CDC_DeInit+0x100>)
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	f003 020f 	and.w	r2, r3, #15
 800c484:	6879      	ldr	r1, [r7, #4]
 800c486:	4613      	mov	r3, r2
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	4413      	add	r3, r2
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	440b      	add	r3, r1
 800c490:	3326      	adds	r3, #38	; 0x26
 800c492:	2200      	movs	r2, #0
 800c494:	801a      	strh	r2, [r3, #0]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	32b0      	adds	r2, #176	; 0xb0
 800c4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d01f      	beq.n	800c4e8 <USBD_CDC_DeInit+0xec>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	33b0      	adds	r3, #176	; 0xb0
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	4413      	add	r3, r2
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	4798      	blx	r3
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	32b0      	adds	r2, #176	; 0xb0
 800c4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f002 fb56 	bl	800eb7c <USBD_static_free>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	32b0      	adds	r2, #176	; 0xb0
 800c4da:	2100      	movs	r1, #0
 800c4dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	200000a7 	.word	0x200000a7
 800c4f8:	200000a8 	.word	0x200000a8
 800c4fc:	200000a9 	.word	0x200000a9

0800c500 <USBD_CDC_Setup>:
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	32b0      	adds	r2, #176	; 0xb0
 800c514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c518:	613b      	str	r3, [r7, #16]
 800c51a:	2300      	movs	r3, #0
 800c51c:	737b      	strb	r3, [r7, #13]
 800c51e:	2300      	movs	r3, #0
 800c520:	817b      	strh	r3, [r7, #10]
 800c522:	2300      	movs	r3, #0
 800c524:	75fb      	strb	r3, [r7, #23]
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d101      	bne.n	800c530 <USBD_CDC_Setup+0x30>
 800c52c:	2303      	movs	r3, #3
 800c52e:	e0bf      	b.n	800c6b0 <USBD_CDC_Setup+0x1b0>
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d050      	beq.n	800c5de <USBD_CDC_Setup+0xde>
 800c53c:	2b20      	cmp	r3, #32
 800c53e:	f040 80af 	bne.w	800c6a0 <USBD_CDC_Setup+0x1a0>
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	88db      	ldrh	r3, [r3, #6]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d03a      	beq.n	800c5c0 <USBD_CDC_Setup+0xc0>
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	b25b      	sxtb	r3, r3
 800c550:	2b00      	cmp	r3, #0
 800c552:	da1b      	bge.n	800c58c <USBD_CDC_Setup+0x8c>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	33b0      	adds	r3, #176	; 0xb0
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	7850      	ldrb	r0, [r2, #1]
 800c56a:	6939      	ldr	r1, [r7, #16]
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	88d2      	ldrh	r2, [r2, #6]
 800c570:	4798      	blx	r3
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	88db      	ldrh	r3, [r3, #6]
 800c576:	2b07      	cmp	r3, #7
 800c578:	bf28      	it	cs
 800c57a:	2307      	movcs	r3, #7
 800c57c:	81fb      	strh	r3, [r7, #14]
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	89fa      	ldrh	r2, [r7, #14]
 800c582:	4619      	mov	r1, r3
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f001 fd89 	bl	800e09c <USBD_CtlSendData>
 800c58a:	e090      	b.n	800c6ae <USBD_CDC_Setup+0x1ae>
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	785a      	ldrb	r2, [r3, #1]
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	88db      	ldrh	r3, [r3, #6]
 800c59a:	2b3f      	cmp	r3, #63	; 0x3f
 800c59c:	d803      	bhi.n	800c5a6 <USBD_CDC_Setup+0xa6>
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	88db      	ldrh	r3, [r3, #6]
 800c5a2:	b2da      	uxtb	r2, r3
 800c5a4:	e000      	b.n	800c5a8 <USBD_CDC_Setup+0xa8>
 800c5a6:	2240      	movs	r2, #64	; 0x40
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 800c5ae:	6939      	ldr	r1, [r7, #16]
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f001 fd9b 	bl	800e0f4 <USBD_CtlPrepareRx>
 800c5be:	e076      	b.n	800c6ae <USBD_CDC_Setup+0x1ae>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	33b0      	adds	r3, #176	; 0xb0
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4413      	add	r3, r2
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	683a      	ldr	r2, [r7, #0]
 800c5d4:	7850      	ldrb	r0, [r2, #1]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	4798      	blx	r3
 800c5dc:	e067      	b.n	800c6ae <USBD_CDC_Setup+0x1ae>
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	785b      	ldrb	r3, [r3, #1]
 800c5e2:	2b0b      	cmp	r3, #11
 800c5e4:	d851      	bhi.n	800c68a <USBD_CDC_Setup+0x18a>
 800c5e6:	a201      	add	r2, pc, #4	; (adr r2, 800c5ec <USBD_CDC_Setup+0xec>)
 800c5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ec:	0800c61d 	.word	0x0800c61d
 800c5f0:	0800c699 	.word	0x0800c699
 800c5f4:	0800c68b 	.word	0x0800c68b
 800c5f8:	0800c68b 	.word	0x0800c68b
 800c5fc:	0800c68b 	.word	0x0800c68b
 800c600:	0800c68b 	.word	0x0800c68b
 800c604:	0800c68b 	.word	0x0800c68b
 800c608:	0800c68b 	.word	0x0800c68b
 800c60c:	0800c68b 	.word	0x0800c68b
 800c610:	0800c68b 	.word	0x0800c68b
 800c614:	0800c647 	.word	0x0800c647
 800c618:	0800c671 	.word	0x0800c671
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c622:	b2db      	uxtb	r3, r3
 800c624:	2b03      	cmp	r3, #3
 800c626:	d107      	bne.n	800c638 <USBD_CDC_Setup+0x138>
 800c628:	f107 030a 	add.w	r3, r7, #10
 800c62c:	2202      	movs	r2, #2
 800c62e:	4619      	mov	r1, r3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f001 fd33 	bl	800e09c <USBD_CtlSendData>
 800c636:	e032      	b.n	800c69e <USBD_CDC_Setup+0x19e>
 800c638:	6839      	ldr	r1, [r7, #0]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f001 fcbd 	bl	800dfba <USBD_CtlError>
 800c640:	2303      	movs	r3, #3
 800c642:	75fb      	strb	r3, [r7, #23]
 800c644:	e02b      	b.n	800c69e <USBD_CDC_Setup+0x19e>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	2b03      	cmp	r3, #3
 800c650:	d107      	bne.n	800c662 <USBD_CDC_Setup+0x162>
 800c652:	f107 030d 	add.w	r3, r7, #13
 800c656:	2201      	movs	r2, #1
 800c658:	4619      	mov	r1, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f001 fd1e 	bl	800e09c <USBD_CtlSendData>
 800c660:	e01d      	b.n	800c69e <USBD_CDC_Setup+0x19e>
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f001 fca8 	bl	800dfba <USBD_CtlError>
 800c66a:	2303      	movs	r3, #3
 800c66c:	75fb      	strb	r3, [r7, #23]
 800c66e:	e016      	b.n	800c69e <USBD_CDC_Setup+0x19e>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c676:	b2db      	uxtb	r3, r3
 800c678:	2b03      	cmp	r3, #3
 800c67a:	d00f      	beq.n	800c69c <USBD_CDC_Setup+0x19c>
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f001 fc9b 	bl	800dfba <USBD_CtlError>
 800c684:	2303      	movs	r3, #3
 800c686:	75fb      	strb	r3, [r7, #23]
 800c688:	e008      	b.n	800c69c <USBD_CDC_Setup+0x19c>
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f001 fc94 	bl	800dfba <USBD_CtlError>
 800c692:	2303      	movs	r3, #3
 800c694:	75fb      	strb	r3, [r7, #23]
 800c696:	e002      	b.n	800c69e <USBD_CDC_Setup+0x19e>
 800c698:	bf00      	nop
 800c69a:	e008      	b.n	800c6ae <USBD_CDC_Setup+0x1ae>
 800c69c:	bf00      	nop
 800c69e:	e006      	b.n	800c6ae <USBD_CDC_Setup+0x1ae>
 800c6a0:	6839      	ldr	r1, [r7, #0]
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f001 fc89 	bl	800dfba <USBD_CtlError>
 800c6a8:	2303      	movs	r3, #3
 800c6aa:	75fb      	strb	r3, [r7, #23]
 800c6ac:	bf00      	nop
 800c6ae:	7dfb      	ldrb	r3, [r7, #23]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3718      	adds	r7, #24
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <USBD_CDC_DataIn>:
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	70fb      	strb	r3, [r7, #3]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c6ca:	60fb      	str	r3, [r7, #12]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	32b0      	adds	r2, #176	; 0xb0
 800c6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d101      	bne.n	800c6e2 <USBD_CDC_DataIn+0x2a>
 800c6de:	2303      	movs	r3, #3
 800c6e0:	e065      	b.n	800c7ae <USBD_CDC_DataIn+0xf6>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	32b0      	adds	r2, #176	; 0xb0
 800c6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6f0:	60bb      	str	r3, [r7, #8]
 800c6f2:	78fb      	ldrb	r3, [r7, #3]
 800c6f4:	f003 020f 	and.w	r2, r3, #15
 800c6f8:	6879      	ldr	r1, [r7, #4]
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	440b      	add	r3, r1
 800c704:	3318      	adds	r3, #24
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d02f      	beq.n	800c76c <USBD_CDC_DataIn+0xb4>
 800c70c:	78fb      	ldrb	r3, [r7, #3]
 800c70e:	f003 020f 	and.w	r2, r3, #15
 800c712:	6879      	ldr	r1, [r7, #4]
 800c714:	4613      	mov	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	440b      	add	r3, r1
 800c71e:	3318      	adds	r3, #24
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	78fb      	ldrb	r3, [r7, #3]
 800c724:	f003 010f 	and.w	r1, r3, #15
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	460b      	mov	r3, r1
 800c72c:	00db      	lsls	r3, r3, #3
 800c72e:	440b      	add	r3, r1
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	4403      	add	r3, r0
 800c734:	3348      	adds	r3, #72	; 0x48
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	fbb2 f1f3 	udiv	r1, r2, r3
 800c73c:	fb01 f303 	mul.w	r3, r1, r3
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	2b00      	cmp	r3, #0
 800c744:	d112      	bne.n	800c76c <USBD_CDC_DataIn+0xb4>
 800c746:	78fb      	ldrb	r3, [r7, #3]
 800c748:	f003 020f 	and.w	r2, r3, #15
 800c74c:	6879      	ldr	r1, [r7, #4]
 800c74e:	4613      	mov	r3, r2
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	4413      	add	r3, r2
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	440b      	add	r3, r1
 800c758:	3318      	adds	r3, #24
 800c75a:	2200      	movs	r2, #0
 800c75c:	601a      	str	r2, [r3, #0]
 800c75e:	78f9      	ldrb	r1, [r7, #3]
 800c760:	2300      	movs	r3, #0
 800c762:	2200      	movs	r2, #0
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f002 f9a6 	bl	800eab6 <USBD_LL_Transmit>
 800c76a:	e01f      	b.n	800c7ac <USBD_CDC_DataIn+0xf4>
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	2200      	movs	r2, #0
 800c770:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	33b0      	adds	r3, #176	; 0xb0
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	4413      	add	r3, r2
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d010      	beq.n	800c7ac <USBD_CDC_DataIn+0xf4>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	33b0      	adds	r3, #176	; 0xb0
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	4413      	add	r3, r2
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c7a8:	78fa      	ldrb	r2, [r7, #3]
 800c7aa:	4798      	blx	r3
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <USBD_CDC_DataOut>:
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b084      	sub	sp, #16
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	460b      	mov	r3, r1
 800c7c0:	70fb      	strb	r3, [r7, #3]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	32b0      	adds	r2, #176	; 0xb0
 800c7cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d0:	60fb      	str	r3, [r7, #12]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	32b0      	adds	r2, #176	; 0xb0
 800c7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d101      	bne.n	800c7e8 <USBD_CDC_DataOut+0x32>
 800c7e4:	2303      	movs	r3, #3
 800c7e6:	e01a      	b.n	800c81e <USBD_CDC_DataOut+0x68>
 800c7e8:	78fb      	ldrb	r3, [r7, #3]
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f002 f9a4 	bl	800eb3a <USBD_LL_GetRxDataSize>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	33b0      	adds	r3, #176	; 0xb0
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c818:	4611      	mov	r1, r2
 800c81a:	4798      	blx	r3
 800c81c:	2300      	movs	r3, #0
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}

0800c826 <USBD_CDC_EP0_RxReady>:
 800c826:	b580      	push	{r7, lr}
 800c828:	b084      	sub	sp, #16
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	32b0      	adds	r2, #176	; 0xb0
 800c838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c83c:	60fb      	str	r3, [r7, #12]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d101      	bne.n	800c848 <USBD_CDC_EP0_RxReady+0x22>
 800c844:	2303      	movs	r3, #3
 800c846:	e025      	b.n	800c894 <USBD_CDC_EP0_RxReady+0x6e>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	33b0      	adds	r3, #176	; 0xb0
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	4413      	add	r3, r2
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d01a      	beq.n	800c892 <USBD_CDC_EP0_RxReady+0x6c>
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c862:	2bff      	cmp	r3, #255	; 0xff
 800c864:	d015      	beq.n	800c892 <USBD_CDC_EP0_RxReady+0x6c>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	33b0      	adds	r3, #176	; 0xb0
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4413      	add	r3, r2
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
 800c87e:	68f9      	ldr	r1, [r7, #12]
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
 800c886:	b292      	uxth	r2, r2
 800c888:	4798      	blx	r3
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	22ff      	movs	r2, #255	; 0xff
 800c88e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800c892:	2300      	movs	r3, #0
 800c894:	4618      	mov	r0, r3
 800c896:	3710      	adds	r7, #16
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <USBD_CDC_GetFSCfgDesc>:
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	2182      	movs	r1, #130	; 0x82
 800c8a6:	4818      	ldr	r0, [pc, #96]	; (800c908 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c8a8:	f000 fd4f 	bl	800d34a <USBD_GetEpDesc>
 800c8ac:	6178      	str	r0, [r7, #20]
 800c8ae:	2101      	movs	r1, #1
 800c8b0:	4815      	ldr	r0, [pc, #84]	; (800c908 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c8b2:	f000 fd4a 	bl	800d34a <USBD_GetEpDesc>
 800c8b6:	6138      	str	r0, [r7, #16]
 800c8b8:	2181      	movs	r1, #129	; 0x81
 800c8ba:	4813      	ldr	r0, [pc, #76]	; (800c908 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c8bc:	f000 fd45 	bl	800d34a <USBD_GetEpDesc>
 800c8c0:	60f8      	str	r0, [r7, #12]
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d002      	beq.n	800c8ce <USBD_CDC_GetFSCfgDesc+0x32>
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	2210      	movs	r2, #16
 800c8cc:	719a      	strb	r2, [r3, #6]
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d006      	beq.n	800c8e2 <USBD_CDC_GetFSCfgDesc+0x46>
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8dc:	711a      	strb	r2, [r3, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	715a      	strb	r2, [r3, #5]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d006      	beq.n	800c8f6 <USBD_CDC_GetFSCfgDesc+0x5a>
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8f0:	711a      	strb	r2, [r3, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	715a      	strb	r2, [r3, #5]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2243      	movs	r2, #67	; 0x43
 800c8fa:	801a      	strh	r2, [r3, #0]
 800c8fc:	4b02      	ldr	r3, [pc, #8]	; (800c908 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c8fe:	4618      	mov	r0, r3
 800c900:	3718      	adds	r7, #24
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	20000064 	.word	0x20000064

0800c90c <USBD_CDC_GetHSCfgDesc>:
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	2182      	movs	r1, #130	; 0x82
 800c916:	4818      	ldr	r0, [pc, #96]	; (800c978 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c918:	f000 fd17 	bl	800d34a <USBD_GetEpDesc>
 800c91c:	6178      	str	r0, [r7, #20]
 800c91e:	2101      	movs	r1, #1
 800c920:	4815      	ldr	r0, [pc, #84]	; (800c978 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c922:	f000 fd12 	bl	800d34a <USBD_GetEpDesc>
 800c926:	6138      	str	r0, [r7, #16]
 800c928:	2181      	movs	r1, #129	; 0x81
 800c92a:	4813      	ldr	r0, [pc, #76]	; (800c978 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c92c:	f000 fd0d 	bl	800d34a <USBD_GetEpDesc>
 800c930:	60f8      	str	r0, [r7, #12]
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d002      	beq.n	800c93e <USBD_CDC_GetHSCfgDesc+0x32>
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	2210      	movs	r2, #16
 800c93c:	719a      	strb	r2, [r3, #6]
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d006      	beq.n	800c952 <USBD_CDC_GetHSCfgDesc+0x46>
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	2200      	movs	r2, #0
 800c948:	711a      	strb	r2, [r3, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	f042 0202 	orr.w	r2, r2, #2
 800c950:	715a      	strb	r2, [r3, #5]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d006      	beq.n	800c966 <USBD_CDC_GetHSCfgDesc+0x5a>
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2200      	movs	r2, #0
 800c95c:	711a      	strb	r2, [r3, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	f042 0202 	orr.w	r2, r2, #2
 800c964:	715a      	strb	r2, [r3, #5]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2243      	movs	r2, #67	; 0x43
 800c96a:	801a      	strh	r2, [r3, #0]
 800c96c:	4b02      	ldr	r3, [pc, #8]	; (800c978 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c96e:	4618      	mov	r0, r3
 800c970:	3718      	adds	r7, #24
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	20000064 	.word	0x20000064

0800c97c <USBD_CDC_GetOtherSpeedCfgDesc>:
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b086      	sub	sp, #24
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	2182      	movs	r1, #130	; 0x82
 800c986:	4818      	ldr	r0, [pc, #96]	; (800c9e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c988:	f000 fcdf 	bl	800d34a <USBD_GetEpDesc>
 800c98c:	6178      	str	r0, [r7, #20]
 800c98e:	2101      	movs	r1, #1
 800c990:	4815      	ldr	r0, [pc, #84]	; (800c9e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c992:	f000 fcda 	bl	800d34a <USBD_GetEpDesc>
 800c996:	6138      	str	r0, [r7, #16]
 800c998:	2181      	movs	r1, #129	; 0x81
 800c99a:	4813      	ldr	r0, [pc, #76]	; (800c9e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c99c:	f000 fcd5 	bl	800d34a <USBD_GetEpDesc>
 800c9a0:	60f8      	str	r0, [r7, #12]
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	2210      	movs	r2, #16
 800c9ac:	719a      	strb	r2, [r3, #6]
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d006      	beq.n	800c9c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9bc:	711a      	strb	r2, [r3, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	715a      	strb	r2, [r3, #5]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d006      	beq.n	800c9d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9d0:	711a      	strb	r2, [r3, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	715a      	strb	r2, [r3, #5]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2243      	movs	r2, #67	; 0x43
 800c9da:	801a      	strh	r2, [r3, #0]
 800c9dc:	4b02      	ldr	r3, [pc, #8]	; (800c9e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3718      	adds	r7, #24
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20000064 	.word	0x20000064

0800c9ec <USBD_CDC_GetDeviceQualifierDescriptor>:
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	220a      	movs	r2, #10
 800c9f8:	801a      	strh	r2, [r3, #0]
 800c9fa:	4b03      	ldr	r3, [pc, #12]	; (800ca08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	370c      	adds	r7, #12
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr
 800ca08:	20000020 	.word	0x20000020

0800ca0c <USBD_CDC_RegisterInterface>:
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d101      	bne.n	800ca20 <USBD_CDC_RegisterInterface+0x14>
 800ca1c:	2303      	movs	r3, #3
 800ca1e:	e009      	b.n	800ca34 <USBD_CDC_RegisterInterface+0x28>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	33b0      	adds	r3, #176	; 0xb0
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4413      	add	r3, r2
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	605a      	str	r2, [r3, #4]
 800ca32:	2300      	movs	r3, #0
 800ca34:	4618      	mov	r0, r3
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <USBD_CDC_SetTxBuffer>:
 800ca40:	b480      	push	{r7}
 800ca42:	b087      	sub	sp, #28
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	32b0      	adds	r2, #176	; 0xb0
 800ca56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca5a:	617b      	str	r3, [r7, #20]
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d101      	bne.n	800ca66 <USBD_CDC_SetTxBuffer+0x26>
 800ca62:	2303      	movs	r3, #3
 800ca64:	e008      	b.n	800ca78 <USBD_CDC_SetTxBuffer+0x38>
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800ca76:	2300      	movs	r3, #0
 800ca78:	4618      	mov	r0, r3
 800ca7a:	371c      	adds	r7, #28
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <USBD_CDC_SetRxBuffer>:
 800ca84:	b480      	push	{r7}
 800ca86:	b085      	sub	sp, #20
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	32b0      	adds	r2, #176	; 0xb0
 800ca98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca9c:	60fb      	str	r3, [r7, #12]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d101      	bne.n	800caa8 <USBD_CDC_SetRxBuffer+0x24>
 800caa4:	2303      	movs	r3, #3
 800caa6:	e004      	b.n	800cab2 <USBD_CDC_SetRxBuffer+0x2e>
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800cab0:	2300      	movs	r3, #0
 800cab2:	4618      	mov	r0, r3
 800cab4:	3714      	adds	r7, #20
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr
	...

0800cac0 <USBD_CDC_TransmitPacket>:
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	32b0      	adds	r2, #176	; 0xb0
 800cad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cad6:	60bb      	str	r3, [r7, #8]
 800cad8:	2301      	movs	r3, #1
 800cada:	73fb      	strb	r3, [r7, #15]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	32b0      	adds	r2, #176	; 0xb0
 800cae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d101      	bne.n	800caf2 <USBD_CDC_TransmitPacket+0x32>
 800caee:	2303      	movs	r3, #3
 800caf0:	e025      	b.n	800cb3e <USBD_CDC_TransmitPacket+0x7e>
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d11f      	bne.n	800cb3c <USBD_CDC_TransmitPacket+0x7c>
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	2201      	movs	r2, #1
 800cb00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800cb04:	4b10      	ldr	r3, [pc, #64]	; (800cb48 <USBD_CDC_TransmitPacket+0x88>)
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	f003 020f 	and.w	r2, r3, #15
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	4613      	mov	r3, r2
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	4403      	add	r3, r0
 800cb1e:	3318      	adds	r3, #24
 800cb20:	6019      	str	r1, [r3, #0]
 800cb22:	4b09      	ldr	r3, [pc, #36]	; (800cb48 <USBD_CDC_TransmitPacket+0x88>)
 800cb24:	7819      	ldrb	r1, [r3, #0]
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f001 ffbf 	bl	800eab6 <USBD_LL_Transmit>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	73fb      	strb	r3, [r7, #15]
 800cb3c:	7bfb      	ldrb	r3, [r7, #15]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	200000a7 	.word	0x200000a7

0800cb4c <USBD_CDC_ReceivePacket>:
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	32b0      	adds	r2, #176	; 0xb0
 800cb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb62:	60fb      	str	r3, [r7, #12]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	32b0      	adds	r2, #176	; 0xb0
 800cb6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d101      	bne.n	800cb7a <USBD_CDC_ReceivePacket+0x2e>
 800cb76:	2303      	movs	r3, #3
 800cb78:	e018      	b.n	800cbac <USBD_CDC_ReceivePacket+0x60>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	7c1b      	ldrb	r3, [r3, #16]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d10a      	bne.n	800cb98 <USBD_CDC_ReceivePacket+0x4c>
 800cb82:	4b0c      	ldr	r3, [pc, #48]	; (800cbb4 <USBD_CDC_ReceivePacket+0x68>)
 800cb84:	7819      	ldrb	r1, [r3, #0]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f001 ffb1 	bl	800eaf8 <USBD_LL_PrepareReceive>
 800cb96:	e008      	b.n	800cbaa <USBD_CDC_ReceivePacket+0x5e>
 800cb98:	4b06      	ldr	r3, [pc, #24]	; (800cbb4 <USBD_CDC_ReceivePacket+0x68>)
 800cb9a:	7819      	ldrb	r1, [r3, #0]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cba2:	2340      	movs	r3, #64	; 0x40
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f001 ffa7 	bl	800eaf8 <USBD_LL_PrepareReceive>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	4618      	mov	r0, r3
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	200000a8 	.word	0x200000a8

0800cbb8 <USBD_Init>:
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b086      	sub	sp, #24
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	4613      	mov	r3, r2
 800cbc4:	71fb      	strb	r3, [r7, #7]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d101      	bne.n	800cbd0 <USBD_Init+0x18>
 800cbcc:	2303      	movs	r3, #3
 800cbce:	e01f      	b.n	800cc10 <USBD_Init+0x58>
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d003      	beq.n	800cbf6 <USBD_Init+0x3e>
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	68ba      	ldr	r2, [r7, #8]
 800cbf2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	79fa      	ldrb	r2, [r7, #7]
 800cc02:	701a      	strb	r2, [r3, #0]
 800cc04:	68f8      	ldr	r0, [r7, #12]
 800cc06:	f001 fe21 	bl	800e84c <USBD_LL_Init>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	75fb      	strb	r3, [r7, #23]
 800cc0e:	7dfb      	ldrb	r3, [r7, #23]
 800cc10:	4618      	mov	r0, r3
 800cc12:	3718      	adds	r7, #24
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <USBD_RegisterClass>:
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
 800cc22:	2300      	movs	r3, #0
 800cc24:	81fb      	strh	r3, [r7, #14]
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d101      	bne.n	800cc30 <USBD_RegisterClass+0x18>
 800cc2c:	2303      	movs	r3, #3
 800cc2e:	e025      	b.n	800cc7c <USBD_RegisterClass+0x64>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	32ae      	adds	r2, #174	; 0xae
 800cc42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00f      	beq.n	800cc6c <USBD_RegisterClass+0x54>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	32ae      	adds	r2, #174	; 0xae
 800cc56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc5c:	f107 020e 	add.w	r2, r7, #14
 800cc60:	4610      	mov	r0, r2
 800cc62:	4798      	blx	r3
 800cc64:	4602      	mov	r2, r0
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cc72:	1c5a      	adds	r2, r3, #1
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <USBD_Start>:
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f001 fe29 	bl	800e8e4 <USBD_LL_Start>
 800cc92:	4603      	mov	r3, r0
 800cc94:	4618      	mov	r0, r3
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <USBD_RunTestMode>:
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	2300      	movs	r3, #0
 800cca6:	4618      	mov	r0, r3
 800cca8:	370c      	adds	r7, #12
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr

0800ccb2 <USBD_SetClassConfig>:
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b084      	sub	sp, #16
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
 800ccba:	460b      	mov	r3, r1
 800ccbc:	70fb      	strb	r3, [r7, #3]
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	73fb      	strb	r3, [r7, #15]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d009      	beq.n	800cce0 <USBD_SetClassConfig+0x2e>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	78fa      	ldrb	r2, [r7, #3]
 800ccd6:	4611      	mov	r1, r2
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	4798      	blx	r3
 800ccdc:	4603      	mov	r3, r0
 800ccde:	73fb      	strb	r3, [r7, #15]
 800cce0:	7bfb      	ldrb	r3, [r7, #15]
 800cce2:	4618      	mov	r0, r3
 800cce4:	3710      	adds	r7, #16
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <USBD_ClrClassConfig>:
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b084      	sub	sp, #16
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	6078      	str	r0, [r7, #4]
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	70fb      	strb	r3, [r7, #3]
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	73fb      	strb	r3, [r7, #15]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	78fa      	ldrb	r2, [r7, #3]
 800cd04:	4611      	mov	r1, r2
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	4798      	blx	r3
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d001      	beq.n	800cd14 <USBD_ClrClassConfig+0x2a>
 800cd10:	2303      	movs	r3, #3
 800cd12:	73fb      	strb	r3, [r7, #15]
 800cd14:	7bfb      	ldrb	r3, [r7, #15]
 800cd16:	4618      	mov	r0, r3
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <USBD_LL_SetupStage>:
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b084      	sub	sp, #16
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
 800cd26:	6039      	str	r1, [r7, #0]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	4618      	mov	r0, r3
 800cd32:	f001 f908 	bl	800df46 <USBD_ParseSetupRequest>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cd44:	461a      	mov	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cd52:	f003 031f 	and.w	r3, r3, #31
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d01a      	beq.n	800cd90 <USBD_LL_SetupStage+0x72>
 800cd5a:	2b02      	cmp	r3, #2
 800cd5c:	d822      	bhi.n	800cda4 <USBD_LL_SetupStage+0x86>
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d002      	beq.n	800cd68 <USBD_LL_SetupStage+0x4a>
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d00a      	beq.n	800cd7c <USBD_LL_SetupStage+0x5e>
 800cd66:	e01d      	b.n	800cda4 <USBD_LL_SetupStage+0x86>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cd6e:	4619      	mov	r1, r3
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 fb5f 	bl	800d434 <USBD_StdDevReq>
 800cd76:	4603      	mov	r3, r0
 800cd78:	73fb      	strb	r3, [r7, #15]
 800cd7a:	e020      	b.n	800cdbe <USBD_LL_SetupStage+0xa0>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cd82:	4619      	mov	r1, r3
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 fbc7 	bl	800d518 <USBD_StdItfReq>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	73fb      	strb	r3, [r7, #15]
 800cd8e:	e016      	b.n	800cdbe <USBD_LL_SetupStage+0xa0>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cd96:	4619      	mov	r1, r3
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 fc29 	bl	800d5f0 <USBD_StdEPReq>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	73fb      	strb	r3, [r7, #15]
 800cda2:	e00c      	b.n	800cdbe <USBD_LL_SetupStage+0xa0>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cdaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f001 fdf6 	bl	800e9a4 <USBD_LL_StallEP>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	73fb      	strb	r3, [r7, #15]
 800cdbc:	bf00      	nop
 800cdbe:	7bfb      	ldrb	r3, [r7, #15]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <USBD_LL_DataOutStage>:
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	607a      	str	r2, [r7, #4]
 800cdd4:	72fb      	strb	r3, [r7, #11]
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	75fb      	strb	r3, [r7, #23]
 800cdda:	7afb      	ldrb	r3, [r7, #11]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d16e      	bne.n	800cebe <USBD_LL_DataOutStage+0xf6>
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cde6:	613b      	str	r3, [r7, #16]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	f040 8098 	bne.w	800cf24 <USBD_LL_DataOutStage+0x15c>
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	689a      	ldr	r2, [r3, #8]
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d913      	bls.n	800ce28 <USBD_LL_DataOutStage+0x60>
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	689a      	ldr	r2, [r3, #8]
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	1ad2      	subs	r2, r2, r3
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	609a      	str	r2, [r3, #8]
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	68da      	ldr	r2, [r3, #12]
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	689b      	ldr	r3, [r3, #8]
 800ce16:	4293      	cmp	r3, r2
 800ce18:	bf28      	it	cs
 800ce1a:	4613      	movcs	r3, r2
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	6879      	ldr	r1, [r7, #4]
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f001 f984 	bl	800e12e <USBD_CtlContinueRx>
 800ce26:	e07d      	b.n	800cf24 <USBD_LL_DataOutStage+0x15c>
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ce2e:	f003 031f 	and.w	r3, r3, #31
 800ce32:	2b02      	cmp	r3, #2
 800ce34:	d014      	beq.n	800ce60 <USBD_LL_DataOutStage+0x98>
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d81d      	bhi.n	800ce76 <USBD_LL_DataOutStage+0xae>
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d002      	beq.n	800ce44 <USBD_LL_DataOutStage+0x7c>
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d003      	beq.n	800ce4a <USBD_LL_DataOutStage+0x82>
 800ce42:	e018      	b.n	800ce76 <USBD_LL_DataOutStage+0xae>
 800ce44:	2300      	movs	r3, #0
 800ce46:	75bb      	strb	r3, [r7, #22]
 800ce48:	e018      	b.n	800ce7c <USBD_LL_DataOutStage+0xb4>
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	4619      	mov	r1, r3
 800ce54:	68f8      	ldr	r0, [r7, #12]
 800ce56:	f000 fa5e 	bl	800d316 <USBD_CoreFindIF>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	75bb      	strb	r3, [r7, #22]
 800ce5e:	e00d      	b.n	800ce7c <USBD_LL_DataOutStage+0xb4>
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	4619      	mov	r1, r3
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f000 fa60 	bl	800d330 <USBD_CoreFindEP>
 800ce70:	4603      	mov	r3, r0
 800ce72:	75bb      	strb	r3, [r7, #22]
 800ce74:	e002      	b.n	800ce7c <USBD_LL_DataOutStage+0xb4>
 800ce76:	2300      	movs	r3, #0
 800ce78:	75bb      	strb	r3, [r7, #22]
 800ce7a:	bf00      	nop
 800ce7c:	7dbb      	ldrb	r3, [r7, #22]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d119      	bne.n	800ceb6 <USBD_LL_DataOutStage+0xee>
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	2b03      	cmp	r3, #3
 800ce8c:	d113      	bne.n	800ceb6 <USBD_LL_DataOutStage+0xee>
 800ce8e:	7dba      	ldrb	r2, [r7, #22]
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	32ae      	adds	r2, #174	; 0xae
 800ce94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00b      	beq.n	800ceb6 <USBD_LL_DataOutStage+0xee>
 800ce9e:	7dba      	ldrb	r2, [r7, #22]
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800cea6:	7dba      	ldrb	r2, [r7, #22]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	32ae      	adds	r2, #174	; 0xae
 800ceac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	4798      	blx	r3
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f001 f94a 	bl	800e150 <USBD_CtlSendStatus>
 800cebc:	e032      	b.n	800cf24 <USBD_LL_DataOutStage+0x15c>
 800cebe:	7afb      	ldrb	r3, [r7, #11]
 800cec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cec4:	b2db      	uxtb	r3, r3
 800cec6:	4619      	mov	r1, r3
 800cec8:	68f8      	ldr	r0, [r7, #12]
 800ceca:	f000 fa31 	bl	800d330 <USBD_CoreFindEP>
 800cece:	4603      	mov	r3, r0
 800ced0:	75bb      	strb	r3, [r7, #22]
 800ced2:	7dbb      	ldrb	r3, [r7, #22]
 800ced4:	2bff      	cmp	r3, #255	; 0xff
 800ced6:	d025      	beq.n	800cf24 <USBD_LL_DataOutStage+0x15c>
 800ced8:	7dbb      	ldrb	r3, [r7, #22]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d122      	bne.n	800cf24 <USBD_LL_DataOutStage+0x15c>
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cee4:	b2db      	uxtb	r3, r3
 800cee6:	2b03      	cmp	r3, #3
 800cee8:	d117      	bne.n	800cf1a <USBD_LL_DataOutStage+0x152>
 800ceea:	7dba      	ldrb	r2, [r7, #22]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	32ae      	adds	r2, #174	; 0xae
 800cef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cef4:	699b      	ldr	r3, [r3, #24]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d00f      	beq.n	800cf1a <USBD_LL_DataOutStage+0x152>
 800cefa:	7dba      	ldrb	r2, [r7, #22]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800cf02:	7dba      	ldrb	r2, [r7, #22]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	32ae      	adds	r2, #174	; 0xae
 800cf08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf0c:	699b      	ldr	r3, [r3, #24]
 800cf0e:	7afa      	ldrb	r2, [r7, #11]
 800cf10:	4611      	mov	r1, r2
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	4798      	blx	r3
 800cf16:	4603      	mov	r3, r0
 800cf18:	75fb      	strb	r3, [r7, #23]
 800cf1a:	7dfb      	ldrb	r3, [r7, #23]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d001      	beq.n	800cf24 <USBD_LL_DataOutStage+0x15c>
 800cf20:	7dfb      	ldrb	r3, [r7, #23]
 800cf22:	e000      	b.n	800cf26 <USBD_LL_DataOutStage+0x15e>
 800cf24:	2300      	movs	r3, #0
 800cf26:	4618      	mov	r0, r3
 800cf28:	3718      	adds	r7, #24
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <USBD_LL_DataInStage>:
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b086      	sub	sp, #24
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	60f8      	str	r0, [r7, #12]
 800cf36:	460b      	mov	r3, r1
 800cf38:	607a      	str	r2, [r7, #4]
 800cf3a:	72fb      	strb	r3, [r7, #11]
 800cf3c:	7afb      	ldrb	r3, [r7, #11]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d16f      	bne.n	800d022 <USBD_LL_DataInStage+0xf4>
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	3314      	adds	r3, #20
 800cf46:	613b      	str	r3, [r7, #16]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf4e:	2b02      	cmp	r3, #2
 800cf50:	d15a      	bne.n	800d008 <USBD_LL_DataInStage+0xda>
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	689a      	ldr	r2, [r3, #8]
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d914      	bls.n	800cf88 <USBD_LL_DataInStage+0x5a>
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	689a      	ldr	r2, [r3, #8]
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	1ad2      	subs	r2, r2, r3
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	609a      	str	r2, [r3, #8]
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	461a      	mov	r2, r3
 800cf72:	6879      	ldr	r1, [r7, #4]
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f001 f8ac 	bl	800e0d2 <USBD_CtlContinueSendData>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2100      	movs	r1, #0
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f001 fdb9 	bl	800eaf8 <USBD_LL_PrepareReceive>
 800cf86:	e03f      	b.n	800d008 <USBD_LL_DataInStage+0xda>
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	68da      	ldr	r2, [r3, #12]
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d11c      	bne.n	800cfce <USBD_LL_DataInStage+0xa0>
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	685a      	ldr	r2, [r3, #4]
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d316      	bcc.n	800cfce <USBD_LL_DataInStage+0xa0>
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	685a      	ldr	r2, [r3, #4]
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d20f      	bcs.n	800cfce <USBD_LL_DataInStage+0xa0>
 800cfae:	2200      	movs	r2, #0
 800cfb0:	2100      	movs	r1, #0
 800cfb2:	68f8      	ldr	r0, [r7, #12]
 800cfb4:	f001 f88d 	bl	800e0d2 <USBD_CtlContinueSendData>
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	f001 fd96 	bl	800eaf8 <USBD_LL_PrepareReceive>
 800cfcc:	e01c      	b.n	800d008 <USBD_LL_DataInStage+0xda>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	2b03      	cmp	r3, #3
 800cfd8:	d10f      	bne.n	800cffa <USBD_LL_DataInStage+0xcc>
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d009      	beq.n	800cffa <USBD_LL_DataInStage+0xcc>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	4798      	blx	r3
 800cffa:	2180      	movs	r1, #128	; 0x80
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f001 fcd1 	bl	800e9a4 <USBD_LL_StallEP>
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f001 f8b7 	bl	800e176 <USBD_CtlReceiveStatus>
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d03a      	beq.n	800d088 <USBD_LL_DataInStage+0x15a>
 800d012:	68f8      	ldr	r0, [r7, #12]
 800d014:	f7ff fe42 	bl	800cc9c <USBD_RunTestMode>
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d020:	e032      	b.n	800d088 <USBD_LL_DataInStage+0x15a>
 800d022:	7afb      	ldrb	r3, [r7, #11]
 800d024:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	4619      	mov	r1, r3
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f000 f97f 	bl	800d330 <USBD_CoreFindEP>
 800d032:	4603      	mov	r3, r0
 800d034:	75fb      	strb	r3, [r7, #23]
 800d036:	7dfb      	ldrb	r3, [r7, #23]
 800d038:	2bff      	cmp	r3, #255	; 0xff
 800d03a:	d025      	beq.n	800d088 <USBD_LL_DataInStage+0x15a>
 800d03c:	7dfb      	ldrb	r3, [r7, #23]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d122      	bne.n	800d088 <USBD_LL_DataInStage+0x15a>
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	2b03      	cmp	r3, #3
 800d04c:	d11c      	bne.n	800d088 <USBD_LL_DataInStage+0x15a>
 800d04e:	7dfa      	ldrb	r2, [r7, #23]
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	32ae      	adds	r2, #174	; 0xae
 800d054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d058:	695b      	ldr	r3, [r3, #20]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d014      	beq.n	800d088 <USBD_LL_DataInStage+0x15a>
 800d05e:	7dfa      	ldrb	r2, [r7, #23]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800d066:	7dfa      	ldrb	r2, [r7, #23]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	32ae      	adds	r2, #174	; 0xae
 800d06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d070:	695b      	ldr	r3, [r3, #20]
 800d072:	7afa      	ldrb	r2, [r7, #11]
 800d074:	4611      	mov	r1, r2
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	4798      	blx	r3
 800d07a:	4603      	mov	r3, r0
 800d07c:	75bb      	strb	r3, [r7, #22]
 800d07e:	7dbb      	ldrb	r3, [r7, #22]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d001      	beq.n	800d088 <USBD_LL_DataInStage+0x15a>
 800d084:	7dbb      	ldrb	r3, [r7, #22]
 800d086:	e000      	b.n	800d08a <USBD_LL_DataInStage+0x15c>
 800d088:	2300      	movs	r3, #0
 800d08a:	4618      	mov	r0, r3
 800d08c:	3718      	adds	r7, #24
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <USBD_LL_Reset>:
 800d092:	b580      	push	{r7, lr}
 800d094:	b084      	sub	sp, #16
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
 800d09a:	2300      	movs	r3, #0
 800d09c:	73fb      	strb	r3, [r7, #15]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	605a      	str	r2, [r3, #4]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d014      	beq.n	800d0f8 <USBD_LL_Reset+0x66>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00e      	beq.n	800d0f8 <USBD_LL_Reset+0x66>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	6852      	ldr	r2, [r2, #4]
 800d0e6:	b2d2      	uxtb	r2, r2
 800d0e8:	4611      	mov	r1, r2
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	4798      	blx	r3
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d001      	beq.n	800d0f8 <USBD_LL_Reset+0x66>
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	73fb      	strb	r3, [r7, #15]
 800d0f8:	2340      	movs	r3, #64	; 0x40
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f001 fc0b 	bl	800e91a <USBD_LL_OpenEP>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2240      	movs	r2, #64	; 0x40
 800d110:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 800d114:	2340      	movs	r3, #64	; 0x40
 800d116:	2200      	movs	r2, #0
 800d118:	2180      	movs	r1, #128	; 0x80
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f001 fbfd 	bl	800e91a <USBD_LL_OpenEP>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	849a      	strh	r2, [r3, #36]	; 0x24
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2240      	movs	r2, #64	; 0x40
 800d12a:	621a      	str	r2, [r3, #32]
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
 800d12e:	4618      	mov	r0, r3
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <USBD_LL_SetSpeed>:
 800d136:	b480      	push	{r7}
 800d138:	b083      	sub	sp, #12
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
 800d13e:	460b      	mov	r3, r1
 800d140:	70fb      	strb	r3, [r7, #3]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	78fa      	ldrb	r2, [r7, #3]
 800d146:	741a      	strb	r2, [r3, #16]
 800d148:	2300      	movs	r3, #0
 800d14a:	4618      	mov	r0, r3
 800d14c:	370c      	adds	r7, #12
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr

0800d156 <USBD_LL_Suspend>:
 800d156:	b480      	push	{r7}
 800d158:	b083      	sub	sp, #12
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d164:	b2da      	uxtb	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2204      	movs	r2, #4
 800d170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800d174:	2300      	movs	r3, #0
 800d176:	4618      	mov	r0, r3
 800d178:	370c      	adds	r7, #12
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr

0800d182 <USBD_LL_Resume>:
 800d182:	b480      	push	{r7}
 800d184:	b083      	sub	sp, #12
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d190:	b2db      	uxtb	r3, r3
 800d192:	2b04      	cmp	r3, #4
 800d194:	d106      	bne.n	800d1a4 <USBD_LL_Resume+0x22>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d19c:	b2da      	uxtb	r2, r3
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	370c      	adds	r7, #12
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr

0800d1b2 <USBD_LL_SOF>:
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b082      	sub	sp, #8
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	2b03      	cmp	r3, #3
 800d1c4:	d110      	bne.n	800d1e8 <USBD_LL_SOF+0x36>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00b      	beq.n	800d1e8 <USBD_LL_SOF+0x36>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1d6:	69db      	ldr	r3, [r3, #28]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d005      	beq.n	800d1e8 <USBD_LL_SOF+0x36>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1e2:	69db      	ldr	r3, [r3, #28]
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	4798      	blx	r3
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <USBD_LL_IsoINIncomplete>:
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b082      	sub	sp, #8
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	70fb      	strb	r3, [r7, #3]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	32ae      	adds	r2, #174	; 0xae
 800d208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d101      	bne.n	800d214 <USBD_LL_IsoINIncomplete+0x22>
 800d210:	2303      	movs	r3, #3
 800d212:	e01c      	b.n	800d24e <USBD_LL_IsoINIncomplete+0x5c>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	2b03      	cmp	r3, #3
 800d21e:	d115      	bne.n	800d24c <USBD_LL_IsoINIncomplete+0x5a>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	32ae      	adds	r2, #174	; 0xae
 800d22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d22e:	6a1b      	ldr	r3, [r3, #32]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d00b      	beq.n	800d24c <USBD_LL_IsoINIncomplete+0x5a>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	32ae      	adds	r2, #174	; 0xae
 800d23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d242:	6a1b      	ldr	r3, [r3, #32]
 800d244:	78fa      	ldrb	r2, [r7, #3]
 800d246:	4611      	mov	r1, r2
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	4798      	blx	r3
 800d24c:	2300      	movs	r3, #0
 800d24e:	4618      	mov	r0, r3
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <USBD_LL_IsoOUTIncomplete>:
 800d256:	b580      	push	{r7, lr}
 800d258:	b082      	sub	sp, #8
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
 800d25e:	460b      	mov	r3, r1
 800d260:	70fb      	strb	r3, [r7, #3]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	32ae      	adds	r2, #174	; 0xae
 800d26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d101      	bne.n	800d278 <USBD_LL_IsoOUTIncomplete+0x22>
 800d274:	2303      	movs	r3, #3
 800d276:	e01c      	b.n	800d2b2 <USBD_LL_IsoOUTIncomplete+0x5c>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	2b03      	cmp	r3, #3
 800d282:	d115      	bne.n	800d2b0 <USBD_LL_IsoOUTIncomplete+0x5a>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	32ae      	adds	r2, #174	; 0xae
 800d28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d294:	2b00      	cmp	r3, #0
 800d296:	d00b      	beq.n	800d2b0 <USBD_LL_IsoOUTIncomplete+0x5a>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	32ae      	adds	r2, #174	; 0xae
 800d2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a8:	78fa      	ldrb	r2, [r7, #3]
 800d2aa:	4611      	mov	r1, r2
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	4798      	blx	r3
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3708      	adds	r7, #8
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}

0800d2ba <USBD_LL_DevConnected>:
 800d2ba:	b480      	push	{r7}
 800d2bc:	b083      	sub	sp, #12
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	370c      	adds	r7, #12
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr

0800d2d0 <USBD_LL_DevDisconnected>:
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b084      	sub	sp, #16
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	2300      	movs	r3, #0
 800d2da:	73fb      	strb	r3, [r7, #15]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00e      	beq.n	800d30c <USBD_LL_DevDisconnected+0x3c>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	6852      	ldr	r2, [r2, #4]
 800d2fa:	b2d2      	uxtb	r2, r2
 800d2fc:	4611      	mov	r1, r2
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	4798      	blx	r3
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d001      	beq.n	800d30c <USBD_LL_DevDisconnected+0x3c>
 800d308:	2303      	movs	r3, #3
 800d30a:	73fb      	strb	r3, [r7, #15]
 800d30c:	7bfb      	ldrb	r3, [r7, #15]
 800d30e:	4618      	mov	r0, r3
 800d310:	3710      	adds	r7, #16
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <USBD_CoreFindIF>:
 800d316:	b480      	push	{r7}
 800d318:	b083      	sub	sp, #12
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
 800d31e:	460b      	mov	r3, r1
 800d320:	70fb      	strb	r3, [r7, #3]
 800d322:	2300      	movs	r3, #0
 800d324:	4618      	mov	r0, r3
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <USBD_CoreFindEP>:
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	460b      	mov	r3, r1
 800d33a:	70fb      	strb	r3, [r7, #3]
 800d33c:	2300      	movs	r3, #0
 800d33e:	4618      	mov	r0, r3
 800d340:	370c      	adds	r7, #12
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr

0800d34a <USBD_GetEpDesc>:
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b086      	sub	sp, #24
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
 800d352:	460b      	mov	r3, r1
 800d354:	70fb      	strb	r3, [r7, #3]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	617b      	str	r3, [r7, #20]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	60fb      	str	r3, [r7, #12]
 800d35e:	2300      	movs	r3, #0
 800d360:	613b      	str	r3, [r7, #16]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	885b      	ldrh	r3, [r3, #2]
 800d366:	b29a      	uxth	r2, r3
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	429a      	cmp	r2, r3
 800d370:	d920      	bls.n	800d3b4 <USBD_GetEpDesc+0x6a>
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	b29b      	uxth	r3, r3
 800d378:	817b      	strh	r3, [r7, #10]
 800d37a:	e013      	b.n	800d3a4 <USBD_GetEpDesc+0x5a>
 800d37c:	f107 030a 	add.w	r3, r7, #10
 800d380:	4619      	mov	r1, r3
 800d382:	6978      	ldr	r0, [r7, #20]
 800d384:	f000 f81b 	bl	800d3be <USBD_GetNextDesc>
 800d388:	6178      	str	r0, [r7, #20]
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	785b      	ldrb	r3, [r3, #1]
 800d38e:	2b05      	cmp	r3, #5
 800d390:	d108      	bne.n	800d3a4 <USBD_GetEpDesc+0x5a>
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	613b      	str	r3, [r7, #16]
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	789b      	ldrb	r3, [r3, #2]
 800d39a:	78fa      	ldrb	r2, [r7, #3]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d008      	beq.n	800d3b2 <USBD_GetEpDesc+0x68>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	613b      	str	r3, [r7, #16]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	885b      	ldrh	r3, [r3, #2]
 800d3a8:	b29a      	uxth	r2, r3
 800d3aa:	897b      	ldrh	r3, [r7, #10]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d8e5      	bhi.n	800d37c <USBD_GetEpDesc+0x32>
 800d3b0:	e000      	b.n	800d3b4 <USBD_GetEpDesc+0x6a>
 800d3b2:	bf00      	nop
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3718      	adds	r7, #24
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}

0800d3be <USBD_GetNextDesc>:
 800d3be:	b480      	push	{r7}
 800d3c0:	b085      	sub	sp, #20
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	6078      	str	r0, [r7, #4]
 800d3c6:	6039      	str	r1, [r7, #0]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	881a      	ldrh	r2, [r3, #0]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	4413      	add	r3, r2
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	801a      	strh	r2, [r3, #0]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	4413      	add	r3, r2
 800d3e8:	60fb      	str	r3, [r7, #12]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <SWAPBYTE>:
 800d3f8:	b480      	push	{r7}
 800d3fa:	b087      	sub	sp, #28
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	617b      	str	r3, [r7, #20]
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	827b      	strh	r3, [r7, #18]
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	3301      	adds	r3, #1
 800d40e:	617b      	str	r3, [r7, #20]
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	823b      	strh	r3, [r7, #16]
 800d416:	8a3b      	ldrh	r3, [r7, #16]
 800d418:	021b      	lsls	r3, r3, #8
 800d41a:	b21a      	sxth	r2, r3
 800d41c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d420:	4313      	orrs	r3, r2
 800d422:	b21b      	sxth	r3, r3
 800d424:	81fb      	strh	r3, [r7, #14]
 800d426:	89fb      	ldrh	r3, [r7, #14]
 800d428:	4618      	mov	r0, r3
 800d42a:	371c      	adds	r7, #28
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <USBD_StdDevReq>:
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
 800d43e:	2300      	movs	r3, #0
 800d440:	73fb      	strb	r3, [r7, #15]
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d44a:	2b40      	cmp	r3, #64	; 0x40
 800d44c:	d005      	beq.n	800d45a <USBD_StdDevReq+0x26>
 800d44e:	2b40      	cmp	r3, #64	; 0x40
 800d450:	d857      	bhi.n	800d502 <USBD_StdDevReq+0xce>
 800d452:	2b00      	cmp	r3, #0
 800d454:	d00f      	beq.n	800d476 <USBD_StdDevReq+0x42>
 800d456:	2b20      	cmp	r3, #32
 800d458:	d153      	bne.n	800d502 <USBD_StdDevReq+0xce>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	32ae      	adds	r2, #174	; 0xae
 800d464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	6839      	ldr	r1, [r7, #0]
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	4798      	blx	r3
 800d470:	4603      	mov	r3, r0
 800d472:	73fb      	strb	r3, [r7, #15]
 800d474:	e04a      	b.n	800d50c <USBD_StdDevReq+0xd8>
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	785b      	ldrb	r3, [r3, #1]
 800d47a:	2b09      	cmp	r3, #9
 800d47c:	d83b      	bhi.n	800d4f6 <USBD_StdDevReq+0xc2>
 800d47e:	a201      	add	r2, pc, #4	; (adr r2, 800d484 <USBD_StdDevReq+0x50>)
 800d480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d484:	0800d4d9 	.word	0x0800d4d9
 800d488:	0800d4ed 	.word	0x0800d4ed
 800d48c:	0800d4f7 	.word	0x0800d4f7
 800d490:	0800d4e3 	.word	0x0800d4e3
 800d494:	0800d4f7 	.word	0x0800d4f7
 800d498:	0800d4b7 	.word	0x0800d4b7
 800d49c:	0800d4ad 	.word	0x0800d4ad
 800d4a0:	0800d4f7 	.word	0x0800d4f7
 800d4a4:	0800d4cf 	.word	0x0800d4cf
 800d4a8:	0800d4c1 	.word	0x0800d4c1
 800d4ac:	6839      	ldr	r1, [r7, #0]
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 fa3c 	bl	800d92c <USBD_GetDescriptor>
 800d4b4:	e024      	b.n	800d500 <USBD_StdDevReq+0xcc>
 800d4b6:	6839      	ldr	r1, [r7, #0]
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 fba1 	bl	800dc00 <USBD_SetAddress>
 800d4be:	e01f      	b.n	800d500 <USBD_StdDevReq+0xcc>
 800d4c0:	6839      	ldr	r1, [r7, #0]
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 fbe0 	bl	800dc88 <USBD_SetConfig>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	73fb      	strb	r3, [r7, #15]
 800d4cc:	e018      	b.n	800d500 <USBD_StdDevReq+0xcc>
 800d4ce:	6839      	ldr	r1, [r7, #0]
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fc83 	bl	800dddc <USBD_GetConfig>
 800d4d6:	e013      	b.n	800d500 <USBD_StdDevReq+0xcc>
 800d4d8:	6839      	ldr	r1, [r7, #0]
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 fcb4 	bl	800de48 <USBD_GetStatus>
 800d4e0:	e00e      	b.n	800d500 <USBD_StdDevReq+0xcc>
 800d4e2:	6839      	ldr	r1, [r7, #0]
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 fce3 	bl	800deb0 <USBD_SetFeature>
 800d4ea:	e009      	b.n	800d500 <USBD_StdDevReq+0xcc>
 800d4ec:	6839      	ldr	r1, [r7, #0]
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 fd07 	bl	800df02 <USBD_ClrFeature>
 800d4f4:	e004      	b.n	800d500 <USBD_StdDevReq+0xcc>
 800d4f6:	6839      	ldr	r1, [r7, #0]
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 fd5e 	bl	800dfba <USBD_CtlError>
 800d4fe:	bf00      	nop
 800d500:	e004      	b.n	800d50c <USBD_StdDevReq+0xd8>
 800d502:	6839      	ldr	r1, [r7, #0]
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 fd58 	bl	800dfba <USBD_CtlError>
 800d50a:	bf00      	nop
 800d50c:	7bfb      	ldrb	r3, [r7, #15]
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop

0800d518 <USBD_StdItfReq>:
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
 800d522:	2300      	movs	r3, #0
 800d524:	73fb      	strb	r3, [r7, #15]
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d52e:	2b40      	cmp	r3, #64	; 0x40
 800d530:	d005      	beq.n	800d53e <USBD_StdItfReq+0x26>
 800d532:	2b40      	cmp	r3, #64	; 0x40
 800d534:	d852      	bhi.n	800d5dc <USBD_StdItfReq+0xc4>
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <USBD_StdItfReq+0x26>
 800d53a:	2b20      	cmp	r3, #32
 800d53c:	d14e      	bne.n	800d5dc <USBD_StdItfReq+0xc4>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d544:	b2db      	uxtb	r3, r3
 800d546:	3b01      	subs	r3, #1
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d840      	bhi.n	800d5ce <USBD_StdItfReq+0xb6>
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	889b      	ldrh	r3, [r3, #4]
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b01      	cmp	r3, #1
 800d554:	d836      	bhi.n	800d5c4 <USBD_StdItfReq+0xac>
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	889b      	ldrh	r3, [r3, #4]
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	4619      	mov	r1, r3
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7ff fed9 	bl	800d316 <USBD_CoreFindIF>
 800d564:	4603      	mov	r3, r0
 800d566:	73bb      	strb	r3, [r7, #14]
 800d568:	7bbb      	ldrb	r3, [r7, #14]
 800d56a:	2bff      	cmp	r3, #255	; 0xff
 800d56c:	d01d      	beq.n	800d5aa <USBD_StdItfReq+0x92>
 800d56e:	7bbb      	ldrb	r3, [r7, #14]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d11a      	bne.n	800d5aa <USBD_StdItfReq+0x92>
 800d574:	7bba      	ldrb	r2, [r7, #14]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	32ae      	adds	r2, #174	; 0xae
 800d57a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00f      	beq.n	800d5a4 <USBD_StdItfReq+0x8c>
 800d584:	7bba      	ldrb	r2, [r7, #14]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800d58c:	7bba      	ldrb	r2, [r7, #14]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	32ae      	adds	r2, #174	; 0xae
 800d592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	6839      	ldr	r1, [r7, #0]
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	4798      	blx	r3
 800d59e:	4603      	mov	r3, r0
 800d5a0:	73fb      	strb	r3, [r7, #15]
 800d5a2:	e004      	b.n	800d5ae <USBD_StdItfReq+0x96>
 800d5a4:	2303      	movs	r3, #3
 800d5a6:	73fb      	strb	r3, [r7, #15]
 800d5a8:	e001      	b.n	800d5ae <USBD_StdItfReq+0x96>
 800d5aa:	2303      	movs	r3, #3
 800d5ac:	73fb      	strb	r3, [r7, #15]
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	88db      	ldrh	r3, [r3, #6]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d110      	bne.n	800d5d8 <USBD_StdItfReq+0xc0>
 800d5b6:	7bfb      	ldrb	r3, [r7, #15]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d10d      	bne.n	800d5d8 <USBD_StdItfReq+0xc0>
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 fdc7 	bl	800e150 <USBD_CtlSendStatus>
 800d5c2:	e009      	b.n	800d5d8 <USBD_StdItfReq+0xc0>
 800d5c4:	6839      	ldr	r1, [r7, #0]
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 fcf7 	bl	800dfba <USBD_CtlError>
 800d5cc:	e004      	b.n	800d5d8 <USBD_StdItfReq+0xc0>
 800d5ce:	6839      	ldr	r1, [r7, #0]
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 fcf2 	bl	800dfba <USBD_CtlError>
 800d5d6:	e000      	b.n	800d5da <USBD_StdItfReq+0xc2>
 800d5d8:	bf00      	nop
 800d5da:	e004      	b.n	800d5e6 <USBD_StdItfReq+0xce>
 800d5dc:	6839      	ldr	r1, [r7, #0]
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 fceb 	bl	800dfba <USBD_CtlError>
 800d5e4:	bf00      	nop
 800d5e6:	7bfb      	ldrb	r3, [r7, #15]
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3710      	adds	r7, #16
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <USBD_StdEPReq>:
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	73fb      	strb	r3, [r7, #15]
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	889b      	ldrh	r3, [r3, #4]
 800d602:	73bb      	strb	r3, [r7, #14]
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d60c:	2b40      	cmp	r3, #64	; 0x40
 800d60e:	d007      	beq.n	800d620 <USBD_StdEPReq+0x30>
 800d610:	2b40      	cmp	r3, #64	; 0x40
 800d612:	f200 817f 	bhi.w	800d914 <USBD_StdEPReq+0x324>
 800d616:	2b00      	cmp	r3, #0
 800d618:	d02a      	beq.n	800d670 <USBD_StdEPReq+0x80>
 800d61a:	2b20      	cmp	r3, #32
 800d61c:	f040 817a 	bne.w	800d914 <USBD_StdEPReq+0x324>
 800d620:	7bbb      	ldrb	r3, [r7, #14]
 800d622:	4619      	mov	r1, r3
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f7ff fe83 	bl	800d330 <USBD_CoreFindEP>
 800d62a:	4603      	mov	r3, r0
 800d62c:	737b      	strb	r3, [r7, #13]
 800d62e:	7b7b      	ldrb	r3, [r7, #13]
 800d630:	2bff      	cmp	r3, #255	; 0xff
 800d632:	f000 8174 	beq.w	800d91e <USBD_StdEPReq+0x32e>
 800d636:	7b7b      	ldrb	r3, [r7, #13]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	f040 8170 	bne.w	800d91e <USBD_StdEPReq+0x32e>
 800d63e:	7b7a      	ldrb	r2, [r7, #13]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800d646:	7b7a      	ldrb	r2, [r7, #13]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	32ae      	adds	r2, #174	; 0xae
 800d64c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d650:	689b      	ldr	r3, [r3, #8]
 800d652:	2b00      	cmp	r3, #0
 800d654:	f000 8163 	beq.w	800d91e <USBD_StdEPReq+0x32e>
 800d658:	7b7a      	ldrb	r2, [r7, #13]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	32ae      	adds	r2, #174	; 0xae
 800d65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d662:	689b      	ldr	r3, [r3, #8]
 800d664:	6839      	ldr	r1, [r7, #0]
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	4798      	blx	r3
 800d66a:	4603      	mov	r3, r0
 800d66c:	73fb      	strb	r3, [r7, #15]
 800d66e:	e156      	b.n	800d91e <USBD_StdEPReq+0x32e>
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	785b      	ldrb	r3, [r3, #1]
 800d674:	2b03      	cmp	r3, #3
 800d676:	d008      	beq.n	800d68a <USBD_StdEPReq+0x9a>
 800d678:	2b03      	cmp	r3, #3
 800d67a:	f300 8145 	bgt.w	800d908 <USBD_StdEPReq+0x318>
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f000 809b 	beq.w	800d7ba <USBD_StdEPReq+0x1ca>
 800d684:	2b01      	cmp	r3, #1
 800d686:	d03c      	beq.n	800d702 <USBD_StdEPReq+0x112>
 800d688:	e13e      	b.n	800d908 <USBD_StdEPReq+0x318>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d690:	b2db      	uxtb	r3, r3
 800d692:	2b02      	cmp	r3, #2
 800d694:	d002      	beq.n	800d69c <USBD_StdEPReq+0xac>
 800d696:	2b03      	cmp	r3, #3
 800d698:	d016      	beq.n	800d6c8 <USBD_StdEPReq+0xd8>
 800d69a:	e02c      	b.n	800d6f6 <USBD_StdEPReq+0x106>
 800d69c:	7bbb      	ldrb	r3, [r7, #14]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00d      	beq.n	800d6be <USBD_StdEPReq+0xce>
 800d6a2:	7bbb      	ldrb	r3, [r7, #14]
 800d6a4:	2b80      	cmp	r3, #128	; 0x80
 800d6a6:	d00a      	beq.n	800d6be <USBD_StdEPReq+0xce>
 800d6a8:	7bbb      	ldrb	r3, [r7, #14]
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f001 f979 	bl	800e9a4 <USBD_LL_StallEP>
 800d6b2:	2180      	movs	r1, #128	; 0x80
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f001 f975 	bl	800e9a4 <USBD_LL_StallEP>
 800d6ba:	bf00      	nop
 800d6bc:	e020      	b.n	800d700 <USBD_StdEPReq+0x110>
 800d6be:	6839      	ldr	r1, [r7, #0]
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 fc7a 	bl	800dfba <USBD_CtlError>
 800d6c6:	e01b      	b.n	800d700 <USBD_StdEPReq+0x110>
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	885b      	ldrh	r3, [r3, #2]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d10e      	bne.n	800d6ee <USBD_StdEPReq+0xfe>
 800d6d0:	7bbb      	ldrb	r3, [r7, #14]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00b      	beq.n	800d6ee <USBD_StdEPReq+0xfe>
 800d6d6:	7bbb      	ldrb	r3, [r7, #14]
 800d6d8:	2b80      	cmp	r3, #128	; 0x80
 800d6da:	d008      	beq.n	800d6ee <USBD_StdEPReq+0xfe>
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	88db      	ldrh	r3, [r3, #6]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d104      	bne.n	800d6ee <USBD_StdEPReq+0xfe>
 800d6e4:	7bbb      	ldrb	r3, [r7, #14]
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f001 f95b 	bl	800e9a4 <USBD_LL_StallEP>
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 fd2e 	bl	800e150 <USBD_CtlSendStatus>
 800d6f4:	e004      	b.n	800d700 <USBD_StdEPReq+0x110>
 800d6f6:	6839      	ldr	r1, [r7, #0]
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 fc5e 	bl	800dfba <USBD_CtlError>
 800d6fe:	bf00      	nop
 800d700:	e107      	b.n	800d912 <USBD_StdEPReq+0x322>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	d002      	beq.n	800d714 <USBD_StdEPReq+0x124>
 800d70e:	2b03      	cmp	r3, #3
 800d710:	d016      	beq.n	800d740 <USBD_StdEPReq+0x150>
 800d712:	e04b      	b.n	800d7ac <USBD_StdEPReq+0x1bc>
 800d714:	7bbb      	ldrb	r3, [r7, #14]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00d      	beq.n	800d736 <USBD_StdEPReq+0x146>
 800d71a:	7bbb      	ldrb	r3, [r7, #14]
 800d71c:	2b80      	cmp	r3, #128	; 0x80
 800d71e:	d00a      	beq.n	800d736 <USBD_StdEPReq+0x146>
 800d720:	7bbb      	ldrb	r3, [r7, #14]
 800d722:	4619      	mov	r1, r3
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f001 f93d 	bl	800e9a4 <USBD_LL_StallEP>
 800d72a:	2180      	movs	r1, #128	; 0x80
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f001 f939 	bl	800e9a4 <USBD_LL_StallEP>
 800d732:	bf00      	nop
 800d734:	e040      	b.n	800d7b8 <USBD_StdEPReq+0x1c8>
 800d736:	6839      	ldr	r1, [r7, #0]
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 fc3e 	bl	800dfba <USBD_CtlError>
 800d73e:	e03b      	b.n	800d7b8 <USBD_StdEPReq+0x1c8>
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	885b      	ldrh	r3, [r3, #2]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d136      	bne.n	800d7b6 <USBD_StdEPReq+0x1c6>
 800d748:	7bbb      	ldrb	r3, [r7, #14]
 800d74a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d004      	beq.n	800d75c <USBD_StdEPReq+0x16c>
 800d752:	7bbb      	ldrb	r3, [r7, #14]
 800d754:	4619      	mov	r1, r3
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f001 f943 	bl	800e9e2 <USBD_LL_ClearStallEP>
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 fcf7 	bl	800e150 <USBD_CtlSendStatus>
 800d762:	7bbb      	ldrb	r3, [r7, #14]
 800d764:	4619      	mov	r1, r3
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7ff fde2 	bl	800d330 <USBD_CoreFindEP>
 800d76c:	4603      	mov	r3, r0
 800d76e:	737b      	strb	r3, [r7, #13]
 800d770:	7b7b      	ldrb	r3, [r7, #13]
 800d772:	2bff      	cmp	r3, #255	; 0xff
 800d774:	d01f      	beq.n	800d7b6 <USBD_StdEPReq+0x1c6>
 800d776:	7b7b      	ldrb	r3, [r7, #13]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d11c      	bne.n	800d7b6 <USBD_StdEPReq+0x1c6>
 800d77c:	7b7a      	ldrb	r2, [r7, #13]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800d784:	7b7a      	ldrb	r2, [r7, #13]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	32ae      	adds	r2, #174	; 0xae
 800d78a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d78e:	689b      	ldr	r3, [r3, #8]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d010      	beq.n	800d7b6 <USBD_StdEPReq+0x1c6>
 800d794:	7b7a      	ldrb	r2, [r7, #13]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	32ae      	adds	r2, #174	; 0xae
 800d79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d79e:	689b      	ldr	r3, [r3, #8]
 800d7a0:	6839      	ldr	r1, [r7, #0]
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	4798      	blx	r3
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	73fb      	strb	r3, [r7, #15]
 800d7aa:	e004      	b.n	800d7b6 <USBD_StdEPReq+0x1c6>
 800d7ac:	6839      	ldr	r1, [r7, #0]
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 fc03 	bl	800dfba <USBD_CtlError>
 800d7b4:	e000      	b.n	800d7b8 <USBD_StdEPReq+0x1c8>
 800d7b6:	bf00      	nop
 800d7b8:	e0ab      	b.n	800d912 <USBD_StdEPReq+0x322>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	2b02      	cmp	r3, #2
 800d7c4:	d002      	beq.n	800d7cc <USBD_StdEPReq+0x1dc>
 800d7c6:	2b03      	cmp	r3, #3
 800d7c8:	d032      	beq.n	800d830 <USBD_StdEPReq+0x240>
 800d7ca:	e097      	b.n	800d8fc <USBD_StdEPReq+0x30c>
 800d7cc:	7bbb      	ldrb	r3, [r7, #14]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d007      	beq.n	800d7e2 <USBD_StdEPReq+0x1f2>
 800d7d2:	7bbb      	ldrb	r3, [r7, #14]
 800d7d4:	2b80      	cmp	r3, #128	; 0x80
 800d7d6:	d004      	beq.n	800d7e2 <USBD_StdEPReq+0x1f2>
 800d7d8:	6839      	ldr	r1, [r7, #0]
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 fbed 	bl	800dfba <USBD_CtlError>
 800d7e0:	e091      	b.n	800d906 <USBD_StdEPReq+0x316>
 800d7e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	da0b      	bge.n	800d802 <USBD_StdEPReq+0x212>
 800d7ea:	7bbb      	ldrb	r3, [r7, #14]
 800d7ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d7f0:	4613      	mov	r3, r2
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	4413      	add	r3, r2
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	3310      	adds	r3, #16
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	3304      	adds	r3, #4
 800d800:	e00b      	b.n	800d81a <USBD_StdEPReq+0x22a>
 800d802:	7bbb      	ldrb	r3, [r7, #14]
 800d804:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d808:	4613      	mov	r3, r2
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	4413      	add	r3, r2
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	4413      	add	r3, r2
 800d818:	3304      	adds	r3, #4
 800d81a:	60bb      	str	r3, [r7, #8]
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	2200      	movs	r2, #0
 800d820:	601a      	str	r2, [r3, #0]
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	2202      	movs	r2, #2
 800d826:	4619      	mov	r1, r3
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 fc37 	bl	800e09c <USBD_CtlSendData>
 800d82e:	e06a      	b.n	800d906 <USBD_StdEPReq+0x316>
 800d830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d834:	2b00      	cmp	r3, #0
 800d836:	da11      	bge.n	800d85c <USBD_StdEPReq+0x26c>
 800d838:	7bbb      	ldrb	r3, [r7, #14]
 800d83a:	f003 020f 	and.w	r2, r3, #15
 800d83e:	6879      	ldr	r1, [r7, #4]
 800d840:	4613      	mov	r3, r2
 800d842:	009b      	lsls	r3, r3, #2
 800d844:	4413      	add	r3, r2
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	440b      	add	r3, r1
 800d84a:	3324      	adds	r3, #36	; 0x24
 800d84c:	881b      	ldrh	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d117      	bne.n	800d882 <USBD_StdEPReq+0x292>
 800d852:	6839      	ldr	r1, [r7, #0]
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 fbb0 	bl	800dfba <USBD_CtlError>
 800d85a:	e054      	b.n	800d906 <USBD_StdEPReq+0x316>
 800d85c:	7bbb      	ldrb	r3, [r7, #14]
 800d85e:	f003 020f 	and.w	r2, r3, #15
 800d862:	6879      	ldr	r1, [r7, #4]
 800d864:	4613      	mov	r3, r2
 800d866:	009b      	lsls	r3, r3, #2
 800d868:	4413      	add	r3, r2
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	440b      	add	r3, r1
 800d86e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d872:	881b      	ldrh	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d104      	bne.n	800d882 <USBD_StdEPReq+0x292>
 800d878:	6839      	ldr	r1, [r7, #0]
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 fb9d 	bl	800dfba <USBD_CtlError>
 800d880:	e041      	b.n	800d906 <USBD_StdEPReq+0x316>
 800d882:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d886:	2b00      	cmp	r3, #0
 800d888:	da0b      	bge.n	800d8a2 <USBD_StdEPReq+0x2b2>
 800d88a:	7bbb      	ldrb	r3, [r7, #14]
 800d88c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d890:	4613      	mov	r3, r2
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	4413      	add	r3, r2
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	3310      	adds	r3, #16
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	4413      	add	r3, r2
 800d89e:	3304      	adds	r3, #4
 800d8a0:	e00b      	b.n	800d8ba <USBD_StdEPReq+0x2ca>
 800d8a2:	7bbb      	ldrb	r3, [r7, #14]
 800d8a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d8a8:	4613      	mov	r3, r2
 800d8aa:	009b      	lsls	r3, r3, #2
 800d8ac:	4413      	add	r3, r2
 800d8ae:	009b      	lsls	r3, r3, #2
 800d8b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	3304      	adds	r3, #4
 800d8ba:	60bb      	str	r3, [r7, #8]
 800d8bc:	7bbb      	ldrb	r3, [r7, #14]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d002      	beq.n	800d8c8 <USBD_StdEPReq+0x2d8>
 800d8c2:	7bbb      	ldrb	r3, [r7, #14]
 800d8c4:	2b80      	cmp	r3, #128	; 0x80
 800d8c6:	d103      	bne.n	800d8d0 <USBD_StdEPReq+0x2e0>
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	601a      	str	r2, [r3, #0]
 800d8ce:	e00e      	b.n	800d8ee <USBD_StdEPReq+0x2fe>
 800d8d0:	7bbb      	ldrb	r3, [r7, #14]
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f001 f8a3 	bl	800ea20 <USBD_LL_IsStallEP>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d003      	beq.n	800d8e8 <USBD_StdEPReq+0x2f8>
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	601a      	str	r2, [r3, #0]
 800d8e6:	e002      	b.n	800d8ee <USBD_StdEPReq+0x2fe>
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	2202      	movs	r2, #2
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 fbd1 	bl	800e09c <USBD_CtlSendData>
 800d8fa:	e004      	b.n	800d906 <USBD_StdEPReq+0x316>
 800d8fc:	6839      	ldr	r1, [r7, #0]
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 fb5b 	bl	800dfba <USBD_CtlError>
 800d904:	bf00      	nop
 800d906:	e004      	b.n	800d912 <USBD_StdEPReq+0x322>
 800d908:	6839      	ldr	r1, [r7, #0]
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 fb55 	bl	800dfba <USBD_CtlError>
 800d910:	bf00      	nop
 800d912:	e005      	b.n	800d920 <USBD_StdEPReq+0x330>
 800d914:	6839      	ldr	r1, [r7, #0]
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 fb4f 	bl	800dfba <USBD_CtlError>
 800d91c:	e000      	b.n	800d920 <USBD_StdEPReq+0x330>
 800d91e:	bf00      	nop
 800d920:	7bfb      	ldrb	r3, [r7, #15]
 800d922:	4618      	mov	r0, r3
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
	...

0800d92c <USBD_GetDescriptor>:
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b084      	sub	sp, #16
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
 800d936:	2300      	movs	r3, #0
 800d938:	813b      	strh	r3, [r7, #8]
 800d93a:	2300      	movs	r3, #0
 800d93c:	60fb      	str	r3, [r7, #12]
 800d93e:	2300      	movs	r3, #0
 800d940:	72fb      	strb	r3, [r7, #11]
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	885b      	ldrh	r3, [r3, #2]
 800d946:	0a1b      	lsrs	r3, r3, #8
 800d948:	b29b      	uxth	r3, r3
 800d94a:	3b01      	subs	r3, #1
 800d94c:	2b06      	cmp	r3, #6
 800d94e:	f200 8128 	bhi.w	800dba2 <USBD_GetDescriptor+0x276>
 800d952:	a201      	add	r2, pc, #4	; (adr r2, 800d958 <USBD_GetDescriptor+0x2c>)
 800d954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d958:	0800d975 	.word	0x0800d975
 800d95c:	0800d98d 	.word	0x0800d98d
 800d960:	0800d9cd 	.word	0x0800d9cd
 800d964:	0800dba3 	.word	0x0800dba3
 800d968:	0800dba3 	.word	0x0800dba3
 800d96c:	0800db43 	.word	0x0800db43
 800d970:	0800db6f 	.word	0x0800db6f
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	687a      	ldr	r2, [r7, #4]
 800d97e:	7c12      	ldrb	r2, [r2, #16]
 800d980:	f107 0108 	add.w	r1, r7, #8
 800d984:	4610      	mov	r0, r2
 800d986:	4798      	blx	r3
 800d988:	60f8      	str	r0, [r7, #12]
 800d98a:	e112      	b.n	800dbb2 <USBD_GetDescriptor+0x286>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	7c1b      	ldrb	r3, [r3, #16]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10d      	bne.n	800d9b0 <USBD_GetDescriptor+0x84>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d99c:	f107 0208 	add.w	r2, r7, #8
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	4798      	blx	r3
 800d9a4:	60f8      	str	r0, [r7, #12]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	2202      	movs	r2, #2
 800d9ac:	701a      	strb	r2, [r3, #0]
 800d9ae:	e100      	b.n	800dbb2 <USBD_GetDescriptor+0x286>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b8:	f107 0208 	add.w	r2, r7, #8
 800d9bc:	4610      	mov	r0, r2
 800d9be:	4798      	blx	r3
 800d9c0:	60f8      	str	r0, [r7, #12]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	2202      	movs	r2, #2
 800d9c8:	701a      	strb	r2, [r3, #0]
 800d9ca:	e0f2      	b.n	800dbb2 <USBD_GetDescriptor+0x286>
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	885b      	ldrh	r3, [r3, #2]
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	2b05      	cmp	r3, #5
 800d9d4:	f200 80ac 	bhi.w	800db30 <USBD_GetDescriptor+0x204>
 800d9d8:	a201      	add	r2, pc, #4	; (adr r2, 800d9e0 <USBD_GetDescriptor+0xb4>)
 800d9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9de:	bf00      	nop
 800d9e0:	0800d9f9 	.word	0x0800d9f9
 800d9e4:	0800da2d 	.word	0x0800da2d
 800d9e8:	0800da61 	.word	0x0800da61
 800d9ec:	0800da95 	.word	0x0800da95
 800d9f0:	0800dac9 	.word	0x0800dac9
 800d9f4:	0800dafd 	.word	0x0800dafd
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00b      	beq.n	800da1c <USBD_GetDescriptor+0xf0>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	7c12      	ldrb	r2, [r2, #16]
 800da10:	f107 0108 	add.w	r1, r7, #8
 800da14:	4610      	mov	r0, r2
 800da16:	4798      	blx	r3
 800da18:	60f8      	str	r0, [r7, #12]
 800da1a:	e091      	b.n	800db40 <USBD_GetDescriptor+0x214>
 800da1c:	6839      	ldr	r1, [r7, #0]
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f000 facb 	bl	800dfba <USBD_CtlError>
 800da24:	7afb      	ldrb	r3, [r7, #11]
 800da26:	3301      	adds	r3, #1
 800da28:	72fb      	strb	r3, [r7, #11]
 800da2a:	e089      	b.n	800db40 <USBD_GetDescriptor+0x214>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da32:	689b      	ldr	r3, [r3, #8]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d00b      	beq.n	800da50 <USBD_GetDescriptor+0x124>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	7c12      	ldrb	r2, [r2, #16]
 800da44:	f107 0108 	add.w	r1, r7, #8
 800da48:	4610      	mov	r0, r2
 800da4a:	4798      	blx	r3
 800da4c:	60f8      	str	r0, [r7, #12]
 800da4e:	e077      	b.n	800db40 <USBD_GetDescriptor+0x214>
 800da50:	6839      	ldr	r1, [r7, #0]
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 fab1 	bl	800dfba <USBD_CtlError>
 800da58:	7afb      	ldrb	r3, [r7, #11]
 800da5a:	3301      	adds	r3, #1
 800da5c:	72fb      	strb	r3, [r7, #11]
 800da5e:	e06f      	b.n	800db40 <USBD_GetDescriptor+0x214>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00b      	beq.n	800da84 <USBD_GetDescriptor+0x158>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	7c12      	ldrb	r2, [r2, #16]
 800da78:	f107 0108 	add.w	r1, r7, #8
 800da7c:	4610      	mov	r0, r2
 800da7e:	4798      	blx	r3
 800da80:	60f8      	str	r0, [r7, #12]
 800da82:	e05d      	b.n	800db40 <USBD_GetDescriptor+0x214>
 800da84:	6839      	ldr	r1, [r7, #0]
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 fa97 	bl	800dfba <USBD_CtlError>
 800da8c:	7afb      	ldrb	r3, [r7, #11]
 800da8e:	3301      	adds	r3, #1
 800da90:	72fb      	strb	r3, [r7, #11]
 800da92:	e055      	b.n	800db40 <USBD_GetDescriptor+0x214>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da9a:	691b      	ldr	r3, [r3, #16]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d00b      	beq.n	800dab8 <USBD_GetDescriptor+0x18c>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daa6:	691b      	ldr	r3, [r3, #16]
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	7c12      	ldrb	r2, [r2, #16]
 800daac:	f107 0108 	add.w	r1, r7, #8
 800dab0:	4610      	mov	r0, r2
 800dab2:	4798      	blx	r3
 800dab4:	60f8      	str	r0, [r7, #12]
 800dab6:	e043      	b.n	800db40 <USBD_GetDescriptor+0x214>
 800dab8:	6839      	ldr	r1, [r7, #0]
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f000 fa7d 	bl	800dfba <USBD_CtlError>
 800dac0:	7afb      	ldrb	r3, [r7, #11]
 800dac2:	3301      	adds	r3, #1
 800dac4:	72fb      	strb	r3, [r7, #11]
 800dac6:	e03b      	b.n	800db40 <USBD_GetDescriptor+0x214>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dace:	695b      	ldr	r3, [r3, #20]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00b      	beq.n	800daec <USBD_GetDescriptor+0x1c0>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dada:	695b      	ldr	r3, [r3, #20]
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	7c12      	ldrb	r2, [r2, #16]
 800dae0:	f107 0108 	add.w	r1, r7, #8
 800dae4:	4610      	mov	r0, r2
 800dae6:	4798      	blx	r3
 800dae8:	60f8      	str	r0, [r7, #12]
 800daea:	e029      	b.n	800db40 <USBD_GetDescriptor+0x214>
 800daec:	6839      	ldr	r1, [r7, #0]
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 fa63 	bl	800dfba <USBD_CtlError>
 800daf4:	7afb      	ldrb	r3, [r7, #11]
 800daf6:	3301      	adds	r3, #1
 800daf8:	72fb      	strb	r3, [r7, #11]
 800dafa:	e021      	b.n	800db40 <USBD_GetDescriptor+0x214>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db02:	699b      	ldr	r3, [r3, #24]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00b      	beq.n	800db20 <USBD_GetDescriptor+0x1f4>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db0e:	699b      	ldr	r3, [r3, #24]
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	7c12      	ldrb	r2, [r2, #16]
 800db14:	f107 0108 	add.w	r1, r7, #8
 800db18:	4610      	mov	r0, r2
 800db1a:	4798      	blx	r3
 800db1c:	60f8      	str	r0, [r7, #12]
 800db1e:	e00f      	b.n	800db40 <USBD_GetDescriptor+0x214>
 800db20:	6839      	ldr	r1, [r7, #0]
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f000 fa49 	bl	800dfba <USBD_CtlError>
 800db28:	7afb      	ldrb	r3, [r7, #11]
 800db2a:	3301      	adds	r3, #1
 800db2c:	72fb      	strb	r3, [r7, #11]
 800db2e:	e007      	b.n	800db40 <USBD_GetDescriptor+0x214>
 800db30:	6839      	ldr	r1, [r7, #0]
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 fa41 	bl	800dfba <USBD_CtlError>
 800db38:	7afb      	ldrb	r3, [r7, #11]
 800db3a:	3301      	adds	r3, #1
 800db3c:	72fb      	strb	r3, [r7, #11]
 800db3e:	bf00      	nop
 800db40:	e037      	b.n	800dbb2 <USBD_GetDescriptor+0x286>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	7c1b      	ldrb	r3, [r3, #16]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d109      	bne.n	800db5e <USBD_GetDescriptor+0x232>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db52:	f107 0208 	add.w	r2, r7, #8
 800db56:	4610      	mov	r0, r2
 800db58:	4798      	blx	r3
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	e029      	b.n	800dbb2 <USBD_GetDescriptor+0x286>
 800db5e:	6839      	ldr	r1, [r7, #0]
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 fa2a 	bl	800dfba <USBD_CtlError>
 800db66:	7afb      	ldrb	r3, [r7, #11]
 800db68:	3301      	adds	r3, #1
 800db6a:	72fb      	strb	r3, [r7, #11]
 800db6c:	e021      	b.n	800dbb2 <USBD_GetDescriptor+0x286>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	7c1b      	ldrb	r3, [r3, #16]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d10d      	bne.n	800db92 <USBD_GetDescriptor+0x266>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db7e:	f107 0208 	add.w	r2, r7, #8
 800db82:	4610      	mov	r0, r2
 800db84:	4798      	blx	r3
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	3301      	adds	r3, #1
 800db8c:	2207      	movs	r2, #7
 800db8e:	701a      	strb	r2, [r3, #0]
 800db90:	e00f      	b.n	800dbb2 <USBD_GetDescriptor+0x286>
 800db92:	6839      	ldr	r1, [r7, #0]
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 fa10 	bl	800dfba <USBD_CtlError>
 800db9a:	7afb      	ldrb	r3, [r7, #11]
 800db9c:	3301      	adds	r3, #1
 800db9e:	72fb      	strb	r3, [r7, #11]
 800dba0:	e007      	b.n	800dbb2 <USBD_GetDescriptor+0x286>
 800dba2:	6839      	ldr	r1, [r7, #0]
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 fa08 	bl	800dfba <USBD_CtlError>
 800dbaa:	7afb      	ldrb	r3, [r7, #11]
 800dbac:	3301      	adds	r3, #1
 800dbae:	72fb      	strb	r3, [r7, #11]
 800dbb0:	bf00      	nop
 800dbb2:	7afb      	ldrb	r3, [r7, #11]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d11e      	bne.n	800dbf6 <USBD_GetDescriptor+0x2ca>
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	88db      	ldrh	r3, [r3, #6]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d016      	beq.n	800dbee <USBD_GetDescriptor+0x2c2>
 800dbc0:	893b      	ldrh	r3, [r7, #8]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d00e      	beq.n	800dbe4 <USBD_GetDescriptor+0x2b8>
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	88da      	ldrh	r2, [r3, #6]
 800dbca:	893b      	ldrh	r3, [r7, #8]
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	bf28      	it	cs
 800dbd0:	4613      	movcs	r3, r2
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	813b      	strh	r3, [r7, #8]
 800dbd6:	893b      	ldrh	r3, [r7, #8]
 800dbd8:	461a      	mov	r2, r3
 800dbda:	68f9      	ldr	r1, [r7, #12]
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 fa5d 	bl	800e09c <USBD_CtlSendData>
 800dbe2:	e009      	b.n	800dbf8 <USBD_GetDescriptor+0x2cc>
 800dbe4:	6839      	ldr	r1, [r7, #0]
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 f9e7 	bl	800dfba <USBD_CtlError>
 800dbec:	e004      	b.n	800dbf8 <USBD_GetDescriptor+0x2cc>
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 faae 	bl	800e150 <USBD_CtlSendStatus>
 800dbf4:	e000      	b.n	800dbf8 <USBD_GetDescriptor+0x2cc>
 800dbf6:	bf00      	nop
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop

0800dc00 <USBD_SetAddress>:
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	889b      	ldrh	r3, [r3, #4]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d131      	bne.n	800dc76 <USBD_SetAddress+0x76>
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	88db      	ldrh	r3, [r3, #6]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d12d      	bne.n	800dc76 <USBD_SetAddress+0x76>
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	885b      	ldrh	r3, [r3, #2]
 800dc1e:	2b7f      	cmp	r3, #127	; 0x7f
 800dc20:	d829      	bhi.n	800dc76 <USBD_SetAddress+0x76>
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	885b      	ldrh	r3, [r3, #2]
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc2c:	73fb      	strb	r3, [r7, #15]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	2b03      	cmp	r3, #3
 800dc38:	d104      	bne.n	800dc44 <USBD_SetAddress+0x44>
 800dc3a:	6839      	ldr	r1, [r7, #0]
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 f9bc 	bl	800dfba <USBD_CtlError>
 800dc42:	e01d      	b.n	800dc80 <USBD_SetAddress+0x80>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	7bfa      	ldrb	r2, [r7, #15]
 800dc48:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 800dc4c:	7bfb      	ldrb	r3, [r7, #15]
 800dc4e:	4619      	mov	r1, r3
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 ff11 	bl	800ea78 <USBD_LL_SetUSBAddress>
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 fa7a 	bl	800e150 <USBD_CtlSendStatus>
 800dc5c:	7bfb      	ldrb	r3, [r7, #15]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d004      	beq.n	800dc6c <USBD_SetAddress+0x6c>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2202      	movs	r2, #2
 800dc66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800dc6a:	e009      	b.n	800dc80 <USBD_SetAddress+0x80>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800dc74:	e004      	b.n	800dc80 <USBD_SetAddress+0x80>
 800dc76:	6839      	ldr	r1, [r7, #0]
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 f99e 	bl	800dfba <USBD_CtlError>
 800dc7e:	bf00      	nop
 800dc80:	bf00      	nop
 800dc82:	3710      	adds	r7, #16
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <USBD_SetConfig>:
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
 800dc92:	2300      	movs	r3, #0
 800dc94:	73fb      	strb	r3, [r7, #15]
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	885b      	ldrh	r3, [r3, #2]
 800dc9a:	b2da      	uxtb	r2, r3
 800dc9c:	4b4e      	ldr	r3, [pc, #312]	; (800ddd8 <USBD_SetConfig+0x150>)
 800dc9e:	701a      	strb	r2, [r3, #0]
 800dca0:	4b4d      	ldr	r3, [pc, #308]	; (800ddd8 <USBD_SetConfig+0x150>)
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d905      	bls.n	800dcb4 <USBD_SetConfig+0x2c>
 800dca8:	6839      	ldr	r1, [r7, #0]
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 f985 	bl	800dfba <USBD_CtlError>
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	e08c      	b.n	800ddce <USBD_SetConfig+0x146>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d002      	beq.n	800dcc6 <USBD_SetConfig+0x3e>
 800dcc0:	2b03      	cmp	r3, #3
 800dcc2:	d029      	beq.n	800dd18 <USBD_SetConfig+0x90>
 800dcc4:	e075      	b.n	800ddb2 <USBD_SetConfig+0x12a>
 800dcc6:	4b44      	ldr	r3, [pc, #272]	; (800ddd8 <USBD_SetConfig+0x150>)
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d020      	beq.n	800dd10 <USBD_SetConfig+0x88>
 800dcce:	4b42      	ldr	r3, [pc, #264]	; (800ddd8 <USBD_SetConfig+0x150>)
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	605a      	str	r2, [r3, #4]
 800dcd8:	4b3f      	ldr	r3, [pc, #252]	; (800ddd8 <USBD_SetConfig+0x150>)
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	4619      	mov	r1, r3
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7fe ffe7 	bl	800ccb2 <USBD_SetClassConfig>
 800dce4:	4603      	mov	r3, r0
 800dce6:	73fb      	strb	r3, [r7, #15]
 800dce8:	7bfb      	ldrb	r3, [r7, #15]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d008      	beq.n	800dd00 <USBD_SetConfig+0x78>
 800dcee:	6839      	ldr	r1, [r7, #0]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 f962 	bl	800dfba <USBD_CtlError>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2202      	movs	r2, #2
 800dcfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800dcfe:	e065      	b.n	800ddcc <USBD_SetConfig+0x144>
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 fa25 	bl	800e150 <USBD_CtlSendStatus>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2203      	movs	r2, #3
 800dd0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800dd0e:	e05d      	b.n	800ddcc <USBD_SetConfig+0x144>
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f000 fa1d 	bl	800e150 <USBD_CtlSendStatus>
 800dd16:	e059      	b.n	800ddcc <USBD_SetConfig+0x144>
 800dd18:	4b2f      	ldr	r3, [pc, #188]	; (800ddd8 <USBD_SetConfig+0x150>)
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d112      	bne.n	800dd46 <USBD_SetConfig+0xbe>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2202      	movs	r2, #2
 800dd24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800dd28:	4b2b      	ldr	r3, [pc, #172]	; (800ddd8 <USBD_SetConfig+0x150>)
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	605a      	str	r2, [r3, #4]
 800dd32:	4b29      	ldr	r3, [pc, #164]	; (800ddd8 <USBD_SetConfig+0x150>)
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	4619      	mov	r1, r3
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f7fe ffd6 	bl	800ccea <USBD_ClrClassConfig>
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f000 fa06 	bl	800e150 <USBD_CtlSendStatus>
 800dd44:	e042      	b.n	800ddcc <USBD_SetConfig+0x144>
 800dd46:	4b24      	ldr	r3, [pc, #144]	; (800ddd8 <USBD_SetConfig+0x150>)
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d02a      	beq.n	800ddaa <USBD_SetConfig+0x122>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f7fe ffc4 	bl	800ccea <USBD_ClrClassConfig>
 800dd62:	4b1d      	ldr	r3, [pc, #116]	; (800ddd8 <USBD_SetConfig+0x150>)
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	461a      	mov	r2, r3
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	605a      	str	r2, [r3, #4]
 800dd6c:	4b1a      	ldr	r3, [pc, #104]	; (800ddd8 <USBD_SetConfig+0x150>)
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	4619      	mov	r1, r3
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7fe ff9d 	bl	800ccb2 <USBD_SetClassConfig>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	73fb      	strb	r3, [r7, #15]
 800dd7c:	7bfb      	ldrb	r3, [r7, #15]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00f      	beq.n	800dda2 <USBD_SetConfig+0x11a>
 800dd82:	6839      	ldr	r1, [r7, #0]
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 f918 	bl	800dfba <USBD_CtlError>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	4619      	mov	r1, r3
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f7fe ffa9 	bl	800ccea <USBD_ClrClassConfig>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2202      	movs	r2, #2
 800dd9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800dda0:	e014      	b.n	800ddcc <USBD_SetConfig+0x144>
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 f9d4 	bl	800e150 <USBD_CtlSendStatus>
 800dda8:	e010      	b.n	800ddcc <USBD_SetConfig+0x144>
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f000 f9d0 	bl	800e150 <USBD_CtlSendStatus>
 800ddb0:	e00c      	b.n	800ddcc <USBD_SetConfig+0x144>
 800ddb2:	6839      	ldr	r1, [r7, #0]
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f000 f900 	bl	800dfba <USBD_CtlError>
 800ddba:	4b07      	ldr	r3, [pc, #28]	; (800ddd8 <USBD_SetConfig+0x150>)
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f7fe ff92 	bl	800ccea <USBD_ClrClassConfig>
 800ddc6:	2303      	movs	r3, #3
 800ddc8:	73fb      	strb	r3, [r7, #15]
 800ddca:	bf00      	nop
 800ddcc:	7bfb      	ldrb	r3, [r7, #15]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	20001dd4 	.word	0x20001dd4

0800dddc <USBD_GetConfig>:
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	88db      	ldrh	r3, [r3, #6]
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d004      	beq.n	800ddf8 <USBD_GetConfig+0x1c>
 800ddee:	6839      	ldr	r1, [r7, #0]
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 f8e2 	bl	800dfba <USBD_CtlError>
 800ddf6:	e023      	b.n	800de40 <USBD_GetConfig+0x64>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	2b02      	cmp	r3, #2
 800de02:	dc02      	bgt.n	800de0a <USBD_GetConfig+0x2e>
 800de04:	2b00      	cmp	r3, #0
 800de06:	dc03      	bgt.n	800de10 <USBD_GetConfig+0x34>
 800de08:	e015      	b.n	800de36 <USBD_GetConfig+0x5a>
 800de0a:	2b03      	cmp	r3, #3
 800de0c:	d00b      	beq.n	800de26 <USBD_GetConfig+0x4a>
 800de0e:	e012      	b.n	800de36 <USBD_GetConfig+0x5a>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2200      	movs	r2, #0
 800de14:	609a      	str	r2, [r3, #8]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	3308      	adds	r3, #8
 800de1a:	2201      	movs	r2, #1
 800de1c:	4619      	mov	r1, r3
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 f93c 	bl	800e09c <USBD_CtlSendData>
 800de24:	e00c      	b.n	800de40 <USBD_GetConfig+0x64>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	3304      	adds	r3, #4
 800de2a:	2201      	movs	r2, #1
 800de2c:	4619      	mov	r1, r3
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 f934 	bl	800e09c <USBD_CtlSendData>
 800de34:	e004      	b.n	800de40 <USBD_GetConfig+0x64>
 800de36:	6839      	ldr	r1, [r7, #0]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 f8be 	bl	800dfba <USBD_CtlError>
 800de3e:	bf00      	nop
 800de40:	bf00      	nop
 800de42:	3708      	adds	r7, #8
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <USBD_GetStatus>:
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	3b01      	subs	r3, #1
 800de5c:	2b02      	cmp	r3, #2
 800de5e:	d81e      	bhi.n	800de9e <USBD_GetStatus+0x56>
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	88db      	ldrh	r3, [r3, #6]
 800de64:	2b02      	cmp	r3, #2
 800de66:	d004      	beq.n	800de72 <USBD_GetStatus+0x2a>
 800de68:	6839      	ldr	r1, [r7, #0]
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f000 f8a5 	bl	800dfba <USBD_CtlError>
 800de70:	e01a      	b.n	800dea8 <USBD_GetStatus+0x60>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2201      	movs	r2, #1
 800de76:	60da      	str	r2, [r3, #12]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d005      	beq.n	800de8e <USBD_GetStatus+0x46>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	68db      	ldr	r3, [r3, #12]
 800de86:	f043 0202 	orr.w	r2, r3, #2
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	60da      	str	r2, [r3, #12]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	330c      	adds	r3, #12
 800de92:	2202      	movs	r2, #2
 800de94:	4619      	mov	r1, r3
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 f900 	bl	800e09c <USBD_CtlSendData>
 800de9c:	e004      	b.n	800dea8 <USBD_GetStatus+0x60>
 800de9e:	6839      	ldr	r1, [r7, #0]
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 f88a 	bl	800dfba <USBD_CtlError>
 800dea6:	bf00      	nop
 800dea8:	bf00      	nop
 800deaa:	3708      	adds	r7, #8
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <USBD_SetFeature>:
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	885b      	ldrh	r3, [r3, #2]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d107      	bne.n	800ded2 <USBD_SetFeature+0x22>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2201      	movs	r2, #1
 800dec6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 f940 	bl	800e150 <USBD_CtlSendStatus>
 800ded0:	e013      	b.n	800defa <USBD_SetFeature+0x4a>
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	885b      	ldrh	r3, [r3, #2]
 800ded6:	2b02      	cmp	r3, #2
 800ded8:	d10b      	bne.n	800def2 <USBD_SetFeature+0x42>
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	889b      	ldrh	r3, [r3, #4]
 800dede:	0a1b      	lsrs	r3, r3, #8
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 f930 	bl	800e150 <USBD_CtlSendStatus>
 800def0:	e003      	b.n	800defa <USBD_SetFeature+0x4a>
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 f860 	bl	800dfba <USBD_CtlError>
 800defa:	bf00      	nop
 800defc:	3708      	adds	r7, #8
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}

0800df02 <USBD_ClrFeature>:
 800df02:	b580      	push	{r7, lr}
 800df04:	b082      	sub	sp, #8
 800df06:	af00      	add	r7, sp, #0
 800df08:	6078      	str	r0, [r7, #4]
 800df0a:	6039      	str	r1, [r7, #0]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df12:	b2db      	uxtb	r3, r3
 800df14:	3b01      	subs	r3, #1
 800df16:	2b02      	cmp	r3, #2
 800df18:	d80b      	bhi.n	800df32 <USBD_ClrFeature+0x30>
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	885b      	ldrh	r3, [r3, #2]
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d10c      	bne.n	800df3c <USBD_ClrFeature+0x3a>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2200      	movs	r2, #0
 800df26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 f910 	bl	800e150 <USBD_CtlSendStatus>
 800df30:	e004      	b.n	800df3c <USBD_ClrFeature+0x3a>
 800df32:	6839      	ldr	r1, [r7, #0]
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 f840 	bl	800dfba <USBD_CtlError>
 800df3a:	e000      	b.n	800df3e <USBD_ClrFeature+0x3c>
 800df3c:	bf00      	nop
 800df3e:	bf00      	nop
 800df40:	3708      	adds	r7, #8
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <USBD_ParseSetupRequest>:
 800df46:	b580      	push	{r7, lr}
 800df48:	b084      	sub	sp, #16
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
 800df4e:	6039      	str	r1, [r7, #0]
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	60fb      	str	r3, [r7, #12]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	781a      	ldrb	r2, [r3, #0]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	701a      	strb	r2, [r3, #0]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	3301      	adds	r3, #1
 800df60:	60fb      	str	r3, [r7, #12]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	781a      	ldrb	r2, [r3, #0]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	705a      	strb	r2, [r3, #1]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	3301      	adds	r3, #1
 800df6e:	60fb      	str	r3, [r7, #12]
 800df70:	68f8      	ldr	r0, [r7, #12]
 800df72:	f7ff fa41 	bl	800d3f8 <SWAPBYTE>
 800df76:	4603      	mov	r3, r0
 800df78:	461a      	mov	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	805a      	strh	r2, [r3, #2]
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	3301      	adds	r3, #1
 800df82:	60fb      	str	r3, [r7, #12]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	3301      	adds	r3, #1
 800df88:	60fb      	str	r3, [r7, #12]
 800df8a:	68f8      	ldr	r0, [r7, #12]
 800df8c:	f7ff fa34 	bl	800d3f8 <SWAPBYTE>
 800df90:	4603      	mov	r3, r0
 800df92:	461a      	mov	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	809a      	strh	r2, [r3, #4]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	3301      	adds	r3, #1
 800df9c:	60fb      	str	r3, [r7, #12]
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	60fb      	str	r3, [r7, #12]
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	f7ff fa27 	bl	800d3f8 <SWAPBYTE>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	461a      	mov	r2, r3
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	80da      	strh	r2, [r3, #6]
 800dfb2:	bf00      	nop
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <USBD_CtlError>:
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b082      	sub	sp, #8
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
 800dfc2:	6039      	str	r1, [r7, #0]
 800dfc4:	2180      	movs	r1, #128	; 0x80
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 fcec 	bl	800e9a4 <USBD_LL_StallEP>
 800dfcc:	2100      	movs	r1, #0
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 fce8 	bl	800e9a4 <USBD_LL_StallEP>
 800dfd4:	bf00      	nop
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <USBD_GetString>:
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b086      	sub	sp, #24
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	2300      	movs	r3, #0
 800dfea:	75fb      	strb	r3, [r7, #23]
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d036      	beq.n	800e060 <USBD_GetString+0x84>
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	613b      	str	r3, [r7, #16]
 800dff6:	6938      	ldr	r0, [r7, #16]
 800dff8:	f000 f836 	bl	800e068 <USBD_GetLen>
 800dffc:	4603      	mov	r3, r0
 800dffe:	3301      	adds	r3, #1
 800e000:	b29b      	uxth	r3, r3
 800e002:	005b      	lsls	r3, r3, #1
 800e004:	b29a      	uxth	r2, r3
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	801a      	strh	r2, [r3, #0]
 800e00a:	7dfb      	ldrb	r3, [r7, #23]
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	4413      	add	r3, r2
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	7812      	ldrb	r2, [r2, #0]
 800e014:	701a      	strb	r2, [r3, #0]
 800e016:	7dfb      	ldrb	r3, [r7, #23]
 800e018:	3301      	adds	r3, #1
 800e01a:	75fb      	strb	r3, [r7, #23]
 800e01c:	7dfb      	ldrb	r3, [r7, #23]
 800e01e:	68ba      	ldr	r2, [r7, #8]
 800e020:	4413      	add	r3, r2
 800e022:	2203      	movs	r2, #3
 800e024:	701a      	strb	r2, [r3, #0]
 800e026:	7dfb      	ldrb	r3, [r7, #23]
 800e028:	3301      	adds	r3, #1
 800e02a:	75fb      	strb	r3, [r7, #23]
 800e02c:	e013      	b.n	800e056 <USBD_GetString+0x7a>
 800e02e:	7dfb      	ldrb	r3, [r7, #23]
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	4413      	add	r3, r2
 800e034:	693a      	ldr	r2, [r7, #16]
 800e036:	7812      	ldrb	r2, [r2, #0]
 800e038:	701a      	strb	r2, [r3, #0]
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	3301      	adds	r3, #1
 800e03e:	613b      	str	r3, [r7, #16]
 800e040:	7dfb      	ldrb	r3, [r7, #23]
 800e042:	3301      	adds	r3, #1
 800e044:	75fb      	strb	r3, [r7, #23]
 800e046:	7dfb      	ldrb	r3, [r7, #23]
 800e048:	68ba      	ldr	r2, [r7, #8]
 800e04a:	4413      	add	r3, r2
 800e04c:	2200      	movs	r2, #0
 800e04e:	701a      	strb	r2, [r3, #0]
 800e050:	7dfb      	ldrb	r3, [r7, #23]
 800e052:	3301      	adds	r3, #1
 800e054:	75fb      	strb	r3, [r7, #23]
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d1e7      	bne.n	800e02e <USBD_GetString+0x52>
 800e05e:	e000      	b.n	800e062 <USBD_GetString+0x86>
 800e060:	bf00      	nop
 800e062:	3718      	adds	r7, #24
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <USBD_GetLen>:
 800e068:	b480      	push	{r7}
 800e06a:	b085      	sub	sp, #20
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	2300      	movs	r3, #0
 800e072:	73fb      	strb	r3, [r7, #15]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	60bb      	str	r3, [r7, #8]
 800e078:	e005      	b.n	800e086 <USBD_GetLen+0x1e>
 800e07a:	7bfb      	ldrb	r3, [r7, #15]
 800e07c:	3301      	adds	r3, #1
 800e07e:	73fb      	strb	r3, [r7, #15]
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	3301      	adds	r3, #1
 800e084:	60bb      	str	r3, [r7, #8]
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1f5      	bne.n	800e07a <USBD_GetLen+0x12>
 800e08e:	7bfb      	ldrb	r3, [r7, #15]
 800e090:	4618      	mov	r0, r3
 800e092:	3714      	adds	r7, #20
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <USBD_CtlSendData>:
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	607a      	str	r2, [r7, #4]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2202      	movs	r2, #2
 800e0ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	619a      	str	r2, [r3, #24]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	61da      	str	r2, [r3, #28]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	68ba      	ldr	r2, [r7, #8]
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	f000 fcf7 	bl	800eab6 <USBD_LL_Transmit>
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3710      	adds	r7, #16
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}

0800e0d2 <USBD_CtlContinueSendData>:
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b084      	sub	sp, #16
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	60f8      	str	r0, [r7, #12]
 800e0da:	60b9      	str	r1, [r7, #8]
 800e0dc:	607a      	str	r2, [r7, #4]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	68ba      	ldr	r2, [r7, #8]
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f000 fce6 	bl	800eab6 <USBD_LL_Transmit>
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3710      	adds	r7, #16
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <USBD_CtlPrepareRx>:
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	607a      	str	r2, [r7, #4]
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2203      	movs	r2, #3
 800e104:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	68ba      	ldr	r2, [r7, #8]
 800e11c:	2100      	movs	r1, #0
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f000 fcea 	bl	800eaf8 <USBD_LL_PrepareReceive>
 800e124:	2300      	movs	r3, #0
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <USBD_CtlContinueRx>:
 800e12e:	b580      	push	{r7, lr}
 800e130:	b084      	sub	sp, #16
 800e132:	af00      	add	r7, sp, #0
 800e134:	60f8      	str	r0, [r7, #12]
 800e136:	60b9      	str	r1, [r7, #8]
 800e138:	607a      	str	r2, [r7, #4]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	68ba      	ldr	r2, [r7, #8]
 800e13e:	2100      	movs	r1, #0
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f000 fcd9 	bl	800eaf8 <USBD_LL_PrepareReceive>
 800e146:	2300      	movs	r3, #0
 800e148:	4618      	mov	r0, r3
 800e14a:	3710      	adds	r7, #16
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <USBD_CtlSendStatus>:
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2204      	movs	r2, #4
 800e15c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800e160:	2300      	movs	r3, #0
 800e162:	2200      	movs	r2, #0
 800e164:	2100      	movs	r1, #0
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 fca5 	bl	800eab6 <USBD_LL_Transmit>
 800e16c:	2300      	movs	r3, #0
 800e16e:	4618      	mov	r0, r3
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <USBD_CtlReceiveStatus>:
 800e176:	b580      	push	{r7, lr}
 800e178:	b082      	sub	sp, #8
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2205      	movs	r2, #5
 800e182:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 800e186:	2300      	movs	r3, #0
 800e188:	2200      	movs	r2, #0
 800e18a:	2100      	movs	r1, #0
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 fcb3 	bl	800eaf8 <USBD_LL_PrepareReceive>
 800e192:	2300      	movs	r3, #0
 800e194:	4618      	mov	r0, r3
 800e196:	3708      	adds	r7, #8
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <MX_USB_DEVICE_Init>:
 800e19c:	b580      	push	{r7, lr}
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	4912      	ldr	r1, [pc, #72]	; (800e1ec <MX_USB_DEVICE_Init+0x50>)
 800e1a4:	4812      	ldr	r0, [pc, #72]	; (800e1f0 <MX_USB_DEVICE_Init+0x54>)
 800e1a6:	f7fe fd07 	bl	800cbb8 <USBD_Init>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d001      	beq.n	800e1b4 <MX_USB_DEVICE_Init+0x18>
 800e1b0:	f7f5 fea6 	bl	8003f00 <Error_Handler>
 800e1b4:	490f      	ldr	r1, [pc, #60]	; (800e1f4 <MX_USB_DEVICE_Init+0x58>)
 800e1b6:	480e      	ldr	r0, [pc, #56]	; (800e1f0 <MX_USB_DEVICE_Init+0x54>)
 800e1b8:	f7fe fd2e 	bl	800cc18 <USBD_RegisterClass>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <MX_USB_DEVICE_Init+0x2a>
 800e1c2:	f7f5 fe9d 	bl	8003f00 <Error_Handler>
 800e1c6:	490c      	ldr	r1, [pc, #48]	; (800e1f8 <MX_USB_DEVICE_Init+0x5c>)
 800e1c8:	4809      	ldr	r0, [pc, #36]	; (800e1f0 <MX_USB_DEVICE_Init+0x54>)
 800e1ca:	f7fe fc1f 	bl	800ca0c <USBD_CDC_RegisterInterface>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d001      	beq.n	800e1d8 <MX_USB_DEVICE_Init+0x3c>
 800e1d4:	f7f5 fe94 	bl	8003f00 <Error_Handler>
 800e1d8:	4805      	ldr	r0, [pc, #20]	; (800e1f0 <MX_USB_DEVICE_Init+0x54>)
 800e1da:	f7fe fd53 	bl	800cc84 <USBD_Start>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d001      	beq.n	800e1e8 <MX_USB_DEVICE_Init+0x4c>
 800e1e4:	f7f5 fe8c 	bl	8003f00 <Error_Handler>
 800e1e8:	bf00      	nop
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	200000c0 	.word	0x200000c0
 800e1f0:	20001dd8 	.word	0x20001dd8
 800e1f4:	2000002c 	.word	0x2000002c
 800e1f8:	200000ac 	.word	0x200000ac

0800e1fc <CDC_Init_FS>:
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	2200      	movs	r2, #0
 800e202:	4905      	ldr	r1, [pc, #20]	; (800e218 <CDC_Init_FS+0x1c>)
 800e204:	4805      	ldr	r0, [pc, #20]	; (800e21c <CDC_Init_FS+0x20>)
 800e206:	f7fe fc1b 	bl	800ca40 <USBD_CDC_SetTxBuffer>
 800e20a:	4905      	ldr	r1, [pc, #20]	; (800e220 <CDC_Init_FS+0x24>)
 800e20c:	4803      	ldr	r0, [pc, #12]	; (800e21c <CDC_Init_FS+0x20>)
 800e20e:	f7fe fc39 	bl	800ca84 <USBD_CDC_SetRxBuffer>
 800e212:	2300      	movs	r3, #0
 800e214:	4618      	mov	r0, r3
 800e216:	bd80      	pop	{r7, pc}
 800e218:	2000249c 	.word	0x2000249c
 800e21c:	20001dd8 	.word	0x20001dd8
 800e220:	200020b4 	.word	0x200020b4

0800e224 <CDC_DeInit_FS>:
 800e224:	b480      	push	{r7}
 800e226:	af00      	add	r7, sp, #0
 800e228:	2300      	movs	r3, #0
 800e22a:	4618      	mov	r0, r3
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <CDC_Control_FS>:
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	4603      	mov	r3, r0
 800e23c:	6039      	str	r1, [r7, #0]
 800e23e:	71fb      	strb	r3, [r7, #7]
 800e240:	4613      	mov	r3, r2
 800e242:	80bb      	strh	r3, [r7, #4]
 800e244:	79fb      	ldrb	r3, [r7, #7]
 800e246:	2b23      	cmp	r3, #35	; 0x23
 800e248:	d84a      	bhi.n	800e2e0 <CDC_Control_FS+0xac>
 800e24a:	a201      	add	r2, pc, #4	; (adr r2, 800e250 <CDC_Control_FS+0x1c>)
 800e24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e250:	0800e2e1 	.word	0x0800e2e1
 800e254:	0800e2e1 	.word	0x0800e2e1
 800e258:	0800e2e1 	.word	0x0800e2e1
 800e25c:	0800e2e1 	.word	0x0800e2e1
 800e260:	0800e2e1 	.word	0x0800e2e1
 800e264:	0800e2e1 	.word	0x0800e2e1
 800e268:	0800e2e1 	.word	0x0800e2e1
 800e26c:	0800e2e1 	.word	0x0800e2e1
 800e270:	0800e2e1 	.word	0x0800e2e1
 800e274:	0800e2e1 	.word	0x0800e2e1
 800e278:	0800e2e1 	.word	0x0800e2e1
 800e27c:	0800e2e1 	.word	0x0800e2e1
 800e280:	0800e2e1 	.word	0x0800e2e1
 800e284:	0800e2e1 	.word	0x0800e2e1
 800e288:	0800e2e1 	.word	0x0800e2e1
 800e28c:	0800e2e1 	.word	0x0800e2e1
 800e290:	0800e2e1 	.word	0x0800e2e1
 800e294:	0800e2e1 	.word	0x0800e2e1
 800e298:	0800e2e1 	.word	0x0800e2e1
 800e29c:	0800e2e1 	.word	0x0800e2e1
 800e2a0:	0800e2e1 	.word	0x0800e2e1
 800e2a4:	0800e2e1 	.word	0x0800e2e1
 800e2a8:	0800e2e1 	.word	0x0800e2e1
 800e2ac:	0800e2e1 	.word	0x0800e2e1
 800e2b0:	0800e2e1 	.word	0x0800e2e1
 800e2b4:	0800e2e1 	.word	0x0800e2e1
 800e2b8:	0800e2e1 	.word	0x0800e2e1
 800e2bc:	0800e2e1 	.word	0x0800e2e1
 800e2c0:	0800e2e1 	.word	0x0800e2e1
 800e2c4:	0800e2e1 	.word	0x0800e2e1
 800e2c8:	0800e2e1 	.word	0x0800e2e1
 800e2cc:	0800e2e1 	.word	0x0800e2e1
 800e2d0:	0800e2e1 	.word	0x0800e2e1
 800e2d4:	0800e2e1 	.word	0x0800e2e1
 800e2d8:	0800e2e1 	.word	0x0800e2e1
 800e2dc:	0800e2e1 	.word	0x0800e2e1
 800e2e0:	bf00      	nop
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	370c      	adds	r7, #12
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <CDC_Receive_FS>:
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b084      	sub	sp, #16
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	81fb      	strh	r3, [r7, #14]
 800e302:	89fb      	ldrh	r3, [r7, #14]
 800e304:	461a      	mov	r2, r3
 800e306:	6879      	ldr	r1, [r7, #4]
 800e308:	4807      	ldr	r0, [pc, #28]	; (800e328 <CDC_Receive_FS+0x38>)
 800e30a:	f7f5 fff3 	bl	80042f4 <StringFIFOAdd>
 800e30e:	6879      	ldr	r1, [r7, #4]
 800e310:	4806      	ldr	r0, [pc, #24]	; (800e32c <CDC_Receive_FS+0x3c>)
 800e312:	f7fe fbb7 	bl	800ca84 <USBD_CDC_SetRxBuffer>
 800e316:	4805      	ldr	r0, [pc, #20]	; (800e32c <CDC_Receive_FS+0x3c>)
 800e318:	f7fe fc18 	bl	800cb4c <USBD_CDC_ReceivePacket>
 800e31c:	2300      	movs	r3, #0
 800e31e:	4618      	mov	r0, r3
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	20001cd0 	.word	0x20001cd0
 800e32c:	20001dd8 	.word	0x20001dd8

0800e330 <CDC_Transmit_FS>:
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	460b      	mov	r3, r1
 800e33a:	807b      	strh	r3, [r7, #2]
 800e33c:	2300      	movs	r3, #0
 800e33e:	73fb      	strb	r3, [r7, #15]
 800e340:	4b0d      	ldr	r3, [pc, #52]	; (800e378 <CDC_Transmit_FS+0x48>)
 800e342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e346:	60bb      	str	r3, [r7, #8]
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d001      	beq.n	800e356 <CDC_Transmit_FS+0x26>
 800e352:	2301      	movs	r3, #1
 800e354:	e00b      	b.n	800e36e <CDC_Transmit_FS+0x3e>
 800e356:	887b      	ldrh	r3, [r7, #2]
 800e358:	461a      	mov	r2, r3
 800e35a:	6879      	ldr	r1, [r7, #4]
 800e35c:	4806      	ldr	r0, [pc, #24]	; (800e378 <CDC_Transmit_FS+0x48>)
 800e35e:	f7fe fb6f 	bl	800ca40 <USBD_CDC_SetTxBuffer>
 800e362:	4805      	ldr	r0, [pc, #20]	; (800e378 <CDC_Transmit_FS+0x48>)
 800e364:	f7fe fbac 	bl	800cac0 <USBD_CDC_TransmitPacket>
 800e368:	4603      	mov	r3, r0
 800e36a:	73fb      	strb	r3, [r7, #15]
 800e36c:	7bfb      	ldrb	r3, [r7, #15]
 800e36e:	4618      	mov	r0, r3
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	20001dd8 	.word	0x20001dd8

0800e37c <CDC_TransmitCplt_FS>:
 800e37c:	b480      	push	{r7}
 800e37e:	b087      	sub	sp, #28
 800e380:	af00      	add	r7, sp, #0
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	60b9      	str	r1, [r7, #8]
 800e386:	4613      	mov	r3, r2
 800e388:	71fb      	strb	r3, [r7, #7]
 800e38a:	2300      	movs	r3, #0
 800e38c:	75fb      	strb	r3, [r7, #23]
 800e38e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e392:	4618      	mov	r0, r3
 800e394:	371c      	adds	r7, #28
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr
	...

0800e3a0 <USBD_FS_DeviceDescriptor>:
 800e3a0:	b480      	push	{r7}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	6039      	str	r1, [r7, #0]
 800e3aa:	71fb      	strb	r3, [r7, #7]
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	2212      	movs	r2, #18
 800e3b0:	801a      	strh	r2, [r3, #0]
 800e3b2:	4b03      	ldr	r3, [pc, #12]	; (800e3c0 <USBD_FS_DeviceDescriptor+0x20>)
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr
 800e3c0:	200000dc 	.word	0x200000dc

0800e3c4 <USBD_FS_LangIDStrDescriptor>:
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	6039      	str	r1, [r7, #0]
 800e3ce:	71fb      	strb	r3, [r7, #7]
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	2204      	movs	r2, #4
 800e3d4:	801a      	strh	r2, [r3, #0]
 800e3d6:	4b03      	ldr	r3, [pc, #12]	; (800e3e4 <USBD_FS_LangIDStrDescriptor+0x20>)
 800e3d8:	4618      	mov	r0, r3
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr
 800e3e4:	200000f0 	.word	0x200000f0

0800e3e8 <USBD_FS_ProductStrDescriptor>:
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	6039      	str	r1, [r7, #0]
 800e3f2:	71fb      	strb	r3, [r7, #7]
 800e3f4:	79fb      	ldrb	r3, [r7, #7]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d105      	bne.n	800e406 <USBD_FS_ProductStrDescriptor+0x1e>
 800e3fa:	683a      	ldr	r2, [r7, #0]
 800e3fc:	4907      	ldr	r1, [pc, #28]	; (800e41c <USBD_FS_ProductStrDescriptor+0x34>)
 800e3fe:	4808      	ldr	r0, [pc, #32]	; (800e420 <USBD_FS_ProductStrDescriptor+0x38>)
 800e400:	f7ff fdec 	bl	800dfdc <USBD_GetString>
 800e404:	e004      	b.n	800e410 <USBD_FS_ProductStrDescriptor+0x28>
 800e406:	683a      	ldr	r2, [r7, #0]
 800e408:	4904      	ldr	r1, [pc, #16]	; (800e41c <USBD_FS_ProductStrDescriptor+0x34>)
 800e40a:	4805      	ldr	r0, [pc, #20]	; (800e420 <USBD_FS_ProductStrDescriptor+0x38>)
 800e40c:	f7ff fde6 	bl	800dfdc <USBD_GetString>
 800e410:	4b02      	ldr	r3, [pc, #8]	; (800e41c <USBD_FS_ProductStrDescriptor+0x34>)
 800e412:	4618      	mov	r0, r3
 800e414:	3708      	adds	r7, #8
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	20002884 	.word	0x20002884
 800e420:	08014dd0 	.word	0x08014dd0

0800e424 <USBD_FS_ManufacturerStrDescriptor>:
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	4603      	mov	r3, r0
 800e42c:	6039      	str	r1, [r7, #0]
 800e42e:	71fb      	strb	r3, [r7, #7]
 800e430:	683a      	ldr	r2, [r7, #0]
 800e432:	4904      	ldr	r1, [pc, #16]	; (800e444 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e434:	4804      	ldr	r0, [pc, #16]	; (800e448 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e436:	f7ff fdd1 	bl	800dfdc <USBD_GetString>
 800e43a:	4b02      	ldr	r3, [pc, #8]	; (800e444 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e43c:	4618      	mov	r0, r3
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	20002884 	.word	0x20002884
 800e448:	08014de8 	.word	0x08014de8

0800e44c <USBD_FS_SerialStrDescriptor>:
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
 800e452:	4603      	mov	r3, r0
 800e454:	6039      	str	r1, [r7, #0]
 800e456:	71fb      	strb	r3, [r7, #7]
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	221a      	movs	r2, #26
 800e45c:	801a      	strh	r2, [r3, #0]
 800e45e:	f000 f843 	bl	800e4e8 <Get_SerialNum>
 800e462:	4b02      	ldr	r3, [pc, #8]	; (800e46c <USBD_FS_SerialStrDescriptor+0x20>)
 800e464:	4618      	mov	r0, r3
 800e466:	3708      	adds	r7, #8
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}
 800e46c:	200000f4 	.word	0x200000f4

0800e470 <USBD_FS_ConfigStrDescriptor>:
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	4603      	mov	r3, r0
 800e478:	6039      	str	r1, [r7, #0]
 800e47a:	71fb      	strb	r3, [r7, #7]
 800e47c:	79fb      	ldrb	r3, [r7, #7]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d105      	bne.n	800e48e <USBD_FS_ConfigStrDescriptor+0x1e>
 800e482:	683a      	ldr	r2, [r7, #0]
 800e484:	4907      	ldr	r1, [pc, #28]	; (800e4a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e486:	4808      	ldr	r0, [pc, #32]	; (800e4a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e488:	f7ff fda8 	bl	800dfdc <USBD_GetString>
 800e48c:	e004      	b.n	800e498 <USBD_FS_ConfigStrDescriptor+0x28>
 800e48e:	683a      	ldr	r2, [r7, #0]
 800e490:	4904      	ldr	r1, [pc, #16]	; (800e4a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e492:	4805      	ldr	r0, [pc, #20]	; (800e4a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e494:	f7ff fda2 	bl	800dfdc <USBD_GetString>
 800e498:	4b02      	ldr	r3, [pc, #8]	; (800e4a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e49a:	4618      	mov	r0, r3
 800e49c:	3708      	adds	r7, #8
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	20002884 	.word	0x20002884
 800e4a8:	08014dfc 	.word	0x08014dfc

0800e4ac <USBD_FS_InterfaceStrDescriptor>:
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	6039      	str	r1, [r7, #0]
 800e4b6:	71fb      	strb	r3, [r7, #7]
 800e4b8:	79fb      	ldrb	r3, [r7, #7]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d105      	bne.n	800e4ca <USBD_FS_InterfaceStrDescriptor+0x1e>
 800e4be:	683a      	ldr	r2, [r7, #0]
 800e4c0:	4907      	ldr	r1, [pc, #28]	; (800e4e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e4c2:	4808      	ldr	r0, [pc, #32]	; (800e4e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e4c4:	f7ff fd8a 	bl	800dfdc <USBD_GetString>
 800e4c8:	e004      	b.n	800e4d4 <USBD_FS_InterfaceStrDescriptor+0x28>
 800e4ca:	683a      	ldr	r2, [r7, #0]
 800e4cc:	4904      	ldr	r1, [pc, #16]	; (800e4e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e4ce:	4805      	ldr	r0, [pc, #20]	; (800e4e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e4d0:	f7ff fd84 	bl	800dfdc <USBD_GetString>
 800e4d4:	4b02      	ldr	r3, [pc, #8]	; (800e4e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3708      	adds	r7, #8
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	20002884 	.word	0x20002884
 800e4e4:	08014e08 	.word	0x08014e08

0800e4e8 <Get_SerialNum>:
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	4b0f      	ldr	r3, [pc, #60]	; (800e52c <Get_SerialNum+0x44>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	60fb      	str	r3, [r7, #12]
 800e4f4:	4b0e      	ldr	r3, [pc, #56]	; (800e530 <Get_SerialNum+0x48>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	60bb      	str	r3, [r7, #8]
 800e4fa:	4b0e      	ldr	r3, [pc, #56]	; (800e534 <Get_SerialNum+0x4c>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	607b      	str	r3, [r7, #4]
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	4413      	add	r3, r2
 800e506:	60fb      	str	r3, [r7, #12]
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d009      	beq.n	800e522 <Get_SerialNum+0x3a>
 800e50e:	2208      	movs	r2, #8
 800e510:	4909      	ldr	r1, [pc, #36]	; (800e538 <Get_SerialNum+0x50>)
 800e512:	68f8      	ldr	r0, [r7, #12]
 800e514:	f000 f814 	bl	800e540 <IntToUnicode>
 800e518:	2204      	movs	r2, #4
 800e51a:	4908      	ldr	r1, [pc, #32]	; (800e53c <Get_SerialNum+0x54>)
 800e51c:	68b8      	ldr	r0, [r7, #8]
 800e51e:	f000 f80f 	bl	800e540 <IntToUnicode>
 800e522:	bf00      	nop
 800e524:	3710      	adds	r7, #16
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	1fff7a10 	.word	0x1fff7a10
 800e530:	1fff7a14 	.word	0x1fff7a14
 800e534:	1fff7a18 	.word	0x1fff7a18
 800e538:	200000f6 	.word	0x200000f6
 800e53c:	20000106 	.word	0x20000106

0800e540 <IntToUnicode>:
 800e540:	b480      	push	{r7}
 800e542:	b087      	sub	sp, #28
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	4613      	mov	r3, r2
 800e54c:	71fb      	strb	r3, [r7, #7]
 800e54e:	2300      	movs	r3, #0
 800e550:	75fb      	strb	r3, [r7, #23]
 800e552:	2300      	movs	r3, #0
 800e554:	75fb      	strb	r3, [r7, #23]
 800e556:	e027      	b.n	800e5a8 <IntToUnicode+0x68>
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	0f1b      	lsrs	r3, r3, #28
 800e55c:	2b09      	cmp	r3, #9
 800e55e:	d80b      	bhi.n	800e578 <IntToUnicode+0x38>
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	0f1b      	lsrs	r3, r3, #28
 800e564:	b2da      	uxtb	r2, r3
 800e566:	7dfb      	ldrb	r3, [r7, #23]
 800e568:	005b      	lsls	r3, r3, #1
 800e56a:	4619      	mov	r1, r3
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	440b      	add	r3, r1
 800e570:	3230      	adds	r2, #48	; 0x30
 800e572:	b2d2      	uxtb	r2, r2
 800e574:	701a      	strb	r2, [r3, #0]
 800e576:	e00a      	b.n	800e58e <IntToUnicode+0x4e>
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	0f1b      	lsrs	r3, r3, #28
 800e57c:	b2da      	uxtb	r2, r3
 800e57e:	7dfb      	ldrb	r3, [r7, #23]
 800e580:	005b      	lsls	r3, r3, #1
 800e582:	4619      	mov	r1, r3
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	440b      	add	r3, r1
 800e588:	3237      	adds	r2, #55	; 0x37
 800e58a:	b2d2      	uxtb	r2, r2
 800e58c:	701a      	strb	r2, [r3, #0]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	011b      	lsls	r3, r3, #4
 800e592:	60fb      	str	r3, [r7, #12]
 800e594:	7dfb      	ldrb	r3, [r7, #23]
 800e596:	005b      	lsls	r3, r3, #1
 800e598:	3301      	adds	r3, #1
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	4413      	add	r3, r2
 800e59e:	2200      	movs	r2, #0
 800e5a0:	701a      	strb	r2, [r3, #0]
 800e5a2:	7dfb      	ldrb	r3, [r7, #23]
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	75fb      	strb	r3, [r7, #23]
 800e5a8:	7dfa      	ldrb	r2, [r7, #23]
 800e5aa:	79fb      	ldrb	r3, [r7, #7]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d3d3      	bcc.n	800e558 <IntToUnicode+0x18>
 800e5b0:	bf00      	nop
 800e5b2:	bf00      	nop
 800e5b4:	371c      	adds	r7, #28
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr
	...

0800e5c0 <HAL_PCD_MspInit>:
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b08a      	sub	sp, #40	; 0x28
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	f107 0314 	add.w	r3, r7, #20
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	601a      	str	r2, [r3, #0]
 800e5d0:	605a      	str	r2, [r3, #4]
 800e5d2:	609a      	str	r2, [r3, #8]
 800e5d4:	60da      	str	r2, [r3, #12]
 800e5d6:	611a      	str	r2, [r3, #16]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e5e0:	d13a      	bne.n	800e658 <HAL_PCD_MspInit+0x98>
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	613b      	str	r3, [r7, #16]
 800e5e6:	4b1e      	ldr	r3, [pc, #120]	; (800e660 <HAL_PCD_MspInit+0xa0>)
 800e5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5ea:	4a1d      	ldr	r2, [pc, #116]	; (800e660 <HAL_PCD_MspInit+0xa0>)
 800e5ec:	f043 0301 	orr.w	r3, r3, #1
 800e5f0:	6313      	str	r3, [r2, #48]	; 0x30
 800e5f2:	4b1b      	ldr	r3, [pc, #108]	; (800e660 <HAL_PCD_MspInit+0xa0>)
 800e5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5f6:	f003 0301 	and.w	r3, r3, #1
 800e5fa:	613b      	str	r3, [r7, #16]
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800e602:	617b      	str	r3, [r7, #20]
 800e604:	2302      	movs	r3, #2
 800e606:	61bb      	str	r3, [r7, #24]
 800e608:	2300      	movs	r3, #0
 800e60a:	61fb      	str	r3, [r7, #28]
 800e60c:	2303      	movs	r3, #3
 800e60e:	623b      	str	r3, [r7, #32]
 800e610:	230a      	movs	r3, #10
 800e612:	627b      	str	r3, [r7, #36]	; 0x24
 800e614:	f107 0314 	add.w	r3, r7, #20
 800e618:	4619      	mov	r1, r3
 800e61a:	4812      	ldr	r0, [pc, #72]	; (800e664 <HAL_PCD_MspInit+0xa4>)
 800e61c:	f7f6 fa24 	bl	8004a68 <HAL_GPIO_Init>
 800e620:	4b0f      	ldr	r3, [pc, #60]	; (800e660 <HAL_PCD_MspInit+0xa0>)
 800e622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e624:	4a0e      	ldr	r2, [pc, #56]	; (800e660 <HAL_PCD_MspInit+0xa0>)
 800e626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e62a:	6353      	str	r3, [r2, #52]	; 0x34
 800e62c:	2300      	movs	r3, #0
 800e62e:	60fb      	str	r3, [r7, #12]
 800e630:	4b0b      	ldr	r3, [pc, #44]	; (800e660 <HAL_PCD_MspInit+0xa0>)
 800e632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e634:	4a0a      	ldr	r2, [pc, #40]	; (800e660 <HAL_PCD_MspInit+0xa0>)
 800e636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e63a:	6453      	str	r3, [r2, #68]	; 0x44
 800e63c:	4b08      	ldr	r3, [pc, #32]	; (800e660 <HAL_PCD_MspInit+0xa0>)
 800e63e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e644:	60fb      	str	r3, [r7, #12]
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2200      	movs	r2, #0
 800e64a:	2100      	movs	r1, #0
 800e64c:	2043      	movs	r0, #67	; 0x43
 800e64e:	f7f6 f9a4 	bl	800499a <HAL_NVIC_SetPriority>
 800e652:	2043      	movs	r0, #67	; 0x43
 800e654:	f7f6 f9bd 	bl	80049d2 <HAL_NVIC_EnableIRQ>
 800e658:	bf00      	nop
 800e65a:	3728      	adds	r7, #40	; 0x28
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	40023800 	.word	0x40023800
 800e664:	40020000 	.word	0x40020000

0800e668 <HAL_PCD_SetupStageCallback>:
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e67c:	4619      	mov	r1, r3
 800e67e:	4610      	mov	r0, r2
 800e680:	f7fe fb4d 	bl	800cd1e <USBD_LL_SetupStage>
 800e684:	bf00      	nop
 800e686:	3708      	adds	r7, #8
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <HAL_PCD_DataOutStageCallback>:
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	460b      	mov	r3, r1
 800e696:	70fb      	strb	r3, [r7, #3]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e69e:	78fa      	ldrb	r2, [r7, #3]
 800e6a0:	6879      	ldr	r1, [r7, #4]
 800e6a2:	4613      	mov	r3, r2
 800e6a4:	00db      	lsls	r3, r3, #3
 800e6a6:	4413      	add	r3, r2
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	440b      	add	r3, r1
 800e6ac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e6b0:	681a      	ldr	r2, [r3, #0]
 800e6b2:	78fb      	ldrb	r3, [r7, #3]
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	f7fe fb87 	bl	800cdc8 <USBD_LL_DataOutStage>
 800e6ba:	bf00      	nop
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <HAL_PCD_DataInStageCallback>:
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b082      	sub	sp, #8
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	70fb      	strb	r3, [r7, #3]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e6d4:	78fa      	ldrb	r2, [r7, #3]
 800e6d6:	6879      	ldr	r1, [r7, #4]
 800e6d8:	4613      	mov	r3, r2
 800e6da:	00db      	lsls	r3, r3, #3
 800e6dc:	4413      	add	r3, r2
 800e6de:	009b      	lsls	r3, r3, #2
 800e6e0:	440b      	add	r3, r1
 800e6e2:	334c      	adds	r3, #76	; 0x4c
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	78fb      	ldrb	r3, [r7, #3]
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	f7fe fc20 	bl	800cf2e <USBD_LL_DataInStage>
 800e6ee:	bf00      	nop
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <HAL_PCD_SOFCallback>:
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b082      	sub	sp, #8
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e704:	4618      	mov	r0, r3
 800e706:	f7fe fd54 	bl	800d1b2 <USBD_LL_SOF>
 800e70a:	bf00      	nop
 800e70c:	3708      	adds	r7, #8
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}

0800e712 <HAL_PCD_ResetCallback>:
 800e712:	b580      	push	{r7, lr}
 800e714:	b084      	sub	sp, #16
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
 800e71a:	2301      	movs	r3, #1
 800e71c:	73fb      	strb	r3, [r7, #15]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d102      	bne.n	800e72c <HAL_PCD_ResetCallback+0x1a>
 800e726:	2300      	movs	r3, #0
 800e728:	73fb      	strb	r3, [r7, #15]
 800e72a:	e008      	b.n	800e73e <HAL_PCD_ResetCallback+0x2c>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	2b02      	cmp	r3, #2
 800e732:	d102      	bne.n	800e73a <HAL_PCD_ResetCallback+0x28>
 800e734:	2301      	movs	r3, #1
 800e736:	73fb      	strb	r3, [r7, #15]
 800e738:	e001      	b.n	800e73e <HAL_PCD_ResetCallback+0x2c>
 800e73a:	f7f5 fbe1 	bl	8003f00 <Error_Handler>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e744:	7bfa      	ldrb	r2, [r7, #15]
 800e746:	4611      	mov	r1, r2
 800e748:	4618      	mov	r0, r3
 800e74a:	f7fe fcf4 	bl	800d136 <USBD_LL_SetSpeed>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e754:	4618      	mov	r0, r3
 800e756:	f7fe fc9c 	bl	800d092 <USBD_LL_Reset>
 800e75a:	bf00      	nop
 800e75c:	3710      	adds	r7, #16
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
	...

0800e764 <HAL_PCD_SuspendCallback>:
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e772:	4618      	mov	r0, r3
 800e774:	f7fe fcef 	bl	800d156 <USBD_LL_Suspend>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	6812      	ldr	r2, [r2, #0]
 800e786:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e78a:	f043 0301 	orr.w	r3, r3, #1
 800e78e:	6013      	str	r3, [r2, #0]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6a1b      	ldr	r3, [r3, #32]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d005      	beq.n	800e7a4 <HAL_PCD_SuspendCallback+0x40>
 800e798:	4b04      	ldr	r3, [pc, #16]	; (800e7ac <HAL_PCD_SuspendCallback+0x48>)
 800e79a:	691b      	ldr	r3, [r3, #16]
 800e79c:	4a03      	ldr	r2, [pc, #12]	; (800e7ac <HAL_PCD_SuspendCallback+0x48>)
 800e79e:	f043 0306 	orr.w	r3, r3, #6
 800e7a2:	6113      	str	r3, [r2, #16]
 800e7a4:	bf00      	nop
 800e7a6:	3708      	adds	r7, #8
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	e000ed00 	.word	0xe000ed00

0800e7b0 <HAL_PCD_ResumeCallback>:
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7fe fcdf 	bl	800d182 <USBD_LL_Resume>
 800e7c4:	bf00      	nop
 800e7c6:	3708      	adds	r7, #8
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <HAL_PCD_ISOOUTIncompleteCallback>:
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	70fb      	strb	r3, [r7, #3]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7de:	78fa      	ldrb	r2, [r7, #3]
 800e7e0:	4611      	mov	r1, r2
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fe fd37 	bl	800d256 <USBD_LL_IsoOUTIncomplete>
 800e7e8:	bf00      	nop
 800e7ea:	3708      	adds	r7, #8
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <HAL_PCD_ISOINIncompleteCallback>:
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	70fb      	strb	r3, [r7, #3]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e802:	78fa      	ldrb	r2, [r7, #3]
 800e804:	4611      	mov	r1, r2
 800e806:	4618      	mov	r0, r3
 800e808:	f7fe fcf3 	bl	800d1f2 <USBD_LL_IsoINIncomplete>
 800e80c:	bf00      	nop
 800e80e:	3708      	adds	r7, #8
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <HAL_PCD_ConnectCallback>:
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e822:	4618      	mov	r0, r3
 800e824:	f7fe fd49 	bl	800d2ba <USBD_LL_DevConnected>
 800e828:	bf00      	nop
 800e82a:	3708      	adds	r7, #8
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <HAL_PCD_DisconnectCallback>:
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e83e:	4618      	mov	r0, r3
 800e840:	f7fe fd46 	bl	800d2d0 <USBD_LL_DevDisconnected>
 800e844:	bf00      	nop
 800e846:	3708      	adds	r7, #8
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <USBD_LL_Init>:
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d13c      	bne.n	800e8d6 <USBD_LL_Init+0x8a>
 800e85c:	4a20      	ldr	r2, [pc, #128]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4a1e      	ldr	r2, [pc, #120]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e868:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 800e86c:	4b1c      	ldr	r3, [pc, #112]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e86e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e872:	601a      	str	r2, [r3, #0]
 800e874:	4b1a      	ldr	r3, [pc, #104]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e876:	2204      	movs	r2, #4
 800e878:	605a      	str	r2, [r3, #4]
 800e87a:	4b19      	ldr	r3, [pc, #100]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e87c:	2202      	movs	r2, #2
 800e87e:	60da      	str	r2, [r3, #12]
 800e880:	4b17      	ldr	r3, [pc, #92]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e882:	2200      	movs	r2, #0
 800e884:	611a      	str	r2, [r3, #16]
 800e886:	4b16      	ldr	r3, [pc, #88]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e888:	2202      	movs	r2, #2
 800e88a:	619a      	str	r2, [r3, #24]
 800e88c:	4b14      	ldr	r3, [pc, #80]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e88e:	2201      	movs	r2, #1
 800e890:	61da      	str	r2, [r3, #28]
 800e892:	4b13      	ldr	r3, [pc, #76]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e894:	2200      	movs	r2, #0
 800e896:	621a      	str	r2, [r3, #32]
 800e898:	4b11      	ldr	r3, [pc, #68]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e89a:	2200      	movs	r2, #0
 800e89c:	625a      	str	r2, [r3, #36]	; 0x24
 800e89e:	4b10      	ldr	r3, [pc, #64]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	62da      	str	r2, [r3, #44]	; 0x2c
 800e8a4:	4b0e      	ldr	r3, [pc, #56]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	631a      	str	r2, [r3, #48]	; 0x30
 800e8aa:	480d      	ldr	r0, [pc, #52]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e8ac:	f7f8 ff8d 	bl	80077ca <HAL_PCD_Init>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d001      	beq.n	800e8ba <USBD_LL_Init+0x6e>
 800e8b6:	f7f5 fb23 	bl	8003f00 <Error_Handler>
 800e8ba:	2180      	movs	r1, #128	; 0x80
 800e8bc:	4808      	ldr	r0, [pc, #32]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e8be:	f7fa f9e4 	bl	8008c8a <HAL_PCDEx_SetRxFiFo>
 800e8c2:	2240      	movs	r2, #64	; 0x40
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	4806      	ldr	r0, [pc, #24]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e8c8:	f7fa f998 	bl	8008bfc <HAL_PCDEx_SetTxFiFo>
 800e8cc:	2280      	movs	r2, #128	; 0x80
 800e8ce:	2101      	movs	r1, #1
 800e8d0:	4803      	ldr	r0, [pc, #12]	; (800e8e0 <USBD_LL_Init+0x94>)
 800e8d2:	f7fa f993 	bl	8008bfc <HAL_PCDEx_SetTxFiFo>
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3708      	adds	r7, #8
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}
 800e8e0:	20002a84 	.word	0x20002a84

0800e8e4 <USBD_LL_Start>:
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b084      	sub	sp, #16
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	73fb      	strb	r3, [r7, #15]
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	73bb      	strb	r3, [r7, #14]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7f9 f882 	bl	8007a04 <HAL_PCD_Start>
 800e900:	4603      	mov	r3, r0
 800e902:	73fb      	strb	r3, [r7, #15]
 800e904:	7bfb      	ldrb	r3, [r7, #15]
 800e906:	4618      	mov	r0, r3
 800e908:	f000 f942 	bl	800eb90 <USBD_Get_USB_Status>
 800e90c:	4603      	mov	r3, r0
 800e90e:	73bb      	strb	r3, [r7, #14]
 800e910:	7bbb      	ldrb	r3, [r7, #14]
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}

0800e91a <USBD_LL_OpenEP>:
 800e91a:	b580      	push	{r7, lr}
 800e91c:	b084      	sub	sp, #16
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	4608      	mov	r0, r1
 800e924:	4611      	mov	r1, r2
 800e926:	461a      	mov	r2, r3
 800e928:	4603      	mov	r3, r0
 800e92a:	70fb      	strb	r3, [r7, #3]
 800e92c:	460b      	mov	r3, r1
 800e92e:	70bb      	strb	r3, [r7, #2]
 800e930:	4613      	mov	r3, r2
 800e932:	803b      	strh	r3, [r7, #0]
 800e934:	2300      	movs	r3, #0
 800e936:	73fb      	strb	r3, [r7, #15]
 800e938:	2300      	movs	r3, #0
 800e93a:	73bb      	strb	r3, [r7, #14]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e942:	78bb      	ldrb	r3, [r7, #2]
 800e944:	883a      	ldrh	r2, [r7, #0]
 800e946:	78f9      	ldrb	r1, [r7, #3]
 800e948:	f7f9 fd53 	bl	80083f2 <HAL_PCD_EP_Open>
 800e94c:	4603      	mov	r3, r0
 800e94e:	73fb      	strb	r3, [r7, #15]
 800e950:	7bfb      	ldrb	r3, [r7, #15]
 800e952:	4618      	mov	r0, r3
 800e954:	f000 f91c 	bl	800eb90 <USBD_Get_USB_Status>
 800e958:	4603      	mov	r3, r0
 800e95a:	73bb      	strb	r3, [r7, #14]
 800e95c:	7bbb      	ldrb	r3, [r7, #14]
 800e95e:	4618      	mov	r0, r3
 800e960:	3710      	adds	r7, #16
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <USBD_LL_CloseEP>:
 800e966:	b580      	push	{r7, lr}
 800e968:	b084      	sub	sp, #16
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
 800e96e:	460b      	mov	r3, r1
 800e970:	70fb      	strb	r3, [r7, #3]
 800e972:	2300      	movs	r3, #0
 800e974:	73fb      	strb	r3, [r7, #15]
 800e976:	2300      	movs	r3, #0
 800e978:	73bb      	strb	r3, [r7, #14]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e980:	78fa      	ldrb	r2, [r7, #3]
 800e982:	4611      	mov	r1, r2
 800e984:	4618      	mov	r0, r3
 800e986:	f7f9 fd9c 	bl	80084c2 <HAL_PCD_EP_Close>
 800e98a:	4603      	mov	r3, r0
 800e98c:	73fb      	strb	r3, [r7, #15]
 800e98e:	7bfb      	ldrb	r3, [r7, #15]
 800e990:	4618      	mov	r0, r3
 800e992:	f000 f8fd 	bl	800eb90 <USBD_Get_USB_Status>
 800e996:	4603      	mov	r3, r0
 800e998:	73bb      	strb	r3, [r7, #14]
 800e99a:	7bbb      	ldrb	r3, [r7, #14]
 800e99c:	4618      	mov	r0, r3
 800e99e:	3710      	adds	r7, #16
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <USBD_LL_StallEP>:
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b084      	sub	sp, #16
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	70fb      	strb	r3, [r7, #3]
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	73fb      	strb	r3, [r7, #15]
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	73bb      	strb	r3, [r7, #14]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9be:	78fa      	ldrb	r2, [r7, #3]
 800e9c0:	4611      	mov	r1, r2
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7f9 fe74 	bl	80086b0 <HAL_PCD_EP_SetStall>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	73fb      	strb	r3, [r7, #15]
 800e9cc:	7bfb      	ldrb	r3, [r7, #15]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f000 f8de 	bl	800eb90 <USBD_Get_USB_Status>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	73bb      	strb	r3, [r7, #14]
 800e9d8:	7bbb      	ldrb	r3, [r7, #14]
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <USBD_LL_ClearStallEP>:
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b084      	sub	sp, #16
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	70fb      	strb	r3, [r7, #3]
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	73fb      	strb	r3, [r7, #15]
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	73bb      	strb	r3, [r7, #14]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9fc:	78fa      	ldrb	r2, [r7, #3]
 800e9fe:	4611      	mov	r1, r2
 800ea00:	4618      	mov	r0, r3
 800ea02:	f7f9 feb9 	bl	8008778 <HAL_PCD_EP_ClrStall>
 800ea06:	4603      	mov	r3, r0
 800ea08:	73fb      	strb	r3, [r7, #15]
 800ea0a:	7bfb      	ldrb	r3, [r7, #15]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f000 f8bf 	bl	800eb90 <USBD_Get_USB_Status>
 800ea12:	4603      	mov	r3, r0
 800ea14:	73bb      	strb	r3, [r7, #14]
 800ea16:	7bbb      	ldrb	r3, [r7, #14]
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3710      	adds	r7, #16
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <USBD_LL_IsStallEP>:
 800ea20:	b480      	push	{r7}
 800ea22:	b085      	sub	sp, #20
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	460b      	mov	r3, r1
 800ea2a:	70fb      	strb	r3, [r7, #3]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea32:	60fb      	str	r3, [r7, #12]
 800ea34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	da0b      	bge.n	800ea54 <USBD_LL_IsStallEP+0x34>
 800ea3c:	78fb      	ldrb	r3, [r7, #3]
 800ea3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea42:	68f9      	ldr	r1, [r7, #12]
 800ea44:	4613      	mov	r3, r2
 800ea46:	00db      	lsls	r3, r3, #3
 800ea48:	4413      	add	r3, r2
 800ea4a:	009b      	lsls	r3, r3, #2
 800ea4c:	440b      	add	r3, r1
 800ea4e:	333e      	adds	r3, #62	; 0x3e
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	e00b      	b.n	800ea6c <USBD_LL_IsStallEP+0x4c>
 800ea54:	78fb      	ldrb	r3, [r7, #3]
 800ea56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ea5a:	68f9      	ldr	r1, [r7, #12]
 800ea5c:	4613      	mov	r3, r2
 800ea5e:	00db      	lsls	r3, r3, #3
 800ea60:	4413      	add	r3, r2
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	440b      	add	r3, r1
 800ea66:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3714      	adds	r7, #20
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr

0800ea78 <USBD_LL_SetUSBAddress>:
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	460b      	mov	r3, r1
 800ea82:	70fb      	strb	r3, [r7, #3]
 800ea84:	2300      	movs	r3, #0
 800ea86:	73fb      	strb	r3, [r7, #15]
 800ea88:	2300      	movs	r3, #0
 800ea8a:	73bb      	strb	r3, [r7, #14]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea92:	78fa      	ldrb	r2, [r7, #3]
 800ea94:	4611      	mov	r1, r2
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7f9 fc86 	bl	80083a8 <HAL_PCD_SetAddress>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	73fb      	strb	r3, [r7, #15]
 800eaa0:	7bfb      	ldrb	r3, [r7, #15]
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f000 f874 	bl	800eb90 <USBD_Get_USB_Status>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	73bb      	strb	r3, [r7, #14]
 800eaac:	7bbb      	ldrb	r3, [r7, #14]
 800eaae:	4618      	mov	r0, r3
 800eab0:	3710      	adds	r7, #16
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}

0800eab6 <USBD_LL_Transmit>:
 800eab6:	b580      	push	{r7, lr}
 800eab8:	b086      	sub	sp, #24
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	60f8      	str	r0, [r7, #12]
 800eabe:	607a      	str	r2, [r7, #4]
 800eac0:	603b      	str	r3, [r7, #0]
 800eac2:	460b      	mov	r3, r1
 800eac4:	72fb      	strb	r3, [r7, #11]
 800eac6:	2300      	movs	r3, #0
 800eac8:	75fb      	strb	r3, [r7, #23]
 800eaca:	2300      	movs	r3, #0
 800eacc:	75bb      	strb	r3, [r7, #22]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ead4:	7af9      	ldrb	r1, [r7, #11]
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	f7f9 fd9f 	bl	800861c <HAL_PCD_EP_Transmit>
 800eade:	4603      	mov	r3, r0
 800eae0:	75fb      	strb	r3, [r7, #23]
 800eae2:	7dfb      	ldrb	r3, [r7, #23]
 800eae4:	4618      	mov	r0, r3
 800eae6:	f000 f853 	bl	800eb90 <USBD_Get_USB_Status>
 800eaea:	4603      	mov	r3, r0
 800eaec:	75bb      	strb	r3, [r7, #22]
 800eaee:	7dbb      	ldrb	r3, [r7, #22]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3718      	adds	r7, #24
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <USBD_LL_PrepareReceive>:
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	607a      	str	r2, [r7, #4]
 800eb02:	603b      	str	r3, [r7, #0]
 800eb04:	460b      	mov	r3, r1
 800eb06:	72fb      	strb	r3, [r7, #11]
 800eb08:	2300      	movs	r3, #0
 800eb0a:	75fb      	strb	r3, [r7, #23]
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	75bb      	strb	r3, [r7, #22]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eb16:	7af9      	ldrb	r1, [r7, #11]
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	f7f9 fd1b 	bl	8008556 <HAL_PCD_EP_Receive>
 800eb20:	4603      	mov	r3, r0
 800eb22:	75fb      	strb	r3, [r7, #23]
 800eb24:	7dfb      	ldrb	r3, [r7, #23]
 800eb26:	4618      	mov	r0, r3
 800eb28:	f000 f832 	bl	800eb90 <USBD_Get_USB_Status>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	75bb      	strb	r3, [r7, #22]
 800eb30:	7dbb      	ldrb	r3, [r7, #22]
 800eb32:	4618      	mov	r0, r3
 800eb34:	3718      	adds	r7, #24
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <USBD_LL_GetRxDataSize>:
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b082      	sub	sp, #8
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
 800eb42:	460b      	mov	r3, r1
 800eb44:	70fb      	strb	r3, [r7, #3]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb4c:	78fa      	ldrb	r2, [r7, #3]
 800eb4e:	4611      	mov	r1, r2
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7f9 fd4b 	bl	80085ec <HAL_PCD_EP_GetRxCount>
 800eb56:	4603      	mov	r3, r0
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3708      	adds	r7, #8
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <USBD_static_malloc>:
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	4b03      	ldr	r3, [pc, #12]	; (800eb78 <USBD_static_malloc+0x18>)
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	370c      	adds	r7, #12
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	20002f90 	.word	0x20002f90

0800eb7c <USBD_static_free>:
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	bf00      	nop
 800eb86:	370c      	adds	r7, #12
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <USBD_Get_USB_Status>:
 800eb90:	b480      	push	{r7}
 800eb92:	b085      	sub	sp, #20
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	4603      	mov	r3, r0
 800eb98:	71fb      	strb	r3, [r7, #7]
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	73fb      	strb	r3, [r7, #15]
 800eb9e:	79fb      	ldrb	r3, [r7, #7]
 800eba0:	2b03      	cmp	r3, #3
 800eba2:	d817      	bhi.n	800ebd4 <USBD_Get_USB_Status+0x44>
 800eba4:	a201      	add	r2, pc, #4	; (adr r2, 800ebac <USBD_Get_USB_Status+0x1c>)
 800eba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebaa:	bf00      	nop
 800ebac:	0800ebbd 	.word	0x0800ebbd
 800ebb0:	0800ebc3 	.word	0x0800ebc3
 800ebb4:	0800ebc9 	.word	0x0800ebc9
 800ebb8:	0800ebcf 	.word	0x0800ebcf
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	73fb      	strb	r3, [r7, #15]
 800ebc0:	e00b      	b.n	800ebda <USBD_Get_USB_Status+0x4a>
 800ebc2:	2303      	movs	r3, #3
 800ebc4:	73fb      	strb	r3, [r7, #15]
 800ebc6:	e008      	b.n	800ebda <USBD_Get_USB_Status+0x4a>
 800ebc8:	2301      	movs	r3, #1
 800ebca:	73fb      	strb	r3, [r7, #15]
 800ebcc:	e005      	b.n	800ebda <USBD_Get_USB_Status+0x4a>
 800ebce:	2303      	movs	r3, #3
 800ebd0:	73fb      	strb	r3, [r7, #15]
 800ebd2:	e002      	b.n	800ebda <USBD_Get_USB_Status+0x4a>
 800ebd4:	2303      	movs	r3, #3
 800ebd6:	73fb      	strb	r3, [r7, #15]
 800ebd8:	bf00      	nop
 800ebda:	7bfb      	ldrb	r3, [r7, #15]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3714      	adds	r7, #20
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr

0800ebe8 <__errno>:
 800ebe8:	4b01      	ldr	r3, [pc, #4]	; (800ebf0 <__errno+0x8>)
 800ebea:	6818      	ldr	r0, [r3, #0]
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	20000110 	.word	0x20000110

0800ebf4 <__libc_init_array>:
 800ebf4:	b570      	push	{r4, r5, r6, lr}
 800ebf6:	4d0d      	ldr	r5, [pc, #52]	; (800ec2c <__libc_init_array+0x38>)
 800ebf8:	4c0d      	ldr	r4, [pc, #52]	; (800ec30 <__libc_init_array+0x3c>)
 800ebfa:	1b64      	subs	r4, r4, r5
 800ebfc:	10a4      	asrs	r4, r4, #2
 800ebfe:	2600      	movs	r6, #0
 800ec00:	42a6      	cmp	r6, r4
 800ec02:	d109      	bne.n	800ec18 <__libc_init_array+0x24>
 800ec04:	4d0b      	ldr	r5, [pc, #44]	; (800ec34 <__libc_init_array+0x40>)
 800ec06:	4c0c      	ldr	r4, [pc, #48]	; (800ec38 <__libc_init_array+0x44>)
 800ec08:	f005 f9a2 	bl	8013f50 <_init>
 800ec0c:	1b64      	subs	r4, r4, r5
 800ec0e:	10a4      	asrs	r4, r4, #2
 800ec10:	2600      	movs	r6, #0
 800ec12:	42a6      	cmp	r6, r4
 800ec14:	d105      	bne.n	800ec22 <__libc_init_array+0x2e>
 800ec16:	bd70      	pop	{r4, r5, r6, pc}
 800ec18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec1c:	4798      	blx	r3
 800ec1e:	3601      	adds	r6, #1
 800ec20:	e7ee      	b.n	800ec00 <__libc_init_array+0xc>
 800ec22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec26:	4798      	blx	r3
 800ec28:	3601      	adds	r6, #1
 800ec2a:	e7f2      	b.n	800ec12 <__libc_init_array+0x1e>
 800ec2c:	08015304 	.word	0x08015304
 800ec30:	08015304 	.word	0x08015304
 800ec34:	08015304 	.word	0x08015304
 800ec38:	08015308 	.word	0x08015308

0800ec3c <memcpy>:
 800ec3c:	440a      	add	r2, r1
 800ec3e:	4291      	cmp	r1, r2
 800ec40:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec44:	d100      	bne.n	800ec48 <memcpy+0xc>
 800ec46:	4770      	bx	lr
 800ec48:	b510      	push	{r4, lr}
 800ec4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec52:	4291      	cmp	r1, r2
 800ec54:	d1f9      	bne.n	800ec4a <memcpy+0xe>
 800ec56:	bd10      	pop	{r4, pc}

0800ec58 <memmove>:
 800ec58:	4288      	cmp	r0, r1
 800ec5a:	b510      	push	{r4, lr}
 800ec5c:	eb01 0402 	add.w	r4, r1, r2
 800ec60:	d902      	bls.n	800ec68 <memmove+0x10>
 800ec62:	4284      	cmp	r4, r0
 800ec64:	4623      	mov	r3, r4
 800ec66:	d807      	bhi.n	800ec78 <memmove+0x20>
 800ec68:	1e43      	subs	r3, r0, #1
 800ec6a:	42a1      	cmp	r1, r4
 800ec6c:	d008      	beq.n	800ec80 <memmove+0x28>
 800ec6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec76:	e7f8      	b.n	800ec6a <memmove+0x12>
 800ec78:	4402      	add	r2, r0
 800ec7a:	4601      	mov	r1, r0
 800ec7c:	428a      	cmp	r2, r1
 800ec7e:	d100      	bne.n	800ec82 <memmove+0x2a>
 800ec80:	bd10      	pop	{r4, pc}
 800ec82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec8a:	e7f7      	b.n	800ec7c <memmove+0x24>

0800ec8c <memset>:
 800ec8c:	4402      	add	r2, r0
 800ec8e:	4603      	mov	r3, r0
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d100      	bne.n	800ec96 <memset+0xa>
 800ec94:	4770      	bx	lr
 800ec96:	f803 1b01 	strb.w	r1, [r3], #1
 800ec9a:	e7f9      	b.n	800ec90 <memset+0x4>

0800ec9c <__cvt>:
 800ec9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eca0:	ec55 4b10 	vmov	r4, r5, d0
 800eca4:	2d00      	cmp	r5, #0
 800eca6:	460e      	mov	r6, r1
 800eca8:	4619      	mov	r1, r3
 800ecaa:	462b      	mov	r3, r5
 800ecac:	bfbb      	ittet	lt
 800ecae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ecb2:	461d      	movlt	r5, r3
 800ecb4:	2300      	movge	r3, #0
 800ecb6:	232d      	movlt	r3, #45	; 0x2d
 800ecb8:	700b      	strb	r3, [r1, #0]
 800ecba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ecc0:	4691      	mov	r9, r2
 800ecc2:	f023 0820 	bic.w	r8, r3, #32
 800ecc6:	bfbc      	itt	lt
 800ecc8:	4622      	movlt	r2, r4
 800ecca:	4614      	movlt	r4, r2
 800eccc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ecd0:	d005      	beq.n	800ecde <__cvt+0x42>
 800ecd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ecd6:	d100      	bne.n	800ecda <__cvt+0x3e>
 800ecd8:	3601      	adds	r6, #1
 800ecda:	2102      	movs	r1, #2
 800ecdc:	e000      	b.n	800ece0 <__cvt+0x44>
 800ecde:	2103      	movs	r1, #3
 800ece0:	ab03      	add	r3, sp, #12
 800ece2:	9301      	str	r3, [sp, #4]
 800ece4:	ab02      	add	r3, sp, #8
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	ec45 4b10 	vmov	d0, r4, r5
 800ecec:	4653      	mov	r3, sl
 800ecee:	4632      	mov	r2, r6
 800ecf0:	f001 ffda 	bl	8010ca8 <_dtoa_r>
 800ecf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ecf8:	4607      	mov	r7, r0
 800ecfa:	d102      	bne.n	800ed02 <__cvt+0x66>
 800ecfc:	f019 0f01 	tst.w	r9, #1
 800ed00:	d022      	beq.n	800ed48 <__cvt+0xac>
 800ed02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ed06:	eb07 0906 	add.w	r9, r7, r6
 800ed0a:	d110      	bne.n	800ed2e <__cvt+0x92>
 800ed0c:	783b      	ldrb	r3, [r7, #0]
 800ed0e:	2b30      	cmp	r3, #48	; 0x30
 800ed10:	d10a      	bne.n	800ed28 <__cvt+0x8c>
 800ed12:	2200      	movs	r2, #0
 800ed14:	2300      	movs	r3, #0
 800ed16:	4620      	mov	r0, r4
 800ed18:	4629      	mov	r1, r5
 800ed1a:	f7f1 fef5 	bl	8000b08 <__aeabi_dcmpeq>
 800ed1e:	b918      	cbnz	r0, 800ed28 <__cvt+0x8c>
 800ed20:	f1c6 0601 	rsb	r6, r6, #1
 800ed24:	f8ca 6000 	str.w	r6, [sl]
 800ed28:	f8da 3000 	ldr.w	r3, [sl]
 800ed2c:	4499      	add	r9, r3
 800ed2e:	2200      	movs	r2, #0
 800ed30:	2300      	movs	r3, #0
 800ed32:	4620      	mov	r0, r4
 800ed34:	4629      	mov	r1, r5
 800ed36:	f7f1 fee7 	bl	8000b08 <__aeabi_dcmpeq>
 800ed3a:	b108      	cbz	r0, 800ed40 <__cvt+0xa4>
 800ed3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ed40:	2230      	movs	r2, #48	; 0x30
 800ed42:	9b03      	ldr	r3, [sp, #12]
 800ed44:	454b      	cmp	r3, r9
 800ed46:	d307      	bcc.n	800ed58 <__cvt+0xbc>
 800ed48:	9b03      	ldr	r3, [sp, #12]
 800ed4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed4c:	1bdb      	subs	r3, r3, r7
 800ed4e:	4638      	mov	r0, r7
 800ed50:	6013      	str	r3, [r2, #0]
 800ed52:	b004      	add	sp, #16
 800ed54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed58:	1c59      	adds	r1, r3, #1
 800ed5a:	9103      	str	r1, [sp, #12]
 800ed5c:	701a      	strb	r2, [r3, #0]
 800ed5e:	e7f0      	b.n	800ed42 <__cvt+0xa6>

0800ed60 <__exponent>:
 800ed60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed62:	4603      	mov	r3, r0
 800ed64:	2900      	cmp	r1, #0
 800ed66:	bfb8      	it	lt
 800ed68:	4249      	neglt	r1, r1
 800ed6a:	f803 2b02 	strb.w	r2, [r3], #2
 800ed6e:	bfb4      	ite	lt
 800ed70:	222d      	movlt	r2, #45	; 0x2d
 800ed72:	222b      	movge	r2, #43	; 0x2b
 800ed74:	2909      	cmp	r1, #9
 800ed76:	7042      	strb	r2, [r0, #1]
 800ed78:	dd2a      	ble.n	800edd0 <__exponent+0x70>
 800ed7a:	f10d 0407 	add.w	r4, sp, #7
 800ed7e:	46a4      	mov	ip, r4
 800ed80:	270a      	movs	r7, #10
 800ed82:	46a6      	mov	lr, r4
 800ed84:	460a      	mov	r2, r1
 800ed86:	fb91 f6f7 	sdiv	r6, r1, r7
 800ed8a:	fb07 1516 	mls	r5, r7, r6, r1
 800ed8e:	3530      	adds	r5, #48	; 0x30
 800ed90:	2a63      	cmp	r2, #99	; 0x63
 800ed92:	f104 34ff 	add.w	r4, r4, #4294967295
 800ed96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ed9a:	4631      	mov	r1, r6
 800ed9c:	dcf1      	bgt.n	800ed82 <__exponent+0x22>
 800ed9e:	3130      	adds	r1, #48	; 0x30
 800eda0:	f1ae 0502 	sub.w	r5, lr, #2
 800eda4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800eda8:	1c44      	adds	r4, r0, #1
 800edaa:	4629      	mov	r1, r5
 800edac:	4561      	cmp	r1, ip
 800edae:	d30a      	bcc.n	800edc6 <__exponent+0x66>
 800edb0:	f10d 0209 	add.w	r2, sp, #9
 800edb4:	eba2 020e 	sub.w	r2, r2, lr
 800edb8:	4565      	cmp	r5, ip
 800edba:	bf88      	it	hi
 800edbc:	2200      	movhi	r2, #0
 800edbe:	4413      	add	r3, r2
 800edc0:	1a18      	subs	r0, r3, r0
 800edc2:	b003      	add	sp, #12
 800edc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800edca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800edce:	e7ed      	b.n	800edac <__exponent+0x4c>
 800edd0:	2330      	movs	r3, #48	; 0x30
 800edd2:	3130      	adds	r1, #48	; 0x30
 800edd4:	7083      	strb	r3, [r0, #2]
 800edd6:	70c1      	strb	r1, [r0, #3]
 800edd8:	1d03      	adds	r3, r0, #4
 800edda:	e7f1      	b.n	800edc0 <__exponent+0x60>

0800eddc <_printf_float>:
 800eddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede0:	ed2d 8b02 	vpush	{d8}
 800ede4:	b08d      	sub	sp, #52	; 0x34
 800ede6:	460c      	mov	r4, r1
 800ede8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800edec:	4616      	mov	r6, r2
 800edee:	461f      	mov	r7, r3
 800edf0:	4605      	mov	r5, r0
 800edf2:	f003 fa6d 	bl	80122d0 <_localeconv_r>
 800edf6:	f8d0 a000 	ldr.w	sl, [r0]
 800edfa:	4650      	mov	r0, sl
 800edfc:	f7f1 fa02 	bl	8000204 <strlen>
 800ee00:	2300      	movs	r3, #0
 800ee02:	930a      	str	r3, [sp, #40]	; 0x28
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	9305      	str	r3, [sp, #20]
 800ee08:	f8d8 3000 	ldr.w	r3, [r8]
 800ee0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ee10:	3307      	adds	r3, #7
 800ee12:	f023 0307 	bic.w	r3, r3, #7
 800ee16:	f103 0208 	add.w	r2, r3, #8
 800ee1a:	f8c8 2000 	str.w	r2, [r8]
 800ee1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ee26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ee2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ee2e:	9307      	str	r3, [sp, #28]
 800ee30:	f8cd 8018 	str.w	r8, [sp, #24]
 800ee34:	ee08 0a10 	vmov	s16, r0
 800ee38:	4b9f      	ldr	r3, [pc, #636]	; (800f0b8 <_printf_float+0x2dc>)
 800ee3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee42:	f7f1 fe93 	bl	8000b6c <__aeabi_dcmpun>
 800ee46:	bb88      	cbnz	r0, 800eeac <_printf_float+0xd0>
 800ee48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee4c:	4b9a      	ldr	r3, [pc, #616]	; (800f0b8 <_printf_float+0x2dc>)
 800ee4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee52:	f7f1 fe6d 	bl	8000b30 <__aeabi_dcmple>
 800ee56:	bb48      	cbnz	r0, 800eeac <_printf_float+0xd0>
 800ee58:	2200      	movs	r2, #0
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	4640      	mov	r0, r8
 800ee5e:	4649      	mov	r1, r9
 800ee60:	f7f1 fe5c 	bl	8000b1c <__aeabi_dcmplt>
 800ee64:	b110      	cbz	r0, 800ee6c <_printf_float+0x90>
 800ee66:	232d      	movs	r3, #45	; 0x2d
 800ee68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee6c:	4b93      	ldr	r3, [pc, #588]	; (800f0bc <_printf_float+0x2e0>)
 800ee6e:	4894      	ldr	r0, [pc, #592]	; (800f0c0 <_printf_float+0x2e4>)
 800ee70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ee74:	bf94      	ite	ls
 800ee76:	4698      	movls	r8, r3
 800ee78:	4680      	movhi	r8, r0
 800ee7a:	2303      	movs	r3, #3
 800ee7c:	6123      	str	r3, [r4, #16]
 800ee7e:	9b05      	ldr	r3, [sp, #20]
 800ee80:	f023 0204 	bic.w	r2, r3, #4
 800ee84:	6022      	str	r2, [r4, #0]
 800ee86:	f04f 0900 	mov.w	r9, #0
 800ee8a:	9700      	str	r7, [sp, #0]
 800ee8c:	4633      	mov	r3, r6
 800ee8e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ee90:	4621      	mov	r1, r4
 800ee92:	4628      	mov	r0, r5
 800ee94:	f000 f9d8 	bl	800f248 <_printf_common>
 800ee98:	3001      	adds	r0, #1
 800ee9a:	f040 8090 	bne.w	800efbe <_printf_float+0x1e2>
 800ee9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eea2:	b00d      	add	sp, #52	; 0x34
 800eea4:	ecbd 8b02 	vpop	{d8}
 800eea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeac:	4642      	mov	r2, r8
 800eeae:	464b      	mov	r3, r9
 800eeb0:	4640      	mov	r0, r8
 800eeb2:	4649      	mov	r1, r9
 800eeb4:	f7f1 fe5a 	bl	8000b6c <__aeabi_dcmpun>
 800eeb8:	b140      	cbz	r0, 800eecc <_printf_float+0xf0>
 800eeba:	464b      	mov	r3, r9
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	bfbc      	itt	lt
 800eec0:	232d      	movlt	r3, #45	; 0x2d
 800eec2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eec6:	487f      	ldr	r0, [pc, #508]	; (800f0c4 <_printf_float+0x2e8>)
 800eec8:	4b7f      	ldr	r3, [pc, #508]	; (800f0c8 <_printf_float+0x2ec>)
 800eeca:	e7d1      	b.n	800ee70 <_printf_float+0x94>
 800eecc:	6863      	ldr	r3, [r4, #4]
 800eece:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eed2:	9206      	str	r2, [sp, #24]
 800eed4:	1c5a      	adds	r2, r3, #1
 800eed6:	d13f      	bne.n	800ef58 <_printf_float+0x17c>
 800eed8:	2306      	movs	r3, #6
 800eeda:	6063      	str	r3, [r4, #4]
 800eedc:	9b05      	ldr	r3, [sp, #20]
 800eede:	6861      	ldr	r1, [r4, #4]
 800eee0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eee4:	2300      	movs	r3, #0
 800eee6:	9303      	str	r3, [sp, #12]
 800eee8:	ab0a      	add	r3, sp, #40	; 0x28
 800eeea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800eeee:	ab09      	add	r3, sp, #36	; 0x24
 800eef0:	ec49 8b10 	vmov	d0, r8, r9
 800eef4:	9300      	str	r3, [sp, #0]
 800eef6:	6022      	str	r2, [r4, #0]
 800eef8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eefc:	4628      	mov	r0, r5
 800eefe:	f7ff fecd 	bl	800ec9c <__cvt>
 800ef02:	9b06      	ldr	r3, [sp, #24]
 800ef04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef06:	2b47      	cmp	r3, #71	; 0x47
 800ef08:	4680      	mov	r8, r0
 800ef0a:	d108      	bne.n	800ef1e <_printf_float+0x142>
 800ef0c:	1cc8      	adds	r0, r1, #3
 800ef0e:	db02      	blt.n	800ef16 <_printf_float+0x13a>
 800ef10:	6863      	ldr	r3, [r4, #4]
 800ef12:	4299      	cmp	r1, r3
 800ef14:	dd41      	ble.n	800ef9a <_printf_float+0x1be>
 800ef16:	f1ab 0b02 	sub.w	fp, fp, #2
 800ef1a:	fa5f fb8b 	uxtb.w	fp, fp
 800ef1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ef22:	d820      	bhi.n	800ef66 <_printf_float+0x18a>
 800ef24:	3901      	subs	r1, #1
 800ef26:	465a      	mov	r2, fp
 800ef28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ef2c:	9109      	str	r1, [sp, #36]	; 0x24
 800ef2e:	f7ff ff17 	bl	800ed60 <__exponent>
 800ef32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef34:	1813      	adds	r3, r2, r0
 800ef36:	2a01      	cmp	r2, #1
 800ef38:	4681      	mov	r9, r0
 800ef3a:	6123      	str	r3, [r4, #16]
 800ef3c:	dc02      	bgt.n	800ef44 <_printf_float+0x168>
 800ef3e:	6822      	ldr	r2, [r4, #0]
 800ef40:	07d2      	lsls	r2, r2, #31
 800ef42:	d501      	bpl.n	800ef48 <_printf_float+0x16c>
 800ef44:	3301      	adds	r3, #1
 800ef46:	6123      	str	r3, [r4, #16]
 800ef48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d09c      	beq.n	800ee8a <_printf_float+0xae>
 800ef50:	232d      	movs	r3, #45	; 0x2d
 800ef52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef56:	e798      	b.n	800ee8a <_printf_float+0xae>
 800ef58:	9a06      	ldr	r2, [sp, #24]
 800ef5a:	2a47      	cmp	r2, #71	; 0x47
 800ef5c:	d1be      	bne.n	800eedc <_printf_float+0x100>
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d1bc      	bne.n	800eedc <_printf_float+0x100>
 800ef62:	2301      	movs	r3, #1
 800ef64:	e7b9      	b.n	800eeda <_printf_float+0xfe>
 800ef66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ef6a:	d118      	bne.n	800ef9e <_printf_float+0x1c2>
 800ef6c:	2900      	cmp	r1, #0
 800ef6e:	6863      	ldr	r3, [r4, #4]
 800ef70:	dd0b      	ble.n	800ef8a <_printf_float+0x1ae>
 800ef72:	6121      	str	r1, [r4, #16]
 800ef74:	b913      	cbnz	r3, 800ef7c <_printf_float+0x1a0>
 800ef76:	6822      	ldr	r2, [r4, #0]
 800ef78:	07d0      	lsls	r0, r2, #31
 800ef7a:	d502      	bpl.n	800ef82 <_printf_float+0x1a6>
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	440b      	add	r3, r1
 800ef80:	6123      	str	r3, [r4, #16]
 800ef82:	65a1      	str	r1, [r4, #88]	; 0x58
 800ef84:	f04f 0900 	mov.w	r9, #0
 800ef88:	e7de      	b.n	800ef48 <_printf_float+0x16c>
 800ef8a:	b913      	cbnz	r3, 800ef92 <_printf_float+0x1b6>
 800ef8c:	6822      	ldr	r2, [r4, #0]
 800ef8e:	07d2      	lsls	r2, r2, #31
 800ef90:	d501      	bpl.n	800ef96 <_printf_float+0x1ba>
 800ef92:	3302      	adds	r3, #2
 800ef94:	e7f4      	b.n	800ef80 <_printf_float+0x1a4>
 800ef96:	2301      	movs	r3, #1
 800ef98:	e7f2      	b.n	800ef80 <_printf_float+0x1a4>
 800ef9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ef9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efa0:	4299      	cmp	r1, r3
 800efa2:	db05      	blt.n	800efb0 <_printf_float+0x1d4>
 800efa4:	6823      	ldr	r3, [r4, #0]
 800efa6:	6121      	str	r1, [r4, #16]
 800efa8:	07d8      	lsls	r0, r3, #31
 800efaa:	d5ea      	bpl.n	800ef82 <_printf_float+0x1a6>
 800efac:	1c4b      	adds	r3, r1, #1
 800efae:	e7e7      	b.n	800ef80 <_printf_float+0x1a4>
 800efb0:	2900      	cmp	r1, #0
 800efb2:	bfd4      	ite	le
 800efb4:	f1c1 0202 	rsble	r2, r1, #2
 800efb8:	2201      	movgt	r2, #1
 800efba:	4413      	add	r3, r2
 800efbc:	e7e0      	b.n	800ef80 <_printf_float+0x1a4>
 800efbe:	6823      	ldr	r3, [r4, #0]
 800efc0:	055a      	lsls	r2, r3, #21
 800efc2:	d407      	bmi.n	800efd4 <_printf_float+0x1f8>
 800efc4:	6923      	ldr	r3, [r4, #16]
 800efc6:	4642      	mov	r2, r8
 800efc8:	4631      	mov	r1, r6
 800efca:	4628      	mov	r0, r5
 800efcc:	47b8      	blx	r7
 800efce:	3001      	adds	r0, #1
 800efd0:	d12c      	bne.n	800f02c <_printf_float+0x250>
 800efd2:	e764      	b.n	800ee9e <_printf_float+0xc2>
 800efd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800efd8:	f240 80e0 	bls.w	800f19c <_printf_float+0x3c0>
 800efdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800efe0:	2200      	movs	r2, #0
 800efe2:	2300      	movs	r3, #0
 800efe4:	f7f1 fd90 	bl	8000b08 <__aeabi_dcmpeq>
 800efe8:	2800      	cmp	r0, #0
 800efea:	d034      	beq.n	800f056 <_printf_float+0x27a>
 800efec:	4a37      	ldr	r2, [pc, #220]	; (800f0cc <_printf_float+0x2f0>)
 800efee:	2301      	movs	r3, #1
 800eff0:	4631      	mov	r1, r6
 800eff2:	4628      	mov	r0, r5
 800eff4:	47b8      	blx	r7
 800eff6:	3001      	adds	r0, #1
 800eff8:	f43f af51 	beq.w	800ee9e <_printf_float+0xc2>
 800effc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f000:	429a      	cmp	r2, r3
 800f002:	db02      	blt.n	800f00a <_printf_float+0x22e>
 800f004:	6823      	ldr	r3, [r4, #0]
 800f006:	07d8      	lsls	r0, r3, #31
 800f008:	d510      	bpl.n	800f02c <_printf_float+0x250>
 800f00a:	ee18 3a10 	vmov	r3, s16
 800f00e:	4652      	mov	r2, sl
 800f010:	4631      	mov	r1, r6
 800f012:	4628      	mov	r0, r5
 800f014:	47b8      	blx	r7
 800f016:	3001      	adds	r0, #1
 800f018:	f43f af41 	beq.w	800ee9e <_printf_float+0xc2>
 800f01c:	f04f 0800 	mov.w	r8, #0
 800f020:	f104 091a 	add.w	r9, r4, #26
 800f024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f026:	3b01      	subs	r3, #1
 800f028:	4543      	cmp	r3, r8
 800f02a:	dc09      	bgt.n	800f040 <_printf_float+0x264>
 800f02c:	6823      	ldr	r3, [r4, #0]
 800f02e:	079b      	lsls	r3, r3, #30
 800f030:	f100 8105 	bmi.w	800f23e <_printf_float+0x462>
 800f034:	68e0      	ldr	r0, [r4, #12]
 800f036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f038:	4298      	cmp	r0, r3
 800f03a:	bfb8      	it	lt
 800f03c:	4618      	movlt	r0, r3
 800f03e:	e730      	b.n	800eea2 <_printf_float+0xc6>
 800f040:	2301      	movs	r3, #1
 800f042:	464a      	mov	r2, r9
 800f044:	4631      	mov	r1, r6
 800f046:	4628      	mov	r0, r5
 800f048:	47b8      	blx	r7
 800f04a:	3001      	adds	r0, #1
 800f04c:	f43f af27 	beq.w	800ee9e <_printf_float+0xc2>
 800f050:	f108 0801 	add.w	r8, r8, #1
 800f054:	e7e6      	b.n	800f024 <_printf_float+0x248>
 800f056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f058:	2b00      	cmp	r3, #0
 800f05a:	dc39      	bgt.n	800f0d0 <_printf_float+0x2f4>
 800f05c:	4a1b      	ldr	r2, [pc, #108]	; (800f0cc <_printf_float+0x2f0>)
 800f05e:	2301      	movs	r3, #1
 800f060:	4631      	mov	r1, r6
 800f062:	4628      	mov	r0, r5
 800f064:	47b8      	blx	r7
 800f066:	3001      	adds	r0, #1
 800f068:	f43f af19 	beq.w	800ee9e <_printf_float+0xc2>
 800f06c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f070:	4313      	orrs	r3, r2
 800f072:	d102      	bne.n	800f07a <_printf_float+0x29e>
 800f074:	6823      	ldr	r3, [r4, #0]
 800f076:	07d9      	lsls	r1, r3, #31
 800f078:	d5d8      	bpl.n	800f02c <_printf_float+0x250>
 800f07a:	ee18 3a10 	vmov	r3, s16
 800f07e:	4652      	mov	r2, sl
 800f080:	4631      	mov	r1, r6
 800f082:	4628      	mov	r0, r5
 800f084:	47b8      	blx	r7
 800f086:	3001      	adds	r0, #1
 800f088:	f43f af09 	beq.w	800ee9e <_printf_float+0xc2>
 800f08c:	f04f 0900 	mov.w	r9, #0
 800f090:	f104 0a1a 	add.w	sl, r4, #26
 800f094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f096:	425b      	negs	r3, r3
 800f098:	454b      	cmp	r3, r9
 800f09a:	dc01      	bgt.n	800f0a0 <_printf_float+0x2c4>
 800f09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f09e:	e792      	b.n	800efc6 <_printf_float+0x1ea>
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	4652      	mov	r2, sl
 800f0a4:	4631      	mov	r1, r6
 800f0a6:	4628      	mov	r0, r5
 800f0a8:	47b8      	blx	r7
 800f0aa:	3001      	adds	r0, #1
 800f0ac:	f43f aef7 	beq.w	800ee9e <_printf_float+0xc2>
 800f0b0:	f109 0901 	add.w	r9, r9, #1
 800f0b4:	e7ee      	b.n	800f094 <_printf_float+0x2b8>
 800f0b6:	bf00      	nop
 800f0b8:	7fefffff 	.word	0x7fefffff
 800f0bc:	08014f44 	.word	0x08014f44
 800f0c0:	08014f48 	.word	0x08014f48
 800f0c4:	08014f50 	.word	0x08014f50
 800f0c8:	08014f4c 	.word	0x08014f4c
 800f0cc:	080152a9 	.word	0x080152a9
 800f0d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	bfa8      	it	ge
 800f0d8:	461a      	movge	r2, r3
 800f0da:	2a00      	cmp	r2, #0
 800f0dc:	4691      	mov	r9, r2
 800f0de:	dc37      	bgt.n	800f150 <_printf_float+0x374>
 800f0e0:	f04f 0b00 	mov.w	fp, #0
 800f0e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0e8:	f104 021a 	add.w	r2, r4, #26
 800f0ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f0ee:	9305      	str	r3, [sp, #20]
 800f0f0:	eba3 0309 	sub.w	r3, r3, r9
 800f0f4:	455b      	cmp	r3, fp
 800f0f6:	dc33      	bgt.n	800f160 <_printf_float+0x384>
 800f0f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	db3b      	blt.n	800f178 <_printf_float+0x39c>
 800f100:	6823      	ldr	r3, [r4, #0]
 800f102:	07da      	lsls	r2, r3, #31
 800f104:	d438      	bmi.n	800f178 <_printf_float+0x39c>
 800f106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f108:	9a05      	ldr	r2, [sp, #20]
 800f10a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f10c:	1a9a      	subs	r2, r3, r2
 800f10e:	eba3 0901 	sub.w	r9, r3, r1
 800f112:	4591      	cmp	r9, r2
 800f114:	bfa8      	it	ge
 800f116:	4691      	movge	r9, r2
 800f118:	f1b9 0f00 	cmp.w	r9, #0
 800f11c:	dc35      	bgt.n	800f18a <_printf_float+0x3ae>
 800f11e:	f04f 0800 	mov.w	r8, #0
 800f122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f126:	f104 0a1a 	add.w	sl, r4, #26
 800f12a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f12e:	1a9b      	subs	r3, r3, r2
 800f130:	eba3 0309 	sub.w	r3, r3, r9
 800f134:	4543      	cmp	r3, r8
 800f136:	f77f af79 	ble.w	800f02c <_printf_float+0x250>
 800f13a:	2301      	movs	r3, #1
 800f13c:	4652      	mov	r2, sl
 800f13e:	4631      	mov	r1, r6
 800f140:	4628      	mov	r0, r5
 800f142:	47b8      	blx	r7
 800f144:	3001      	adds	r0, #1
 800f146:	f43f aeaa 	beq.w	800ee9e <_printf_float+0xc2>
 800f14a:	f108 0801 	add.w	r8, r8, #1
 800f14e:	e7ec      	b.n	800f12a <_printf_float+0x34e>
 800f150:	4613      	mov	r3, r2
 800f152:	4631      	mov	r1, r6
 800f154:	4642      	mov	r2, r8
 800f156:	4628      	mov	r0, r5
 800f158:	47b8      	blx	r7
 800f15a:	3001      	adds	r0, #1
 800f15c:	d1c0      	bne.n	800f0e0 <_printf_float+0x304>
 800f15e:	e69e      	b.n	800ee9e <_printf_float+0xc2>
 800f160:	2301      	movs	r3, #1
 800f162:	4631      	mov	r1, r6
 800f164:	4628      	mov	r0, r5
 800f166:	9205      	str	r2, [sp, #20]
 800f168:	47b8      	blx	r7
 800f16a:	3001      	adds	r0, #1
 800f16c:	f43f ae97 	beq.w	800ee9e <_printf_float+0xc2>
 800f170:	9a05      	ldr	r2, [sp, #20]
 800f172:	f10b 0b01 	add.w	fp, fp, #1
 800f176:	e7b9      	b.n	800f0ec <_printf_float+0x310>
 800f178:	ee18 3a10 	vmov	r3, s16
 800f17c:	4652      	mov	r2, sl
 800f17e:	4631      	mov	r1, r6
 800f180:	4628      	mov	r0, r5
 800f182:	47b8      	blx	r7
 800f184:	3001      	adds	r0, #1
 800f186:	d1be      	bne.n	800f106 <_printf_float+0x32a>
 800f188:	e689      	b.n	800ee9e <_printf_float+0xc2>
 800f18a:	9a05      	ldr	r2, [sp, #20]
 800f18c:	464b      	mov	r3, r9
 800f18e:	4442      	add	r2, r8
 800f190:	4631      	mov	r1, r6
 800f192:	4628      	mov	r0, r5
 800f194:	47b8      	blx	r7
 800f196:	3001      	adds	r0, #1
 800f198:	d1c1      	bne.n	800f11e <_printf_float+0x342>
 800f19a:	e680      	b.n	800ee9e <_printf_float+0xc2>
 800f19c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f19e:	2a01      	cmp	r2, #1
 800f1a0:	dc01      	bgt.n	800f1a6 <_printf_float+0x3ca>
 800f1a2:	07db      	lsls	r3, r3, #31
 800f1a4:	d538      	bpl.n	800f218 <_printf_float+0x43c>
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	4642      	mov	r2, r8
 800f1aa:	4631      	mov	r1, r6
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	47b8      	blx	r7
 800f1b0:	3001      	adds	r0, #1
 800f1b2:	f43f ae74 	beq.w	800ee9e <_printf_float+0xc2>
 800f1b6:	ee18 3a10 	vmov	r3, s16
 800f1ba:	4652      	mov	r2, sl
 800f1bc:	4631      	mov	r1, r6
 800f1be:	4628      	mov	r0, r5
 800f1c0:	47b8      	blx	r7
 800f1c2:	3001      	adds	r0, #1
 800f1c4:	f43f ae6b 	beq.w	800ee9e <_printf_float+0xc2>
 800f1c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	f7f1 fc9a 	bl	8000b08 <__aeabi_dcmpeq>
 800f1d4:	b9d8      	cbnz	r0, 800f20e <_printf_float+0x432>
 800f1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1d8:	f108 0201 	add.w	r2, r8, #1
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	4631      	mov	r1, r6
 800f1e0:	4628      	mov	r0, r5
 800f1e2:	47b8      	blx	r7
 800f1e4:	3001      	adds	r0, #1
 800f1e6:	d10e      	bne.n	800f206 <_printf_float+0x42a>
 800f1e8:	e659      	b.n	800ee9e <_printf_float+0xc2>
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	4652      	mov	r2, sl
 800f1ee:	4631      	mov	r1, r6
 800f1f0:	4628      	mov	r0, r5
 800f1f2:	47b8      	blx	r7
 800f1f4:	3001      	adds	r0, #1
 800f1f6:	f43f ae52 	beq.w	800ee9e <_printf_float+0xc2>
 800f1fa:	f108 0801 	add.w	r8, r8, #1
 800f1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f200:	3b01      	subs	r3, #1
 800f202:	4543      	cmp	r3, r8
 800f204:	dcf1      	bgt.n	800f1ea <_printf_float+0x40e>
 800f206:	464b      	mov	r3, r9
 800f208:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f20c:	e6dc      	b.n	800efc8 <_printf_float+0x1ec>
 800f20e:	f04f 0800 	mov.w	r8, #0
 800f212:	f104 0a1a 	add.w	sl, r4, #26
 800f216:	e7f2      	b.n	800f1fe <_printf_float+0x422>
 800f218:	2301      	movs	r3, #1
 800f21a:	4642      	mov	r2, r8
 800f21c:	e7df      	b.n	800f1de <_printf_float+0x402>
 800f21e:	2301      	movs	r3, #1
 800f220:	464a      	mov	r2, r9
 800f222:	4631      	mov	r1, r6
 800f224:	4628      	mov	r0, r5
 800f226:	47b8      	blx	r7
 800f228:	3001      	adds	r0, #1
 800f22a:	f43f ae38 	beq.w	800ee9e <_printf_float+0xc2>
 800f22e:	f108 0801 	add.w	r8, r8, #1
 800f232:	68e3      	ldr	r3, [r4, #12]
 800f234:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f236:	1a5b      	subs	r3, r3, r1
 800f238:	4543      	cmp	r3, r8
 800f23a:	dcf0      	bgt.n	800f21e <_printf_float+0x442>
 800f23c:	e6fa      	b.n	800f034 <_printf_float+0x258>
 800f23e:	f04f 0800 	mov.w	r8, #0
 800f242:	f104 0919 	add.w	r9, r4, #25
 800f246:	e7f4      	b.n	800f232 <_printf_float+0x456>

0800f248 <_printf_common>:
 800f248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f24c:	4616      	mov	r6, r2
 800f24e:	4699      	mov	r9, r3
 800f250:	688a      	ldr	r2, [r1, #8]
 800f252:	690b      	ldr	r3, [r1, #16]
 800f254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f258:	4293      	cmp	r3, r2
 800f25a:	bfb8      	it	lt
 800f25c:	4613      	movlt	r3, r2
 800f25e:	6033      	str	r3, [r6, #0]
 800f260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f264:	4607      	mov	r7, r0
 800f266:	460c      	mov	r4, r1
 800f268:	b10a      	cbz	r2, 800f26e <_printf_common+0x26>
 800f26a:	3301      	adds	r3, #1
 800f26c:	6033      	str	r3, [r6, #0]
 800f26e:	6823      	ldr	r3, [r4, #0]
 800f270:	0699      	lsls	r1, r3, #26
 800f272:	bf42      	ittt	mi
 800f274:	6833      	ldrmi	r3, [r6, #0]
 800f276:	3302      	addmi	r3, #2
 800f278:	6033      	strmi	r3, [r6, #0]
 800f27a:	6825      	ldr	r5, [r4, #0]
 800f27c:	f015 0506 	ands.w	r5, r5, #6
 800f280:	d106      	bne.n	800f290 <_printf_common+0x48>
 800f282:	f104 0a19 	add.w	sl, r4, #25
 800f286:	68e3      	ldr	r3, [r4, #12]
 800f288:	6832      	ldr	r2, [r6, #0]
 800f28a:	1a9b      	subs	r3, r3, r2
 800f28c:	42ab      	cmp	r3, r5
 800f28e:	dc26      	bgt.n	800f2de <_printf_common+0x96>
 800f290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f294:	1e13      	subs	r3, r2, #0
 800f296:	6822      	ldr	r2, [r4, #0]
 800f298:	bf18      	it	ne
 800f29a:	2301      	movne	r3, #1
 800f29c:	0692      	lsls	r2, r2, #26
 800f29e:	d42b      	bmi.n	800f2f8 <_printf_common+0xb0>
 800f2a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2a4:	4649      	mov	r1, r9
 800f2a6:	4638      	mov	r0, r7
 800f2a8:	47c0      	blx	r8
 800f2aa:	3001      	adds	r0, #1
 800f2ac:	d01e      	beq.n	800f2ec <_printf_common+0xa4>
 800f2ae:	6823      	ldr	r3, [r4, #0]
 800f2b0:	68e5      	ldr	r5, [r4, #12]
 800f2b2:	6832      	ldr	r2, [r6, #0]
 800f2b4:	f003 0306 	and.w	r3, r3, #6
 800f2b8:	2b04      	cmp	r3, #4
 800f2ba:	bf08      	it	eq
 800f2bc:	1aad      	subeq	r5, r5, r2
 800f2be:	68a3      	ldr	r3, [r4, #8]
 800f2c0:	6922      	ldr	r2, [r4, #16]
 800f2c2:	bf0c      	ite	eq
 800f2c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f2c8:	2500      	movne	r5, #0
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	bfc4      	itt	gt
 800f2ce:	1a9b      	subgt	r3, r3, r2
 800f2d0:	18ed      	addgt	r5, r5, r3
 800f2d2:	2600      	movs	r6, #0
 800f2d4:	341a      	adds	r4, #26
 800f2d6:	42b5      	cmp	r5, r6
 800f2d8:	d11a      	bne.n	800f310 <_printf_common+0xc8>
 800f2da:	2000      	movs	r0, #0
 800f2dc:	e008      	b.n	800f2f0 <_printf_common+0xa8>
 800f2de:	2301      	movs	r3, #1
 800f2e0:	4652      	mov	r2, sl
 800f2e2:	4649      	mov	r1, r9
 800f2e4:	4638      	mov	r0, r7
 800f2e6:	47c0      	blx	r8
 800f2e8:	3001      	adds	r0, #1
 800f2ea:	d103      	bne.n	800f2f4 <_printf_common+0xac>
 800f2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2f4:	3501      	adds	r5, #1
 800f2f6:	e7c6      	b.n	800f286 <_printf_common+0x3e>
 800f2f8:	18e1      	adds	r1, r4, r3
 800f2fa:	1c5a      	adds	r2, r3, #1
 800f2fc:	2030      	movs	r0, #48	; 0x30
 800f2fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f302:	4422      	add	r2, r4
 800f304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f30c:	3302      	adds	r3, #2
 800f30e:	e7c7      	b.n	800f2a0 <_printf_common+0x58>
 800f310:	2301      	movs	r3, #1
 800f312:	4622      	mov	r2, r4
 800f314:	4649      	mov	r1, r9
 800f316:	4638      	mov	r0, r7
 800f318:	47c0      	blx	r8
 800f31a:	3001      	adds	r0, #1
 800f31c:	d0e6      	beq.n	800f2ec <_printf_common+0xa4>
 800f31e:	3601      	adds	r6, #1
 800f320:	e7d9      	b.n	800f2d6 <_printf_common+0x8e>
	...

0800f324 <_printf_i>:
 800f324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f328:	7e0f      	ldrb	r7, [r1, #24]
 800f32a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f32c:	2f78      	cmp	r7, #120	; 0x78
 800f32e:	4691      	mov	r9, r2
 800f330:	4680      	mov	r8, r0
 800f332:	460c      	mov	r4, r1
 800f334:	469a      	mov	sl, r3
 800f336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f33a:	d807      	bhi.n	800f34c <_printf_i+0x28>
 800f33c:	2f62      	cmp	r7, #98	; 0x62
 800f33e:	d80a      	bhi.n	800f356 <_printf_i+0x32>
 800f340:	2f00      	cmp	r7, #0
 800f342:	f000 80d8 	beq.w	800f4f6 <_printf_i+0x1d2>
 800f346:	2f58      	cmp	r7, #88	; 0x58
 800f348:	f000 80a3 	beq.w	800f492 <_printf_i+0x16e>
 800f34c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f354:	e03a      	b.n	800f3cc <_printf_i+0xa8>
 800f356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f35a:	2b15      	cmp	r3, #21
 800f35c:	d8f6      	bhi.n	800f34c <_printf_i+0x28>
 800f35e:	a101      	add	r1, pc, #4	; (adr r1, 800f364 <_printf_i+0x40>)
 800f360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f364:	0800f3bd 	.word	0x0800f3bd
 800f368:	0800f3d1 	.word	0x0800f3d1
 800f36c:	0800f34d 	.word	0x0800f34d
 800f370:	0800f34d 	.word	0x0800f34d
 800f374:	0800f34d 	.word	0x0800f34d
 800f378:	0800f34d 	.word	0x0800f34d
 800f37c:	0800f3d1 	.word	0x0800f3d1
 800f380:	0800f34d 	.word	0x0800f34d
 800f384:	0800f34d 	.word	0x0800f34d
 800f388:	0800f34d 	.word	0x0800f34d
 800f38c:	0800f34d 	.word	0x0800f34d
 800f390:	0800f4dd 	.word	0x0800f4dd
 800f394:	0800f401 	.word	0x0800f401
 800f398:	0800f4bf 	.word	0x0800f4bf
 800f39c:	0800f34d 	.word	0x0800f34d
 800f3a0:	0800f34d 	.word	0x0800f34d
 800f3a4:	0800f4ff 	.word	0x0800f4ff
 800f3a8:	0800f34d 	.word	0x0800f34d
 800f3ac:	0800f401 	.word	0x0800f401
 800f3b0:	0800f34d 	.word	0x0800f34d
 800f3b4:	0800f34d 	.word	0x0800f34d
 800f3b8:	0800f4c7 	.word	0x0800f4c7
 800f3bc:	682b      	ldr	r3, [r5, #0]
 800f3be:	1d1a      	adds	r2, r3, #4
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	602a      	str	r2, [r5, #0]
 800f3c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	e0a3      	b.n	800f518 <_printf_i+0x1f4>
 800f3d0:	6820      	ldr	r0, [r4, #0]
 800f3d2:	6829      	ldr	r1, [r5, #0]
 800f3d4:	0606      	lsls	r6, r0, #24
 800f3d6:	f101 0304 	add.w	r3, r1, #4
 800f3da:	d50a      	bpl.n	800f3f2 <_printf_i+0xce>
 800f3dc:	680e      	ldr	r6, [r1, #0]
 800f3de:	602b      	str	r3, [r5, #0]
 800f3e0:	2e00      	cmp	r6, #0
 800f3e2:	da03      	bge.n	800f3ec <_printf_i+0xc8>
 800f3e4:	232d      	movs	r3, #45	; 0x2d
 800f3e6:	4276      	negs	r6, r6
 800f3e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3ec:	485e      	ldr	r0, [pc, #376]	; (800f568 <_printf_i+0x244>)
 800f3ee:	230a      	movs	r3, #10
 800f3f0:	e019      	b.n	800f426 <_printf_i+0x102>
 800f3f2:	680e      	ldr	r6, [r1, #0]
 800f3f4:	602b      	str	r3, [r5, #0]
 800f3f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f3fa:	bf18      	it	ne
 800f3fc:	b236      	sxthne	r6, r6
 800f3fe:	e7ef      	b.n	800f3e0 <_printf_i+0xbc>
 800f400:	682b      	ldr	r3, [r5, #0]
 800f402:	6820      	ldr	r0, [r4, #0]
 800f404:	1d19      	adds	r1, r3, #4
 800f406:	6029      	str	r1, [r5, #0]
 800f408:	0601      	lsls	r1, r0, #24
 800f40a:	d501      	bpl.n	800f410 <_printf_i+0xec>
 800f40c:	681e      	ldr	r6, [r3, #0]
 800f40e:	e002      	b.n	800f416 <_printf_i+0xf2>
 800f410:	0646      	lsls	r6, r0, #25
 800f412:	d5fb      	bpl.n	800f40c <_printf_i+0xe8>
 800f414:	881e      	ldrh	r6, [r3, #0]
 800f416:	4854      	ldr	r0, [pc, #336]	; (800f568 <_printf_i+0x244>)
 800f418:	2f6f      	cmp	r7, #111	; 0x6f
 800f41a:	bf0c      	ite	eq
 800f41c:	2308      	moveq	r3, #8
 800f41e:	230a      	movne	r3, #10
 800f420:	2100      	movs	r1, #0
 800f422:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f426:	6865      	ldr	r5, [r4, #4]
 800f428:	60a5      	str	r5, [r4, #8]
 800f42a:	2d00      	cmp	r5, #0
 800f42c:	bfa2      	ittt	ge
 800f42e:	6821      	ldrge	r1, [r4, #0]
 800f430:	f021 0104 	bicge.w	r1, r1, #4
 800f434:	6021      	strge	r1, [r4, #0]
 800f436:	b90e      	cbnz	r6, 800f43c <_printf_i+0x118>
 800f438:	2d00      	cmp	r5, #0
 800f43a:	d04d      	beq.n	800f4d8 <_printf_i+0x1b4>
 800f43c:	4615      	mov	r5, r2
 800f43e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f442:	fb03 6711 	mls	r7, r3, r1, r6
 800f446:	5dc7      	ldrb	r7, [r0, r7]
 800f448:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f44c:	4637      	mov	r7, r6
 800f44e:	42bb      	cmp	r3, r7
 800f450:	460e      	mov	r6, r1
 800f452:	d9f4      	bls.n	800f43e <_printf_i+0x11a>
 800f454:	2b08      	cmp	r3, #8
 800f456:	d10b      	bne.n	800f470 <_printf_i+0x14c>
 800f458:	6823      	ldr	r3, [r4, #0]
 800f45a:	07de      	lsls	r6, r3, #31
 800f45c:	d508      	bpl.n	800f470 <_printf_i+0x14c>
 800f45e:	6923      	ldr	r3, [r4, #16]
 800f460:	6861      	ldr	r1, [r4, #4]
 800f462:	4299      	cmp	r1, r3
 800f464:	bfde      	ittt	le
 800f466:	2330      	movle	r3, #48	; 0x30
 800f468:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f46c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f470:	1b52      	subs	r2, r2, r5
 800f472:	6122      	str	r2, [r4, #16]
 800f474:	f8cd a000 	str.w	sl, [sp]
 800f478:	464b      	mov	r3, r9
 800f47a:	aa03      	add	r2, sp, #12
 800f47c:	4621      	mov	r1, r4
 800f47e:	4640      	mov	r0, r8
 800f480:	f7ff fee2 	bl	800f248 <_printf_common>
 800f484:	3001      	adds	r0, #1
 800f486:	d14c      	bne.n	800f522 <_printf_i+0x1fe>
 800f488:	f04f 30ff 	mov.w	r0, #4294967295
 800f48c:	b004      	add	sp, #16
 800f48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f492:	4835      	ldr	r0, [pc, #212]	; (800f568 <_printf_i+0x244>)
 800f494:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f498:	6829      	ldr	r1, [r5, #0]
 800f49a:	6823      	ldr	r3, [r4, #0]
 800f49c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f4a0:	6029      	str	r1, [r5, #0]
 800f4a2:	061d      	lsls	r5, r3, #24
 800f4a4:	d514      	bpl.n	800f4d0 <_printf_i+0x1ac>
 800f4a6:	07df      	lsls	r7, r3, #31
 800f4a8:	bf44      	itt	mi
 800f4aa:	f043 0320 	orrmi.w	r3, r3, #32
 800f4ae:	6023      	strmi	r3, [r4, #0]
 800f4b0:	b91e      	cbnz	r6, 800f4ba <_printf_i+0x196>
 800f4b2:	6823      	ldr	r3, [r4, #0]
 800f4b4:	f023 0320 	bic.w	r3, r3, #32
 800f4b8:	6023      	str	r3, [r4, #0]
 800f4ba:	2310      	movs	r3, #16
 800f4bc:	e7b0      	b.n	800f420 <_printf_i+0xfc>
 800f4be:	6823      	ldr	r3, [r4, #0]
 800f4c0:	f043 0320 	orr.w	r3, r3, #32
 800f4c4:	6023      	str	r3, [r4, #0]
 800f4c6:	2378      	movs	r3, #120	; 0x78
 800f4c8:	4828      	ldr	r0, [pc, #160]	; (800f56c <_printf_i+0x248>)
 800f4ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f4ce:	e7e3      	b.n	800f498 <_printf_i+0x174>
 800f4d0:	0659      	lsls	r1, r3, #25
 800f4d2:	bf48      	it	mi
 800f4d4:	b2b6      	uxthmi	r6, r6
 800f4d6:	e7e6      	b.n	800f4a6 <_printf_i+0x182>
 800f4d8:	4615      	mov	r5, r2
 800f4da:	e7bb      	b.n	800f454 <_printf_i+0x130>
 800f4dc:	682b      	ldr	r3, [r5, #0]
 800f4de:	6826      	ldr	r6, [r4, #0]
 800f4e0:	6961      	ldr	r1, [r4, #20]
 800f4e2:	1d18      	adds	r0, r3, #4
 800f4e4:	6028      	str	r0, [r5, #0]
 800f4e6:	0635      	lsls	r5, r6, #24
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	d501      	bpl.n	800f4f0 <_printf_i+0x1cc>
 800f4ec:	6019      	str	r1, [r3, #0]
 800f4ee:	e002      	b.n	800f4f6 <_printf_i+0x1d2>
 800f4f0:	0670      	lsls	r0, r6, #25
 800f4f2:	d5fb      	bpl.n	800f4ec <_printf_i+0x1c8>
 800f4f4:	8019      	strh	r1, [r3, #0]
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	6123      	str	r3, [r4, #16]
 800f4fa:	4615      	mov	r5, r2
 800f4fc:	e7ba      	b.n	800f474 <_printf_i+0x150>
 800f4fe:	682b      	ldr	r3, [r5, #0]
 800f500:	1d1a      	adds	r2, r3, #4
 800f502:	602a      	str	r2, [r5, #0]
 800f504:	681d      	ldr	r5, [r3, #0]
 800f506:	6862      	ldr	r2, [r4, #4]
 800f508:	2100      	movs	r1, #0
 800f50a:	4628      	mov	r0, r5
 800f50c:	f7f0 fe88 	bl	8000220 <memchr>
 800f510:	b108      	cbz	r0, 800f516 <_printf_i+0x1f2>
 800f512:	1b40      	subs	r0, r0, r5
 800f514:	6060      	str	r0, [r4, #4]
 800f516:	6863      	ldr	r3, [r4, #4]
 800f518:	6123      	str	r3, [r4, #16]
 800f51a:	2300      	movs	r3, #0
 800f51c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f520:	e7a8      	b.n	800f474 <_printf_i+0x150>
 800f522:	6923      	ldr	r3, [r4, #16]
 800f524:	462a      	mov	r2, r5
 800f526:	4649      	mov	r1, r9
 800f528:	4640      	mov	r0, r8
 800f52a:	47d0      	blx	sl
 800f52c:	3001      	adds	r0, #1
 800f52e:	d0ab      	beq.n	800f488 <_printf_i+0x164>
 800f530:	6823      	ldr	r3, [r4, #0]
 800f532:	079b      	lsls	r3, r3, #30
 800f534:	d413      	bmi.n	800f55e <_printf_i+0x23a>
 800f536:	68e0      	ldr	r0, [r4, #12]
 800f538:	9b03      	ldr	r3, [sp, #12]
 800f53a:	4298      	cmp	r0, r3
 800f53c:	bfb8      	it	lt
 800f53e:	4618      	movlt	r0, r3
 800f540:	e7a4      	b.n	800f48c <_printf_i+0x168>
 800f542:	2301      	movs	r3, #1
 800f544:	4632      	mov	r2, r6
 800f546:	4649      	mov	r1, r9
 800f548:	4640      	mov	r0, r8
 800f54a:	47d0      	blx	sl
 800f54c:	3001      	adds	r0, #1
 800f54e:	d09b      	beq.n	800f488 <_printf_i+0x164>
 800f550:	3501      	adds	r5, #1
 800f552:	68e3      	ldr	r3, [r4, #12]
 800f554:	9903      	ldr	r1, [sp, #12]
 800f556:	1a5b      	subs	r3, r3, r1
 800f558:	42ab      	cmp	r3, r5
 800f55a:	dcf2      	bgt.n	800f542 <_printf_i+0x21e>
 800f55c:	e7eb      	b.n	800f536 <_printf_i+0x212>
 800f55e:	2500      	movs	r5, #0
 800f560:	f104 0619 	add.w	r6, r4, #25
 800f564:	e7f5      	b.n	800f552 <_printf_i+0x22e>
 800f566:	bf00      	nop
 800f568:	08014f54 	.word	0x08014f54
 800f56c:	08014f65 	.word	0x08014f65

0800f570 <_scanf_float>:
 800f570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f574:	b087      	sub	sp, #28
 800f576:	4617      	mov	r7, r2
 800f578:	9303      	str	r3, [sp, #12]
 800f57a:	688b      	ldr	r3, [r1, #8]
 800f57c:	1e5a      	subs	r2, r3, #1
 800f57e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f582:	bf83      	ittte	hi
 800f584:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f588:	195b      	addhi	r3, r3, r5
 800f58a:	9302      	strhi	r3, [sp, #8]
 800f58c:	2300      	movls	r3, #0
 800f58e:	bf86      	itte	hi
 800f590:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f594:	608b      	strhi	r3, [r1, #8]
 800f596:	9302      	strls	r3, [sp, #8]
 800f598:	680b      	ldr	r3, [r1, #0]
 800f59a:	468b      	mov	fp, r1
 800f59c:	2500      	movs	r5, #0
 800f59e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f5a2:	f84b 3b1c 	str.w	r3, [fp], #28
 800f5a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f5aa:	4680      	mov	r8, r0
 800f5ac:	460c      	mov	r4, r1
 800f5ae:	465e      	mov	r6, fp
 800f5b0:	46aa      	mov	sl, r5
 800f5b2:	46a9      	mov	r9, r5
 800f5b4:	9501      	str	r5, [sp, #4]
 800f5b6:	68a2      	ldr	r2, [r4, #8]
 800f5b8:	b152      	cbz	r2, 800f5d0 <_scanf_float+0x60>
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	2b4e      	cmp	r3, #78	; 0x4e
 800f5c0:	d864      	bhi.n	800f68c <_scanf_float+0x11c>
 800f5c2:	2b40      	cmp	r3, #64	; 0x40
 800f5c4:	d83c      	bhi.n	800f640 <_scanf_float+0xd0>
 800f5c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f5ca:	b2c8      	uxtb	r0, r1
 800f5cc:	280e      	cmp	r0, #14
 800f5ce:	d93a      	bls.n	800f646 <_scanf_float+0xd6>
 800f5d0:	f1b9 0f00 	cmp.w	r9, #0
 800f5d4:	d003      	beq.n	800f5de <_scanf_float+0x6e>
 800f5d6:	6823      	ldr	r3, [r4, #0]
 800f5d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f5dc:	6023      	str	r3, [r4, #0]
 800f5de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5e2:	f1ba 0f01 	cmp.w	sl, #1
 800f5e6:	f200 8113 	bhi.w	800f810 <_scanf_float+0x2a0>
 800f5ea:	455e      	cmp	r6, fp
 800f5ec:	f200 8105 	bhi.w	800f7fa <_scanf_float+0x28a>
 800f5f0:	2501      	movs	r5, #1
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	b007      	add	sp, #28
 800f5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f5fe:	2a0d      	cmp	r2, #13
 800f600:	d8e6      	bhi.n	800f5d0 <_scanf_float+0x60>
 800f602:	a101      	add	r1, pc, #4	; (adr r1, 800f608 <_scanf_float+0x98>)
 800f604:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f608:	0800f747 	.word	0x0800f747
 800f60c:	0800f5d1 	.word	0x0800f5d1
 800f610:	0800f5d1 	.word	0x0800f5d1
 800f614:	0800f5d1 	.word	0x0800f5d1
 800f618:	0800f7a7 	.word	0x0800f7a7
 800f61c:	0800f77f 	.word	0x0800f77f
 800f620:	0800f5d1 	.word	0x0800f5d1
 800f624:	0800f5d1 	.word	0x0800f5d1
 800f628:	0800f755 	.word	0x0800f755
 800f62c:	0800f5d1 	.word	0x0800f5d1
 800f630:	0800f5d1 	.word	0x0800f5d1
 800f634:	0800f5d1 	.word	0x0800f5d1
 800f638:	0800f5d1 	.word	0x0800f5d1
 800f63c:	0800f70d 	.word	0x0800f70d
 800f640:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f644:	e7db      	b.n	800f5fe <_scanf_float+0x8e>
 800f646:	290e      	cmp	r1, #14
 800f648:	d8c2      	bhi.n	800f5d0 <_scanf_float+0x60>
 800f64a:	a001      	add	r0, pc, #4	; (adr r0, 800f650 <_scanf_float+0xe0>)
 800f64c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f650:	0800f6ff 	.word	0x0800f6ff
 800f654:	0800f5d1 	.word	0x0800f5d1
 800f658:	0800f6ff 	.word	0x0800f6ff
 800f65c:	0800f793 	.word	0x0800f793
 800f660:	0800f5d1 	.word	0x0800f5d1
 800f664:	0800f6ad 	.word	0x0800f6ad
 800f668:	0800f6e9 	.word	0x0800f6e9
 800f66c:	0800f6e9 	.word	0x0800f6e9
 800f670:	0800f6e9 	.word	0x0800f6e9
 800f674:	0800f6e9 	.word	0x0800f6e9
 800f678:	0800f6e9 	.word	0x0800f6e9
 800f67c:	0800f6e9 	.word	0x0800f6e9
 800f680:	0800f6e9 	.word	0x0800f6e9
 800f684:	0800f6e9 	.word	0x0800f6e9
 800f688:	0800f6e9 	.word	0x0800f6e9
 800f68c:	2b6e      	cmp	r3, #110	; 0x6e
 800f68e:	d809      	bhi.n	800f6a4 <_scanf_float+0x134>
 800f690:	2b60      	cmp	r3, #96	; 0x60
 800f692:	d8b2      	bhi.n	800f5fa <_scanf_float+0x8a>
 800f694:	2b54      	cmp	r3, #84	; 0x54
 800f696:	d077      	beq.n	800f788 <_scanf_float+0x218>
 800f698:	2b59      	cmp	r3, #89	; 0x59
 800f69a:	d199      	bne.n	800f5d0 <_scanf_float+0x60>
 800f69c:	2d07      	cmp	r5, #7
 800f69e:	d197      	bne.n	800f5d0 <_scanf_float+0x60>
 800f6a0:	2508      	movs	r5, #8
 800f6a2:	e029      	b.n	800f6f8 <_scanf_float+0x188>
 800f6a4:	2b74      	cmp	r3, #116	; 0x74
 800f6a6:	d06f      	beq.n	800f788 <_scanf_float+0x218>
 800f6a8:	2b79      	cmp	r3, #121	; 0x79
 800f6aa:	e7f6      	b.n	800f69a <_scanf_float+0x12a>
 800f6ac:	6821      	ldr	r1, [r4, #0]
 800f6ae:	05c8      	lsls	r0, r1, #23
 800f6b0:	d51a      	bpl.n	800f6e8 <_scanf_float+0x178>
 800f6b2:	9b02      	ldr	r3, [sp, #8]
 800f6b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f6b8:	6021      	str	r1, [r4, #0]
 800f6ba:	f109 0901 	add.w	r9, r9, #1
 800f6be:	b11b      	cbz	r3, 800f6c8 <_scanf_float+0x158>
 800f6c0:	3b01      	subs	r3, #1
 800f6c2:	3201      	adds	r2, #1
 800f6c4:	9302      	str	r3, [sp, #8]
 800f6c6:	60a2      	str	r2, [r4, #8]
 800f6c8:	68a3      	ldr	r3, [r4, #8]
 800f6ca:	3b01      	subs	r3, #1
 800f6cc:	60a3      	str	r3, [r4, #8]
 800f6ce:	6923      	ldr	r3, [r4, #16]
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	6123      	str	r3, [r4, #16]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	3b01      	subs	r3, #1
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	607b      	str	r3, [r7, #4]
 800f6dc:	f340 8084 	ble.w	800f7e8 <_scanf_float+0x278>
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	603b      	str	r3, [r7, #0]
 800f6e6:	e766      	b.n	800f5b6 <_scanf_float+0x46>
 800f6e8:	eb1a 0f05 	cmn.w	sl, r5
 800f6ec:	f47f af70 	bne.w	800f5d0 <_scanf_float+0x60>
 800f6f0:	6822      	ldr	r2, [r4, #0]
 800f6f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f6f6:	6022      	str	r2, [r4, #0]
 800f6f8:	f806 3b01 	strb.w	r3, [r6], #1
 800f6fc:	e7e4      	b.n	800f6c8 <_scanf_float+0x158>
 800f6fe:	6822      	ldr	r2, [r4, #0]
 800f700:	0610      	lsls	r0, r2, #24
 800f702:	f57f af65 	bpl.w	800f5d0 <_scanf_float+0x60>
 800f706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f70a:	e7f4      	b.n	800f6f6 <_scanf_float+0x186>
 800f70c:	f1ba 0f00 	cmp.w	sl, #0
 800f710:	d10e      	bne.n	800f730 <_scanf_float+0x1c0>
 800f712:	f1b9 0f00 	cmp.w	r9, #0
 800f716:	d10e      	bne.n	800f736 <_scanf_float+0x1c6>
 800f718:	6822      	ldr	r2, [r4, #0]
 800f71a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f71e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f722:	d108      	bne.n	800f736 <_scanf_float+0x1c6>
 800f724:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f728:	6022      	str	r2, [r4, #0]
 800f72a:	f04f 0a01 	mov.w	sl, #1
 800f72e:	e7e3      	b.n	800f6f8 <_scanf_float+0x188>
 800f730:	f1ba 0f02 	cmp.w	sl, #2
 800f734:	d055      	beq.n	800f7e2 <_scanf_float+0x272>
 800f736:	2d01      	cmp	r5, #1
 800f738:	d002      	beq.n	800f740 <_scanf_float+0x1d0>
 800f73a:	2d04      	cmp	r5, #4
 800f73c:	f47f af48 	bne.w	800f5d0 <_scanf_float+0x60>
 800f740:	3501      	adds	r5, #1
 800f742:	b2ed      	uxtb	r5, r5
 800f744:	e7d8      	b.n	800f6f8 <_scanf_float+0x188>
 800f746:	f1ba 0f01 	cmp.w	sl, #1
 800f74a:	f47f af41 	bne.w	800f5d0 <_scanf_float+0x60>
 800f74e:	f04f 0a02 	mov.w	sl, #2
 800f752:	e7d1      	b.n	800f6f8 <_scanf_float+0x188>
 800f754:	b97d      	cbnz	r5, 800f776 <_scanf_float+0x206>
 800f756:	f1b9 0f00 	cmp.w	r9, #0
 800f75a:	f47f af3c 	bne.w	800f5d6 <_scanf_float+0x66>
 800f75e:	6822      	ldr	r2, [r4, #0]
 800f760:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f764:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f768:	f47f af39 	bne.w	800f5de <_scanf_float+0x6e>
 800f76c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f770:	6022      	str	r2, [r4, #0]
 800f772:	2501      	movs	r5, #1
 800f774:	e7c0      	b.n	800f6f8 <_scanf_float+0x188>
 800f776:	2d03      	cmp	r5, #3
 800f778:	d0e2      	beq.n	800f740 <_scanf_float+0x1d0>
 800f77a:	2d05      	cmp	r5, #5
 800f77c:	e7de      	b.n	800f73c <_scanf_float+0x1cc>
 800f77e:	2d02      	cmp	r5, #2
 800f780:	f47f af26 	bne.w	800f5d0 <_scanf_float+0x60>
 800f784:	2503      	movs	r5, #3
 800f786:	e7b7      	b.n	800f6f8 <_scanf_float+0x188>
 800f788:	2d06      	cmp	r5, #6
 800f78a:	f47f af21 	bne.w	800f5d0 <_scanf_float+0x60>
 800f78e:	2507      	movs	r5, #7
 800f790:	e7b2      	b.n	800f6f8 <_scanf_float+0x188>
 800f792:	6822      	ldr	r2, [r4, #0]
 800f794:	0591      	lsls	r1, r2, #22
 800f796:	f57f af1b 	bpl.w	800f5d0 <_scanf_float+0x60>
 800f79a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f79e:	6022      	str	r2, [r4, #0]
 800f7a0:	f8cd 9004 	str.w	r9, [sp, #4]
 800f7a4:	e7a8      	b.n	800f6f8 <_scanf_float+0x188>
 800f7a6:	6822      	ldr	r2, [r4, #0]
 800f7a8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f7ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f7b0:	d006      	beq.n	800f7c0 <_scanf_float+0x250>
 800f7b2:	0550      	lsls	r0, r2, #21
 800f7b4:	f57f af0c 	bpl.w	800f5d0 <_scanf_float+0x60>
 800f7b8:	f1b9 0f00 	cmp.w	r9, #0
 800f7bc:	f43f af0f 	beq.w	800f5de <_scanf_float+0x6e>
 800f7c0:	0591      	lsls	r1, r2, #22
 800f7c2:	bf58      	it	pl
 800f7c4:	9901      	ldrpl	r1, [sp, #4]
 800f7c6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f7ca:	bf58      	it	pl
 800f7cc:	eba9 0101 	subpl.w	r1, r9, r1
 800f7d0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f7d4:	bf58      	it	pl
 800f7d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f7da:	6022      	str	r2, [r4, #0]
 800f7dc:	f04f 0900 	mov.w	r9, #0
 800f7e0:	e78a      	b.n	800f6f8 <_scanf_float+0x188>
 800f7e2:	f04f 0a03 	mov.w	sl, #3
 800f7e6:	e787      	b.n	800f6f8 <_scanf_float+0x188>
 800f7e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f7ec:	4639      	mov	r1, r7
 800f7ee:	4640      	mov	r0, r8
 800f7f0:	4798      	blx	r3
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	f43f aedf 	beq.w	800f5b6 <_scanf_float+0x46>
 800f7f8:	e6ea      	b.n	800f5d0 <_scanf_float+0x60>
 800f7fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f7fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f802:	463a      	mov	r2, r7
 800f804:	4640      	mov	r0, r8
 800f806:	4798      	blx	r3
 800f808:	6923      	ldr	r3, [r4, #16]
 800f80a:	3b01      	subs	r3, #1
 800f80c:	6123      	str	r3, [r4, #16]
 800f80e:	e6ec      	b.n	800f5ea <_scanf_float+0x7a>
 800f810:	1e6b      	subs	r3, r5, #1
 800f812:	2b06      	cmp	r3, #6
 800f814:	d825      	bhi.n	800f862 <_scanf_float+0x2f2>
 800f816:	2d02      	cmp	r5, #2
 800f818:	d836      	bhi.n	800f888 <_scanf_float+0x318>
 800f81a:	455e      	cmp	r6, fp
 800f81c:	f67f aee8 	bls.w	800f5f0 <_scanf_float+0x80>
 800f820:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f824:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f828:	463a      	mov	r2, r7
 800f82a:	4640      	mov	r0, r8
 800f82c:	4798      	blx	r3
 800f82e:	6923      	ldr	r3, [r4, #16]
 800f830:	3b01      	subs	r3, #1
 800f832:	6123      	str	r3, [r4, #16]
 800f834:	e7f1      	b.n	800f81a <_scanf_float+0x2aa>
 800f836:	9802      	ldr	r0, [sp, #8]
 800f838:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f83c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f840:	9002      	str	r0, [sp, #8]
 800f842:	463a      	mov	r2, r7
 800f844:	4640      	mov	r0, r8
 800f846:	4798      	blx	r3
 800f848:	6923      	ldr	r3, [r4, #16]
 800f84a:	3b01      	subs	r3, #1
 800f84c:	6123      	str	r3, [r4, #16]
 800f84e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f852:	fa5f fa8a 	uxtb.w	sl, sl
 800f856:	f1ba 0f02 	cmp.w	sl, #2
 800f85a:	d1ec      	bne.n	800f836 <_scanf_float+0x2c6>
 800f85c:	3d03      	subs	r5, #3
 800f85e:	b2ed      	uxtb	r5, r5
 800f860:	1b76      	subs	r6, r6, r5
 800f862:	6823      	ldr	r3, [r4, #0]
 800f864:	05da      	lsls	r2, r3, #23
 800f866:	d52f      	bpl.n	800f8c8 <_scanf_float+0x358>
 800f868:	055b      	lsls	r3, r3, #21
 800f86a:	d510      	bpl.n	800f88e <_scanf_float+0x31e>
 800f86c:	455e      	cmp	r6, fp
 800f86e:	f67f aebf 	bls.w	800f5f0 <_scanf_float+0x80>
 800f872:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f876:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f87a:	463a      	mov	r2, r7
 800f87c:	4640      	mov	r0, r8
 800f87e:	4798      	blx	r3
 800f880:	6923      	ldr	r3, [r4, #16]
 800f882:	3b01      	subs	r3, #1
 800f884:	6123      	str	r3, [r4, #16]
 800f886:	e7f1      	b.n	800f86c <_scanf_float+0x2fc>
 800f888:	46aa      	mov	sl, r5
 800f88a:	9602      	str	r6, [sp, #8]
 800f88c:	e7df      	b.n	800f84e <_scanf_float+0x2de>
 800f88e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f892:	6923      	ldr	r3, [r4, #16]
 800f894:	2965      	cmp	r1, #101	; 0x65
 800f896:	f103 33ff 	add.w	r3, r3, #4294967295
 800f89a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f89e:	6123      	str	r3, [r4, #16]
 800f8a0:	d00c      	beq.n	800f8bc <_scanf_float+0x34c>
 800f8a2:	2945      	cmp	r1, #69	; 0x45
 800f8a4:	d00a      	beq.n	800f8bc <_scanf_float+0x34c>
 800f8a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f8aa:	463a      	mov	r2, r7
 800f8ac:	4640      	mov	r0, r8
 800f8ae:	4798      	blx	r3
 800f8b0:	6923      	ldr	r3, [r4, #16]
 800f8b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f8b6:	3b01      	subs	r3, #1
 800f8b8:	1eb5      	subs	r5, r6, #2
 800f8ba:	6123      	str	r3, [r4, #16]
 800f8bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f8c0:	463a      	mov	r2, r7
 800f8c2:	4640      	mov	r0, r8
 800f8c4:	4798      	blx	r3
 800f8c6:	462e      	mov	r6, r5
 800f8c8:	6825      	ldr	r5, [r4, #0]
 800f8ca:	f015 0510 	ands.w	r5, r5, #16
 800f8ce:	d159      	bne.n	800f984 <_scanf_float+0x414>
 800f8d0:	7035      	strb	r5, [r6, #0]
 800f8d2:	6823      	ldr	r3, [r4, #0]
 800f8d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f8d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8dc:	d11b      	bne.n	800f916 <_scanf_float+0x3a6>
 800f8de:	9b01      	ldr	r3, [sp, #4]
 800f8e0:	454b      	cmp	r3, r9
 800f8e2:	eba3 0209 	sub.w	r2, r3, r9
 800f8e6:	d123      	bne.n	800f930 <_scanf_float+0x3c0>
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	4659      	mov	r1, fp
 800f8ec:	4640      	mov	r0, r8
 800f8ee:	f000 ffe1 	bl	80108b4 <_strtod_r>
 800f8f2:	6822      	ldr	r2, [r4, #0]
 800f8f4:	9b03      	ldr	r3, [sp, #12]
 800f8f6:	f012 0f02 	tst.w	r2, #2
 800f8fa:	ec57 6b10 	vmov	r6, r7, d0
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	d021      	beq.n	800f946 <_scanf_float+0x3d6>
 800f902:	9903      	ldr	r1, [sp, #12]
 800f904:	1d1a      	adds	r2, r3, #4
 800f906:	600a      	str	r2, [r1, #0]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	e9c3 6700 	strd	r6, r7, [r3]
 800f90e:	68e3      	ldr	r3, [r4, #12]
 800f910:	3301      	adds	r3, #1
 800f912:	60e3      	str	r3, [r4, #12]
 800f914:	e66d      	b.n	800f5f2 <_scanf_float+0x82>
 800f916:	9b04      	ldr	r3, [sp, #16]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d0e5      	beq.n	800f8e8 <_scanf_float+0x378>
 800f91c:	9905      	ldr	r1, [sp, #20]
 800f91e:	230a      	movs	r3, #10
 800f920:	462a      	mov	r2, r5
 800f922:	3101      	adds	r1, #1
 800f924:	4640      	mov	r0, r8
 800f926:	f001 f84d 	bl	80109c4 <_strtol_r>
 800f92a:	9b04      	ldr	r3, [sp, #16]
 800f92c:	9e05      	ldr	r6, [sp, #20]
 800f92e:	1ac2      	subs	r2, r0, r3
 800f930:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f934:	429e      	cmp	r6, r3
 800f936:	bf28      	it	cs
 800f938:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f93c:	4912      	ldr	r1, [pc, #72]	; (800f988 <_scanf_float+0x418>)
 800f93e:	4630      	mov	r0, r6
 800f940:	f000 f8ee 	bl	800fb20 <siprintf>
 800f944:	e7d0      	b.n	800f8e8 <_scanf_float+0x378>
 800f946:	9903      	ldr	r1, [sp, #12]
 800f948:	f012 0f04 	tst.w	r2, #4
 800f94c:	f103 0204 	add.w	r2, r3, #4
 800f950:	600a      	str	r2, [r1, #0]
 800f952:	d1d9      	bne.n	800f908 <_scanf_float+0x398>
 800f954:	f8d3 8000 	ldr.w	r8, [r3]
 800f958:	ee10 2a10 	vmov	r2, s0
 800f95c:	ee10 0a10 	vmov	r0, s0
 800f960:	463b      	mov	r3, r7
 800f962:	4639      	mov	r1, r7
 800f964:	f7f1 f902 	bl	8000b6c <__aeabi_dcmpun>
 800f968:	b128      	cbz	r0, 800f976 <_scanf_float+0x406>
 800f96a:	4808      	ldr	r0, [pc, #32]	; (800f98c <_scanf_float+0x41c>)
 800f96c:	f000 f89e 	bl	800faac <nanf>
 800f970:	ed88 0a00 	vstr	s0, [r8]
 800f974:	e7cb      	b.n	800f90e <_scanf_float+0x39e>
 800f976:	4630      	mov	r0, r6
 800f978:	4639      	mov	r1, r7
 800f97a:	f7f1 f955 	bl	8000c28 <__aeabi_d2f>
 800f97e:	f8c8 0000 	str.w	r0, [r8]
 800f982:	e7c4      	b.n	800f90e <_scanf_float+0x39e>
 800f984:	2500      	movs	r5, #0
 800f986:	e634      	b.n	800f5f2 <_scanf_float+0x82>
 800f988:	08014f76 	.word	0x08014f76
 800f98c:	080152fb 	.word	0x080152fb

0800f990 <iprintf>:
 800f990:	b40f      	push	{r0, r1, r2, r3}
 800f992:	4b0a      	ldr	r3, [pc, #40]	; (800f9bc <iprintf+0x2c>)
 800f994:	b513      	push	{r0, r1, r4, lr}
 800f996:	681c      	ldr	r4, [r3, #0]
 800f998:	b124      	cbz	r4, 800f9a4 <iprintf+0x14>
 800f99a:	69a3      	ldr	r3, [r4, #24]
 800f99c:	b913      	cbnz	r3, 800f9a4 <iprintf+0x14>
 800f99e:	4620      	mov	r0, r4
 800f9a0:	f002 f88a 	bl	8011ab8 <__sinit>
 800f9a4:	ab05      	add	r3, sp, #20
 800f9a6:	9a04      	ldr	r2, [sp, #16]
 800f9a8:	68a1      	ldr	r1, [r4, #8]
 800f9aa:	9301      	str	r3, [sp, #4]
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	f003 fe39 	bl	8013624 <_vfiprintf_r>
 800f9b2:	b002      	add	sp, #8
 800f9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9b8:	b004      	add	sp, #16
 800f9ba:	4770      	bx	lr
 800f9bc:	20000110 	.word	0x20000110

0800f9c0 <_puts_r>:
 800f9c0:	b570      	push	{r4, r5, r6, lr}
 800f9c2:	460e      	mov	r6, r1
 800f9c4:	4605      	mov	r5, r0
 800f9c6:	b118      	cbz	r0, 800f9d0 <_puts_r+0x10>
 800f9c8:	6983      	ldr	r3, [r0, #24]
 800f9ca:	b90b      	cbnz	r3, 800f9d0 <_puts_r+0x10>
 800f9cc:	f002 f874 	bl	8011ab8 <__sinit>
 800f9d0:	69ab      	ldr	r3, [r5, #24]
 800f9d2:	68ac      	ldr	r4, [r5, #8]
 800f9d4:	b913      	cbnz	r3, 800f9dc <_puts_r+0x1c>
 800f9d6:	4628      	mov	r0, r5
 800f9d8:	f002 f86e 	bl	8011ab8 <__sinit>
 800f9dc:	4b2c      	ldr	r3, [pc, #176]	; (800fa90 <_puts_r+0xd0>)
 800f9de:	429c      	cmp	r4, r3
 800f9e0:	d120      	bne.n	800fa24 <_puts_r+0x64>
 800f9e2:	686c      	ldr	r4, [r5, #4]
 800f9e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9e6:	07db      	lsls	r3, r3, #31
 800f9e8:	d405      	bmi.n	800f9f6 <_puts_r+0x36>
 800f9ea:	89a3      	ldrh	r3, [r4, #12]
 800f9ec:	0598      	lsls	r0, r3, #22
 800f9ee:	d402      	bmi.n	800f9f6 <_puts_r+0x36>
 800f9f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9f2:	f002 fc72 	bl	80122da <__retarget_lock_acquire_recursive>
 800f9f6:	89a3      	ldrh	r3, [r4, #12]
 800f9f8:	0719      	lsls	r1, r3, #28
 800f9fa:	d51d      	bpl.n	800fa38 <_puts_r+0x78>
 800f9fc:	6923      	ldr	r3, [r4, #16]
 800f9fe:	b1db      	cbz	r3, 800fa38 <_puts_r+0x78>
 800fa00:	3e01      	subs	r6, #1
 800fa02:	68a3      	ldr	r3, [r4, #8]
 800fa04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fa08:	3b01      	subs	r3, #1
 800fa0a:	60a3      	str	r3, [r4, #8]
 800fa0c:	bb39      	cbnz	r1, 800fa5e <_puts_r+0x9e>
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	da38      	bge.n	800fa84 <_puts_r+0xc4>
 800fa12:	4622      	mov	r2, r4
 800fa14:	210a      	movs	r1, #10
 800fa16:	4628      	mov	r0, r5
 800fa18:	f000 ffd6 	bl	80109c8 <__swbuf_r>
 800fa1c:	3001      	adds	r0, #1
 800fa1e:	d011      	beq.n	800fa44 <_puts_r+0x84>
 800fa20:	250a      	movs	r5, #10
 800fa22:	e011      	b.n	800fa48 <_puts_r+0x88>
 800fa24:	4b1b      	ldr	r3, [pc, #108]	; (800fa94 <_puts_r+0xd4>)
 800fa26:	429c      	cmp	r4, r3
 800fa28:	d101      	bne.n	800fa2e <_puts_r+0x6e>
 800fa2a:	68ac      	ldr	r4, [r5, #8]
 800fa2c:	e7da      	b.n	800f9e4 <_puts_r+0x24>
 800fa2e:	4b1a      	ldr	r3, [pc, #104]	; (800fa98 <_puts_r+0xd8>)
 800fa30:	429c      	cmp	r4, r3
 800fa32:	bf08      	it	eq
 800fa34:	68ec      	ldreq	r4, [r5, #12]
 800fa36:	e7d5      	b.n	800f9e4 <_puts_r+0x24>
 800fa38:	4621      	mov	r1, r4
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	f001 f828 	bl	8010a90 <__swsetup_r>
 800fa40:	2800      	cmp	r0, #0
 800fa42:	d0dd      	beq.n	800fa00 <_puts_r+0x40>
 800fa44:	f04f 35ff 	mov.w	r5, #4294967295
 800fa48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa4a:	07da      	lsls	r2, r3, #31
 800fa4c:	d405      	bmi.n	800fa5a <_puts_r+0x9a>
 800fa4e:	89a3      	ldrh	r3, [r4, #12]
 800fa50:	059b      	lsls	r3, r3, #22
 800fa52:	d402      	bmi.n	800fa5a <_puts_r+0x9a>
 800fa54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa56:	f002 fc41 	bl	80122dc <__retarget_lock_release_recursive>
 800fa5a:	4628      	mov	r0, r5
 800fa5c:	bd70      	pop	{r4, r5, r6, pc}
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	da04      	bge.n	800fa6c <_puts_r+0xac>
 800fa62:	69a2      	ldr	r2, [r4, #24]
 800fa64:	429a      	cmp	r2, r3
 800fa66:	dc06      	bgt.n	800fa76 <_puts_r+0xb6>
 800fa68:	290a      	cmp	r1, #10
 800fa6a:	d004      	beq.n	800fa76 <_puts_r+0xb6>
 800fa6c:	6823      	ldr	r3, [r4, #0]
 800fa6e:	1c5a      	adds	r2, r3, #1
 800fa70:	6022      	str	r2, [r4, #0]
 800fa72:	7019      	strb	r1, [r3, #0]
 800fa74:	e7c5      	b.n	800fa02 <_puts_r+0x42>
 800fa76:	4622      	mov	r2, r4
 800fa78:	4628      	mov	r0, r5
 800fa7a:	f000 ffa5 	bl	80109c8 <__swbuf_r>
 800fa7e:	3001      	adds	r0, #1
 800fa80:	d1bf      	bne.n	800fa02 <_puts_r+0x42>
 800fa82:	e7df      	b.n	800fa44 <_puts_r+0x84>
 800fa84:	6823      	ldr	r3, [r4, #0]
 800fa86:	250a      	movs	r5, #10
 800fa88:	1c5a      	adds	r2, r3, #1
 800fa8a:	6022      	str	r2, [r4, #0]
 800fa8c:	701d      	strb	r5, [r3, #0]
 800fa8e:	e7db      	b.n	800fa48 <_puts_r+0x88>
 800fa90:	08015080 	.word	0x08015080
 800fa94:	080150a0 	.word	0x080150a0
 800fa98:	08015060 	.word	0x08015060

0800fa9c <puts>:
 800fa9c:	4b02      	ldr	r3, [pc, #8]	; (800faa8 <puts+0xc>)
 800fa9e:	4601      	mov	r1, r0
 800faa0:	6818      	ldr	r0, [r3, #0]
 800faa2:	f7ff bf8d 	b.w	800f9c0 <_puts_r>
 800faa6:	bf00      	nop
 800faa8:	20000110 	.word	0x20000110

0800faac <nanf>:
 800faac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fab4 <nanf+0x8>
 800fab0:	4770      	bx	lr
 800fab2:	bf00      	nop
 800fab4:	7fc00000 	.word	0x7fc00000

0800fab8 <sniprintf>:
 800fab8:	b40c      	push	{r2, r3}
 800faba:	b530      	push	{r4, r5, lr}
 800fabc:	4b17      	ldr	r3, [pc, #92]	; (800fb1c <sniprintf+0x64>)
 800fabe:	1e0c      	subs	r4, r1, #0
 800fac0:	681d      	ldr	r5, [r3, #0]
 800fac2:	b09d      	sub	sp, #116	; 0x74
 800fac4:	da08      	bge.n	800fad8 <sniprintf+0x20>
 800fac6:	238b      	movs	r3, #139	; 0x8b
 800fac8:	602b      	str	r3, [r5, #0]
 800faca:	f04f 30ff 	mov.w	r0, #4294967295
 800face:	b01d      	add	sp, #116	; 0x74
 800fad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fad4:	b002      	add	sp, #8
 800fad6:	4770      	bx	lr
 800fad8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fadc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fae0:	bf14      	ite	ne
 800fae2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fae6:	4623      	moveq	r3, r4
 800fae8:	9304      	str	r3, [sp, #16]
 800faea:	9307      	str	r3, [sp, #28]
 800faec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800faf0:	9002      	str	r0, [sp, #8]
 800faf2:	9006      	str	r0, [sp, #24]
 800faf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800faf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fafa:	ab21      	add	r3, sp, #132	; 0x84
 800fafc:	a902      	add	r1, sp, #8
 800fafe:	4628      	mov	r0, r5
 800fb00:	9301      	str	r3, [sp, #4]
 800fb02:	f003 fa93 	bl	801302c <_svfiprintf_r>
 800fb06:	1c43      	adds	r3, r0, #1
 800fb08:	bfbc      	itt	lt
 800fb0a:	238b      	movlt	r3, #139	; 0x8b
 800fb0c:	602b      	strlt	r3, [r5, #0]
 800fb0e:	2c00      	cmp	r4, #0
 800fb10:	d0dd      	beq.n	800face <sniprintf+0x16>
 800fb12:	9b02      	ldr	r3, [sp, #8]
 800fb14:	2200      	movs	r2, #0
 800fb16:	701a      	strb	r2, [r3, #0]
 800fb18:	e7d9      	b.n	800face <sniprintf+0x16>
 800fb1a:	bf00      	nop
 800fb1c:	20000110 	.word	0x20000110

0800fb20 <siprintf>:
 800fb20:	b40e      	push	{r1, r2, r3}
 800fb22:	b500      	push	{lr}
 800fb24:	b09c      	sub	sp, #112	; 0x70
 800fb26:	ab1d      	add	r3, sp, #116	; 0x74
 800fb28:	9002      	str	r0, [sp, #8]
 800fb2a:	9006      	str	r0, [sp, #24]
 800fb2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fb30:	4809      	ldr	r0, [pc, #36]	; (800fb58 <siprintf+0x38>)
 800fb32:	9107      	str	r1, [sp, #28]
 800fb34:	9104      	str	r1, [sp, #16]
 800fb36:	4909      	ldr	r1, [pc, #36]	; (800fb5c <siprintf+0x3c>)
 800fb38:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb3c:	9105      	str	r1, [sp, #20]
 800fb3e:	6800      	ldr	r0, [r0, #0]
 800fb40:	9301      	str	r3, [sp, #4]
 800fb42:	a902      	add	r1, sp, #8
 800fb44:	f003 fa72 	bl	801302c <_svfiprintf_r>
 800fb48:	9b02      	ldr	r3, [sp, #8]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	701a      	strb	r2, [r3, #0]
 800fb4e:	b01c      	add	sp, #112	; 0x70
 800fb50:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb54:	b003      	add	sp, #12
 800fb56:	4770      	bx	lr
 800fb58:	20000110 	.word	0x20000110
 800fb5c:	ffff0208 	.word	0xffff0208

0800fb60 <siscanf>:
 800fb60:	b40e      	push	{r1, r2, r3}
 800fb62:	b510      	push	{r4, lr}
 800fb64:	b09f      	sub	sp, #124	; 0x7c
 800fb66:	ac21      	add	r4, sp, #132	; 0x84
 800fb68:	f44f 7101 	mov.w	r1, #516	; 0x204
 800fb6c:	f854 2b04 	ldr.w	r2, [r4], #4
 800fb70:	9201      	str	r2, [sp, #4]
 800fb72:	f8ad 101c 	strh.w	r1, [sp, #28]
 800fb76:	9004      	str	r0, [sp, #16]
 800fb78:	9008      	str	r0, [sp, #32]
 800fb7a:	f7f0 fb43 	bl	8000204 <strlen>
 800fb7e:	4b0c      	ldr	r3, [pc, #48]	; (800fbb0 <siscanf+0x50>)
 800fb80:	9005      	str	r0, [sp, #20]
 800fb82:	9009      	str	r0, [sp, #36]	; 0x24
 800fb84:	930d      	str	r3, [sp, #52]	; 0x34
 800fb86:	480b      	ldr	r0, [pc, #44]	; (800fbb4 <siscanf+0x54>)
 800fb88:	9a01      	ldr	r2, [sp, #4]
 800fb8a:	6800      	ldr	r0, [r0, #0]
 800fb8c:	9403      	str	r4, [sp, #12]
 800fb8e:	2300      	movs	r3, #0
 800fb90:	9311      	str	r3, [sp, #68]	; 0x44
 800fb92:	9316      	str	r3, [sp, #88]	; 0x58
 800fb94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb98:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fb9c:	a904      	add	r1, sp, #16
 800fb9e:	4623      	mov	r3, r4
 800fba0:	f003 fb9e 	bl	80132e0 <__ssvfiscanf_r>
 800fba4:	b01f      	add	sp, #124	; 0x7c
 800fba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbaa:	b003      	add	sp, #12
 800fbac:	4770      	bx	lr
 800fbae:	bf00      	nop
 800fbb0:	0800fbdb 	.word	0x0800fbdb
 800fbb4:	20000110 	.word	0x20000110

0800fbb8 <__sread>:
 800fbb8:	b510      	push	{r4, lr}
 800fbba:	460c      	mov	r4, r1
 800fbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbc0:	f003 ffb2 	bl	8013b28 <_read_r>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	bfab      	itete	ge
 800fbc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fbca:	89a3      	ldrhlt	r3, [r4, #12]
 800fbcc:	181b      	addge	r3, r3, r0
 800fbce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fbd2:	bfac      	ite	ge
 800fbd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800fbd6:	81a3      	strhlt	r3, [r4, #12]
 800fbd8:	bd10      	pop	{r4, pc}

0800fbda <__seofread>:
 800fbda:	2000      	movs	r0, #0
 800fbdc:	4770      	bx	lr

0800fbde <__swrite>:
 800fbde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe2:	461f      	mov	r7, r3
 800fbe4:	898b      	ldrh	r3, [r1, #12]
 800fbe6:	05db      	lsls	r3, r3, #23
 800fbe8:	4605      	mov	r5, r0
 800fbea:	460c      	mov	r4, r1
 800fbec:	4616      	mov	r6, r2
 800fbee:	d505      	bpl.n	800fbfc <__swrite+0x1e>
 800fbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbf4:	2302      	movs	r3, #2
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f002 fb72 	bl	80122e0 <_lseek_r>
 800fbfc:	89a3      	ldrh	r3, [r4, #12]
 800fbfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc06:	81a3      	strh	r3, [r4, #12]
 800fc08:	4632      	mov	r2, r6
 800fc0a:	463b      	mov	r3, r7
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc12:	f000 bf2b 	b.w	8010a6c <_write_r>

0800fc16 <__sseek>:
 800fc16:	b510      	push	{r4, lr}
 800fc18:	460c      	mov	r4, r1
 800fc1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc1e:	f002 fb5f 	bl	80122e0 <_lseek_r>
 800fc22:	1c43      	adds	r3, r0, #1
 800fc24:	89a3      	ldrh	r3, [r4, #12]
 800fc26:	bf15      	itete	ne
 800fc28:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc32:	81a3      	strheq	r3, [r4, #12]
 800fc34:	bf18      	it	ne
 800fc36:	81a3      	strhne	r3, [r4, #12]
 800fc38:	bd10      	pop	{r4, pc}

0800fc3a <__sclose>:
 800fc3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc3e:	f000 bf95 	b.w	8010b6c <_close_r>

0800fc42 <strstr>:
 800fc42:	780a      	ldrb	r2, [r1, #0]
 800fc44:	b570      	push	{r4, r5, r6, lr}
 800fc46:	b96a      	cbnz	r2, 800fc64 <strstr+0x22>
 800fc48:	bd70      	pop	{r4, r5, r6, pc}
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d109      	bne.n	800fc62 <strstr+0x20>
 800fc4e:	460c      	mov	r4, r1
 800fc50:	4605      	mov	r5, r0
 800fc52:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d0f6      	beq.n	800fc48 <strstr+0x6>
 800fc5a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800fc5e:	429e      	cmp	r6, r3
 800fc60:	d0f7      	beq.n	800fc52 <strstr+0x10>
 800fc62:	3001      	adds	r0, #1
 800fc64:	7803      	ldrb	r3, [r0, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d1ef      	bne.n	800fc4a <strstr+0x8>
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	e7ec      	b.n	800fc48 <strstr+0x6>

0800fc6e <sulp>:
 800fc6e:	b570      	push	{r4, r5, r6, lr}
 800fc70:	4604      	mov	r4, r0
 800fc72:	460d      	mov	r5, r1
 800fc74:	ec45 4b10 	vmov	d0, r4, r5
 800fc78:	4616      	mov	r6, r2
 800fc7a:	f002 ff35 	bl	8012ae8 <__ulp>
 800fc7e:	ec51 0b10 	vmov	r0, r1, d0
 800fc82:	b17e      	cbz	r6, 800fca4 <sulp+0x36>
 800fc84:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fc88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	dd09      	ble.n	800fca4 <sulp+0x36>
 800fc90:	051b      	lsls	r3, r3, #20
 800fc92:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fc96:	2400      	movs	r4, #0
 800fc98:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fc9c:	4622      	mov	r2, r4
 800fc9e:	462b      	mov	r3, r5
 800fca0:	f7f0 fcca 	bl	8000638 <__aeabi_dmul>
 800fca4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fca8 <_strtod_l>:
 800fca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcac:	ed2d 8b02 	vpush	{d8}
 800fcb0:	b09d      	sub	sp, #116	; 0x74
 800fcb2:	461f      	mov	r7, r3
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	9318      	str	r3, [sp, #96]	; 0x60
 800fcb8:	4ba2      	ldr	r3, [pc, #648]	; (800ff44 <_strtod_l+0x29c>)
 800fcba:	9213      	str	r2, [sp, #76]	; 0x4c
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	9305      	str	r3, [sp, #20]
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	4688      	mov	r8, r1
 800fcc6:	f7f0 fa9d 	bl	8000204 <strlen>
 800fcca:	f04f 0a00 	mov.w	sl, #0
 800fcce:	4605      	mov	r5, r0
 800fcd0:	f04f 0b00 	mov.w	fp, #0
 800fcd4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fcd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fcda:	781a      	ldrb	r2, [r3, #0]
 800fcdc:	2a2b      	cmp	r2, #43	; 0x2b
 800fcde:	d04e      	beq.n	800fd7e <_strtod_l+0xd6>
 800fce0:	d83b      	bhi.n	800fd5a <_strtod_l+0xb2>
 800fce2:	2a0d      	cmp	r2, #13
 800fce4:	d834      	bhi.n	800fd50 <_strtod_l+0xa8>
 800fce6:	2a08      	cmp	r2, #8
 800fce8:	d834      	bhi.n	800fd54 <_strtod_l+0xac>
 800fcea:	2a00      	cmp	r2, #0
 800fcec:	d03e      	beq.n	800fd6c <_strtod_l+0xc4>
 800fcee:	2300      	movs	r3, #0
 800fcf0:	930a      	str	r3, [sp, #40]	; 0x28
 800fcf2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fcf4:	7833      	ldrb	r3, [r6, #0]
 800fcf6:	2b30      	cmp	r3, #48	; 0x30
 800fcf8:	f040 80b0 	bne.w	800fe5c <_strtod_l+0x1b4>
 800fcfc:	7873      	ldrb	r3, [r6, #1]
 800fcfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fd02:	2b58      	cmp	r3, #88	; 0x58
 800fd04:	d168      	bne.n	800fdd8 <_strtod_l+0x130>
 800fd06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd08:	9301      	str	r3, [sp, #4]
 800fd0a:	ab18      	add	r3, sp, #96	; 0x60
 800fd0c:	9702      	str	r7, [sp, #8]
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	4a8d      	ldr	r2, [pc, #564]	; (800ff48 <_strtod_l+0x2a0>)
 800fd12:	ab19      	add	r3, sp, #100	; 0x64
 800fd14:	a917      	add	r1, sp, #92	; 0x5c
 800fd16:	4620      	mov	r0, r4
 800fd18:	f001 ffd2 	bl	8011cc0 <__gethex>
 800fd1c:	f010 0707 	ands.w	r7, r0, #7
 800fd20:	4605      	mov	r5, r0
 800fd22:	d005      	beq.n	800fd30 <_strtod_l+0x88>
 800fd24:	2f06      	cmp	r7, #6
 800fd26:	d12c      	bne.n	800fd82 <_strtod_l+0xda>
 800fd28:	3601      	adds	r6, #1
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	9617      	str	r6, [sp, #92]	; 0x5c
 800fd2e:	930a      	str	r3, [sp, #40]	; 0x28
 800fd30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	f040 8590 	bne.w	8010858 <_strtod_l+0xbb0>
 800fd38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd3a:	b1eb      	cbz	r3, 800fd78 <_strtod_l+0xd0>
 800fd3c:	4652      	mov	r2, sl
 800fd3e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fd42:	ec43 2b10 	vmov	d0, r2, r3
 800fd46:	b01d      	add	sp, #116	; 0x74
 800fd48:	ecbd 8b02 	vpop	{d8}
 800fd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd50:	2a20      	cmp	r2, #32
 800fd52:	d1cc      	bne.n	800fcee <_strtod_l+0x46>
 800fd54:	3301      	adds	r3, #1
 800fd56:	9317      	str	r3, [sp, #92]	; 0x5c
 800fd58:	e7be      	b.n	800fcd8 <_strtod_l+0x30>
 800fd5a:	2a2d      	cmp	r2, #45	; 0x2d
 800fd5c:	d1c7      	bne.n	800fcee <_strtod_l+0x46>
 800fd5e:	2201      	movs	r2, #1
 800fd60:	920a      	str	r2, [sp, #40]	; 0x28
 800fd62:	1c5a      	adds	r2, r3, #1
 800fd64:	9217      	str	r2, [sp, #92]	; 0x5c
 800fd66:	785b      	ldrb	r3, [r3, #1]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d1c2      	bne.n	800fcf2 <_strtod_l+0x4a>
 800fd6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fd6e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	f040 856e 	bne.w	8010854 <_strtod_l+0xbac>
 800fd78:	4652      	mov	r2, sl
 800fd7a:	465b      	mov	r3, fp
 800fd7c:	e7e1      	b.n	800fd42 <_strtod_l+0x9a>
 800fd7e:	2200      	movs	r2, #0
 800fd80:	e7ee      	b.n	800fd60 <_strtod_l+0xb8>
 800fd82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fd84:	b13a      	cbz	r2, 800fd96 <_strtod_l+0xee>
 800fd86:	2135      	movs	r1, #53	; 0x35
 800fd88:	a81a      	add	r0, sp, #104	; 0x68
 800fd8a:	f002 ffb8 	bl	8012cfe <__copybits>
 800fd8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fd90:	4620      	mov	r0, r4
 800fd92:	f002 fb77 	bl	8012484 <_Bfree>
 800fd96:	3f01      	subs	r7, #1
 800fd98:	2f04      	cmp	r7, #4
 800fd9a:	d806      	bhi.n	800fdaa <_strtod_l+0x102>
 800fd9c:	e8df f007 	tbb	[pc, r7]
 800fda0:	1714030a 	.word	0x1714030a
 800fda4:	0a          	.byte	0x0a
 800fda5:	00          	.byte	0x00
 800fda6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800fdaa:	0728      	lsls	r0, r5, #28
 800fdac:	d5c0      	bpl.n	800fd30 <_strtod_l+0x88>
 800fdae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fdb2:	e7bd      	b.n	800fd30 <_strtod_l+0x88>
 800fdb4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800fdb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fdba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fdbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fdc2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fdc6:	e7f0      	b.n	800fdaa <_strtod_l+0x102>
 800fdc8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ff4c <_strtod_l+0x2a4>
 800fdcc:	e7ed      	b.n	800fdaa <_strtod_l+0x102>
 800fdce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fdd2:	f04f 3aff 	mov.w	sl, #4294967295
 800fdd6:	e7e8      	b.n	800fdaa <_strtod_l+0x102>
 800fdd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fdda:	1c5a      	adds	r2, r3, #1
 800fddc:	9217      	str	r2, [sp, #92]	; 0x5c
 800fdde:	785b      	ldrb	r3, [r3, #1]
 800fde0:	2b30      	cmp	r3, #48	; 0x30
 800fde2:	d0f9      	beq.n	800fdd8 <_strtod_l+0x130>
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d0a3      	beq.n	800fd30 <_strtod_l+0x88>
 800fde8:	2301      	movs	r3, #1
 800fdea:	f04f 0900 	mov.w	r9, #0
 800fdee:	9304      	str	r3, [sp, #16]
 800fdf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fdf2:	9308      	str	r3, [sp, #32]
 800fdf4:	f8cd 901c 	str.w	r9, [sp, #28]
 800fdf8:	464f      	mov	r7, r9
 800fdfa:	220a      	movs	r2, #10
 800fdfc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fdfe:	7806      	ldrb	r6, [r0, #0]
 800fe00:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fe04:	b2d9      	uxtb	r1, r3
 800fe06:	2909      	cmp	r1, #9
 800fe08:	d92a      	bls.n	800fe60 <_strtod_l+0x1b8>
 800fe0a:	9905      	ldr	r1, [sp, #20]
 800fe0c:	462a      	mov	r2, r5
 800fe0e:	f003 feef 	bl	8013bf0 <strncmp>
 800fe12:	b398      	cbz	r0, 800fe7c <_strtod_l+0x1d4>
 800fe14:	2000      	movs	r0, #0
 800fe16:	4632      	mov	r2, r6
 800fe18:	463d      	mov	r5, r7
 800fe1a:	9005      	str	r0, [sp, #20]
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2a65      	cmp	r2, #101	; 0x65
 800fe20:	d001      	beq.n	800fe26 <_strtod_l+0x17e>
 800fe22:	2a45      	cmp	r2, #69	; 0x45
 800fe24:	d118      	bne.n	800fe58 <_strtod_l+0x1b0>
 800fe26:	b91d      	cbnz	r5, 800fe30 <_strtod_l+0x188>
 800fe28:	9a04      	ldr	r2, [sp, #16]
 800fe2a:	4302      	orrs	r2, r0
 800fe2c:	d09e      	beq.n	800fd6c <_strtod_l+0xc4>
 800fe2e:	2500      	movs	r5, #0
 800fe30:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800fe34:	f108 0201 	add.w	r2, r8, #1
 800fe38:	9217      	str	r2, [sp, #92]	; 0x5c
 800fe3a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800fe3e:	2a2b      	cmp	r2, #43	; 0x2b
 800fe40:	d075      	beq.n	800ff2e <_strtod_l+0x286>
 800fe42:	2a2d      	cmp	r2, #45	; 0x2d
 800fe44:	d07b      	beq.n	800ff3e <_strtod_l+0x296>
 800fe46:	f04f 0c00 	mov.w	ip, #0
 800fe4a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fe4e:	2909      	cmp	r1, #9
 800fe50:	f240 8082 	bls.w	800ff58 <_strtod_l+0x2b0>
 800fe54:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fe58:	2600      	movs	r6, #0
 800fe5a:	e09d      	b.n	800ff98 <_strtod_l+0x2f0>
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	e7c4      	b.n	800fdea <_strtod_l+0x142>
 800fe60:	2f08      	cmp	r7, #8
 800fe62:	bfd8      	it	le
 800fe64:	9907      	ldrle	r1, [sp, #28]
 800fe66:	f100 0001 	add.w	r0, r0, #1
 800fe6a:	bfda      	itte	le
 800fe6c:	fb02 3301 	mlale	r3, r2, r1, r3
 800fe70:	9307      	strle	r3, [sp, #28]
 800fe72:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fe76:	3701      	adds	r7, #1
 800fe78:	9017      	str	r0, [sp, #92]	; 0x5c
 800fe7a:	e7bf      	b.n	800fdfc <_strtod_l+0x154>
 800fe7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fe7e:	195a      	adds	r2, r3, r5
 800fe80:	9217      	str	r2, [sp, #92]	; 0x5c
 800fe82:	5d5a      	ldrb	r2, [r3, r5]
 800fe84:	2f00      	cmp	r7, #0
 800fe86:	d037      	beq.n	800fef8 <_strtod_l+0x250>
 800fe88:	9005      	str	r0, [sp, #20]
 800fe8a:	463d      	mov	r5, r7
 800fe8c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fe90:	2b09      	cmp	r3, #9
 800fe92:	d912      	bls.n	800feba <_strtod_l+0x212>
 800fe94:	2301      	movs	r3, #1
 800fe96:	e7c2      	b.n	800fe1e <_strtod_l+0x176>
 800fe98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fe9a:	1c5a      	adds	r2, r3, #1
 800fe9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800fe9e:	785a      	ldrb	r2, [r3, #1]
 800fea0:	3001      	adds	r0, #1
 800fea2:	2a30      	cmp	r2, #48	; 0x30
 800fea4:	d0f8      	beq.n	800fe98 <_strtod_l+0x1f0>
 800fea6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800feaa:	2b08      	cmp	r3, #8
 800feac:	f200 84d9 	bhi.w	8010862 <_strtod_l+0xbba>
 800feb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800feb2:	9005      	str	r0, [sp, #20]
 800feb4:	2000      	movs	r0, #0
 800feb6:	9308      	str	r3, [sp, #32]
 800feb8:	4605      	mov	r5, r0
 800feba:	3a30      	subs	r2, #48	; 0x30
 800febc:	f100 0301 	add.w	r3, r0, #1
 800fec0:	d014      	beq.n	800feec <_strtod_l+0x244>
 800fec2:	9905      	ldr	r1, [sp, #20]
 800fec4:	4419      	add	r1, r3
 800fec6:	9105      	str	r1, [sp, #20]
 800fec8:	462b      	mov	r3, r5
 800feca:	eb00 0e05 	add.w	lr, r0, r5
 800fece:	210a      	movs	r1, #10
 800fed0:	4573      	cmp	r3, lr
 800fed2:	d113      	bne.n	800fefc <_strtod_l+0x254>
 800fed4:	182b      	adds	r3, r5, r0
 800fed6:	2b08      	cmp	r3, #8
 800fed8:	f105 0501 	add.w	r5, r5, #1
 800fedc:	4405      	add	r5, r0
 800fede:	dc1c      	bgt.n	800ff1a <_strtod_l+0x272>
 800fee0:	9907      	ldr	r1, [sp, #28]
 800fee2:	230a      	movs	r3, #10
 800fee4:	fb03 2301 	mla	r3, r3, r1, r2
 800fee8:	9307      	str	r3, [sp, #28]
 800feea:	2300      	movs	r3, #0
 800feec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800feee:	1c51      	adds	r1, r2, #1
 800fef0:	9117      	str	r1, [sp, #92]	; 0x5c
 800fef2:	7852      	ldrb	r2, [r2, #1]
 800fef4:	4618      	mov	r0, r3
 800fef6:	e7c9      	b.n	800fe8c <_strtod_l+0x1e4>
 800fef8:	4638      	mov	r0, r7
 800fefa:	e7d2      	b.n	800fea2 <_strtod_l+0x1fa>
 800fefc:	2b08      	cmp	r3, #8
 800fefe:	dc04      	bgt.n	800ff0a <_strtod_l+0x262>
 800ff00:	9e07      	ldr	r6, [sp, #28]
 800ff02:	434e      	muls	r6, r1
 800ff04:	9607      	str	r6, [sp, #28]
 800ff06:	3301      	adds	r3, #1
 800ff08:	e7e2      	b.n	800fed0 <_strtod_l+0x228>
 800ff0a:	f103 0c01 	add.w	ip, r3, #1
 800ff0e:	f1bc 0f10 	cmp.w	ip, #16
 800ff12:	bfd8      	it	le
 800ff14:	fb01 f909 	mulle.w	r9, r1, r9
 800ff18:	e7f5      	b.n	800ff06 <_strtod_l+0x25e>
 800ff1a:	2d10      	cmp	r5, #16
 800ff1c:	bfdc      	itt	le
 800ff1e:	230a      	movle	r3, #10
 800ff20:	fb03 2909 	mlale	r9, r3, r9, r2
 800ff24:	e7e1      	b.n	800feea <_strtod_l+0x242>
 800ff26:	2300      	movs	r3, #0
 800ff28:	9305      	str	r3, [sp, #20]
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	e77c      	b.n	800fe28 <_strtod_l+0x180>
 800ff2e:	f04f 0c00 	mov.w	ip, #0
 800ff32:	f108 0202 	add.w	r2, r8, #2
 800ff36:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff38:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ff3c:	e785      	b.n	800fe4a <_strtod_l+0x1a2>
 800ff3e:	f04f 0c01 	mov.w	ip, #1
 800ff42:	e7f6      	b.n	800ff32 <_strtod_l+0x28a>
 800ff44:	08015128 	.word	0x08015128
 800ff48:	08014f7c 	.word	0x08014f7c
 800ff4c:	7ff00000 	.word	0x7ff00000
 800ff50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ff52:	1c51      	adds	r1, r2, #1
 800ff54:	9117      	str	r1, [sp, #92]	; 0x5c
 800ff56:	7852      	ldrb	r2, [r2, #1]
 800ff58:	2a30      	cmp	r2, #48	; 0x30
 800ff5a:	d0f9      	beq.n	800ff50 <_strtod_l+0x2a8>
 800ff5c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ff60:	2908      	cmp	r1, #8
 800ff62:	f63f af79 	bhi.w	800fe58 <_strtod_l+0x1b0>
 800ff66:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ff6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ff6c:	9206      	str	r2, [sp, #24]
 800ff6e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ff70:	1c51      	adds	r1, r2, #1
 800ff72:	9117      	str	r1, [sp, #92]	; 0x5c
 800ff74:	7852      	ldrb	r2, [r2, #1]
 800ff76:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ff7a:	2e09      	cmp	r6, #9
 800ff7c:	d937      	bls.n	800ffee <_strtod_l+0x346>
 800ff7e:	9e06      	ldr	r6, [sp, #24]
 800ff80:	1b89      	subs	r1, r1, r6
 800ff82:	2908      	cmp	r1, #8
 800ff84:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ff88:	dc02      	bgt.n	800ff90 <_strtod_l+0x2e8>
 800ff8a:	4576      	cmp	r6, lr
 800ff8c:	bfa8      	it	ge
 800ff8e:	4676      	movge	r6, lr
 800ff90:	f1bc 0f00 	cmp.w	ip, #0
 800ff94:	d000      	beq.n	800ff98 <_strtod_l+0x2f0>
 800ff96:	4276      	negs	r6, r6
 800ff98:	2d00      	cmp	r5, #0
 800ff9a:	d14d      	bne.n	8010038 <_strtod_l+0x390>
 800ff9c:	9904      	ldr	r1, [sp, #16]
 800ff9e:	4301      	orrs	r1, r0
 800ffa0:	f47f aec6 	bne.w	800fd30 <_strtod_l+0x88>
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	f47f aee1 	bne.w	800fd6c <_strtod_l+0xc4>
 800ffaa:	2a69      	cmp	r2, #105	; 0x69
 800ffac:	d027      	beq.n	800fffe <_strtod_l+0x356>
 800ffae:	dc24      	bgt.n	800fffa <_strtod_l+0x352>
 800ffb0:	2a49      	cmp	r2, #73	; 0x49
 800ffb2:	d024      	beq.n	800fffe <_strtod_l+0x356>
 800ffb4:	2a4e      	cmp	r2, #78	; 0x4e
 800ffb6:	f47f aed9 	bne.w	800fd6c <_strtod_l+0xc4>
 800ffba:	499f      	ldr	r1, [pc, #636]	; (8010238 <_strtod_l+0x590>)
 800ffbc:	a817      	add	r0, sp, #92	; 0x5c
 800ffbe:	f002 f8d7 	bl	8012170 <__match>
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	f43f aed2 	beq.w	800fd6c <_strtod_l+0xc4>
 800ffc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ffca:	781b      	ldrb	r3, [r3, #0]
 800ffcc:	2b28      	cmp	r3, #40	; 0x28
 800ffce:	d12d      	bne.n	801002c <_strtod_l+0x384>
 800ffd0:	499a      	ldr	r1, [pc, #616]	; (801023c <_strtod_l+0x594>)
 800ffd2:	aa1a      	add	r2, sp, #104	; 0x68
 800ffd4:	a817      	add	r0, sp, #92	; 0x5c
 800ffd6:	f002 f8df 	bl	8012198 <__hexnan>
 800ffda:	2805      	cmp	r0, #5
 800ffdc:	d126      	bne.n	801002c <_strtod_l+0x384>
 800ffde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ffe0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ffe4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ffe8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ffec:	e6a0      	b.n	800fd30 <_strtod_l+0x88>
 800ffee:	210a      	movs	r1, #10
 800fff0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800fff4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fff8:	e7b9      	b.n	800ff6e <_strtod_l+0x2c6>
 800fffa:	2a6e      	cmp	r2, #110	; 0x6e
 800fffc:	e7db      	b.n	800ffb6 <_strtod_l+0x30e>
 800fffe:	4990      	ldr	r1, [pc, #576]	; (8010240 <_strtod_l+0x598>)
 8010000:	a817      	add	r0, sp, #92	; 0x5c
 8010002:	f002 f8b5 	bl	8012170 <__match>
 8010006:	2800      	cmp	r0, #0
 8010008:	f43f aeb0 	beq.w	800fd6c <_strtod_l+0xc4>
 801000c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801000e:	498d      	ldr	r1, [pc, #564]	; (8010244 <_strtod_l+0x59c>)
 8010010:	3b01      	subs	r3, #1
 8010012:	a817      	add	r0, sp, #92	; 0x5c
 8010014:	9317      	str	r3, [sp, #92]	; 0x5c
 8010016:	f002 f8ab 	bl	8012170 <__match>
 801001a:	b910      	cbnz	r0, 8010022 <_strtod_l+0x37a>
 801001c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801001e:	3301      	adds	r3, #1
 8010020:	9317      	str	r3, [sp, #92]	; 0x5c
 8010022:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010254 <_strtod_l+0x5ac>
 8010026:	f04f 0a00 	mov.w	sl, #0
 801002a:	e681      	b.n	800fd30 <_strtod_l+0x88>
 801002c:	4886      	ldr	r0, [pc, #536]	; (8010248 <_strtod_l+0x5a0>)
 801002e:	f003 fd8f 	bl	8013b50 <nan>
 8010032:	ec5b ab10 	vmov	sl, fp, d0
 8010036:	e67b      	b.n	800fd30 <_strtod_l+0x88>
 8010038:	9b05      	ldr	r3, [sp, #20]
 801003a:	9807      	ldr	r0, [sp, #28]
 801003c:	1af3      	subs	r3, r6, r3
 801003e:	2f00      	cmp	r7, #0
 8010040:	bf08      	it	eq
 8010042:	462f      	moveq	r7, r5
 8010044:	2d10      	cmp	r5, #16
 8010046:	9306      	str	r3, [sp, #24]
 8010048:	46a8      	mov	r8, r5
 801004a:	bfa8      	it	ge
 801004c:	f04f 0810 	movge.w	r8, #16
 8010050:	f7f0 fa78 	bl	8000544 <__aeabi_ui2d>
 8010054:	2d09      	cmp	r5, #9
 8010056:	4682      	mov	sl, r0
 8010058:	468b      	mov	fp, r1
 801005a:	dd13      	ble.n	8010084 <_strtod_l+0x3dc>
 801005c:	4b7b      	ldr	r3, [pc, #492]	; (801024c <_strtod_l+0x5a4>)
 801005e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010062:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010066:	f7f0 fae7 	bl	8000638 <__aeabi_dmul>
 801006a:	4682      	mov	sl, r0
 801006c:	4648      	mov	r0, r9
 801006e:	468b      	mov	fp, r1
 8010070:	f7f0 fa68 	bl	8000544 <__aeabi_ui2d>
 8010074:	4602      	mov	r2, r0
 8010076:	460b      	mov	r3, r1
 8010078:	4650      	mov	r0, sl
 801007a:	4659      	mov	r1, fp
 801007c:	f7f0 f926 	bl	80002cc <__adddf3>
 8010080:	4682      	mov	sl, r0
 8010082:	468b      	mov	fp, r1
 8010084:	2d0f      	cmp	r5, #15
 8010086:	dc38      	bgt.n	80100fa <_strtod_l+0x452>
 8010088:	9b06      	ldr	r3, [sp, #24]
 801008a:	2b00      	cmp	r3, #0
 801008c:	f43f ae50 	beq.w	800fd30 <_strtod_l+0x88>
 8010090:	dd24      	ble.n	80100dc <_strtod_l+0x434>
 8010092:	2b16      	cmp	r3, #22
 8010094:	dc0b      	bgt.n	80100ae <_strtod_l+0x406>
 8010096:	496d      	ldr	r1, [pc, #436]	; (801024c <_strtod_l+0x5a4>)
 8010098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801009c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100a0:	4652      	mov	r2, sl
 80100a2:	465b      	mov	r3, fp
 80100a4:	f7f0 fac8 	bl	8000638 <__aeabi_dmul>
 80100a8:	4682      	mov	sl, r0
 80100aa:	468b      	mov	fp, r1
 80100ac:	e640      	b.n	800fd30 <_strtod_l+0x88>
 80100ae:	9a06      	ldr	r2, [sp, #24]
 80100b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80100b4:	4293      	cmp	r3, r2
 80100b6:	db20      	blt.n	80100fa <_strtod_l+0x452>
 80100b8:	4c64      	ldr	r4, [pc, #400]	; (801024c <_strtod_l+0x5a4>)
 80100ba:	f1c5 050f 	rsb	r5, r5, #15
 80100be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80100c2:	4652      	mov	r2, sl
 80100c4:	465b      	mov	r3, fp
 80100c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100ca:	f7f0 fab5 	bl	8000638 <__aeabi_dmul>
 80100ce:	9b06      	ldr	r3, [sp, #24]
 80100d0:	1b5d      	subs	r5, r3, r5
 80100d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80100d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80100da:	e7e3      	b.n	80100a4 <_strtod_l+0x3fc>
 80100dc:	9b06      	ldr	r3, [sp, #24]
 80100de:	3316      	adds	r3, #22
 80100e0:	db0b      	blt.n	80100fa <_strtod_l+0x452>
 80100e2:	9b05      	ldr	r3, [sp, #20]
 80100e4:	1b9e      	subs	r6, r3, r6
 80100e6:	4b59      	ldr	r3, [pc, #356]	; (801024c <_strtod_l+0x5a4>)
 80100e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80100ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80100f0:	4650      	mov	r0, sl
 80100f2:	4659      	mov	r1, fp
 80100f4:	f7f0 fbca 	bl	800088c <__aeabi_ddiv>
 80100f8:	e7d6      	b.n	80100a8 <_strtod_l+0x400>
 80100fa:	9b06      	ldr	r3, [sp, #24]
 80100fc:	eba5 0808 	sub.w	r8, r5, r8
 8010100:	4498      	add	r8, r3
 8010102:	f1b8 0f00 	cmp.w	r8, #0
 8010106:	dd74      	ble.n	80101f2 <_strtod_l+0x54a>
 8010108:	f018 030f 	ands.w	r3, r8, #15
 801010c:	d00a      	beq.n	8010124 <_strtod_l+0x47c>
 801010e:	494f      	ldr	r1, [pc, #316]	; (801024c <_strtod_l+0x5a4>)
 8010110:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010114:	4652      	mov	r2, sl
 8010116:	465b      	mov	r3, fp
 8010118:	e9d1 0100 	ldrd	r0, r1, [r1]
 801011c:	f7f0 fa8c 	bl	8000638 <__aeabi_dmul>
 8010120:	4682      	mov	sl, r0
 8010122:	468b      	mov	fp, r1
 8010124:	f038 080f 	bics.w	r8, r8, #15
 8010128:	d04f      	beq.n	80101ca <_strtod_l+0x522>
 801012a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801012e:	dd22      	ble.n	8010176 <_strtod_l+0x4ce>
 8010130:	2500      	movs	r5, #0
 8010132:	462e      	mov	r6, r5
 8010134:	9507      	str	r5, [sp, #28]
 8010136:	9505      	str	r5, [sp, #20]
 8010138:	2322      	movs	r3, #34	; 0x22
 801013a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010254 <_strtod_l+0x5ac>
 801013e:	6023      	str	r3, [r4, #0]
 8010140:	f04f 0a00 	mov.w	sl, #0
 8010144:	9b07      	ldr	r3, [sp, #28]
 8010146:	2b00      	cmp	r3, #0
 8010148:	f43f adf2 	beq.w	800fd30 <_strtod_l+0x88>
 801014c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801014e:	4620      	mov	r0, r4
 8010150:	f002 f998 	bl	8012484 <_Bfree>
 8010154:	9905      	ldr	r1, [sp, #20]
 8010156:	4620      	mov	r0, r4
 8010158:	f002 f994 	bl	8012484 <_Bfree>
 801015c:	4631      	mov	r1, r6
 801015e:	4620      	mov	r0, r4
 8010160:	f002 f990 	bl	8012484 <_Bfree>
 8010164:	9907      	ldr	r1, [sp, #28]
 8010166:	4620      	mov	r0, r4
 8010168:	f002 f98c 	bl	8012484 <_Bfree>
 801016c:	4629      	mov	r1, r5
 801016e:	4620      	mov	r0, r4
 8010170:	f002 f988 	bl	8012484 <_Bfree>
 8010174:	e5dc      	b.n	800fd30 <_strtod_l+0x88>
 8010176:	4b36      	ldr	r3, [pc, #216]	; (8010250 <_strtod_l+0x5a8>)
 8010178:	9304      	str	r3, [sp, #16]
 801017a:	2300      	movs	r3, #0
 801017c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010180:	4650      	mov	r0, sl
 8010182:	4659      	mov	r1, fp
 8010184:	4699      	mov	r9, r3
 8010186:	f1b8 0f01 	cmp.w	r8, #1
 801018a:	dc21      	bgt.n	80101d0 <_strtod_l+0x528>
 801018c:	b10b      	cbz	r3, 8010192 <_strtod_l+0x4ea>
 801018e:	4682      	mov	sl, r0
 8010190:	468b      	mov	fp, r1
 8010192:	4b2f      	ldr	r3, [pc, #188]	; (8010250 <_strtod_l+0x5a8>)
 8010194:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010198:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801019c:	4652      	mov	r2, sl
 801019e:	465b      	mov	r3, fp
 80101a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80101a4:	f7f0 fa48 	bl	8000638 <__aeabi_dmul>
 80101a8:	4b2a      	ldr	r3, [pc, #168]	; (8010254 <_strtod_l+0x5ac>)
 80101aa:	460a      	mov	r2, r1
 80101ac:	400b      	ands	r3, r1
 80101ae:	492a      	ldr	r1, [pc, #168]	; (8010258 <_strtod_l+0x5b0>)
 80101b0:	428b      	cmp	r3, r1
 80101b2:	4682      	mov	sl, r0
 80101b4:	d8bc      	bhi.n	8010130 <_strtod_l+0x488>
 80101b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80101ba:	428b      	cmp	r3, r1
 80101bc:	bf86      	itte	hi
 80101be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801025c <_strtod_l+0x5b4>
 80101c2:	f04f 3aff 	movhi.w	sl, #4294967295
 80101c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80101ca:	2300      	movs	r3, #0
 80101cc:	9304      	str	r3, [sp, #16]
 80101ce:	e084      	b.n	80102da <_strtod_l+0x632>
 80101d0:	f018 0f01 	tst.w	r8, #1
 80101d4:	d005      	beq.n	80101e2 <_strtod_l+0x53a>
 80101d6:	9b04      	ldr	r3, [sp, #16]
 80101d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101dc:	f7f0 fa2c 	bl	8000638 <__aeabi_dmul>
 80101e0:	2301      	movs	r3, #1
 80101e2:	9a04      	ldr	r2, [sp, #16]
 80101e4:	3208      	adds	r2, #8
 80101e6:	f109 0901 	add.w	r9, r9, #1
 80101ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80101ee:	9204      	str	r2, [sp, #16]
 80101f0:	e7c9      	b.n	8010186 <_strtod_l+0x4de>
 80101f2:	d0ea      	beq.n	80101ca <_strtod_l+0x522>
 80101f4:	f1c8 0800 	rsb	r8, r8, #0
 80101f8:	f018 020f 	ands.w	r2, r8, #15
 80101fc:	d00a      	beq.n	8010214 <_strtod_l+0x56c>
 80101fe:	4b13      	ldr	r3, [pc, #76]	; (801024c <_strtod_l+0x5a4>)
 8010200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010204:	4650      	mov	r0, sl
 8010206:	4659      	mov	r1, fp
 8010208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020c:	f7f0 fb3e 	bl	800088c <__aeabi_ddiv>
 8010210:	4682      	mov	sl, r0
 8010212:	468b      	mov	fp, r1
 8010214:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010218:	d0d7      	beq.n	80101ca <_strtod_l+0x522>
 801021a:	f1b8 0f1f 	cmp.w	r8, #31
 801021e:	dd1f      	ble.n	8010260 <_strtod_l+0x5b8>
 8010220:	2500      	movs	r5, #0
 8010222:	462e      	mov	r6, r5
 8010224:	9507      	str	r5, [sp, #28]
 8010226:	9505      	str	r5, [sp, #20]
 8010228:	2322      	movs	r3, #34	; 0x22
 801022a:	f04f 0a00 	mov.w	sl, #0
 801022e:	f04f 0b00 	mov.w	fp, #0
 8010232:	6023      	str	r3, [r4, #0]
 8010234:	e786      	b.n	8010144 <_strtod_l+0x49c>
 8010236:	bf00      	nop
 8010238:	08014f51 	.word	0x08014f51
 801023c:	08014f90 	.word	0x08014f90
 8010240:	08014f49 	.word	0x08014f49
 8010244:	08014fd3 	.word	0x08014fd3
 8010248:	080152fb 	.word	0x080152fb
 801024c:	080151c0 	.word	0x080151c0
 8010250:	08015198 	.word	0x08015198
 8010254:	7ff00000 	.word	0x7ff00000
 8010258:	7ca00000 	.word	0x7ca00000
 801025c:	7fefffff 	.word	0x7fefffff
 8010260:	f018 0310 	ands.w	r3, r8, #16
 8010264:	bf18      	it	ne
 8010266:	236a      	movne	r3, #106	; 0x6a
 8010268:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010618 <_strtod_l+0x970>
 801026c:	9304      	str	r3, [sp, #16]
 801026e:	4650      	mov	r0, sl
 8010270:	4659      	mov	r1, fp
 8010272:	2300      	movs	r3, #0
 8010274:	f018 0f01 	tst.w	r8, #1
 8010278:	d004      	beq.n	8010284 <_strtod_l+0x5dc>
 801027a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801027e:	f7f0 f9db 	bl	8000638 <__aeabi_dmul>
 8010282:	2301      	movs	r3, #1
 8010284:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010288:	f109 0908 	add.w	r9, r9, #8
 801028c:	d1f2      	bne.n	8010274 <_strtod_l+0x5cc>
 801028e:	b10b      	cbz	r3, 8010294 <_strtod_l+0x5ec>
 8010290:	4682      	mov	sl, r0
 8010292:	468b      	mov	fp, r1
 8010294:	9b04      	ldr	r3, [sp, #16]
 8010296:	b1c3      	cbz	r3, 80102ca <_strtod_l+0x622>
 8010298:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801029c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	4659      	mov	r1, fp
 80102a4:	dd11      	ble.n	80102ca <_strtod_l+0x622>
 80102a6:	2b1f      	cmp	r3, #31
 80102a8:	f340 8124 	ble.w	80104f4 <_strtod_l+0x84c>
 80102ac:	2b34      	cmp	r3, #52	; 0x34
 80102ae:	bfde      	ittt	le
 80102b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80102b4:	f04f 33ff 	movle.w	r3, #4294967295
 80102b8:	fa03 f202 	lslle.w	r2, r3, r2
 80102bc:	f04f 0a00 	mov.w	sl, #0
 80102c0:	bfcc      	ite	gt
 80102c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80102c6:	ea02 0b01 	andle.w	fp, r2, r1
 80102ca:	2200      	movs	r2, #0
 80102cc:	2300      	movs	r3, #0
 80102ce:	4650      	mov	r0, sl
 80102d0:	4659      	mov	r1, fp
 80102d2:	f7f0 fc19 	bl	8000b08 <__aeabi_dcmpeq>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d1a2      	bne.n	8010220 <_strtod_l+0x578>
 80102da:	9b07      	ldr	r3, [sp, #28]
 80102dc:	9300      	str	r3, [sp, #0]
 80102de:	9908      	ldr	r1, [sp, #32]
 80102e0:	462b      	mov	r3, r5
 80102e2:	463a      	mov	r2, r7
 80102e4:	4620      	mov	r0, r4
 80102e6:	f002 f935 	bl	8012554 <__s2b>
 80102ea:	9007      	str	r0, [sp, #28]
 80102ec:	2800      	cmp	r0, #0
 80102ee:	f43f af1f 	beq.w	8010130 <_strtod_l+0x488>
 80102f2:	9b05      	ldr	r3, [sp, #20]
 80102f4:	1b9e      	subs	r6, r3, r6
 80102f6:	9b06      	ldr	r3, [sp, #24]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	bfb4      	ite	lt
 80102fc:	4633      	movlt	r3, r6
 80102fe:	2300      	movge	r3, #0
 8010300:	930c      	str	r3, [sp, #48]	; 0x30
 8010302:	9b06      	ldr	r3, [sp, #24]
 8010304:	2500      	movs	r5, #0
 8010306:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801030a:	9312      	str	r3, [sp, #72]	; 0x48
 801030c:	462e      	mov	r6, r5
 801030e:	9b07      	ldr	r3, [sp, #28]
 8010310:	4620      	mov	r0, r4
 8010312:	6859      	ldr	r1, [r3, #4]
 8010314:	f002 f876 	bl	8012404 <_Balloc>
 8010318:	9005      	str	r0, [sp, #20]
 801031a:	2800      	cmp	r0, #0
 801031c:	f43f af0c 	beq.w	8010138 <_strtod_l+0x490>
 8010320:	9b07      	ldr	r3, [sp, #28]
 8010322:	691a      	ldr	r2, [r3, #16]
 8010324:	3202      	adds	r2, #2
 8010326:	f103 010c 	add.w	r1, r3, #12
 801032a:	0092      	lsls	r2, r2, #2
 801032c:	300c      	adds	r0, #12
 801032e:	f7fe fc85 	bl	800ec3c <memcpy>
 8010332:	ec4b ab10 	vmov	d0, sl, fp
 8010336:	aa1a      	add	r2, sp, #104	; 0x68
 8010338:	a919      	add	r1, sp, #100	; 0x64
 801033a:	4620      	mov	r0, r4
 801033c:	f002 fc50 	bl	8012be0 <__d2b>
 8010340:	ec4b ab18 	vmov	d8, sl, fp
 8010344:	9018      	str	r0, [sp, #96]	; 0x60
 8010346:	2800      	cmp	r0, #0
 8010348:	f43f aef6 	beq.w	8010138 <_strtod_l+0x490>
 801034c:	2101      	movs	r1, #1
 801034e:	4620      	mov	r0, r4
 8010350:	f002 f99a 	bl	8012688 <__i2b>
 8010354:	4606      	mov	r6, r0
 8010356:	2800      	cmp	r0, #0
 8010358:	f43f aeee 	beq.w	8010138 <_strtod_l+0x490>
 801035c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801035e:	9904      	ldr	r1, [sp, #16]
 8010360:	2b00      	cmp	r3, #0
 8010362:	bfab      	itete	ge
 8010364:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010366:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010368:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801036a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801036e:	bfac      	ite	ge
 8010370:	eb03 0902 	addge.w	r9, r3, r2
 8010374:	1ad7      	sublt	r7, r2, r3
 8010376:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010378:	eba3 0801 	sub.w	r8, r3, r1
 801037c:	4490      	add	r8, r2
 801037e:	4ba1      	ldr	r3, [pc, #644]	; (8010604 <_strtod_l+0x95c>)
 8010380:	f108 38ff 	add.w	r8, r8, #4294967295
 8010384:	4598      	cmp	r8, r3
 8010386:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801038a:	f280 80c7 	bge.w	801051c <_strtod_l+0x874>
 801038e:	eba3 0308 	sub.w	r3, r3, r8
 8010392:	2b1f      	cmp	r3, #31
 8010394:	eba2 0203 	sub.w	r2, r2, r3
 8010398:	f04f 0101 	mov.w	r1, #1
 801039c:	f300 80b1 	bgt.w	8010502 <_strtod_l+0x85a>
 80103a0:	fa01 f303 	lsl.w	r3, r1, r3
 80103a4:	930d      	str	r3, [sp, #52]	; 0x34
 80103a6:	2300      	movs	r3, #0
 80103a8:	9308      	str	r3, [sp, #32]
 80103aa:	eb09 0802 	add.w	r8, r9, r2
 80103ae:	9b04      	ldr	r3, [sp, #16]
 80103b0:	45c1      	cmp	r9, r8
 80103b2:	4417      	add	r7, r2
 80103b4:	441f      	add	r7, r3
 80103b6:	464b      	mov	r3, r9
 80103b8:	bfa8      	it	ge
 80103ba:	4643      	movge	r3, r8
 80103bc:	42bb      	cmp	r3, r7
 80103be:	bfa8      	it	ge
 80103c0:	463b      	movge	r3, r7
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	bfc2      	ittt	gt
 80103c6:	eba8 0803 	subgt.w	r8, r8, r3
 80103ca:	1aff      	subgt	r7, r7, r3
 80103cc:	eba9 0903 	subgt.w	r9, r9, r3
 80103d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	dd17      	ble.n	8010406 <_strtod_l+0x75e>
 80103d6:	4631      	mov	r1, r6
 80103d8:	461a      	mov	r2, r3
 80103da:	4620      	mov	r0, r4
 80103dc:	f002 fa14 	bl	8012808 <__pow5mult>
 80103e0:	4606      	mov	r6, r0
 80103e2:	2800      	cmp	r0, #0
 80103e4:	f43f aea8 	beq.w	8010138 <_strtod_l+0x490>
 80103e8:	4601      	mov	r1, r0
 80103ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80103ec:	4620      	mov	r0, r4
 80103ee:	f002 f961 	bl	80126b4 <__multiply>
 80103f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80103f4:	2800      	cmp	r0, #0
 80103f6:	f43f ae9f 	beq.w	8010138 <_strtod_l+0x490>
 80103fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80103fc:	4620      	mov	r0, r4
 80103fe:	f002 f841 	bl	8012484 <_Bfree>
 8010402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010404:	9318      	str	r3, [sp, #96]	; 0x60
 8010406:	f1b8 0f00 	cmp.w	r8, #0
 801040a:	f300 808c 	bgt.w	8010526 <_strtod_l+0x87e>
 801040e:	9b06      	ldr	r3, [sp, #24]
 8010410:	2b00      	cmp	r3, #0
 8010412:	dd08      	ble.n	8010426 <_strtod_l+0x77e>
 8010414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010416:	9905      	ldr	r1, [sp, #20]
 8010418:	4620      	mov	r0, r4
 801041a:	f002 f9f5 	bl	8012808 <__pow5mult>
 801041e:	9005      	str	r0, [sp, #20]
 8010420:	2800      	cmp	r0, #0
 8010422:	f43f ae89 	beq.w	8010138 <_strtod_l+0x490>
 8010426:	2f00      	cmp	r7, #0
 8010428:	dd08      	ble.n	801043c <_strtod_l+0x794>
 801042a:	9905      	ldr	r1, [sp, #20]
 801042c:	463a      	mov	r2, r7
 801042e:	4620      	mov	r0, r4
 8010430:	f002 fa44 	bl	80128bc <__lshift>
 8010434:	9005      	str	r0, [sp, #20]
 8010436:	2800      	cmp	r0, #0
 8010438:	f43f ae7e 	beq.w	8010138 <_strtod_l+0x490>
 801043c:	f1b9 0f00 	cmp.w	r9, #0
 8010440:	dd08      	ble.n	8010454 <_strtod_l+0x7ac>
 8010442:	4631      	mov	r1, r6
 8010444:	464a      	mov	r2, r9
 8010446:	4620      	mov	r0, r4
 8010448:	f002 fa38 	bl	80128bc <__lshift>
 801044c:	4606      	mov	r6, r0
 801044e:	2800      	cmp	r0, #0
 8010450:	f43f ae72 	beq.w	8010138 <_strtod_l+0x490>
 8010454:	9a05      	ldr	r2, [sp, #20]
 8010456:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010458:	4620      	mov	r0, r4
 801045a:	f002 fabb 	bl	80129d4 <__mdiff>
 801045e:	4605      	mov	r5, r0
 8010460:	2800      	cmp	r0, #0
 8010462:	f43f ae69 	beq.w	8010138 <_strtod_l+0x490>
 8010466:	68c3      	ldr	r3, [r0, #12]
 8010468:	930b      	str	r3, [sp, #44]	; 0x2c
 801046a:	2300      	movs	r3, #0
 801046c:	60c3      	str	r3, [r0, #12]
 801046e:	4631      	mov	r1, r6
 8010470:	f002 fa94 	bl	801299c <__mcmp>
 8010474:	2800      	cmp	r0, #0
 8010476:	da60      	bge.n	801053a <_strtod_l+0x892>
 8010478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801047a:	ea53 030a 	orrs.w	r3, r3, sl
 801047e:	f040 8082 	bne.w	8010586 <_strtod_l+0x8de>
 8010482:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010486:	2b00      	cmp	r3, #0
 8010488:	d17d      	bne.n	8010586 <_strtod_l+0x8de>
 801048a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801048e:	0d1b      	lsrs	r3, r3, #20
 8010490:	051b      	lsls	r3, r3, #20
 8010492:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010496:	d976      	bls.n	8010586 <_strtod_l+0x8de>
 8010498:	696b      	ldr	r3, [r5, #20]
 801049a:	b913      	cbnz	r3, 80104a2 <_strtod_l+0x7fa>
 801049c:	692b      	ldr	r3, [r5, #16]
 801049e:	2b01      	cmp	r3, #1
 80104a0:	dd71      	ble.n	8010586 <_strtod_l+0x8de>
 80104a2:	4629      	mov	r1, r5
 80104a4:	2201      	movs	r2, #1
 80104a6:	4620      	mov	r0, r4
 80104a8:	f002 fa08 	bl	80128bc <__lshift>
 80104ac:	4631      	mov	r1, r6
 80104ae:	4605      	mov	r5, r0
 80104b0:	f002 fa74 	bl	801299c <__mcmp>
 80104b4:	2800      	cmp	r0, #0
 80104b6:	dd66      	ble.n	8010586 <_strtod_l+0x8de>
 80104b8:	9904      	ldr	r1, [sp, #16]
 80104ba:	4a53      	ldr	r2, [pc, #332]	; (8010608 <_strtod_l+0x960>)
 80104bc:	465b      	mov	r3, fp
 80104be:	2900      	cmp	r1, #0
 80104c0:	f000 8081 	beq.w	80105c6 <_strtod_l+0x91e>
 80104c4:	ea02 010b 	and.w	r1, r2, fp
 80104c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80104cc:	dc7b      	bgt.n	80105c6 <_strtod_l+0x91e>
 80104ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80104d2:	f77f aea9 	ble.w	8010228 <_strtod_l+0x580>
 80104d6:	4b4d      	ldr	r3, [pc, #308]	; (801060c <_strtod_l+0x964>)
 80104d8:	4650      	mov	r0, sl
 80104da:	4659      	mov	r1, fp
 80104dc:	2200      	movs	r2, #0
 80104de:	f7f0 f8ab 	bl	8000638 <__aeabi_dmul>
 80104e2:	460b      	mov	r3, r1
 80104e4:	4303      	orrs	r3, r0
 80104e6:	bf08      	it	eq
 80104e8:	2322      	moveq	r3, #34	; 0x22
 80104ea:	4682      	mov	sl, r0
 80104ec:	468b      	mov	fp, r1
 80104ee:	bf08      	it	eq
 80104f0:	6023      	streq	r3, [r4, #0]
 80104f2:	e62b      	b.n	801014c <_strtod_l+0x4a4>
 80104f4:	f04f 32ff 	mov.w	r2, #4294967295
 80104f8:	fa02 f303 	lsl.w	r3, r2, r3
 80104fc:	ea03 0a0a 	and.w	sl, r3, sl
 8010500:	e6e3      	b.n	80102ca <_strtod_l+0x622>
 8010502:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010506:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801050a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801050e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010512:	fa01 f308 	lsl.w	r3, r1, r8
 8010516:	9308      	str	r3, [sp, #32]
 8010518:	910d      	str	r1, [sp, #52]	; 0x34
 801051a:	e746      	b.n	80103aa <_strtod_l+0x702>
 801051c:	2300      	movs	r3, #0
 801051e:	9308      	str	r3, [sp, #32]
 8010520:	2301      	movs	r3, #1
 8010522:	930d      	str	r3, [sp, #52]	; 0x34
 8010524:	e741      	b.n	80103aa <_strtod_l+0x702>
 8010526:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010528:	4642      	mov	r2, r8
 801052a:	4620      	mov	r0, r4
 801052c:	f002 f9c6 	bl	80128bc <__lshift>
 8010530:	9018      	str	r0, [sp, #96]	; 0x60
 8010532:	2800      	cmp	r0, #0
 8010534:	f47f af6b 	bne.w	801040e <_strtod_l+0x766>
 8010538:	e5fe      	b.n	8010138 <_strtod_l+0x490>
 801053a:	465f      	mov	r7, fp
 801053c:	d16e      	bne.n	801061c <_strtod_l+0x974>
 801053e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010540:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010544:	b342      	cbz	r2, 8010598 <_strtod_l+0x8f0>
 8010546:	4a32      	ldr	r2, [pc, #200]	; (8010610 <_strtod_l+0x968>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d128      	bne.n	801059e <_strtod_l+0x8f6>
 801054c:	9b04      	ldr	r3, [sp, #16]
 801054e:	4651      	mov	r1, sl
 8010550:	b1eb      	cbz	r3, 801058e <_strtod_l+0x8e6>
 8010552:	4b2d      	ldr	r3, [pc, #180]	; (8010608 <_strtod_l+0x960>)
 8010554:	403b      	ands	r3, r7
 8010556:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801055a:	f04f 32ff 	mov.w	r2, #4294967295
 801055e:	d819      	bhi.n	8010594 <_strtod_l+0x8ec>
 8010560:	0d1b      	lsrs	r3, r3, #20
 8010562:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010566:	fa02 f303 	lsl.w	r3, r2, r3
 801056a:	4299      	cmp	r1, r3
 801056c:	d117      	bne.n	801059e <_strtod_l+0x8f6>
 801056e:	4b29      	ldr	r3, [pc, #164]	; (8010614 <_strtod_l+0x96c>)
 8010570:	429f      	cmp	r7, r3
 8010572:	d102      	bne.n	801057a <_strtod_l+0x8d2>
 8010574:	3101      	adds	r1, #1
 8010576:	f43f addf 	beq.w	8010138 <_strtod_l+0x490>
 801057a:	4b23      	ldr	r3, [pc, #140]	; (8010608 <_strtod_l+0x960>)
 801057c:	403b      	ands	r3, r7
 801057e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010582:	f04f 0a00 	mov.w	sl, #0
 8010586:	9b04      	ldr	r3, [sp, #16]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d1a4      	bne.n	80104d6 <_strtod_l+0x82e>
 801058c:	e5de      	b.n	801014c <_strtod_l+0x4a4>
 801058e:	f04f 33ff 	mov.w	r3, #4294967295
 8010592:	e7ea      	b.n	801056a <_strtod_l+0x8c2>
 8010594:	4613      	mov	r3, r2
 8010596:	e7e8      	b.n	801056a <_strtod_l+0x8c2>
 8010598:	ea53 030a 	orrs.w	r3, r3, sl
 801059c:	d08c      	beq.n	80104b8 <_strtod_l+0x810>
 801059e:	9b08      	ldr	r3, [sp, #32]
 80105a0:	b1db      	cbz	r3, 80105da <_strtod_l+0x932>
 80105a2:	423b      	tst	r3, r7
 80105a4:	d0ef      	beq.n	8010586 <_strtod_l+0x8de>
 80105a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105a8:	9a04      	ldr	r2, [sp, #16]
 80105aa:	4650      	mov	r0, sl
 80105ac:	4659      	mov	r1, fp
 80105ae:	b1c3      	cbz	r3, 80105e2 <_strtod_l+0x93a>
 80105b0:	f7ff fb5d 	bl	800fc6e <sulp>
 80105b4:	4602      	mov	r2, r0
 80105b6:	460b      	mov	r3, r1
 80105b8:	ec51 0b18 	vmov	r0, r1, d8
 80105bc:	f7ef fe86 	bl	80002cc <__adddf3>
 80105c0:	4682      	mov	sl, r0
 80105c2:	468b      	mov	fp, r1
 80105c4:	e7df      	b.n	8010586 <_strtod_l+0x8de>
 80105c6:	4013      	ands	r3, r2
 80105c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80105cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80105d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80105d4:	f04f 3aff 	mov.w	sl, #4294967295
 80105d8:	e7d5      	b.n	8010586 <_strtod_l+0x8de>
 80105da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80105dc:	ea13 0f0a 	tst.w	r3, sl
 80105e0:	e7e0      	b.n	80105a4 <_strtod_l+0x8fc>
 80105e2:	f7ff fb44 	bl	800fc6e <sulp>
 80105e6:	4602      	mov	r2, r0
 80105e8:	460b      	mov	r3, r1
 80105ea:	ec51 0b18 	vmov	r0, r1, d8
 80105ee:	f7ef fe6b 	bl	80002c8 <__aeabi_dsub>
 80105f2:	2200      	movs	r2, #0
 80105f4:	2300      	movs	r3, #0
 80105f6:	4682      	mov	sl, r0
 80105f8:	468b      	mov	fp, r1
 80105fa:	f7f0 fa85 	bl	8000b08 <__aeabi_dcmpeq>
 80105fe:	2800      	cmp	r0, #0
 8010600:	d0c1      	beq.n	8010586 <_strtod_l+0x8de>
 8010602:	e611      	b.n	8010228 <_strtod_l+0x580>
 8010604:	fffffc02 	.word	0xfffffc02
 8010608:	7ff00000 	.word	0x7ff00000
 801060c:	39500000 	.word	0x39500000
 8010610:	000fffff 	.word	0x000fffff
 8010614:	7fefffff 	.word	0x7fefffff
 8010618:	08014fa8 	.word	0x08014fa8
 801061c:	4631      	mov	r1, r6
 801061e:	4628      	mov	r0, r5
 8010620:	f002 fb3a 	bl	8012c98 <__ratio>
 8010624:	ec59 8b10 	vmov	r8, r9, d0
 8010628:	ee10 0a10 	vmov	r0, s0
 801062c:	2200      	movs	r2, #0
 801062e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010632:	4649      	mov	r1, r9
 8010634:	f7f0 fa7c 	bl	8000b30 <__aeabi_dcmple>
 8010638:	2800      	cmp	r0, #0
 801063a:	d07a      	beq.n	8010732 <_strtod_l+0xa8a>
 801063c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801063e:	2b00      	cmp	r3, #0
 8010640:	d04a      	beq.n	80106d8 <_strtod_l+0xa30>
 8010642:	4b95      	ldr	r3, [pc, #596]	; (8010898 <_strtod_l+0xbf0>)
 8010644:	2200      	movs	r2, #0
 8010646:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801064a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010898 <_strtod_l+0xbf0>
 801064e:	f04f 0800 	mov.w	r8, #0
 8010652:	4b92      	ldr	r3, [pc, #584]	; (801089c <_strtod_l+0xbf4>)
 8010654:	403b      	ands	r3, r7
 8010656:	930d      	str	r3, [sp, #52]	; 0x34
 8010658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801065a:	4b91      	ldr	r3, [pc, #580]	; (80108a0 <_strtod_l+0xbf8>)
 801065c:	429a      	cmp	r2, r3
 801065e:	f040 80b0 	bne.w	80107c2 <_strtod_l+0xb1a>
 8010662:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010666:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801066a:	ec4b ab10 	vmov	d0, sl, fp
 801066e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010672:	f002 fa39 	bl	8012ae8 <__ulp>
 8010676:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801067a:	ec53 2b10 	vmov	r2, r3, d0
 801067e:	f7ef ffdb 	bl	8000638 <__aeabi_dmul>
 8010682:	4652      	mov	r2, sl
 8010684:	465b      	mov	r3, fp
 8010686:	f7ef fe21 	bl	80002cc <__adddf3>
 801068a:	460b      	mov	r3, r1
 801068c:	4983      	ldr	r1, [pc, #524]	; (801089c <_strtod_l+0xbf4>)
 801068e:	4a85      	ldr	r2, [pc, #532]	; (80108a4 <_strtod_l+0xbfc>)
 8010690:	4019      	ands	r1, r3
 8010692:	4291      	cmp	r1, r2
 8010694:	4682      	mov	sl, r0
 8010696:	d960      	bls.n	801075a <_strtod_l+0xab2>
 8010698:	ee18 3a90 	vmov	r3, s17
 801069c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80106a0:	4293      	cmp	r3, r2
 80106a2:	d104      	bne.n	80106ae <_strtod_l+0xa06>
 80106a4:	ee18 3a10 	vmov	r3, s16
 80106a8:	3301      	adds	r3, #1
 80106aa:	f43f ad45 	beq.w	8010138 <_strtod_l+0x490>
 80106ae:	f8df b200 	ldr.w	fp, [pc, #512]	; 80108b0 <_strtod_l+0xc08>
 80106b2:	f04f 3aff 	mov.w	sl, #4294967295
 80106b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80106b8:	4620      	mov	r0, r4
 80106ba:	f001 fee3 	bl	8012484 <_Bfree>
 80106be:	9905      	ldr	r1, [sp, #20]
 80106c0:	4620      	mov	r0, r4
 80106c2:	f001 fedf 	bl	8012484 <_Bfree>
 80106c6:	4631      	mov	r1, r6
 80106c8:	4620      	mov	r0, r4
 80106ca:	f001 fedb 	bl	8012484 <_Bfree>
 80106ce:	4629      	mov	r1, r5
 80106d0:	4620      	mov	r0, r4
 80106d2:	f001 fed7 	bl	8012484 <_Bfree>
 80106d6:	e61a      	b.n	801030e <_strtod_l+0x666>
 80106d8:	f1ba 0f00 	cmp.w	sl, #0
 80106dc:	d11b      	bne.n	8010716 <_strtod_l+0xa6e>
 80106de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80106e2:	b9f3      	cbnz	r3, 8010722 <_strtod_l+0xa7a>
 80106e4:	4b6c      	ldr	r3, [pc, #432]	; (8010898 <_strtod_l+0xbf0>)
 80106e6:	2200      	movs	r2, #0
 80106e8:	4640      	mov	r0, r8
 80106ea:	4649      	mov	r1, r9
 80106ec:	f7f0 fa16 	bl	8000b1c <__aeabi_dcmplt>
 80106f0:	b9d0      	cbnz	r0, 8010728 <_strtod_l+0xa80>
 80106f2:	4640      	mov	r0, r8
 80106f4:	4649      	mov	r1, r9
 80106f6:	4b6c      	ldr	r3, [pc, #432]	; (80108a8 <_strtod_l+0xc00>)
 80106f8:	2200      	movs	r2, #0
 80106fa:	f7ef ff9d 	bl	8000638 <__aeabi_dmul>
 80106fe:	4680      	mov	r8, r0
 8010700:	4689      	mov	r9, r1
 8010702:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010706:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801070a:	9315      	str	r3, [sp, #84]	; 0x54
 801070c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010710:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010714:	e79d      	b.n	8010652 <_strtod_l+0x9aa>
 8010716:	f1ba 0f01 	cmp.w	sl, #1
 801071a:	d102      	bne.n	8010722 <_strtod_l+0xa7a>
 801071c:	2f00      	cmp	r7, #0
 801071e:	f43f ad83 	beq.w	8010228 <_strtod_l+0x580>
 8010722:	4b62      	ldr	r3, [pc, #392]	; (80108ac <_strtod_l+0xc04>)
 8010724:	2200      	movs	r2, #0
 8010726:	e78e      	b.n	8010646 <_strtod_l+0x99e>
 8010728:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80108a8 <_strtod_l+0xc00>
 801072c:	f04f 0800 	mov.w	r8, #0
 8010730:	e7e7      	b.n	8010702 <_strtod_l+0xa5a>
 8010732:	4b5d      	ldr	r3, [pc, #372]	; (80108a8 <_strtod_l+0xc00>)
 8010734:	4640      	mov	r0, r8
 8010736:	4649      	mov	r1, r9
 8010738:	2200      	movs	r2, #0
 801073a:	f7ef ff7d 	bl	8000638 <__aeabi_dmul>
 801073e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010740:	4680      	mov	r8, r0
 8010742:	4689      	mov	r9, r1
 8010744:	b933      	cbnz	r3, 8010754 <_strtod_l+0xaac>
 8010746:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801074a:	900e      	str	r0, [sp, #56]	; 0x38
 801074c:	930f      	str	r3, [sp, #60]	; 0x3c
 801074e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010752:	e7dd      	b.n	8010710 <_strtod_l+0xa68>
 8010754:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010758:	e7f9      	b.n	801074e <_strtod_l+0xaa6>
 801075a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801075e:	9b04      	ldr	r3, [sp, #16]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d1a8      	bne.n	80106b6 <_strtod_l+0xa0e>
 8010764:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010768:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801076a:	0d1b      	lsrs	r3, r3, #20
 801076c:	051b      	lsls	r3, r3, #20
 801076e:	429a      	cmp	r2, r3
 8010770:	d1a1      	bne.n	80106b6 <_strtod_l+0xa0e>
 8010772:	4640      	mov	r0, r8
 8010774:	4649      	mov	r1, r9
 8010776:	f7f0 fabf 	bl	8000cf8 <__aeabi_d2lz>
 801077a:	f7ef ff2f 	bl	80005dc <__aeabi_l2d>
 801077e:	4602      	mov	r2, r0
 8010780:	460b      	mov	r3, r1
 8010782:	4640      	mov	r0, r8
 8010784:	4649      	mov	r1, r9
 8010786:	f7ef fd9f 	bl	80002c8 <__aeabi_dsub>
 801078a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801078c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010790:	ea43 030a 	orr.w	r3, r3, sl
 8010794:	4313      	orrs	r3, r2
 8010796:	4680      	mov	r8, r0
 8010798:	4689      	mov	r9, r1
 801079a:	d055      	beq.n	8010848 <_strtod_l+0xba0>
 801079c:	a336      	add	r3, pc, #216	; (adr r3, 8010878 <_strtod_l+0xbd0>)
 801079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a2:	f7f0 f9bb 	bl	8000b1c <__aeabi_dcmplt>
 80107a6:	2800      	cmp	r0, #0
 80107a8:	f47f acd0 	bne.w	801014c <_strtod_l+0x4a4>
 80107ac:	a334      	add	r3, pc, #208	; (adr r3, 8010880 <_strtod_l+0xbd8>)
 80107ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b2:	4640      	mov	r0, r8
 80107b4:	4649      	mov	r1, r9
 80107b6:	f7f0 f9cf 	bl	8000b58 <__aeabi_dcmpgt>
 80107ba:	2800      	cmp	r0, #0
 80107bc:	f43f af7b 	beq.w	80106b6 <_strtod_l+0xa0e>
 80107c0:	e4c4      	b.n	801014c <_strtod_l+0x4a4>
 80107c2:	9b04      	ldr	r3, [sp, #16]
 80107c4:	b333      	cbz	r3, 8010814 <_strtod_l+0xb6c>
 80107c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80107cc:	d822      	bhi.n	8010814 <_strtod_l+0xb6c>
 80107ce:	a32e      	add	r3, pc, #184	; (adr r3, 8010888 <_strtod_l+0xbe0>)
 80107d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d4:	4640      	mov	r0, r8
 80107d6:	4649      	mov	r1, r9
 80107d8:	f7f0 f9aa 	bl	8000b30 <__aeabi_dcmple>
 80107dc:	b1a0      	cbz	r0, 8010808 <_strtod_l+0xb60>
 80107de:	4649      	mov	r1, r9
 80107e0:	4640      	mov	r0, r8
 80107e2:	f7f0 fa01 	bl	8000be8 <__aeabi_d2uiz>
 80107e6:	2801      	cmp	r0, #1
 80107e8:	bf38      	it	cc
 80107ea:	2001      	movcc	r0, #1
 80107ec:	f7ef feaa 	bl	8000544 <__aeabi_ui2d>
 80107f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107f2:	4680      	mov	r8, r0
 80107f4:	4689      	mov	r9, r1
 80107f6:	bb23      	cbnz	r3, 8010842 <_strtod_l+0xb9a>
 80107f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80107fc:	9010      	str	r0, [sp, #64]	; 0x40
 80107fe:	9311      	str	r3, [sp, #68]	; 0x44
 8010800:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010804:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801080a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801080c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010810:	1a9b      	subs	r3, r3, r2
 8010812:	9309      	str	r3, [sp, #36]	; 0x24
 8010814:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010818:	eeb0 0a48 	vmov.f32	s0, s16
 801081c:	eef0 0a68 	vmov.f32	s1, s17
 8010820:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010824:	f002 f960 	bl	8012ae8 <__ulp>
 8010828:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801082c:	ec53 2b10 	vmov	r2, r3, d0
 8010830:	f7ef ff02 	bl	8000638 <__aeabi_dmul>
 8010834:	ec53 2b18 	vmov	r2, r3, d8
 8010838:	f7ef fd48 	bl	80002cc <__adddf3>
 801083c:	4682      	mov	sl, r0
 801083e:	468b      	mov	fp, r1
 8010840:	e78d      	b.n	801075e <_strtod_l+0xab6>
 8010842:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010846:	e7db      	b.n	8010800 <_strtod_l+0xb58>
 8010848:	a311      	add	r3, pc, #68	; (adr r3, 8010890 <_strtod_l+0xbe8>)
 801084a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084e:	f7f0 f965 	bl	8000b1c <__aeabi_dcmplt>
 8010852:	e7b2      	b.n	80107ba <_strtod_l+0xb12>
 8010854:	2300      	movs	r3, #0
 8010856:	930a      	str	r3, [sp, #40]	; 0x28
 8010858:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801085a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801085c:	6013      	str	r3, [r2, #0]
 801085e:	f7ff ba6b 	b.w	800fd38 <_strtod_l+0x90>
 8010862:	2a65      	cmp	r2, #101	; 0x65
 8010864:	f43f ab5f 	beq.w	800ff26 <_strtod_l+0x27e>
 8010868:	2a45      	cmp	r2, #69	; 0x45
 801086a:	f43f ab5c 	beq.w	800ff26 <_strtod_l+0x27e>
 801086e:	2301      	movs	r3, #1
 8010870:	f7ff bb94 	b.w	800ff9c <_strtod_l+0x2f4>
 8010874:	f3af 8000 	nop.w
 8010878:	94a03595 	.word	0x94a03595
 801087c:	3fdfffff 	.word	0x3fdfffff
 8010880:	35afe535 	.word	0x35afe535
 8010884:	3fe00000 	.word	0x3fe00000
 8010888:	ffc00000 	.word	0xffc00000
 801088c:	41dfffff 	.word	0x41dfffff
 8010890:	94a03595 	.word	0x94a03595
 8010894:	3fcfffff 	.word	0x3fcfffff
 8010898:	3ff00000 	.word	0x3ff00000
 801089c:	7ff00000 	.word	0x7ff00000
 80108a0:	7fe00000 	.word	0x7fe00000
 80108a4:	7c9fffff 	.word	0x7c9fffff
 80108a8:	3fe00000 	.word	0x3fe00000
 80108ac:	bff00000 	.word	0xbff00000
 80108b0:	7fefffff 	.word	0x7fefffff

080108b4 <_strtod_r>:
 80108b4:	4b01      	ldr	r3, [pc, #4]	; (80108bc <_strtod_r+0x8>)
 80108b6:	f7ff b9f7 	b.w	800fca8 <_strtod_l>
 80108ba:	bf00      	nop
 80108bc:	20000178 	.word	0x20000178

080108c0 <_strtol_l.constprop.0>:
 80108c0:	2b01      	cmp	r3, #1
 80108c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108c6:	d001      	beq.n	80108cc <_strtol_l.constprop.0+0xc>
 80108c8:	2b24      	cmp	r3, #36	; 0x24
 80108ca:	d906      	bls.n	80108da <_strtol_l.constprop.0+0x1a>
 80108cc:	f7fe f98c 	bl	800ebe8 <__errno>
 80108d0:	2316      	movs	r3, #22
 80108d2:	6003      	str	r3, [r0, #0]
 80108d4:	2000      	movs	r0, #0
 80108d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80109c0 <_strtol_l.constprop.0+0x100>
 80108de:	460d      	mov	r5, r1
 80108e0:	462e      	mov	r6, r5
 80108e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80108e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80108ea:	f017 0708 	ands.w	r7, r7, #8
 80108ee:	d1f7      	bne.n	80108e0 <_strtol_l.constprop.0+0x20>
 80108f0:	2c2d      	cmp	r4, #45	; 0x2d
 80108f2:	d132      	bne.n	801095a <_strtol_l.constprop.0+0x9a>
 80108f4:	782c      	ldrb	r4, [r5, #0]
 80108f6:	2701      	movs	r7, #1
 80108f8:	1cb5      	adds	r5, r6, #2
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d05b      	beq.n	80109b6 <_strtol_l.constprop.0+0xf6>
 80108fe:	2b10      	cmp	r3, #16
 8010900:	d109      	bne.n	8010916 <_strtol_l.constprop.0+0x56>
 8010902:	2c30      	cmp	r4, #48	; 0x30
 8010904:	d107      	bne.n	8010916 <_strtol_l.constprop.0+0x56>
 8010906:	782c      	ldrb	r4, [r5, #0]
 8010908:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801090c:	2c58      	cmp	r4, #88	; 0x58
 801090e:	d14d      	bne.n	80109ac <_strtol_l.constprop.0+0xec>
 8010910:	786c      	ldrb	r4, [r5, #1]
 8010912:	2310      	movs	r3, #16
 8010914:	3502      	adds	r5, #2
 8010916:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801091a:	f108 38ff 	add.w	r8, r8, #4294967295
 801091e:	f04f 0c00 	mov.w	ip, #0
 8010922:	fbb8 f9f3 	udiv	r9, r8, r3
 8010926:	4666      	mov	r6, ip
 8010928:	fb03 8a19 	mls	sl, r3, r9, r8
 801092c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010930:	f1be 0f09 	cmp.w	lr, #9
 8010934:	d816      	bhi.n	8010964 <_strtol_l.constprop.0+0xa4>
 8010936:	4674      	mov	r4, lr
 8010938:	42a3      	cmp	r3, r4
 801093a:	dd24      	ble.n	8010986 <_strtol_l.constprop.0+0xc6>
 801093c:	f1bc 0f00 	cmp.w	ip, #0
 8010940:	db1e      	blt.n	8010980 <_strtol_l.constprop.0+0xc0>
 8010942:	45b1      	cmp	r9, r6
 8010944:	d31c      	bcc.n	8010980 <_strtol_l.constprop.0+0xc0>
 8010946:	d101      	bne.n	801094c <_strtol_l.constprop.0+0x8c>
 8010948:	45a2      	cmp	sl, r4
 801094a:	db19      	blt.n	8010980 <_strtol_l.constprop.0+0xc0>
 801094c:	fb06 4603 	mla	r6, r6, r3, r4
 8010950:	f04f 0c01 	mov.w	ip, #1
 8010954:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010958:	e7e8      	b.n	801092c <_strtol_l.constprop.0+0x6c>
 801095a:	2c2b      	cmp	r4, #43	; 0x2b
 801095c:	bf04      	itt	eq
 801095e:	782c      	ldrbeq	r4, [r5, #0]
 8010960:	1cb5      	addeq	r5, r6, #2
 8010962:	e7ca      	b.n	80108fa <_strtol_l.constprop.0+0x3a>
 8010964:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010968:	f1be 0f19 	cmp.w	lr, #25
 801096c:	d801      	bhi.n	8010972 <_strtol_l.constprop.0+0xb2>
 801096e:	3c37      	subs	r4, #55	; 0x37
 8010970:	e7e2      	b.n	8010938 <_strtol_l.constprop.0+0x78>
 8010972:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010976:	f1be 0f19 	cmp.w	lr, #25
 801097a:	d804      	bhi.n	8010986 <_strtol_l.constprop.0+0xc6>
 801097c:	3c57      	subs	r4, #87	; 0x57
 801097e:	e7db      	b.n	8010938 <_strtol_l.constprop.0+0x78>
 8010980:	f04f 3cff 	mov.w	ip, #4294967295
 8010984:	e7e6      	b.n	8010954 <_strtol_l.constprop.0+0x94>
 8010986:	f1bc 0f00 	cmp.w	ip, #0
 801098a:	da05      	bge.n	8010998 <_strtol_l.constprop.0+0xd8>
 801098c:	2322      	movs	r3, #34	; 0x22
 801098e:	6003      	str	r3, [r0, #0]
 8010990:	4646      	mov	r6, r8
 8010992:	b942      	cbnz	r2, 80109a6 <_strtol_l.constprop.0+0xe6>
 8010994:	4630      	mov	r0, r6
 8010996:	e79e      	b.n	80108d6 <_strtol_l.constprop.0+0x16>
 8010998:	b107      	cbz	r7, 801099c <_strtol_l.constprop.0+0xdc>
 801099a:	4276      	negs	r6, r6
 801099c:	2a00      	cmp	r2, #0
 801099e:	d0f9      	beq.n	8010994 <_strtol_l.constprop.0+0xd4>
 80109a0:	f1bc 0f00 	cmp.w	ip, #0
 80109a4:	d000      	beq.n	80109a8 <_strtol_l.constprop.0+0xe8>
 80109a6:	1e69      	subs	r1, r5, #1
 80109a8:	6011      	str	r1, [r2, #0]
 80109aa:	e7f3      	b.n	8010994 <_strtol_l.constprop.0+0xd4>
 80109ac:	2430      	movs	r4, #48	; 0x30
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d1b1      	bne.n	8010916 <_strtol_l.constprop.0+0x56>
 80109b2:	2308      	movs	r3, #8
 80109b4:	e7af      	b.n	8010916 <_strtol_l.constprop.0+0x56>
 80109b6:	2c30      	cmp	r4, #48	; 0x30
 80109b8:	d0a5      	beq.n	8010906 <_strtol_l.constprop.0+0x46>
 80109ba:	230a      	movs	r3, #10
 80109bc:	e7ab      	b.n	8010916 <_strtol_l.constprop.0+0x56>
 80109be:	bf00      	nop
 80109c0:	08014e3d 	.word	0x08014e3d

080109c4 <_strtol_r>:
 80109c4:	f7ff bf7c 	b.w	80108c0 <_strtol_l.constprop.0>

080109c8 <__swbuf_r>:
 80109c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ca:	460e      	mov	r6, r1
 80109cc:	4614      	mov	r4, r2
 80109ce:	4605      	mov	r5, r0
 80109d0:	b118      	cbz	r0, 80109da <__swbuf_r+0x12>
 80109d2:	6983      	ldr	r3, [r0, #24]
 80109d4:	b90b      	cbnz	r3, 80109da <__swbuf_r+0x12>
 80109d6:	f001 f86f 	bl	8011ab8 <__sinit>
 80109da:	4b21      	ldr	r3, [pc, #132]	; (8010a60 <__swbuf_r+0x98>)
 80109dc:	429c      	cmp	r4, r3
 80109de:	d12b      	bne.n	8010a38 <__swbuf_r+0x70>
 80109e0:	686c      	ldr	r4, [r5, #4]
 80109e2:	69a3      	ldr	r3, [r4, #24]
 80109e4:	60a3      	str	r3, [r4, #8]
 80109e6:	89a3      	ldrh	r3, [r4, #12]
 80109e8:	071a      	lsls	r2, r3, #28
 80109ea:	d52f      	bpl.n	8010a4c <__swbuf_r+0x84>
 80109ec:	6923      	ldr	r3, [r4, #16]
 80109ee:	b36b      	cbz	r3, 8010a4c <__swbuf_r+0x84>
 80109f0:	6923      	ldr	r3, [r4, #16]
 80109f2:	6820      	ldr	r0, [r4, #0]
 80109f4:	1ac0      	subs	r0, r0, r3
 80109f6:	6963      	ldr	r3, [r4, #20]
 80109f8:	b2f6      	uxtb	r6, r6
 80109fa:	4283      	cmp	r3, r0
 80109fc:	4637      	mov	r7, r6
 80109fe:	dc04      	bgt.n	8010a0a <__swbuf_r+0x42>
 8010a00:	4621      	mov	r1, r4
 8010a02:	4628      	mov	r0, r5
 8010a04:	f000 ffc4 	bl	8011990 <_fflush_r>
 8010a08:	bb30      	cbnz	r0, 8010a58 <__swbuf_r+0x90>
 8010a0a:	68a3      	ldr	r3, [r4, #8]
 8010a0c:	3b01      	subs	r3, #1
 8010a0e:	60a3      	str	r3, [r4, #8]
 8010a10:	6823      	ldr	r3, [r4, #0]
 8010a12:	1c5a      	adds	r2, r3, #1
 8010a14:	6022      	str	r2, [r4, #0]
 8010a16:	701e      	strb	r6, [r3, #0]
 8010a18:	6963      	ldr	r3, [r4, #20]
 8010a1a:	3001      	adds	r0, #1
 8010a1c:	4283      	cmp	r3, r0
 8010a1e:	d004      	beq.n	8010a2a <__swbuf_r+0x62>
 8010a20:	89a3      	ldrh	r3, [r4, #12]
 8010a22:	07db      	lsls	r3, r3, #31
 8010a24:	d506      	bpl.n	8010a34 <__swbuf_r+0x6c>
 8010a26:	2e0a      	cmp	r6, #10
 8010a28:	d104      	bne.n	8010a34 <__swbuf_r+0x6c>
 8010a2a:	4621      	mov	r1, r4
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	f000 ffaf 	bl	8011990 <_fflush_r>
 8010a32:	b988      	cbnz	r0, 8010a58 <__swbuf_r+0x90>
 8010a34:	4638      	mov	r0, r7
 8010a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a38:	4b0a      	ldr	r3, [pc, #40]	; (8010a64 <__swbuf_r+0x9c>)
 8010a3a:	429c      	cmp	r4, r3
 8010a3c:	d101      	bne.n	8010a42 <__swbuf_r+0x7a>
 8010a3e:	68ac      	ldr	r4, [r5, #8]
 8010a40:	e7cf      	b.n	80109e2 <__swbuf_r+0x1a>
 8010a42:	4b09      	ldr	r3, [pc, #36]	; (8010a68 <__swbuf_r+0xa0>)
 8010a44:	429c      	cmp	r4, r3
 8010a46:	bf08      	it	eq
 8010a48:	68ec      	ldreq	r4, [r5, #12]
 8010a4a:	e7ca      	b.n	80109e2 <__swbuf_r+0x1a>
 8010a4c:	4621      	mov	r1, r4
 8010a4e:	4628      	mov	r0, r5
 8010a50:	f000 f81e 	bl	8010a90 <__swsetup_r>
 8010a54:	2800      	cmp	r0, #0
 8010a56:	d0cb      	beq.n	80109f0 <__swbuf_r+0x28>
 8010a58:	f04f 37ff 	mov.w	r7, #4294967295
 8010a5c:	e7ea      	b.n	8010a34 <__swbuf_r+0x6c>
 8010a5e:	bf00      	nop
 8010a60:	08015080 	.word	0x08015080
 8010a64:	080150a0 	.word	0x080150a0
 8010a68:	08015060 	.word	0x08015060

08010a6c <_write_r>:
 8010a6c:	b538      	push	{r3, r4, r5, lr}
 8010a6e:	4d07      	ldr	r5, [pc, #28]	; (8010a8c <_write_r+0x20>)
 8010a70:	4604      	mov	r4, r0
 8010a72:	4608      	mov	r0, r1
 8010a74:	4611      	mov	r1, r2
 8010a76:	2200      	movs	r2, #0
 8010a78:	602a      	str	r2, [r5, #0]
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	f7f3 fa0e 	bl	8003e9c <_write>
 8010a80:	1c43      	adds	r3, r0, #1
 8010a82:	d102      	bne.n	8010a8a <_write_r+0x1e>
 8010a84:	682b      	ldr	r3, [r5, #0]
 8010a86:	b103      	cbz	r3, 8010a8a <_write_r+0x1e>
 8010a88:	6023      	str	r3, [r4, #0]
 8010a8a:	bd38      	pop	{r3, r4, r5, pc}
 8010a8c:	200031bc 	.word	0x200031bc

08010a90 <__swsetup_r>:
 8010a90:	4b32      	ldr	r3, [pc, #200]	; (8010b5c <__swsetup_r+0xcc>)
 8010a92:	b570      	push	{r4, r5, r6, lr}
 8010a94:	681d      	ldr	r5, [r3, #0]
 8010a96:	4606      	mov	r6, r0
 8010a98:	460c      	mov	r4, r1
 8010a9a:	b125      	cbz	r5, 8010aa6 <__swsetup_r+0x16>
 8010a9c:	69ab      	ldr	r3, [r5, #24]
 8010a9e:	b913      	cbnz	r3, 8010aa6 <__swsetup_r+0x16>
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	f001 f809 	bl	8011ab8 <__sinit>
 8010aa6:	4b2e      	ldr	r3, [pc, #184]	; (8010b60 <__swsetup_r+0xd0>)
 8010aa8:	429c      	cmp	r4, r3
 8010aaa:	d10f      	bne.n	8010acc <__swsetup_r+0x3c>
 8010aac:	686c      	ldr	r4, [r5, #4]
 8010aae:	89a3      	ldrh	r3, [r4, #12]
 8010ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ab4:	0719      	lsls	r1, r3, #28
 8010ab6:	d42c      	bmi.n	8010b12 <__swsetup_r+0x82>
 8010ab8:	06dd      	lsls	r5, r3, #27
 8010aba:	d411      	bmi.n	8010ae0 <__swsetup_r+0x50>
 8010abc:	2309      	movs	r3, #9
 8010abe:	6033      	str	r3, [r6, #0]
 8010ac0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010ac4:	81a3      	strh	r3, [r4, #12]
 8010ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8010aca:	e03e      	b.n	8010b4a <__swsetup_r+0xba>
 8010acc:	4b25      	ldr	r3, [pc, #148]	; (8010b64 <__swsetup_r+0xd4>)
 8010ace:	429c      	cmp	r4, r3
 8010ad0:	d101      	bne.n	8010ad6 <__swsetup_r+0x46>
 8010ad2:	68ac      	ldr	r4, [r5, #8]
 8010ad4:	e7eb      	b.n	8010aae <__swsetup_r+0x1e>
 8010ad6:	4b24      	ldr	r3, [pc, #144]	; (8010b68 <__swsetup_r+0xd8>)
 8010ad8:	429c      	cmp	r4, r3
 8010ada:	bf08      	it	eq
 8010adc:	68ec      	ldreq	r4, [r5, #12]
 8010ade:	e7e6      	b.n	8010aae <__swsetup_r+0x1e>
 8010ae0:	0758      	lsls	r0, r3, #29
 8010ae2:	d512      	bpl.n	8010b0a <__swsetup_r+0x7a>
 8010ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ae6:	b141      	cbz	r1, 8010afa <__swsetup_r+0x6a>
 8010ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010aec:	4299      	cmp	r1, r3
 8010aee:	d002      	beq.n	8010af6 <__swsetup_r+0x66>
 8010af0:	4630      	mov	r0, r6
 8010af2:	f002 f95f 	bl	8012db4 <_free_r>
 8010af6:	2300      	movs	r3, #0
 8010af8:	6363      	str	r3, [r4, #52]	; 0x34
 8010afa:	89a3      	ldrh	r3, [r4, #12]
 8010afc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b00:	81a3      	strh	r3, [r4, #12]
 8010b02:	2300      	movs	r3, #0
 8010b04:	6063      	str	r3, [r4, #4]
 8010b06:	6923      	ldr	r3, [r4, #16]
 8010b08:	6023      	str	r3, [r4, #0]
 8010b0a:	89a3      	ldrh	r3, [r4, #12]
 8010b0c:	f043 0308 	orr.w	r3, r3, #8
 8010b10:	81a3      	strh	r3, [r4, #12]
 8010b12:	6923      	ldr	r3, [r4, #16]
 8010b14:	b94b      	cbnz	r3, 8010b2a <__swsetup_r+0x9a>
 8010b16:	89a3      	ldrh	r3, [r4, #12]
 8010b18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b20:	d003      	beq.n	8010b2a <__swsetup_r+0x9a>
 8010b22:	4621      	mov	r1, r4
 8010b24:	4630      	mov	r0, r6
 8010b26:	f001 fc13 	bl	8012350 <__smakebuf_r>
 8010b2a:	89a0      	ldrh	r0, [r4, #12]
 8010b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b30:	f010 0301 	ands.w	r3, r0, #1
 8010b34:	d00a      	beq.n	8010b4c <__swsetup_r+0xbc>
 8010b36:	2300      	movs	r3, #0
 8010b38:	60a3      	str	r3, [r4, #8]
 8010b3a:	6963      	ldr	r3, [r4, #20]
 8010b3c:	425b      	negs	r3, r3
 8010b3e:	61a3      	str	r3, [r4, #24]
 8010b40:	6923      	ldr	r3, [r4, #16]
 8010b42:	b943      	cbnz	r3, 8010b56 <__swsetup_r+0xc6>
 8010b44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010b48:	d1ba      	bne.n	8010ac0 <__swsetup_r+0x30>
 8010b4a:	bd70      	pop	{r4, r5, r6, pc}
 8010b4c:	0781      	lsls	r1, r0, #30
 8010b4e:	bf58      	it	pl
 8010b50:	6963      	ldrpl	r3, [r4, #20]
 8010b52:	60a3      	str	r3, [r4, #8]
 8010b54:	e7f4      	b.n	8010b40 <__swsetup_r+0xb0>
 8010b56:	2000      	movs	r0, #0
 8010b58:	e7f7      	b.n	8010b4a <__swsetup_r+0xba>
 8010b5a:	bf00      	nop
 8010b5c:	20000110 	.word	0x20000110
 8010b60:	08015080 	.word	0x08015080
 8010b64:	080150a0 	.word	0x080150a0
 8010b68:	08015060 	.word	0x08015060

08010b6c <_close_r>:
 8010b6c:	b538      	push	{r3, r4, r5, lr}
 8010b6e:	4d06      	ldr	r5, [pc, #24]	; (8010b88 <_close_r+0x1c>)
 8010b70:	2300      	movs	r3, #0
 8010b72:	4604      	mov	r4, r0
 8010b74:	4608      	mov	r0, r1
 8010b76:	602b      	str	r3, [r5, #0]
 8010b78:	f7f3 fcf7 	bl	800456a <_close>
 8010b7c:	1c43      	adds	r3, r0, #1
 8010b7e:	d102      	bne.n	8010b86 <_close_r+0x1a>
 8010b80:	682b      	ldr	r3, [r5, #0]
 8010b82:	b103      	cbz	r3, 8010b86 <_close_r+0x1a>
 8010b84:	6023      	str	r3, [r4, #0]
 8010b86:	bd38      	pop	{r3, r4, r5, pc}
 8010b88:	200031bc 	.word	0x200031bc

08010b8c <quorem>:
 8010b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b90:	6903      	ldr	r3, [r0, #16]
 8010b92:	690c      	ldr	r4, [r1, #16]
 8010b94:	42a3      	cmp	r3, r4
 8010b96:	4607      	mov	r7, r0
 8010b98:	f2c0 8081 	blt.w	8010c9e <quorem+0x112>
 8010b9c:	3c01      	subs	r4, #1
 8010b9e:	f101 0814 	add.w	r8, r1, #20
 8010ba2:	f100 0514 	add.w	r5, r0, #20
 8010ba6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010baa:	9301      	str	r3, [sp, #4]
 8010bac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010bb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010bbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010bc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8010bc4:	d331      	bcc.n	8010c2a <quorem+0x9e>
 8010bc6:	f04f 0e00 	mov.w	lr, #0
 8010bca:	4640      	mov	r0, r8
 8010bcc:	46ac      	mov	ip, r5
 8010bce:	46f2      	mov	sl, lr
 8010bd0:	f850 2b04 	ldr.w	r2, [r0], #4
 8010bd4:	b293      	uxth	r3, r2
 8010bd6:	fb06 e303 	mla	r3, r6, r3, lr
 8010bda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	ebaa 0303 	sub.w	r3, sl, r3
 8010be4:	f8dc a000 	ldr.w	sl, [ip]
 8010be8:	0c12      	lsrs	r2, r2, #16
 8010bea:	fa13 f38a 	uxtah	r3, r3, sl
 8010bee:	fb06 e202 	mla	r2, r6, r2, lr
 8010bf2:	9300      	str	r3, [sp, #0]
 8010bf4:	9b00      	ldr	r3, [sp, #0]
 8010bf6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010bfa:	b292      	uxth	r2, r2
 8010bfc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010c00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010c04:	f8bd 3000 	ldrh.w	r3, [sp]
 8010c08:	4581      	cmp	r9, r0
 8010c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c0e:	f84c 3b04 	str.w	r3, [ip], #4
 8010c12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010c16:	d2db      	bcs.n	8010bd0 <quorem+0x44>
 8010c18:	f855 300b 	ldr.w	r3, [r5, fp]
 8010c1c:	b92b      	cbnz	r3, 8010c2a <quorem+0x9e>
 8010c1e:	9b01      	ldr	r3, [sp, #4]
 8010c20:	3b04      	subs	r3, #4
 8010c22:	429d      	cmp	r5, r3
 8010c24:	461a      	mov	r2, r3
 8010c26:	d32e      	bcc.n	8010c86 <quorem+0xfa>
 8010c28:	613c      	str	r4, [r7, #16]
 8010c2a:	4638      	mov	r0, r7
 8010c2c:	f001 feb6 	bl	801299c <__mcmp>
 8010c30:	2800      	cmp	r0, #0
 8010c32:	db24      	blt.n	8010c7e <quorem+0xf2>
 8010c34:	3601      	adds	r6, #1
 8010c36:	4628      	mov	r0, r5
 8010c38:	f04f 0c00 	mov.w	ip, #0
 8010c3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010c40:	f8d0 e000 	ldr.w	lr, [r0]
 8010c44:	b293      	uxth	r3, r2
 8010c46:	ebac 0303 	sub.w	r3, ip, r3
 8010c4a:	0c12      	lsrs	r2, r2, #16
 8010c4c:	fa13 f38e 	uxtah	r3, r3, lr
 8010c50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010c54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010c58:	b29b      	uxth	r3, r3
 8010c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c5e:	45c1      	cmp	r9, r8
 8010c60:	f840 3b04 	str.w	r3, [r0], #4
 8010c64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010c68:	d2e8      	bcs.n	8010c3c <quorem+0xb0>
 8010c6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c72:	b922      	cbnz	r2, 8010c7e <quorem+0xf2>
 8010c74:	3b04      	subs	r3, #4
 8010c76:	429d      	cmp	r5, r3
 8010c78:	461a      	mov	r2, r3
 8010c7a:	d30a      	bcc.n	8010c92 <quorem+0x106>
 8010c7c:	613c      	str	r4, [r7, #16]
 8010c7e:	4630      	mov	r0, r6
 8010c80:	b003      	add	sp, #12
 8010c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c86:	6812      	ldr	r2, [r2, #0]
 8010c88:	3b04      	subs	r3, #4
 8010c8a:	2a00      	cmp	r2, #0
 8010c8c:	d1cc      	bne.n	8010c28 <quorem+0x9c>
 8010c8e:	3c01      	subs	r4, #1
 8010c90:	e7c7      	b.n	8010c22 <quorem+0x96>
 8010c92:	6812      	ldr	r2, [r2, #0]
 8010c94:	3b04      	subs	r3, #4
 8010c96:	2a00      	cmp	r2, #0
 8010c98:	d1f0      	bne.n	8010c7c <quorem+0xf0>
 8010c9a:	3c01      	subs	r4, #1
 8010c9c:	e7eb      	b.n	8010c76 <quorem+0xea>
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	e7ee      	b.n	8010c80 <quorem+0xf4>
 8010ca2:	0000      	movs	r0, r0
 8010ca4:	0000      	movs	r0, r0
	...

08010ca8 <_dtoa_r>:
 8010ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cac:	ed2d 8b04 	vpush	{d8-d9}
 8010cb0:	ec57 6b10 	vmov	r6, r7, d0
 8010cb4:	b093      	sub	sp, #76	; 0x4c
 8010cb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010cb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010cbc:	9106      	str	r1, [sp, #24]
 8010cbe:	ee10 aa10 	vmov	sl, s0
 8010cc2:	4604      	mov	r4, r0
 8010cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8010cc6:	930c      	str	r3, [sp, #48]	; 0x30
 8010cc8:	46bb      	mov	fp, r7
 8010cca:	b975      	cbnz	r5, 8010cea <_dtoa_r+0x42>
 8010ccc:	2010      	movs	r0, #16
 8010cce:	f001 fb7f 	bl	80123d0 <malloc>
 8010cd2:	4602      	mov	r2, r0
 8010cd4:	6260      	str	r0, [r4, #36]	; 0x24
 8010cd6:	b920      	cbnz	r0, 8010ce2 <_dtoa_r+0x3a>
 8010cd8:	4ba7      	ldr	r3, [pc, #668]	; (8010f78 <_dtoa_r+0x2d0>)
 8010cda:	21ea      	movs	r1, #234	; 0xea
 8010cdc:	48a7      	ldr	r0, [pc, #668]	; (8010f7c <_dtoa_r+0x2d4>)
 8010cde:	f003 f857 	bl	8013d90 <__assert_func>
 8010ce2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010ce6:	6005      	str	r5, [r0, #0]
 8010ce8:	60c5      	str	r5, [r0, #12]
 8010cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cec:	6819      	ldr	r1, [r3, #0]
 8010cee:	b151      	cbz	r1, 8010d06 <_dtoa_r+0x5e>
 8010cf0:	685a      	ldr	r2, [r3, #4]
 8010cf2:	604a      	str	r2, [r1, #4]
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	4093      	lsls	r3, r2
 8010cf8:	608b      	str	r3, [r1, #8]
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f001 fbc2 	bl	8012484 <_Bfree>
 8010d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d02:	2200      	movs	r2, #0
 8010d04:	601a      	str	r2, [r3, #0]
 8010d06:	1e3b      	subs	r3, r7, #0
 8010d08:	bfaa      	itet	ge
 8010d0a:	2300      	movge	r3, #0
 8010d0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010d10:	f8c8 3000 	strge.w	r3, [r8]
 8010d14:	4b9a      	ldr	r3, [pc, #616]	; (8010f80 <_dtoa_r+0x2d8>)
 8010d16:	bfbc      	itt	lt
 8010d18:	2201      	movlt	r2, #1
 8010d1a:	f8c8 2000 	strlt.w	r2, [r8]
 8010d1e:	ea33 030b 	bics.w	r3, r3, fp
 8010d22:	d11b      	bne.n	8010d5c <_dtoa_r+0xb4>
 8010d24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d26:	f242 730f 	movw	r3, #9999	; 0x270f
 8010d2a:	6013      	str	r3, [r2, #0]
 8010d2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d30:	4333      	orrs	r3, r6
 8010d32:	f000 8592 	beq.w	801185a <_dtoa_r+0xbb2>
 8010d36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d38:	b963      	cbnz	r3, 8010d54 <_dtoa_r+0xac>
 8010d3a:	4b92      	ldr	r3, [pc, #584]	; (8010f84 <_dtoa_r+0x2dc>)
 8010d3c:	e022      	b.n	8010d84 <_dtoa_r+0xdc>
 8010d3e:	4b92      	ldr	r3, [pc, #584]	; (8010f88 <_dtoa_r+0x2e0>)
 8010d40:	9301      	str	r3, [sp, #4]
 8010d42:	3308      	adds	r3, #8
 8010d44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010d46:	6013      	str	r3, [r2, #0]
 8010d48:	9801      	ldr	r0, [sp, #4]
 8010d4a:	b013      	add	sp, #76	; 0x4c
 8010d4c:	ecbd 8b04 	vpop	{d8-d9}
 8010d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d54:	4b8b      	ldr	r3, [pc, #556]	; (8010f84 <_dtoa_r+0x2dc>)
 8010d56:	9301      	str	r3, [sp, #4]
 8010d58:	3303      	adds	r3, #3
 8010d5a:	e7f3      	b.n	8010d44 <_dtoa_r+0x9c>
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	2300      	movs	r3, #0
 8010d60:	4650      	mov	r0, sl
 8010d62:	4659      	mov	r1, fp
 8010d64:	f7ef fed0 	bl	8000b08 <__aeabi_dcmpeq>
 8010d68:	ec4b ab19 	vmov	d9, sl, fp
 8010d6c:	4680      	mov	r8, r0
 8010d6e:	b158      	cbz	r0, 8010d88 <_dtoa_r+0xe0>
 8010d70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d72:	2301      	movs	r3, #1
 8010d74:	6013      	str	r3, [r2, #0]
 8010d76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	f000 856b 	beq.w	8011854 <_dtoa_r+0xbac>
 8010d7e:	4883      	ldr	r0, [pc, #524]	; (8010f8c <_dtoa_r+0x2e4>)
 8010d80:	6018      	str	r0, [r3, #0]
 8010d82:	1e43      	subs	r3, r0, #1
 8010d84:	9301      	str	r3, [sp, #4]
 8010d86:	e7df      	b.n	8010d48 <_dtoa_r+0xa0>
 8010d88:	ec4b ab10 	vmov	d0, sl, fp
 8010d8c:	aa10      	add	r2, sp, #64	; 0x40
 8010d8e:	a911      	add	r1, sp, #68	; 0x44
 8010d90:	4620      	mov	r0, r4
 8010d92:	f001 ff25 	bl	8012be0 <__d2b>
 8010d96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010d9a:	ee08 0a10 	vmov	s16, r0
 8010d9e:	2d00      	cmp	r5, #0
 8010da0:	f000 8084 	beq.w	8010eac <_dtoa_r+0x204>
 8010da4:	ee19 3a90 	vmov	r3, s19
 8010da8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010dac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010db0:	4656      	mov	r6, sl
 8010db2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010db6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010dba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010dbe:	4b74      	ldr	r3, [pc, #464]	; (8010f90 <_dtoa_r+0x2e8>)
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	4630      	mov	r0, r6
 8010dc4:	4639      	mov	r1, r7
 8010dc6:	f7ef fa7f 	bl	80002c8 <__aeabi_dsub>
 8010dca:	a365      	add	r3, pc, #404	; (adr r3, 8010f60 <_dtoa_r+0x2b8>)
 8010dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd0:	f7ef fc32 	bl	8000638 <__aeabi_dmul>
 8010dd4:	a364      	add	r3, pc, #400	; (adr r3, 8010f68 <_dtoa_r+0x2c0>)
 8010dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dda:	f7ef fa77 	bl	80002cc <__adddf3>
 8010dde:	4606      	mov	r6, r0
 8010de0:	4628      	mov	r0, r5
 8010de2:	460f      	mov	r7, r1
 8010de4:	f7ef fbbe 	bl	8000564 <__aeabi_i2d>
 8010de8:	a361      	add	r3, pc, #388	; (adr r3, 8010f70 <_dtoa_r+0x2c8>)
 8010dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dee:	f7ef fc23 	bl	8000638 <__aeabi_dmul>
 8010df2:	4602      	mov	r2, r0
 8010df4:	460b      	mov	r3, r1
 8010df6:	4630      	mov	r0, r6
 8010df8:	4639      	mov	r1, r7
 8010dfa:	f7ef fa67 	bl	80002cc <__adddf3>
 8010dfe:	4606      	mov	r6, r0
 8010e00:	460f      	mov	r7, r1
 8010e02:	f7ef fec9 	bl	8000b98 <__aeabi_d2iz>
 8010e06:	2200      	movs	r2, #0
 8010e08:	9000      	str	r0, [sp, #0]
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	4630      	mov	r0, r6
 8010e0e:	4639      	mov	r1, r7
 8010e10:	f7ef fe84 	bl	8000b1c <__aeabi_dcmplt>
 8010e14:	b150      	cbz	r0, 8010e2c <_dtoa_r+0x184>
 8010e16:	9800      	ldr	r0, [sp, #0]
 8010e18:	f7ef fba4 	bl	8000564 <__aeabi_i2d>
 8010e1c:	4632      	mov	r2, r6
 8010e1e:	463b      	mov	r3, r7
 8010e20:	f7ef fe72 	bl	8000b08 <__aeabi_dcmpeq>
 8010e24:	b910      	cbnz	r0, 8010e2c <_dtoa_r+0x184>
 8010e26:	9b00      	ldr	r3, [sp, #0]
 8010e28:	3b01      	subs	r3, #1
 8010e2a:	9300      	str	r3, [sp, #0]
 8010e2c:	9b00      	ldr	r3, [sp, #0]
 8010e2e:	2b16      	cmp	r3, #22
 8010e30:	d85a      	bhi.n	8010ee8 <_dtoa_r+0x240>
 8010e32:	9a00      	ldr	r2, [sp, #0]
 8010e34:	4b57      	ldr	r3, [pc, #348]	; (8010f94 <_dtoa_r+0x2ec>)
 8010e36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3e:	ec51 0b19 	vmov	r0, r1, d9
 8010e42:	f7ef fe6b 	bl	8000b1c <__aeabi_dcmplt>
 8010e46:	2800      	cmp	r0, #0
 8010e48:	d050      	beq.n	8010eec <_dtoa_r+0x244>
 8010e4a:	9b00      	ldr	r3, [sp, #0]
 8010e4c:	3b01      	subs	r3, #1
 8010e4e:	9300      	str	r3, [sp, #0]
 8010e50:	2300      	movs	r3, #0
 8010e52:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e56:	1b5d      	subs	r5, r3, r5
 8010e58:	1e6b      	subs	r3, r5, #1
 8010e5a:	9305      	str	r3, [sp, #20]
 8010e5c:	bf45      	ittet	mi
 8010e5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010e62:	9304      	strmi	r3, [sp, #16]
 8010e64:	2300      	movpl	r3, #0
 8010e66:	2300      	movmi	r3, #0
 8010e68:	bf4c      	ite	mi
 8010e6a:	9305      	strmi	r3, [sp, #20]
 8010e6c:	9304      	strpl	r3, [sp, #16]
 8010e6e:	9b00      	ldr	r3, [sp, #0]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	db3d      	blt.n	8010ef0 <_dtoa_r+0x248>
 8010e74:	9b05      	ldr	r3, [sp, #20]
 8010e76:	9a00      	ldr	r2, [sp, #0]
 8010e78:	920a      	str	r2, [sp, #40]	; 0x28
 8010e7a:	4413      	add	r3, r2
 8010e7c:	9305      	str	r3, [sp, #20]
 8010e7e:	2300      	movs	r3, #0
 8010e80:	9307      	str	r3, [sp, #28]
 8010e82:	9b06      	ldr	r3, [sp, #24]
 8010e84:	2b09      	cmp	r3, #9
 8010e86:	f200 8089 	bhi.w	8010f9c <_dtoa_r+0x2f4>
 8010e8a:	2b05      	cmp	r3, #5
 8010e8c:	bfc4      	itt	gt
 8010e8e:	3b04      	subgt	r3, #4
 8010e90:	9306      	strgt	r3, [sp, #24]
 8010e92:	9b06      	ldr	r3, [sp, #24]
 8010e94:	f1a3 0302 	sub.w	r3, r3, #2
 8010e98:	bfcc      	ite	gt
 8010e9a:	2500      	movgt	r5, #0
 8010e9c:	2501      	movle	r5, #1
 8010e9e:	2b03      	cmp	r3, #3
 8010ea0:	f200 8087 	bhi.w	8010fb2 <_dtoa_r+0x30a>
 8010ea4:	e8df f003 	tbb	[pc, r3]
 8010ea8:	59383a2d 	.word	0x59383a2d
 8010eac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010eb0:	441d      	add	r5, r3
 8010eb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010eb6:	2b20      	cmp	r3, #32
 8010eb8:	bfc1      	itttt	gt
 8010eba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010ebe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010ec2:	fa0b f303 	lslgt.w	r3, fp, r3
 8010ec6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010eca:	bfda      	itte	le
 8010ecc:	f1c3 0320 	rsble	r3, r3, #32
 8010ed0:	fa06 f003 	lslle.w	r0, r6, r3
 8010ed4:	4318      	orrgt	r0, r3
 8010ed6:	f7ef fb35 	bl	8000544 <__aeabi_ui2d>
 8010eda:	2301      	movs	r3, #1
 8010edc:	4606      	mov	r6, r0
 8010ede:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010ee2:	3d01      	subs	r5, #1
 8010ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8010ee6:	e76a      	b.n	8010dbe <_dtoa_r+0x116>
 8010ee8:	2301      	movs	r3, #1
 8010eea:	e7b2      	b.n	8010e52 <_dtoa_r+0x1aa>
 8010eec:	900b      	str	r0, [sp, #44]	; 0x2c
 8010eee:	e7b1      	b.n	8010e54 <_dtoa_r+0x1ac>
 8010ef0:	9b04      	ldr	r3, [sp, #16]
 8010ef2:	9a00      	ldr	r2, [sp, #0]
 8010ef4:	1a9b      	subs	r3, r3, r2
 8010ef6:	9304      	str	r3, [sp, #16]
 8010ef8:	4253      	negs	r3, r2
 8010efa:	9307      	str	r3, [sp, #28]
 8010efc:	2300      	movs	r3, #0
 8010efe:	930a      	str	r3, [sp, #40]	; 0x28
 8010f00:	e7bf      	b.n	8010e82 <_dtoa_r+0x1da>
 8010f02:	2300      	movs	r3, #0
 8010f04:	9308      	str	r3, [sp, #32]
 8010f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	dc55      	bgt.n	8010fb8 <_dtoa_r+0x310>
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010f12:	461a      	mov	r2, r3
 8010f14:	9209      	str	r2, [sp, #36]	; 0x24
 8010f16:	e00c      	b.n	8010f32 <_dtoa_r+0x28a>
 8010f18:	2301      	movs	r3, #1
 8010f1a:	e7f3      	b.n	8010f04 <_dtoa_r+0x25c>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f20:	9308      	str	r3, [sp, #32]
 8010f22:	9b00      	ldr	r3, [sp, #0]
 8010f24:	4413      	add	r3, r2
 8010f26:	9302      	str	r3, [sp, #8]
 8010f28:	3301      	adds	r3, #1
 8010f2a:	2b01      	cmp	r3, #1
 8010f2c:	9303      	str	r3, [sp, #12]
 8010f2e:	bfb8      	it	lt
 8010f30:	2301      	movlt	r3, #1
 8010f32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010f34:	2200      	movs	r2, #0
 8010f36:	6042      	str	r2, [r0, #4]
 8010f38:	2204      	movs	r2, #4
 8010f3a:	f102 0614 	add.w	r6, r2, #20
 8010f3e:	429e      	cmp	r6, r3
 8010f40:	6841      	ldr	r1, [r0, #4]
 8010f42:	d93d      	bls.n	8010fc0 <_dtoa_r+0x318>
 8010f44:	4620      	mov	r0, r4
 8010f46:	f001 fa5d 	bl	8012404 <_Balloc>
 8010f4a:	9001      	str	r0, [sp, #4]
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	d13b      	bne.n	8010fc8 <_dtoa_r+0x320>
 8010f50:	4b11      	ldr	r3, [pc, #68]	; (8010f98 <_dtoa_r+0x2f0>)
 8010f52:	4602      	mov	r2, r0
 8010f54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010f58:	e6c0      	b.n	8010cdc <_dtoa_r+0x34>
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	e7df      	b.n	8010f1e <_dtoa_r+0x276>
 8010f5e:	bf00      	nop
 8010f60:	636f4361 	.word	0x636f4361
 8010f64:	3fd287a7 	.word	0x3fd287a7
 8010f68:	8b60c8b3 	.word	0x8b60c8b3
 8010f6c:	3fc68a28 	.word	0x3fc68a28
 8010f70:	509f79fb 	.word	0x509f79fb
 8010f74:	3fd34413 	.word	0x3fd34413
 8010f78:	08014fdd 	.word	0x08014fdd
 8010f7c:	08014ff4 	.word	0x08014ff4
 8010f80:	7ff00000 	.word	0x7ff00000
 8010f84:	08014fd9 	.word	0x08014fd9
 8010f88:	08014fd0 	.word	0x08014fd0
 8010f8c:	080152aa 	.word	0x080152aa
 8010f90:	3ff80000 	.word	0x3ff80000
 8010f94:	080151c0 	.word	0x080151c0
 8010f98:	0801504f 	.word	0x0801504f
 8010f9c:	2501      	movs	r5, #1
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	9306      	str	r3, [sp, #24]
 8010fa2:	9508      	str	r5, [sp, #32]
 8010fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8010fa8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010fac:	2200      	movs	r2, #0
 8010fae:	2312      	movs	r3, #18
 8010fb0:	e7b0      	b.n	8010f14 <_dtoa_r+0x26c>
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	9308      	str	r3, [sp, #32]
 8010fb6:	e7f5      	b.n	8010fa4 <_dtoa_r+0x2fc>
 8010fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010fbe:	e7b8      	b.n	8010f32 <_dtoa_r+0x28a>
 8010fc0:	3101      	adds	r1, #1
 8010fc2:	6041      	str	r1, [r0, #4]
 8010fc4:	0052      	lsls	r2, r2, #1
 8010fc6:	e7b8      	b.n	8010f3a <_dtoa_r+0x292>
 8010fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fca:	9a01      	ldr	r2, [sp, #4]
 8010fcc:	601a      	str	r2, [r3, #0]
 8010fce:	9b03      	ldr	r3, [sp, #12]
 8010fd0:	2b0e      	cmp	r3, #14
 8010fd2:	f200 809d 	bhi.w	8011110 <_dtoa_r+0x468>
 8010fd6:	2d00      	cmp	r5, #0
 8010fd8:	f000 809a 	beq.w	8011110 <_dtoa_r+0x468>
 8010fdc:	9b00      	ldr	r3, [sp, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	dd32      	ble.n	8011048 <_dtoa_r+0x3a0>
 8010fe2:	4ab7      	ldr	r2, [pc, #732]	; (80112c0 <_dtoa_r+0x618>)
 8010fe4:	f003 030f 	and.w	r3, r3, #15
 8010fe8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010fec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010ff0:	9b00      	ldr	r3, [sp, #0]
 8010ff2:	05d8      	lsls	r0, r3, #23
 8010ff4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010ff8:	d516      	bpl.n	8011028 <_dtoa_r+0x380>
 8010ffa:	4bb2      	ldr	r3, [pc, #712]	; (80112c4 <_dtoa_r+0x61c>)
 8010ffc:	ec51 0b19 	vmov	r0, r1, d9
 8011000:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011004:	f7ef fc42 	bl	800088c <__aeabi_ddiv>
 8011008:	f007 070f 	and.w	r7, r7, #15
 801100c:	4682      	mov	sl, r0
 801100e:	468b      	mov	fp, r1
 8011010:	2503      	movs	r5, #3
 8011012:	4eac      	ldr	r6, [pc, #688]	; (80112c4 <_dtoa_r+0x61c>)
 8011014:	b957      	cbnz	r7, 801102c <_dtoa_r+0x384>
 8011016:	4642      	mov	r2, r8
 8011018:	464b      	mov	r3, r9
 801101a:	4650      	mov	r0, sl
 801101c:	4659      	mov	r1, fp
 801101e:	f7ef fc35 	bl	800088c <__aeabi_ddiv>
 8011022:	4682      	mov	sl, r0
 8011024:	468b      	mov	fp, r1
 8011026:	e028      	b.n	801107a <_dtoa_r+0x3d2>
 8011028:	2502      	movs	r5, #2
 801102a:	e7f2      	b.n	8011012 <_dtoa_r+0x36a>
 801102c:	07f9      	lsls	r1, r7, #31
 801102e:	d508      	bpl.n	8011042 <_dtoa_r+0x39a>
 8011030:	4640      	mov	r0, r8
 8011032:	4649      	mov	r1, r9
 8011034:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011038:	f7ef fafe 	bl	8000638 <__aeabi_dmul>
 801103c:	3501      	adds	r5, #1
 801103e:	4680      	mov	r8, r0
 8011040:	4689      	mov	r9, r1
 8011042:	107f      	asrs	r7, r7, #1
 8011044:	3608      	adds	r6, #8
 8011046:	e7e5      	b.n	8011014 <_dtoa_r+0x36c>
 8011048:	f000 809b 	beq.w	8011182 <_dtoa_r+0x4da>
 801104c:	9b00      	ldr	r3, [sp, #0]
 801104e:	4f9d      	ldr	r7, [pc, #628]	; (80112c4 <_dtoa_r+0x61c>)
 8011050:	425e      	negs	r6, r3
 8011052:	4b9b      	ldr	r3, [pc, #620]	; (80112c0 <_dtoa_r+0x618>)
 8011054:	f006 020f 	and.w	r2, r6, #15
 8011058:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011060:	ec51 0b19 	vmov	r0, r1, d9
 8011064:	f7ef fae8 	bl	8000638 <__aeabi_dmul>
 8011068:	1136      	asrs	r6, r6, #4
 801106a:	4682      	mov	sl, r0
 801106c:	468b      	mov	fp, r1
 801106e:	2300      	movs	r3, #0
 8011070:	2502      	movs	r5, #2
 8011072:	2e00      	cmp	r6, #0
 8011074:	d17a      	bne.n	801116c <_dtoa_r+0x4c4>
 8011076:	2b00      	cmp	r3, #0
 8011078:	d1d3      	bne.n	8011022 <_dtoa_r+0x37a>
 801107a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801107c:	2b00      	cmp	r3, #0
 801107e:	f000 8082 	beq.w	8011186 <_dtoa_r+0x4de>
 8011082:	4b91      	ldr	r3, [pc, #580]	; (80112c8 <_dtoa_r+0x620>)
 8011084:	2200      	movs	r2, #0
 8011086:	4650      	mov	r0, sl
 8011088:	4659      	mov	r1, fp
 801108a:	f7ef fd47 	bl	8000b1c <__aeabi_dcmplt>
 801108e:	2800      	cmp	r0, #0
 8011090:	d079      	beq.n	8011186 <_dtoa_r+0x4de>
 8011092:	9b03      	ldr	r3, [sp, #12]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d076      	beq.n	8011186 <_dtoa_r+0x4de>
 8011098:	9b02      	ldr	r3, [sp, #8]
 801109a:	2b00      	cmp	r3, #0
 801109c:	dd36      	ble.n	801110c <_dtoa_r+0x464>
 801109e:	9b00      	ldr	r3, [sp, #0]
 80110a0:	4650      	mov	r0, sl
 80110a2:	4659      	mov	r1, fp
 80110a4:	1e5f      	subs	r7, r3, #1
 80110a6:	2200      	movs	r2, #0
 80110a8:	4b88      	ldr	r3, [pc, #544]	; (80112cc <_dtoa_r+0x624>)
 80110aa:	f7ef fac5 	bl	8000638 <__aeabi_dmul>
 80110ae:	9e02      	ldr	r6, [sp, #8]
 80110b0:	4682      	mov	sl, r0
 80110b2:	468b      	mov	fp, r1
 80110b4:	3501      	adds	r5, #1
 80110b6:	4628      	mov	r0, r5
 80110b8:	f7ef fa54 	bl	8000564 <__aeabi_i2d>
 80110bc:	4652      	mov	r2, sl
 80110be:	465b      	mov	r3, fp
 80110c0:	f7ef faba 	bl	8000638 <__aeabi_dmul>
 80110c4:	4b82      	ldr	r3, [pc, #520]	; (80112d0 <_dtoa_r+0x628>)
 80110c6:	2200      	movs	r2, #0
 80110c8:	f7ef f900 	bl	80002cc <__adddf3>
 80110cc:	46d0      	mov	r8, sl
 80110ce:	46d9      	mov	r9, fp
 80110d0:	4682      	mov	sl, r0
 80110d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80110d6:	2e00      	cmp	r6, #0
 80110d8:	d158      	bne.n	801118c <_dtoa_r+0x4e4>
 80110da:	4b7e      	ldr	r3, [pc, #504]	; (80112d4 <_dtoa_r+0x62c>)
 80110dc:	2200      	movs	r2, #0
 80110de:	4640      	mov	r0, r8
 80110e0:	4649      	mov	r1, r9
 80110e2:	f7ef f8f1 	bl	80002c8 <__aeabi_dsub>
 80110e6:	4652      	mov	r2, sl
 80110e8:	465b      	mov	r3, fp
 80110ea:	4680      	mov	r8, r0
 80110ec:	4689      	mov	r9, r1
 80110ee:	f7ef fd33 	bl	8000b58 <__aeabi_dcmpgt>
 80110f2:	2800      	cmp	r0, #0
 80110f4:	f040 8295 	bne.w	8011622 <_dtoa_r+0x97a>
 80110f8:	4652      	mov	r2, sl
 80110fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80110fe:	4640      	mov	r0, r8
 8011100:	4649      	mov	r1, r9
 8011102:	f7ef fd0b 	bl	8000b1c <__aeabi_dcmplt>
 8011106:	2800      	cmp	r0, #0
 8011108:	f040 8289 	bne.w	801161e <_dtoa_r+0x976>
 801110c:	ec5b ab19 	vmov	sl, fp, d9
 8011110:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011112:	2b00      	cmp	r3, #0
 8011114:	f2c0 8148 	blt.w	80113a8 <_dtoa_r+0x700>
 8011118:	9a00      	ldr	r2, [sp, #0]
 801111a:	2a0e      	cmp	r2, #14
 801111c:	f300 8144 	bgt.w	80113a8 <_dtoa_r+0x700>
 8011120:	4b67      	ldr	r3, [pc, #412]	; (80112c0 <_dtoa_r+0x618>)
 8011122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011126:	e9d3 8900 	ldrd	r8, r9, [r3]
 801112a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801112c:	2b00      	cmp	r3, #0
 801112e:	f280 80d5 	bge.w	80112dc <_dtoa_r+0x634>
 8011132:	9b03      	ldr	r3, [sp, #12]
 8011134:	2b00      	cmp	r3, #0
 8011136:	f300 80d1 	bgt.w	80112dc <_dtoa_r+0x634>
 801113a:	f040 826f 	bne.w	801161c <_dtoa_r+0x974>
 801113e:	4b65      	ldr	r3, [pc, #404]	; (80112d4 <_dtoa_r+0x62c>)
 8011140:	2200      	movs	r2, #0
 8011142:	4640      	mov	r0, r8
 8011144:	4649      	mov	r1, r9
 8011146:	f7ef fa77 	bl	8000638 <__aeabi_dmul>
 801114a:	4652      	mov	r2, sl
 801114c:	465b      	mov	r3, fp
 801114e:	f7ef fcf9 	bl	8000b44 <__aeabi_dcmpge>
 8011152:	9e03      	ldr	r6, [sp, #12]
 8011154:	4637      	mov	r7, r6
 8011156:	2800      	cmp	r0, #0
 8011158:	f040 8245 	bne.w	80115e6 <_dtoa_r+0x93e>
 801115c:	9d01      	ldr	r5, [sp, #4]
 801115e:	2331      	movs	r3, #49	; 0x31
 8011160:	f805 3b01 	strb.w	r3, [r5], #1
 8011164:	9b00      	ldr	r3, [sp, #0]
 8011166:	3301      	adds	r3, #1
 8011168:	9300      	str	r3, [sp, #0]
 801116a:	e240      	b.n	80115ee <_dtoa_r+0x946>
 801116c:	07f2      	lsls	r2, r6, #31
 801116e:	d505      	bpl.n	801117c <_dtoa_r+0x4d4>
 8011170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011174:	f7ef fa60 	bl	8000638 <__aeabi_dmul>
 8011178:	3501      	adds	r5, #1
 801117a:	2301      	movs	r3, #1
 801117c:	1076      	asrs	r6, r6, #1
 801117e:	3708      	adds	r7, #8
 8011180:	e777      	b.n	8011072 <_dtoa_r+0x3ca>
 8011182:	2502      	movs	r5, #2
 8011184:	e779      	b.n	801107a <_dtoa_r+0x3d2>
 8011186:	9f00      	ldr	r7, [sp, #0]
 8011188:	9e03      	ldr	r6, [sp, #12]
 801118a:	e794      	b.n	80110b6 <_dtoa_r+0x40e>
 801118c:	9901      	ldr	r1, [sp, #4]
 801118e:	4b4c      	ldr	r3, [pc, #304]	; (80112c0 <_dtoa_r+0x618>)
 8011190:	4431      	add	r1, r6
 8011192:	910d      	str	r1, [sp, #52]	; 0x34
 8011194:	9908      	ldr	r1, [sp, #32]
 8011196:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801119a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801119e:	2900      	cmp	r1, #0
 80111a0:	d043      	beq.n	801122a <_dtoa_r+0x582>
 80111a2:	494d      	ldr	r1, [pc, #308]	; (80112d8 <_dtoa_r+0x630>)
 80111a4:	2000      	movs	r0, #0
 80111a6:	f7ef fb71 	bl	800088c <__aeabi_ddiv>
 80111aa:	4652      	mov	r2, sl
 80111ac:	465b      	mov	r3, fp
 80111ae:	f7ef f88b 	bl	80002c8 <__aeabi_dsub>
 80111b2:	9d01      	ldr	r5, [sp, #4]
 80111b4:	4682      	mov	sl, r0
 80111b6:	468b      	mov	fp, r1
 80111b8:	4649      	mov	r1, r9
 80111ba:	4640      	mov	r0, r8
 80111bc:	f7ef fcec 	bl	8000b98 <__aeabi_d2iz>
 80111c0:	4606      	mov	r6, r0
 80111c2:	f7ef f9cf 	bl	8000564 <__aeabi_i2d>
 80111c6:	4602      	mov	r2, r0
 80111c8:	460b      	mov	r3, r1
 80111ca:	4640      	mov	r0, r8
 80111cc:	4649      	mov	r1, r9
 80111ce:	f7ef f87b 	bl	80002c8 <__aeabi_dsub>
 80111d2:	3630      	adds	r6, #48	; 0x30
 80111d4:	f805 6b01 	strb.w	r6, [r5], #1
 80111d8:	4652      	mov	r2, sl
 80111da:	465b      	mov	r3, fp
 80111dc:	4680      	mov	r8, r0
 80111de:	4689      	mov	r9, r1
 80111e0:	f7ef fc9c 	bl	8000b1c <__aeabi_dcmplt>
 80111e4:	2800      	cmp	r0, #0
 80111e6:	d163      	bne.n	80112b0 <_dtoa_r+0x608>
 80111e8:	4642      	mov	r2, r8
 80111ea:	464b      	mov	r3, r9
 80111ec:	4936      	ldr	r1, [pc, #216]	; (80112c8 <_dtoa_r+0x620>)
 80111ee:	2000      	movs	r0, #0
 80111f0:	f7ef f86a 	bl	80002c8 <__aeabi_dsub>
 80111f4:	4652      	mov	r2, sl
 80111f6:	465b      	mov	r3, fp
 80111f8:	f7ef fc90 	bl	8000b1c <__aeabi_dcmplt>
 80111fc:	2800      	cmp	r0, #0
 80111fe:	f040 80b5 	bne.w	801136c <_dtoa_r+0x6c4>
 8011202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011204:	429d      	cmp	r5, r3
 8011206:	d081      	beq.n	801110c <_dtoa_r+0x464>
 8011208:	4b30      	ldr	r3, [pc, #192]	; (80112cc <_dtoa_r+0x624>)
 801120a:	2200      	movs	r2, #0
 801120c:	4650      	mov	r0, sl
 801120e:	4659      	mov	r1, fp
 8011210:	f7ef fa12 	bl	8000638 <__aeabi_dmul>
 8011214:	4b2d      	ldr	r3, [pc, #180]	; (80112cc <_dtoa_r+0x624>)
 8011216:	4682      	mov	sl, r0
 8011218:	468b      	mov	fp, r1
 801121a:	4640      	mov	r0, r8
 801121c:	4649      	mov	r1, r9
 801121e:	2200      	movs	r2, #0
 8011220:	f7ef fa0a 	bl	8000638 <__aeabi_dmul>
 8011224:	4680      	mov	r8, r0
 8011226:	4689      	mov	r9, r1
 8011228:	e7c6      	b.n	80111b8 <_dtoa_r+0x510>
 801122a:	4650      	mov	r0, sl
 801122c:	4659      	mov	r1, fp
 801122e:	f7ef fa03 	bl	8000638 <__aeabi_dmul>
 8011232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011234:	9d01      	ldr	r5, [sp, #4]
 8011236:	930f      	str	r3, [sp, #60]	; 0x3c
 8011238:	4682      	mov	sl, r0
 801123a:	468b      	mov	fp, r1
 801123c:	4649      	mov	r1, r9
 801123e:	4640      	mov	r0, r8
 8011240:	f7ef fcaa 	bl	8000b98 <__aeabi_d2iz>
 8011244:	4606      	mov	r6, r0
 8011246:	f7ef f98d 	bl	8000564 <__aeabi_i2d>
 801124a:	3630      	adds	r6, #48	; 0x30
 801124c:	4602      	mov	r2, r0
 801124e:	460b      	mov	r3, r1
 8011250:	4640      	mov	r0, r8
 8011252:	4649      	mov	r1, r9
 8011254:	f7ef f838 	bl	80002c8 <__aeabi_dsub>
 8011258:	f805 6b01 	strb.w	r6, [r5], #1
 801125c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801125e:	429d      	cmp	r5, r3
 8011260:	4680      	mov	r8, r0
 8011262:	4689      	mov	r9, r1
 8011264:	f04f 0200 	mov.w	r2, #0
 8011268:	d124      	bne.n	80112b4 <_dtoa_r+0x60c>
 801126a:	4b1b      	ldr	r3, [pc, #108]	; (80112d8 <_dtoa_r+0x630>)
 801126c:	4650      	mov	r0, sl
 801126e:	4659      	mov	r1, fp
 8011270:	f7ef f82c 	bl	80002cc <__adddf3>
 8011274:	4602      	mov	r2, r0
 8011276:	460b      	mov	r3, r1
 8011278:	4640      	mov	r0, r8
 801127a:	4649      	mov	r1, r9
 801127c:	f7ef fc6c 	bl	8000b58 <__aeabi_dcmpgt>
 8011280:	2800      	cmp	r0, #0
 8011282:	d173      	bne.n	801136c <_dtoa_r+0x6c4>
 8011284:	4652      	mov	r2, sl
 8011286:	465b      	mov	r3, fp
 8011288:	4913      	ldr	r1, [pc, #76]	; (80112d8 <_dtoa_r+0x630>)
 801128a:	2000      	movs	r0, #0
 801128c:	f7ef f81c 	bl	80002c8 <__aeabi_dsub>
 8011290:	4602      	mov	r2, r0
 8011292:	460b      	mov	r3, r1
 8011294:	4640      	mov	r0, r8
 8011296:	4649      	mov	r1, r9
 8011298:	f7ef fc40 	bl	8000b1c <__aeabi_dcmplt>
 801129c:	2800      	cmp	r0, #0
 801129e:	f43f af35 	beq.w	801110c <_dtoa_r+0x464>
 80112a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80112a4:	1e6b      	subs	r3, r5, #1
 80112a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80112a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80112ac:	2b30      	cmp	r3, #48	; 0x30
 80112ae:	d0f8      	beq.n	80112a2 <_dtoa_r+0x5fa>
 80112b0:	9700      	str	r7, [sp, #0]
 80112b2:	e049      	b.n	8011348 <_dtoa_r+0x6a0>
 80112b4:	4b05      	ldr	r3, [pc, #20]	; (80112cc <_dtoa_r+0x624>)
 80112b6:	f7ef f9bf 	bl	8000638 <__aeabi_dmul>
 80112ba:	4680      	mov	r8, r0
 80112bc:	4689      	mov	r9, r1
 80112be:	e7bd      	b.n	801123c <_dtoa_r+0x594>
 80112c0:	080151c0 	.word	0x080151c0
 80112c4:	08015198 	.word	0x08015198
 80112c8:	3ff00000 	.word	0x3ff00000
 80112cc:	40240000 	.word	0x40240000
 80112d0:	401c0000 	.word	0x401c0000
 80112d4:	40140000 	.word	0x40140000
 80112d8:	3fe00000 	.word	0x3fe00000
 80112dc:	9d01      	ldr	r5, [sp, #4]
 80112de:	4656      	mov	r6, sl
 80112e0:	465f      	mov	r7, fp
 80112e2:	4642      	mov	r2, r8
 80112e4:	464b      	mov	r3, r9
 80112e6:	4630      	mov	r0, r6
 80112e8:	4639      	mov	r1, r7
 80112ea:	f7ef facf 	bl	800088c <__aeabi_ddiv>
 80112ee:	f7ef fc53 	bl	8000b98 <__aeabi_d2iz>
 80112f2:	4682      	mov	sl, r0
 80112f4:	f7ef f936 	bl	8000564 <__aeabi_i2d>
 80112f8:	4642      	mov	r2, r8
 80112fa:	464b      	mov	r3, r9
 80112fc:	f7ef f99c 	bl	8000638 <__aeabi_dmul>
 8011300:	4602      	mov	r2, r0
 8011302:	460b      	mov	r3, r1
 8011304:	4630      	mov	r0, r6
 8011306:	4639      	mov	r1, r7
 8011308:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801130c:	f7ee ffdc 	bl	80002c8 <__aeabi_dsub>
 8011310:	f805 6b01 	strb.w	r6, [r5], #1
 8011314:	9e01      	ldr	r6, [sp, #4]
 8011316:	9f03      	ldr	r7, [sp, #12]
 8011318:	1bae      	subs	r6, r5, r6
 801131a:	42b7      	cmp	r7, r6
 801131c:	4602      	mov	r2, r0
 801131e:	460b      	mov	r3, r1
 8011320:	d135      	bne.n	801138e <_dtoa_r+0x6e6>
 8011322:	f7ee ffd3 	bl	80002cc <__adddf3>
 8011326:	4642      	mov	r2, r8
 8011328:	464b      	mov	r3, r9
 801132a:	4606      	mov	r6, r0
 801132c:	460f      	mov	r7, r1
 801132e:	f7ef fc13 	bl	8000b58 <__aeabi_dcmpgt>
 8011332:	b9d0      	cbnz	r0, 801136a <_dtoa_r+0x6c2>
 8011334:	4642      	mov	r2, r8
 8011336:	464b      	mov	r3, r9
 8011338:	4630      	mov	r0, r6
 801133a:	4639      	mov	r1, r7
 801133c:	f7ef fbe4 	bl	8000b08 <__aeabi_dcmpeq>
 8011340:	b110      	cbz	r0, 8011348 <_dtoa_r+0x6a0>
 8011342:	f01a 0f01 	tst.w	sl, #1
 8011346:	d110      	bne.n	801136a <_dtoa_r+0x6c2>
 8011348:	4620      	mov	r0, r4
 801134a:	ee18 1a10 	vmov	r1, s16
 801134e:	f001 f899 	bl	8012484 <_Bfree>
 8011352:	2300      	movs	r3, #0
 8011354:	9800      	ldr	r0, [sp, #0]
 8011356:	702b      	strb	r3, [r5, #0]
 8011358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801135a:	3001      	adds	r0, #1
 801135c:	6018      	str	r0, [r3, #0]
 801135e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011360:	2b00      	cmp	r3, #0
 8011362:	f43f acf1 	beq.w	8010d48 <_dtoa_r+0xa0>
 8011366:	601d      	str	r5, [r3, #0]
 8011368:	e4ee      	b.n	8010d48 <_dtoa_r+0xa0>
 801136a:	9f00      	ldr	r7, [sp, #0]
 801136c:	462b      	mov	r3, r5
 801136e:	461d      	mov	r5, r3
 8011370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011374:	2a39      	cmp	r2, #57	; 0x39
 8011376:	d106      	bne.n	8011386 <_dtoa_r+0x6de>
 8011378:	9a01      	ldr	r2, [sp, #4]
 801137a:	429a      	cmp	r2, r3
 801137c:	d1f7      	bne.n	801136e <_dtoa_r+0x6c6>
 801137e:	9901      	ldr	r1, [sp, #4]
 8011380:	2230      	movs	r2, #48	; 0x30
 8011382:	3701      	adds	r7, #1
 8011384:	700a      	strb	r2, [r1, #0]
 8011386:	781a      	ldrb	r2, [r3, #0]
 8011388:	3201      	adds	r2, #1
 801138a:	701a      	strb	r2, [r3, #0]
 801138c:	e790      	b.n	80112b0 <_dtoa_r+0x608>
 801138e:	4ba6      	ldr	r3, [pc, #664]	; (8011628 <_dtoa_r+0x980>)
 8011390:	2200      	movs	r2, #0
 8011392:	f7ef f951 	bl	8000638 <__aeabi_dmul>
 8011396:	2200      	movs	r2, #0
 8011398:	2300      	movs	r3, #0
 801139a:	4606      	mov	r6, r0
 801139c:	460f      	mov	r7, r1
 801139e:	f7ef fbb3 	bl	8000b08 <__aeabi_dcmpeq>
 80113a2:	2800      	cmp	r0, #0
 80113a4:	d09d      	beq.n	80112e2 <_dtoa_r+0x63a>
 80113a6:	e7cf      	b.n	8011348 <_dtoa_r+0x6a0>
 80113a8:	9a08      	ldr	r2, [sp, #32]
 80113aa:	2a00      	cmp	r2, #0
 80113ac:	f000 80d7 	beq.w	801155e <_dtoa_r+0x8b6>
 80113b0:	9a06      	ldr	r2, [sp, #24]
 80113b2:	2a01      	cmp	r2, #1
 80113b4:	f300 80ba 	bgt.w	801152c <_dtoa_r+0x884>
 80113b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80113ba:	2a00      	cmp	r2, #0
 80113bc:	f000 80b2 	beq.w	8011524 <_dtoa_r+0x87c>
 80113c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80113c4:	9e07      	ldr	r6, [sp, #28]
 80113c6:	9d04      	ldr	r5, [sp, #16]
 80113c8:	9a04      	ldr	r2, [sp, #16]
 80113ca:	441a      	add	r2, r3
 80113cc:	9204      	str	r2, [sp, #16]
 80113ce:	9a05      	ldr	r2, [sp, #20]
 80113d0:	2101      	movs	r1, #1
 80113d2:	441a      	add	r2, r3
 80113d4:	4620      	mov	r0, r4
 80113d6:	9205      	str	r2, [sp, #20]
 80113d8:	f001 f956 	bl	8012688 <__i2b>
 80113dc:	4607      	mov	r7, r0
 80113de:	2d00      	cmp	r5, #0
 80113e0:	dd0c      	ble.n	80113fc <_dtoa_r+0x754>
 80113e2:	9b05      	ldr	r3, [sp, #20]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	dd09      	ble.n	80113fc <_dtoa_r+0x754>
 80113e8:	42ab      	cmp	r3, r5
 80113ea:	9a04      	ldr	r2, [sp, #16]
 80113ec:	bfa8      	it	ge
 80113ee:	462b      	movge	r3, r5
 80113f0:	1ad2      	subs	r2, r2, r3
 80113f2:	9204      	str	r2, [sp, #16]
 80113f4:	9a05      	ldr	r2, [sp, #20]
 80113f6:	1aed      	subs	r5, r5, r3
 80113f8:	1ad3      	subs	r3, r2, r3
 80113fa:	9305      	str	r3, [sp, #20]
 80113fc:	9b07      	ldr	r3, [sp, #28]
 80113fe:	b31b      	cbz	r3, 8011448 <_dtoa_r+0x7a0>
 8011400:	9b08      	ldr	r3, [sp, #32]
 8011402:	2b00      	cmp	r3, #0
 8011404:	f000 80af 	beq.w	8011566 <_dtoa_r+0x8be>
 8011408:	2e00      	cmp	r6, #0
 801140a:	dd13      	ble.n	8011434 <_dtoa_r+0x78c>
 801140c:	4639      	mov	r1, r7
 801140e:	4632      	mov	r2, r6
 8011410:	4620      	mov	r0, r4
 8011412:	f001 f9f9 	bl	8012808 <__pow5mult>
 8011416:	ee18 2a10 	vmov	r2, s16
 801141a:	4601      	mov	r1, r0
 801141c:	4607      	mov	r7, r0
 801141e:	4620      	mov	r0, r4
 8011420:	f001 f948 	bl	80126b4 <__multiply>
 8011424:	ee18 1a10 	vmov	r1, s16
 8011428:	4680      	mov	r8, r0
 801142a:	4620      	mov	r0, r4
 801142c:	f001 f82a 	bl	8012484 <_Bfree>
 8011430:	ee08 8a10 	vmov	s16, r8
 8011434:	9b07      	ldr	r3, [sp, #28]
 8011436:	1b9a      	subs	r2, r3, r6
 8011438:	d006      	beq.n	8011448 <_dtoa_r+0x7a0>
 801143a:	ee18 1a10 	vmov	r1, s16
 801143e:	4620      	mov	r0, r4
 8011440:	f001 f9e2 	bl	8012808 <__pow5mult>
 8011444:	ee08 0a10 	vmov	s16, r0
 8011448:	2101      	movs	r1, #1
 801144a:	4620      	mov	r0, r4
 801144c:	f001 f91c 	bl	8012688 <__i2b>
 8011450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011452:	2b00      	cmp	r3, #0
 8011454:	4606      	mov	r6, r0
 8011456:	f340 8088 	ble.w	801156a <_dtoa_r+0x8c2>
 801145a:	461a      	mov	r2, r3
 801145c:	4601      	mov	r1, r0
 801145e:	4620      	mov	r0, r4
 8011460:	f001 f9d2 	bl	8012808 <__pow5mult>
 8011464:	9b06      	ldr	r3, [sp, #24]
 8011466:	2b01      	cmp	r3, #1
 8011468:	4606      	mov	r6, r0
 801146a:	f340 8081 	ble.w	8011570 <_dtoa_r+0x8c8>
 801146e:	f04f 0800 	mov.w	r8, #0
 8011472:	6933      	ldr	r3, [r6, #16]
 8011474:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011478:	6918      	ldr	r0, [r3, #16]
 801147a:	f001 f8b5 	bl	80125e8 <__hi0bits>
 801147e:	f1c0 0020 	rsb	r0, r0, #32
 8011482:	9b05      	ldr	r3, [sp, #20]
 8011484:	4418      	add	r0, r3
 8011486:	f010 001f 	ands.w	r0, r0, #31
 801148a:	f000 8092 	beq.w	80115b2 <_dtoa_r+0x90a>
 801148e:	f1c0 0320 	rsb	r3, r0, #32
 8011492:	2b04      	cmp	r3, #4
 8011494:	f340 808a 	ble.w	80115ac <_dtoa_r+0x904>
 8011498:	f1c0 001c 	rsb	r0, r0, #28
 801149c:	9b04      	ldr	r3, [sp, #16]
 801149e:	4403      	add	r3, r0
 80114a0:	9304      	str	r3, [sp, #16]
 80114a2:	9b05      	ldr	r3, [sp, #20]
 80114a4:	4403      	add	r3, r0
 80114a6:	4405      	add	r5, r0
 80114a8:	9305      	str	r3, [sp, #20]
 80114aa:	9b04      	ldr	r3, [sp, #16]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	dd07      	ble.n	80114c0 <_dtoa_r+0x818>
 80114b0:	ee18 1a10 	vmov	r1, s16
 80114b4:	461a      	mov	r2, r3
 80114b6:	4620      	mov	r0, r4
 80114b8:	f001 fa00 	bl	80128bc <__lshift>
 80114bc:	ee08 0a10 	vmov	s16, r0
 80114c0:	9b05      	ldr	r3, [sp, #20]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	dd05      	ble.n	80114d2 <_dtoa_r+0x82a>
 80114c6:	4631      	mov	r1, r6
 80114c8:	461a      	mov	r2, r3
 80114ca:	4620      	mov	r0, r4
 80114cc:	f001 f9f6 	bl	80128bc <__lshift>
 80114d0:	4606      	mov	r6, r0
 80114d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d06e      	beq.n	80115b6 <_dtoa_r+0x90e>
 80114d8:	ee18 0a10 	vmov	r0, s16
 80114dc:	4631      	mov	r1, r6
 80114de:	f001 fa5d 	bl	801299c <__mcmp>
 80114e2:	2800      	cmp	r0, #0
 80114e4:	da67      	bge.n	80115b6 <_dtoa_r+0x90e>
 80114e6:	9b00      	ldr	r3, [sp, #0]
 80114e8:	3b01      	subs	r3, #1
 80114ea:	ee18 1a10 	vmov	r1, s16
 80114ee:	9300      	str	r3, [sp, #0]
 80114f0:	220a      	movs	r2, #10
 80114f2:	2300      	movs	r3, #0
 80114f4:	4620      	mov	r0, r4
 80114f6:	f000 ffe7 	bl	80124c8 <__multadd>
 80114fa:	9b08      	ldr	r3, [sp, #32]
 80114fc:	ee08 0a10 	vmov	s16, r0
 8011500:	2b00      	cmp	r3, #0
 8011502:	f000 81b1 	beq.w	8011868 <_dtoa_r+0xbc0>
 8011506:	2300      	movs	r3, #0
 8011508:	4639      	mov	r1, r7
 801150a:	220a      	movs	r2, #10
 801150c:	4620      	mov	r0, r4
 801150e:	f000 ffdb 	bl	80124c8 <__multadd>
 8011512:	9b02      	ldr	r3, [sp, #8]
 8011514:	2b00      	cmp	r3, #0
 8011516:	4607      	mov	r7, r0
 8011518:	f300 808e 	bgt.w	8011638 <_dtoa_r+0x990>
 801151c:	9b06      	ldr	r3, [sp, #24]
 801151e:	2b02      	cmp	r3, #2
 8011520:	dc51      	bgt.n	80115c6 <_dtoa_r+0x91e>
 8011522:	e089      	b.n	8011638 <_dtoa_r+0x990>
 8011524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011526:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801152a:	e74b      	b.n	80113c4 <_dtoa_r+0x71c>
 801152c:	9b03      	ldr	r3, [sp, #12]
 801152e:	1e5e      	subs	r6, r3, #1
 8011530:	9b07      	ldr	r3, [sp, #28]
 8011532:	42b3      	cmp	r3, r6
 8011534:	bfbf      	itttt	lt
 8011536:	9b07      	ldrlt	r3, [sp, #28]
 8011538:	9607      	strlt	r6, [sp, #28]
 801153a:	1af2      	sublt	r2, r6, r3
 801153c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801153e:	bfb6      	itet	lt
 8011540:	189b      	addlt	r3, r3, r2
 8011542:	1b9e      	subge	r6, r3, r6
 8011544:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011546:	9b03      	ldr	r3, [sp, #12]
 8011548:	bfb8      	it	lt
 801154a:	2600      	movlt	r6, #0
 801154c:	2b00      	cmp	r3, #0
 801154e:	bfb7      	itett	lt
 8011550:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011554:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011558:	1a9d      	sublt	r5, r3, r2
 801155a:	2300      	movlt	r3, #0
 801155c:	e734      	b.n	80113c8 <_dtoa_r+0x720>
 801155e:	9e07      	ldr	r6, [sp, #28]
 8011560:	9d04      	ldr	r5, [sp, #16]
 8011562:	9f08      	ldr	r7, [sp, #32]
 8011564:	e73b      	b.n	80113de <_dtoa_r+0x736>
 8011566:	9a07      	ldr	r2, [sp, #28]
 8011568:	e767      	b.n	801143a <_dtoa_r+0x792>
 801156a:	9b06      	ldr	r3, [sp, #24]
 801156c:	2b01      	cmp	r3, #1
 801156e:	dc18      	bgt.n	80115a2 <_dtoa_r+0x8fa>
 8011570:	f1ba 0f00 	cmp.w	sl, #0
 8011574:	d115      	bne.n	80115a2 <_dtoa_r+0x8fa>
 8011576:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801157a:	b993      	cbnz	r3, 80115a2 <_dtoa_r+0x8fa>
 801157c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011580:	0d1b      	lsrs	r3, r3, #20
 8011582:	051b      	lsls	r3, r3, #20
 8011584:	b183      	cbz	r3, 80115a8 <_dtoa_r+0x900>
 8011586:	9b04      	ldr	r3, [sp, #16]
 8011588:	3301      	adds	r3, #1
 801158a:	9304      	str	r3, [sp, #16]
 801158c:	9b05      	ldr	r3, [sp, #20]
 801158e:	3301      	adds	r3, #1
 8011590:	9305      	str	r3, [sp, #20]
 8011592:	f04f 0801 	mov.w	r8, #1
 8011596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011598:	2b00      	cmp	r3, #0
 801159a:	f47f af6a 	bne.w	8011472 <_dtoa_r+0x7ca>
 801159e:	2001      	movs	r0, #1
 80115a0:	e76f      	b.n	8011482 <_dtoa_r+0x7da>
 80115a2:	f04f 0800 	mov.w	r8, #0
 80115a6:	e7f6      	b.n	8011596 <_dtoa_r+0x8ee>
 80115a8:	4698      	mov	r8, r3
 80115aa:	e7f4      	b.n	8011596 <_dtoa_r+0x8ee>
 80115ac:	f43f af7d 	beq.w	80114aa <_dtoa_r+0x802>
 80115b0:	4618      	mov	r0, r3
 80115b2:	301c      	adds	r0, #28
 80115b4:	e772      	b.n	801149c <_dtoa_r+0x7f4>
 80115b6:	9b03      	ldr	r3, [sp, #12]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	dc37      	bgt.n	801162c <_dtoa_r+0x984>
 80115bc:	9b06      	ldr	r3, [sp, #24]
 80115be:	2b02      	cmp	r3, #2
 80115c0:	dd34      	ble.n	801162c <_dtoa_r+0x984>
 80115c2:	9b03      	ldr	r3, [sp, #12]
 80115c4:	9302      	str	r3, [sp, #8]
 80115c6:	9b02      	ldr	r3, [sp, #8]
 80115c8:	b96b      	cbnz	r3, 80115e6 <_dtoa_r+0x93e>
 80115ca:	4631      	mov	r1, r6
 80115cc:	2205      	movs	r2, #5
 80115ce:	4620      	mov	r0, r4
 80115d0:	f000 ff7a 	bl	80124c8 <__multadd>
 80115d4:	4601      	mov	r1, r0
 80115d6:	4606      	mov	r6, r0
 80115d8:	ee18 0a10 	vmov	r0, s16
 80115dc:	f001 f9de 	bl	801299c <__mcmp>
 80115e0:	2800      	cmp	r0, #0
 80115e2:	f73f adbb 	bgt.w	801115c <_dtoa_r+0x4b4>
 80115e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115e8:	9d01      	ldr	r5, [sp, #4]
 80115ea:	43db      	mvns	r3, r3
 80115ec:	9300      	str	r3, [sp, #0]
 80115ee:	f04f 0800 	mov.w	r8, #0
 80115f2:	4631      	mov	r1, r6
 80115f4:	4620      	mov	r0, r4
 80115f6:	f000 ff45 	bl	8012484 <_Bfree>
 80115fa:	2f00      	cmp	r7, #0
 80115fc:	f43f aea4 	beq.w	8011348 <_dtoa_r+0x6a0>
 8011600:	f1b8 0f00 	cmp.w	r8, #0
 8011604:	d005      	beq.n	8011612 <_dtoa_r+0x96a>
 8011606:	45b8      	cmp	r8, r7
 8011608:	d003      	beq.n	8011612 <_dtoa_r+0x96a>
 801160a:	4641      	mov	r1, r8
 801160c:	4620      	mov	r0, r4
 801160e:	f000 ff39 	bl	8012484 <_Bfree>
 8011612:	4639      	mov	r1, r7
 8011614:	4620      	mov	r0, r4
 8011616:	f000 ff35 	bl	8012484 <_Bfree>
 801161a:	e695      	b.n	8011348 <_dtoa_r+0x6a0>
 801161c:	2600      	movs	r6, #0
 801161e:	4637      	mov	r7, r6
 8011620:	e7e1      	b.n	80115e6 <_dtoa_r+0x93e>
 8011622:	9700      	str	r7, [sp, #0]
 8011624:	4637      	mov	r7, r6
 8011626:	e599      	b.n	801115c <_dtoa_r+0x4b4>
 8011628:	40240000 	.word	0x40240000
 801162c:	9b08      	ldr	r3, [sp, #32]
 801162e:	2b00      	cmp	r3, #0
 8011630:	f000 80ca 	beq.w	80117c8 <_dtoa_r+0xb20>
 8011634:	9b03      	ldr	r3, [sp, #12]
 8011636:	9302      	str	r3, [sp, #8]
 8011638:	2d00      	cmp	r5, #0
 801163a:	dd05      	ble.n	8011648 <_dtoa_r+0x9a0>
 801163c:	4639      	mov	r1, r7
 801163e:	462a      	mov	r2, r5
 8011640:	4620      	mov	r0, r4
 8011642:	f001 f93b 	bl	80128bc <__lshift>
 8011646:	4607      	mov	r7, r0
 8011648:	f1b8 0f00 	cmp.w	r8, #0
 801164c:	d05b      	beq.n	8011706 <_dtoa_r+0xa5e>
 801164e:	6879      	ldr	r1, [r7, #4]
 8011650:	4620      	mov	r0, r4
 8011652:	f000 fed7 	bl	8012404 <_Balloc>
 8011656:	4605      	mov	r5, r0
 8011658:	b928      	cbnz	r0, 8011666 <_dtoa_r+0x9be>
 801165a:	4b87      	ldr	r3, [pc, #540]	; (8011878 <_dtoa_r+0xbd0>)
 801165c:	4602      	mov	r2, r0
 801165e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011662:	f7ff bb3b 	b.w	8010cdc <_dtoa_r+0x34>
 8011666:	693a      	ldr	r2, [r7, #16]
 8011668:	3202      	adds	r2, #2
 801166a:	0092      	lsls	r2, r2, #2
 801166c:	f107 010c 	add.w	r1, r7, #12
 8011670:	300c      	adds	r0, #12
 8011672:	f7fd fae3 	bl	800ec3c <memcpy>
 8011676:	2201      	movs	r2, #1
 8011678:	4629      	mov	r1, r5
 801167a:	4620      	mov	r0, r4
 801167c:	f001 f91e 	bl	80128bc <__lshift>
 8011680:	9b01      	ldr	r3, [sp, #4]
 8011682:	f103 0901 	add.w	r9, r3, #1
 8011686:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801168a:	4413      	add	r3, r2
 801168c:	9305      	str	r3, [sp, #20]
 801168e:	f00a 0301 	and.w	r3, sl, #1
 8011692:	46b8      	mov	r8, r7
 8011694:	9304      	str	r3, [sp, #16]
 8011696:	4607      	mov	r7, r0
 8011698:	4631      	mov	r1, r6
 801169a:	ee18 0a10 	vmov	r0, s16
 801169e:	f7ff fa75 	bl	8010b8c <quorem>
 80116a2:	4641      	mov	r1, r8
 80116a4:	9002      	str	r0, [sp, #8]
 80116a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80116aa:	ee18 0a10 	vmov	r0, s16
 80116ae:	f001 f975 	bl	801299c <__mcmp>
 80116b2:	463a      	mov	r2, r7
 80116b4:	9003      	str	r0, [sp, #12]
 80116b6:	4631      	mov	r1, r6
 80116b8:	4620      	mov	r0, r4
 80116ba:	f001 f98b 	bl	80129d4 <__mdiff>
 80116be:	68c2      	ldr	r2, [r0, #12]
 80116c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80116c4:	4605      	mov	r5, r0
 80116c6:	bb02      	cbnz	r2, 801170a <_dtoa_r+0xa62>
 80116c8:	4601      	mov	r1, r0
 80116ca:	ee18 0a10 	vmov	r0, s16
 80116ce:	f001 f965 	bl	801299c <__mcmp>
 80116d2:	4602      	mov	r2, r0
 80116d4:	4629      	mov	r1, r5
 80116d6:	4620      	mov	r0, r4
 80116d8:	9207      	str	r2, [sp, #28]
 80116da:	f000 fed3 	bl	8012484 <_Bfree>
 80116de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80116e2:	ea43 0102 	orr.w	r1, r3, r2
 80116e6:	9b04      	ldr	r3, [sp, #16]
 80116e8:	430b      	orrs	r3, r1
 80116ea:	464d      	mov	r5, r9
 80116ec:	d10f      	bne.n	801170e <_dtoa_r+0xa66>
 80116ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80116f2:	d02a      	beq.n	801174a <_dtoa_r+0xaa2>
 80116f4:	9b03      	ldr	r3, [sp, #12]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	dd02      	ble.n	8011700 <_dtoa_r+0xa58>
 80116fa:	9b02      	ldr	r3, [sp, #8]
 80116fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011700:	f88b a000 	strb.w	sl, [fp]
 8011704:	e775      	b.n	80115f2 <_dtoa_r+0x94a>
 8011706:	4638      	mov	r0, r7
 8011708:	e7ba      	b.n	8011680 <_dtoa_r+0x9d8>
 801170a:	2201      	movs	r2, #1
 801170c:	e7e2      	b.n	80116d4 <_dtoa_r+0xa2c>
 801170e:	9b03      	ldr	r3, [sp, #12]
 8011710:	2b00      	cmp	r3, #0
 8011712:	db04      	blt.n	801171e <_dtoa_r+0xa76>
 8011714:	9906      	ldr	r1, [sp, #24]
 8011716:	430b      	orrs	r3, r1
 8011718:	9904      	ldr	r1, [sp, #16]
 801171a:	430b      	orrs	r3, r1
 801171c:	d122      	bne.n	8011764 <_dtoa_r+0xabc>
 801171e:	2a00      	cmp	r2, #0
 8011720:	ddee      	ble.n	8011700 <_dtoa_r+0xa58>
 8011722:	ee18 1a10 	vmov	r1, s16
 8011726:	2201      	movs	r2, #1
 8011728:	4620      	mov	r0, r4
 801172a:	f001 f8c7 	bl	80128bc <__lshift>
 801172e:	4631      	mov	r1, r6
 8011730:	ee08 0a10 	vmov	s16, r0
 8011734:	f001 f932 	bl	801299c <__mcmp>
 8011738:	2800      	cmp	r0, #0
 801173a:	dc03      	bgt.n	8011744 <_dtoa_r+0xa9c>
 801173c:	d1e0      	bne.n	8011700 <_dtoa_r+0xa58>
 801173e:	f01a 0f01 	tst.w	sl, #1
 8011742:	d0dd      	beq.n	8011700 <_dtoa_r+0xa58>
 8011744:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011748:	d1d7      	bne.n	80116fa <_dtoa_r+0xa52>
 801174a:	2339      	movs	r3, #57	; 0x39
 801174c:	f88b 3000 	strb.w	r3, [fp]
 8011750:	462b      	mov	r3, r5
 8011752:	461d      	mov	r5, r3
 8011754:	3b01      	subs	r3, #1
 8011756:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801175a:	2a39      	cmp	r2, #57	; 0x39
 801175c:	d071      	beq.n	8011842 <_dtoa_r+0xb9a>
 801175e:	3201      	adds	r2, #1
 8011760:	701a      	strb	r2, [r3, #0]
 8011762:	e746      	b.n	80115f2 <_dtoa_r+0x94a>
 8011764:	2a00      	cmp	r2, #0
 8011766:	dd07      	ble.n	8011778 <_dtoa_r+0xad0>
 8011768:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801176c:	d0ed      	beq.n	801174a <_dtoa_r+0xaa2>
 801176e:	f10a 0301 	add.w	r3, sl, #1
 8011772:	f88b 3000 	strb.w	r3, [fp]
 8011776:	e73c      	b.n	80115f2 <_dtoa_r+0x94a>
 8011778:	9b05      	ldr	r3, [sp, #20]
 801177a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801177e:	4599      	cmp	r9, r3
 8011780:	d047      	beq.n	8011812 <_dtoa_r+0xb6a>
 8011782:	ee18 1a10 	vmov	r1, s16
 8011786:	2300      	movs	r3, #0
 8011788:	220a      	movs	r2, #10
 801178a:	4620      	mov	r0, r4
 801178c:	f000 fe9c 	bl	80124c8 <__multadd>
 8011790:	45b8      	cmp	r8, r7
 8011792:	ee08 0a10 	vmov	s16, r0
 8011796:	f04f 0300 	mov.w	r3, #0
 801179a:	f04f 020a 	mov.w	r2, #10
 801179e:	4641      	mov	r1, r8
 80117a0:	4620      	mov	r0, r4
 80117a2:	d106      	bne.n	80117b2 <_dtoa_r+0xb0a>
 80117a4:	f000 fe90 	bl	80124c8 <__multadd>
 80117a8:	4680      	mov	r8, r0
 80117aa:	4607      	mov	r7, r0
 80117ac:	f109 0901 	add.w	r9, r9, #1
 80117b0:	e772      	b.n	8011698 <_dtoa_r+0x9f0>
 80117b2:	f000 fe89 	bl	80124c8 <__multadd>
 80117b6:	4639      	mov	r1, r7
 80117b8:	4680      	mov	r8, r0
 80117ba:	2300      	movs	r3, #0
 80117bc:	220a      	movs	r2, #10
 80117be:	4620      	mov	r0, r4
 80117c0:	f000 fe82 	bl	80124c8 <__multadd>
 80117c4:	4607      	mov	r7, r0
 80117c6:	e7f1      	b.n	80117ac <_dtoa_r+0xb04>
 80117c8:	9b03      	ldr	r3, [sp, #12]
 80117ca:	9302      	str	r3, [sp, #8]
 80117cc:	9d01      	ldr	r5, [sp, #4]
 80117ce:	ee18 0a10 	vmov	r0, s16
 80117d2:	4631      	mov	r1, r6
 80117d4:	f7ff f9da 	bl	8010b8c <quorem>
 80117d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80117dc:	9b01      	ldr	r3, [sp, #4]
 80117de:	f805 ab01 	strb.w	sl, [r5], #1
 80117e2:	1aea      	subs	r2, r5, r3
 80117e4:	9b02      	ldr	r3, [sp, #8]
 80117e6:	4293      	cmp	r3, r2
 80117e8:	dd09      	ble.n	80117fe <_dtoa_r+0xb56>
 80117ea:	ee18 1a10 	vmov	r1, s16
 80117ee:	2300      	movs	r3, #0
 80117f0:	220a      	movs	r2, #10
 80117f2:	4620      	mov	r0, r4
 80117f4:	f000 fe68 	bl	80124c8 <__multadd>
 80117f8:	ee08 0a10 	vmov	s16, r0
 80117fc:	e7e7      	b.n	80117ce <_dtoa_r+0xb26>
 80117fe:	9b02      	ldr	r3, [sp, #8]
 8011800:	2b00      	cmp	r3, #0
 8011802:	bfc8      	it	gt
 8011804:	461d      	movgt	r5, r3
 8011806:	9b01      	ldr	r3, [sp, #4]
 8011808:	bfd8      	it	le
 801180a:	2501      	movle	r5, #1
 801180c:	441d      	add	r5, r3
 801180e:	f04f 0800 	mov.w	r8, #0
 8011812:	ee18 1a10 	vmov	r1, s16
 8011816:	2201      	movs	r2, #1
 8011818:	4620      	mov	r0, r4
 801181a:	f001 f84f 	bl	80128bc <__lshift>
 801181e:	4631      	mov	r1, r6
 8011820:	ee08 0a10 	vmov	s16, r0
 8011824:	f001 f8ba 	bl	801299c <__mcmp>
 8011828:	2800      	cmp	r0, #0
 801182a:	dc91      	bgt.n	8011750 <_dtoa_r+0xaa8>
 801182c:	d102      	bne.n	8011834 <_dtoa_r+0xb8c>
 801182e:	f01a 0f01 	tst.w	sl, #1
 8011832:	d18d      	bne.n	8011750 <_dtoa_r+0xaa8>
 8011834:	462b      	mov	r3, r5
 8011836:	461d      	mov	r5, r3
 8011838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801183c:	2a30      	cmp	r2, #48	; 0x30
 801183e:	d0fa      	beq.n	8011836 <_dtoa_r+0xb8e>
 8011840:	e6d7      	b.n	80115f2 <_dtoa_r+0x94a>
 8011842:	9a01      	ldr	r2, [sp, #4]
 8011844:	429a      	cmp	r2, r3
 8011846:	d184      	bne.n	8011752 <_dtoa_r+0xaaa>
 8011848:	9b00      	ldr	r3, [sp, #0]
 801184a:	3301      	adds	r3, #1
 801184c:	9300      	str	r3, [sp, #0]
 801184e:	2331      	movs	r3, #49	; 0x31
 8011850:	7013      	strb	r3, [r2, #0]
 8011852:	e6ce      	b.n	80115f2 <_dtoa_r+0x94a>
 8011854:	4b09      	ldr	r3, [pc, #36]	; (801187c <_dtoa_r+0xbd4>)
 8011856:	f7ff ba95 	b.w	8010d84 <_dtoa_r+0xdc>
 801185a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801185c:	2b00      	cmp	r3, #0
 801185e:	f47f aa6e 	bne.w	8010d3e <_dtoa_r+0x96>
 8011862:	4b07      	ldr	r3, [pc, #28]	; (8011880 <_dtoa_r+0xbd8>)
 8011864:	f7ff ba8e 	b.w	8010d84 <_dtoa_r+0xdc>
 8011868:	9b02      	ldr	r3, [sp, #8]
 801186a:	2b00      	cmp	r3, #0
 801186c:	dcae      	bgt.n	80117cc <_dtoa_r+0xb24>
 801186e:	9b06      	ldr	r3, [sp, #24]
 8011870:	2b02      	cmp	r3, #2
 8011872:	f73f aea8 	bgt.w	80115c6 <_dtoa_r+0x91e>
 8011876:	e7a9      	b.n	80117cc <_dtoa_r+0xb24>
 8011878:	0801504f 	.word	0x0801504f
 801187c:	080152a9 	.word	0x080152a9
 8011880:	08014fd0 	.word	0x08014fd0

08011884 <__sflush_r>:
 8011884:	898a      	ldrh	r2, [r1, #12]
 8011886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801188a:	4605      	mov	r5, r0
 801188c:	0710      	lsls	r0, r2, #28
 801188e:	460c      	mov	r4, r1
 8011890:	d458      	bmi.n	8011944 <__sflush_r+0xc0>
 8011892:	684b      	ldr	r3, [r1, #4]
 8011894:	2b00      	cmp	r3, #0
 8011896:	dc05      	bgt.n	80118a4 <__sflush_r+0x20>
 8011898:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801189a:	2b00      	cmp	r3, #0
 801189c:	dc02      	bgt.n	80118a4 <__sflush_r+0x20>
 801189e:	2000      	movs	r0, #0
 80118a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80118a6:	2e00      	cmp	r6, #0
 80118a8:	d0f9      	beq.n	801189e <__sflush_r+0x1a>
 80118aa:	2300      	movs	r3, #0
 80118ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80118b0:	682f      	ldr	r7, [r5, #0]
 80118b2:	602b      	str	r3, [r5, #0]
 80118b4:	d032      	beq.n	801191c <__sflush_r+0x98>
 80118b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80118b8:	89a3      	ldrh	r3, [r4, #12]
 80118ba:	075a      	lsls	r2, r3, #29
 80118bc:	d505      	bpl.n	80118ca <__sflush_r+0x46>
 80118be:	6863      	ldr	r3, [r4, #4]
 80118c0:	1ac0      	subs	r0, r0, r3
 80118c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118c4:	b10b      	cbz	r3, 80118ca <__sflush_r+0x46>
 80118c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80118c8:	1ac0      	subs	r0, r0, r3
 80118ca:	2300      	movs	r3, #0
 80118cc:	4602      	mov	r2, r0
 80118ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80118d0:	6a21      	ldr	r1, [r4, #32]
 80118d2:	4628      	mov	r0, r5
 80118d4:	47b0      	blx	r6
 80118d6:	1c43      	adds	r3, r0, #1
 80118d8:	89a3      	ldrh	r3, [r4, #12]
 80118da:	d106      	bne.n	80118ea <__sflush_r+0x66>
 80118dc:	6829      	ldr	r1, [r5, #0]
 80118de:	291d      	cmp	r1, #29
 80118e0:	d82c      	bhi.n	801193c <__sflush_r+0xb8>
 80118e2:	4a2a      	ldr	r2, [pc, #168]	; (801198c <__sflush_r+0x108>)
 80118e4:	40ca      	lsrs	r2, r1
 80118e6:	07d6      	lsls	r6, r2, #31
 80118e8:	d528      	bpl.n	801193c <__sflush_r+0xb8>
 80118ea:	2200      	movs	r2, #0
 80118ec:	6062      	str	r2, [r4, #4]
 80118ee:	04d9      	lsls	r1, r3, #19
 80118f0:	6922      	ldr	r2, [r4, #16]
 80118f2:	6022      	str	r2, [r4, #0]
 80118f4:	d504      	bpl.n	8011900 <__sflush_r+0x7c>
 80118f6:	1c42      	adds	r2, r0, #1
 80118f8:	d101      	bne.n	80118fe <__sflush_r+0x7a>
 80118fa:	682b      	ldr	r3, [r5, #0]
 80118fc:	b903      	cbnz	r3, 8011900 <__sflush_r+0x7c>
 80118fe:	6560      	str	r0, [r4, #84]	; 0x54
 8011900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011902:	602f      	str	r7, [r5, #0]
 8011904:	2900      	cmp	r1, #0
 8011906:	d0ca      	beq.n	801189e <__sflush_r+0x1a>
 8011908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801190c:	4299      	cmp	r1, r3
 801190e:	d002      	beq.n	8011916 <__sflush_r+0x92>
 8011910:	4628      	mov	r0, r5
 8011912:	f001 fa4f 	bl	8012db4 <_free_r>
 8011916:	2000      	movs	r0, #0
 8011918:	6360      	str	r0, [r4, #52]	; 0x34
 801191a:	e7c1      	b.n	80118a0 <__sflush_r+0x1c>
 801191c:	6a21      	ldr	r1, [r4, #32]
 801191e:	2301      	movs	r3, #1
 8011920:	4628      	mov	r0, r5
 8011922:	47b0      	blx	r6
 8011924:	1c41      	adds	r1, r0, #1
 8011926:	d1c7      	bne.n	80118b8 <__sflush_r+0x34>
 8011928:	682b      	ldr	r3, [r5, #0]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d0c4      	beq.n	80118b8 <__sflush_r+0x34>
 801192e:	2b1d      	cmp	r3, #29
 8011930:	d001      	beq.n	8011936 <__sflush_r+0xb2>
 8011932:	2b16      	cmp	r3, #22
 8011934:	d101      	bne.n	801193a <__sflush_r+0xb6>
 8011936:	602f      	str	r7, [r5, #0]
 8011938:	e7b1      	b.n	801189e <__sflush_r+0x1a>
 801193a:	89a3      	ldrh	r3, [r4, #12]
 801193c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011940:	81a3      	strh	r3, [r4, #12]
 8011942:	e7ad      	b.n	80118a0 <__sflush_r+0x1c>
 8011944:	690f      	ldr	r7, [r1, #16]
 8011946:	2f00      	cmp	r7, #0
 8011948:	d0a9      	beq.n	801189e <__sflush_r+0x1a>
 801194a:	0793      	lsls	r3, r2, #30
 801194c:	680e      	ldr	r6, [r1, #0]
 801194e:	bf08      	it	eq
 8011950:	694b      	ldreq	r3, [r1, #20]
 8011952:	600f      	str	r7, [r1, #0]
 8011954:	bf18      	it	ne
 8011956:	2300      	movne	r3, #0
 8011958:	eba6 0807 	sub.w	r8, r6, r7
 801195c:	608b      	str	r3, [r1, #8]
 801195e:	f1b8 0f00 	cmp.w	r8, #0
 8011962:	dd9c      	ble.n	801189e <__sflush_r+0x1a>
 8011964:	6a21      	ldr	r1, [r4, #32]
 8011966:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011968:	4643      	mov	r3, r8
 801196a:	463a      	mov	r2, r7
 801196c:	4628      	mov	r0, r5
 801196e:	47b0      	blx	r6
 8011970:	2800      	cmp	r0, #0
 8011972:	dc06      	bgt.n	8011982 <__sflush_r+0xfe>
 8011974:	89a3      	ldrh	r3, [r4, #12]
 8011976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801197a:	81a3      	strh	r3, [r4, #12]
 801197c:	f04f 30ff 	mov.w	r0, #4294967295
 8011980:	e78e      	b.n	80118a0 <__sflush_r+0x1c>
 8011982:	4407      	add	r7, r0
 8011984:	eba8 0800 	sub.w	r8, r8, r0
 8011988:	e7e9      	b.n	801195e <__sflush_r+0xda>
 801198a:	bf00      	nop
 801198c:	20400001 	.word	0x20400001

08011990 <_fflush_r>:
 8011990:	b538      	push	{r3, r4, r5, lr}
 8011992:	690b      	ldr	r3, [r1, #16]
 8011994:	4605      	mov	r5, r0
 8011996:	460c      	mov	r4, r1
 8011998:	b913      	cbnz	r3, 80119a0 <_fflush_r+0x10>
 801199a:	2500      	movs	r5, #0
 801199c:	4628      	mov	r0, r5
 801199e:	bd38      	pop	{r3, r4, r5, pc}
 80119a0:	b118      	cbz	r0, 80119aa <_fflush_r+0x1a>
 80119a2:	6983      	ldr	r3, [r0, #24]
 80119a4:	b90b      	cbnz	r3, 80119aa <_fflush_r+0x1a>
 80119a6:	f000 f887 	bl	8011ab8 <__sinit>
 80119aa:	4b14      	ldr	r3, [pc, #80]	; (80119fc <_fflush_r+0x6c>)
 80119ac:	429c      	cmp	r4, r3
 80119ae:	d11b      	bne.n	80119e8 <_fflush_r+0x58>
 80119b0:	686c      	ldr	r4, [r5, #4]
 80119b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d0ef      	beq.n	801199a <_fflush_r+0xa>
 80119ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80119bc:	07d0      	lsls	r0, r2, #31
 80119be:	d404      	bmi.n	80119ca <_fflush_r+0x3a>
 80119c0:	0599      	lsls	r1, r3, #22
 80119c2:	d402      	bmi.n	80119ca <_fflush_r+0x3a>
 80119c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80119c6:	f000 fc88 	bl	80122da <__retarget_lock_acquire_recursive>
 80119ca:	4628      	mov	r0, r5
 80119cc:	4621      	mov	r1, r4
 80119ce:	f7ff ff59 	bl	8011884 <__sflush_r>
 80119d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80119d4:	07da      	lsls	r2, r3, #31
 80119d6:	4605      	mov	r5, r0
 80119d8:	d4e0      	bmi.n	801199c <_fflush_r+0xc>
 80119da:	89a3      	ldrh	r3, [r4, #12]
 80119dc:	059b      	lsls	r3, r3, #22
 80119de:	d4dd      	bmi.n	801199c <_fflush_r+0xc>
 80119e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80119e2:	f000 fc7b 	bl	80122dc <__retarget_lock_release_recursive>
 80119e6:	e7d9      	b.n	801199c <_fflush_r+0xc>
 80119e8:	4b05      	ldr	r3, [pc, #20]	; (8011a00 <_fflush_r+0x70>)
 80119ea:	429c      	cmp	r4, r3
 80119ec:	d101      	bne.n	80119f2 <_fflush_r+0x62>
 80119ee:	68ac      	ldr	r4, [r5, #8]
 80119f0:	e7df      	b.n	80119b2 <_fflush_r+0x22>
 80119f2:	4b04      	ldr	r3, [pc, #16]	; (8011a04 <_fflush_r+0x74>)
 80119f4:	429c      	cmp	r4, r3
 80119f6:	bf08      	it	eq
 80119f8:	68ec      	ldreq	r4, [r5, #12]
 80119fa:	e7da      	b.n	80119b2 <_fflush_r+0x22>
 80119fc:	08015080 	.word	0x08015080
 8011a00:	080150a0 	.word	0x080150a0
 8011a04:	08015060 	.word	0x08015060

08011a08 <std>:
 8011a08:	2300      	movs	r3, #0
 8011a0a:	b510      	push	{r4, lr}
 8011a0c:	4604      	mov	r4, r0
 8011a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8011a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a16:	6083      	str	r3, [r0, #8]
 8011a18:	8181      	strh	r1, [r0, #12]
 8011a1a:	6643      	str	r3, [r0, #100]	; 0x64
 8011a1c:	81c2      	strh	r2, [r0, #14]
 8011a1e:	6183      	str	r3, [r0, #24]
 8011a20:	4619      	mov	r1, r3
 8011a22:	2208      	movs	r2, #8
 8011a24:	305c      	adds	r0, #92	; 0x5c
 8011a26:	f7fd f931 	bl	800ec8c <memset>
 8011a2a:	4b05      	ldr	r3, [pc, #20]	; (8011a40 <std+0x38>)
 8011a2c:	6263      	str	r3, [r4, #36]	; 0x24
 8011a2e:	4b05      	ldr	r3, [pc, #20]	; (8011a44 <std+0x3c>)
 8011a30:	62a3      	str	r3, [r4, #40]	; 0x28
 8011a32:	4b05      	ldr	r3, [pc, #20]	; (8011a48 <std+0x40>)
 8011a34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a36:	4b05      	ldr	r3, [pc, #20]	; (8011a4c <std+0x44>)
 8011a38:	6224      	str	r4, [r4, #32]
 8011a3a:	6323      	str	r3, [r4, #48]	; 0x30
 8011a3c:	bd10      	pop	{r4, pc}
 8011a3e:	bf00      	nop
 8011a40:	0800fbb9 	.word	0x0800fbb9
 8011a44:	0800fbdf 	.word	0x0800fbdf
 8011a48:	0800fc17 	.word	0x0800fc17
 8011a4c:	0800fc3b 	.word	0x0800fc3b

08011a50 <_cleanup_r>:
 8011a50:	4901      	ldr	r1, [pc, #4]	; (8011a58 <_cleanup_r+0x8>)
 8011a52:	f000 b8af 	b.w	8011bb4 <_fwalk_reent>
 8011a56:	bf00      	nop
 8011a58:	08011991 	.word	0x08011991

08011a5c <__sfmoreglue>:
 8011a5c:	b570      	push	{r4, r5, r6, lr}
 8011a5e:	2268      	movs	r2, #104	; 0x68
 8011a60:	1e4d      	subs	r5, r1, #1
 8011a62:	4355      	muls	r5, r2
 8011a64:	460e      	mov	r6, r1
 8011a66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011a6a:	f001 fa0f 	bl	8012e8c <_malloc_r>
 8011a6e:	4604      	mov	r4, r0
 8011a70:	b140      	cbz	r0, 8011a84 <__sfmoreglue+0x28>
 8011a72:	2100      	movs	r1, #0
 8011a74:	e9c0 1600 	strd	r1, r6, [r0]
 8011a78:	300c      	adds	r0, #12
 8011a7a:	60a0      	str	r0, [r4, #8]
 8011a7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011a80:	f7fd f904 	bl	800ec8c <memset>
 8011a84:	4620      	mov	r0, r4
 8011a86:	bd70      	pop	{r4, r5, r6, pc}

08011a88 <__sfp_lock_acquire>:
 8011a88:	4801      	ldr	r0, [pc, #4]	; (8011a90 <__sfp_lock_acquire+0x8>)
 8011a8a:	f000 bc26 	b.w	80122da <__retarget_lock_acquire_recursive>
 8011a8e:	bf00      	nop
 8011a90:	200031b1 	.word	0x200031b1

08011a94 <__sfp_lock_release>:
 8011a94:	4801      	ldr	r0, [pc, #4]	; (8011a9c <__sfp_lock_release+0x8>)
 8011a96:	f000 bc21 	b.w	80122dc <__retarget_lock_release_recursive>
 8011a9a:	bf00      	nop
 8011a9c:	200031b1 	.word	0x200031b1

08011aa0 <__sinit_lock_acquire>:
 8011aa0:	4801      	ldr	r0, [pc, #4]	; (8011aa8 <__sinit_lock_acquire+0x8>)
 8011aa2:	f000 bc1a 	b.w	80122da <__retarget_lock_acquire_recursive>
 8011aa6:	bf00      	nop
 8011aa8:	200031b2 	.word	0x200031b2

08011aac <__sinit_lock_release>:
 8011aac:	4801      	ldr	r0, [pc, #4]	; (8011ab4 <__sinit_lock_release+0x8>)
 8011aae:	f000 bc15 	b.w	80122dc <__retarget_lock_release_recursive>
 8011ab2:	bf00      	nop
 8011ab4:	200031b2 	.word	0x200031b2

08011ab8 <__sinit>:
 8011ab8:	b510      	push	{r4, lr}
 8011aba:	4604      	mov	r4, r0
 8011abc:	f7ff fff0 	bl	8011aa0 <__sinit_lock_acquire>
 8011ac0:	69a3      	ldr	r3, [r4, #24]
 8011ac2:	b11b      	cbz	r3, 8011acc <__sinit+0x14>
 8011ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ac8:	f7ff bff0 	b.w	8011aac <__sinit_lock_release>
 8011acc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011ad0:	6523      	str	r3, [r4, #80]	; 0x50
 8011ad2:	4b13      	ldr	r3, [pc, #76]	; (8011b20 <__sinit+0x68>)
 8011ad4:	4a13      	ldr	r2, [pc, #76]	; (8011b24 <__sinit+0x6c>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	62a2      	str	r2, [r4, #40]	; 0x28
 8011ada:	42a3      	cmp	r3, r4
 8011adc:	bf04      	itt	eq
 8011ade:	2301      	moveq	r3, #1
 8011ae0:	61a3      	streq	r3, [r4, #24]
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	f000 f820 	bl	8011b28 <__sfp>
 8011ae8:	6060      	str	r0, [r4, #4]
 8011aea:	4620      	mov	r0, r4
 8011aec:	f000 f81c 	bl	8011b28 <__sfp>
 8011af0:	60a0      	str	r0, [r4, #8]
 8011af2:	4620      	mov	r0, r4
 8011af4:	f000 f818 	bl	8011b28 <__sfp>
 8011af8:	2200      	movs	r2, #0
 8011afa:	60e0      	str	r0, [r4, #12]
 8011afc:	2104      	movs	r1, #4
 8011afe:	6860      	ldr	r0, [r4, #4]
 8011b00:	f7ff ff82 	bl	8011a08 <std>
 8011b04:	68a0      	ldr	r0, [r4, #8]
 8011b06:	2201      	movs	r2, #1
 8011b08:	2109      	movs	r1, #9
 8011b0a:	f7ff ff7d 	bl	8011a08 <std>
 8011b0e:	68e0      	ldr	r0, [r4, #12]
 8011b10:	2202      	movs	r2, #2
 8011b12:	2112      	movs	r1, #18
 8011b14:	f7ff ff78 	bl	8011a08 <std>
 8011b18:	2301      	movs	r3, #1
 8011b1a:	61a3      	str	r3, [r4, #24]
 8011b1c:	e7d2      	b.n	8011ac4 <__sinit+0xc>
 8011b1e:	bf00      	nop
 8011b20:	08014f40 	.word	0x08014f40
 8011b24:	08011a51 	.word	0x08011a51

08011b28 <__sfp>:
 8011b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b2a:	4607      	mov	r7, r0
 8011b2c:	f7ff ffac 	bl	8011a88 <__sfp_lock_acquire>
 8011b30:	4b1e      	ldr	r3, [pc, #120]	; (8011bac <__sfp+0x84>)
 8011b32:	681e      	ldr	r6, [r3, #0]
 8011b34:	69b3      	ldr	r3, [r6, #24]
 8011b36:	b913      	cbnz	r3, 8011b3e <__sfp+0x16>
 8011b38:	4630      	mov	r0, r6
 8011b3a:	f7ff ffbd 	bl	8011ab8 <__sinit>
 8011b3e:	3648      	adds	r6, #72	; 0x48
 8011b40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011b44:	3b01      	subs	r3, #1
 8011b46:	d503      	bpl.n	8011b50 <__sfp+0x28>
 8011b48:	6833      	ldr	r3, [r6, #0]
 8011b4a:	b30b      	cbz	r3, 8011b90 <__sfp+0x68>
 8011b4c:	6836      	ldr	r6, [r6, #0]
 8011b4e:	e7f7      	b.n	8011b40 <__sfp+0x18>
 8011b50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011b54:	b9d5      	cbnz	r5, 8011b8c <__sfp+0x64>
 8011b56:	4b16      	ldr	r3, [pc, #88]	; (8011bb0 <__sfp+0x88>)
 8011b58:	60e3      	str	r3, [r4, #12]
 8011b5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011b5e:	6665      	str	r5, [r4, #100]	; 0x64
 8011b60:	f000 fbba 	bl	80122d8 <__retarget_lock_init_recursive>
 8011b64:	f7ff ff96 	bl	8011a94 <__sfp_lock_release>
 8011b68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011b6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011b70:	6025      	str	r5, [r4, #0]
 8011b72:	61a5      	str	r5, [r4, #24]
 8011b74:	2208      	movs	r2, #8
 8011b76:	4629      	mov	r1, r5
 8011b78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011b7c:	f7fd f886 	bl	800ec8c <memset>
 8011b80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011b84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011b88:	4620      	mov	r0, r4
 8011b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b8c:	3468      	adds	r4, #104	; 0x68
 8011b8e:	e7d9      	b.n	8011b44 <__sfp+0x1c>
 8011b90:	2104      	movs	r1, #4
 8011b92:	4638      	mov	r0, r7
 8011b94:	f7ff ff62 	bl	8011a5c <__sfmoreglue>
 8011b98:	4604      	mov	r4, r0
 8011b9a:	6030      	str	r0, [r6, #0]
 8011b9c:	2800      	cmp	r0, #0
 8011b9e:	d1d5      	bne.n	8011b4c <__sfp+0x24>
 8011ba0:	f7ff ff78 	bl	8011a94 <__sfp_lock_release>
 8011ba4:	230c      	movs	r3, #12
 8011ba6:	603b      	str	r3, [r7, #0]
 8011ba8:	e7ee      	b.n	8011b88 <__sfp+0x60>
 8011baa:	bf00      	nop
 8011bac:	08014f40 	.word	0x08014f40
 8011bb0:	ffff0001 	.word	0xffff0001

08011bb4 <_fwalk_reent>:
 8011bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bb8:	4606      	mov	r6, r0
 8011bba:	4688      	mov	r8, r1
 8011bbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011bc0:	2700      	movs	r7, #0
 8011bc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011bc6:	f1b9 0901 	subs.w	r9, r9, #1
 8011bca:	d505      	bpl.n	8011bd8 <_fwalk_reent+0x24>
 8011bcc:	6824      	ldr	r4, [r4, #0]
 8011bce:	2c00      	cmp	r4, #0
 8011bd0:	d1f7      	bne.n	8011bc2 <_fwalk_reent+0xe>
 8011bd2:	4638      	mov	r0, r7
 8011bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bd8:	89ab      	ldrh	r3, [r5, #12]
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d907      	bls.n	8011bee <_fwalk_reent+0x3a>
 8011bde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011be2:	3301      	adds	r3, #1
 8011be4:	d003      	beq.n	8011bee <_fwalk_reent+0x3a>
 8011be6:	4629      	mov	r1, r5
 8011be8:	4630      	mov	r0, r6
 8011bea:	47c0      	blx	r8
 8011bec:	4307      	orrs	r7, r0
 8011bee:	3568      	adds	r5, #104	; 0x68
 8011bf0:	e7e9      	b.n	8011bc6 <_fwalk_reent+0x12>

08011bf2 <rshift>:
 8011bf2:	6903      	ldr	r3, [r0, #16]
 8011bf4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bfc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011c00:	f100 0414 	add.w	r4, r0, #20
 8011c04:	dd45      	ble.n	8011c92 <rshift+0xa0>
 8011c06:	f011 011f 	ands.w	r1, r1, #31
 8011c0a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011c0e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011c12:	d10c      	bne.n	8011c2e <rshift+0x3c>
 8011c14:	f100 0710 	add.w	r7, r0, #16
 8011c18:	4629      	mov	r1, r5
 8011c1a:	42b1      	cmp	r1, r6
 8011c1c:	d334      	bcc.n	8011c88 <rshift+0x96>
 8011c1e:	1a9b      	subs	r3, r3, r2
 8011c20:	009b      	lsls	r3, r3, #2
 8011c22:	1eea      	subs	r2, r5, #3
 8011c24:	4296      	cmp	r6, r2
 8011c26:	bf38      	it	cc
 8011c28:	2300      	movcc	r3, #0
 8011c2a:	4423      	add	r3, r4
 8011c2c:	e015      	b.n	8011c5a <rshift+0x68>
 8011c2e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011c32:	f1c1 0820 	rsb	r8, r1, #32
 8011c36:	40cf      	lsrs	r7, r1
 8011c38:	f105 0e04 	add.w	lr, r5, #4
 8011c3c:	46a1      	mov	r9, r4
 8011c3e:	4576      	cmp	r6, lr
 8011c40:	46f4      	mov	ip, lr
 8011c42:	d815      	bhi.n	8011c70 <rshift+0x7e>
 8011c44:	1a9a      	subs	r2, r3, r2
 8011c46:	0092      	lsls	r2, r2, #2
 8011c48:	3a04      	subs	r2, #4
 8011c4a:	3501      	adds	r5, #1
 8011c4c:	42ae      	cmp	r6, r5
 8011c4e:	bf38      	it	cc
 8011c50:	2200      	movcc	r2, #0
 8011c52:	18a3      	adds	r3, r4, r2
 8011c54:	50a7      	str	r7, [r4, r2]
 8011c56:	b107      	cbz	r7, 8011c5a <rshift+0x68>
 8011c58:	3304      	adds	r3, #4
 8011c5a:	1b1a      	subs	r2, r3, r4
 8011c5c:	42a3      	cmp	r3, r4
 8011c5e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011c62:	bf08      	it	eq
 8011c64:	2300      	moveq	r3, #0
 8011c66:	6102      	str	r2, [r0, #16]
 8011c68:	bf08      	it	eq
 8011c6a:	6143      	streq	r3, [r0, #20]
 8011c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c70:	f8dc c000 	ldr.w	ip, [ip]
 8011c74:	fa0c fc08 	lsl.w	ip, ip, r8
 8011c78:	ea4c 0707 	orr.w	r7, ip, r7
 8011c7c:	f849 7b04 	str.w	r7, [r9], #4
 8011c80:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011c84:	40cf      	lsrs	r7, r1
 8011c86:	e7da      	b.n	8011c3e <rshift+0x4c>
 8011c88:	f851 cb04 	ldr.w	ip, [r1], #4
 8011c8c:	f847 cf04 	str.w	ip, [r7, #4]!
 8011c90:	e7c3      	b.n	8011c1a <rshift+0x28>
 8011c92:	4623      	mov	r3, r4
 8011c94:	e7e1      	b.n	8011c5a <rshift+0x68>

08011c96 <__hexdig_fun>:
 8011c96:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011c9a:	2b09      	cmp	r3, #9
 8011c9c:	d802      	bhi.n	8011ca4 <__hexdig_fun+0xe>
 8011c9e:	3820      	subs	r0, #32
 8011ca0:	b2c0      	uxtb	r0, r0
 8011ca2:	4770      	bx	lr
 8011ca4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011ca8:	2b05      	cmp	r3, #5
 8011caa:	d801      	bhi.n	8011cb0 <__hexdig_fun+0x1a>
 8011cac:	3847      	subs	r0, #71	; 0x47
 8011cae:	e7f7      	b.n	8011ca0 <__hexdig_fun+0xa>
 8011cb0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011cb4:	2b05      	cmp	r3, #5
 8011cb6:	d801      	bhi.n	8011cbc <__hexdig_fun+0x26>
 8011cb8:	3827      	subs	r0, #39	; 0x27
 8011cba:	e7f1      	b.n	8011ca0 <__hexdig_fun+0xa>
 8011cbc:	2000      	movs	r0, #0
 8011cbe:	4770      	bx	lr

08011cc0 <__gethex>:
 8011cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cc4:	ed2d 8b02 	vpush	{d8}
 8011cc8:	b089      	sub	sp, #36	; 0x24
 8011cca:	ee08 0a10 	vmov	s16, r0
 8011cce:	9304      	str	r3, [sp, #16]
 8011cd0:	4bb4      	ldr	r3, [pc, #720]	; (8011fa4 <__gethex+0x2e4>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	9301      	str	r3, [sp, #4]
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	468b      	mov	fp, r1
 8011cda:	4690      	mov	r8, r2
 8011cdc:	f7ee fa92 	bl	8000204 <strlen>
 8011ce0:	9b01      	ldr	r3, [sp, #4]
 8011ce2:	f8db 2000 	ldr.w	r2, [fp]
 8011ce6:	4403      	add	r3, r0
 8011ce8:	4682      	mov	sl, r0
 8011cea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011cee:	9305      	str	r3, [sp, #20]
 8011cf0:	1c93      	adds	r3, r2, #2
 8011cf2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011cf6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011cfa:	32fe      	adds	r2, #254	; 0xfe
 8011cfc:	18d1      	adds	r1, r2, r3
 8011cfe:	461f      	mov	r7, r3
 8011d00:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011d04:	9100      	str	r1, [sp, #0]
 8011d06:	2830      	cmp	r0, #48	; 0x30
 8011d08:	d0f8      	beq.n	8011cfc <__gethex+0x3c>
 8011d0a:	f7ff ffc4 	bl	8011c96 <__hexdig_fun>
 8011d0e:	4604      	mov	r4, r0
 8011d10:	2800      	cmp	r0, #0
 8011d12:	d13a      	bne.n	8011d8a <__gethex+0xca>
 8011d14:	9901      	ldr	r1, [sp, #4]
 8011d16:	4652      	mov	r2, sl
 8011d18:	4638      	mov	r0, r7
 8011d1a:	f001 ff69 	bl	8013bf0 <strncmp>
 8011d1e:	4605      	mov	r5, r0
 8011d20:	2800      	cmp	r0, #0
 8011d22:	d168      	bne.n	8011df6 <__gethex+0x136>
 8011d24:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011d28:	eb07 060a 	add.w	r6, r7, sl
 8011d2c:	f7ff ffb3 	bl	8011c96 <__hexdig_fun>
 8011d30:	2800      	cmp	r0, #0
 8011d32:	d062      	beq.n	8011dfa <__gethex+0x13a>
 8011d34:	4633      	mov	r3, r6
 8011d36:	7818      	ldrb	r0, [r3, #0]
 8011d38:	2830      	cmp	r0, #48	; 0x30
 8011d3a:	461f      	mov	r7, r3
 8011d3c:	f103 0301 	add.w	r3, r3, #1
 8011d40:	d0f9      	beq.n	8011d36 <__gethex+0x76>
 8011d42:	f7ff ffa8 	bl	8011c96 <__hexdig_fun>
 8011d46:	2301      	movs	r3, #1
 8011d48:	fab0 f480 	clz	r4, r0
 8011d4c:	0964      	lsrs	r4, r4, #5
 8011d4e:	4635      	mov	r5, r6
 8011d50:	9300      	str	r3, [sp, #0]
 8011d52:	463a      	mov	r2, r7
 8011d54:	4616      	mov	r6, r2
 8011d56:	3201      	adds	r2, #1
 8011d58:	7830      	ldrb	r0, [r6, #0]
 8011d5a:	f7ff ff9c 	bl	8011c96 <__hexdig_fun>
 8011d5e:	2800      	cmp	r0, #0
 8011d60:	d1f8      	bne.n	8011d54 <__gethex+0x94>
 8011d62:	9901      	ldr	r1, [sp, #4]
 8011d64:	4652      	mov	r2, sl
 8011d66:	4630      	mov	r0, r6
 8011d68:	f001 ff42 	bl	8013bf0 <strncmp>
 8011d6c:	b980      	cbnz	r0, 8011d90 <__gethex+0xd0>
 8011d6e:	b94d      	cbnz	r5, 8011d84 <__gethex+0xc4>
 8011d70:	eb06 050a 	add.w	r5, r6, sl
 8011d74:	462a      	mov	r2, r5
 8011d76:	4616      	mov	r6, r2
 8011d78:	3201      	adds	r2, #1
 8011d7a:	7830      	ldrb	r0, [r6, #0]
 8011d7c:	f7ff ff8b 	bl	8011c96 <__hexdig_fun>
 8011d80:	2800      	cmp	r0, #0
 8011d82:	d1f8      	bne.n	8011d76 <__gethex+0xb6>
 8011d84:	1bad      	subs	r5, r5, r6
 8011d86:	00ad      	lsls	r5, r5, #2
 8011d88:	e004      	b.n	8011d94 <__gethex+0xd4>
 8011d8a:	2400      	movs	r4, #0
 8011d8c:	4625      	mov	r5, r4
 8011d8e:	e7e0      	b.n	8011d52 <__gethex+0x92>
 8011d90:	2d00      	cmp	r5, #0
 8011d92:	d1f7      	bne.n	8011d84 <__gethex+0xc4>
 8011d94:	7833      	ldrb	r3, [r6, #0]
 8011d96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011d9a:	2b50      	cmp	r3, #80	; 0x50
 8011d9c:	d13b      	bne.n	8011e16 <__gethex+0x156>
 8011d9e:	7873      	ldrb	r3, [r6, #1]
 8011da0:	2b2b      	cmp	r3, #43	; 0x2b
 8011da2:	d02c      	beq.n	8011dfe <__gethex+0x13e>
 8011da4:	2b2d      	cmp	r3, #45	; 0x2d
 8011da6:	d02e      	beq.n	8011e06 <__gethex+0x146>
 8011da8:	1c71      	adds	r1, r6, #1
 8011daa:	f04f 0900 	mov.w	r9, #0
 8011dae:	7808      	ldrb	r0, [r1, #0]
 8011db0:	f7ff ff71 	bl	8011c96 <__hexdig_fun>
 8011db4:	1e43      	subs	r3, r0, #1
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	2b18      	cmp	r3, #24
 8011dba:	d82c      	bhi.n	8011e16 <__gethex+0x156>
 8011dbc:	f1a0 0210 	sub.w	r2, r0, #16
 8011dc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011dc4:	f7ff ff67 	bl	8011c96 <__hexdig_fun>
 8011dc8:	1e43      	subs	r3, r0, #1
 8011dca:	b2db      	uxtb	r3, r3
 8011dcc:	2b18      	cmp	r3, #24
 8011dce:	d91d      	bls.n	8011e0c <__gethex+0x14c>
 8011dd0:	f1b9 0f00 	cmp.w	r9, #0
 8011dd4:	d000      	beq.n	8011dd8 <__gethex+0x118>
 8011dd6:	4252      	negs	r2, r2
 8011dd8:	4415      	add	r5, r2
 8011dda:	f8cb 1000 	str.w	r1, [fp]
 8011dde:	b1e4      	cbz	r4, 8011e1a <__gethex+0x15a>
 8011de0:	9b00      	ldr	r3, [sp, #0]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	bf14      	ite	ne
 8011de6:	2700      	movne	r7, #0
 8011de8:	2706      	moveq	r7, #6
 8011dea:	4638      	mov	r0, r7
 8011dec:	b009      	add	sp, #36	; 0x24
 8011dee:	ecbd 8b02 	vpop	{d8}
 8011df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011df6:	463e      	mov	r6, r7
 8011df8:	4625      	mov	r5, r4
 8011dfa:	2401      	movs	r4, #1
 8011dfc:	e7ca      	b.n	8011d94 <__gethex+0xd4>
 8011dfe:	f04f 0900 	mov.w	r9, #0
 8011e02:	1cb1      	adds	r1, r6, #2
 8011e04:	e7d3      	b.n	8011dae <__gethex+0xee>
 8011e06:	f04f 0901 	mov.w	r9, #1
 8011e0a:	e7fa      	b.n	8011e02 <__gethex+0x142>
 8011e0c:	230a      	movs	r3, #10
 8011e0e:	fb03 0202 	mla	r2, r3, r2, r0
 8011e12:	3a10      	subs	r2, #16
 8011e14:	e7d4      	b.n	8011dc0 <__gethex+0x100>
 8011e16:	4631      	mov	r1, r6
 8011e18:	e7df      	b.n	8011dda <__gethex+0x11a>
 8011e1a:	1bf3      	subs	r3, r6, r7
 8011e1c:	3b01      	subs	r3, #1
 8011e1e:	4621      	mov	r1, r4
 8011e20:	2b07      	cmp	r3, #7
 8011e22:	dc0b      	bgt.n	8011e3c <__gethex+0x17c>
 8011e24:	ee18 0a10 	vmov	r0, s16
 8011e28:	f000 faec 	bl	8012404 <_Balloc>
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	b940      	cbnz	r0, 8011e42 <__gethex+0x182>
 8011e30:	4b5d      	ldr	r3, [pc, #372]	; (8011fa8 <__gethex+0x2e8>)
 8011e32:	4602      	mov	r2, r0
 8011e34:	21de      	movs	r1, #222	; 0xde
 8011e36:	485d      	ldr	r0, [pc, #372]	; (8011fac <__gethex+0x2ec>)
 8011e38:	f001 ffaa 	bl	8013d90 <__assert_func>
 8011e3c:	3101      	adds	r1, #1
 8011e3e:	105b      	asrs	r3, r3, #1
 8011e40:	e7ee      	b.n	8011e20 <__gethex+0x160>
 8011e42:	f100 0914 	add.w	r9, r0, #20
 8011e46:	f04f 0b00 	mov.w	fp, #0
 8011e4a:	f1ca 0301 	rsb	r3, sl, #1
 8011e4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011e52:	f8cd b000 	str.w	fp, [sp]
 8011e56:	9306      	str	r3, [sp, #24]
 8011e58:	42b7      	cmp	r7, r6
 8011e5a:	d340      	bcc.n	8011ede <__gethex+0x21e>
 8011e5c:	9802      	ldr	r0, [sp, #8]
 8011e5e:	9b00      	ldr	r3, [sp, #0]
 8011e60:	f840 3b04 	str.w	r3, [r0], #4
 8011e64:	eba0 0009 	sub.w	r0, r0, r9
 8011e68:	1080      	asrs	r0, r0, #2
 8011e6a:	0146      	lsls	r6, r0, #5
 8011e6c:	6120      	str	r0, [r4, #16]
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f000 fbba 	bl	80125e8 <__hi0bits>
 8011e74:	1a30      	subs	r0, r6, r0
 8011e76:	f8d8 6000 	ldr.w	r6, [r8]
 8011e7a:	42b0      	cmp	r0, r6
 8011e7c:	dd63      	ble.n	8011f46 <__gethex+0x286>
 8011e7e:	1b87      	subs	r7, r0, r6
 8011e80:	4639      	mov	r1, r7
 8011e82:	4620      	mov	r0, r4
 8011e84:	f000 ff5e 	bl	8012d44 <__any_on>
 8011e88:	4682      	mov	sl, r0
 8011e8a:	b1a8      	cbz	r0, 8011eb8 <__gethex+0x1f8>
 8011e8c:	1e7b      	subs	r3, r7, #1
 8011e8e:	1159      	asrs	r1, r3, #5
 8011e90:	f003 021f 	and.w	r2, r3, #31
 8011e94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011e98:	f04f 0a01 	mov.w	sl, #1
 8011e9c:	fa0a f202 	lsl.w	r2, sl, r2
 8011ea0:	420a      	tst	r2, r1
 8011ea2:	d009      	beq.n	8011eb8 <__gethex+0x1f8>
 8011ea4:	4553      	cmp	r3, sl
 8011ea6:	dd05      	ble.n	8011eb4 <__gethex+0x1f4>
 8011ea8:	1eb9      	subs	r1, r7, #2
 8011eaa:	4620      	mov	r0, r4
 8011eac:	f000 ff4a 	bl	8012d44 <__any_on>
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	d145      	bne.n	8011f40 <__gethex+0x280>
 8011eb4:	f04f 0a02 	mov.w	sl, #2
 8011eb8:	4639      	mov	r1, r7
 8011eba:	4620      	mov	r0, r4
 8011ebc:	f7ff fe99 	bl	8011bf2 <rshift>
 8011ec0:	443d      	add	r5, r7
 8011ec2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ec6:	42ab      	cmp	r3, r5
 8011ec8:	da4c      	bge.n	8011f64 <__gethex+0x2a4>
 8011eca:	ee18 0a10 	vmov	r0, s16
 8011ece:	4621      	mov	r1, r4
 8011ed0:	f000 fad8 	bl	8012484 <_Bfree>
 8011ed4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	6013      	str	r3, [r2, #0]
 8011eda:	27a3      	movs	r7, #163	; 0xa3
 8011edc:	e785      	b.n	8011dea <__gethex+0x12a>
 8011ede:	1e73      	subs	r3, r6, #1
 8011ee0:	9a05      	ldr	r2, [sp, #20]
 8011ee2:	9303      	str	r3, [sp, #12]
 8011ee4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011ee8:	4293      	cmp	r3, r2
 8011eea:	d019      	beq.n	8011f20 <__gethex+0x260>
 8011eec:	f1bb 0f20 	cmp.w	fp, #32
 8011ef0:	d107      	bne.n	8011f02 <__gethex+0x242>
 8011ef2:	9b02      	ldr	r3, [sp, #8]
 8011ef4:	9a00      	ldr	r2, [sp, #0]
 8011ef6:	f843 2b04 	str.w	r2, [r3], #4
 8011efa:	9302      	str	r3, [sp, #8]
 8011efc:	2300      	movs	r3, #0
 8011efe:	9300      	str	r3, [sp, #0]
 8011f00:	469b      	mov	fp, r3
 8011f02:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011f06:	f7ff fec6 	bl	8011c96 <__hexdig_fun>
 8011f0a:	9b00      	ldr	r3, [sp, #0]
 8011f0c:	f000 000f 	and.w	r0, r0, #15
 8011f10:	fa00 f00b 	lsl.w	r0, r0, fp
 8011f14:	4303      	orrs	r3, r0
 8011f16:	9300      	str	r3, [sp, #0]
 8011f18:	f10b 0b04 	add.w	fp, fp, #4
 8011f1c:	9b03      	ldr	r3, [sp, #12]
 8011f1e:	e00d      	b.n	8011f3c <__gethex+0x27c>
 8011f20:	9b03      	ldr	r3, [sp, #12]
 8011f22:	9a06      	ldr	r2, [sp, #24]
 8011f24:	4413      	add	r3, r2
 8011f26:	42bb      	cmp	r3, r7
 8011f28:	d3e0      	bcc.n	8011eec <__gethex+0x22c>
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	9901      	ldr	r1, [sp, #4]
 8011f2e:	9307      	str	r3, [sp, #28]
 8011f30:	4652      	mov	r2, sl
 8011f32:	f001 fe5d 	bl	8013bf0 <strncmp>
 8011f36:	9b07      	ldr	r3, [sp, #28]
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	d1d7      	bne.n	8011eec <__gethex+0x22c>
 8011f3c:	461e      	mov	r6, r3
 8011f3e:	e78b      	b.n	8011e58 <__gethex+0x198>
 8011f40:	f04f 0a03 	mov.w	sl, #3
 8011f44:	e7b8      	b.n	8011eb8 <__gethex+0x1f8>
 8011f46:	da0a      	bge.n	8011f5e <__gethex+0x29e>
 8011f48:	1a37      	subs	r7, r6, r0
 8011f4a:	4621      	mov	r1, r4
 8011f4c:	ee18 0a10 	vmov	r0, s16
 8011f50:	463a      	mov	r2, r7
 8011f52:	f000 fcb3 	bl	80128bc <__lshift>
 8011f56:	1bed      	subs	r5, r5, r7
 8011f58:	4604      	mov	r4, r0
 8011f5a:	f100 0914 	add.w	r9, r0, #20
 8011f5e:	f04f 0a00 	mov.w	sl, #0
 8011f62:	e7ae      	b.n	8011ec2 <__gethex+0x202>
 8011f64:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011f68:	42a8      	cmp	r0, r5
 8011f6a:	dd72      	ble.n	8012052 <__gethex+0x392>
 8011f6c:	1b45      	subs	r5, r0, r5
 8011f6e:	42ae      	cmp	r6, r5
 8011f70:	dc36      	bgt.n	8011fe0 <__gethex+0x320>
 8011f72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011f76:	2b02      	cmp	r3, #2
 8011f78:	d02a      	beq.n	8011fd0 <__gethex+0x310>
 8011f7a:	2b03      	cmp	r3, #3
 8011f7c:	d02c      	beq.n	8011fd8 <__gethex+0x318>
 8011f7e:	2b01      	cmp	r3, #1
 8011f80:	d11c      	bne.n	8011fbc <__gethex+0x2fc>
 8011f82:	42ae      	cmp	r6, r5
 8011f84:	d11a      	bne.n	8011fbc <__gethex+0x2fc>
 8011f86:	2e01      	cmp	r6, #1
 8011f88:	d112      	bne.n	8011fb0 <__gethex+0x2f0>
 8011f8a:	9a04      	ldr	r2, [sp, #16]
 8011f8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011f90:	6013      	str	r3, [r2, #0]
 8011f92:	2301      	movs	r3, #1
 8011f94:	6123      	str	r3, [r4, #16]
 8011f96:	f8c9 3000 	str.w	r3, [r9]
 8011f9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f9c:	2762      	movs	r7, #98	; 0x62
 8011f9e:	601c      	str	r4, [r3, #0]
 8011fa0:	e723      	b.n	8011dea <__gethex+0x12a>
 8011fa2:	bf00      	nop
 8011fa4:	08015128 	.word	0x08015128
 8011fa8:	0801504f 	.word	0x0801504f
 8011fac:	080150c0 	.word	0x080150c0
 8011fb0:	1e71      	subs	r1, r6, #1
 8011fb2:	4620      	mov	r0, r4
 8011fb4:	f000 fec6 	bl	8012d44 <__any_on>
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	d1e6      	bne.n	8011f8a <__gethex+0x2ca>
 8011fbc:	ee18 0a10 	vmov	r0, s16
 8011fc0:	4621      	mov	r1, r4
 8011fc2:	f000 fa5f 	bl	8012484 <_Bfree>
 8011fc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011fc8:	2300      	movs	r3, #0
 8011fca:	6013      	str	r3, [r2, #0]
 8011fcc:	2750      	movs	r7, #80	; 0x50
 8011fce:	e70c      	b.n	8011dea <__gethex+0x12a>
 8011fd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d1f2      	bne.n	8011fbc <__gethex+0x2fc>
 8011fd6:	e7d8      	b.n	8011f8a <__gethex+0x2ca>
 8011fd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d1d5      	bne.n	8011f8a <__gethex+0x2ca>
 8011fde:	e7ed      	b.n	8011fbc <__gethex+0x2fc>
 8011fe0:	1e6f      	subs	r7, r5, #1
 8011fe2:	f1ba 0f00 	cmp.w	sl, #0
 8011fe6:	d131      	bne.n	801204c <__gethex+0x38c>
 8011fe8:	b127      	cbz	r7, 8011ff4 <__gethex+0x334>
 8011fea:	4639      	mov	r1, r7
 8011fec:	4620      	mov	r0, r4
 8011fee:	f000 fea9 	bl	8012d44 <__any_on>
 8011ff2:	4682      	mov	sl, r0
 8011ff4:	117b      	asrs	r3, r7, #5
 8011ff6:	2101      	movs	r1, #1
 8011ff8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011ffc:	f007 071f 	and.w	r7, r7, #31
 8012000:	fa01 f707 	lsl.w	r7, r1, r7
 8012004:	421f      	tst	r7, r3
 8012006:	4629      	mov	r1, r5
 8012008:	4620      	mov	r0, r4
 801200a:	bf18      	it	ne
 801200c:	f04a 0a02 	orrne.w	sl, sl, #2
 8012010:	1b76      	subs	r6, r6, r5
 8012012:	f7ff fdee 	bl	8011bf2 <rshift>
 8012016:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801201a:	2702      	movs	r7, #2
 801201c:	f1ba 0f00 	cmp.w	sl, #0
 8012020:	d048      	beq.n	80120b4 <__gethex+0x3f4>
 8012022:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012026:	2b02      	cmp	r3, #2
 8012028:	d015      	beq.n	8012056 <__gethex+0x396>
 801202a:	2b03      	cmp	r3, #3
 801202c:	d017      	beq.n	801205e <__gethex+0x39e>
 801202e:	2b01      	cmp	r3, #1
 8012030:	d109      	bne.n	8012046 <__gethex+0x386>
 8012032:	f01a 0f02 	tst.w	sl, #2
 8012036:	d006      	beq.n	8012046 <__gethex+0x386>
 8012038:	f8d9 0000 	ldr.w	r0, [r9]
 801203c:	ea4a 0a00 	orr.w	sl, sl, r0
 8012040:	f01a 0f01 	tst.w	sl, #1
 8012044:	d10e      	bne.n	8012064 <__gethex+0x3a4>
 8012046:	f047 0710 	orr.w	r7, r7, #16
 801204a:	e033      	b.n	80120b4 <__gethex+0x3f4>
 801204c:	f04f 0a01 	mov.w	sl, #1
 8012050:	e7d0      	b.n	8011ff4 <__gethex+0x334>
 8012052:	2701      	movs	r7, #1
 8012054:	e7e2      	b.n	801201c <__gethex+0x35c>
 8012056:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012058:	f1c3 0301 	rsb	r3, r3, #1
 801205c:	9315      	str	r3, [sp, #84]	; 0x54
 801205e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012060:	2b00      	cmp	r3, #0
 8012062:	d0f0      	beq.n	8012046 <__gethex+0x386>
 8012064:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012068:	f104 0314 	add.w	r3, r4, #20
 801206c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012070:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012074:	f04f 0c00 	mov.w	ip, #0
 8012078:	4618      	mov	r0, r3
 801207a:	f853 2b04 	ldr.w	r2, [r3], #4
 801207e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012082:	d01c      	beq.n	80120be <__gethex+0x3fe>
 8012084:	3201      	adds	r2, #1
 8012086:	6002      	str	r2, [r0, #0]
 8012088:	2f02      	cmp	r7, #2
 801208a:	f104 0314 	add.w	r3, r4, #20
 801208e:	d13f      	bne.n	8012110 <__gethex+0x450>
 8012090:	f8d8 2000 	ldr.w	r2, [r8]
 8012094:	3a01      	subs	r2, #1
 8012096:	42b2      	cmp	r2, r6
 8012098:	d10a      	bne.n	80120b0 <__gethex+0x3f0>
 801209a:	1171      	asrs	r1, r6, #5
 801209c:	2201      	movs	r2, #1
 801209e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80120a2:	f006 061f 	and.w	r6, r6, #31
 80120a6:	fa02 f606 	lsl.w	r6, r2, r6
 80120aa:	421e      	tst	r6, r3
 80120ac:	bf18      	it	ne
 80120ae:	4617      	movne	r7, r2
 80120b0:	f047 0720 	orr.w	r7, r7, #32
 80120b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80120b6:	601c      	str	r4, [r3, #0]
 80120b8:	9b04      	ldr	r3, [sp, #16]
 80120ba:	601d      	str	r5, [r3, #0]
 80120bc:	e695      	b.n	8011dea <__gethex+0x12a>
 80120be:	4299      	cmp	r1, r3
 80120c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80120c4:	d8d8      	bhi.n	8012078 <__gethex+0x3b8>
 80120c6:	68a3      	ldr	r3, [r4, #8]
 80120c8:	459b      	cmp	fp, r3
 80120ca:	db19      	blt.n	8012100 <__gethex+0x440>
 80120cc:	6861      	ldr	r1, [r4, #4]
 80120ce:	ee18 0a10 	vmov	r0, s16
 80120d2:	3101      	adds	r1, #1
 80120d4:	f000 f996 	bl	8012404 <_Balloc>
 80120d8:	4681      	mov	r9, r0
 80120da:	b918      	cbnz	r0, 80120e4 <__gethex+0x424>
 80120dc:	4b1a      	ldr	r3, [pc, #104]	; (8012148 <__gethex+0x488>)
 80120de:	4602      	mov	r2, r0
 80120e0:	2184      	movs	r1, #132	; 0x84
 80120e2:	e6a8      	b.n	8011e36 <__gethex+0x176>
 80120e4:	6922      	ldr	r2, [r4, #16]
 80120e6:	3202      	adds	r2, #2
 80120e8:	f104 010c 	add.w	r1, r4, #12
 80120ec:	0092      	lsls	r2, r2, #2
 80120ee:	300c      	adds	r0, #12
 80120f0:	f7fc fda4 	bl	800ec3c <memcpy>
 80120f4:	4621      	mov	r1, r4
 80120f6:	ee18 0a10 	vmov	r0, s16
 80120fa:	f000 f9c3 	bl	8012484 <_Bfree>
 80120fe:	464c      	mov	r4, r9
 8012100:	6923      	ldr	r3, [r4, #16]
 8012102:	1c5a      	adds	r2, r3, #1
 8012104:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012108:	6122      	str	r2, [r4, #16]
 801210a:	2201      	movs	r2, #1
 801210c:	615a      	str	r2, [r3, #20]
 801210e:	e7bb      	b.n	8012088 <__gethex+0x3c8>
 8012110:	6922      	ldr	r2, [r4, #16]
 8012112:	455a      	cmp	r2, fp
 8012114:	dd0b      	ble.n	801212e <__gethex+0x46e>
 8012116:	2101      	movs	r1, #1
 8012118:	4620      	mov	r0, r4
 801211a:	f7ff fd6a 	bl	8011bf2 <rshift>
 801211e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012122:	3501      	adds	r5, #1
 8012124:	42ab      	cmp	r3, r5
 8012126:	f6ff aed0 	blt.w	8011eca <__gethex+0x20a>
 801212a:	2701      	movs	r7, #1
 801212c:	e7c0      	b.n	80120b0 <__gethex+0x3f0>
 801212e:	f016 061f 	ands.w	r6, r6, #31
 8012132:	d0fa      	beq.n	801212a <__gethex+0x46a>
 8012134:	4453      	add	r3, sl
 8012136:	f1c6 0620 	rsb	r6, r6, #32
 801213a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801213e:	f000 fa53 	bl	80125e8 <__hi0bits>
 8012142:	42b0      	cmp	r0, r6
 8012144:	dbe7      	blt.n	8012116 <__gethex+0x456>
 8012146:	e7f0      	b.n	801212a <__gethex+0x46a>
 8012148:	0801504f 	.word	0x0801504f

0801214c <L_shift>:
 801214c:	f1c2 0208 	rsb	r2, r2, #8
 8012150:	0092      	lsls	r2, r2, #2
 8012152:	b570      	push	{r4, r5, r6, lr}
 8012154:	f1c2 0620 	rsb	r6, r2, #32
 8012158:	6843      	ldr	r3, [r0, #4]
 801215a:	6804      	ldr	r4, [r0, #0]
 801215c:	fa03 f506 	lsl.w	r5, r3, r6
 8012160:	432c      	orrs	r4, r5
 8012162:	40d3      	lsrs	r3, r2
 8012164:	6004      	str	r4, [r0, #0]
 8012166:	f840 3f04 	str.w	r3, [r0, #4]!
 801216a:	4288      	cmp	r0, r1
 801216c:	d3f4      	bcc.n	8012158 <L_shift+0xc>
 801216e:	bd70      	pop	{r4, r5, r6, pc}

08012170 <__match>:
 8012170:	b530      	push	{r4, r5, lr}
 8012172:	6803      	ldr	r3, [r0, #0]
 8012174:	3301      	adds	r3, #1
 8012176:	f811 4b01 	ldrb.w	r4, [r1], #1
 801217a:	b914      	cbnz	r4, 8012182 <__match+0x12>
 801217c:	6003      	str	r3, [r0, #0]
 801217e:	2001      	movs	r0, #1
 8012180:	bd30      	pop	{r4, r5, pc}
 8012182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012186:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801218a:	2d19      	cmp	r5, #25
 801218c:	bf98      	it	ls
 801218e:	3220      	addls	r2, #32
 8012190:	42a2      	cmp	r2, r4
 8012192:	d0f0      	beq.n	8012176 <__match+0x6>
 8012194:	2000      	movs	r0, #0
 8012196:	e7f3      	b.n	8012180 <__match+0x10>

08012198 <__hexnan>:
 8012198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801219c:	680b      	ldr	r3, [r1, #0]
 801219e:	115e      	asrs	r6, r3, #5
 80121a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80121a4:	f013 031f 	ands.w	r3, r3, #31
 80121a8:	b087      	sub	sp, #28
 80121aa:	bf18      	it	ne
 80121ac:	3604      	addne	r6, #4
 80121ae:	2500      	movs	r5, #0
 80121b0:	1f37      	subs	r7, r6, #4
 80121b2:	4690      	mov	r8, r2
 80121b4:	6802      	ldr	r2, [r0, #0]
 80121b6:	9301      	str	r3, [sp, #4]
 80121b8:	4682      	mov	sl, r0
 80121ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80121be:	46b9      	mov	r9, r7
 80121c0:	463c      	mov	r4, r7
 80121c2:	9502      	str	r5, [sp, #8]
 80121c4:	46ab      	mov	fp, r5
 80121c6:	7851      	ldrb	r1, [r2, #1]
 80121c8:	1c53      	adds	r3, r2, #1
 80121ca:	9303      	str	r3, [sp, #12]
 80121cc:	b341      	cbz	r1, 8012220 <__hexnan+0x88>
 80121ce:	4608      	mov	r0, r1
 80121d0:	9205      	str	r2, [sp, #20]
 80121d2:	9104      	str	r1, [sp, #16]
 80121d4:	f7ff fd5f 	bl	8011c96 <__hexdig_fun>
 80121d8:	2800      	cmp	r0, #0
 80121da:	d14f      	bne.n	801227c <__hexnan+0xe4>
 80121dc:	9904      	ldr	r1, [sp, #16]
 80121de:	9a05      	ldr	r2, [sp, #20]
 80121e0:	2920      	cmp	r1, #32
 80121e2:	d818      	bhi.n	8012216 <__hexnan+0x7e>
 80121e4:	9b02      	ldr	r3, [sp, #8]
 80121e6:	459b      	cmp	fp, r3
 80121e8:	dd13      	ble.n	8012212 <__hexnan+0x7a>
 80121ea:	454c      	cmp	r4, r9
 80121ec:	d206      	bcs.n	80121fc <__hexnan+0x64>
 80121ee:	2d07      	cmp	r5, #7
 80121f0:	dc04      	bgt.n	80121fc <__hexnan+0x64>
 80121f2:	462a      	mov	r2, r5
 80121f4:	4649      	mov	r1, r9
 80121f6:	4620      	mov	r0, r4
 80121f8:	f7ff ffa8 	bl	801214c <L_shift>
 80121fc:	4544      	cmp	r4, r8
 80121fe:	d950      	bls.n	80122a2 <__hexnan+0x10a>
 8012200:	2300      	movs	r3, #0
 8012202:	f1a4 0904 	sub.w	r9, r4, #4
 8012206:	f844 3c04 	str.w	r3, [r4, #-4]
 801220a:	f8cd b008 	str.w	fp, [sp, #8]
 801220e:	464c      	mov	r4, r9
 8012210:	461d      	mov	r5, r3
 8012212:	9a03      	ldr	r2, [sp, #12]
 8012214:	e7d7      	b.n	80121c6 <__hexnan+0x2e>
 8012216:	2929      	cmp	r1, #41	; 0x29
 8012218:	d156      	bne.n	80122c8 <__hexnan+0x130>
 801221a:	3202      	adds	r2, #2
 801221c:	f8ca 2000 	str.w	r2, [sl]
 8012220:	f1bb 0f00 	cmp.w	fp, #0
 8012224:	d050      	beq.n	80122c8 <__hexnan+0x130>
 8012226:	454c      	cmp	r4, r9
 8012228:	d206      	bcs.n	8012238 <__hexnan+0xa0>
 801222a:	2d07      	cmp	r5, #7
 801222c:	dc04      	bgt.n	8012238 <__hexnan+0xa0>
 801222e:	462a      	mov	r2, r5
 8012230:	4649      	mov	r1, r9
 8012232:	4620      	mov	r0, r4
 8012234:	f7ff ff8a 	bl	801214c <L_shift>
 8012238:	4544      	cmp	r4, r8
 801223a:	d934      	bls.n	80122a6 <__hexnan+0x10e>
 801223c:	f1a8 0204 	sub.w	r2, r8, #4
 8012240:	4623      	mov	r3, r4
 8012242:	f853 1b04 	ldr.w	r1, [r3], #4
 8012246:	f842 1f04 	str.w	r1, [r2, #4]!
 801224a:	429f      	cmp	r7, r3
 801224c:	d2f9      	bcs.n	8012242 <__hexnan+0xaa>
 801224e:	1b3b      	subs	r3, r7, r4
 8012250:	f023 0303 	bic.w	r3, r3, #3
 8012254:	3304      	adds	r3, #4
 8012256:	3401      	adds	r4, #1
 8012258:	3e03      	subs	r6, #3
 801225a:	42b4      	cmp	r4, r6
 801225c:	bf88      	it	hi
 801225e:	2304      	movhi	r3, #4
 8012260:	4443      	add	r3, r8
 8012262:	2200      	movs	r2, #0
 8012264:	f843 2b04 	str.w	r2, [r3], #4
 8012268:	429f      	cmp	r7, r3
 801226a:	d2fb      	bcs.n	8012264 <__hexnan+0xcc>
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	b91b      	cbnz	r3, 8012278 <__hexnan+0xe0>
 8012270:	4547      	cmp	r7, r8
 8012272:	d127      	bne.n	80122c4 <__hexnan+0x12c>
 8012274:	2301      	movs	r3, #1
 8012276:	603b      	str	r3, [r7, #0]
 8012278:	2005      	movs	r0, #5
 801227a:	e026      	b.n	80122ca <__hexnan+0x132>
 801227c:	3501      	adds	r5, #1
 801227e:	2d08      	cmp	r5, #8
 8012280:	f10b 0b01 	add.w	fp, fp, #1
 8012284:	dd06      	ble.n	8012294 <__hexnan+0xfc>
 8012286:	4544      	cmp	r4, r8
 8012288:	d9c3      	bls.n	8012212 <__hexnan+0x7a>
 801228a:	2300      	movs	r3, #0
 801228c:	f844 3c04 	str.w	r3, [r4, #-4]
 8012290:	2501      	movs	r5, #1
 8012292:	3c04      	subs	r4, #4
 8012294:	6822      	ldr	r2, [r4, #0]
 8012296:	f000 000f 	and.w	r0, r0, #15
 801229a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801229e:	6022      	str	r2, [r4, #0]
 80122a0:	e7b7      	b.n	8012212 <__hexnan+0x7a>
 80122a2:	2508      	movs	r5, #8
 80122a4:	e7b5      	b.n	8012212 <__hexnan+0x7a>
 80122a6:	9b01      	ldr	r3, [sp, #4]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d0df      	beq.n	801226c <__hexnan+0xd4>
 80122ac:	f04f 32ff 	mov.w	r2, #4294967295
 80122b0:	f1c3 0320 	rsb	r3, r3, #32
 80122b4:	fa22 f303 	lsr.w	r3, r2, r3
 80122b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80122bc:	401a      	ands	r2, r3
 80122be:	f846 2c04 	str.w	r2, [r6, #-4]
 80122c2:	e7d3      	b.n	801226c <__hexnan+0xd4>
 80122c4:	3f04      	subs	r7, #4
 80122c6:	e7d1      	b.n	801226c <__hexnan+0xd4>
 80122c8:	2004      	movs	r0, #4
 80122ca:	b007      	add	sp, #28
 80122cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080122d0 <_localeconv_r>:
 80122d0:	4800      	ldr	r0, [pc, #0]	; (80122d4 <_localeconv_r+0x4>)
 80122d2:	4770      	bx	lr
 80122d4:	20000268 	.word	0x20000268

080122d8 <__retarget_lock_init_recursive>:
 80122d8:	4770      	bx	lr

080122da <__retarget_lock_acquire_recursive>:
 80122da:	4770      	bx	lr

080122dc <__retarget_lock_release_recursive>:
 80122dc:	4770      	bx	lr
	...

080122e0 <_lseek_r>:
 80122e0:	b538      	push	{r3, r4, r5, lr}
 80122e2:	4d07      	ldr	r5, [pc, #28]	; (8012300 <_lseek_r+0x20>)
 80122e4:	4604      	mov	r4, r0
 80122e6:	4608      	mov	r0, r1
 80122e8:	4611      	mov	r1, r2
 80122ea:	2200      	movs	r2, #0
 80122ec:	602a      	str	r2, [r5, #0]
 80122ee:	461a      	mov	r2, r3
 80122f0:	f7f2 f962 	bl	80045b8 <_lseek>
 80122f4:	1c43      	adds	r3, r0, #1
 80122f6:	d102      	bne.n	80122fe <_lseek_r+0x1e>
 80122f8:	682b      	ldr	r3, [r5, #0]
 80122fa:	b103      	cbz	r3, 80122fe <_lseek_r+0x1e>
 80122fc:	6023      	str	r3, [r4, #0]
 80122fe:	bd38      	pop	{r3, r4, r5, pc}
 8012300:	200031bc 	.word	0x200031bc

08012304 <__swhatbuf_r>:
 8012304:	b570      	push	{r4, r5, r6, lr}
 8012306:	460e      	mov	r6, r1
 8012308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801230c:	2900      	cmp	r1, #0
 801230e:	b096      	sub	sp, #88	; 0x58
 8012310:	4614      	mov	r4, r2
 8012312:	461d      	mov	r5, r3
 8012314:	da08      	bge.n	8012328 <__swhatbuf_r+0x24>
 8012316:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801231a:	2200      	movs	r2, #0
 801231c:	602a      	str	r2, [r5, #0]
 801231e:	061a      	lsls	r2, r3, #24
 8012320:	d410      	bmi.n	8012344 <__swhatbuf_r+0x40>
 8012322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012326:	e00e      	b.n	8012346 <__swhatbuf_r+0x42>
 8012328:	466a      	mov	r2, sp
 801232a:	f001 fd61 	bl	8013df0 <_fstat_r>
 801232e:	2800      	cmp	r0, #0
 8012330:	dbf1      	blt.n	8012316 <__swhatbuf_r+0x12>
 8012332:	9a01      	ldr	r2, [sp, #4]
 8012334:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012338:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801233c:	425a      	negs	r2, r3
 801233e:	415a      	adcs	r2, r3
 8012340:	602a      	str	r2, [r5, #0]
 8012342:	e7ee      	b.n	8012322 <__swhatbuf_r+0x1e>
 8012344:	2340      	movs	r3, #64	; 0x40
 8012346:	2000      	movs	r0, #0
 8012348:	6023      	str	r3, [r4, #0]
 801234a:	b016      	add	sp, #88	; 0x58
 801234c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012350 <__smakebuf_r>:
 8012350:	898b      	ldrh	r3, [r1, #12]
 8012352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012354:	079d      	lsls	r5, r3, #30
 8012356:	4606      	mov	r6, r0
 8012358:	460c      	mov	r4, r1
 801235a:	d507      	bpl.n	801236c <__smakebuf_r+0x1c>
 801235c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012360:	6023      	str	r3, [r4, #0]
 8012362:	6123      	str	r3, [r4, #16]
 8012364:	2301      	movs	r3, #1
 8012366:	6163      	str	r3, [r4, #20]
 8012368:	b002      	add	sp, #8
 801236a:	bd70      	pop	{r4, r5, r6, pc}
 801236c:	ab01      	add	r3, sp, #4
 801236e:	466a      	mov	r2, sp
 8012370:	f7ff ffc8 	bl	8012304 <__swhatbuf_r>
 8012374:	9900      	ldr	r1, [sp, #0]
 8012376:	4605      	mov	r5, r0
 8012378:	4630      	mov	r0, r6
 801237a:	f000 fd87 	bl	8012e8c <_malloc_r>
 801237e:	b948      	cbnz	r0, 8012394 <__smakebuf_r+0x44>
 8012380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012384:	059a      	lsls	r2, r3, #22
 8012386:	d4ef      	bmi.n	8012368 <__smakebuf_r+0x18>
 8012388:	f023 0303 	bic.w	r3, r3, #3
 801238c:	f043 0302 	orr.w	r3, r3, #2
 8012390:	81a3      	strh	r3, [r4, #12]
 8012392:	e7e3      	b.n	801235c <__smakebuf_r+0xc>
 8012394:	4b0d      	ldr	r3, [pc, #52]	; (80123cc <__smakebuf_r+0x7c>)
 8012396:	62b3      	str	r3, [r6, #40]	; 0x28
 8012398:	89a3      	ldrh	r3, [r4, #12]
 801239a:	6020      	str	r0, [r4, #0]
 801239c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123a0:	81a3      	strh	r3, [r4, #12]
 80123a2:	9b00      	ldr	r3, [sp, #0]
 80123a4:	6163      	str	r3, [r4, #20]
 80123a6:	9b01      	ldr	r3, [sp, #4]
 80123a8:	6120      	str	r0, [r4, #16]
 80123aa:	b15b      	cbz	r3, 80123c4 <__smakebuf_r+0x74>
 80123ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123b0:	4630      	mov	r0, r6
 80123b2:	f001 fd2f 	bl	8013e14 <_isatty_r>
 80123b6:	b128      	cbz	r0, 80123c4 <__smakebuf_r+0x74>
 80123b8:	89a3      	ldrh	r3, [r4, #12]
 80123ba:	f023 0303 	bic.w	r3, r3, #3
 80123be:	f043 0301 	orr.w	r3, r3, #1
 80123c2:	81a3      	strh	r3, [r4, #12]
 80123c4:	89a0      	ldrh	r0, [r4, #12]
 80123c6:	4305      	orrs	r5, r0
 80123c8:	81a5      	strh	r5, [r4, #12]
 80123ca:	e7cd      	b.n	8012368 <__smakebuf_r+0x18>
 80123cc:	08011a51 	.word	0x08011a51

080123d0 <malloc>:
 80123d0:	4b02      	ldr	r3, [pc, #8]	; (80123dc <malloc+0xc>)
 80123d2:	4601      	mov	r1, r0
 80123d4:	6818      	ldr	r0, [r3, #0]
 80123d6:	f000 bd59 	b.w	8012e8c <_malloc_r>
 80123da:	bf00      	nop
 80123dc:	20000110 	.word	0x20000110

080123e0 <__ascii_mbtowc>:
 80123e0:	b082      	sub	sp, #8
 80123e2:	b901      	cbnz	r1, 80123e6 <__ascii_mbtowc+0x6>
 80123e4:	a901      	add	r1, sp, #4
 80123e6:	b142      	cbz	r2, 80123fa <__ascii_mbtowc+0x1a>
 80123e8:	b14b      	cbz	r3, 80123fe <__ascii_mbtowc+0x1e>
 80123ea:	7813      	ldrb	r3, [r2, #0]
 80123ec:	600b      	str	r3, [r1, #0]
 80123ee:	7812      	ldrb	r2, [r2, #0]
 80123f0:	1e10      	subs	r0, r2, #0
 80123f2:	bf18      	it	ne
 80123f4:	2001      	movne	r0, #1
 80123f6:	b002      	add	sp, #8
 80123f8:	4770      	bx	lr
 80123fa:	4610      	mov	r0, r2
 80123fc:	e7fb      	b.n	80123f6 <__ascii_mbtowc+0x16>
 80123fe:	f06f 0001 	mvn.w	r0, #1
 8012402:	e7f8      	b.n	80123f6 <__ascii_mbtowc+0x16>

08012404 <_Balloc>:
 8012404:	b570      	push	{r4, r5, r6, lr}
 8012406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012408:	4604      	mov	r4, r0
 801240a:	460d      	mov	r5, r1
 801240c:	b976      	cbnz	r6, 801242c <_Balloc+0x28>
 801240e:	2010      	movs	r0, #16
 8012410:	f7ff ffde 	bl	80123d0 <malloc>
 8012414:	4602      	mov	r2, r0
 8012416:	6260      	str	r0, [r4, #36]	; 0x24
 8012418:	b920      	cbnz	r0, 8012424 <_Balloc+0x20>
 801241a:	4b18      	ldr	r3, [pc, #96]	; (801247c <_Balloc+0x78>)
 801241c:	4818      	ldr	r0, [pc, #96]	; (8012480 <_Balloc+0x7c>)
 801241e:	2166      	movs	r1, #102	; 0x66
 8012420:	f001 fcb6 	bl	8013d90 <__assert_func>
 8012424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012428:	6006      	str	r6, [r0, #0]
 801242a:	60c6      	str	r6, [r0, #12]
 801242c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801242e:	68f3      	ldr	r3, [r6, #12]
 8012430:	b183      	cbz	r3, 8012454 <_Balloc+0x50>
 8012432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012434:	68db      	ldr	r3, [r3, #12]
 8012436:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801243a:	b9b8      	cbnz	r0, 801246c <_Balloc+0x68>
 801243c:	2101      	movs	r1, #1
 801243e:	fa01 f605 	lsl.w	r6, r1, r5
 8012442:	1d72      	adds	r2, r6, #5
 8012444:	0092      	lsls	r2, r2, #2
 8012446:	4620      	mov	r0, r4
 8012448:	f000 fc9d 	bl	8012d86 <_calloc_r>
 801244c:	b160      	cbz	r0, 8012468 <_Balloc+0x64>
 801244e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012452:	e00e      	b.n	8012472 <_Balloc+0x6e>
 8012454:	2221      	movs	r2, #33	; 0x21
 8012456:	2104      	movs	r1, #4
 8012458:	4620      	mov	r0, r4
 801245a:	f000 fc94 	bl	8012d86 <_calloc_r>
 801245e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012460:	60f0      	str	r0, [r6, #12]
 8012462:	68db      	ldr	r3, [r3, #12]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d1e4      	bne.n	8012432 <_Balloc+0x2e>
 8012468:	2000      	movs	r0, #0
 801246a:	bd70      	pop	{r4, r5, r6, pc}
 801246c:	6802      	ldr	r2, [r0, #0]
 801246e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012472:	2300      	movs	r3, #0
 8012474:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012478:	e7f7      	b.n	801246a <_Balloc+0x66>
 801247a:	bf00      	nop
 801247c:	08014fdd 	.word	0x08014fdd
 8012480:	0801513c 	.word	0x0801513c

08012484 <_Bfree>:
 8012484:	b570      	push	{r4, r5, r6, lr}
 8012486:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012488:	4605      	mov	r5, r0
 801248a:	460c      	mov	r4, r1
 801248c:	b976      	cbnz	r6, 80124ac <_Bfree+0x28>
 801248e:	2010      	movs	r0, #16
 8012490:	f7ff ff9e 	bl	80123d0 <malloc>
 8012494:	4602      	mov	r2, r0
 8012496:	6268      	str	r0, [r5, #36]	; 0x24
 8012498:	b920      	cbnz	r0, 80124a4 <_Bfree+0x20>
 801249a:	4b09      	ldr	r3, [pc, #36]	; (80124c0 <_Bfree+0x3c>)
 801249c:	4809      	ldr	r0, [pc, #36]	; (80124c4 <_Bfree+0x40>)
 801249e:	218a      	movs	r1, #138	; 0x8a
 80124a0:	f001 fc76 	bl	8013d90 <__assert_func>
 80124a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80124a8:	6006      	str	r6, [r0, #0]
 80124aa:	60c6      	str	r6, [r0, #12]
 80124ac:	b13c      	cbz	r4, 80124be <_Bfree+0x3a>
 80124ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80124b0:	6862      	ldr	r2, [r4, #4]
 80124b2:	68db      	ldr	r3, [r3, #12]
 80124b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80124b8:	6021      	str	r1, [r4, #0]
 80124ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80124be:	bd70      	pop	{r4, r5, r6, pc}
 80124c0:	08014fdd 	.word	0x08014fdd
 80124c4:	0801513c 	.word	0x0801513c

080124c8 <__multadd>:
 80124c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124cc:	690d      	ldr	r5, [r1, #16]
 80124ce:	4607      	mov	r7, r0
 80124d0:	460c      	mov	r4, r1
 80124d2:	461e      	mov	r6, r3
 80124d4:	f101 0c14 	add.w	ip, r1, #20
 80124d8:	2000      	movs	r0, #0
 80124da:	f8dc 3000 	ldr.w	r3, [ip]
 80124de:	b299      	uxth	r1, r3
 80124e0:	fb02 6101 	mla	r1, r2, r1, r6
 80124e4:	0c1e      	lsrs	r6, r3, #16
 80124e6:	0c0b      	lsrs	r3, r1, #16
 80124e8:	fb02 3306 	mla	r3, r2, r6, r3
 80124ec:	b289      	uxth	r1, r1
 80124ee:	3001      	adds	r0, #1
 80124f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80124f4:	4285      	cmp	r5, r0
 80124f6:	f84c 1b04 	str.w	r1, [ip], #4
 80124fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80124fe:	dcec      	bgt.n	80124da <__multadd+0x12>
 8012500:	b30e      	cbz	r6, 8012546 <__multadd+0x7e>
 8012502:	68a3      	ldr	r3, [r4, #8]
 8012504:	42ab      	cmp	r3, r5
 8012506:	dc19      	bgt.n	801253c <__multadd+0x74>
 8012508:	6861      	ldr	r1, [r4, #4]
 801250a:	4638      	mov	r0, r7
 801250c:	3101      	adds	r1, #1
 801250e:	f7ff ff79 	bl	8012404 <_Balloc>
 8012512:	4680      	mov	r8, r0
 8012514:	b928      	cbnz	r0, 8012522 <__multadd+0x5a>
 8012516:	4602      	mov	r2, r0
 8012518:	4b0c      	ldr	r3, [pc, #48]	; (801254c <__multadd+0x84>)
 801251a:	480d      	ldr	r0, [pc, #52]	; (8012550 <__multadd+0x88>)
 801251c:	21b5      	movs	r1, #181	; 0xb5
 801251e:	f001 fc37 	bl	8013d90 <__assert_func>
 8012522:	6922      	ldr	r2, [r4, #16]
 8012524:	3202      	adds	r2, #2
 8012526:	f104 010c 	add.w	r1, r4, #12
 801252a:	0092      	lsls	r2, r2, #2
 801252c:	300c      	adds	r0, #12
 801252e:	f7fc fb85 	bl	800ec3c <memcpy>
 8012532:	4621      	mov	r1, r4
 8012534:	4638      	mov	r0, r7
 8012536:	f7ff ffa5 	bl	8012484 <_Bfree>
 801253a:	4644      	mov	r4, r8
 801253c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012540:	3501      	adds	r5, #1
 8012542:	615e      	str	r6, [r3, #20]
 8012544:	6125      	str	r5, [r4, #16]
 8012546:	4620      	mov	r0, r4
 8012548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801254c:	0801504f 	.word	0x0801504f
 8012550:	0801513c 	.word	0x0801513c

08012554 <__s2b>:
 8012554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012558:	460c      	mov	r4, r1
 801255a:	4615      	mov	r5, r2
 801255c:	461f      	mov	r7, r3
 801255e:	2209      	movs	r2, #9
 8012560:	3308      	adds	r3, #8
 8012562:	4606      	mov	r6, r0
 8012564:	fb93 f3f2 	sdiv	r3, r3, r2
 8012568:	2100      	movs	r1, #0
 801256a:	2201      	movs	r2, #1
 801256c:	429a      	cmp	r2, r3
 801256e:	db09      	blt.n	8012584 <__s2b+0x30>
 8012570:	4630      	mov	r0, r6
 8012572:	f7ff ff47 	bl	8012404 <_Balloc>
 8012576:	b940      	cbnz	r0, 801258a <__s2b+0x36>
 8012578:	4602      	mov	r2, r0
 801257a:	4b19      	ldr	r3, [pc, #100]	; (80125e0 <__s2b+0x8c>)
 801257c:	4819      	ldr	r0, [pc, #100]	; (80125e4 <__s2b+0x90>)
 801257e:	21ce      	movs	r1, #206	; 0xce
 8012580:	f001 fc06 	bl	8013d90 <__assert_func>
 8012584:	0052      	lsls	r2, r2, #1
 8012586:	3101      	adds	r1, #1
 8012588:	e7f0      	b.n	801256c <__s2b+0x18>
 801258a:	9b08      	ldr	r3, [sp, #32]
 801258c:	6143      	str	r3, [r0, #20]
 801258e:	2d09      	cmp	r5, #9
 8012590:	f04f 0301 	mov.w	r3, #1
 8012594:	6103      	str	r3, [r0, #16]
 8012596:	dd16      	ble.n	80125c6 <__s2b+0x72>
 8012598:	f104 0909 	add.w	r9, r4, #9
 801259c:	46c8      	mov	r8, r9
 801259e:	442c      	add	r4, r5
 80125a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80125a4:	4601      	mov	r1, r0
 80125a6:	3b30      	subs	r3, #48	; 0x30
 80125a8:	220a      	movs	r2, #10
 80125aa:	4630      	mov	r0, r6
 80125ac:	f7ff ff8c 	bl	80124c8 <__multadd>
 80125b0:	45a0      	cmp	r8, r4
 80125b2:	d1f5      	bne.n	80125a0 <__s2b+0x4c>
 80125b4:	f1a5 0408 	sub.w	r4, r5, #8
 80125b8:	444c      	add	r4, r9
 80125ba:	1b2d      	subs	r5, r5, r4
 80125bc:	1963      	adds	r3, r4, r5
 80125be:	42bb      	cmp	r3, r7
 80125c0:	db04      	blt.n	80125cc <__s2b+0x78>
 80125c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125c6:	340a      	adds	r4, #10
 80125c8:	2509      	movs	r5, #9
 80125ca:	e7f6      	b.n	80125ba <__s2b+0x66>
 80125cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80125d0:	4601      	mov	r1, r0
 80125d2:	3b30      	subs	r3, #48	; 0x30
 80125d4:	220a      	movs	r2, #10
 80125d6:	4630      	mov	r0, r6
 80125d8:	f7ff ff76 	bl	80124c8 <__multadd>
 80125dc:	e7ee      	b.n	80125bc <__s2b+0x68>
 80125de:	bf00      	nop
 80125e0:	0801504f 	.word	0x0801504f
 80125e4:	0801513c 	.word	0x0801513c

080125e8 <__hi0bits>:
 80125e8:	0c03      	lsrs	r3, r0, #16
 80125ea:	041b      	lsls	r3, r3, #16
 80125ec:	b9d3      	cbnz	r3, 8012624 <__hi0bits+0x3c>
 80125ee:	0400      	lsls	r0, r0, #16
 80125f0:	2310      	movs	r3, #16
 80125f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80125f6:	bf04      	itt	eq
 80125f8:	0200      	lsleq	r0, r0, #8
 80125fa:	3308      	addeq	r3, #8
 80125fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012600:	bf04      	itt	eq
 8012602:	0100      	lsleq	r0, r0, #4
 8012604:	3304      	addeq	r3, #4
 8012606:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801260a:	bf04      	itt	eq
 801260c:	0080      	lsleq	r0, r0, #2
 801260e:	3302      	addeq	r3, #2
 8012610:	2800      	cmp	r0, #0
 8012612:	db05      	blt.n	8012620 <__hi0bits+0x38>
 8012614:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012618:	f103 0301 	add.w	r3, r3, #1
 801261c:	bf08      	it	eq
 801261e:	2320      	moveq	r3, #32
 8012620:	4618      	mov	r0, r3
 8012622:	4770      	bx	lr
 8012624:	2300      	movs	r3, #0
 8012626:	e7e4      	b.n	80125f2 <__hi0bits+0xa>

08012628 <__lo0bits>:
 8012628:	6803      	ldr	r3, [r0, #0]
 801262a:	f013 0207 	ands.w	r2, r3, #7
 801262e:	4601      	mov	r1, r0
 8012630:	d00b      	beq.n	801264a <__lo0bits+0x22>
 8012632:	07da      	lsls	r2, r3, #31
 8012634:	d423      	bmi.n	801267e <__lo0bits+0x56>
 8012636:	0798      	lsls	r0, r3, #30
 8012638:	bf49      	itett	mi
 801263a:	085b      	lsrmi	r3, r3, #1
 801263c:	089b      	lsrpl	r3, r3, #2
 801263e:	2001      	movmi	r0, #1
 8012640:	600b      	strmi	r3, [r1, #0]
 8012642:	bf5c      	itt	pl
 8012644:	600b      	strpl	r3, [r1, #0]
 8012646:	2002      	movpl	r0, #2
 8012648:	4770      	bx	lr
 801264a:	b298      	uxth	r0, r3
 801264c:	b9a8      	cbnz	r0, 801267a <__lo0bits+0x52>
 801264e:	0c1b      	lsrs	r3, r3, #16
 8012650:	2010      	movs	r0, #16
 8012652:	b2da      	uxtb	r2, r3
 8012654:	b90a      	cbnz	r2, 801265a <__lo0bits+0x32>
 8012656:	3008      	adds	r0, #8
 8012658:	0a1b      	lsrs	r3, r3, #8
 801265a:	071a      	lsls	r2, r3, #28
 801265c:	bf04      	itt	eq
 801265e:	091b      	lsreq	r3, r3, #4
 8012660:	3004      	addeq	r0, #4
 8012662:	079a      	lsls	r2, r3, #30
 8012664:	bf04      	itt	eq
 8012666:	089b      	lsreq	r3, r3, #2
 8012668:	3002      	addeq	r0, #2
 801266a:	07da      	lsls	r2, r3, #31
 801266c:	d403      	bmi.n	8012676 <__lo0bits+0x4e>
 801266e:	085b      	lsrs	r3, r3, #1
 8012670:	f100 0001 	add.w	r0, r0, #1
 8012674:	d005      	beq.n	8012682 <__lo0bits+0x5a>
 8012676:	600b      	str	r3, [r1, #0]
 8012678:	4770      	bx	lr
 801267a:	4610      	mov	r0, r2
 801267c:	e7e9      	b.n	8012652 <__lo0bits+0x2a>
 801267e:	2000      	movs	r0, #0
 8012680:	4770      	bx	lr
 8012682:	2020      	movs	r0, #32
 8012684:	4770      	bx	lr
	...

08012688 <__i2b>:
 8012688:	b510      	push	{r4, lr}
 801268a:	460c      	mov	r4, r1
 801268c:	2101      	movs	r1, #1
 801268e:	f7ff feb9 	bl	8012404 <_Balloc>
 8012692:	4602      	mov	r2, r0
 8012694:	b928      	cbnz	r0, 80126a2 <__i2b+0x1a>
 8012696:	4b05      	ldr	r3, [pc, #20]	; (80126ac <__i2b+0x24>)
 8012698:	4805      	ldr	r0, [pc, #20]	; (80126b0 <__i2b+0x28>)
 801269a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801269e:	f001 fb77 	bl	8013d90 <__assert_func>
 80126a2:	2301      	movs	r3, #1
 80126a4:	6144      	str	r4, [r0, #20]
 80126a6:	6103      	str	r3, [r0, #16]
 80126a8:	bd10      	pop	{r4, pc}
 80126aa:	bf00      	nop
 80126ac:	0801504f 	.word	0x0801504f
 80126b0:	0801513c 	.word	0x0801513c

080126b4 <__multiply>:
 80126b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b8:	4691      	mov	r9, r2
 80126ba:	690a      	ldr	r2, [r1, #16]
 80126bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80126c0:	429a      	cmp	r2, r3
 80126c2:	bfb8      	it	lt
 80126c4:	460b      	movlt	r3, r1
 80126c6:	460c      	mov	r4, r1
 80126c8:	bfbc      	itt	lt
 80126ca:	464c      	movlt	r4, r9
 80126cc:	4699      	movlt	r9, r3
 80126ce:	6927      	ldr	r7, [r4, #16]
 80126d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80126d4:	68a3      	ldr	r3, [r4, #8]
 80126d6:	6861      	ldr	r1, [r4, #4]
 80126d8:	eb07 060a 	add.w	r6, r7, sl
 80126dc:	42b3      	cmp	r3, r6
 80126de:	b085      	sub	sp, #20
 80126e0:	bfb8      	it	lt
 80126e2:	3101      	addlt	r1, #1
 80126e4:	f7ff fe8e 	bl	8012404 <_Balloc>
 80126e8:	b930      	cbnz	r0, 80126f8 <__multiply+0x44>
 80126ea:	4602      	mov	r2, r0
 80126ec:	4b44      	ldr	r3, [pc, #272]	; (8012800 <__multiply+0x14c>)
 80126ee:	4845      	ldr	r0, [pc, #276]	; (8012804 <__multiply+0x150>)
 80126f0:	f240 115d 	movw	r1, #349	; 0x15d
 80126f4:	f001 fb4c 	bl	8013d90 <__assert_func>
 80126f8:	f100 0514 	add.w	r5, r0, #20
 80126fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012700:	462b      	mov	r3, r5
 8012702:	2200      	movs	r2, #0
 8012704:	4543      	cmp	r3, r8
 8012706:	d321      	bcc.n	801274c <__multiply+0x98>
 8012708:	f104 0314 	add.w	r3, r4, #20
 801270c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012710:	f109 0314 	add.w	r3, r9, #20
 8012714:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012718:	9202      	str	r2, [sp, #8]
 801271a:	1b3a      	subs	r2, r7, r4
 801271c:	3a15      	subs	r2, #21
 801271e:	f022 0203 	bic.w	r2, r2, #3
 8012722:	3204      	adds	r2, #4
 8012724:	f104 0115 	add.w	r1, r4, #21
 8012728:	428f      	cmp	r7, r1
 801272a:	bf38      	it	cc
 801272c:	2204      	movcc	r2, #4
 801272e:	9201      	str	r2, [sp, #4]
 8012730:	9a02      	ldr	r2, [sp, #8]
 8012732:	9303      	str	r3, [sp, #12]
 8012734:	429a      	cmp	r2, r3
 8012736:	d80c      	bhi.n	8012752 <__multiply+0x9e>
 8012738:	2e00      	cmp	r6, #0
 801273a:	dd03      	ble.n	8012744 <__multiply+0x90>
 801273c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012740:	2b00      	cmp	r3, #0
 8012742:	d05a      	beq.n	80127fa <__multiply+0x146>
 8012744:	6106      	str	r6, [r0, #16]
 8012746:	b005      	add	sp, #20
 8012748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801274c:	f843 2b04 	str.w	r2, [r3], #4
 8012750:	e7d8      	b.n	8012704 <__multiply+0x50>
 8012752:	f8b3 a000 	ldrh.w	sl, [r3]
 8012756:	f1ba 0f00 	cmp.w	sl, #0
 801275a:	d024      	beq.n	80127a6 <__multiply+0xf2>
 801275c:	f104 0e14 	add.w	lr, r4, #20
 8012760:	46a9      	mov	r9, r5
 8012762:	f04f 0c00 	mov.w	ip, #0
 8012766:	f85e 2b04 	ldr.w	r2, [lr], #4
 801276a:	f8d9 1000 	ldr.w	r1, [r9]
 801276e:	fa1f fb82 	uxth.w	fp, r2
 8012772:	b289      	uxth	r1, r1
 8012774:	fb0a 110b 	mla	r1, sl, fp, r1
 8012778:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801277c:	f8d9 2000 	ldr.w	r2, [r9]
 8012780:	4461      	add	r1, ip
 8012782:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012786:	fb0a c20b 	mla	r2, sl, fp, ip
 801278a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801278e:	b289      	uxth	r1, r1
 8012790:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012794:	4577      	cmp	r7, lr
 8012796:	f849 1b04 	str.w	r1, [r9], #4
 801279a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801279e:	d8e2      	bhi.n	8012766 <__multiply+0xb2>
 80127a0:	9a01      	ldr	r2, [sp, #4]
 80127a2:	f845 c002 	str.w	ip, [r5, r2]
 80127a6:	9a03      	ldr	r2, [sp, #12]
 80127a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80127ac:	3304      	adds	r3, #4
 80127ae:	f1b9 0f00 	cmp.w	r9, #0
 80127b2:	d020      	beq.n	80127f6 <__multiply+0x142>
 80127b4:	6829      	ldr	r1, [r5, #0]
 80127b6:	f104 0c14 	add.w	ip, r4, #20
 80127ba:	46ae      	mov	lr, r5
 80127bc:	f04f 0a00 	mov.w	sl, #0
 80127c0:	f8bc b000 	ldrh.w	fp, [ip]
 80127c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80127c8:	fb09 220b 	mla	r2, r9, fp, r2
 80127cc:	4492      	add	sl, r2
 80127ce:	b289      	uxth	r1, r1
 80127d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80127d4:	f84e 1b04 	str.w	r1, [lr], #4
 80127d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80127dc:	f8be 1000 	ldrh.w	r1, [lr]
 80127e0:	0c12      	lsrs	r2, r2, #16
 80127e2:	fb09 1102 	mla	r1, r9, r2, r1
 80127e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80127ea:	4567      	cmp	r7, ip
 80127ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80127f0:	d8e6      	bhi.n	80127c0 <__multiply+0x10c>
 80127f2:	9a01      	ldr	r2, [sp, #4]
 80127f4:	50a9      	str	r1, [r5, r2]
 80127f6:	3504      	adds	r5, #4
 80127f8:	e79a      	b.n	8012730 <__multiply+0x7c>
 80127fa:	3e01      	subs	r6, #1
 80127fc:	e79c      	b.n	8012738 <__multiply+0x84>
 80127fe:	bf00      	nop
 8012800:	0801504f 	.word	0x0801504f
 8012804:	0801513c 	.word	0x0801513c

08012808 <__pow5mult>:
 8012808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801280c:	4615      	mov	r5, r2
 801280e:	f012 0203 	ands.w	r2, r2, #3
 8012812:	4606      	mov	r6, r0
 8012814:	460f      	mov	r7, r1
 8012816:	d007      	beq.n	8012828 <__pow5mult+0x20>
 8012818:	4c25      	ldr	r4, [pc, #148]	; (80128b0 <__pow5mult+0xa8>)
 801281a:	3a01      	subs	r2, #1
 801281c:	2300      	movs	r3, #0
 801281e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012822:	f7ff fe51 	bl	80124c8 <__multadd>
 8012826:	4607      	mov	r7, r0
 8012828:	10ad      	asrs	r5, r5, #2
 801282a:	d03d      	beq.n	80128a8 <__pow5mult+0xa0>
 801282c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801282e:	b97c      	cbnz	r4, 8012850 <__pow5mult+0x48>
 8012830:	2010      	movs	r0, #16
 8012832:	f7ff fdcd 	bl	80123d0 <malloc>
 8012836:	4602      	mov	r2, r0
 8012838:	6270      	str	r0, [r6, #36]	; 0x24
 801283a:	b928      	cbnz	r0, 8012848 <__pow5mult+0x40>
 801283c:	4b1d      	ldr	r3, [pc, #116]	; (80128b4 <__pow5mult+0xac>)
 801283e:	481e      	ldr	r0, [pc, #120]	; (80128b8 <__pow5mult+0xb0>)
 8012840:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012844:	f001 faa4 	bl	8013d90 <__assert_func>
 8012848:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801284c:	6004      	str	r4, [r0, #0]
 801284e:	60c4      	str	r4, [r0, #12]
 8012850:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012854:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012858:	b94c      	cbnz	r4, 801286e <__pow5mult+0x66>
 801285a:	f240 2171 	movw	r1, #625	; 0x271
 801285e:	4630      	mov	r0, r6
 8012860:	f7ff ff12 	bl	8012688 <__i2b>
 8012864:	2300      	movs	r3, #0
 8012866:	f8c8 0008 	str.w	r0, [r8, #8]
 801286a:	4604      	mov	r4, r0
 801286c:	6003      	str	r3, [r0, #0]
 801286e:	f04f 0900 	mov.w	r9, #0
 8012872:	07eb      	lsls	r3, r5, #31
 8012874:	d50a      	bpl.n	801288c <__pow5mult+0x84>
 8012876:	4639      	mov	r1, r7
 8012878:	4622      	mov	r2, r4
 801287a:	4630      	mov	r0, r6
 801287c:	f7ff ff1a 	bl	80126b4 <__multiply>
 8012880:	4639      	mov	r1, r7
 8012882:	4680      	mov	r8, r0
 8012884:	4630      	mov	r0, r6
 8012886:	f7ff fdfd 	bl	8012484 <_Bfree>
 801288a:	4647      	mov	r7, r8
 801288c:	106d      	asrs	r5, r5, #1
 801288e:	d00b      	beq.n	80128a8 <__pow5mult+0xa0>
 8012890:	6820      	ldr	r0, [r4, #0]
 8012892:	b938      	cbnz	r0, 80128a4 <__pow5mult+0x9c>
 8012894:	4622      	mov	r2, r4
 8012896:	4621      	mov	r1, r4
 8012898:	4630      	mov	r0, r6
 801289a:	f7ff ff0b 	bl	80126b4 <__multiply>
 801289e:	6020      	str	r0, [r4, #0]
 80128a0:	f8c0 9000 	str.w	r9, [r0]
 80128a4:	4604      	mov	r4, r0
 80128a6:	e7e4      	b.n	8012872 <__pow5mult+0x6a>
 80128a8:	4638      	mov	r0, r7
 80128aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128ae:	bf00      	nop
 80128b0:	08015288 	.word	0x08015288
 80128b4:	08014fdd 	.word	0x08014fdd
 80128b8:	0801513c 	.word	0x0801513c

080128bc <__lshift>:
 80128bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128c0:	460c      	mov	r4, r1
 80128c2:	6849      	ldr	r1, [r1, #4]
 80128c4:	6923      	ldr	r3, [r4, #16]
 80128c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80128ca:	68a3      	ldr	r3, [r4, #8]
 80128cc:	4607      	mov	r7, r0
 80128ce:	4691      	mov	r9, r2
 80128d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80128d4:	f108 0601 	add.w	r6, r8, #1
 80128d8:	42b3      	cmp	r3, r6
 80128da:	db0b      	blt.n	80128f4 <__lshift+0x38>
 80128dc:	4638      	mov	r0, r7
 80128de:	f7ff fd91 	bl	8012404 <_Balloc>
 80128e2:	4605      	mov	r5, r0
 80128e4:	b948      	cbnz	r0, 80128fa <__lshift+0x3e>
 80128e6:	4602      	mov	r2, r0
 80128e8:	4b2a      	ldr	r3, [pc, #168]	; (8012994 <__lshift+0xd8>)
 80128ea:	482b      	ldr	r0, [pc, #172]	; (8012998 <__lshift+0xdc>)
 80128ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80128f0:	f001 fa4e 	bl	8013d90 <__assert_func>
 80128f4:	3101      	adds	r1, #1
 80128f6:	005b      	lsls	r3, r3, #1
 80128f8:	e7ee      	b.n	80128d8 <__lshift+0x1c>
 80128fa:	2300      	movs	r3, #0
 80128fc:	f100 0114 	add.w	r1, r0, #20
 8012900:	f100 0210 	add.w	r2, r0, #16
 8012904:	4618      	mov	r0, r3
 8012906:	4553      	cmp	r3, sl
 8012908:	db37      	blt.n	801297a <__lshift+0xbe>
 801290a:	6920      	ldr	r0, [r4, #16]
 801290c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012910:	f104 0314 	add.w	r3, r4, #20
 8012914:	f019 091f 	ands.w	r9, r9, #31
 8012918:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801291c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012920:	d02f      	beq.n	8012982 <__lshift+0xc6>
 8012922:	f1c9 0e20 	rsb	lr, r9, #32
 8012926:	468a      	mov	sl, r1
 8012928:	f04f 0c00 	mov.w	ip, #0
 801292c:	681a      	ldr	r2, [r3, #0]
 801292e:	fa02 f209 	lsl.w	r2, r2, r9
 8012932:	ea42 020c 	orr.w	r2, r2, ip
 8012936:	f84a 2b04 	str.w	r2, [sl], #4
 801293a:	f853 2b04 	ldr.w	r2, [r3], #4
 801293e:	4298      	cmp	r0, r3
 8012940:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012944:	d8f2      	bhi.n	801292c <__lshift+0x70>
 8012946:	1b03      	subs	r3, r0, r4
 8012948:	3b15      	subs	r3, #21
 801294a:	f023 0303 	bic.w	r3, r3, #3
 801294e:	3304      	adds	r3, #4
 8012950:	f104 0215 	add.w	r2, r4, #21
 8012954:	4290      	cmp	r0, r2
 8012956:	bf38      	it	cc
 8012958:	2304      	movcc	r3, #4
 801295a:	f841 c003 	str.w	ip, [r1, r3]
 801295e:	f1bc 0f00 	cmp.w	ip, #0
 8012962:	d001      	beq.n	8012968 <__lshift+0xac>
 8012964:	f108 0602 	add.w	r6, r8, #2
 8012968:	3e01      	subs	r6, #1
 801296a:	4638      	mov	r0, r7
 801296c:	612e      	str	r6, [r5, #16]
 801296e:	4621      	mov	r1, r4
 8012970:	f7ff fd88 	bl	8012484 <_Bfree>
 8012974:	4628      	mov	r0, r5
 8012976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801297a:	f842 0f04 	str.w	r0, [r2, #4]!
 801297e:	3301      	adds	r3, #1
 8012980:	e7c1      	b.n	8012906 <__lshift+0x4a>
 8012982:	3904      	subs	r1, #4
 8012984:	f853 2b04 	ldr.w	r2, [r3], #4
 8012988:	f841 2f04 	str.w	r2, [r1, #4]!
 801298c:	4298      	cmp	r0, r3
 801298e:	d8f9      	bhi.n	8012984 <__lshift+0xc8>
 8012990:	e7ea      	b.n	8012968 <__lshift+0xac>
 8012992:	bf00      	nop
 8012994:	0801504f 	.word	0x0801504f
 8012998:	0801513c 	.word	0x0801513c

0801299c <__mcmp>:
 801299c:	b530      	push	{r4, r5, lr}
 801299e:	6902      	ldr	r2, [r0, #16]
 80129a0:	690c      	ldr	r4, [r1, #16]
 80129a2:	1b12      	subs	r2, r2, r4
 80129a4:	d10e      	bne.n	80129c4 <__mcmp+0x28>
 80129a6:	f100 0314 	add.w	r3, r0, #20
 80129aa:	3114      	adds	r1, #20
 80129ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80129b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80129b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80129b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80129bc:	42a5      	cmp	r5, r4
 80129be:	d003      	beq.n	80129c8 <__mcmp+0x2c>
 80129c0:	d305      	bcc.n	80129ce <__mcmp+0x32>
 80129c2:	2201      	movs	r2, #1
 80129c4:	4610      	mov	r0, r2
 80129c6:	bd30      	pop	{r4, r5, pc}
 80129c8:	4283      	cmp	r3, r0
 80129ca:	d3f3      	bcc.n	80129b4 <__mcmp+0x18>
 80129cc:	e7fa      	b.n	80129c4 <__mcmp+0x28>
 80129ce:	f04f 32ff 	mov.w	r2, #4294967295
 80129d2:	e7f7      	b.n	80129c4 <__mcmp+0x28>

080129d4 <__mdiff>:
 80129d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d8:	460c      	mov	r4, r1
 80129da:	4606      	mov	r6, r0
 80129dc:	4611      	mov	r1, r2
 80129de:	4620      	mov	r0, r4
 80129e0:	4690      	mov	r8, r2
 80129e2:	f7ff ffdb 	bl	801299c <__mcmp>
 80129e6:	1e05      	subs	r5, r0, #0
 80129e8:	d110      	bne.n	8012a0c <__mdiff+0x38>
 80129ea:	4629      	mov	r1, r5
 80129ec:	4630      	mov	r0, r6
 80129ee:	f7ff fd09 	bl	8012404 <_Balloc>
 80129f2:	b930      	cbnz	r0, 8012a02 <__mdiff+0x2e>
 80129f4:	4b3a      	ldr	r3, [pc, #232]	; (8012ae0 <__mdiff+0x10c>)
 80129f6:	4602      	mov	r2, r0
 80129f8:	f240 2132 	movw	r1, #562	; 0x232
 80129fc:	4839      	ldr	r0, [pc, #228]	; (8012ae4 <__mdiff+0x110>)
 80129fe:	f001 f9c7 	bl	8013d90 <__assert_func>
 8012a02:	2301      	movs	r3, #1
 8012a04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a0c:	bfa4      	itt	ge
 8012a0e:	4643      	movge	r3, r8
 8012a10:	46a0      	movge	r8, r4
 8012a12:	4630      	mov	r0, r6
 8012a14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012a18:	bfa6      	itte	ge
 8012a1a:	461c      	movge	r4, r3
 8012a1c:	2500      	movge	r5, #0
 8012a1e:	2501      	movlt	r5, #1
 8012a20:	f7ff fcf0 	bl	8012404 <_Balloc>
 8012a24:	b920      	cbnz	r0, 8012a30 <__mdiff+0x5c>
 8012a26:	4b2e      	ldr	r3, [pc, #184]	; (8012ae0 <__mdiff+0x10c>)
 8012a28:	4602      	mov	r2, r0
 8012a2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012a2e:	e7e5      	b.n	80129fc <__mdiff+0x28>
 8012a30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012a34:	6926      	ldr	r6, [r4, #16]
 8012a36:	60c5      	str	r5, [r0, #12]
 8012a38:	f104 0914 	add.w	r9, r4, #20
 8012a3c:	f108 0514 	add.w	r5, r8, #20
 8012a40:	f100 0e14 	add.w	lr, r0, #20
 8012a44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012a48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012a4c:	f108 0210 	add.w	r2, r8, #16
 8012a50:	46f2      	mov	sl, lr
 8012a52:	2100      	movs	r1, #0
 8012a54:	f859 3b04 	ldr.w	r3, [r9], #4
 8012a58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012a5c:	fa1f f883 	uxth.w	r8, r3
 8012a60:	fa11 f18b 	uxtah	r1, r1, fp
 8012a64:	0c1b      	lsrs	r3, r3, #16
 8012a66:	eba1 0808 	sub.w	r8, r1, r8
 8012a6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012a6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012a72:	fa1f f888 	uxth.w	r8, r8
 8012a76:	1419      	asrs	r1, r3, #16
 8012a78:	454e      	cmp	r6, r9
 8012a7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012a7e:	f84a 3b04 	str.w	r3, [sl], #4
 8012a82:	d8e7      	bhi.n	8012a54 <__mdiff+0x80>
 8012a84:	1b33      	subs	r3, r6, r4
 8012a86:	3b15      	subs	r3, #21
 8012a88:	f023 0303 	bic.w	r3, r3, #3
 8012a8c:	3304      	adds	r3, #4
 8012a8e:	3415      	adds	r4, #21
 8012a90:	42a6      	cmp	r6, r4
 8012a92:	bf38      	it	cc
 8012a94:	2304      	movcc	r3, #4
 8012a96:	441d      	add	r5, r3
 8012a98:	4473      	add	r3, lr
 8012a9a:	469e      	mov	lr, r3
 8012a9c:	462e      	mov	r6, r5
 8012a9e:	4566      	cmp	r6, ip
 8012aa0:	d30e      	bcc.n	8012ac0 <__mdiff+0xec>
 8012aa2:	f10c 0203 	add.w	r2, ip, #3
 8012aa6:	1b52      	subs	r2, r2, r5
 8012aa8:	f022 0203 	bic.w	r2, r2, #3
 8012aac:	3d03      	subs	r5, #3
 8012aae:	45ac      	cmp	ip, r5
 8012ab0:	bf38      	it	cc
 8012ab2:	2200      	movcc	r2, #0
 8012ab4:	441a      	add	r2, r3
 8012ab6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012aba:	b17b      	cbz	r3, 8012adc <__mdiff+0x108>
 8012abc:	6107      	str	r7, [r0, #16]
 8012abe:	e7a3      	b.n	8012a08 <__mdiff+0x34>
 8012ac0:	f856 8b04 	ldr.w	r8, [r6], #4
 8012ac4:	fa11 f288 	uxtah	r2, r1, r8
 8012ac8:	1414      	asrs	r4, r2, #16
 8012aca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012ace:	b292      	uxth	r2, r2
 8012ad0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012ad4:	f84e 2b04 	str.w	r2, [lr], #4
 8012ad8:	1421      	asrs	r1, r4, #16
 8012ada:	e7e0      	b.n	8012a9e <__mdiff+0xca>
 8012adc:	3f01      	subs	r7, #1
 8012ade:	e7ea      	b.n	8012ab6 <__mdiff+0xe2>
 8012ae0:	0801504f 	.word	0x0801504f
 8012ae4:	0801513c 	.word	0x0801513c

08012ae8 <__ulp>:
 8012ae8:	b082      	sub	sp, #8
 8012aea:	ed8d 0b00 	vstr	d0, [sp]
 8012aee:	9b01      	ldr	r3, [sp, #4]
 8012af0:	4912      	ldr	r1, [pc, #72]	; (8012b3c <__ulp+0x54>)
 8012af2:	4019      	ands	r1, r3
 8012af4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012af8:	2900      	cmp	r1, #0
 8012afa:	dd05      	ble.n	8012b08 <__ulp+0x20>
 8012afc:	2200      	movs	r2, #0
 8012afe:	460b      	mov	r3, r1
 8012b00:	ec43 2b10 	vmov	d0, r2, r3
 8012b04:	b002      	add	sp, #8
 8012b06:	4770      	bx	lr
 8012b08:	4249      	negs	r1, r1
 8012b0a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012b0e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012b12:	f04f 0200 	mov.w	r2, #0
 8012b16:	f04f 0300 	mov.w	r3, #0
 8012b1a:	da04      	bge.n	8012b26 <__ulp+0x3e>
 8012b1c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012b20:	fa41 f300 	asr.w	r3, r1, r0
 8012b24:	e7ec      	b.n	8012b00 <__ulp+0x18>
 8012b26:	f1a0 0114 	sub.w	r1, r0, #20
 8012b2a:	291e      	cmp	r1, #30
 8012b2c:	bfda      	itte	le
 8012b2e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012b32:	fa20 f101 	lsrle.w	r1, r0, r1
 8012b36:	2101      	movgt	r1, #1
 8012b38:	460a      	mov	r2, r1
 8012b3a:	e7e1      	b.n	8012b00 <__ulp+0x18>
 8012b3c:	7ff00000 	.word	0x7ff00000

08012b40 <__b2d>:
 8012b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b42:	6905      	ldr	r5, [r0, #16]
 8012b44:	f100 0714 	add.w	r7, r0, #20
 8012b48:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012b4c:	1f2e      	subs	r6, r5, #4
 8012b4e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012b52:	4620      	mov	r0, r4
 8012b54:	f7ff fd48 	bl	80125e8 <__hi0bits>
 8012b58:	f1c0 0320 	rsb	r3, r0, #32
 8012b5c:	280a      	cmp	r0, #10
 8012b5e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012bdc <__b2d+0x9c>
 8012b62:	600b      	str	r3, [r1, #0]
 8012b64:	dc14      	bgt.n	8012b90 <__b2d+0x50>
 8012b66:	f1c0 0e0b 	rsb	lr, r0, #11
 8012b6a:	fa24 f10e 	lsr.w	r1, r4, lr
 8012b6e:	42b7      	cmp	r7, r6
 8012b70:	ea41 030c 	orr.w	r3, r1, ip
 8012b74:	bf34      	ite	cc
 8012b76:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012b7a:	2100      	movcs	r1, #0
 8012b7c:	3015      	adds	r0, #21
 8012b7e:	fa04 f000 	lsl.w	r0, r4, r0
 8012b82:	fa21 f10e 	lsr.w	r1, r1, lr
 8012b86:	ea40 0201 	orr.w	r2, r0, r1
 8012b8a:	ec43 2b10 	vmov	d0, r2, r3
 8012b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b90:	42b7      	cmp	r7, r6
 8012b92:	bf3a      	itte	cc
 8012b94:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012b98:	f1a5 0608 	subcc.w	r6, r5, #8
 8012b9c:	2100      	movcs	r1, #0
 8012b9e:	380b      	subs	r0, #11
 8012ba0:	d017      	beq.n	8012bd2 <__b2d+0x92>
 8012ba2:	f1c0 0c20 	rsb	ip, r0, #32
 8012ba6:	fa04 f500 	lsl.w	r5, r4, r0
 8012baa:	42be      	cmp	r6, r7
 8012bac:	fa21 f40c 	lsr.w	r4, r1, ip
 8012bb0:	ea45 0504 	orr.w	r5, r5, r4
 8012bb4:	bf8c      	ite	hi
 8012bb6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012bba:	2400      	movls	r4, #0
 8012bbc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012bc0:	fa01 f000 	lsl.w	r0, r1, r0
 8012bc4:	fa24 f40c 	lsr.w	r4, r4, ip
 8012bc8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012bcc:	ea40 0204 	orr.w	r2, r0, r4
 8012bd0:	e7db      	b.n	8012b8a <__b2d+0x4a>
 8012bd2:	ea44 030c 	orr.w	r3, r4, ip
 8012bd6:	460a      	mov	r2, r1
 8012bd8:	e7d7      	b.n	8012b8a <__b2d+0x4a>
 8012bda:	bf00      	nop
 8012bdc:	3ff00000 	.word	0x3ff00000

08012be0 <__d2b>:
 8012be0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012be4:	4689      	mov	r9, r1
 8012be6:	2101      	movs	r1, #1
 8012be8:	ec57 6b10 	vmov	r6, r7, d0
 8012bec:	4690      	mov	r8, r2
 8012bee:	f7ff fc09 	bl	8012404 <_Balloc>
 8012bf2:	4604      	mov	r4, r0
 8012bf4:	b930      	cbnz	r0, 8012c04 <__d2b+0x24>
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	4b25      	ldr	r3, [pc, #148]	; (8012c90 <__d2b+0xb0>)
 8012bfa:	4826      	ldr	r0, [pc, #152]	; (8012c94 <__d2b+0xb4>)
 8012bfc:	f240 310a 	movw	r1, #778	; 0x30a
 8012c00:	f001 f8c6 	bl	8013d90 <__assert_func>
 8012c04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012c08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012c0c:	bb35      	cbnz	r5, 8012c5c <__d2b+0x7c>
 8012c0e:	2e00      	cmp	r6, #0
 8012c10:	9301      	str	r3, [sp, #4]
 8012c12:	d028      	beq.n	8012c66 <__d2b+0x86>
 8012c14:	4668      	mov	r0, sp
 8012c16:	9600      	str	r6, [sp, #0]
 8012c18:	f7ff fd06 	bl	8012628 <__lo0bits>
 8012c1c:	9900      	ldr	r1, [sp, #0]
 8012c1e:	b300      	cbz	r0, 8012c62 <__d2b+0x82>
 8012c20:	9a01      	ldr	r2, [sp, #4]
 8012c22:	f1c0 0320 	rsb	r3, r0, #32
 8012c26:	fa02 f303 	lsl.w	r3, r2, r3
 8012c2a:	430b      	orrs	r3, r1
 8012c2c:	40c2      	lsrs	r2, r0
 8012c2e:	6163      	str	r3, [r4, #20]
 8012c30:	9201      	str	r2, [sp, #4]
 8012c32:	9b01      	ldr	r3, [sp, #4]
 8012c34:	61a3      	str	r3, [r4, #24]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	bf14      	ite	ne
 8012c3a:	2202      	movne	r2, #2
 8012c3c:	2201      	moveq	r2, #1
 8012c3e:	6122      	str	r2, [r4, #16]
 8012c40:	b1d5      	cbz	r5, 8012c78 <__d2b+0x98>
 8012c42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012c46:	4405      	add	r5, r0
 8012c48:	f8c9 5000 	str.w	r5, [r9]
 8012c4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012c50:	f8c8 0000 	str.w	r0, [r8]
 8012c54:	4620      	mov	r0, r4
 8012c56:	b003      	add	sp, #12
 8012c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012c60:	e7d5      	b.n	8012c0e <__d2b+0x2e>
 8012c62:	6161      	str	r1, [r4, #20]
 8012c64:	e7e5      	b.n	8012c32 <__d2b+0x52>
 8012c66:	a801      	add	r0, sp, #4
 8012c68:	f7ff fcde 	bl	8012628 <__lo0bits>
 8012c6c:	9b01      	ldr	r3, [sp, #4]
 8012c6e:	6163      	str	r3, [r4, #20]
 8012c70:	2201      	movs	r2, #1
 8012c72:	6122      	str	r2, [r4, #16]
 8012c74:	3020      	adds	r0, #32
 8012c76:	e7e3      	b.n	8012c40 <__d2b+0x60>
 8012c78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012c7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012c80:	f8c9 0000 	str.w	r0, [r9]
 8012c84:	6918      	ldr	r0, [r3, #16]
 8012c86:	f7ff fcaf 	bl	80125e8 <__hi0bits>
 8012c8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012c8e:	e7df      	b.n	8012c50 <__d2b+0x70>
 8012c90:	0801504f 	.word	0x0801504f
 8012c94:	0801513c 	.word	0x0801513c

08012c98 <__ratio>:
 8012c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c9c:	4688      	mov	r8, r1
 8012c9e:	4669      	mov	r1, sp
 8012ca0:	4681      	mov	r9, r0
 8012ca2:	f7ff ff4d 	bl	8012b40 <__b2d>
 8012ca6:	a901      	add	r1, sp, #4
 8012ca8:	4640      	mov	r0, r8
 8012caa:	ec55 4b10 	vmov	r4, r5, d0
 8012cae:	f7ff ff47 	bl	8012b40 <__b2d>
 8012cb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012cb6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012cba:	eba3 0c02 	sub.w	ip, r3, r2
 8012cbe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012cc2:	1a9b      	subs	r3, r3, r2
 8012cc4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012cc8:	ec51 0b10 	vmov	r0, r1, d0
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	bfd6      	itet	le
 8012cd0:	460a      	movle	r2, r1
 8012cd2:	462a      	movgt	r2, r5
 8012cd4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012cd8:	468b      	mov	fp, r1
 8012cda:	462f      	mov	r7, r5
 8012cdc:	bfd4      	ite	le
 8012cde:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012ce2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	ee10 2a10 	vmov	r2, s0
 8012cec:	465b      	mov	r3, fp
 8012cee:	4639      	mov	r1, r7
 8012cf0:	f7ed fdcc 	bl	800088c <__aeabi_ddiv>
 8012cf4:	ec41 0b10 	vmov	d0, r0, r1
 8012cf8:	b003      	add	sp, #12
 8012cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012cfe <__copybits>:
 8012cfe:	3901      	subs	r1, #1
 8012d00:	b570      	push	{r4, r5, r6, lr}
 8012d02:	1149      	asrs	r1, r1, #5
 8012d04:	6914      	ldr	r4, [r2, #16]
 8012d06:	3101      	adds	r1, #1
 8012d08:	f102 0314 	add.w	r3, r2, #20
 8012d0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012d10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012d14:	1f05      	subs	r5, r0, #4
 8012d16:	42a3      	cmp	r3, r4
 8012d18:	d30c      	bcc.n	8012d34 <__copybits+0x36>
 8012d1a:	1aa3      	subs	r3, r4, r2
 8012d1c:	3b11      	subs	r3, #17
 8012d1e:	f023 0303 	bic.w	r3, r3, #3
 8012d22:	3211      	adds	r2, #17
 8012d24:	42a2      	cmp	r2, r4
 8012d26:	bf88      	it	hi
 8012d28:	2300      	movhi	r3, #0
 8012d2a:	4418      	add	r0, r3
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	4288      	cmp	r0, r1
 8012d30:	d305      	bcc.n	8012d3e <__copybits+0x40>
 8012d32:	bd70      	pop	{r4, r5, r6, pc}
 8012d34:	f853 6b04 	ldr.w	r6, [r3], #4
 8012d38:	f845 6f04 	str.w	r6, [r5, #4]!
 8012d3c:	e7eb      	b.n	8012d16 <__copybits+0x18>
 8012d3e:	f840 3b04 	str.w	r3, [r0], #4
 8012d42:	e7f4      	b.n	8012d2e <__copybits+0x30>

08012d44 <__any_on>:
 8012d44:	f100 0214 	add.w	r2, r0, #20
 8012d48:	6900      	ldr	r0, [r0, #16]
 8012d4a:	114b      	asrs	r3, r1, #5
 8012d4c:	4298      	cmp	r0, r3
 8012d4e:	b510      	push	{r4, lr}
 8012d50:	db11      	blt.n	8012d76 <__any_on+0x32>
 8012d52:	dd0a      	ble.n	8012d6a <__any_on+0x26>
 8012d54:	f011 011f 	ands.w	r1, r1, #31
 8012d58:	d007      	beq.n	8012d6a <__any_on+0x26>
 8012d5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012d5e:	fa24 f001 	lsr.w	r0, r4, r1
 8012d62:	fa00 f101 	lsl.w	r1, r0, r1
 8012d66:	428c      	cmp	r4, r1
 8012d68:	d10b      	bne.n	8012d82 <__any_on+0x3e>
 8012d6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	d803      	bhi.n	8012d7a <__any_on+0x36>
 8012d72:	2000      	movs	r0, #0
 8012d74:	bd10      	pop	{r4, pc}
 8012d76:	4603      	mov	r3, r0
 8012d78:	e7f7      	b.n	8012d6a <__any_on+0x26>
 8012d7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012d7e:	2900      	cmp	r1, #0
 8012d80:	d0f5      	beq.n	8012d6e <__any_on+0x2a>
 8012d82:	2001      	movs	r0, #1
 8012d84:	e7f6      	b.n	8012d74 <__any_on+0x30>

08012d86 <_calloc_r>:
 8012d86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d88:	fba1 2402 	umull	r2, r4, r1, r2
 8012d8c:	b94c      	cbnz	r4, 8012da2 <_calloc_r+0x1c>
 8012d8e:	4611      	mov	r1, r2
 8012d90:	9201      	str	r2, [sp, #4]
 8012d92:	f000 f87b 	bl	8012e8c <_malloc_r>
 8012d96:	9a01      	ldr	r2, [sp, #4]
 8012d98:	4605      	mov	r5, r0
 8012d9a:	b930      	cbnz	r0, 8012daa <_calloc_r+0x24>
 8012d9c:	4628      	mov	r0, r5
 8012d9e:	b003      	add	sp, #12
 8012da0:	bd30      	pop	{r4, r5, pc}
 8012da2:	220c      	movs	r2, #12
 8012da4:	6002      	str	r2, [r0, #0]
 8012da6:	2500      	movs	r5, #0
 8012da8:	e7f8      	b.n	8012d9c <_calloc_r+0x16>
 8012daa:	4621      	mov	r1, r4
 8012dac:	f7fb ff6e 	bl	800ec8c <memset>
 8012db0:	e7f4      	b.n	8012d9c <_calloc_r+0x16>
	...

08012db4 <_free_r>:
 8012db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012db6:	2900      	cmp	r1, #0
 8012db8:	d044      	beq.n	8012e44 <_free_r+0x90>
 8012dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012dbe:	9001      	str	r0, [sp, #4]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	f1a1 0404 	sub.w	r4, r1, #4
 8012dc6:	bfb8      	it	lt
 8012dc8:	18e4      	addlt	r4, r4, r3
 8012dca:	f001 f833 	bl	8013e34 <__malloc_lock>
 8012dce:	4a1e      	ldr	r2, [pc, #120]	; (8012e48 <_free_r+0x94>)
 8012dd0:	9801      	ldr	r0, [sp, #4]
 8012dd2:	6813      	ldr	r3, [r2, #0]
 8012dd4:	b933      	cbnz	r3, 8012de4 <_free_r+0x30>
 8012dd6:	6063      	str	r3, [r4, #4]
 8012dd8:	6014      	str	r4, [r2, #0]
 8012dda:	b003      	add	sp, #12
 8012ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012de0:	f001 b82e 	b.w	8013e40 <__malloc_unlock>
 8012de4:	42a3      	cmp	r3, r4
 8012de6:	d908      	bls.n	8012dfa <_free_r+0x46>
 8012de8:	6825      	ldr	r5, [r4, #0]
 8012dea:	1961      	adds	r1, r4, r5
 8012dec:	428b      	cmp	r3, r1
 8012dee:	bf01      	itttt	eq
 8012df0:	6819      	ldreq	r1, [r3, #0]
 8012df2:	685b      	ldreq	r3, [r3, #4]
 8012df4:	1949      	addeq	r1, r1, r5
 8012df6:	6021      	streq	r1, [r4, #0]
 8012df8:	e7ed      	b.n	8012dd6 <_free_r+0x22>
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	685b      	ldr	r3, [r3, #4]
 8012dfe:	b10b      	cbz	r3, 8012e04 <_free_r+0x50>
 8012e00:	42a3      	cmp	r3, r4
 8012e02:	d9fa      	bls.n	8012dfa <_free_r+0x46>
 8012e04:	6811      	ldr	r1, [r2, #0]
 8012e06:	1855      	adds	r5, r2, r1
 8012e08:	42a5      	cmp	r5, r4
 8012e0a:	d10b      	bne.n	8012e24 <_free_r+0x70>
 8012e0c:	6824      	ldr	r4, [r4, #0]
 8012e0e:	4421      	add	r1, r4
 8012e10:	1854      	adds	r4, r2, r1
 8012e12:	42a3      	cmp	r3, r4
 8012e14:	6011      	str	r1, [r2, #0]
 8012e16:	d1e0      	bne.n	8012dda <_free_r+0x26>
 8012e18:	681c      	ldr	r4, [r3, #0]
 8012e1a:	685b      	ldr	r3, [r3, #4]
 8012e1c:	6053      	str	r3, [r2, #4]
 8012e1e:	4421      	add	r1, r4
 8012e20:	6011      	str	r1, [r2, #0]
 8012e22:	e7da      	b.n	8012dda <_free_r+0x26>
 8012e24:	d902      	bls.n	8012e2c <_free_r+0x78>
 8012e26:	230c      	movs	r3, #12
 8012e28:	6003      	str	r3, [r0, #0]
 8012e2a:	e7d6      	b.n	8012dda <_free_r+0x26>
 8012e2c:	6825      	ldr	r5, [r4, #0]
 8012e2e:	1961      	adds	r1, r4, r5
 8012e30:	428b      	cmp	r3, r1
 8012e32:	bf04      	itt	eq
 8012e34:	6819      	ldreq	r1, [r3, #0]
 8012e36:	685b      	ldreq	r3, [r3, #4]
 8012e38:	6063      	str	r3, [r4, #4]
 8012e3a:	bf04      	itt	eq
 8012e3c:	1949      	addeq	r1, r1, r5
 8012e3e:	6021      	streq	r1, [r4, #0]
 8012e40:	6054      	str	r4, [r2, #4]
 8012e42:	e7ca      	b.n	8012dda <_free_r+0x26>
 8012e44:	b003      	add	sp, #12
 8012e46:	bd30      	pop	{r4, r5, pc}
 8012e48:	200031b4 	.word	0x200031b4

08012e4c <sbrk_aligned>:
 8012e4c:	b570      	push	{r4, r5, r6, lr}
 8012e4e:	4e0e      	ldr	r6, [pc, #56]	; (8012e88 <sbrk_aligned+0x3c>)
 8012e50:	460c      	mov	r4, r1
 8012e52:	6831      	ldr	r1, [r6, #0]
 8012e54:	4605      	mov	r5, r0
 8012e56:	b911      	cbnz	r1, 8012e5e <sbrk_aligned+0x12>
 8012e58:	f000 fe82 	bl	8013b60 <_sbrk_r>
 8012e5c:	6030      	str	r0, [r6, #0]
 8012e5e:	4621      	mov	r1, r4
 8012e60:	4628      	mov	r0, r5
 8012e62:	f000 fe7d 	bl	8013b60 <_sbrk_r>
 8012e66:	1c43      	adds	r3, r0, #1
 8012e68:	d00a      	beq.n	8012e80 <sbrk_aligned+0x34>
 8012e6a:	1cc4      	adds	r4, r0, #3
 8012e6c:	f024 0403 	bic.w	r4, r4, #3
 8012e70:	42a0      	cmp	r0, r4
 8012e72:	d007      	beq.n	8012e84 <sbrk_aligned+0x38>
 8012e74:	1a21      	subs	r1, r4, r0
 8012e76:	4628      	mov	r0, r5
 8012e78:	f000 fe72 	bl	8013b60 <_sbrk_r>
 8012e7c:	3001      	adds	r0, #1
 8012e7e:	d101      	bne.n	8012e84 <sbrk_aligned+0x38>
 8012e80:	f04f 34ff 	mov.w	r4, #4294967295
 8012e84:	4620      	mov	r0, r4
 8012e86:	bd70      	pop	{r4, r5, r6, pc}
 8012e88:	200031b8 	.word	0x200031b8

08012e8c <_malloc_r>:
 8012e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e90:	1ccd      	adds	r5, r1, #3
 8012e92:	f025 0503 	bic.w	r5, r5, #3
 8012e96:	3508      	adds	r5, #8
 8012e98:	2d0c      	cmp	r5, #12
 8012e9a:	bf38      	it	cc
 8012e9c:	250c      	movcc	r5, #12
 8012e9e:	2d00      	cmp	r5, #0
 8012ea0:	4607      	mov	r7, r0
 8012ea2:	db01      	blt.n	8012ea8 <_malloc_r+0x1c>
 8012ea4:	42a9      	cmp	r1, r5
 8012ea6:	d905      	bls.n	8012eb4 <_malloc_r+0x28>
 8012ea8:	230c      	movs	r3, #12
 8012eaa:	603b      	str	r3, [r7, #0]
 8012eac:	2600      	movs	r6, #0
 8012eae:	4630      	mov	r0, r6
 8012eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eb4:	4e2e      	ldr	r6, [pc, #184]	; (8012f70 <_malloc_r+0xe4>)
 8012eb6:	f000 ffbd 	bl	8013e34 <__malloc_lock>
 8012eba:	6833      	ldr	r3, [r6, #0]
 8012ebc:	461c      	mov	r4, r3
 8012ebe:	bb34      	cbnz	r4, 8012f0e <_malloc_r+0x82>
 8012ec0:	4629      	mov	r1, r5
 8012ec2:	4638      	mov	r0, r7
 8012ec4:	f7ff ffc2 	bl	8012e4c <sbrk_aligned>
 8012ec8:	1c43      	adds	r3, r0, #1
 8012eca:	4604      	mov	r4, r0
 8012ecc:	d14d      	bne.n	8012f6a <_malloc_r+0xde>
 8012ece:	6834      	ldr	r4, [r6, #0]
 8012ed0:	4626      	mov	r6, r4
 8012ed2:	2e00      	cmp	r6, #0
 8012ed4:	d140      	bne.n	8012f58 <_malloc_r+0xcc>
 8012ed6:	6823      	ldr	r3, [r4, #0]
 8012ed8:	4631      	mov	r1, r6
 8012eda:	4638      	mov	r0, r7
 8012edc:	eb04 0803 	add.w	r8, r4, r3
 8012ee0:	f000 fe3e 	bl	8013b60 <_sbrk_r>
 8012ee4:	4580      	cmp	r8, r0
 8012ee6:	d13a      	bne.n	8012f5e <_malloc_r+0xd2>
 8012ee8:	6821      	ldr	r1, [r4, #0]
 8012eea:	3503      	adds	r5, #3
 8012eec:	1a6d      	subs	r5, r5, r1
 8012eee:	f025 0503 	bic.w	r5, r5, #3
 8012ef2:	3508      	adds	r5, #8
 8012ef4:	2d0c      	cmp	r5, #12
 8012ef6:	bf38      	it	cc
 8012ef8:	250c      	movcc	r5, #12
 8012efa:	4629      	mov	r1, r5
 8012efc:	4638      	mov	r0, r7
 8012efe:	f7ff ffa5 	bl	8012e4c <sbrk_aligned>
 8012f02:	3001      	adds	r0, #1
 8012f04:	d02b      	beq.n	8012f5e <_malloc_r+0xd2>
 8012f06:	6823      	ldr	r3, [r4, #0]
 8012f08:	442b      	add	r3, r5
 8012f0a:	6023      	str	r3, [r4, #0]
 8012f0c:	e00e      	b.n	8012f2c <_malloc_r+0xa0>
 8012f0e:	6822      	ldr	r2, [r4, #0]
 8012f10:	1b52      	subs	r2, r2, r5
 8012f12:	d41e      	bmi.n	8012f52 <_malloc_r+0xc6>
 8012f14:	2a0b      	cmp	r2, #11
 8012f16:	d916      	bls.n	8012f46 <_malloc_r+0xba>
 8012f18:	1961      	adds	r1, r4, r5
 8012f1a:	42a3      	cmp	r3, r4
 8012f1c:	6025      	str	r5, [r4, #0]
 8012f1e:	bf18      	it	ne
 8012f20:	6059      	strne	r1, [r3, #4]
 8012f22:	6863      	ldr	r3, [r4, #4]
 8012f24:	bf08      	it	eq
 8012f26:	6031      	streq	r1, [r6, #0]
 8012f28:	5162      	str	r2, [r4, r5]
 8012f2a:	604b      	str	r3, [r1, #4]
 8012f2c:	4638      	mov	r0, r7
 8012f2e:	f104 060b 	add.w	r6, r4, #11
 8012f32:	f000 ff85 	bl	8013e40 <__malloc_unlock>
 8012f36:	f026 0607 	bic.w	r6, r6, #7
 8012f3a:	1d23      	adds	r3, r4, #4
 8012f3c:	1af2      	subs	r2, r6, r3
 8012f3e:	d0b6      	beq.n	8012eae <_malloc_r+0x22>
 8012f40:	1b9b      	subs	r3, r3, r6
 8012f42:	50a3      	str	r3, [r4, r2]
 8012f44:	e7b3      	b.n	8012eae <_malloc_r+0x22>
 8012f46:	6862      	ldr	r2, [r4, #4]
 8012f48:	42a3      	cmp	r3, r4
 8012f4a:	bf0c      	ite	eq
 8012f4c:	6032      	streq	r2, [r6, #0]
 8012f4e:	605a      	strne	r2, [r3, #4]
 8012f50:	e7ec      	b.n	8012f2c <_malloc_r+0xa0>
 8012f52:	4623      	mov	r3, r4
 8012f54:	6864      	ldr	r4, [r4, #4]
 8012f56:	e7b2      	b.n	8012ebe <_malloc_r+0x32>
 8012f58:	4634      	mov	r4, r6
 8012f5a:	6876      	ldr	r6, [r6, #4]
 8012f5c:	e7b9      	b.n	8012ed2 <_malloc_r+0x46>
 8012f5e:	230c      	movs	r3, #12
 8012f60:	603b      	str	r3, [r7, #0]
 8012f62:	4638      	mov	r0, r7
 8012f64:	f000 ff6c 	bl	8013e40 <__malloc_unlock>
 8012f68:	e7a1      	b.n	8012eae <_malloc_r+0x22>
 8012f6a:	6025      	str	r5, [r4, #0]
 8012f6c:	e7de      	b.n	8012f2c <_malloc_r+0xa0>
 8012f6e:	bf00      	nop
 8012f70:	200031b4 	.word	0x200031b4

08012f74 <__ssputs_r>:
 8012f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f78:	688e      	ldr	r6, [r1, #8]
 8012f7a:	429e      	cmp	r6, r3
 8012f7c:	4682      	mov	sl, r0
 8012f7e:	460c      	mov	r4, r1
 8012f80:	4690      	mov	r8, r2
 8012f82:	461f      	mov	r7, r3
 8012f84:	d838      	bhi.n	8012ff8 <__ssputs_r+0x84>
 8012f86:	898a      	ldrh	r2, [r1, #12]
 8012f88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012f8c:	d032      	beq.n	8012ff4 <__ssputs_r+0x80>
 8012f8e:	6825      	ldr	r5, [r4, #0]
 8012f90:	6909      	ldr	r1, [r1, #16]
 8012f92:	eba5 0901 	sub.w	r9, r5, r1
 8012f96:	6965      	ldr	r5, [r4, #20]
 8012f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012fa0:	3301      	adds	r3, #1
 8012fa2:	444b      	add	r3, r9
 8012fa4:	106d      	asrs	r5, r5, #1
 8012fa6:	429d      	cmp	r5, r3
 8012fa8:	bf38      	it	cc
 8012faa:	461d      	movcc	r5, r3
 8012fac:	0553      	lsls	r3, r2, #21
 8012fae:	d531      	bpl.n	8013014 <__ssputs_r+0xa0>
 8012fb0:	4629      	mov	r1, r5
 8012fb2:	f7ff ff6b 	bl	8012e8c <_malloc_r>
 8012fb6:	4606      	mov	r6, r0
 8012fb8:	b950      	cbnz	r0, 8012fd0 <__ssputs_r+0x5c>
 8012fba:	230c      	movs	r3, #12
 8012fbc:	f8ca 3000 	str.w	r3, [sl]
 8012fc0:	89a3      	ldrh	r3, [r4, #12]
 8012fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fc6:	81a3      	strh	r3, [r4, #12]
 8012fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8012fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fd0:	6921      	ldr	r1, [r4, #16]
 8012fd2:	464a      	mov	r2, r9
 8012fd4:	f7fb fe32 	bl	800ec3c <memcpy>
 8012fd8:	89a3      	ldrh	r3, [r4, #12]
 8012fda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fe2:	81a3      	strh	r3, [r4, #12]
 8012fe4:	6126      	str	r6, [r4, #16]
 8012fe6:	6165      	str	r5, [r4, #20]
 8012fe8:	444e      	add	r6, r9
 8012fea:	eba5 0509 	sub.w	r5, r5, r9
 8012fee:	6026      	str	r6, [r4, #0]
 8012ff0:	60a5      	str	r5, [r4, #8]
 8012ff2:	463e      	mov	r6, r7
 8012ff4:	42be      	cmp	r6, r7
 8012ff6:	d900      	bls.n	8012ffa <__ssputs_r+0x86>
 8012ff8:	463e      	mov	r6, r7
 8012ffa:	6820      	ldr	r0, [r4, #0]
 8012ffc:	4632      	mov	r2, r6
 8012ffe:	4641      	mov	r1, r8
 8013000:	f7fb fe2a 	bl	800ec58 <memmove>
 8013004:	68a3      	ldr	r3, [r4, #8]
 8013006:	1b9b      	subs	r3, r3, r6
 8013008:	60a3      	str	r3, [r4, #8]
 801300a:	6823      	ldr	r3, [r4, #0]
 801300c:	4433      	add	r3, r6
 801300e:	6023      	str	r3, [r4, #0]
 8013010:	2000      	movs	r0, #0
 8013012:	e7db      	b.n	8012fcc <__ssputs_r+0x58>
 8013014:	462a      	mov	r2, r5
 8013016:	f000 ff19 	bl	8013e4c <_realloc_r>
 801301a:	4606      	mov	r6, r0
 801301c:	2800      	cmp	r0, #0
 801301e:	d1e1      	bne.n	8012fe4 <__ssputs_r+0x70>
 8013020:	6921      	ldr	r1, [r4, #16]
 8013022:	4650      	mov	r0, sl
 8013024:	f7ff fec6 	bl	8012db4 <_free_r>
 8013028:	e7c7      	b.n	8012fba <__ssputs_r+0x46>
	...

0801302c <_svfiprintf_r>:
 801302c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013030:	4698      	mov	r8, r3
 8013032:	898b      	ldrh	r3, [r1, #12]
 8013034:	061b      	lsls	r3, r3, #24
 8013036:	b09d      	sub	sp, #116	; 0x74
 8013038:	4607      	mov	r7, r0
 801303a:	460d      	mov	r5, r1
 801303c:	4614      	mov	r4, r2
 801303e:	d50e      	bpl.n	801305e <_svfiprintf_r+0x32>
 8013040:	690b      	ldr	r3, [r1, #16]
 8013042:	b963      	cbnz	r3, 801305e <_svfiprintf_r+0x32>
 8013044:	2140      	movs	r1, #64	; 0x40
 8013046:	f7ff ff21 	bl	8012e8c <_malloc_r>
 801304a:	6028      	str	r0, [r5, #0]
 801304c:	6128      	str	r0, [r5, #16]
 801304e:	b920      	cbnz	r0, 801305a <_svfiprintf_r+0x2e>
 8013050:	230c      	movs	r3, #12
 8013052:	603b      	str	r3, [r7, #0]
 8013054:	f04f 30ff 	mov.w	r0, #4294967295
 8013058:	e0d1      	b.n	80131fe <_svfiprintf_r+0x1d2>
 801305a:	2340      	movs	r3, #64	; 0x40
 801305c:	616b      	str	r3, [r5, #20]
 801305e:	2300      	movs	r3, #0
 8013060:	9309      	str	r3, [sp, #36]	; 0x24
 8013062:	2320      	movs	r3, #32
 8013064:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013068:	f8cd 800c 	str.w	r8, [sp, #12]
 801306c:	2330      	movs	r3, #48	; 0x30
 801306e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013218 <_svfiprintf_r+0x1ec>
 8013072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013076:	f04f 0901 	mov.w	r9, #1
 801307a:	4623      	mov	r3, r4
 801307c:	469a      	mov	sl, r3
 801307e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013082:	b10a      	cbz	r2, 8013088 <_svfiprintf_r+0x5c>
 8013084:	2a25      	cmp	r2, #37	; 0x25
 8013086:	d1f9      	bne.n	801307c <_svfiprintf_r+0x50>
 8013088:	ebba 0b04 	subs.w	fp, sl, r4
 801308c:	d00b      	beq.n	80130a6 <_svfiprintf_r+0x7a>
 801308e:	465b      	mov	r3, fp
 8013090:	4622      	mov	r2, r4
 8013092:	4629      	mov	r1, r5
 8013094:	4638      	mov	r0, r7
 8013096:	f7ff ff6d 	bl	8012f74 <__ssputs_r>
 801309a:	3001      	adds	r0, #1
 801309c:	f000 80aa 	beq.w	80131f4 <_svfiprintf_r+0x1c8>
 80130a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130a2:	445a      	add	r2, fp
 80130a4:	9209      	str	r2, [sp, #36]	; 0x24
 80130a6:	f89a 3000 	ldrb.w	r3, [sl]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	f000 80a2 	beq.w	80131f4 <_svfiprintf_r+0x1c8>
 80130b0:	2300      	movs	r3, #0
 80130b2:	f04f 32ff 	mov.w	r2, #4294967295
 80130b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80130ba:	f10a 0a01 	add.w	sl, sl, #1
 80130be:	9304      	str	r3, [sp, #16]
 80130c0:	9307      	str	r3, [sp, #28]
 80130c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80130c6:	931a      	str	r3, [sp, #104]	; 0x68
 80130c8:	4654      	mov	r4, sl
 80130ca:	2205      	movs	r2, #5
 80130cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130d0:	4851      	ldr	r0, [pc, #324]	; (8013218 <_svfiprintf_r+0x1ec>)
 80130d2:	f7ed f8a5 	bl	8000220 <memchr>
 80130d6:	9a04      	ldr	r2, [sp, #16]
 80130d8:	b9d8      	cbnz	r0, 8013112 <_svfiprintf_r+0xe6>
 80130da:	06d0      	lsls	r0, r2, #27
 80130dc:	bf44      	itt	mi
 80130de:	2320      	movmi	r3, #32
 80130e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130e4:	0711      	lsls	r1, r2, #28
 80130e6:	bf44      	itt	mi
 80130e8:	232b      	movmi	r3, #43	; 0x2b
 80130ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130ee:	f89a 3000 	ldrb.w	r3, [sl]
 80130f2:	2b2a      	cmp	r3, #42	; 0x2a
 80130f4:	d015      	beq.n	8013122 <_svfiprintf_r+0xf6>
 80130f6:	9a07      	ldr	r2, [sp, #28]
 80130f8:	4654      	mov	r4, sl
 80130fa:	2000      	movs	r0, #0
 80130fc:	f04f 0c0a 	mov.w	ip, #10
 8013100:	4621      	mov	r1, r4
 8013102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013106:	3b30      	subs	r3, #48	; 0x30
 8013108:	2b09      	cmp	r3, #9
 801310a:	d94e      	bls.n	80131aa <_svfiprintf_r+0x17e>
 801310c:	b1b0      	cbz	r0, 801313c <_svfiprintf_r+0x110>
 801310e:	9207      	str	r2, [sp, #28]
 8013110:	e014      	b.n	801313c <_svfiprintf_r+0x110>
 8013112:	eba0 0308 	sub.w	r3, r0, r8
 8013116:	fa09 f303 	lsl.w	r3, r9, r3
 801311a:	4313      	orrs	r3, r2
 801311c:	9304      	str	r3, [sp, #16]
 801311e:	46a2      	mov	sl, r4
 8013120:	e7d2      	b.n	80130c8 <_svfiprintf_r+0x9c>
 8013122:	9b03      	ldr	r3, [sp, #12]
 8013124:	1d19      	adds	r1, r3, #4
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	9103      	str	r1, [sp, #12]
 801312a:	2b00      	cmp	r3, #0
 801312c:	bfbb      	ittet	lt
 801312e:	425b      	neglt	r3, r3
 8013130:	f042 0202 	orrlt.w	r2, r2, #2
 8013134:	9307      	strge	r3, [sp, #28]
 8013136:	9307      	strlt	r3, [sp, #28]
 8013138:	bfb8      	it	lt
 801313a:	9204      	strlt	r2, [sp, #16]
 801313c:	7823      	ldrb	r3, [r4, #0]
 801313e:	2b2e      	cmp	r3, #46	; 0x2e
 8013140:	d10c      	bne.n	801315c <_svfiprintf_r+0x130>
 8013142:	7863      	ldrb	r3, [r4, #1]
 8013144:	2b2a      	cmp	r3, #42	; 0x2a
 8013146:	d135      	bne.n	80131b4 <_svfiprintf_r+0x188>
 8013148:	9b03      	ldr	r3, [sp, #12]
 801314a:	1d1a      	adds	r2, r3, #4
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	9203      	str	r2, [sp, #12]
 8013150:	2b00      	cmp	r3, #0
 8013152:	bfb8      	it	lt
 8013154:	f04f 33ff 	movlt.w	r3, #4294967295
 8013158:	3402      	adds	r4, #2
 801315a:	9305      	str	r3, [sp, #20]
 801315c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013228 <_svfiprintf_r+0x1fc>
 8013160:	7821      	ldrb	r1, [r4, #0]
 8013162:	2203      	movs	r2, #3
 8013164:	4650      	mov	r0, sl
 8013166:	f7ed f85b 	bl	8000220 <memchr>
 801316a:	b140      	cbz	r0, 801317e <_svfiprintf_r+0x152>
 801316c:	2340      	movs	r3, #64	; 0x40
 801316e:	eba0 000a 	sub.w	r0, r0, sl
 8013172:	fa03 f000 	lsl.w	r0, r3, r0
 8013176:	9b04      	ldr	r3, [sp, #16]
 8013178:	4303      	orrs	r3, r0
 801317a:	3401      	adds	r4, #1
 801317c:	9304      	str	r3, [sp, #16]
 801317e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013182:	4826      	ldr	r0, [pc, #152]	; (801321c <_svfiprintf_r+0x1f0>)
 8013184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013188:	2206      	movs	r2, #6
 801318a:	f7ed f849 	bl	8000220 <memchr>
 801318e:	2800      	cmp	r0, #0
 8013190:	d038      	beq.n	8013204 <_svfiprintf_r+0x1d8>
 8013192:	4b23      	ldr	r3, [pc, #140]	; (8013220 <_svfiprintf_r+0x1f4>)
 8013194:	bb1b      	cbnz	r3, 80131de <_svfiprintf_r+0x1b2>
 8013196:	9b03      	ldr	r3, [sp, #12]
 8013198:	3307      	adds	r3, #7
 801319a:	f023 0307 	bic.w	r3, r3, #7
 801319e:	3308      	adds	r3, #8
 80131a0:	9303      	str	r3, [sp, #12]
 80131a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131a4:	4433      	add	r3, r6
 80131a6:	9309      	str	r3, [sp, #36]	; 0x24
 80131a8:	e767      	b.n	801307a <_svfiprintf_r+0x4e>
 80131aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80131ae:	460c      	mov	r4, r1
 80131b0:	2001      	movs	r0, #1
 80131b2:	e7a5      	b.n	8013100 <_svfiprintf_r+0xd4>
 80131b4:	2300      	movs	r3, #0
 80131b6:	3401      	adds	r4, #1
 80131b8:	9305      	str	r3, [sp, #20]
 80131ba:	4619      	mov	r1, r3
 80131bc:	f04f 0c0a 	mov.w	ip, #10
 80131c0:	4620      	mov	r0, r4
 80131c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80131c6:	3a30      	subs	r2, #48	; 0x30
 80131c8:	2a09      	cmp	r2, #9
 80131ca:	d903      	bls.n	80131d4 <_svfiprintf_r+0x1a8>
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d0c5      	beq.n	801315c <_svfiprintf_r+0x130>
 80131d0:	9105      	str	r1, [sp, #20]
 80131d2:	e7c3      	b.n	801315c <_svfiprintf_r+0x130>
 80131d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80131d8:	4604      	mov	r4, r0
 80131da:	2301      	movs	r3, #1
 80131dc:	e7f0      	b.n	80131c0 <_svfiprintf_r+0x194>
 80131de:	ab03      	add	r3, sp, #12
 80131e0:	9300      	str	r3, [sp, #0]
 80131e2:	462a      	mov	r2, r5
 80131e4:	4b0f      	ldr	r3, [pc, #60]	; (8013224 <_svfiprintf_r+0x1f8>)
 80131e6:	a904      	add	r1, sp, #16
 80131e8:	4638      	mov	r0, r7
 80131ea:	f7fb fdf7 	bl	800eddc <_printf_float>
 80131ee:	1c42      	adds	r2, r0, #1
 80131f0:	4606      	mov	r6, r0
 80131f2:	d1d6      	bne.n	80131a2 <_svfiprintf_r+0x176>
 80131f4:	89ab      	ldrh	r3, [r5, #12]
 80131f6:	065b      	lsls	r3, r3, #25
 80131f8:	f53f af2c 	bmi.w	8013054 <_svfiprintf_r+0x28>
 80131fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80131fe:	b01d      	add	sp, #116	; 0x74
 8013200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013204:	ab03      	add	r3, sp, #12
 8013206:	9300      	str	r3, [sp, #0]
 8013208:	462a      	mov	r2, r5
 801320a:	4b06      	ldr	r3, [pc, #24]	; (8013224 <_svfiprintf_r+0x1f8>)
 801320c:	a904      	add	r1, sp, #16
 801320e:	4638      	mov	r0, r7
 8013210:	f7fc f888 	bl	800f324 <_printf_i>
 8013214:	e7eb      	b.n	80131ee <_svfiprintf_r+0x1c2>
 8013216:	bf00      	nop
 8013218:	08015294 	.word	0x08015294
 801321c:	0801529e 	.word	0x0801529e
 8013220:	0800eddd 	.word	0x0800eddd
 8013224:	08012f75 	.word	0x08012f75
 8013228:	0801529a 	.word	0x0801529a

0801322c <_sungetc_r>:
 801322c:	b538      	push	{r3, r4, r5, lr}
 801322e:	1c4b      	adds	r3, r1, #1
 8013230:	4614      	mov	r4, r2
 8013232:	d103      	bne.n	801323c <_sungetc_r+0x10>
 8013234:	f04f 35ff 	mov.w	r5, #4294967295
 8013238:	4628      	mov	r0, r5
 801323a:	bd38      	pop	{r3, r4, r5, pc}
 801323c:	8993      	ldrh	r3, [r2, #12]
 801323e:	f023 0320 	bic.w	r3, r3, #32
 8013242:	8193      	strh	r3, [r2, #12]
 8013244:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013246:	6852      	ldr	r2, [r2, #4]
 8013248:	b2cd      	uxtb	r5, r1
 801324a:	b18b      	cbz	r3, 8013270 <_sungetc_r+0x44>
 801324c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801324e:	4293      	cmp	r3, r2
 8013250:	dd08      	ble.n	8013264 <_sungetc_r+0x38>
 8013252:	6823      	ldr	r3, [r4, #0]
 8013254:	1e5a      	subs	r2, r3, #1
 8013256:	6022      	str	r2, [r4, #0]
 8013258:	f803 5c01 	strb.w	r5, [r3, #-1]
 801325c:	6863      	ldr	r3, [r4, #4]
 801325e:	3301      	adds	r3, #1
 8013260:	6063      	str	r3, [r4, #4]
 8013262:	e7e9      	b.n	8013238 <_sungetc_r+0xc>
 8013264:	4621      	mov	r1, r4
 8013266:	f000 fd4b 	bl	8013d00 <__submore>
 801326a:	2800      	cmp	r0, #0
 801326c:	d0f1      	beq.n	8013252 <_sungetc_r+0x26>
 801326e:	e7e1      	b.n	8013234 <_sungetc_r+0x8>
 8013270:	6921      	ldr	r1, [r4, #16]
 8013272:	6823      	ldr	r3, [r4, #0]
 8013274:	b151      	cbz	r1, 801328c <_sungetc_r+0x60>
 8013276:	4299      	cmp	r1, r3
 8013278:	d208      	bcs.n	801328c <_sungetc_r+0x60>
 801327a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801327e:	42a9      	cmp	r1, r5
 8013280:	d104      	bne.n	801328c <_sungetc_r+0x60>
 8013282:	3b01      	subs	r3, #1
 8013284:	3201      	adds	r2, #1
 8013286:	6023      	str	r3, [r4, #0]
 8013288:	6062      	str	r2, [r4, #4]
 801328a:	e7d5      	b.n	8013238 <_sungetc_r+0xc>
 801328c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013294:	6363      	str	r3, [r4, #52]	; 0x34
 8013296:	2303      	movs	r3, #3
 8013298:	63a3      	str	r3, [r4, #56]	; 0x38
 801329a:	4623      	mov	r3, r4
 801329c:	f803 5f46 	strb.w	r5, [r3, #70]!
 80132a0:	6023      	str	r3, [r4, #0]
 80132a2:	2301      	movs	r3, #1
 80132a4:	e7dc      	b.n	8013260 <_sungetc_r+0x34>

080132a6 <__ssrefill_r>:
 80132a6:	b510      	push	{r4, lr}
 80132a8:	460c      	mov	r4, r1
 80132aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80132ac:	b169      	cbz	r1, 80132ca <__ssrefill_r+0x24>
 80132ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132b2:	4299      	cmp	r1, r3
 80132b4:	d001      	beq.n	80132ba <__ssrefill_r+0x14>
 80132b6:	f7ff fd7d 	bl	8012db4 <_free_r>
 80132ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80132bc:	6063      	str	r3, [r4, #4]
 80132be:	2000      	movs	r0, #0
 80132c0:	6360      	str	r0, [r4, #52]	; 0x34
 80132c2:	b113      	cbz	r3, 80132ca <__ssrefill_r+0x24>
 80132c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80132c6:	6023      	str	r3, [r4, #0]
 80132c8:	bd10      	pop	{r4, pc}
 80132ca:	6923      	ldr	r3, [r4, #16]
 80132cc:	6023      	str	r3, [r4, #0]
 80132ce:	2300      	movs	r3, #0
 80132d0:	6063      	str	r3, [r4, #4]
 80132d2:	89a3      	ldrh	r3, [r4, #12]
 80132d4:	f043 0320 	orr.w	r3, r3, #32
 80132d8:	81a3      	strh	r3, [r4, #12]
 80132da:	f04f 30ff 	mov.w	r0, #4294967295
 80132de:	e7f3      	b.n	80132c8 <__ssrefill_r+0x22>

080132e0 <__ssvfiscanf_r>:
 80132e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132e4:	460c      	mov	r4, r1
 80132e6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80132ea:	2100      	movs	r1, #0
 80132ec:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80132f0:	49a6      	ldr	r1, [pc, #664]	; (801358c <__ssvfiscanf_r+0x2ac>)
 80132f2:	91a0      	str	r1, [sp, #640]	; 0x280
 80132f4:	f10d 0804 	add.w	r8, sp, #4
 80132f8:	49a5      	ldr	r1, [pc, #660]	; (8013590 <__ssvfiscanf_r+0x2b0>)
 80132fa:	4fa6      	ldr	r7, [pc, #664]	; (8013594 <__ssvfiscanf_r+0x2b4>)
 80132fc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013598 <__ssvfiscanf_r+0x2b8>
 8013300:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013304:	4606      	mov	r6, r0
 8013306:	91a1      	str	r1, [sp, #644]	; 0x284
 8013308:	9300      	str	r3, [sp, #0]
 801330a:	7813      	ldrb	r3, [r2, #0]
 801330c:	2b00      	cmp	r3, #0
 801330e:	f000 815a 	beq.w	80135c6 <__ssvfiscanf_r+0x2e6>
 8013312:	5dd9      	ldrb	r1, [r3, r7]
 8013314:	f011 0108 	ands.w	r1, r1, #8
 8013318:	f102 0501 	add.w	r5, r2, #1
 801331c:	d019      	beq.n	8013352 <__ssvfiscanf_r+0x72>
 801331e:	6863      	ldr	r3, [r4, #4]
 8013320:	2b00      	cmp	r3, #0
 8013322:	dd0f      	ble.n	8013344 <__ssvfiscanf_r+0x64>
 8013324:	6823      	ldr	r3, [r4, #0]
 8013326:	781a      	ldrb	r2, [r3, #0]
 8013328:	5cba      	ldrb	r2, [r7, r2]
 801332a:	0712      	lsls	r2, r2, #28
 801332c:	d401      	bmi.n	8013332 <__ssvfiscanf_r+0x52>
 801332e:	462a      	mov	r2, r5
 8013330:	e7eb      	b.n	801330a <__ssvfiscanf_r+0x2a>
 8013332:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013334:	3201      	adds	r2, #1
 8013336:	9245      	str	r2, [sp, #276]	; 0x114
 8013338:	6862      	ldr	r2, [r4, #4]
 801333a:	3301      	adds	r3, #1
 801333c:	3a01      	subs	r2, #1
 801333e:	6062      	str	r2, [r4, #4]
 8013340:	6023      	str	r3, [r4, #0]
 8013342:	e7ec      	b.n	801331e <__ssvfiscanf_r+0x3e>
 8013344:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013346:	4621      	mov	r1, r4
 8013348:	4630      	mov	r0, r6
 801334a:	4798      	blx	r3
 801334c:	2800      	cmp	r0, #0
 801334e:	d0e9      	beq.n	8013324 <__ssvfiscanf_r+0x44>
 8013350:	e7ed      	b.n	801332e <__ssvfiscanf_r+0x4e>
 8013352:	2b25      	cmp	r3, #37	; 0x25
 8013354:	d012      	beq.n	801337c <__ssvfiscanf_r+0x9c>
 8013356:	469a      	mov	sl, r3
 8013358:	6863      	ldr	r3, [r4, #4]
 801335a:	2b00      	cmp	r3, #0
 801335c:	f340 8091 	ble.w	8013482 <__ssvfiscanf_r+0x1a2>
 8013360:	6822      	ldr	r2, [r4, #0]
 8013362:	7813      	ldrb	r3, [r2, #0]
 8013364:	4553      	cmp	r3, sl
 8013366:	f040 812e 	bne.w	80135c6 <__ssvfiscanf_r+0x2e6>
 801336a:	6863      	ldr	r3, [r4, #4]
 801336c:	3b01      	subs	r3, #1
 801336e:	6063      	str	r3, [r4, #4]
 8013370:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013372:	3201      	adds	r2, #1
 8013374:	3301      	adds	r3, #1
 8013376:	6022      	str	r2, [r4, #0]
 8013378:	9345      	str	r3, [sp, #276]	; 0x114
 801337a:	e7d8      	b.n	801332e <__ssvfiscanf_r+0x4e>
 801337c:	9141      	str	r1, [sp, #260]	; 0x104
 801337e:	9143      	str	r1, [sp, #268]	; 0x10c
 8013380:	7853      	ldrb	r3, [r2, #1]
 8013382:	2b2a      	cmp	r3, #42	; 0x2a
 8013384:	bf02      	ittt	eq
 8013386:	2310      	moveq	r3, #16
 8013388:	1c95      	addeq	r5, r2, #2
 801338a:	9341      	streq	r3, [sp, #260]	; 0x104
 801338c:	220a      	movs	r2, #10
 801338e:	46aa      	mov	sl, r5
 8013390:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013394:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013398:	2b09      	cmp	r3, #9
 801339a:	d91d      	bls.n	80133d8 <__ssvfiscanf_r+0xf8>
 801339c:	487e      	ldr	r0, [pc, #504]	; (8013598 <__ssvfiscanf_r+0x2b8>)
 801339e:	2203      	movs	r2, #3
 80133a0:	f7ec ff3e 	bl	8000220 <memchr>
 80133a4:	b140      	cbz	r0, 80133b8 <__ssvfiscanf_r+0xd8>
 80133a6:	2301      	movs	r3, #1
 80133a8:	eba0 0009 	sub.w	r0, r0, r9
 80133ac:	fa03 f000 	lsl.w	r0, r3, r0
 80133b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80133b2:	4318      	orrs	r0, r3
 80133b4:	9041      	str	r0, [sp, #260]	; 0x104
 80133b6:	4655      	mov	r5, sl
 80133b8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80133bc:	2b78      	cmp	r3, #120	; 0x78
 80133be:	d806      	bhi.n	80133ce <__ssvfiscanf_r+0xee>
 80133c0:	2b57      	cmp	r3, #87	; 0x57
 80133c2:	d810      	bhi.n	80133e6 <__ssvfiscanf_r+0x106>
 80133c4:	2b25      	cmp	r3, #37	; 0x25
 80133c6:	d0c6      	beq.n	8013356 <__ssvfiscanf_r+0x76>
 80133c8:	d856      	bhi.n	8013478 <__ssvfiscanf_r+0x198>
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d064      	beq.n	8013498 <__ssvfiscanf_r+0x1b8>
 80133ce:	2303      	movs	r3, #3
 80133d0:	9347      	str	r3, [sp, #284]	; 0x11c
 80133d2:	230a      	movs	r3, #10
 80133d4:	9342      	str	r3, [sp, #264]	; 0x108
 80133d6:	e071      	b.n	80134bc <__ssvfiscanf_r+0x1dc>
 80133d8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80133da:	fb02 1103 	mla	r1, r2, r3, r1
 80133de:	3930      	subs	r1, #48	; 0x30
 80133e0:	9143      	str	r1, [sp, #268]	; 0x10c
 80133e2:	4655      	mov	r5, sl
 80133e4:	e7d3      	b.n	801338e <__ssvfiscanf_r+0xae>
 80133e6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80133ea:	2a20      	cmp	r2, #32
 80133ec:	d8ef      	bhi.n	80133ce <__ssvfiscanf_r+0xee>
 80133ee:	a101      	add	r1, pc, #4	; (adr r1, 80133f4 <__ssvfiscanf_r+0x114>)
 80133f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80133f4:	080134a7 	.word	0x080134a7
 80133f8:	080133cf 	.word	0x080133cf
 80133fc:	080133cf 	.word	0x080133cf
 8013400:	08013505 	.word	0x08013505
 8013404:	080133cf 	.word	0x080133cf
 8013408:	080133cf 	.word	0x080133cf
 801340c:	080133cf 	.word	0x080133cf
 8013410:	080133cf 	.word	0x080133cf
 8013414:	080133cf 	.word	0x080133cf
 8013418:	080133cf 	.word	0x080133cf
 801341c:	080133cf 	.word	0x080133cf
 8013420:	0801351b 	.word	0x0801351b
 8013424:	080134f1 	.word	0x080134f1
 8013428:	0801347f 	.word	0x0801347f
 801342c:	0801347f 	.word	0x0801347f
 8013430:	0801347f 	.word	0x0801347f
 8013434:	080133cf 	.word	0x080133cf
 8013438:	080134f5 	.word	0x080134f5
 801343c:	080133cf 	.word	0x080133cf
 8013440:	080133cf 	.word	0x080133cf
 8013444:	080133cf 	.word	0x080133cf
 8013448:	080133cf 	.word	0x080133cf
 801344c:	0801352b 	.word	0x0801352b
 8013450:	080134fd 	.word	0x080134fd
 8013454:	0801349f 	.word	0x0801349f
 8013458:	080133cf 	.word	0x080133cf
 801345c:	080133cf 	.word	0x080133cf
 8013460:	08013527 	.word	0x08013527
 8013464:	080133cf 	.word	0x080133cf
 8013468:	080134f1 	.word	0x080134f1
 801346c:	080133cf 	.word	0x080133cf
 8013470:	080133cf 	.word	0x080133cf
 8013474:	080134a7 	.word	0x080134a7
 8013478:	3b45      	subs	r3, #69	; 0x45
 801347a:	2b02      	cmp	r3, #2
 801347c:	d8a7      	bhi.n	80133ce <__ssvfiscanf_r+0xee>
 801347e:	2305      	movs	r3, #5
 8013480:	e01b      	b.n	80134ba <__ssvfiscanf_r+0x1da>
 8013482:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013484:	4621      	mov	r1, r4
 8013486:	4630      	mov	r0, r6
 8013488:	4798      	blx	r3
 801348a:	2800      	cmp	r0, #0
 801348c:	f43f af68 	beq.w	8013360 <__ssvfiscanf_r+0x80>
 8013490:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013492:	2800      	cmp	r0, #0
 8013494:	f040 808d 	bne.w	80135b2 <__ssvfiscanf_r+0x2d2>
 8013498:	f04f 30ff 	mov.w	r0, #4294967295
 801349c:	e08f      	b.n	80135be <__ssvfiscanf_r+0x2de>
 801349e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80134a0:	f042 0220 	orr.w	r2, r2, #32
 80134a4:	9241      	str	r2, [sp, #260]	; 0x104
 80134a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80134a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80134ac:	9241      	str	r2, [sp, #260]	; 0x104
 80134ae:	2210      	movs	r2, #16
 80134b0:	2b6f      	cmp	r3, #111	; 0x6f
 80134b2:	9242      	str	r2, [sp, #264]	; 0x108
 80134b4:	bf34      	ite	cc
 80134b6:	2303      	movcc	r3, #3
 80134b8:	2304      	movcs	r3, #4
 80134ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80134bc:	6863      	ldr	r3, [r4, #4]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	dd42      	ble.n	8013548 <__ssvfiscanf_r+0x268>
 80134c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80134c4:	0659      	lsls	r1, r3, #25
 80134c6:	d404      	bmi.n	80134d2 <__ssvfiscanf_r+0x1f2>
 80134c8:	6823      	ldr	r3, [r4, #0]
 80134ca:	781a      	ldrb	r2, [r3, #0]
 80134cc:	5cba      	ldrb	r2, [r7, r2]
 80134ce:	0712      	lsls	r2, r2, #28
 80134d0:	d441      	bmi.n	8013556 <__ssvfiscanf_r+0x276>
 80134d2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80134d4:	2b02      	cmp	r3, #2
 80134d6:	dc50      	bgt.n	801357a <__ssvfiscanf_r+0x29a>
 80134d8:	466b      	mov	r3, sp
 80134da:	4622      	mov	r2, r4
 80134dc:	a941      	add	r1, sp, #260	; 0x104
 80134de:	4630      	mov	r0, r6
 80134e0:	f000 f9d0 	bl	8013884 <_scanf_chars>
 80134e4:	2801      	cmp	r0, #1
 80134e6:	d06e      	beq.n	80135c6 <__ssvfiscanf_r+0x2e6>
 80134e8:	2802      	cmp	r0, #2
 80134ea:	f47f af20 	bne.w	801332e <__ssvfiscanf_r+0x4e>
 80134ee:	e7cf      	b.n	8013490 <__ssvfiscanf_r+0x1b0>
 80134f0:	220a      	movs	r2, #10
 80134f2:	e7dd      	b.n	80134b0 <__ssvfiscanf_r+0x1d0>
 80134f4:	2300      	movs	r3, #0
 80134f6:	9342      	str	r3, [sp, #264]	; 0x108
 80134f8:	2303      	movs	r3, #3
 80134fa:	e7de      	b.n	80134ba <__ssvfiscanf_r+0x1da>
 80134fc:	2308      	movs	r3, #8
 80134fe:	9342      	str	r3, [sp, #264]	; 0x108
 8013500:	2304      	movs	r3, #4
 8013502:	e7da      	b.n	80134ba <__ssvfiscanf_r+0x1da>
 8013504:	4629      	mov	r1, r5
 8013506:	4640      	mov	r0, r8
 8013508:	f000 fb3a 	bl	8013b80 <__sccl>
 801350c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801350e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013512:	9341      	str	r3, [sp, #260]	; 0x104
 8013514:	4605      	mov	r5, r0
 8013516:	2301      	movs	r3, #1
 8013518:	e7cf      	b.n	80134ba <__ssvfiscanf_r+0x1da>
 801351a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801351c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013520:	9341      	str	r3, [sp, #260]	; 0x104
 8013522:	2300      	movs	r3, #0
 8013524:	e7c9      	b.n	80134ba <__ssvfiscanf_r+0x1da>
 8013526:	2302      	movs	r3, #2
 8013528:	e7c7      	b.n	80134ba <__ssvfiscanf_r+0x1da>
 801352a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801352c:	06c3      	lsls	r3, r0, #27
 801352e:	f53f aefe 	bmi.w	801332e <__ssvfiscanf_r+0x4e>
 8013532:	9b00      	ldr	r3, [sp, #0]
 8013534:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013536:	1d19      	adds	r1, r3, #4
 8013538:	9100      	str	r1, [sp, #0]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	f010 0f01 	tst.w	r0, #1
 8013540:	bf14      	ite	ne
 8013542:	801a      	strhne	r2, [r3, #0]
 8013544:	601a      	streq	r2, [r3, #0]
 8013546:	e6f2      	b.n	801332e <__ssvfiscanf_r+0x4e>
 8013548:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801354a:	4621      	mov	r1, r4
 801354c:	4630      	mov	r0, r6
 801354e:	4798      	blx	r3
 8013550:	2800      	cmp	r0, #0
 8013552:	d0b6      	beq.n	80134c2 <__ssvfiscanf_r+0x1e2>
 8013554:	e79c      	b.n	8013490 <__ssvfiscanf_r+0x1b0>
 8013556:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013558:	3201      	adds	r2, #1
 801355a:	9245      	str	r2, [sp, #276]	; 0x114
 801355c:	6862      	ldr	r2, [r4, #4]
 801355e:	3a01      	subs	r2, #1
 8013560:	2a00      	cmp	r2, #0
 8013562:	6062      	str	r2, [r4, #4]
 8013564:	dd02      	ble.n	801356c <__ssvfiscanf_r+0x28c>
 8013566:	3301      	adds	r3, #1
 8013568:	6023      	str	r3, [r4, #0]
 801356a:	e7ad      	b.n	80134c8 <__ssvfiscanf_r+0x1e8>
 801356c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801356e:	4621      	mov	r1, r4
 8013570:	4630      	mov	r0, r6
 8013572:	4798      	blx	r3
 8013574:	2800      	cmp	r0, #0
 8013576:	d0a7      	beq.n	80134c8 <__ssvfiscanf_r+0x1e8>
 8013578:	e78a      	b.n	8013490 <__ssvfiscanf_r+0x1b0>
 801357a:	2b04      	cmp	r3, #4
 801357c:	dc0e      	bgt.n	801359c <__ssvfiscanf_r+0x2bc>
 801357e:	466b      	mov	r3, sp
 8013580:	4622      	mov	r2, r4
 8013582:	a941      	add	r1, sp, #260	; 0x104
 8013584:	4630      	mov	r0, r6
 8013586:	f000 f9d7 	bl	8013938 <_scanf_i>
 801358a:	e7ab      	b.n	80134e4 <__ssvfiscanf_r+0x204>
 801358c:	0801322d 	.word	0x0801322d
 8013590:	080132a7 	.word	0x080132a7
 8013594:	08014e3d 	.word	0x08014e3d
 8013598:	0801529a 	.word	0x0801529a
 801359c:	4b0b      	ldr	r3, [pc, #44]	; (80135cc <__ssvfiscanf_r+0x2ec>)
 801359e:	2b00      	cmp	r3, #0
 80135a0:	f43f aec5 	beq.w	801332e <__ssvfiscanf_r+0x4e>
 80135a4:	466b      	mov	r3, sp
 80135a6:	4622      	mov	r2, r4
 80135a8:	a941      	add	r1, sp, #260	; 0x104
 80135aa:	4630      	mov	r0, r6
 80135ac:	f7fb ffe0 	bl	800f570 <_scanf_float>
 80135b0:	e798      	b.n	80134e4 <__ssvfiscanf_r+0x204>
 80135b2:	89a3      	ldrh	r3, [r4, #12]
 80135b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80135b8:	bf18      	it	ne
 80135ba:	f04f 30ff 	movne.w	r0, #4294967295
 80135be:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80135c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135c6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80135c8:	e7f9      	b.n	80135be <__ssvfiscanf_r+0x2de>
 80135ca:	bf00      	nop
 80135cc:	0800f571 	.word	0x0800f571

080135d0 <__sfputc_r>:
 80135d0:	6893      	ldr	r3, [r2, #8]
 80135d2:	3b01      	subs	r3, #1
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	b410      	push	{r4}
 80135d8:	6093      	str	r3, [r2, #8]
 80135da:	da08      	bge.n	80135ee <__sfputc_r+0x1e>
 80135dc:	6994      	ldr	r4, [r2, #24]
 80135de:	42a3      	cmp	r3, r4
 80135e0:	db01      	blt.n	80135e6 <__sfputc_r+0x16>
 80135e2:	290a      	cmp	r1, #10
 80135e4:	d103      	bne.n	80135ee <__sfputc_r+0x1e>
 80135e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135ea:	f7fd b9ed 	b.w	80109c8 <__swbuf_r>
 80135ee:	6813      	ldr	r3, [r2, #0]
 80135f0:	1c58      	adds	r0, r3, #1
 80135f2:	6010      	str	r0, [r2, #0]
 80135f4:	7019      	strb	r1, [r3, #0]
 80135f6:	4608      	mov	r0, r1
 80135f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135fc:	4770      	bx	lr

080135fe <__sfputs_r>:
 80135fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013600:	4606      	mov	r6, r0
 8013602:	460f      	mov	r7, r1
 8013604:	4614      	mov	r4, r2
 8013606:	18d5      	adds	r5, r2, r3
 8013608:	42ac      	cmp	r4, r5
 801360a:	d101      	bne.n	8013610 <__sfputs_r+0x12>
 801360c:	2000      	movs	r0, #0
 801360e:	e007      	b.n	8013620 <__sfputs_r+0x22>
 8013610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013614:	463a      	mov	r2, r7
 8013616:	4630      	mov	r0, r6
 8013618:	f7ff ffda 	bl	80135d0 <__sfputc_r>
 801361c:	1c43      	adds	r3, r0, #1
 801361e:	d1f3      	bne.n	8013608 <__sfputs_r+0xa>
 8013620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013624 <_vfiprintf_r>:
 8013624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013628:	460d      	mov	r5, r1
 801362a:	b09d      	sub	sp, #116	; 0x74
 801362c:	4614      	mov	r4, r2
 801362e:	4698      	mov	r8, r3
 8013630:	4606      	mov	r6, r0
 8013632:	b118      	cbz	r0, 801363c <_vfiprintf_r+0x18>
 8013634:	6983      	ldr	r3, [r0, #24]
 8013636:	b90b      	cbnz	r3, 801363c <_vfiprintf_r+0x18>
 8013638:	f7fe fa3e 	bl	8011ab8 <__sinit>
 801363c:	4b89      	ldr	r3, [pc, #548]	; (8013864 <_vfiprintf_r+0x240>)
 801363e:	429d      	cmp	r5, r3
 8013640:	d11b      	bne.n	801367a <_vfiprintf_r+0x56>
 8013642:	6875      	ldr	r5, [r6, #4]
 8013644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013646:	07d9      	lsls	r1, r3, #31
 8013648:	d405      	bmi.n	8013656 <_vfiprintf_r+0x32>
 801364a:	89ab      	ldrh	r3, [r5, #12]
 801364c:	059a      	lsls	r2, r3, #22
 801364e:	d402      	bmi.n	8013656 <_vfiprintf_r+0x32>
 8013650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013652:	f7fe fe42 	bl	80122da <__retarget_lock_acquire_recursive>
 8013656:	89ab      	ldrh	r3, [r5, #12]
 8013658:	071b      	lsls	r3, r3, #28
 801365a:	d501      	bpl.n	8013660 <_vfiprintf_r+0x3c>
 801365c:	692b      	ldr	r3, [r5, #16]
 801365e:	b9eb      	cbnz	r3, 801369c <_vfiprintf_r+0x78>
 8013660:	4629      	mov	r1, r5
 8013662:	4630      	mov	r0, r6
 8013664:	f7fd fa14 	bl	8010a90 <__swsetup_r>
 8013668:	b1c0      	cbz	r0, 801369c <_vfiprintf_r+0x78>
 801366a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801366c:	07dc      	lsls	r4, r3, #31
 801366e:	d50e      	bpl.n	801368e <_vfiprintf_r+0x6a>
 8013670:	f04f 30ff 	mov.w	r0, #4294967295
 8013674:	b01d      	add	sp, #116	; 0x74
 8013676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801367a:	4b7b      	ldr	r3, [pc, #492]	; (8013868 <_vfiprintf_r+0x244>)
 801367c:	429d      	cmp	r5, r3
 801367e:	d101      	bne.n	8013684 <_vfiprintf_r+0x60>
 8013680:	68b5      	ldr	r5, [r6, #8]
 8013682:	e7df      	b.n	8013644 <_vfiprintf_r+0x20>
 8013684:	4b79      	ldr	r3, [pc, #484]	; (801386c <_vfiprintf_r+0x248>)
 8013686:	429d      	cmp	r5, r3
 8013688:	bf08      	it	eq
 801368a:	68f5      	ldreq	r5, [r6, #12]
 801368c:	e7da      	b.n	8013644 <_vfiprintf_r+0x20>
 801368e:	89ab      	ldrh	r3, [r5, #12]
 8013690:	0598      	lsls	r0, r3, #22
 8013692:	d4ed      	bmi.n	8013670 <_vfiprintf_r+0x4c>
 8013694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013696:	f7fe fe21 	bl	80122dc <__retarget_lock_release_recursive>
 801369a:	e7e9      	b.n	8013670 <_vfiprintf_r+0x4c>
 801369c:	2300      	movs	r3, #0
 801369e:	9309      	str	r3, [sp, #36]	; 0x24
 80136a0:	2320      	movs	r3, #32
 80136a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80136aa:	2330      	movs	r3, #48	; 0x30
 80136ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013870 <_vfiprintf_r+0x24c>
 80136b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136b4:	f04f 0901 	mov.w	r9, #1
 80136b8:	4623      	mov	r3, r4
 80136ba:	469a      	mov	sl, r3
 80136bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136c0:	b10a      	cbz	r2, 80136c6 <_vfiprintf_r+0xa2>
 80136c2:	2a25      	cmp	r2, #37	; 0x25
 80136c4:	d1f9      	bne.n	80136ba <_vfiprintf_r+0x96>
 80136c6:	ebba 0b04 	subs.w	fp, sl, r4
 80136ca:	d00b      	beq.n	80136e4 <_vfiprintf_r+0xc0>
 80136cc:	465b      	mov	r3, fp
 80136ce:	4622      	mov	r2, r4
 80136d0:	4629      	mov	r1, r5
 80136d2:	4630      	mov	r0, r6
 80136d4:	f7ff ff93 	bl	80135fe <__sfputs_r>
 80136d8:	3001      	adds	r0, #1
 80136da:	f000 80aa 	beq.w	8013832 <_vfiprintf_r+0x20e>
 80136de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80136e0:	445a      	add	r2, fp
 80136e2:	9209      	str	r2, [sp, #36]	; 0x24
 80136e4:	f89a 3000 	ldrb.w	r3, [sl]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	f000 80a2 	beq.w	8013832 <_vfiprintf_r+0x20e>
 80136ee:	2300      	movs	r3, #0
 80136f0:	f04f 32ff 	mov.w	r2, #4294967295
 80136f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136f8:	f10a 0a01 	add.w	sl, sl, #1
 80136fc:	9304      	str	r3, [sp, #16]
 80136fe:	9307      	str	r3, [sp, #28]
 8013700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013704:	931a      	str	r3, [sp, #104]	; 0x68
 8013706:	4654      	mov	r4, sl
 8013708:	2205      	movs	r2, #5
 801370a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801370e:	4858      	ldr	r0, [pc, #352]	; (8013870 <_vfiprintf_r+0x24c>)
 8013710:	f7ec fd86 	bl	8000220 <memchr>
 8013714:	9a04      	ldr	r2, [sp, #16]
 8013716:	b9d8      	cbnz	r0, 8013750 <_vfiprintf_r+0x12c>
 8013718:	06d1      	lsls	r1, r2, #27
 801371a:	bf44      	itt	mi
 801371c:	2320      	movmi	r3, #32
 801371e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013722:	0713      	lsls	r3, r2, #28
 8013724:	bf44      	itt	mi
 8013726:	232b      	movmi	r3, #43	; 0x2b
 8013728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801372c:	f89a 3000 	ldrb.w	r3, [sl]
 8013730:	2b2a      	cmp	r3, #42	; 0x2a
 8013732:	d015      	beq.n	8013760 <_vfiprintf_r+0x13c>
 8013734:	9a07      	ldr	r2, [sp, #28]
 8013736:	4654      	mov	r4, sl
 8013738:	2000      	movs	r0, #0
 801373a:	f04f 0c0a 	mov.w	ip, #10
 801373e:	4621      	mov	r1, r4
 8013740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013744:	3b30      	subs	r3, #48	; 0x30
 8013746:	2b09      	cmp	r3, #9
 8013748:	d94e      	bls.n	80137e8 <_vfiprintf_r+0x1c4>
 801374a:	b1b0      	cbz	r0, 801377a <_vfiprintf_r+0x156>
 801374c:	9207      	str	r2, [sp, #28]
 801374e:	e014      	b.n	801377a <_vfiprintf_r+0x156>
 8013750:	eba0 0308 	sub.w	r3, r0, r8
 8013754:	fa09 f303 	lsl.w	r3, r9, r3
 8013758:	4313      	orrs	r3, r2
 801375a:	9304      	str	r3, [sp, #16]
 801375c:	46a2      	mov	sl, r4
 801375e:	e7d2      	b.n	8013706 <_vfiprintf_r+0xe2>
 8013760:	9b03      	ldr	r3, [sp, #12]
 8013762:	1d19      	adds	r1, r3, #4
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	9103      	str	r1, [sp, #12]
 8013768:	2b00      	cmp	r3, #0
 801376a:	bfbb      	ittet	lt
 801376c:	425b      	neglt	r3, r3
 801376e:	f042 0202 	orrlt.w	r2, r2, #2
 8013772:	9307      	strge	r3, [sp, #28]
 8013774:	9307      	strlt	r3, [sp, #28]
 8013776:	bfb8      	it	lt
 8013778:	9204      	strlt	r2, [sp, #16]
 801377a:	7823      	ldrb	r3, [r4, #0]
 801377c:	2b2e      	cmp	r3, #46	; 0x2e
 801377e:	d10c      	bne.n	801379a <_vfiprintf_r+0x176>
 8013780:	7863      	ldrb	r3, [r4, #1]
 8013782:	2b2a      	cmp	r3, #42	; 0x2a
 8013784:	d135      	bne.n	80137f2 <_vfiprintf_r+0x1ce>
 8013786:	9b03      	ldr	r3, [sp, #12]
 8013788:	1d1a      	adds	r2, r3, #4
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	9203      	str	r2, [sp, #12]
 801378e:	2b00      	cmp	r3, #0
 8013790:	bfb8      	it	lt
 8013792:	f04f 33ff 	movlt.w	r3, #4294967295
 8013796:	3402      	adds	r4, #2
 8013798:	9305      	str	r3, [sp, #20]
 801379a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013880 <_vfiprintf_r+0x25c>
 801379e:	7821      	ldrb	r1, [r4, #0]
 80137a0:	2203      	movs	r2, #3
 80137a2:	4650      	mov	r0, sl
 80137a4:	f7ec fd3c 	bl	8000220 <memchr>
 80137a8:	b140      	cbz	r0, 80137bc <_vfiprintf_r+0x198>
 80137aa:	2340      	movs	r3, #64	; 0x40
 80137ac:	eba0 000a 	sub.w	r0, r0, sl
 80137b0:	fa03 f000 	lsl.w	r0, r3, r0
 80137b4:	9b04      	ldr	r3, [sp, #16]
 80137b6:	4303      	orrs	r3, r0
 80137b8:	3401      	adds	r4, #1
 80137ba:	9304      	str	r3, [sp, #16]
 80137bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137c0:	482c      	ldr	r0, [pc, #176]	; (8013874 <_vfiprintf_r+0x250>)
 80137c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137c6:	2206      	movs	r2, #6
 80137c8:	f7ec fd2a 	bl	8000220 <memchr>
 80137cc:	2800      	cmp	r0, #0
 80137ce:	d03f      	beq.n	8013850 <_vfiprintf_r+0x22c>
 80137d0:	4b29      	ldr	r3, [pc, #164]	; (8013878 <_vfiprintf_r+0x254>)
 80137d2:	bb1b      	cbnz	r3, 801381c <_vfiprintf_r+0x1f8>
 80137d4:	9b03      	ldr	r3, [sp, #12]
 80137d6:	3307      	adds	r3, #7
 80137d8:	f023 0307 	bic.w	r3, r3, #7
 80137dc:	3308      	adds	r3, #8
 80137de:	9303      	str	r3, [sp, #12]
 80137e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137e2:	443b      	add	r3, r7
 80137e4:	9309      	str	r3, [sp, #36]	; 0x24
 80137e6:	e767      	b.n	80136b8 <_vfiprintf_r+0x94>
 80137e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80137ec:	460c      	mov	r4, r1
 80137ee:	2001      	movs	r0, #1
 80137f0:	e7a5      	b.n	801373e <_vfiprintf_r+0x11a>
 80137f2:	2300      	movs	r3, #0
 80137f4:	3401      	adds	r4, #1
 80137f6:	9305      	str	r3, [sp, #20]
 80137f8:	4619      	mov	r1, r3
 80137fa:	f04f 0c0a 	mov.w	ip, #10
 80137fe:	4620      	mov	r0, r4
 8013800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013804:	3a30      	subs	r2, #48	; 0x30
 8013806:	2a09      	cmp	r2, #9
 8013808:	d903      	bls.n	8013812 <_vfiprintf_r+0x1ee>
 801380a:	2b00      	cmp	r3, #0
 801380c:	d0c5      	beq.n	801379a <_vfiprintf_r+0x176>
 801380e:	9105      	str	r1, [sp, #20]
 8013810:	e7c3      	b.n	801379a <_vfiprintf_r+0x176>
 8013812:	fb0c 2101 	mla	r1, ip, r1, r2
 8013816:	4604      	mov	r4, r0
 8013818:	2301      	movs	r3, #1
 801381a:	e7f0      	b.n	80137fe <_vfiprintf_r+0x1da>
 801381c:	ab03      	add	r3, sp, #12
 801381e:	9300      	str	r3, [sp, #0]
 8013820:	462a      	mov	r2, r5
 8013822:	4b16      	ldr	r3, [pc, #88]	; (801387c <_vfiprintf_r+0x258>)
 8013824:	a904      	add	r1, sp, #16
 8013826:	4630      	mov	r0, r6
 8013828:	f7fb fad8 	bl	800eddc <_printf_float>
 801382c:	4607      	mov	r7, r0
 801382e:	1c78      	adds	r0, r7, #1
 8013830:	d1d6      	bne.n	80137e0 <_vfiprintf_r+0x1bc>
 8013832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013834:	07d9      	lsls	r1, r3, #31
 8013836:	d405      	bmi.n	8013844 <_vfiprintf_r+0x220>
 8013838:	89ab      	ldrh	r3, [r5, #12]
 801383a:	059a      	lsls	r2, r3, #22
 801383c:	d402      	bmi.n	8013844 <_vfiprintf_r+0x220>
 801383e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013840:	f7fe fd4c 	bl	80122dc <__retarget_lock_release_recursive>
 8013844:	89ab      	ldrh	r3, [r5, #12]
 8013846:	065b      	lsls	r3, r3, #25
 8013848:	f53f af12 	bmi.w	8013670 <_vfiprintf_r+0x4c>
 801384c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801384e:	e711      	b.n	8013674 <_vfiprintf_r+0x50>
 8013850:	ab03      	add	r3, sp, #12
 8013852:	9300      	str	r3, [sp, #0]
 8013854:	462a      	mov	r2, r5
 8013856:	4b09      	ldr	r3, [pc, #36]	; (801387c <_vfiprintf_r+0x258>)
 8013858:	a904      	add	r1, sp, #16
 801385a:	4630      	mov	r0, r6
 801385c:	f7fb fd62 	bl	800f324 <_printf_i>
 8013860:	e7e4      	b.n	801382c <_vfiprintf_r+0x208>
 8013862:	bf00      	nop
 8013864:	08015080 	.word	0x08015080
 8013868:	080150a0 	.word	0x080150a0
 801386c:	08015060 	.word	0x08015060
 8013870:	08015294 	.word	0x08015294
 8013874:	0801529e 	.word	0x0801529e
 8013878:	0800eddd 	.word	0x0800eddd
 801387c:	080135ff 	.word	0x080135ff
 8013880:	0801529a 	.word	0x0801529a

08013884 <_scanf_chars>:
 8013884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013888:	4615      	mov	r5, r2
 801388a:	688a      	ldr	r2, [r1, #8]
 801388c:	4680      	mov	r8, r0
 801388e:	460c      	mov	r4, r1
 8013890:	b932      	cbnz	r2, 80138a0 <_scanf_chars+0x1c>
 8013892:	698a      	ldr	r2, [r1, #24]
 8013894:	2a00      	cmp	r2, #0
 8013896:	bf0c      	ite	eq
 8013898:	2201      	moveq	r2, #1
 801389a:	f04f 32ff 	movne.w	r2, #4294967295
 801389e:	608a      	str	r2, [r1, #8]
 80138a0:	6822      	ldr	r2, [r4, #0]
 80138a2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013934 <_scanf_chars+0xb0>
 80138a6:	06d1      	lsls	r1, r2, #27
 80138a8:	bf5f      	itttt	pl
 80138aa:	681a      	ldrpl	r2, [r3, #0]
 80138ac:	1d11      	addpl	r1, r2, #4
 80138ae:	6019      	strpl	r1, [r3, #0]
 80138b0:	6816      	ldrpl	r6, [r2, #0]
 80138b2:	2700      	movs	r7, #0
 80138b4:	69a0      	ldr	r0, [r4, #24]
 80138b6:	b188      	cbz	r0, 80138dc <_scanf_chars+0x58>
 80138b8:	2801      	cmp	r0, #1
 80138ba:	d107      	bne.n	80138cc <_scanf_chars+0x48>
 80138bc:	682a      	ldr	r2, [r5, #0]
 80138be:	7811      	ldrb	r1, [r2, #0]
 80138c0:	6962      	ldr	r2, [r4, #20]
 80138c2:	5c52      	ldrb	r2, [r2, r1]
 80138c4:	b952      	cbnz	r2, 80138dc <_scanf_chars+0x58>
 80138c6:	2f00      	cmp	r7, #0
 80138c8:	d031      	beq.n	801392e <_scanf_chars+0xaa>
 80138ca:	e022      	b.n	8013912 <_scanf_chars+0x8e>
 80138cc:	2802      	cmp	r0, #2
 80138ce:	d120      	bne.n	8013912 <_scanf_chars+0x8e>
 80138d0:	682b      	ldr	r3, [r5, #0]
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80138d8:	071b      	lsls	r3, r3, #28
 80138da:	d41a      	bmi.n	8013912 <_scanf_chars+0x8e>
 80138dc:	6823      	ldr	r3, [r4, #0]
 80138de:	06da      	lsls	r2, r3, #27
 80138e0:	bf5e      	ittt	pl
 80138e2:	682b      	ldrpl	r3, [r5, #0]
 80138e4:	781b      	ldrbpl	r3, [r3, #0]
 80138e6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80138ea:	682a      	ldr	r2, [r5, #0]
 80138ec:	686b      	ldr	r3, [r5, #4]
 80138ee:	3201      	adds	r2, #1
 80138f0:	602a      	str	r2, [r5, #0]
 80138f2:	68a2      	ldr	r2, [r4, #8]
 80138f4:	3b01      	subs	r3, #1
 80138f6:	3a01      	subs	r2, #1
 80138f8:	606b      	str	r3, [r5, #4]
 80138fa:	3701      	adds	r7, #1
 80138fc:	60a2      	str	r2, [r4, #8]
 80138fe:	b142      	cbz	r2, 8013912 <_scanf_chars+0x8e>
 8013900:	2b00      	cmp	r3, #0
 8013902:	dcd7      	bgt.n	80138b4 <_scanf_chars+0x30>
 8013904:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013908:	4629      	mov	r1, r5
 801390a:	4640      	mov	r0, r8
 801390c:	4798      	blx	r3
 801390e:	2800      	cmp	r0, #0
 8013910:	d0d0      	beq.n	80138b4 <_scanf_chars+0x30>
 8013912:	6823      	ldr	r3, [r4, #0]
 8013914:	f013 0310 	ands.w	r3, r3, #16
 8013918:	d105      	bne.n	8013926 <_scanf_chars+0xa2>
 801391a:	68e2      	ldr	r2, [r4, #12]
 801391c:	3201      	adds	r2, #1
 801391e:	60e2      	str	r2, [r4, #12]
 8013920:	69a2      	ldr	r2, [r4, #24]
 8013922:	b102      	cbz	r2, 8013926 <_scanf_chars+0xa2>
 8013924:	7033      	strb	r3, [r6, #0]
 8013926:	6923      	ldr	r3, [r4, #16]
 8013928:	443b      	add	r3, r7
 801392a:	6123      	str	r3, [r4, #16]
 801392c:	2000      	movs	r0, #0
 801392e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013932:	bf00      	nop
 8013934:	08014e3d 	.word	0x08014e3d

08013938 <_scanf_i>:
 8013938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801393c:	4698      	mov	r8, r3
 801393e:	4b76      	ldr	r3, [pc, #472]	; (8013b18 <_scanf_i+0x1e0>)
 8013940:	460c      	mov	r4, r1
 8013942:	4682      	mov	sl, r0
 8013944:	4616      	mov	r6, r2
 8013946:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801394a:	b087      	sub	sp, #28
 801394c:	ab03      	add	r3, sp, #12
 801394e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013952:	4b72      	ldr	r3, [pc, #456]	; (8013b1c <_scanf_i+0x1e4>)
 8013954:	69a1      	ldr	r1, [r4, #24]
 8013956:	4a72      	ldr	r2, [pc, #456]	; (8013b20 <_scanf_i+0x1e8>)
 8013958:	2903      	cmp	r1, #3
 801395a:	bf18      	it	ne
 801395c:	461a      	movne	r2, r3
 801395e:	68a3      	ldr	r3, [r4, #8]
 8013960:	9201      	str	r2, [sp, #4]
 8013962:	1e5a      	subs	r2, r3, #1
 8013964:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013968:	bf88      	it	hi
 801396a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801396e:	4627      	mov	r7, r4
 8013970:	bf82      	ittt	hi
 8013972:	eb03 0905 	addhi.w	r9, r3, r5
 8013976:	f240 135d 	movwhi	r3, #349	; 0x15d
 801397a:	60a3      	strhi	r3, [r4, #8]
 801397c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013980:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013984:	bf98      	it	ls
 8013986:	f04f 0900 	movls.w	r9, #0
 801398a:	6023      	str	r3, [r4, #0]
 801398c:	463d      	mov	r5, r7
 801398e:	f04f 0b00 	mov.w	fp, #0
 8013992:	6831      	ldr	r1, [r6, #0]
 8013994:	ab03      	add	r3, sp, #12
 8013996:	7809      	ldrb	r1, [r1, #0]
 8013998:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801399c:	2202      	movs	r2, #2
 801399e:	f7ec fc3f 	bl	8000220 <memchr>
 80139a2:	b328      	cbz	r0, 80139f0 <_scanf_i+0xb8>
 80139a4:	f1bb 0f01 	cmp.w	fp, #1
 80139a8:	d159      	bne.n	8013a5e <_scanf_i+0x126>
 80139aa:	6862      	ldr	r2, [r4, #4]
 80139ac:	b92a      	cbnz	r2, 80139ba <_scanf_i+0x82>
 80139ae:	6822      	ldr	r2, [r4, #0]
 80139b0:	2308      	movs	r3, #8
 80139b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80139b6:	6063      	str	r3, [r4, #4]
 80139b8:	6022      	str	r2, [r4, #0]
 80139ba:	6822      	ldr	r2, [r4, #0]
 80139bc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80139c0:	6022      	str	r2, [r4, #0]
 80139c2:	68a2      	ldr	r2, [r4, #8]
 80139c4:	1e51      	subs	r1, r2, #1
 80139c6:	60a1      	str	r1, [r4, #8]
 80139c8:	b192      	cbz	r2, 80139f0 <_scanf_i+0xb8>
 80139ca:	6832      	ldr	r2, [r6, #0]
 80139cc:	1c51      	adds	r1, r2, #1
 80139ce:	6031      	str	r1, [r6, #0]
 80139d0:	7812      	ldrb	r2, [r2, #0]
 80139d2:	f805 2b01 	strb.w	r2, [r5], #1
 80139d6:	6872      	ldr	r2, [r6, #4]
 80139d8:	3a01      	subs	r2, #1
 80139da:	2a00      	cmp	r2, #0
 80139dc:	6072      	str	r2, [r6, #4]
 80139de:	dc07      	bgt.n	80139f0 <_scanf_i+0xb8>
 80139e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80139e4:	4631      	mov	r1, r6
 80139e6:	4650      	mov	r0, sl
 80139e8:	4790      	blx	r2
 80139ea:	2800      	cmp	r0, #0
 80139ec:	f040 8085 	bne.w	8013afa <_scanf_i+0x1c2>
 80139f0:	f10b 0b01 	add.w	fp, fp, #1
 80139f4:	f1bb 0f03 	cmp.w	fp, #3
 80139f8:	d1cb      	bne.n	8013992 <_scanf_i+0x5a>
 80139fa:	6863      	ldr	r3, [r4, #4]
 80139fc:	b90b      	cbnz	r3, 8013a02 <_scanf_i+0xca>
 80139fe:	230a      	movs	r3, #10
 8013a00:	6063      	str	r3, [r4, #4]
 8013a02:	6863      	ldr	r3, [r4, #4]
 8013a04:	4947      	ldr	r1, [pc, #284]	; (8013b24 <_scanf_i+0x1ec>)
 8013a06:	6960      	ldr	r0, [r4, #20]
 8013a08:	1ac9      	subs	r1, r1, r3
 8013a0a:	f000 f8b9 	bl	8013b80 <__sccl>
 8013a0e:	f04f 0b00 	mov.w	fp, #0
 8013a12:	68a3      	ldr	r3, [r4, #8]
 8013a14:	6822      	ldr	r2, [r4, #0]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d03d      	beq.n	8013a96 <_scanf_i+0x15e>
 8013a1a:	6831      	ldr	r1, [r6, #0]
 8013a1c:	6960      	ldr	r0, [r4, #20]
 8013a1e:	f891 c000 	ldrb.w	ip, [r1]
 8013a22:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013a26:	2800      	cmp	r0, #0
 8013a28:	d035      	beq.n	8013a96 <_scanf_i+0x15e>
 8013a2a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013a2e:	d124      	bne.n	8013a7a <_scanf_i+0x142>
 8013a30:	0510      	lsls	r0, r2, #20
 8013a32:	d522      	bpl.n	8013a7a <_scanf_i+0x142>
 8013a34:	f10b 0b01 	add.w	fp, fp, #1
 8013a38:	f1b9 0f00 	cmp.w	r9, #0
 8013a3c:	d003      	beq.n	8013a46 <_scanf_i+0x10e>
 8013a3e:	3301      	adds	r3, #1
 8013a40:	f109 39ff 	add.w	r9, r9, #4294967295
 8013a44:	60a3      	str	r3, [r4, #8]
 8013a46:	6873      	ldr	r3, [r6, #4]
 8013a48:	3b01      	subs	r3, #1
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	6073      	str	r3, [r6, #4]
 8013a4e:	dd1b      	ble.n	8013a88 <_scanf_i+0x150>
 8013a50:	6833      	ldr	r3, [r6, #0]
 8013a52:	3301      	adds	r3, #1
 8013a54:	6033      	str	r3, [r6, #0]
 8013a56:	68a3      	ldr	r3, [r4, #8]
 8013a58:	3b01      	subs	r3, #1
 8013a5a:	60a3      	str	r3, [r4, #8]
 8013a5c:	e7d9      	b.n	8013a12 <_scanf_i+0xda>
 8013a5e:	f1bb 0f02 	cmp.w	fp, #2
 8013a62:	d1ae      	bne.n	80139c2 <_scanf_i+0x8a>
 8013a64:	6822      	ldr	r2, [r4, #0]
 8013a66:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013a6a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013a6e:	d1bf      	bne.n	80139f0 <_scanf_i+0xb8>
 8013a70:	2310      	movs	r3, #16
 8013a72:	6063      	str	r3, [r4, #4]
 8013a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013a78:	e7a2      	b.n	80139c0 <_scanf_i+0x88>
 8013a7a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013a7e:	6022      	str	r2, [r4, #0]
 8013a80:	780b      	ldrb	r3, [r1, #0]
 8013a82:	f805 3b01 	strb.w	r3, [r5], #1
 8013a86:	e7de      	b.n	8013a46 <_scanf_i+0x10e>
 8013a88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013a8c:	4631      	mov	r1, r6
 8013a8e:	4650      	mov	r0, sl
 8013a90:	4798      	blx	r3
 8013a92:	2800      	cmp	r0, #0
 8013a94:	d0df      	beq.n	8013a56 <_scanf_i+0x11e>
 8013a96:	6823      	ldr	r3, [r4, #0]
 8013a98:	05db      	lsls	r3, r3, #23
 8013a9a:	d50d      	bpl.n	8013ab8 <_scanf_i+0x180>
 8013a9c:	42bd      	cmp	r5, r7
 8013a9e:	d909      	bls.n	8013ab4 <_scanf_i+0x17c>
 8013aa0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013aa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013aa8:	4632      	mov	r2, r6
 8013aaa:	4650      	mov	r0, sl
 8013aac:	4798      	blx	r3
 8013aae:	f105 39ff 	add.w	r9, r5, #4294967295
 8013ab2:	464d      	mov	r5, r9
 8013ab4:	42bd      	cmp	r5, r7
 8013ab6:	d02d      	beq.n	8013b14 <_scanf_i+0x1dc>
 8013ab8:	6822      	ldr	r2, [r4, #0]
 8013aba:	f012 0210 	ands.w	r2, r2, #16
 8013abe:	d113      	bne.n	8013ae8 <_scanf_i+0x1b0>
 8013ac0:	702a      	strb	r2, [r5, #0]
 8013ac2:	6863      	ldr	r3, [r4, #4]
 8013ac4:	9e01      	ldr	r6, [sp, #4]
 8013ac6:	4639      	mov	r1, r7
 8013ac8:	4650      	mov	r0, sl
 8013aca:	47b0      	blx	r6
 8013acc:	6821      	ldr	r1, [r4, #0]
 8013ace:	f8d8 3000 	ldr.w	r3, [r8]
 8013ad2:	f011 0f20 	tst.w	r1, #32
 8013ad6:	d013      	beq.n	8013b00 <_scanf_i+0x1c8>
 8013ad8:	1d1a      	adds	r2, r3, #4
 8013ada:	f8c8 2000 	str.w	r2, [r8]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	6018      	str	r0, [r3, #0]
 8013ae2:	68e3      	ldr	r3, [r4, #12]
 8013ae4:	3301      	adds	r3, #1
 8013ae6:	60e3      	str	r3, [r4, #12]
 8013ae8:	1bed      	subs	r5, r5, r7
 8013aea:	44ab      	add	fp, r5
 8013aec:	6925      	ldr	r5, [r4, #16]
 8013aee:	445d      	add	r5, fp
 8013af0:	6125      	str	r5, [r4, #16]
 8013af2:	2000      	movs	r0, #0
 8013af4:	b007      	add	sp, #28
 8013af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013afa:	f04f 0b00 	mov.w	fp, #0
 8013afe:	e7ca      	b.n	8013a96 <_scanf_i+0x15e>
 8013b00:	1d1a      	adds	r2, r3, #4
 8013b02:	f8c8 2000 	str.w	r2, [r8]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	f011 0f01 	tst.w	r1, #1
 8013b0c:	bf14      	ite	ne
 8013b0e:	8018      	strhne	r0, [r3, #0]
 8013b10:	6018      	streq	r0, [r3, #0]
 8013b12:	e7e6      	b.n	8013ae2 <_scanf_i+0x1aa>
 8013b14:	2001      	movs	r0, #1
 8013b16:	e7ed      	b.n	8013af4 <_scanf_i+0x1bc>
 8013b18:	08014e18 	.word	0x08014e18
 8013b1c:	08013cfd 	.word	0x08013cfd
 8013b20:	080109c5 	.word	0x080109c5
 8013b24:	080152be 	.word	0x080152be

08013b28 <_read_r>:
 8013b28:	b538      	push	{r3, r4, r5, lr}
 8013b2a:	4d07      	ldr	r5, [pc, #28]	; (8013b48 <_read_r+0x20>)
 8013b2c:	4604      	mov	r4, r0
 8013b2e:	4608      	mov	r0, r1
 8013b30:	4611      	mov	r1, r2
 8013b32:	2200      	movs	r2, #0
 8013b34:	602a      	str	r2, [r5, #0]
 8013b36:	461a      	mov	r2, r3
 8013b38:	f7f0 fcfa 	bl	8004530 <_read>
 8013b3c:	1c43      	adds	r3, r0, #1
 8013b3e:	d102      	bne.n	8013b46 <_read_r+0x1e>
 8013b40:	682b      	ldr	r3, [r5, #0]
 8013b42:	b103      	cbz	r3, 8013b46 <_read_r+0x1e>
 8013b44:	6023      	str	r3, [r4, #0]
 8013b46:	bd38      	pop	{r3, r4, r5, pc}
 8013b48:	200031bc 	.word	0x200031bc
 8013b4c:	00000000 	.word	0x00000000

08013b50 <nan>:
 8013b50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013b58 <nan+0x8>
 8013b54:	4770      	bx	lr
 8013b56:	bf00      	nop
 8013b58:	00000000 	.word	0x00000000
 8013b5c:	7ff80000 	.word	0x7ff80000

08013b60 <_sbrk_r>:
 8013b60:	b538      	push	{r3, r4, r5, lr}
 8013b62:	4d06      	ldr	r5, [pc, #24]	; (8013b7c <_sbrk_r+0x1c>)
 8013b64:	2300      	movs	r3, #0
 8013b66:	4604      	mov	r4, r0
 8013b68:	4608      	mov	r0, r1
 8013b6a:	602b      	str	r3, [r5, #0]
 8013b6c:	f7f0 fd32 	bl	80045d4 <_sbrk>
 8013b70:	1c43      	adds	r3, r0, #1
 8013b72:	d102      	bne.n	8013b7a <_sbrk_r+0x1a>
 8013b74:	682b      	ldr	r3, [r5, #0]
 8013b76:	b103      	cbz	r3, 8013b7a <_sbrk_r+0x1a>
 8013b78:	6023      	str	r3, [r4, #0]
 8013b7a:	bd38      	pop	{r3, r4, r5, pc}
 8013b7c:	200031bc 	.word	0x200031bc

08013b80 <__sccl>:
 8013b80:	b570      	push	{r4, r5, r6, lr}
 8013b82:	780b      	ldrb	r3, [r1, #0]
 8013b84:	4604      	mov	r4, r0
 8013b86:	2b5e      	cmp	r3, #94	; 0x5e
 8013b88:	bf0b      	itete	eq
 8013b8a:	784b      	ldrbeq	r3, [r1, #1]
 8013b8c:	1c48      	addne	r0, r1, #1
 8013b8e:	1c88      	addeq	r0, r1, #2
 8013b90:	2200      	movne	r2, #0
 8013b92:	bf08      	it	eq
 8013b94:	2201      	moveq	r2, #1
 8013b96:	1e61      	subs	r1, r4, #1
 8013b98:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013b9c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013ba0:	42a9      	cmp	r1, r5
 8013ba2:	d1fb      	bne.n	8013b9c <__sccl+0x1c>
 8013ba4:	b90b      	cbnz	r3, 8013baa <__sccl+0x2a>
 8013ba6:	3801      	subs	r0, #1
 8013ba8:	bd70      	pop	{r4, r5, r6, pc}
 8013baa:	f082 0201 	eor.w	r2, r2, #1
 8013bae:	54e2      	strb	r2, [r4, r3]
 8013bb0:	4605      	mov	r5, r0
 8013bb2:	4628      	mov	r0, r5
 8013bb4:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013bb8:	292d      	cmp	r1, #45	; 0x2d
 8013bba:	d006      	beq.n	8013bca <__sccl+0x4a>
 8013bbc:	295d      	cmp	r1, #93	; 0x5d
 8013bbe:	d0f3      	beq.n	8013ba8 <__sccl+0x28>
 8013bc0:	b909      	cbnz	r1, 8013bc6 <__sccl+0x46>
 8013bc2:	4628      	mov	r0, r5
 8013bc4:	e7f0      	b.n	8013ba8 <__sccl+0x28>
 8013bc6:	460b      	mov	r3, r1
 8013bc8:	e7f1      	b.n	8013bae <__sccl+0x2e>
 8013bca:	786e      	ldrb	r6, [r5, #1]
 8013bcc:	2e5d      	cmp	r6, #93	; 0x5d
 8013bce:	d0fa      	beq.n	8013bc6 <__sccl+0x46>
 8013bd0:	42b3      	cmp	r3, r6
 8013bd2:	dcf8      	bgt.n	8013bc6 <__sccl+0x46>
 8013bd4:	3502      	adds	r5, #2
 8013bd6:	4619      	mov	r1, r3
 8013bd8:	3101      	adds	r1, #1
 8013bda:	428e      	cmp	r6, r1
 8013bdc:	5462      	strb	r2, [r4, r1]
 8013bde:	dcfb      	bgt.n	8013bd8 <__sccl+0x58>
 8013be0:	1af1      	subs	r1, r6, r3
 8013be2:	3901      	subs	r1, #1
 8013be4:	1c58      	adds	r0, r3, #1
 8013be6:	42b3      	cmp	r3, r6
 8013be8:	bfa8      	it	ge
 8013bea:	2100      	movge	r1, #0
 8013bec:	1843      	adds	r3, r0, r1
 8013bee:	e7e0      	b.n	8013bb2 <__sccl+0x32>

08013bf0 <strncmp>:
 8013bf0:	b510      	push	{r4, lr}
 8013bf2:	b17a      	cbz	r2, 8013c14 <strncmp+0x24>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	3901      	subs	r1, #1
 8013bf8:	1884      	adds	r4, r0, r2
 8013bfa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013bfe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013c02:	4290      	cmp	r0, r2
 8013c04:	d101      	bne.n	8013c0a <strncmp+0x1a>
 8013c06:	42a3      	cmp	r3, r4
 8013c08:	d101      	bne.n	8013c0e <strncmp+0x1e>
 8013c0a:	1a80      	subs	r0, r0, r2
 8013c0c:	bd10      	pop	{r4, pc}
 8013c0e:	2800      	cmp	r0, #0
 8013c10:	d1f3      	bne.n	8013bfa <strncmp+0xa>
 8013c12:	e7fa      	b.n	8013c0a <strncmp+0x1a>
 8013c14:	4610      	mov	r0, r2
 8013c16:	e7f9      	b.n	8013c0c <strncmp+0x1c>

08013c18 <_strtoul_l.constprop.0>:
 8013c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c1c:	4f36      	ldr	r7, [pc, #216]	; (8013cf8 <_strtoul_l.constprop.0+0xe0>)
 8013c1e:	4686      	mov	lr, r0
 8013c20:	460d      	mov	r5, r1
 8013c22:	4628      	mov	r0, r5
 8013c24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c28:	5de6      	ldrb	r6, [r4, r7]
 8013c2a:	f016 0608 	ands.w	r6, r6, #8
 8013c2e:	d1f8      	bne.n	8013c22 <_strtoul_l.constprop.0+0xa>
 8013c30:	2c2d      	cmp	r4, #45	; 0x2d
 8013c32:	d12f      	bne.n	8013c94 <_strtoul_l.constprop.0+0x7c>
 8013c34:	782c      	ldrb	r4, [r5, #0]
 8013c36:	2601      	movs	r6, #1
 8013c38:	1c85      	adds	r5, r0, #2
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d057      	beq.n	8013cee <_strtoul_l.constprop.0+0xd6>
 8013c3e:	2b10      	cmp	r3, #16
 8013c40:	d109      	bne.n	8013c56 <_strtoul_l.constprop.0+0x3e>
 8013c42:	2c30      	cmp	r4, #48	; 0x30
 8013c44:	d107      	bne.n	8013c56 <_strtoul_l.constprop.0+0x3e>
 8013c46:	7828      	ldrb	r0, [r5, #0]
 8013c48:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013c4c:	2858      	cmp	r0, #88	; 0x58
 8013c4e:	d149      	bne.n	8013ce4 <_strtoul_l.constprop.0+0xcc>
 8013c50:	786c      	ldrb	r4, [r5, #1]
 8013c52:	2310      	movs	r3, #16
 8013c54:	3502      	adds	r5, #2
 8013c56:	f04f 38ff 	mov.w	r8, #4294967295
 8013c5a:	2700      	movs	r7, #0
 8013c5c:	fbb8 f8f3 	udiv	r8, r8, r3
 8013c60:	fb03 f908 	mul.w	r9, r3, r8
 8013c64:	ea6f 0909 	mvn.w	r9, r9
 8013c68:	4638      	mov	r0, r7
 8013c6a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013c6e:	f1bc 0f09 	cmp.w	ip, #9
 8013c72:	d814      	bhi.n	8013c9e <_strtoul_l.constprop.0+0x86>
 8013c74:	4664      	mov	r4, ip
 8013c76:	42a3      	cmp	r3, r4
 8013c78:	dd22      	ble.n	8013cc0 <_strtoul_l.constprop.0+0xa8>
 8013c7a:	2f00      	cmp	r7, #0
 8013c7c:	db1d      	blt.n	8013cba <_strtoul_l.constprop.0+0xa2>
 8013c7e:	4580      	cmp	r8, r0
 8013c80:	d31b      	bcc.n	8013cba <_strtoul_l.constprop.0+0xa2>
 8013c82:	d101      	bne.n	8013c88 <_strtoul_l.constprop.0+0x70>
 8013c84:	45a1      	cmp	r9, r4
 8013c86:	db18      	blt.n	8013cba <_strtoul_l.constprop.0+0xa2>
 8013c88:	fb00 4003 	mla	r0, r0, r3, r4
 8013c8c:	2701      	movs	r7, #1
 8013c8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c92:	e7ea      	b.n	8013c6a <_strtoul_l.constprop.0+0x52>
 8013c94:	2c2b      	cmp	r4, #43	; 0x2b
 8013c96:	bf04      	itt	eq
 8013c98:	782c      	ldrbeq	r4, [r5, #0]
 8013c9a:	1c85      	addeq	r5, r0, #2
 8013c9c:	e7cd      	b.n	8013c3a <_strtoul_l.constprop.0+0x22>
 8013c9e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013ca2:	f1bc 0f19 	cmp.w	ip, #25
 8013ca6:	d801      	bhi.n	8013cac <_strtoul_l.constprop.0+0x94>
 8013ca8:	3c37      	subs	r4, #55	; 0x37
 8013caa:	e7e4      	b.n	8013c76 <_strtoul_l.constprop.0+0x5e>
 8013cac:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013cb0:	f1bc 0f19 	cmp.w	ip, #25
 8013cb4:	d804      	bhi.n	8013cc0 <_strtoul_l.constprop.0+0xa8>
 8013cb6:	3c57      	subs	r4, #87	; 0x57
 8013cb8:	e7dd      	b.n	8013c76 <_strtoul_l.constprop.0+0x5e>
 8013cba:	f04f 37ff 	mov.w	r7, #4294967295
 8013cbe:	e7e6      	b.n	8013c8e <_strtoul_l.constprop.0+0x76>
 8013cc0:	2f00      	cmp	r7, #0
 8013cc2:	da07      	bge.n	8013cd4 <_strtoul_l.constprop.0+0xbc>
 8013cc4:	2322      	movs	r3, #34	; 0x22
 8013cc6:	f8ce 3000 	str.w	r3, [lr]
 8013cca:	f04f 30ff 	mov.w	r0, #4294967295
 8013cce:	b932      	cbnz	r2, 8013cde <_strtoul_l.constprop.0+0xc6>
 8013cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cd4:	b106      	cbz	r6, 8013cd8 <_strtoul_l.constprop.0+0xc0>
 8013cd6:	4240      	negs	r0, r0
 8013cd8:	2a00      	cmp	r2, #0
 8013cda:	d0f9      	beq.n	8013cd0 <_strtoul_l.constprop.0+0xb8>
 8013cdc:	b107      	cbz	r7, 8013ce0 <_strtoul_l.constprop.0+0xc8>
 8013cde:	1e69      	subs	r1, r5, #1
 8013ce0:	6011      	str	r1, [r2, #0]
 8013ce2:	e7f5      	b.n	8013cd0 <_strtoul_l.constprop.0+0xb8>
 8013ce4:	2430      	movs	r4, #48	; 0x30
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d1b5      	bne.n	8013c56 <_strtoul_l.constprop.0+0x3e>
 8013cea:	2308      	movs	r3, #8
 8013cec:	e7b3      	b.n	8013c56 <_strtoul_l.constprop.0+0x3e>
 8013cee:	2c30      	cmp	r4, #48	; 0x30
 8013cf0:	d0a9      	beq.n	8013c46 <_strtoul_l.constprop.0+0x2e>
 8013cf2:	230a      	movs	r3, #10
 8013cf4:	e7af      	b.n	8013c56 <_strtoul_l.constprop.0+0x3e>
 8013cf6:	bf00      	nop
 8013cf8:	08014e3d 	.word	0x08014e3d

08013cfc <_strtoul_r>:
 8013cfc:	f7ff bf8c 	b.w	8013c18 <_strtoul_l.constprop.0>

08013d00 <__submore>:
 8013d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d04:	460c      	mov	r4, r1
 8013d06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d0c:	4299      	cmp	r1, r3
 8013d0e:	d11d      	bne.n	8013d4c <__submore+0x4c>
 8013d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013d14:	f7ff f8ba 	bl	8012e8c <_malloc_r>
 8013d18:	b918      	cbnz	r0, 8013d22 <__submore+0x22>
 8013d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8013d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d26:	63a3      	str	r3, [r4, #56]	; 0x38
 8013d28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8013d2e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013d32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013d36:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013d3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013d3e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013d42:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013d46:	6020      	str	r0, [r4, #0]
 8013d48:	2000      	movs	r0, #0
 8013d4a:	e7e8      	b.n	8013d1e <__submore+0x1e>
 8013d4c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013d4e:	0077      	lsls	r7, r6, #1
 8013d50:	463a      	mov	r2, r7
 8013d52:	f000 f87b 	bl	8013e4c <_realloc_r>
 8013d56:	4605      	mov	r5, r0
 8013d58:	2800      	cmp	r0, #0
 8013d5a:	d0de      	beq.n	8013d1a <__submore+0x1a>
 8013d5c:	eb00 0806 	add.w	r8, r0, r6
 8013d60:	4601      	mov	r1, r0
 8013d62:	4632      	mov	r2, r6
 8013d64:	4640      	mov	r0, r8
 8013d66:	f7fa ff69 	bl	800ec3c <memcpy>
 8013d6a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013d6e:	f8c4 8000 	str.w	r8, [r4]
 8013d72:	e7e9      	b.n	8013d48 <__submore+0x48>

08013d74 <__ascii_wctomb>:
 8013d74:	b149      	cbz	r1, 8013d8a <__ascii_wctomb+0x16>
 8013d76:	2aff      	cmp	r2, #255	; 0xff
 8013d78:	bf85      	ittet	hi
 8013d7a:	238a      	movhi	r3, #138	; 0x8a
 8013d7c:	6003      	strhi	r3, [r0, #0]
 8013d7e:	700a      	strbls	r2, [r1, #0]
 8013d80:	f04f 30ff 	movhi.w	r0, #4294967295
 8013d84:	bf98      	it	ls
 8013d86:	2001      	movls	r0, #1
 8013d88:	4770      	bx	lr
 8013d8a:	4608      	mov	r0, r1
 8013d8c:	4770      	bx	lr
	...

08013d90 <__assert_func>:
 8013d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013d92:	4614      	mov	r4, r2
 8013d94:	461a      	mov	r2, r3
 8013d96:	4b09      	ldr	r3, [pc, #36]	; (8013dbc <__assert_func+0x2c>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	4605      	mov	r5, r0
 8013d9c:	68d8      	ldr	r0, [r3, #12]
 8013d9e:	b14c      	cbz	r4, 8013db4 <__assert_func+0x24>
 8013da0:	4b07      	ldr	r3, [pc, #28]	; (8013dc0 <__assert_func+0x30>)
 8013da2:	9100      	str	r1, [sp, #0]
 8013da4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013da8:	4906      	ldr	r1, [pc, #24]	; (8013dc4 <__assert_func+0x34>)
 8013daa:	462b      	mov	r3, r5
 8013dac:	f000 f80e 	bl	8013dcc <fiprintf>
 8013db0:	f000 f87b 	bl	8013eaa <abort>
 8013db4:	4b04      	ldr	r3, [pc, #16]	; (8013dc8 <__assert_func+0x38>)
 8013db6:	461c      	mov	r4, r3
 8013db8:	e7f3      	b.n	8013da2 <__assert_func+0x12>
 8013dba:	bf00      	nop
 8013dbc:	20000110 	.word	0x20000110
 8013dc0:	080152c0 	.word	0x080152c0
 8013dc4:	080152cd 	.word	0x080152cd
 8013dc8:	080152fb 	.word	0x080152fb

08013dcc <fiprintf>:
 8013dcc:	b40e      	push	{r1, r2, r3}
 8013dce:	b503      	push	{r0, r1, lr}
 8013dd0:	4601      	mov	r1, r0
 8013dd2:	ab03      	add	r3, sp, #12
 8013dd4:	4805      	ldr	r0, [pc, #20]	; (8013dec <fiprintf+0x20>)
 8013dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dda:	6800      	ldr	r0, [r0, #0]
 8013ddc:	9301      	str	r3, [sp, #4]
 8013dde:	f7ff fc21 	bl	8013624 <_vfiprintf_r>
 8013de2:	b002      	add	sp, #8
 8013de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013de8:	b003      	add	sp, #12
 8013dea:	4770      	bx	lr
 8013dec:	20000110 	.word	0x20000110

08013df0 <_fstat_r>:
 8013df0:	b538      	push	{r3, r4, r5, lr}
 8013df2:	4d07      	ldr	r5, [pc, #28]	; (8013e10 <_fstat_r+0x20>)
 8013df4:	2300      	movs	r3, #0
 8013df6:	4604      	mov	r4, r0
 8013df8:	4608      	mov	r0, r1
 8013dfa:	4611      	mov	r1, r2
 8013dfc:	602b      	str	r3, [r5, #0]
 8013dfe:	f7f0 fbc0 	bl	8004582 <_fstat>
 8013e02:	1c43      	adds	r3, r0, #1
 8013e04:	d102      	bne.n	8013e0c <_fstat_r+0x1c>
 8013e06:	682b      	ldr	r3, [r5, #0]
 8013e08:	b103      	cbz	r3, 8013e0c <_fstat_r+0x1c>
 8013e0a:	6023      	str	r3, [r4, #0]
 8013e0c:	bd38      	pop	{r3, r4, r5, pc}
 8013e0e:	bf00      	nop
 8013e10:	200031bc 	.word	0x200031bc

08013e14 <_isatty_r>:
 8013e14:	b538      	push	{r3, r4, r5, lr}
 8013e16:	4d06      	ldr	r5, [pc, #24]	; (8013e30 <_isatty_r+0x1c>)
 8013e18:	2300      	movs	r3, #0
 8013e1a:	4604      	mov	r4, r0
 8013e1c:	4608      	mov	r0, r1
 8013e1e:	602b      	str	r3, [r5, #0]
 8013e20:	f7f0 fbbf 	bl	80045a2 <_isatty>
 8013e24:	1c43      	adds	r3, r0, #1
 8013e26:	d102      	bne.n	8013e2e <_isatty_r+0x1a>
 8013e28:	682b      	ldr	r3, [r5, #0]
 8013e2a:	b103      	cbz	r3, 8013e2e <_isatty_r+0x1a>
 8013e2c:	6023      	str	r3, [r4, #0]
 8013e2e:	bd38      	pop	{r3, r4, r5, pc}
 8013e30:	200031bc 	.word	0x200031bc

08013e34 <__malloc_lock>:
 8013e34:	4801      	ldr	r0, [pc, #4]	; (8013e3c <__malloc_lock+0x8>)
 8013e36:	f7fe ba50 	b.w	80122da <__retarget_lock_acquire_recursive>
 8013e3a:	bf00      	nop
 8013e3c:	200031b0 	.word	0x200031b0

08013e40 <__malloc_unlock>:
 8013e40:	4801      	ldr	r0, [pc, #4]	; (8013e48 <__malloc_unlock+0x8>)
 8013e42:	f7fe ba4b 	b.w	80122dc <__retarget_lock_release_recursive>
 8013e46:	bf00      	nop
 8013e48:	200031b0 	.word	0x200031b0

08013e4c <_realloc_r>:
 8013e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e50:	4680      	mov	r8, r0
 8013e52:	4614      	mov	r4, r2
 8013e54:	460e      	mov	r6, r1
 8013e56:	b921      	cbnz	r1, 8013e62 <_realloc_r+0x16>
 8013e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e5c:	4611      	mov	r1, r2
 8013e5e:	f7ff b815 	b.w	8012e8c <_malloc_r>
 8013e62:	b92a      	cbnz	r2, 8013e70 <_realloc_r+0x24>
 8013e64:	f7fe ffa6 	bl	8012db4 <_free_r>
 8013e68:	4625      	mov	r5, r4
 8013e6a:	4628      	mov	r0, r5
 8013e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e70:	f000 f822 	bl	8013eb8 <_malloc_usable_size_r>
 8013e74:	4284      	cmp	r4, r0
 8013e76:	4607      	mov	r7, r0
 8013e78:	d802      	bhi.n	8013e80 <_realloc_r+0x34>
 8013e7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013e7e:	d812      	bhi.n	8013ea6 <_realloc_r+0x5a>
 8013e80:	4621      	mov	r1, r4
 8013e82:	4640      	mov	r0, r8
 8013e84:	f7ff f802 	bl	8012e8c <_malloc_r>
 8013e88:	4605      	mov	r5, r0
 8013e8a:	2800      	cmp	r0, #0
 8013e8c:	d0ed      	beq.n	8013e6a <_realloc_r+0x1e>
 8013e8e:	42bc      	cmp	r4, r7
 8013e90:	4622      	mov	r2, r4
 8013e92:	4631      	mov	r1, r6
 8013e94:	bf28      	it	cs
 8013e96:	463a      	movcs	r2, r7
 8013e98:	f7fa fed0 	bl	800ec3c <memcpy>
 8013e9c:	4631      	mov	r1, r6
 8013e9e:	4640      	mov	r0, r8
 8013ea0:	f7fe ff88 	bl	8012db4 <_free_r>
 8013ea4:	e7e1      	b.n	8013e6a <_realloc_r+0x1e>
 8013ea6:	4635      	mov	r5, r6
 8013ea8:	e7df      	b.n	8013e6a <_realloc_r+0x1e>

08013eaa <abort>:
 8013eaa:	b508      	push	{r3, lr}
 8013eac:	2006      	movs	r0, #6
 8013eae:	f000 f833 	bl	8013f18 <raise>
 8013eb2:	2001      	movs	r0, #1
 8013eb4:	f7f0 fb32 	bl	800451c <_exit>

08013eb8 <_malloc_usable_size_r>:
 8013eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ebc:	1f18      	subs	r0, r3, #4
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	bfbc      	itt	lt
 8013ec2:	580b      	ldrlt	r3, [r1, r0]
 8013ec4:	18c0      	addlt	r0, r0, r3
 8013ec6:	4770      	bx	lr

08013ec8 <_raise_r>:
 8013ec8:	291f      	cmp	r1, #31
 8013eca:	b538      	push	{r3, r4, r5, lr}
 8013ecc:	4604      	mov	r4, r0
 8013ece:	460d      	mov	r5, r1
 8013ed0:	d904      	bls.n	8013edc <_raise_r+0x14>
 8013ed2:	2316      	movs	r3, #22
 8013ed4:	6003      	str	r3, [r0, #0]
 8013ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8013eda:	bd38      	pop	{r3, r4, r5, pc}
 8013edc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013ede:	b112      	cbz	r2, 8013ee6 <_raise_r+0x1e>
 8013ee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013ee4:	b94b      	cbnz	r3, 8013efa <_raise_r+0x32>
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	f000 f830 	bl	8013f4c <_getpid_r>
 8013eec:	462a      	mov	r2, r5
 8013eee:	4601      	mov	r1, r0
 8013ef0:	4620      	mov	r0, r4
 8013ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ef6:	f000 b817 	b.w	8013f28 <_kill_r>
 8013efa:	2b01      	cmp	r3, #1
 8013efc:	d00a      	beq.n	8013f14 <_raise_r+0x4c>
 8013efe:	1c59      	adds	r1, r3, #1
 8013f00:	d103      	bne.n	8013f0a <_raise_r+0x42>
 8013f02:	2316      	movs	r3, #22
 8013f04:	6003      	str	r3, [r0, #0]
 8013f06:	2001      	movs	r0, #1
 8013f08:	e7e7      	b.n	8013eda <_raise_r+0x12>
 8013f0a:	2400      	movs	r4, #0
 8013f0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013f10:	4628      	mov	r0, r5
 8013f12:	4798      	blx	r3
 8013f14:	2000      	movs	r0, #0
 8013f16:	e7e0      	b.n	8013eda <_raise_r+0x12>

08013f18 <raise>:
 8013f18:	4b02      	ldr	r3, [pc, #8]	; (8013f24 <raise+0xc>)
 8013f1a:	4601      	mov	r1, r0
 8013f1c:	6818      	ldr	r0, [r3, #0]
 8013f1e:	f7ff bfd3 	b.w	8013ec8 <_raise_r>
 8013f22:	bf00      	nop
 8013f24:	20000110 	.word	0x20000110

08013f28 <_kill_r>:
 8013f28:	b538      	push	{r3, r4, r5, lr}
 8013f2a:	4d07      	ldr	r5, [pc, #28]	; (8013f48 <_kill_r+0x20>)
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	4604      	mov	r4, r0
 8013f30:	4608      	mov	r0, r1
 8013f32:	4611      	mov	r1, r2
 8013f34:	602b      	str	r3, [r5, #0]
 8013f36:	f7f0 fae1 	bl	80044fc <_kill>
 8013f3a:	1c43      	adds	r3, r0, #1
 8013f3c:	d102      	bne.n	8013f44 <_kill_r+0x1c>
 8013f3e:	682b      	ldr	r3, [r5, #0]
 8013f40:	b103      	cbz	r3, 8013f44 <_kill_r+0x1c>
 8013f42:	6023      	str	r3, [r4, #0]
 8013f44:	bd38      	pop	{r3, r4, r5, pc}
 8013f46:	bf00      	nop
 8013f48:	200031bc 	.word	0x200031bc

08013f4c <_getpid_r>:
 8013f4c:	f7f0 bace 	b.w	80044ec <_getpid>

08013f50 <_init>:
 8013f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f52:	bf00      	nop
 8013f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f56:	bc08      	pop	{r3}
 8013f58:	469e      	mov	lr, r3
 8013f5a:	4770      	bx	lr

08013f5c <_fini>:
 8013f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f5e:	bf00      	nop
 8013f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f62:	bc08      	pop	{r3}
 8013f64:	469e      	mov	lr, r3
 8013f66:	4770      	bx	lr
