
LFDI Tuning Control Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000999c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009b4c  08009b4c  00019b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bd4  08009bd4  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08009bd4  08009bd4  00019bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bdc  08009bdc  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bdc  08009bdc  00019bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009be0  08009be0  00019be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08009be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020104  2**0
                  CONTENTS
 10 .bss          00001dc0  20000104  20000104  00020104  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001ec4  20001ec4  00020104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cd2b  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000416b  00000000  00000000  0003ce5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c0  00000000  00000000  00040fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001700  00000000  00000000  00042890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028cc6  00000000  00000000  00043f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f6a6  00000000  00000000  0006cc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb223  00000000  00000000  0008c2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017751f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000694c  00000000  00000000  00177570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000104 	.word	0x20000104
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009b34 	.word	0x08009b34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000108 	.word	0x20000108
 80001ec:	08009b34 	.word	0x08009b34

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_d2f>:
 8000568:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800056c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000570:	bf24      	itt	cs
 8000572:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000576:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800057a:	d90d      	bls.n	8000598 <__aeabi_d2f+0x30>
 800057c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000580:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000584:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000588:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800058c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800059c:	d121      	bne.n	80005e2 <__aeabi_d2f+0x7a>
 800059e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005a2:	bfbc      	itt	lt
 80005a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005a8:	4770      	bxlt	lr
 80005aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005b2:	f1c2 0218 	rsb	r2, r2, #24
 80005b6:	f1c2 0c20 	rsb	ip, r2, #32
 80005ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80005be:	fa20 f002 	lsr.w	r0, r0, r2
 80005c2:	bf18      	it	ne
 80005c4:	f040 0001 	orrne.w	r0, r0, #1
 80005c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005d4:	ea40 000c 	orr.w	r0, r0, ip
 80005d8:	fa23 f302 	lsr.w	r3, r3, r2
 80005dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005e0:	e7cc      	b.n	800057c <__aeabi_d2f+0x14>
 80005e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005e6:	d107      	bne.n	80005f8 <__aeabi_d2f+0x90>
 80005e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005ec:	bf1e      	ittt	ne
 80005ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005f6:	4770      	bxne	lr
 80005f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000600:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b974 	b.w	8000908 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9d08      	ldr	r5, [sp, #32]
 800063e:	4604      	mov	r4, r0
 8000640:	468e      	mov	lr, r1
 8000642:	2b00      	cmp	r3, #0
 8000644:	d14d      	bne.n	80006e2 <__udivmoddi4+0xaa>
 8000646:	428a      	cmp	r2, r1
 8000648:	4694      	mov	ip, r2
 800064a:	d969      	bls.n	8000720 <__udivmoddi4+0xe8>
 800064c:	fab2 f282 	clz	r2, r2
 8000650:	b152      	cbz	r2, 8000668 <__udivmoddi4+0x30>
 8000652:	fa01 f302 	lsl.w	r3, r1, r2
 8000656:	f1c2 0120 	rsb	r1, r2, #32
 800065a:	fa20 f101 	lsr.w	r1, r0, r1
 800065e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000662:	ea41 0e03 	orr.w	lr, r1, r3
 8000666:	4094      	lsls	r4, r2
 8000668:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800066c:	0c21      	lsrs	r1, r4, #16
 800066e:	fbbe f6f8 	udiv	r6, lr, r8
 8000672:	fa1f f78c 	uxth.w	r7, ip
 8000676:	fb08 e316 	mls	r3, r8, r6, lr
 800067a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800067e:	fb06 f107 	mul.w	r1, r6, r7
 8000682:	4299      	cmp	r1, r3
 8000684:	d90a      	bls.n	800069c <__udivmoddi4+0x64>
 8000686:	eb1c 0303 	adds.w	r3, ip, r3
 800068a:	f106 30ff 	add.w	r0, r6, #4294967295
 800068e:	f080 811f 	bcs.w	80008d0 <__udivmoddi4+0x298>
 8000692:	4299      	cmp	r1, r3
 8000694:	f240 811c 	bls.w	80008d0 <__udivmoddi4+0x298>
 8000698:	3e02      	subs	r6, #2
 800069a:	4463      	add	r3, ip
 800069c:	1a5b      	subs	r3, r3, r1
 800069e:	b2a4      	uxth	r4, r4
 80006a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a4:	fb08 3310 	mls	r3, r8, r0, r3
 80006a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006ac:	fb00 f707 	mul.w	r7, r0, r7
 80006b0:	42a7      	cmp	r7, r4
 80006b2:	d90a      	bls.n	80006ca <__udivmoddi4+0x92>
 80006b4:	eb1c 0404 	adds.w	r4, ip, r4
 80006b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006bc:	f080 810a 	bcs.w	80008d4 <__udivmoddi4+0x29c>
 80006c0:	42a7      	cmp	r7, r4
 80006c2:	f240 8107 	bls.w	80008d4 <__udivmoddi4+0x29c>
 80006c6:	4464      	add	r4, ip
 80006c8:	3802      	subs	r0, #2
 80006ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ce:	1be4      	subs	r4, r4, r7
 80006d0:	2600      	movs	r6, #0
 80006d2:	b11d      	cbz	r5, 80006dc <__udivmoddi4+0xa4>
 80006d4:	40d4      	lsrs	r4, r2
 80006d6:	2300      	movs	r3, #0
 80006d8:	e9c5 4300 	strd	r4, r3, [r5]
 80006dc:	4631      	mov	r1, r6
 80006de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d909      	bls.n	80006fa <__udivmoddi4+0xc2>
 80006e6:	2d00      	cmp	r5, #0
 80006e8:	f000 80ef 	beq.w	80008ca <__udivmoddi4+0x292>
 80006ec:	2600      	movs	r6, #0
 80006ee:	e9c5 0100 	strd	r0, r1, [r5]
 80006f2:	4630      	mov	r0, r6
 80006f4:	4631      	mov	r1, r6
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	fab3 f683 	clz	r6, r3
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d14a      	bne.n	8000798 <__udivmoddi4+0x160>
 8000702:	428b      	cmp	r3, r1
 8000704:	d302      	bcc.n	800070c <__udivmoddi4+0xd4>
 8000706:	4282      	cmp	r2, r0
 8000708:	f200 80f9 	bhi.w	80008fe <__udivmoddi4+0x2c6>
 800070c:	1a84      	subs	r4, r0, r2
 800070e:	eb61 0303 	sbc.w	r3, r1, r3
 8000712:	2001      	movs	r0, #1
 8000714:	469e      	mov	lr, r3
 8000716:	2d00      	cmp	r5, #0
 8000718:	d0e0      	beq.n	80006dc <__udivmoddi4+0xa4>
 800071a:	e9c5 4e00 	strd	r4, lr, [r5]
 800071e:	e7dd      	b.n	80006dc <__udivmoddi4+0xa4>
 8000720:	b902      	cbnz	r2, 8000724 <__udivmoddi4+0xec>
 8000722:	deff      	udf	#255	; 0xff
 8000724:	fab2 f282 	clz	r2, r2
 8000728:	2a00      	cmp	r2, #0
 800072a:	f040 8092 	bne.w	8000852 <__udivmoddi4+0x21a>
 800072e:	eba1 010c 	sub.w	r1, r1, ip
 8000732:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000736:	fa1f fe8c 	uxth.w	lr, ip
 800073a:	2601      	movs	r6, #1
 800073c:	0c20      	lsrs	r0, r4, #16
 800073e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000742:	fb07 1113 	mls	r1, r7, r3, r1
 8000746:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800074a:	fb0e f003 	mul.w	r0, lr, r3
 800074e:	4288      	cmp	r0, r1
 8000750:	d908      	bls.n	8000764 <__udivmoddi4+0x12c>
 8000752:	eb1c 0101 	adds.w	r1, ip, r1
 8000756:	f103 38ff 	add.w	r8, r3, #4294967295
 800075a:	d202      	bcs.n	8000762 <__udivmoddi4+0x12a>
 800075c:	4288      	cmp	r0, r1
 800075e:	f200 80cb 	bhi.w	80008f8 <__udivmoddi4+0x2c0>
 8000762:	4643      	mov	r3, r8
 8000764:	1a09      	subs	r1, r1, r0
 8000766:	b2a4      	uxth	r4, r4
 8000768:	fbb1 f0f7 	udiv	r0, r1, r7
 800076c:	fb07 1110 	mls	r1, r7, r0, r1
 8000770:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000774:	fb0e fe00 	mul.w	lr, lr, r0
 8000778:	45a6      	cmp	lr, r4
 800077a:	d908      	bls.n	800078e <__udivmoddi4+0x156>
 800077c:	eb1c 0404 	adds.w	r4, ip, r4
 8000780:	f100 31ff 	add.w	r1, r0, #4294967295
 8000784:	d202      	bcs.n	800078c <__udivmoddi4+0x154>
 8000786:	45a6      	cmp	lr, r4
 8000788:	f200 80bb 	bhi.w	8000902 <__udivmoddi4+0x2ca>
 800078c:	4608      	mov	r0, r1
 800078e:	eba4 040e 	sub.w	r4, r4, lr
 8000792:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000796:	e79c      	b.n	80006d2 <__udivmoddi4+0x9a>
 8000798:	f1c6 0720 	rsb	r7, r6, #32
 800079c:	40b3      	lsls	r3, r6
 800079e:	fa22 fc07 	lsr.w	ip, r2, r7
 80007a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007a6:	fa20 f407 	lsr.w	r4, r0, r7
 80007aa:	fa01 f306 	lsl.w	r3, r1, r6
 80007ae:	431c      	orrs	r4, r3
 80007b0:	40f9      	lsrs	r1, r7
 80007b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007b6:	fa00 f306 	lsl.w	r3, r0, r6
 80007ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80007be:	0c20      	lsrs	r0, r4, #16
 80007c0:	fa1f fe8c 	uxth.w	lr, ip
 80007c4:	fb09 1118 	mls	r1, r9, r8, r1
 80007c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007cc:	fb08 f00e 	mul.w	r0, r8, lr
 80007d0:	4288      	cmp	r0, r1
 80007d2:	fa02 f206 	lsl.w	r2, r2, r6
 80007d6:	d90b      	bls.n	80007f0 <__udivmoddi4+0x1b8>
 80007d8:	eb1c 0101 	adds.w	r1, ip, r1
 80007dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80007e0:	f080 8088 	bcs.w	80008f4 <__udivmoddi4+0x2bc>
 80007e4:	4288      	cmp	r0, r1
 80007e6:	f240 8085 	bls.w	80008f4 <__udivmoddi4+0x2bc>
 80007ea:	f1a8 0802 	sub.w	r8, r8, #2
 80007ee:	4461      	add	r1, ip
 80007f0:	1a09      	subs	r1, r1, r0
 80007f2:	b2a4      	uxth	r4, r4
 80007f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007f8:	fb09 1110 	mls	r1, r9, r0, r1
 80007fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000800:	fb00 fe0e 	mul.w	lr, r0, lr
 8000804:	458e      	cmp	lr, r1
 8000806:	d908      	bls.n	800081a <__udivmoddi4+0x1e2>
 8000808:	eb1c 0101 	adds.w	r1, ip, r1
 800080c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000810:	d26c      	bcs.n	80008ec <__udivmoddi4+0x2b4>
 8000812:	458e      	cmp	lr, r1
 8000814:	d96a      	bls.n	80008ec <__udivmoddi4+0x2b4>
 8000816:	3802      	subs	r0, #2
 8000818:	4461      	add	r1, ip
 800081a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800081e:	fba0 9402 	umull	r9, r4, r0, r2
 8000822:	eba1 010e 	sub.w	r1, r1, lr
 8000826:	42a1      	cmp	r1, r4
 8000828:	46c8      	mov	r8, r9
 800082a:	46a6      	mov	lr, r4
 800082c:	d356      	bcc.n	80008dc <__udivmoddi4+0x2a4>
 800082e:	d053      	beq.n	80008d8 <__udivmoddi4+0x2a0>
 8000830:	b15d      	cbz	r5, 800084a <__udivmoddi4+0x212>
 8000832:	ebb3 0208 	subs.w	r2, r3, r8
 8000836:	eb61 010e 	sbc.w	r1, r1, lr
 800083a:	fa01 f707 	lsl.w	r7, r1, r7
 800083e:	fa22 f306 	lsr.w	r3, r2, r6
 8000842:	40f1      	lsrs	r1, r6
 8000844:	431f      	orrs	r7, r3
 8000846:	e9c5 7100 	strd	r7, r1, [r5]
 800084a:	2600      	movs	r6, #0
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	f1c2 0320 	rsb	r3, r2, #32
 8000856:	40d8      	lsrs	r0, r3
 8000858:	fa0c fc02 	lsl.w	ip, ip, r2
 800085c:	fa21 f303 	lsr.w	r3, r1, r3
 8000860:	4091      	lsls	r1, r2
 8000862:	4301      	orrs	r1, r0
 8000864:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000868:	fa1f fe8c 	uxth.w	lr, ip
 800086c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000870:	fb07 3610 	mls	r6, r7, r0, r3
 8000874:	0c0b      	lsrs	r3, r1, #16
 8000876:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800087a:	fb00 f60e 	mul.w	r6, r0, lr
 800087e:	429e      	cmp	r6, r3
 8000880:	fa04 f402 	lsl.w	r4, r4, r2
 8000884:	d908      	bls.n	8000898 <__udivmoddi4+0x260>
 8000886:	eb1c 0303 	adds.w	r3, ip, r3
 800088a:	f100 38ff 	add.w	r8, r0, #4294967295
 800088e:	d22f      	bcs.n	80008f0 <__udivmoddi4+0x2b8>
 8000890:	429e      	cmp	r6, r3
 8000892:	d92d      	bls.n	80008f0 <__udivmoddi4+0x2b8>
 8000894:	3802      	subs	r0, #2
 8000896:	4463      	add	r3, ip
 8000898:	1b9b      	subs	r3, r3, r6
 800089a:	b289      	uxth	r1, r1
 800089c:	fbb3 f6f7 	udiv	r6, r3, r7
 80008a0:	fb07 3316 	mls	r3, r7, r6, r3
 80008a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a8:	fb06 f30e 	mul.w	r3, r6, lr
 80008ac:	428b      	cmp	r3, r1
 80008ae:	d908      	bls.n	80008c2 <__udivmoddi4+0x28a>
 80008b0:	eb1c 0101 	adds.w	r1, ip, r1
 80008b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008b8:	d216      	bcs.n	80008e8 <__udivmoddi4+0x2b0>
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d914      	bls.n	80008e8 <__udivmoddi4+0x2b0>
 80008be:	3e02      	subs	r6, #2
 80008c0:	4461      	add	r1, ip
 80008c2:	1ac9      	subs	r1, r1, r3
 80008c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008c8:	e738      	b.n	800073c <__udivmoddi4+0x104>
 80008ca:	462e      	mov	r6, r5
 80008cc:	4628      	mov	r0, r5
 80008ce:	e705      	b.n	80006dc <__udivmoddi4+0xa4>
 80008d0:	4606      	mov	r6, r0
 80008d2:	e6e3      	b.n	800069c <__udivmoddi4+0x64>
 80008d4:	4618      	mov	r0, r3
 80008d6:	e6f8      	b.n	80006ca <__udivmoddi4+0x92>
 80008d8:	454b      	cmp	r3, r9
 80008da:	d2a9      	bcs.n	8000830 <__udivmoddi4+0x1f8>
 80008dc:	ebb9 0802 	subs.w	r8, r9, r2
 80008e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008e4:	3801      	subs	r0, #1
 80008e6:	e7a3      	b.n	8000830 <__udivmoddi4+0x1f8>
 80008e8:	4646      	mov	r6, r8
 80008ea:	e7ea      	b.n	80008c2 <__udivmoddi4+0x28a>
 80008ec:	4620      	mov	r0, r4
 80008ee:	e794      	b.n	800081a <__udivmoddi4+0x1e2>
 80008f0:	4640      	mov	r0, r8
 80008f2:	e7d1      	b.n	8000898 <__udivmoddi4+0x260>
 80008f4:	46d0      	mov	r8, sl
 80008f6:	e77b      	b.n	80007f0 <__udivmoddi4+0x1b8>
 80008f8:	3b02      	subs	r3, #2
 80008fa:	4461      	add	r1, ip
 80008fc:	e732      	b.n	8000764 <__udivmoddi4+0x12c>
 80008fe:	4630      	mov	r0, r6
 8000900:	e709      	b.n	8000716 <__udivmoddi4+0xde>
 8000902:	4464      	add	r4, ip
 8000904:	3802      	subs	r0, #2
 8000906:	e742      	b.n	800078e <__udivmoddi4+0x156>

08000908 <__aeabi_idiv0>:
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <DAC_Initialize>:
//Max Voltage peak to peak
float REFERENCE_VOLTAGE = 3;


//
void DAC_Initialize(struct sDAC* s){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	Set_Config(s);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f000 f805 	bl	8000924 <Set_Config>

}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <Set_Config>:
//@brief: This function will set a configuration value to the configuration register
//@param s: The DAC struct to use
//@return: None
void Set_Config(struct sDAC* s){
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	uint8_t Data[3] = {0x00, 0x00, 0x00};
 800092c:	4a30      	ldr	r2, [pc, #192]	; (80009f0 <Set_Config+0xcc>)
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	6812      	ldr	r2, [r2, #0]
 8000934:	4611      	mov	r1, r2
 8000936:	8019      	strh	r1, [r3, #0]
 8000938:	3302      	adds	r3, #2
 800093a:	0c12      	lsrs	r2, r2, #16
 800093c:	701a      	strb	r2, [r3, #0]
	uint8_t read_command[3] = {READ|CONFIG, 0x00, 0x00};
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <Set_Config+0xd0>)
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <Set_Config+0xd4>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4313      	orrs	r3, r2
 8000948:	b2db      	uxtb	r3, r3
 800094a:	743b      	strb	r3, [r7, #16]
 800094c:	2300      	movs	r3, #0
 800094e:	747b      	strb	r3, [r7, #17]
 8000950:	2300      	movs	r3, #0
 8000952:	74bb      	strb	r3, [r7, #18]
	
	Hardware_Reset(s);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 f923 	bl	8000ba0 <Hardware_Reset>
	//Make sure SCE is 0. This will make it so that the DAC will use the Values direclty written to it
	//rather than trying to use the individual offset and gain of each register to re-adjust
	//the value
	//Gain_A = 1 -> gain is set to 4xVref GAIN_A = 0 -> gain is set to 6xVref
	
	uint8_t tx_data[3] = {WRITE|CONFIG, AB, 0x00};
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <Set_Config+0xd8>)
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <Set_Config+0xd4>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4313      	orrs	r3, r2
 8000964:	b2db      	uxtb	r3, r3
 8000966:	733b      	strb	r3, [r7, #12]
 8000968:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <Set_Config+0xdc>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	737b      	strb	r3, [r7, #13]
 800096e:	2300      	movs	r3, #0
 8000970:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4619      	mov	r1, r3
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 f843 	bl	8000a04 <Send_Command>
	Send_Command(s, read_command);
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f000 f83d 	bl	8000a04 <Send_Command>
	Recieve_Data(s, Data);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f85b 	bl	8000a4c <Recieve_Data>
	
	//if Data is the same as tx_data then the command was successful
	if(Data[1] == tx_data[1] && Data[2] == tx_data[2]){
 8000996:	7d7a      	ldrb	r2, [r7, #21]
 8000998:	7b7b      	ldrb	r3, [r7, #13]
 800099a:	429a      	cmp	r2, r3
 800099c:	d117      	bne.n	80009ce <Set_Config+0xaa>
 800099e:	7dba      	ldrb	r2, [r7, #22]
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d113      	bne.n	80009ce <Set_Config+0xaa>
		s->config = (Data[1] << 8) | Data[2];
 80009a6:	7d7b      	ldrb	r3, [r7, #21]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	7dbb      	ldrb	r3, [r7, #22]
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	809a      	strh	r2, [r3, #4]
		s->Configured = true;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2201      	movs	r2, #1
 80009be:	729a      	strb	r2, [r3, #10]
		s->State = DAC_STATE_OK;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2204      	movs	r2, #4
 80009c4:	72da      	strb	r2, [r3, #11]
		s->Ready = true;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2201      	movs	r2, #1
 80009ca:	731a      	strb	r2, [r3, #12]
 80009cc:	e00c      	b.n	80009e8 <Set_Config+0xc4>
	}else{
		s->State = DAC_STATE_INITFAILED;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	72da      	strb	r2, [r3, #11]
		s->Ready = false;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	731a      	strb	r2, [r3, #12]
		s->Errors++;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	89db      	ldrh	r3, [r3, #14]
 80009de:	3301      	adds	r3, #1
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	81da      	strh	r2, [r3, #14]
	}
			

}
 80009e6:	bf00      	nop
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	08009b4c 	.word	0x08009b4c
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000121 	.word	0x20000121
 80009fc:	20000120 	.word	0x20000120
 8000a00:	20000002 	.word	0x20000002

08000a04 <Send_Command>:
//        The second byte is the MSB of the register
//        The third byte is the LSB of the register
//@param: spi: The spi handle to use
//@param: command: The command to send
//@return: none
void Send_Command(struct sDAC* s, uint8_t* Command){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 f8aa 	bl	8000b68 <Set_nCS_high>
	hal_status = HAL_SPI_Transmit(s->spi, Command, 3, 1);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6818      	ldr	r0, [r3, #0]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	6839      	ldr	r1, [r7, #0]
 8000a1e:	f003 fe50 	bl	80046c2 <HAL_SPI_Transmit>
 8000a22:	4603      	mov	r3, r0
 8000a24:	73fb      	strb	r3, [r7, #15]
	while (!(s->spi->Instance->SR & SPI_SR_TXE));
 8000a26:	bf00      	nop
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d0f7      	beq.n	8000a28 <Send_Command+0x24>
	Set_nCS_high(true);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f000 f895 	bl	8000b68 <Set_nCS_high>
	Delay_us(10);
 8000a3e:	200a      	movs	r0, #10
 8000a40:	f000 f960 	bl	8000d04 <Delay_us>
}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <Recieve_Data>:

//@brief: This function recieves data from the DAC and stores it in the data array
//@param: spi: The spi handle
//@param: Data: buffer to store the data in
//@return: None
void Recieve_Data(struct sDAC* s, uint8_t* Data){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_status;
	Set_nCS_high(false);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 f886 	bl	8000b68 <Set_nCS_high>
	hal_status = HAL_SPI_TransmitReceive(s->spi,NOP_Send, Data, 3, 100);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	2364      	movs	r3, #100	; 0x64
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2303      	movs	r3, #3
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	490b      	ldr	r1, [pc, #44]	; (8000a98 <Recieve_Data+0x4c>)
 8000a6a:	f003 ff66 	bl	800493a <HAL_SPI_TransmitReceive>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	73fb      	strb	r3, [r7, #15]
	while ((s->spi->Instance->SR & SPI_SR_RXNE));
 8000a72:	bf00      	nop
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1f7      	bne.n	8000a74 <Recieve_Data+0x28>
	Set_nCS_high(true);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 f86f 	bl	8000b68 <Set_nCS_high>
	Delay_us(10);
 8000a8a:	200a      	movs	r0, #10
 8000a8c:	f000 f93a 	bl	8000d04 <Delay_us>

}
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000004 	.word	0x20000004

08000a9c <Set_DAC_Value>:
//@brief: This function sets the value of the given dac
//@param: DAC_Num: The DAC number to set the offset of
//@param: val: The value to set the dac to
//@param spi: The spi handle to use
//@return: None
void Set_DAC_Value(struct sDAC* s, uint8_t DAC_Num, uint16_t val){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	70fb      	strb	r3, [r7, #3]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	803b      	strh	r3, [r7, #0]
	//Make sure DAC is between 0 and 7
	if(DAC_Num > 7){
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	2b07      	cmp	r3, #7
 8000ab0:	d819      	bhi.n	8000ae6 <Set_DAC_Value+0x4a>
		return;
	}
	uint8_t DAC_REG = Set_DAC0+DAC_Num;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <Set_DAC_Value+0x54>)
 8000ab4:	781a      	ldrb	r2, [r3, #0]
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	4413      	add	r3, r2
 8000aba:	73fb      	strb	r3, [r7, #15]
	//Set the DAC to the correct value by adding the DAC number to the Set_DAC0 command
	uint8_t tx_data[3] = {WRITE|DAC_REG, (val >> 8), (val & 0xFF)};
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <Set_DAC_Value+0x58>)
 8000abe:	781a      	ldrb	r2, [r3, #0]
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	733b      	strb	r3, [r7, #12]
 8000ac8:	883b      	ldrh	r3, [r7, #0]
 8000aca:	0a1b      	lsrs	r3, r3, #8
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	737b      	strb	r3, [r7, #13]
 8000ad2:	883b      	ldrh	r3, [r7, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	73bb      	strb	r3, [r7, #14]
	Send_Command(s, tx_data);
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	4619      	mov	r1, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ff90 	bl	8000a04 <Send_Command>
 8000ae4:	e000      	b.n	8000ae8 <Set_DAC_Value+0x4c>
		return;
 8000ae6:	bf00      	nop
	
}
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000001 	.word	0x20000001
 8000af4:	20000120 	.word	0x20000120

08000af8 <Set_nLDAC_high>:
}

//@brief: This function sets the nLDAC pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nLDAC_high(bool HIGH){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d006      	beq.n	8000b16 <Set_nLDAC_high+0x1e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0e:	4807      	ldr	r0, [pc, #28]	; (8000b2c <Set_nLDAC_high+0x34>)
 8000b10:	f001 fc74 	bl	80023fc <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
	}
}
 8000b14:	e005      	b.n	8000b22 <Set_nLDAC_high+0x2a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <Set_nLDAC_high+0x34>)
 8000b1e:	f001 fc6d 	bl	80023fc <HAL_GPIO_WritePin>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40020c00 	.word	0x40020c00

08000b30 <Set_nRST_high>:
}

//@brief: This function sets the nRST pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nRST_high(bool HIGH){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d006      	beq.n	8000b4e <Set_nRST_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <Set_nRST_high+0x34>)
 8000b48:	f001 fc58 	bl	80023fc <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
	}

}
 8000b4c:	e005      	b.n	8000b5a <Set_nRST_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <Set_nRST_high+0x34>)
 8000b56:	f001 fc51 	bl	80023fc <HAL_GPIO_WritePin>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000

08000b68 <Set_nCS_high>:
}

//@brief: This function sets the nCS pin to the given state
//@param: HIGH: The state to set the pin to
//@return: None
void Set_nCS_high(bool HIGH){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	if(HIGH){
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d006      	beq.n	8000b86 <Set_nCS_high+0x1e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <Set_nCS_high+0x34>)
 8000b80:	f001 fc3c 	bl	80023fc <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
	}

}
 8000b84:	e005      	b.n	8000b92 <Set_nCS_high+0x2a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b8c:	4803      	ldr	r0, [pc, #12]	; (8000b9c <Set_nCS_high+0x34>)
 8000b8e:	f001 fc35 	bl	80023fc <HAL_GPIO_WritePin>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <Hardware_Reset>:
	return state;
}


//Reset the DAC Values using the nRST Pin
void Hardware_Reset(struct sDAC* s){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	Set_nRST_high(false);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff ffc1 	bl	8000b30 <Set_nRST_high>
	Delay_us(10);
 8000bae:	200a      	movs	r0, #10
 8000bb0:	f000 f8a8 	bl	8000d04 <Delay_us>
	Set_nRST_high(true);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff ffbb 	bl	8000b30 <Set_nRST_high>
	Delay_us(10);
 8000bba:	200a      	movs	r0, #10
 8000bbc:	f000 f8a2 	bl	8000d04 <Delay_us>
	s->State = DAC_STATE_UNKNOWN;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	72da      	strb	r2, [r3, #11]
	s->Ready= false;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	731a      	strb	r2, [r3, #12]
	s->Errors = 0;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	81da      	strh	r2, [r3, #14]
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <Syncronous_Update>:


//Syncronous Update of LDAC using the nLDAC Pin NOTE: Only Needed if nLDAC is tied High
void Syncronous_Update(void){
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
	Set_nLDAC_high(false);
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff ff8a 	bl	8000af8 <Set_nLDAC_high>
	Delay_us(10);
 8000be4:	200a      	movs	r0, #10
 8000be6:	f000 f88d 	bl	8000d04 <Delay_us>
	Set_nLDAC_high(true);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff ff84 	bl	8000af8 <Set_nLDAC_high>
	Delay_us(10);
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	f000 f887 	bl	8000d04 <Delay_us>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <Set_Voltage_Peak_to_Peak>:
}

//@brief: This function sets the upper and lower bounds of a DAC Channel
//@param: s: The DAC Channel to set the bounds of
//@param: voltage: The voltage to set the bounds to
void Set_Voltage_Peak_to_Peak(struct sDAC* sDAC, struct sDAC_Channel* sChan, float* voltage){
 8000bfc:	b480      	push	{r7}
 8000bfe:	b087      	sub	sp, #28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
	//The max Voltage Peak to Peak is 22.4V so we need to scale the voltage to fit in 16 bits
	//Find the upper and lower bounds of the voltage with Zero Bias
	//Divide the voltage by the max voltage to get a percentage and cast to a 16 bit int
	float percentage = (*voltage/(float)sDAC->max_peak2peak)/2;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	edd3 6a00 	vldr	s13, [r3]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000c18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c20:	edc7 7a05 	vstr	s15, [r7, #20]
	sChan->upper_bound = 0xFFFF/2 + percentage*0xFFFF;
 8000c24:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c28:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000c74 <Set_Voltage_Peak_to_Peak+0x78>
 8000c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c30:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000c78 <Set_Voltage_Peak_to_Peak+0x7c>
 8000c34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c3c:	ee17 3a90 	vmov	r3, s15
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	801a      	strh	r2, [r3, #0]
	sChan->lower_bound = 0xFFFF/2 - percentage*0xFFFF;
 8000c46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c4a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000c74 <Set_Voltage_Peak_to_Peak+0x78>
 8000c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c52:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000c78 <Set_Voltage_Peak_to_Peak+0x7c>
 8000c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c5e:	ee17 3a90 	vmov	r3, s15
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	805a      	strh	r2, [r3, #2]
	return;
 8000c68:	bf00      	nop

}
 8000c6a:	371c      	adds	r7, #28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	477fff00 	.word	0x477fff00
 8000c78:	46fffe00 	.word	0x46fffe00

08000c7c <set_heater>:
#include "Heater_Controller.h"

void set_heater(bool Heater_On){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
    if(Heater_On){
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d005      	beq.n	8000c98 <set_heater+0x1c>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2120      	movs	r1, #32
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <set_heater+0x30>)
 8000c92:	f001 fbb3 	bl	80023fc <HAL_GPIO_WritePin>
    }else{
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
    }
}
 8000c96:	e004      	b.n	8000ca2 <set_heater+0x26>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <set_heater+0x30>)
 8000c9e:	f001 fbad 	bl	80023fc <HAL_GPIO_WritePin>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40020800 	.word	0x40020800

08000cb0 <get_heater>:

bool get_heater(){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	/* read PC13 */
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5))
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <get_heater+0x1c>)
 8000cb8:	f001 fb88 	bl	80023cc <HAL_GPIO_ReadPin>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <get_heater+0x16>
	{
	 return true;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <get_heater+0x18>
	}else{
		return false;
 8000cc6:	2300      	movs	r3, #0
	}
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40020800 	.word	0x40020800

08000cd0 <InitDWTTimer>:
    HAL_Delay(1);
  }
}

void InitDWTTimer(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <InitDWTTimer+0x2c>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <InitDWTTimer+0x2c>)
 8000cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cde:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0; // reset the counter
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <InitDWTTimer+0x30>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk ; // enable the counter
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <InitDWTTimer+0x30>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <InitDWTTimer+0x30>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6013      	str	r3, [r2, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000edf0 	.word	0xe000edf0
 8000d00:	e0001000 	.word	0xe0001000

08000d04 <Delay_us>:

void Delay_us(uint32_t us)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <Delay_us+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <Delay_us+0x44>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	0c9b      	lsrs	r3, r3, #18
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	fb02 f303 	mul.w	r3, r2, r3
 8000d1e:	60fb      	str	r3, [r7, #12]
  volatile uint32_t start = DWT->CYCCNT;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <Delay_us+0x48>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	60bb      	str	r3, [r7, #8]
  do  {
  } while((DWT->CYCCNT - start) < cycles);
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <Delay_us+0x48>)
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad2      	subs	r2, r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d3f8      	bcc.n	8000d26 <Delay_us+0x22>
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008
 8000d48:	431bde83 	.word	0x431bde83
 8000d4c:	e0001000 	.word	0xe0001000

08000d50 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//This Intterupot is called every .25ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a28      	ldr	r2, [pc, #160]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d149      	bne.n	8000df4 <HAL_TIM_PeriodElapsedCallback+0xa4>
  {
    for (int i = 0; i < 6; i++){
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	e043      	b.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x9e>
      if(DAC8718.DAC_Channels[i].enabled){
 8000d66:	4a26      	ldr	r2, [pc, #152]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	4413      	add	r3, r2
 8000d70:	7a9b      	ldrb	r3, [r3, #10]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d036      	beq.n	8000de4 <HAL_TIM_PeriodElapsedCallback+0x94>
        if(DAC8718.DAC_Channels[i].state_high){
 8000d76:	4a22      	ldr	r2, [pc, #136]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	4413      	add	r3, r2
 8000d80:	7a5b      	ldrb	r3, [r3, #9]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d017      	beq.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x66>
          Set_DAC_Value(&DAC8718, DAC8718.DAC_Channels[i].DAC_number, DAC8718.DAC_Channels[i].lower_bound);
 8000d86:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4413      	add	r3, r2
 8000d90:	7a19      	ldrb	r1, [r3, #8]
 8000d92:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3302      	adds	r3, #2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	88db      	ldrh	r3, [r3, #6]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4817      	ldr	r0, [pc, #92]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000da2:	f7ff fe7b 	bl	8000a9c <Set_DAC_Value>
          DAC8718.DAC_Channels[i].state_high = false;
 8000da6:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3302      	adds	r3, #2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	4413      	add	r3, r2
 8000db0:	2200      	movs	r2, #0
 8000db2:	725a      	strb	r2, [r3, #9]
 8000db4:	e016      	b.n	8000de4 <HAL_TIM_PeriodElapsedCallback+0x94>
        }else{
          Set_DAC_Value(&DAC8718, DAC8718.DAC_Channels[i].DAC_number, DAC8718.DAC_Channels[i].upper_bound);
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3302      	adds	r3, #2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	4413      	add	r3, r2
 8000dc0:	7a19      	ldrb	r1, [r3, #8]
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	4413      	add	r3, r2
 8000dcc:	889b      	ldrh	r3, [r3, #4]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	480b      	ldr	r0, [pc, #44]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000dd2:	f7ff fe63 	bl	8000a9c <Set_DAC_Value>
          DAC8718.DAC_Channels[i].state_high = true;
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	3302      	adds	r3, #2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4413      	add	r3, r2
 8000de0:	2201      	movs	r2, #1
 8000de2:	725a      	strb	r2, [r3, #9]
        }
      }
    
    Syncronous_Update();
 8000de4:	f7ff fef9 	bl	8000bda <Syncronous_Update>
    for (int i = 0; i < 6; i++){
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2b05      	cmp	r3, #5
 8000df2:	ddb8      	ble.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x16>
    }

  }


}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2000026c 	.word	0x2000026c
 8000e00:	20000124 	.word	0x20000124
 8000e04:	00000000 	.word	0x00000000

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for (int i = 0; i < 6; i++){
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	e012      	b.n	8000e3a <main+0x32>
		DAC8718.DAC_Channels[i].DAC_number = i;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	b2d9      	uxtb	r1, r3
 8000e18:	4a4d      	ldr	r2, [pc, #308]	; (8000f50 <main+0x148>)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	4413      	add	r3, r2
 8000e22:	460a      	mov	r2, r1
 8000e24:	721a      	strb	r2, [r3, #8]
		DAC8718.DAC_Channels[i].enabled = true;
 8000e26:	4a4a      	ldr	r2, [pc, #296]	; (8000f50 <main+0x148>)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	4413      	add	r3, r2
 8000e30:	2201      	movs	r2, #1
 8000e32:	729a      	strb	r2, [r3, #10]
	for (int i = 0; i < 6; i++){
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3301      	adds	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	dde9      	ble.n	8000e14 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e40:	f000 fcdc 	bl	80017fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e44:	f000 f888 	bl	8000f58 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */


  InitDWTTimer(); // we need this for delay_us
 8000e48:	f7ff ff42 	bl	8000cd0 <InitDWTTimer>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4c:	f000 fa02 	bl	8001254 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e50:	f000 f8ec 	bl	800102c <MX_ADC1_Init>
  MX_SPI4_Init();
 8000e54:	f000 f97c 	bl	8001150 <MX_SPI4_Init>
  MX_I2C1_Init();
 8000e58:	f000 f93a 	bl	80010d0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e5c:	f000 f9ae 	bl	80011bc <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000e60:	f008 f948 	bl	80090f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  DAC_Initialize(&DAC8718);
 8000e64:	483a      	ldr	r0, [pc, #232]	; (8000f50 <main+0x148>)
 8000e66:	f7ff fd51 	bl	800090c <DAC_Initialize>
  HAL_TIM_Base_Start_IT(&htim2);
 8000e6a:	483a      	ldr	r0, [pc, #232]	; (8000f54 <main+0x14c>)
 8000e6c:	f004 f940 	bl	80050f0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float voltage = 0;
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
  float voltage2 = 0;
 8000e76:	f04f 0300 	mov.w	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (voltage = 0; voltage < DAC8718.max_peak2peak; voltage += 0.1){
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	e045      	b.n	8000f10 <main+0x108>
      for(int j = 0; j < 3; j++){
 8000e84:	2300      	movs	r3, #0
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	e00e      	b.n	8000ea8 <main+0xa0>
        Set_Voltage_Peak_to_Peak(&DAC8718, &DAC8718.DAC_Channels[j], &voltage);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	4a2f      	ldr	r2, [pc, #188]	; (8000f50 <main+0x148>)
 8000e92:	4413      	add	r3, r2
 8000e94:	3304      	adds	r3, #4
 8000e96:	f107 0208 	add.w	r2, r7, #8
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	482c      	ldr	r0, [pc, #176]	; (8000f50 <main+0x148>)
 8000e9e:	f7ff fead 	bl	8000bfc <Set_Voltage_Peak_to_Peak>
      for(int j = 0; j < 3; j++){
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	dded      	ble.n	8000e8a <main+0x82>
      }
      voltage2 = DAC8718.max_peak2peak - voltage;
 8000eae:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <main+0x148>)
 8000eb0:	ed93 7a04 	vldr	s14, [r3, #16]
 8000eb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ebc:	edc7 7a01 	vstr	s15, [r7, #4]
      for(int j = 3; j < 6; j++){
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	e00d      	b.n	8000ee2 <main+0xda>
        Set_Voltage_Peak_to_Peak(&DAC8718, &DAC8718.DAC_Channels[j], &voltage2);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3302      	adds	r3, #2
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	4a20      	ldr	r2, [pc, #128]	; (8000f50 <main+0x148>)
 8000ece:	4413      	add	r3, r2
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	1d3a      	adds	r2, r7, #4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481e      	ldr	r0, [pc, #120]	; (8000f50 <main+0x148>)
 8000ed8:	f7ff fe90 	bl	8000bfc <Set_Voltage_Peak_to_Peak>
      for(int j = 3; j < 6; j++){
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b05      	cmp	r3, #5
 8000ee6:	ddee      	ble.n	8000ec6 <main+0xbe>
      }
      HAL_Delay(100);
 8000ee8:	2064      	movs	r0, #100	; 0x64
 8000eea:	f000 fcf9 	bl	80018e0 <HAL_Delay>
	  for (voltage = 0; voltage < DAC8718.max_peak2peak; voltage += 0.1){
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fae1 	bl	80004b8 <__aeabi_f2d>
 8000ef6:	a314      	add	r3, pc, #80	; (adr r3, 8000f48 <main+0x140>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	f7ff f97e 	bl	80001fc <__adddf3>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f7ff fb2e 	bl	8000568 <__aeabi_d2f>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <main+0x148>)
 8000f12:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f16:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f22:	dcaf      	bgt.n	8000e84 <main+0x7c>
    }
    //Set the heater to the opposite state its currently in
    set_heater(!get_heater());
 8000f24:	f7ff fec4 	bl	8000cb0 <get_heater>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	bf14      	ite	ne
 8000f2e:	2301      	movne	r3, #1
 8000f30:	2300      	moveq	r3, #0
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	f083 0301 	eor.w	r3, r3, #1
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fe9b 	bl	8000c7c <set_heater>
	  for (voltage = 0; voltage < DAC8718.max_peak2peak; voltage += 0.1){
 8000f46:	e799      	b.n	8000e7c <main+0x74>
 8000f48:	9999999a 	.word	0x9999999a
 8000f4c:	3fb99999 	.word	0x3fb99999
 8000f50:	20000124 	.word	0x20000124
 8000f54:	2000026c 	.word	0x2000026c

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	; 0x50
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2230      	movs	r2, #48	; 0x30
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f008 fddc 	bl	8009b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	4b28      	ldr	r3, [pc, #160]	; (8001024 <SystemClock_Config+0xcc>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	4a27      	ldr	r2, [pc, #156]	; (8001024 <SystemClock_Config+0xcc>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8c:	4b25      	ldr	r3, [pc, #148]	; (8001024 <SystemClock_Config+0xcc>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a21      	ldr	r2, [pc, #132]	; (8001028 <SystemClock_Config+0xd0>)
 8000fa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <SystemClock_Config+0xd0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fcc:	23a8      	movs	r3, #168	; 0xa8
 8000fce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 0320 	add.w	r3, r7, #32
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 fe63 	bl	8003ca8 <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fe8:	f000 fa54 	bl	8001494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ffc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000ffe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001002:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2105      	movs	r1, #5
 800100a:	4618      	mov	r0, r3
 800100c:	f003 f8c4 	bl	8004198 <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001016:	f000 fa3d 	bl	8001494 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3750      	adds	r7, #80	; 0x50
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001042:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104a:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_ADC1_Init+0x98>)
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <MX_ADC1_Init+0xa0>)
 800106e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001078:	2201      	movs	r2, #1
 800107a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_ADC1_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_ADC1_Init+0x98>)
 8001086:	2201      	movs	r2, #1
 8001088:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108a:	480e      	ldr	r0, [pc, #56]	; (80010c4 <MX_ADC1_Init+0x98>)
 800108c:	f000 fc4c 	bl	8001928 <HAL_ADC_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001096:	f000 f9fd 	bl	8001494 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800109a:	230e      	movs	r3, #14
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800109e:	2301      	movs	r3, #1
 80010a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_ADC1_Init+0x98>)
 80010ac:	f000 fc80 	bl	80019b0 <HAL_ADC_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010b6:	f000 f9ed 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000178 	.word	0x20000178
 80010c8:	40012000 	.word	0x40012000
 80010cc:	0f000001 	.word	0x0f000001

080010d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_I2C1_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <MX_I2C1_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_I2C1_Init+0x74>)
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <MX_I2C1_Init+0x7c>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_I2C1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_I2C1_Init+0x74>)
 80010ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_I2C1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_I2C1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <MX_I2C1_Init+0x74>)
 800110e:	f001 f98f 	bl	8002430 <HAL_I2C_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001118:	f000 f9bc 	bl	8001494 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	4809      	ldr	r0, [pc, #36]	; (8001144 <MX_I2C1_Init+0x74>)
 8001120:	f001 faca 	bl	80026b8 <HAL_I2CEx_ConfigAnalogFilter>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800112a:	f000 f9b3 	bl	8001494 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800112e:	2100      	movs	r1, #0
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_I2C1_Init+0x74>)
 8001132:	f001 fafd 	bl	8002730 <HAL_I2CEx_ConfigDigitalFilter>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800113c:	f000 f9aa 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200001c0 	.word	0x200001c0
 8001148:	40005400 	.word	0x40005400
 800114c:	000186a0 	.word	0x000186a0

08001150 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <MX_SPI4_Init+0x64>)
 8001156:	4a18      	ldr	r2, [pc, #96]	; (80011b8 <MX_SPI4_Init+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_SPI4_Init+0x64>)
 800115c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001160:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_SPI4_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_SPI4_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_SPI4_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_SPI4_Init+0x64>)
 8001176:	2201      	movs	r2, #1
 8001178:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_SPI4_Init+0x64>)
 800117c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001180:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_SPI4_Init+0x64>)
 8001184:	2220      	movs	r2, #32
 8001186:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <MX_SPI4_Init+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_SPI4_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <MX_SPI4_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_SPI4_Init+0x64>)
 800119c:	220a      	movs	r2, #10
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80011a0:	4804      	ldr	r0, [pc, #16]	; (80011b4 <MX_SPI4_Init+0x64>)
 80011a2:	f003 fa05 	bl	80045b0 <HAL_SPI_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80011ac:	f000 f972 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000214 	.word	0x20000214
 80011b8:	40013400 	.word	0x40013400

080011bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	463b      	mov	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_TIM2_Init+0x94>)
 80011da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_TIM2_Init+0x94>)
 80011e2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80011e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_TIM2_Init+0x94>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_TIM2_Init+0x94>)
 80011f0:	2232      	movs	r2, #50	; 0x32
 80011f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_TIM2_Init+0x94>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_TIM2_Init+0x94>)
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_TIM2_Init+0x94>)
 8001202:	f003 ff25 	bl	8005050 <HAL_TIM_Base_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800120c:	f000 f942 	bl	8001494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001214:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4619      	mov	r1, r3
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <MX_TIM2_Init+0x94>)
 800121e:	f004 f8df 	bl	80053e0 <HAL_TIM_ConfigClockSource>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001228:	f000 f934 	bl	8001494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_TIM2_Init+0x94>)
 800123a:	f004 fafb 	bl	8005834 <HAL_TIMEx_MasterConfigSynchronization>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001244:	f000 f926 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2000026c 	.word	0x2000026c

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
 800126e:	4b83      	ldr	r3, [pc, #524]	; (800147c <MX_GPIO_Init+0x228>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a82      	ldr	r2, [pc, #520]	; (800147c <MX_GPIO_Init+0x228>)
 8001274:	f043 0310 	orr.w	r3, r3, #16
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b80      	ldr	r3, [pc, #512]	; (800147c <MX_GPIO_Init+0x228>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	4b7c      	ldr	r3, [pc, #496]	; (800147c <MX_GPIO_Init+0x228>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a7b      	ldr	r2, [pc, #492]	; (800147c <MX_GPIO_Init+0x228>)
 8001290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b79      	ldr	r3, [pc, #484]	; (800147c <MX_GPIO_Init+0x228>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b75      	ldr	r3, [pc, #468]	; (800147c <MX_GPIO_Init+0x228>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a74      	ldr	r2, [pc, #464]	; (800147c <MX_GPIO_Init+0x228>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b72      	ldr	r3, [pc, #456]	; (800147c <MX_GPIO_Init+0x228>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b6e      	ldr	r3, [pc, #440]	; (800147c <MX_GPIO_Init+0x228>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a6d      	ldr	r2, [pc, #436]	; (800147c <MX_GPIO_Init+0x228>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b6b      	ldr	r3, [pc, #428]	; (800147c <MX_GPIO_Init+0x228>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b67      	ldr	r3, [pc, #412]	; (800147c <MX_GPIO_Init+0x228>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a66      	ldr	r2, [pc, #408]	; (800147c <MX_GPIO_Init+0x228>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b64      	ldr	r3, [pc, #400]	; (800147c <MX_GPIO_Init+0x228>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b60      	ldr	r3, [pc, #384]	; (800147c <MX_GPIO_Init+0x228>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a5f      	ldr	r2, [pc, #380]	; (800147c <MX_GPIO_Init+0x228>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b5d      	ldr	r3, [pc, #372]	; (800147c <MX_GPIO_Init+0x228>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|nWakeUp_Pin, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001318:	4859      	ldr	r0, [pc, #356]	; (8001480 <MX_GPIO_Init+0x22c>)
 800131a:	f001 f86f 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Heater_GPIO_Port, Heater_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2120      	movs	r1, #32
 8001322:	4858      	ldr	r0, [pc, #352]	; (8001484 <MX_GPIO_Init+0x230>)
 8001324:	f001 f86a 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, nRst_Pin|nClr_Pin|nCS_Pin, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800132e:	4854      	ldr	r0, [pc, #336]	; (8001480 <MX_GPIO_Init+0x22c>)
 8001330:	f001 f864 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nLDAC_GPIO_Port, nLDAC_Pin, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133a:	4853      	ldr	r0, [pc, #332]	; (8001488 <MX_GPIO_Init+0x234>)
 800133c:	f001 f85e 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2180      	movs	r1, #128	; 0x80
 8001344:	4851      	ldr	r0, [pc, #324]	; (800148c <MX_GPIO_Init+0x238>)
 8001346:	f001 f859 	bl	80023fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800134a:	2308      	movs	r3, #8
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	4847      	ldr	r0, [pc, #284]	; (8001480 <MX_GPIO_Init+0x22c>)
 8001362:	f000 fe87 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001366:	2303      	movs	r3, #3
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001376:	2308      	movs	r3, #8
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4843      	ldr	r0, [pc, #268]	; (8001490 <MX_GPIO_Init+0x23c>)
 8001382:	f000 fe77 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001386:	23f0      	movs	r3, #240	; 0xf0
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001396:	2305      	movs	r3, #5
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	483b      	ldr	r0, [pc, #236]	; (8001490 <MX_GPIO_Init+0x23c>)
 80013a2:	f000 fe67 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : Heater_Pin */
  GPIO_InitStruct.Pin = Heater_Pin;
 80013a6:	2320      	movs	r3, #32
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Heater_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4831      	ldr	r0, [pc, #196]	; (8001484 <MX_GPIO_Init+0x230>)
 80013be:	f000 fe59 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : nWakeUp_Pin nRst_Pin nClr_Pin nCS_Pin */
  GPIO_InitStruct.Pin = nWakeUp_Pin|nRst_Pin|nClr_Pin|nCS_Pin;
 80013c2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	2302      	movs	r3, #2
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	4829      	ldr	r0, [pc, #164]	; (8001480 <MX_GPIO_Init+0x22c>)
 80013dc:	f000 fe4a 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : nLDAC_Pin */
  GPIO_InitStruct.Pin = nLDAC_Pin;
 80013e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ee:	2302      	movs	r3, #2
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nLDAC_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4823      	ldr	r0, [pc, #140]	; (8001488 <MX_GPIO_Init+0x234>)
 80013fa:	f000 fe3b 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013fe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001402:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001410:	230c      	movs	r3, #12
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	481a      	ldr	r0, [pc, #104]	; (8001484 <MX_GPIO_Init+0x230>)
 800141c:	f000 fe2a 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001420:	2301      	movs	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	4815      	ldr	r0, [pc, #84]	; (8001488 <MX_GPIO_Init+0x234>)
 8001434:	f000 fe1e 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001438:	2304      	movs	r3, #4
 800143a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001448:	230c      	movs	r3, #12
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_GPIO_Init+0x234>)
 8001454:	f000 fe0e 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	4807      	ldr	r0, [pc, #28]	; (800148c <MX_GPIO_Init+0x238>)
 8001470:	f000 fe00 	bl	8002074 <HAL_GPIO_Init>

}
 8001474:	bf00      	nop
 8001476:	3730      	adds	r7, #48	; 0x30
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	40021000 	.word	0x40021000
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40020400 	.word	0x40020400
 8001490:	40020000 	.word	0x40020000

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149c:	e7fe      	b.n	800149c <Error_Handler+0x8>
	...

080014a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_MspInit+0x4c>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <HAL_MspInit+0x4c>)
 80014b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b4:	6453      	str	r3, [r2, #68]	; 0x44
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_MspInit+0x4c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_MspInit+0x4c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_MspInit+0x4c>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_MspInit+0x4c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800

080014f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_ADC_MspInit+0x7c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d127      	bne.n	8001562 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_ADC_MspInit+0x80>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a15      	ldr	r2, [pc, #84]	; (8001570 <HAL_ADC_MspInit+0x80>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_ADC_MspInit+0x80>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_ADC_MspInit+0x80>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_ADC_MspInit+0x80>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_ADC_MspInit+0x80>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800154a:	2310      	movs	r3, #16
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154e:	2303      	movs	r3, #3
 8001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <HAL_ADC_MspInit+0x84>)
 800155e:	f000 fd89 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40012000 	.word	0x40012000
 8001570:	40023800 	.word	0x40023800
 8001574:	40020800 	.word	0x40020800

08001578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_I2C_MspInit+0x84>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12c      	bne.n	80015f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a17      	ldr	r2, [pc, #92]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015bc:	2312      	movs	r3, #18
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c8:	2304      	movs	r3, #4
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	480c      	ldr	r0, [pc, #48]	; (8001604 <HAL_I2C_MspInit+0x8c>)
 80015d4:	f000 fd4e 	bl	8002074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_I2C_MspInit+0x88>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	; 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40005400 	.word	0x40005400
 8001600:	40023800 	.word	0x40023800
 8001604:	40020400 	.word	0x40020400

08001608 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_SPI_MspInit+0x94>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d134      	bne.n	8001694 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_SPI_MspInit+0x98>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <HAL_SPI_MspInit+0x98>)
 8001634:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_SPI_MspInit+0x98>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_SPI_MspInit+0x98>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <HAL_SPI_MspInit+0x98>)
 8001650:	f043 0310 	orr.w	r3, r3, #16
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_SPI_MspInit+0x98>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001662:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001674:	2305      	movs	r3, #5
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	4809      	ldr	r0, [pc, #36]	; (80016a4 <HAL_SPI_MspInit+0x9c>)
 8001680:	f000 fcf8 	bl	8002074 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2054      	movs	r0, #84	; 0x54
 800168a:	f000 fc9a 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800168e:	2054      	movs	r0, #84	; 0x54
 8001690:	f000 fcb3 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40013400 	.word	0x40013400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b8:	d115      	bne.n	80016e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_TIM_Base_MspInit+0x48>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <HAL_TIM_Base_MspInit+0x48>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_TIM_Base_MspInit+0x48>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	201c      	movs	r0, #28
 80016dc:	f000 fc71 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016e0:	201c      	movs	r0, #28
 80016e2:	f000 fc8a 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <NMI_Handler+0x4>

080016fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <HardFault_Handler+0x4>

08001700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <MemManage_Handler+0x4>

08001706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <BusFault_Handler+0x4>

0800170c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <UsageFault_Handler+0x4>

08001712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001740:	f000 f8ae 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <TIM2_IRQHandler+0x10>)
 800174e:	f003 fd3f 	bl	80051d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000026c 	.word	0x2000026c

0800175c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <OTG_FS_IRQHandler+0x10>)
 8001762:	f001 f974 	bl	8002a4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20001798 	.word	0x20001798

08001770 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <SPI4_IRQHandler+0x10>)
 8001776:	f003 fa83 	bl	8004c80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000214 	.word	0x20000214

08001784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <SystemInit+0x20>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <SystemInit+0x20>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ae:	490e      	ldr	r1, [pc, #56]	; (80017e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c4:	4c0b      	ldr	r4, [pc, #44]	; (80017f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017d2:	f7ff ffd7 	bl	8001784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f008 f981 	bl	8009adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017da:	f7ff fb15 	bl	8000e08 <main>
  bx  lr    
 80017de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80017ec:	08009be4 	.word	0x08009be4
  ldr r2, =_sbss
 80017f0:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80017f4:	20001ec4 	.word	0x20001ec4

080017f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC_IRQHandler>
	...

080017fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <HAL_Init+0x40>)
 8001806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_Init+0x40>)
 8001812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_Init+0x40>)
 800181e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001824:	2003      	movs	r0, #3
 8001826:	f000 fbc1 	bl	8001fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182a:	200f      	movs	r0, #15
 800182c:	f000 f808 	bl	8001840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001830:	f7ff fe36 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023c00 	.word	0x40023c00

08001840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x54>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_InitTick+0x58>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001856:	fbb3 f3f1 	udiv	r3, r3, r1
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f000 fbd9 	bl	8002016 <HAL_SYSTICK_Config>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00e      	b.n	800188c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d80a      	bhi.n	800188a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f000 fba1 	bl	8001fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001880:	4a06      	ldr	r2, [pc, #24]	; (800189c <HAL_InitTick+0x5c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e000      	b.n	800188c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000008 	.word	0x20000008
 8001898:	20000010 	.word	0x20000010
 800189c:	2000000c 	.word	0x2000000c

080018a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x20>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x24>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <HAL_IncTick+0x24>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000010 	.word	0x20000010
 80018c4:	200002b4 	.word	0x200002b4

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_GetTick+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200002b4 	.word	0x200002b4

080018e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e8:	f7ff ffee 	bl	80018c8 <HAL_GetTick>
 80018ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f8:	d005      	beq.n	8001906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_Delay+0x44>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001906:	bf00      	nop
 8001908:	f7ff ffde 	bl	80018c8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	429a      	cmp	r2, r3
 8001916:	d8f7      	bhi.n	8001908 <HAL_Delay+0x28>
  {
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000010 	.word	0x20000010

08001928 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e033      	b.n	80019a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff fdd2 	bl	80014f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	d118      	bne.n	8001998 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800196e:	f023 0302 	bic.w	r3, r3, #2
 8001972:	f043 0202 	orr.w	r2, r3, #2
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f94a 	bl	8001c14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f023 0303 	bic.w	r3, r3, #3
 800198e:	f043 0201 	orr.w	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
 8001996:	e001      	b.n	800199c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1c>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e113      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x244>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b09      	cmp	r3, #9
 80019da:	d925      	bls.n	8001a28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68d9      	ldr	r1, [r3, #12]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	3b1e      	subs	r3, #30
 80019f2:	2207      	movs	r2, #7
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43da      	mvns	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	400a      	ands	r2, r1
 8001a00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68d9      	ldr	r1, [r3, #12]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	4603      	mov	r3, r0
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4403      	add	r3, r0
 8001a1a:	3b1e      	subs	r3, #30
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	e022      	b.n	8001a6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6919      	ldr	r1, [r3, #16]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	400a      	ands	r2, r1
 8001a4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6919      	ldr	r1, [r3, #16]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	4603      	mov	r3, r0
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4403      	add	r3, r0
 8001a64:	409a      	lsls	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d824      	bhi.n	8001ac0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	3b05      	subs	r3, #5
 8001a88:	221f      	movs	r2, #31
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	400a      	ands	r2, r1
 8001a96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	3b05      	subs	r3, #5
 8001ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	635a      	str	r2, [r3, #52]	; 0x34
 8001abe:	e04c      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b0c      	cmp	r3, #12
 8001ac6:	d824      	bhi.n	8001b12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3b23      	subs	r3, #35	; 0x23
 8001ada:	221f      	movs	r2, #31
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	3b23      	subs	r3, #35	; 0x23
 8001b04:	fa00 f203 	lsl.w	r2, r0, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b10:	e023      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	3b41      	subs	r3, #65	; 0x41
 8001b24:	221f      	movs	r2, #31
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	400a      	ands	r2, r1
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3b41      	subs	r3, #65	; 0x41
 8001b4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b5a:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <HAL_ADC_ConfigChannel+0x250>)
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a28      	ldr	r2, [pc, #160]	; (8001c04 <HAL_ADC_ConfigChannel+0x254>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d10f      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x1d8>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b12      	cmp	r3, #18
 8001b6e:	d10b      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <HAL_ADC_ConfigChannel+0x254>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d12b      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x23a>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <HAL_ADC_ConfigChannel+0x258>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d003      	beq.n	8001ba4 <HAL_ADC_ConfigChannel+0x1f4>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b11      	cmp	r3, #17
 8001ba2:	d122      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <HAL_ADC_ConfigChannel+0x258>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d111      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_ADC_ConfigChannel+0x25c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a11      	ldr	r2, [pc, #68]	; (8001c10 <HAL_ADC_ConfigChannel+0x260>)
 8001bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd0:	0c9a      	lsrs	r2, r3, #18
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bdc:	e002      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f9      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40012300 	.word	0x40012300
 8001c04:	40012000 	.word	0x40012000
 8001c08:	10000012 	.word	0x10000012
 8001c0c:	20000008 	.word	0x20000008
 8001c10:	431bde83 	.word	0x431bde83

08001c14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c1c:	4b79      	ldr	r3, [pc, #484]	; (8001e04 <ADC_Init+0x1f0>)
 8001c1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6859      	ldr	r1, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	021a      	lsls	r2, r3, #8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6899      	ldr	r1, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca6:	4a58      	ldr	r2, [pc, #352]	; (8001e08 <ADC_Init+0x1f4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d022      	beq.n	8001cf2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6899      	ldr	r1, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6899      	ldr	r1, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	e00f      	b.n	8001d12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0202 	bic.w	r2, r2, #2
 8001d20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6899      	ldr	r1, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7e1b      	ldrb	r3, [r3, #24]
 8001d2c:	005a      	lsls	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d01b      	beq.n	8001d78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6859      	ldr	r1, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	035a      	lsls	r2, r3, #13
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	e007      	b.n	8001d88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	051a      	lsls	r2, r3, #20
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6899      	ldr	r1, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dca:	025a      	lsls	r2, r3, #9
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6899      	ldr	r1, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	029a      	lsls	r2, r3, #10
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	609a      	str	r2, [r3, #8]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40012300 	.word	0x40012300
 8001e08:	0f000001 	.word	0x0f000001

08001e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3e:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	60d3      	str	r3, [r2, #12]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <__NVIC_GetPriorityGrouping+0x18>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	f003 0307 	and.w	r3, r3, #7
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	db0b      	blt.n	8001e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	f003 021f 	and.w	r2, r3, #31
 8001e88:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <__NVIC_EnableIRQ+0x38>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	2001      	movs	r0, #1
 8001e92:	fa00 f202 	lsl.w	r2, r0, r2
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000e100 	.word	0xe000e100

08001eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	6039      	str	r1, [r7, #0]
 8001eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	db0a      	blt.n	8001ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	490c      	ldr	r1, [pc, #48]	; (8001ef8 <__NVIC_SetPriority+0x4c>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	0112      	lsls	r2, r2, #4
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	440b      	add	r3, r1
 8001ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed4:	e00a      	b.n	8001eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4908      	ldr	r1, [pc, #32]	; (8001efc <__NVIC_SetPriority+0x50>)
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	3b04      	subs	r3, #4
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	440b      	add	r3, r1
 8001eea:	761a      	strb	r2, [r3, #24]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000e100 	.word	0xe000e100
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f1c3 0307 	rsb	r3, r3, #7
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	bf28      	it	cs
 8001f1e:	2304      	movcs	r3, #4
 8001f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3304      	adds	r3, #4
 8001f26:	2b06      	cmp	r3, #6
 8001f28:	d902      	bls.n	8001f30 <NVIC_EncodePriority+0x30>
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3b03      	subs	r3, #3
 8001f2e:	e000      	b.n	8001f32 <NVIC_EncodePriority+0x32>
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	f04f 32ff 	mov.w	r2, #4294967295
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	401a      	ands	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f48:	f04f 31ff 	mov.w	r1, #4294967295
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	43d9      	mvns	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	4313      	orrs	r3, r2
         );
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3724      	adds	r7, #36	; 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f78:	d301      	bcc.n	8001f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00f      	b.n	8001f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <SysTick_Config+0x40>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f86:	210f      	movs	r1, #15
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f7ff ff8e 	bl	8001eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <SysTick_Config+0x40>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <SysTick_Config+0x40>)
 8001f98:	2207      	movs	r2, #7
 8001f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	e000e010 	.word	0xe000e010

08001fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ff29 	bl	8001e0c <__NVIC_SetPriorityGrouping>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd4:	f7ff ff3e 	bl	8001e54 <__NVIC_GetPriorityGrouping>
 8001fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	6978      	ldr	r0, [r7, #20]
 8001fe0:	f7ff ff8e 	bl	8001f00 <NVIC_EncodePriority>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff5d 	bl	8001eac <__NVIC_SetPriority>
}
 8001ff2:	bf00      	nop
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff31 	bl	8001e70 <__NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffa2 	bl	8001f68 <SysTick_Config>
 8002024:	4603      	mov	r3, r0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d004      	beq.n	800204c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e00c      	b.n	8002066 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2205      	movs	r2, #5
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e177      	b.n	8002380 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002090:	2201      	movs	r2, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	f040 8166 	bne.w	800237a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d005      	beq.n	80020c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d130      	bne.n	8002128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 0201 	and.w	r2, r3, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b03      	cmp	r3, #3
 8002132:	d017      	beq.n	8002164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d123      	bne.n	80021b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80c0 	beq.w	800237a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b66      	ldr	r3, [pc, #408]	; (8002398 <HAL_GPIO_Init+0x324>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a65      	ldr	r2, [pc, #404]	; (8002398 <HAL_GPIO_Init+0x324>)
 8002204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b63      	ldr	r3, [pc, #396]	; (8002398 <HAL_GPIO_Init+0x324>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002216:	4a61      	ldr	r2, [pc, #388]	; (800239c <HAL_GPIO_Init+0x328>)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	220f      	movs	r2, #15
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a58      	ldr	r2, [pc, #352]	; (80023a0 <HAL_GPIO_Init+0x32c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d037      	beq.n	80022b2 <HAL_GPIO_Init+0x23e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a57      	ldr	r2, [pc, #348]	; (80023a4 <HAL_GPIO_Init+0x330>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d031      	beq.n	80022ae <HAL_GPIO_Init+0x23a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a56      	ldr	r2, [pc, #344]	; (80023a8 <HAL_GPIO_Init+0x334>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d02b      	beq.n	80022aa <HAL_GPIO_Init+0x236>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a55      	ldr	r2, [pc, #340]	; (80023ac <HAL_GPIO_Init+0x338>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d025      	beq.n	80022a6 <HAL_GPIO_Init+0x232>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a54      	ldr	r2, [pc, #336]	; (80023b0 <HAL_GPIO_Init+0x33c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01f      	beq.n	80022a2 <HAL_GPIO_Init+0x22e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a53      	ldr	r2, [pc, #332]	; (80023b4 <HAL_GPIO_Init+0x340>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d019      	beq.n	800229e <HAL_GPIO_Init+0x22a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a52      	ldr	r2, [pc, #328]	; (80023b8 <HAL_GPIO_Init+0x344>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0x226>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a51      	ldr	r2, [pc, #324]	; (80023bc <HAL_GPIO_Init+0x348>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00d      	beq.n	8002296 <HAL_GPIO_Init+0x222>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a50      	ldr	r2, [pc, #320]	; (80023c0 <HAL_GPIO_Init+0x34c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <HAL_GPIO_Init+0x21e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4f      	ldr	r2, [pc, #316]	; (80023c4 <HAL_GPIO_Init+0x350>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_GPIO_Init+0x21a>
 800228a:	2309      	movs	r3, #9
 800228c:	e012      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 800228e:	230a      	movs	r3, #10
 8002290:	e010      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 8002292:	2308      	movs	r3, #8
 8002294:	e00e      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 8002296:	2307      	movs	r3, #7
 8002298:	e00c      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 800229a:	2306      	movs	r3, #6
 800229c:	e00a      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 800229e:	2305      	movs	r3, #5
 80022a0:	e008      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022a2:	2304      	movs	r3, #4
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022a6:	2303      	movs	r3, #3
 80022a8:	e004      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_GPIO_Init+0x240>
 80022b2:	2300      	movs	r3, #0
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	f002 0203 	and.w	r2, r2, #3
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	4093      	lsls	r3, r2
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c4:	4935      	ldr	r1, [pc, #212]	; (800239c <HAL_GPIO_Init+0x328>)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3302      	adds	r3, #2
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_GPIO_Init+0x354>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022f6:	4a34      	ldr	r2, [pc, #208]	; (80023c8 <HAL_GPIO_Init+0x354>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022fc:	4b32      	ldr	r3, [pc, #200]	; (80023c8 <HAL_GPIO_Init+0x354>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002320:	4a29      	ldr	r2, [pc, #164]	; (80023c8 <HAL_GPIO_Init+0x354>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002326:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <HAL_GPIO_Init+0x354>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800234a:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <HAL_GPIO_Init+0x354>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_GPIO_Init+0x354>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <HAL_GPIO_Init+0x354>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3301      	adds	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b0f      	cmp	r3, #15
 8002384:	f67f ae84 	bls.w	8002090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	40013800 	.word	0x40013800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020800 	.word	0x40020800
 80023ac:	40020c00 	.word	0x40020c00
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40021400 	.word	0x40021400
 80023b8:	40021800 	.word	0x40021800
 80023bc:	40021c00 	.word	0x40021c00
 80023c0:	40022000 	.word	0x40022000
 80023c4:	40022400 	.word	0x40022400
 80023c8:	40013c00 	.word	0x40013c00

080023cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	887b      	ldrh	r3, [r7, #2]
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e001      	b.n	80023ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
 8002408:	4613      	mov	r3, r2
 800240a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002418:	e003      	b.n	8002422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800241a:	887b      	ldrh	r3, [r7, #2]
 800241c:	041a      	lsls	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	619a      	str	r2, [r3, #24]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e12b      	b.n	800269a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff f88e 	bl	8001578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2224      	movs	r2, #36	; 0x24
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002482:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002492:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002494:	f002 f878 	bl	8004588 <HAL_RCC_GetPCLK1Freq>
 8002498:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4a81      	ldr	r2, [pc, #516]	; (80026a4 <HAL_I2C_Init+0x274>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d807      	bhi.n	80024b4 <HAL_I2C_Init+0x84>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4a80      	ldr	r2, [pc, #512]	; (80026a8 <HAL_I2C_Init+0x278>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	bf94      	ite	ls
 80024ac:	2301      	movls	r3, #1
 80024ae:	2300      	movhi	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	e006      	b.n	80024c2 <HAL_I2C_Init+0x92>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a7d      	ldr	r2, [pc, #500]	; (80026ac <HAL_I2C_Init+0x27c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	bf94      	ite	ls
 80024bc:	2301      	movls	r3, #1
 80024be:	2300      	movhi	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0e7      	b.n	800269a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4a78      	ldr	r2, [pc, #480]	; (80026b0 <HAL_I2C_Init+0x280>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	0c9b      	lsrs	r3, r3, #18
 80024d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4a6a      	ldr	r2, [pc, #424]	; (80026a4 <HAL_I2C_Init+0x274>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d802      	bhi.n	8002504 <HAL_I2C_Init+0xd4>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	3301      	adds	r3, #1
 8002502:	e009      	b.n	8002518 <HAL_I2C_Init+0xe8>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	4a69      	ldr	r2, [pc, #420]	; (80026b4 <HAL_I2C_Init+0x284>)
 8002510:	fba2 2303 	umull	r2, r3, r2, r3
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	3301      	adds	r3, #1
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	430b      	orrs	r3, r1
 800251e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800252a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	495c      	ldr	r1, [pc, #368]	; (80026a4 <HAL_I2C_Init+0x274>)
 8002534:	428b      	cmp	r3, r1
 8002536:	d819      	bhi.n	800256c <HAL_I2C_Init+0x13c>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1e59      	subs	r1, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fbb1 f3f3 	udiv	r3, r1, r3
 8002546:	1c59      	adds	r1, r3, #1
 8002548:	f640 73fc 	movw	r3, #4092	; 0xffc
 800254c:	400b      	ands	r3, r1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_I2C_Init+0x138>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1e59      	subs	r1, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002560:	3301      	adds	r3, #1
 8002562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002566:	e051      	b.n	800260c <HAL_I2C_Init+0x1dc>
 8002568:	2304      	movs	r3, #4
 800256a:	e04f      	b.n	800260c <HAL_I2C_Init+0x1dc>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d111      	bne.n	8002598 <HAL_I2C_Init+0x168>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1e58      	subs	r0, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	440b      	add	r3, r1
 8002582:	fbb0 f3f3 	udiv	r3, r0, r3
 8002586:	3301      	adds	r3, #1
 8002588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e012      	b.n	80025be <HAL_I2C_Init+0x18e>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1e58      	subs	r0, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	0099      	lsls	r1, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Init+0x196>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e022      	b.n	800260c <HAL_I2C_Init+0x1dc>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10e      	bne.n	80025ec <HAL_I2C_Init+0x1bc>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1e58      	subs	r0, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6859      	ldr	r1, [r3, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	440b      	add	r3, r1
 80025dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ea:	e00f      	b.n	800260c <HAL_I2C_Init+0x1dc>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e58      	subs	r0, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	0099      	lsls	r1, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002602:	3301      	adds	r3, #1
 8002604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002608:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	6809      	ldr	r1, [r1, #0]
 8002610:	4313      	orrs	r3, r2
 8002612:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800263a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6911      	ldr	r1, [r2, #16]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68d2      	ldr	r2, [r2, #12]
 8002646:	4311      	orrs	r1, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	430b      	orrs	r3, r1
 800264e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	000186a0 	.word	0x000186a0
 80026a8:	001e847f 	.word	0x001e847f
 80026ac:	003d08ff 	.word	0x003d08ff
 80026b0:	431bde83 	.word	0x431bde83
 80026b4:	10624dd3 	.word	0x10624dd3

080026b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b20      	cmp	r3, #32
 80026cc:	d129      	bne.n	8002722 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2224      	movs	r2, #36	; 0x24
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0201 	bic.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0210 	bic.w	r2, r2, #16
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e000      	b.n	8002724 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002722:	2302      	movs	r3, #2
  }
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b20      	cmp	r3, #32
 8002748:	d12a      	bne.n	80027a0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2224      	movs	r2, #36	; 0x24
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800276a:	89fb      	ldrh	r3, [r7, #14]
 800276c:	f023 030f 	bic.w	r3, r3, #15
 8002770:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	b29a      	uxth	r2, r3
 8002776:	89fb      	ldrh	r3, [r7, #14]
 8002778:	4313      	orrs	r3, r2
 800277a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	89fa      	ldrh	r2, [r7, #14]
 8002782:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	e000      	b.n	80027a2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80027a0:	2302      	movs	r3, #2
  }
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b0:	b08f      	sub	sp, #60	; 0x3c
 80027b2:	af0a      	add	r7, sp, #40	; 0x28
 80027b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e10f      	b.n	80029e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f006 fe6a 	bl	80094b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2203      	movs	r2, #3
 80027e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 f9bd 	bl	8005b7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	687e      	ldr	r6, [r7, #4]
 800280c:	466d      	mov	r5, sp
 800280e:	f106 0410 	add.w	r4, r6, #16
 8002812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800281a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800281e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002822:	1d33      	adds	r3, r6, #4
 8002824:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002826:	6838      	ldr	r0, [r7, #0]
 8002828:	f003 f894 	bl	8005954 <USB_CoreInit>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2202      	movs	r2, #2
 8002836:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0d0      	b.n	80029e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f003 f9ab 	bl	8005ba0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284a:	2300      	movs	r3, #0
 800284c:	73fb      	strb	r3, [r7, #15]
 800284e:	e04a      	b.n	80028e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	333d      	adds	r3, #61	; 0x3d
 8002860:	2201      	movs	r2, #1
 8002862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002864:	7bfa      	ldrb	r2, [r7, #15]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	333c      	adds	r3, #60	; 0x3c
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	b298      	uxth	r0, r3
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	3344      	adds	r3, #68	; 0x44
 800288c:	4602      	mov	r2, r0
 800288e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	3340      	adds	r3, #64	; 0x40
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	3348      	adds	r3, #72	; 0x48
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	334c      	adds	r3, #76	; 0x4c
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4413      	add	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	3354      	adds	r3, #84	; 0x54
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	3301      	adds	r3, #1
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	7bfa      	ldrb	r2, [r7, #15]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d3af      	bcc.n	8002850 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f0:	2300      	movs	r3, #0
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	e044      	b.n	8002980 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	3301      	adds	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	429a      	cmp	r2, r3
 8002988:	d3b5      	bcc.n	80028f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	687e      	ldr	r6, [r7, #4]
 8002992:	466d      	mov	r5, sp
 8002994:	f106 0410 	add.w	r4, r6, #16
 8002998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800299a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800299e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80029a8:	1d33      	adds	r3, r6, #4
 80029aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ac:	6838      	ldr	r0, [r7, #0]
 80029ae:	f003 f943 	bl	8005c38 <USB_DevInit>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e00d      	b.n	80029e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f004 fa92 	bl	8006f02 <USB_DevDisconnect>

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_PCD_Start+0x1c>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e020      	b.n	8002a46 <HAL_PCD_Start+0x5e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d109      	bne.n	8002a28 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d005      	beq.n	8002a28 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 f895 	bl	8005b5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f004 fa42 	bl	8006ec0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a4e:	b590      	push	{r4, r7, lr}
 8002a50:	b08d      	sub	sp, #52	; 0x34
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f004 fb00 	bl	800706a <USB_GetMode>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f040 848a 	bne.w	8003386 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f004 fa64 	bl	8006f44 <USB_ReadInterrupts>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8480 	beq.w	8003384 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f004 fa51 	bl	8006f44 <USB_ReadInterrupts>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d107      	bne.n	8002abc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f002 0202 	and.w	r2, r2, #2
 8002aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f004 fa3f 	bl	8006f44 <USB_ReadInterrupts>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d161      	bne.n	8002b94 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0210 	bic.w	r2, r2, #16
 8002ade:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f003 020f 	and.w	r2, r3, #15
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	4413      	add	r3, r2
 8002afc:	3304      	adds	r3, #4
 8002afe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	0c5b      	lsrs	r3, r3, #17
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d124      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d035      	beq.n	8002b84 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	6a38      	ldr	r0, [r7, #32]
 8002b2c:	f004 f876 	bl	8006c1c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	091b      	lsrs	r3, r3, #4
 8002b38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b3c:	441a      	add	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	6a1a      	ldr	r2, [r3, #32]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b4e:	441a      	add	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	621a      	str	r2, [r3, #32]
 8002b54:	e016      	b.n	8002b84 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	0c5b      	lsrs	r3, r3, #17
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	2b06      	cmp	r3, #6
 8002b60:	d110      	bne.n	8002b84 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b68:	2208      	movs	r2, #8
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6a38      	ldr	r0, [r7, #32]
 8002b6e:	f004 f855 	bl	8006c1c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	6a1a      	ldr	r2, [r3, #32]
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b7e:	441a      	add	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0210 	orr.w	r2, r2, #16
 8002b92:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f004 f9d3 	bl	8006f44 <USB_ReadInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ba8:	f040 80a7 	bne.w	8002cfa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f004 f9d8 	bl	8006f6a <USB_ReadDevAllOutEpInterrupt>
 8002bba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002bbc:	e099      	b.n	8002cf2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 808e 	beq.w	8002ce6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 f9fc 	bl	8006fd2 <USB_ReadDevOutEPInterrupt>
 8002bda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00c      	beq.n	8002c00 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fec2 	bl	8003984 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00c      	beq.n	8002c24 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c16:	461a      	mov	r2, r3
 8002c18:	2308      	movs	r3, #8
 8002c1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 ff98 	bl	8003b54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d030      	beq.n	8002cac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c52:	2b80      	cmp	r3, #128	; 0x80
 8002c54:	d109      	bne.n	8002c6a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c68:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	78db      	ldrb	r3, [r3, #3]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d108      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	4619      	mov	r1, r3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f006 fd13 	bl	80096c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2302      	movs	r3, #2
 8002caa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	2320      	movs	r3, #32
 8002cc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ce4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	3301      	adds	r3, #1
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f47f af62 	bne.w	8002bbe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 f920 	bl	8006f44 <USB_ReadInterrupts>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d0e:	f040 80db 	bne.w	8002ec8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f004 f941 	bl	8006f9e <USB_ReadDevAllInEpInterrupt>
 8002d1c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d22:	e0cd      	b.n	8002ec0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80c2 	beq.w	8002eb4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f004 f967 	bl	800700e <USB_ReadDevInEPInterrupt>
 8002d40:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d057      	beq.n	8002dfc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	2201      	movs	r2, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69f9      	ldr	r1, [r7, #28]
 8002d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	2301      	movs	r3, #1
 8002d80:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d132      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	334c      	adds	r3, #76	; 0x4c
 8002d9a:	6819      	ldr	r1, [r3, #0]
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4403      	add	r3, r0
 8002daa:	3348      	adds	r3, #72	; 0x48
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4419      	add	r1, r3
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4403      	add	r3, r0
 8002dbe:	334c      	adds	r3, #76	; 0x4c
 8002dc0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d113      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x3a2>
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3354      	adds	r3, #84	; 0x54
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d108      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002de8:	461a      	mov	r2, r3
 8002dea:	2101      	movs	r1, #1
 8002dec:	f004 f96e 	bl	80070cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	4619      	mov	r1, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f006 fbdd 	bl	80095b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e12:	461a      	mov	r2, r3
 8002e14:	2308      	movs	r3, #8
 8002e16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2310      	movs	r3, #16
 8002e32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2340      	movs	r3, #64	; 0x40
 8002e4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d023      	beq.n	8002ea2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e5c:	6a38      	ldr	r0, [r7, #32]
 8002e5e:	f003 f84f 	bl	8005f00 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	3338      	adds	r3, #56	; 0x38
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	78db      	ldrb	r3, [r3, #3]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d108      	bne.n	8002e90 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2200      	movs	r2, #0
 8002e82:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f006 fc2a 	bl	80096e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002eac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fcdb 	bl	800386a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f47f af2e 	bne.w	8002d24 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f004 f839 	bl	8006f44 <USB_ReadInterrupts>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002edc:	d122      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d108      	bne.n	8002f0e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f04:	2100      	movs	r1, #0
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fec2 	bl	8003c90 <HAL_PCDEx_LPM_Callback>
 8002f0c:	e002      	b.n	8002f14 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f006 fbc8 	bl	80096a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f004 f80b 	bl	8006f44 <USB_ReadInterrupts>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f38:	d112      	bne.n	8002f60 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d102      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f006 fb84 	bl	8009658 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f5e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f003 ffed 	bl	8006f44 <USB_ReadInterrupts>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	f040 80b7 	bne.w	80030e6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2110      	movs	r1, #16
 8002f92:	4618      	mov	r0, r3
 8002f94:	f002 ffb4 	bl	8005f00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f9c:	e046      	b.n	800302c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002faa:	461a      	mov	r2, r3
 8002fac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fb0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fc2:	0151      	lsls	r1, r2, #5
 8002fc4:	69fa      	ldr	r2, [r7, #28]
 8002fc6:	440a      	add	r2, r1
 8002fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002fcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002fd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fe4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff6:	0151      	lsls	r1, r2, #5
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	440a      	add	r2, r1
 8002ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003000:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003004:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003016:	0151      	lsls	r1, r2, #5
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	440a      	add	r2, r1
 800301c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003020:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003024:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	3301      	adds	r3, #1
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003032:	429a      	cmp	r2, r3
 8003034:	d3b3      	bcc.n	8002f9e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003044:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003048:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003062:	f043 030b 	orr.w	r3, r3, #11
 8003066:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003078:	f043 030b 	orr.w	r3, r3, #11
 800307c:	6453      	str	r3, [r2, #68]	; 0x44
 800307e:	e015      	b.n	80030ac <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800308e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003092:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003096:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030a6:	f043 030b 	orr.w	r3, r3, #11
 80030aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80030be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030d0:	461a      	mov	r2, r3
 80030d2:	f003 fffb 	bl	80070cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f003 ff2a 	bl	8006f44 <USB_ReadInterrupts>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fa:	d124      	bne.n	8003146 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f003 ffc0 	bl	8007086 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f002 ff75 	bl	8005ffa <USB_GetDevSpeed>
 8003110:	4603      	mov	r3, r0
 8003112:	461a      	mov	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681c      	ldr	r4, [r3, #0]
 800311c:	f001 fa28 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 8003120:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003126:	b2db      	uxtb	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	4620      	mov	r0, r4
 800312c:	f002 fc74 	bl	8005a18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f006 fa68 	bl	8009606 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003144:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f003 fefa 	bl	8006f44 <USB_ReadInterrupts>
 8003150:	4603      	mov	r3, r0
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b08      	cmp	r3, #8
 8003158:	d10a      	bne.n	8003170 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f006 fa45 	bl	80095ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f002 0208 	and.w	r2, r2, #8
 800316e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f003 fee5 	bl	8006f44 <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003180:	2b80      	cmp	r3, #128	; 0x80
 8003182:	d122      	bne.n	80031ca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003190:	2301      	movs	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
 8003194:	e014      	b.n	80031c0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d105      	bne.n	80031ba <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	4619      	mov	r1, r3
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fb27 	bl	8003808 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	3301      	adds	r3, #1
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d3e5      	bcc.n	8003196 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f003 feb8 	bl	8006f44 <USB_ReadInterrupts>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031de:	d13b      	bne.n	8003258 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031e0:	2301      	movs	r3, #1
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
 80031e4:	e02b      	b.n	800323e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	3340      	adds	r3, #64	; 0x40
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d115      	bne.n	8003238 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800320c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800320e:	2b00      	cmp	r3, #0
 8003210:	da12      	bge.n	8003238 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003216:	4613      	mov	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	333f      	adds	r3, #63	; 0x3f
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800322e:	b2db      	uxtb	r3, r3
 8003230:	4619      	mov	r1, r3
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fae8 	bl	8003808 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	3301      	adds	r3, #1
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003244:	429a      	cmp	r2, r3
 8003246:	d3ce      	bcc.n	80031e6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003256:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f003 fe71 	bl	8006f44 <USB_ReadInterrupts>
 8003262:	4603      	mov	r3, r0
 8003264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003268:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800326c:	d155      	bne.n	800331a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800326e:	2301      	movs	r3, #1
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
 8003272:	e045      	b.n	8003300 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d12e      	bne.n	80032fa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800329c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800329e:	2b00      	cmp	r3, #0
 80032a0:	da2b      	bge.n	80032fa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80032ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d121      	bne.n	80032fa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f6:	6053      	str	r3, [r2, #4]
            break;
 80032f8:	e007      	b.n	800330a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	3301      	adds	r3, #1
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003306:	429a      	cmp	r2, r3
 8003308:	d3b4      	bcc.n	8003274 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003318:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f003 fe10 	bl	8006f44 <USB_ReadInterrupts>
 8003324:	4603      	mov	r3, r0
 8003326:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800332a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332e:	d10a      	bne.n	8003346 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f006 f9e9 	bl	8009708 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695a      	ldr	r2, [r3, #20]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f003 fdfa 	bl	8006f44 <USB_ReadInterrupts>
 8003350:	4603      	mov	r3, r0
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b04      	cmp	r3, #4
 8003358:	d115      	bne.n	8003386 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f006 f9d9 	bl	8009724 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	e000      	b.n	8003386 <HAL_PCD_IRQHandler+0x938>
      return;
 8003384:	bf00      	nop
    }
  }
}
 8003386:	3734      	adds	r7, #52	; 0x34
 8003388:	46bd      	mov	sp, r7
 800338a:	bd90      	pop	{r4, r7, pc}

0800338c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_PCD_SetAddress+0x1a>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e013      	b.n	80033ce <HAL_PCD_SetAddress+0x42>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f003 fd58 	bl	8006e74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	4608      	mov	r0, r1
 80033e0:	4611      	mov	r1, r2
 80033e2:	461a      	mov	r2, r3
 80033e4:	4603      	mov	r3, r0
 80033e6:	70fb      	strb	r3, [r7, #3]
 80033e8:	460b      	mov	r3, r1
 80033ea:	803b      	strh	r3, [r7, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	da0f      	bge.n	800341c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	f003 020f 	and.w	r2, r3, #15
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	3338      	adds	r3, #56	; 0x38
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	3304      	adds	r3, #4
 8003412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	705a      	strb	r2, [r3, #1]
 800341a:	e00f      	b.n	800343c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	f003 020f 	and.w	r2, r3, #15
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	3304      	adds	r3, #4
 8003434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	b2da      	uxtb	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003448:	883a      	ldrh	r2, [r7, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	78ba      	ldrb	r2, [r7, #2]
 8003452:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	785b      	ldrb	r3, [r3, #1]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003466:	78bb      	ldrb	r3, [r7, #2]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d102      	bne.n	8003472 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_PCD_EP_Open+0xaa>
 800347c:	2302      	movs	r3, #2
 800347e:	e00e      	b.n	800349e <HAL_PCD_EP_Open+0xc8>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68f9      	ldr	r1, [r7, #12]
 800348e:	4618      	mov	r0, r3
 8003490:	f002 fdd8 	bl	8006044 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800349c:	7afb      	ldrb	r3, [r7, #11]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	da0f      	bge.n	80034da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	f003 020f 	and.w	r2, r3, #15
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	3338      	adds	r3, #56	; 0x38
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	3304      	adds	r3, #4
 80034d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	705a      	strb	r2, [r3, #1]
 80034d8:	e00f      	b.n	80034fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	f003 020f 	and.w	r2, r3, #15
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	3304      	adds	r3, #4
 80034f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	b2da      	uxtb	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_PCD_EP_Close+0x6e>
 8003510:	2302      	movs	r3, #2
 8003512:	e00e      	b.n	8003532 <HAL_PCD_EP_Close+0x8c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68f9      	ldr	r1, [r7, #12]
 8003522:	4618      	mov	r0, r3
 8003524:	f002 fe16 	bl	8006154 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	460b      	mov	r3, r1
 8003548:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800354a:	7afb      	ldrb	r3, [r7, #11]
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	3304      	adds	r3, #4
 8003562:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2200      	movs	r2, #0
 8003574:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2200      	movs	r2, #0
 800357a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800357c:	7afb      	ldrb	r3, [r7, #11]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	b2da      	uxtb	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d102      	bne.n	8003596 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003596:	7afb      	ldrb	r3, [r7, #11]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	6979      	ldr	r1, [r7, #20]
 80035ae:	f003 f8f5 	bl	800679c <USB_EP0StartXfer>
 80035b2:	e008      	b.n	80035c6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	6979      	ldr	r1, [r7, #20]
 80035c2:	f002 fea3 	bl	800630c <USB_EPStartXfer>
  }

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	f003 020f 	and.w	r2, r3, #15
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	607a      	str	r2, [r7, #4]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	460b      	mov	r3, r1
 800360e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003610:	7afb      	ldrb	r3, [r7, #11]
 8003612:	f003 020f 	and.w	r2, r3, #15
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	3338      	adds	r3, #56	; 0x38
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	3304      	adds	r3, #4
 8003626:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2201      	movs	r2, #1
 800363e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003640:	7afb      	ldrb	r3, [r7, #11]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	b2da      	uxtb	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d102      	bne.n	800365a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	2b00      	cmp	r3, #0
 8003662:	d109      	bne.n	8003678 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	6979      	ldr	r1, [r7, #20]
 8003672:	f003 f893 	bl	800679c <USB_EP0StartXfer>
 8003676:	e008      	b.n	800368a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	6979      	ldr	r1, [r7, #20]
 8003686:	f002 fe41 	bl	800630c <USB_EPStartXfer>
  }

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	f003 020f 	and.w	r2, r3, #15
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d901      	bls.n	80036b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e050      	b.n	8003754 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	da0f      	bge.n	80036da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	f003 020f 	and.w	r2, r3, #15
 80036c0:	4613      	mov	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	3338      	adds	r3, #56	; 0x38
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	3304      	adds	r3, #4
 80036d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	705a      	strb	r2, [r3, #1]
 80036d8:	e00d      	b.n	80036f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	3304      	adds	r3, #4
 80036ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_PCD_EP_SetStall+0x82>
 8003712:	2302      	movs	r3, #2
 8003714:	e01e      	b.n	8003754 <HAL_PCD_EP_SetStall+0xc0>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68f9      	ldr	r1, [r7, #12]
 8003724:	4618      	mov	r0, r3
 8003726:	f003 fad1 	bl	8006ccc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	b2d9      	uxtb	r1, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003744:	461a      	mov	r2, r3
 8003746:	f003 fcc1 	bl	80070cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	f003 020f 	and.w	r2, r3, #15
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	429a      	cmp	r2, r3
 8003774:	d901      	bls.n	800377a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e042      	b.n	8003800 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800377a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800377e:	2b00      	cmp	r3, #0
 8003780:	da0f      	bge.n	80037a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	f003 020f 	and.w	r2, r3, #15
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	3338      	adds	r3, #56	; 0x38
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	3304      	adds	r3, #4
 8003798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	705a      	strb	r2, [r3, #1]
 80037a0:	e00f      	b.n	80037c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	f003 020f 	and.w	r2, r3, #15
 80037a8:	4613      	mov	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	3304      	adds	r3, #4
 80037ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_PCD_EP_ClrStall+0x86>
 80037de:	2302      	movs	r3, #2
 80037e0:	e00e      	b.n	8003800 <HAL_PCD_EP_ClrStall+0xa4>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68f9      	ldr	r1, [r7, #12]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f003 fad9 	bl	8006da8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003814:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003818:	2b00      	cmp	r3, #0
 800381a:	da0c      	bge.n	8003836 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	f003 020f 	and.w	r2, r3, #15
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	3338      	adds	r3, #56	; 0x38
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	3304      	adds	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e00c      	b.n	8003850 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	f003 020f 	and.w	r2, r3, #15
 800383c:	4613      	mov	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4413      	add	r3, r2
 800384c:	3304      	adds	r3, #4
 800384e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68f9      	ldr	r1, [r7, #12]
 8003856:	4618      	mov	r0, r3
 8003858:	f003 f8f8 	bl	8006a4c <USB_EPStopXfer>
 800385c:	4603      	mov	r3, r0
 800385e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003860:	7afb      	ldrb	r3, [r7, #11]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b08a      	sub	sp, #40	; 0x28
 800386e:	af02      	add	r7, sp, #8
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	3338      	adds	r3, #56	; 0x38
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4413      	add	r3, r2
 800388e:	3304      	adds	r3, #4
 8003890:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1a      	ldr	r2, [r3, #32]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	429a      	cmp	r2, r3
 800389c:	d901      	bls.n	80038a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e06c      	b.n	800397c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d902      	bls.n	80038be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	3303      	adds	r3, #3
 80038c2:	089b      	lsrs	r3, r3, #2
 80038c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038c6:	e02b      	b.n	8003920 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d902      	bls.n	80038e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	3303      	adds	r3, #3
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6919      	ldr	r1, [r3, #16]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	4603      	mov	r3, r0
 8003902:	6978      	ldr	r0, [r7, #20]
 8003904:	f003 f94c 	bl	8006ba0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	441a      	add	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a1a      	ldr	r2, [r3, #32]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	441a      	add	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	b29b      	uxth	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	429a      	cmp	r2, r3
 8003934:	d809      	bhi.n	800394a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a1a      	ldr	r2, [r3, #32]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800393e:	429a      	cmp	r2, r3
 8003940:	d203      	bcs.n	800394a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1be      	bne.n	80038c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	429a      	cmp	r2, r3
 8003954:	d811      	bhi.n	800397a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	2201      	movs	r2, #1
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	43db      	mvns	r3, r3
 8003970:	6939      	ldr	r1, [r7, #16]
 8003972:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003976:	4013      	ands	r3, r2
 8003978:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	333c      	adds	r3, #60	; 0x3c
 800399c:	3304      	adds	r3, #4
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d17b      	bne.n	8003ab2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d015      	beq.n	80039f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	4a61      	ldr	r2, [pc, #388]	; (8003b4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	f240 80b9 	bls.w	8003b40 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80b3 	beq.w	8003b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e6:	461a      	mov	r2, r3
 80039e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ec:	6093      	str	r3, [r2, #8]
 80039ee:	e0a7      	b.n	8003b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a06:	461a      	mov	r2, r3
 8003a08:	2320      	movs	r3, #32
 8003a0a:	6093      	str	r3, [r2, #8]
 8003a0c:	e098      	b.n	8003b40 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f040 8093 	bne.w	8003b40 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	4a4b      	ldr	r2, [pc, #300]	; (8003b4c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d90f      	bls.n	8003a42 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3e:	6093      	str	r3, [r2, #8]
 8003a40:	e07e      	b.n	8003b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4413      	add	r3, r2
 8003a54:	3304      	adds	r3, #4
 8003a56:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	0159      	lsls	r1, r3, #5
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	440b      	add	r3, r1
 8003a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6e:	1ad2      	subs	r2, r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d114      	bne.n	8003aa4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2101      	movs	r1, #1
 8003a90:	f003 fb1c 	bl	80070cc <USB_EP0_OutStart>
 8003a94:	e006      	b.n	8003aa4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	441a      	add	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f005 fd68 	bl	8009580 <HAL_PCD_DataOutStageCallback>
 8003ab0:	e046      	b.n	8003b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d124      	bne.n	8003b04 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad6:	6093      	str	r3, [r2, #8]
 8003ad8:	e032      	b.n	8003b40 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af0:	461a      	mov	r2, r3
 8003af2:	2320      	movs	r3, #32
 8003af4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4619      	mov	r1, r3
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f005 fd3f 	bl	8009580 <HAL_PCD_DataOutStageCallback>
 8003b02:	e01d      	b.n	8003b40 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d114      	bne.n	8003b34 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d108      	bne.n	8003b34 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2100      	movs	r1, #0
 8003b30:	f003 facc 	bl	80070cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f005 fd20 	bl	8009580 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3720      	adds	r7, #32
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	4f54300a 	.word	0x4f54300a
 8003b50:	4f54310a 	.word	0x4f54310a

08003b54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	333c      	adds	r3, #60	; 0x3c
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <PCD_EP_OutSetupPacket_int+0x88>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d90e      	bls.n	8003ba8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d009      	beq.n	8003ba8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f005 fcd7 	bl	800955c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <PCD_EP_OutSetupPacket_int+0x88>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d90c      	bls.n	8003bd0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d108      	bne.n	8003bd0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2101      	movs	r1, #1
 8003bcc:	f003 fa7e 	bl	80070cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	4f54300a 	.word	0x4f54300a

08003be0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	70fb      	strb	r3, [r7, #3]
 8003bec:	4613      	mov	r3, r2
 8003bee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d107      	bne.n	8003c0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003bfe:	883b      	ldrh	r3, [r7, #0]
 8003c00:	0419      	lsls	r1, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c0c:	e028      	b.n	8003c60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	4413      	add	r3, r2
 8003c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	73fb      	strb	r3, [r7, #15]
 8003c20:	e00d      	b.n	8003c3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	3340      	adds	r3, #64	; 0x40
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	0c1b      	lsrs	r3, r3, #16
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	4413      	add	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
 8003c3e:	7bfa      	ldrb	r2, [r7, #15]
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d3ec      	bcc.n	8003c22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c48:	883b      	ldrh	r3, [r7, #0]
 8003c4a:	0418      	lsls	r0, r3, #16
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	4302      	orrs	r2, r0
 8003c58:	3340      	adds	r3, #64	; 0x40
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	887a      	ldrh	r2, [r7, #2]
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e267      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d075      	beq.n	8003db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cc6:	4b88      	ldr	r3, [pc, #544]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d00c      	beq.n	8003cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cd2:	4b85      	ldr	r3, [pc, #532]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d112      	bne.n	8003d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cde:	4b82      	ldr	r3, [pc, #520]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cea:	d10b      	bne.n	8003d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cec:	4b7e      	ldr	r3, [pc, #504]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d05b      	beq.n	8003db0 <HAL_RCC_OscConfig+0x108>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d157      	bne.n	8003db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e242      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0c:	d106      	bne.n	8003d1c <HAL_RCC_OscConfig+0x74>
 8003d0e:	4b76      	ldr	r3, [pc, #472]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a75      	ldr	r2, [pc, #468]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e01d      	b.n	8003d58 <HAL_RCC_OscConfig+0xb0>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d24:	d10c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x98>
 8003d26:	4b70      	ldr	r3, [pc, #448]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a6f      	ldr	r2, [pc, #444]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	4b6d      	ldr	r3, [pc, #436]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a6c      	ldr	r2, [pc, #432]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e00b      	b.n	8003d58 <HAL_RCC_OscConfig+0xb0>
 8003d40:	4b69      	ldr	r3, [pc, #420]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a68      	ldr	r2, [pc, #416]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	4b66      	ldr	r3, [pc, #408]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a65      	ldr	r2, [pc, #404]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d013      	beq.n	8003d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d60:	f7fd fdb2 	bl	80018c8 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d68:	f7fd fdae 	bl	80018c8 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b64      	cmp	r3, #100	; 0x64
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e207      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7a:	4b5b      	ldr	r3, [pc, #364]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCC_OscConfig+0xc0>
 8003d86:	e014      	b.n	8003db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d88:	f7fd fd9e 	bl	80018c8 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d90:	f7fd fd9a 	bl	80018c8 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b64      	cmp	r3, #100	; 0x64
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e1f3      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da2:	4b51      	ldr	r3, [pc, #324]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0xe8>
 8003dae:	e000      	b.n	8003db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d063      	beq.n	8003e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dbe:	4b4a      	ldr	r3, [pc, #296]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dca:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d11c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd6:	4b44      	ldr	r3, [pc, #272]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d116      	bne.n	8003e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de2:	4b41      	ldr	r3, [pc, #260]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <HAL_RCC_OscConfig+0x152>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d001      	beq.n	8003dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e1c7      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4937      	ldr	r1, [pc, #220]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0e:	e03a      	b.n	8003e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d020      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e18:	4b34      	ldr	r3, [pc, #208]	; (8003eec <HAL_RCC_OscConfig+0x244>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fd fd53 	bl	80018c8 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e26:	f7fd fd4f 	bl	80018c8 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e1a8      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e38:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e44:	4b28      	ldr	r3, [pc, #160]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4925      	ldr	r1, [pc, #148]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	600b      	str	r3, [r1, #0]
 8003e58:	e015      	b.n	8003e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e5a:	4b24      	ldr	r3, [pc, #144]	; (8003eec <HAL_RCC_OscConfig+0x244>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fd fd32 	bl	80018c8 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e68:	f7fd fd2e 	bl	80018c8 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e187      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d036      	beq.n	8003f00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d016      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e9a:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <HAL_RCC_OscConfig+0x248>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fd fd12 	bl	80018c8 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea8:	f7fd fd0e 	bl	80018c8 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e167      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x200>
 8003ec6:	e01b      	b.n	8003f00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec8:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <HAL_RCC_OscConfig+0x248>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ece:	f7fd fcfb 	bl	80018c8 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed4:	e00e      	b.n	8003ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed6:	f7fd fcf7 	bl	80018c8 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d907      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e150      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	42470000 	.word	0x42470000
 8003ef0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef4:	4b88      	ldr	r3, [pc, #544]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1ea      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8097 	beq.w	800403c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f12:	4b81      	ldr	r3, [pc, #516]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	4b7d      	ldr	r3, [pc, #500]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a7c      	ldr	r2, [pc, #496]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2e:	4b7a      	ldr	r3, [pc, #488]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3e:	4b77      	ldr	r3, [pc, #476]	; (800411c <HAL_RCC_OscConfig+0x474>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d118      	bne.n	8003f7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f4a:	4b74      	ldr	r3, [pc, #464]	; (800411c <HAL_RCC_OscConfig+0x474>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a73      	ldr	r2, [pc, #460]	; (800411c <HAL_RCC_OscConfig+0x474>)
 8003f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f56:	f7fd fcb7 	bl	80018c8 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5e:	f7fd fcb3 	bl	80018c8 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e10c      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f70:	4b6a      	ldr	r3, [pc, #424]	; (800411c <HAL_RCC_OscConfig+0x474>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d106      	bne.n	8003f92 <HAL_RCC_OscConfig+0x2ea>
 8003f84:	4b64      	ldr	r3, [pc, #400]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f88:	4a63      	ldr	r2, [pc, #396]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f90:	e01c      	b.n	8003fcc <HAL_RCC_OscConfig+0x324>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x30c>
 8003f9a:	4b5f      	ldr	r3, [pc, #380]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	4a5e      	ldr	r2, [pc, #376]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	f043 0304 	orr.w	r3, r3, #4
 8003fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa6:	4b5c      	ldr	r3, [pc, #368]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	4a5b      	ldr	r2, [pc, #364]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb2:	e00b      	b.n	8003fcc <HAL_RCC_OscConfig+0x324>
 8003fb4:	4b58      	ldr	r3, [pc, #352]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb8:	4a57      	ldr	r2, [pc, #348]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc0:	4b55      	ldr	r3, [pc, #340]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	4a54      	ldr	r2, [pc, #336]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003fc6:	f023 0304 	bic.w	r3, r3, #4
 8003fca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d015      	beq.n	8004000 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7fd fc78 	bl	80018c8 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fda:	e00a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fdc:	f7fd fc74 	bl	80018c8 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e0cb      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff2:	4b49      	ldr	r3, [pc, #292]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0ee      	beq.n	8003fdc <HAL_RCC_OscConfig+0x334>
 8003ffe:	e014      	b.n	800402a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004000:	f7fd fc62 	bl	80018c8 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004006:	e00a      	b.n	800401e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004008:	f7fd fc5e 	bl	80018c8 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	; 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e0b5      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401e:	4b3e      	ldr	r3, [pc, #248]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1ee      	bne.n	8004008 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d105      	bne.n	800403c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004030:	4b39      	ldr	r3, [pc, #228]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	4a38      	ldr	r2, [pc, #224]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8004036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800403a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80a1 	beq.w	8004188 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004046:	4b34      	ldr	r3, [pc, #208]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b08      	cmp	r3, #8
 8004050:	d05c      	beq.n	800410c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d141      	bne.n	80040de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405a:	4b31      	ldr	r3, [pc, #196]	; (8004120 <HAL_RCC_OscConfig+0x478>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fd fc32 	bl	80018c8 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004068:	f7fd fc2e 	bl	80018c8 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e087      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407a:	4b27      	ldr	r3, [pc, #156]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69da      	ldr	r2, [r3, #28]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	019b      	lsls	r3, r3, #6
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	3b01      	subs	r3, #1
 80040a0:	041b      	lsls	r3, r3, #16
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	061b      	lsls	r3, r3, #24
 80040aa:	491b      	ldr	r1, [pc, #108]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b0:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <HAL_RCC_OscConfig+0x478>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b6:	f7fd fc07 	bl	80018c8 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040be:	f7fd fc03 	bl	80018c8 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e05c      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d0:	4b11      	ldr	r3, [pc, #68]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0x416>
 80040dc:	e054      	b.n	8004188 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040de:	4b10      	ldr	r3, [pc, #64]	; (8004120 <HAL_RCC_OscConfig+0x478>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fd fbf0 	bl	80018c8 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ec:	f7fd fbec 	bl	80018c8 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e045      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_RCC_OscConfig+0x470>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x444>
 800410a:	e03d      	b.n	8004188 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d107      	bne.n	8004124 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e038      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
 8004118:	40023800 	.word	0x40023800
 800411c:	40007000 	.word	0x40007000
 8004120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_RCC_OscConfig+0x4ec>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d028      	beq.n	8004184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d121      	bne.n	8004184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414a:	429a      	cmp	r2, r3
 800414c:	d11a      	bne.n	8004184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004154:	4013      	ands	r3, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800415a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800415c:	4293      	cmp	r3, r2
 800415e:	d111      	bne.n	8004184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	3b01      	subs	r3, #1
 800416e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d107      	bne.n	8004184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800

08004198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0cc      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041ac:	4b68      	ldr	r3, [pc, #416]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d90c      	bls.n	80041d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ba:	4b65      	ldr	r3, [pc, #404]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b63      	ldr	r3, [pc, #396]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0b8      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d020      	beq.n	8004222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041ec:	4b59      	ldr	r3, [pc, #356]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4a58      	ldr	r2, [pc, #352]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004204:	4b53      	ldr	r3, [pc, #332]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a52      	ldr	r2, [pc, #328]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800420e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004210:	4b50      	ldr	r3, [pc, #320]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	494d      	ldr	r1, [pc, #308]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	4313      	orrs	r3, r2
 8004220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d044      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d107      	bne.n	8004246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	4b47      	ldr	r3, [pc, #284]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d119      	bne.n	8004276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e07f      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d003      	beq.n	8004256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004252:	2b03      	cmp	r3, #3
 8004254:	d107      	bne.n	8004266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004256:	4b3f      	ldr	r3, [pc, #252]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d109      	bne.n	8004276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e06f      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004266:	4b3b      	ldr	r3, [pc, #236]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e067      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004276:	4b37      	ldr	r3, [pc, #220]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f023 0203 	bic.w	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	4934      	ldr	r1, [pc, #208]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	4313      	orrs	r3, r2
 8004286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004288:	f7fd fb1e 	bl	80018c8 <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004290:	f7fd fb1a 	bl	80018c8 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	; 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e04f      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a6:	4b2b      	ldr	r3, [pc, #172]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 020c 	and.w	r2, r3, #12
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d1eb      	bne.n	8004290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b8:	4b25      	ldr	r3, [pc, #148]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d20c      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c6:	4b22      	ldr	r3, [pc, #136]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e032      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4916      	ldr	r1, [pc, #88]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	490e      	ldr	r1, [pc, #56]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800431e:	f000 f821 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 8004322:	4602      	mov	r2, r0
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	490a      	ldr	r1, [pc, #40]	; (8004358 <HAL_RCC_ClockConfig+0x1c0>)
 8004330:	5ccb      	ldrb	r3, [r1, r3]
 8004332:	fa22 f303 	lsr.w	r3, r2, r3
 8004336:	4a09      	ldr	r2, [pc, #36]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800433a:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7fd fa7e 	bl	8001840 <HAL_InitTick>

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40023c00 	.word	0x40023c00
 8004354:	40023800 	.word	0x40023800
 8004358:	08009bbc 	.word	0x08009bbc
 800435c:	20000008 	.word	0x20000008
 8004360:	2000000c 	.word	0x2000000c

08004364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004368:	b094      	sub	sp, #80	; 0x50
 800436a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	647b      	str	r3, [r7, #68]	; 0x44
 8004370:	2300      	movs	r3, #0
 8004372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004374:	2300      	movs	r3, #0
 8004376:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800437c:	4b79      	ldr	r3, [pc, #484]	; (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b08      	cmp	r3, #8
 8004386:	d00d      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004388:	2b08      	cmp	r3, #8
 800438a:	f200 80e1 	bhi.w	8004550 <HAL_RCC_GetSysClockFreq+0x1ec>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x34>
 8004392:	2b04      	cmp	r3, #4
 8004394:	d003      	beq.n	800439e <HAL_RCC_GetSysClockFreq+0x3a>
 8004396:	e0db      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004398:	4b73      	ldr	r3, [pc, #460]	; (8004568 <HAL_RCC_GetSysClockFreq+0x204>)
 800439a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800439c:	e0db      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800439e:	4b73      	ldr	r3, [pc, #460]	; (800456c <HAL_RCC_GetSysClockFreq+0x208>)
 80043a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043a2:	e0d8      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043a4:	4b6f      	ldr	r3, [pc, #444]	; (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ae:	4b6d      	ldr	r3, [pc, #436]	; (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d063      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ba:	4b6a      	ldr	r3, [pc, #424]	; (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	099b      	lsrs	r3, r3, #6
 80043c0:	2200      	movs	r2, #0
 80043c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043cc:	633b      	str	r3, [r7, #48]	; 0x30
 80043ce:	2300      	movs	r3, #0
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
 80043d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043d6:	4622      	mov	r2, r4
 80043d8:	462b      	mov	r3, r5
 80043da:	f04f 0000 	mov.w	r0, #0
 80043de:	f04f 0100 	mov.w	r1, #0
 80043e2:	0159      	lsls	r1, r3, #5
 80043e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e8:	0150      	lsls	r0, r2, #5
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4621      	mov	r1, r4
 80043f0:	1a51      	subs	r1, r2, r1
 80043f2:	6139      	str	r1, [r7, #16]
 80043f4:	4629      	mov	r1, r5
 80043f6:	eb63 0301 	sbc.w	r3, r3, r1
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004408:	4659      	mov	r1, fp
 800440a:	018b      	lsls	r3, r1, #6
 800440c:	4651      	mov	r1, sl
 800440e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004412:	4651      	mov	r1, sl
 8004414:	018a      	lsls	r2, r1, #6
 8004416:	4651      	mov	r1, sl
 8004418:	ebb2 0801 	subs.w	r8, r2, r1
 800441c:	4659      	mov	r1, fp
 800441e:	eb63 0901 	sbc.w	r9, r3, r1
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800442e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004436:	4690      	mov	r8, r2
 8004438:	4699      	mov	r9, r3
 800443a:	4623      	mov	r3, r4
 800443c:	eb18 0303 	adds.w	r3, r8, r3
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	462b      	mov	r3, r5
 8004444:	eb49 0303 	adc.w	r3, r9, r3
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004456:	4629      	mov	r1, r5
 8004458:	024b      	lsls	r3, r1, #9
 800445a:	4621      	mov	r1, r4
 800445c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004460:	4621      	mov	r1, r4
 8004462:	024a      	lsls	r2, r1, #9
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800446a:	2200      	movs	r2, #0
 800446c:	62bb      	str	r3, [r7, #40]	; 0x28
 800446e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004470:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004474:	f7fc f8c8 	bl	8000608 <__aeabi_uldivmod>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4613      	mov	r3, r2
 800447e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004480:	e058      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004482:	4b38      	ldr	r3, [pc, #224]	; (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	099b      	lsrs	r3, r3, #6
 8004488:	2200      	movs	r2, #0
 800448a:	4618      	mov	r0, r3
 800448c:	4611      	mov	r1, r2
 800448e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004492:	623b      	str	r3, [r7, #32]
 8004494:	2300      	movs	r3, #0
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
 8004498:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800449c:	4642      	mov	r2, r8
 800449e:	464b      	mov	r3, r9
 80044a0:	f04f 0000 	mov.w	r0, #0
 80044a4:	f04f 0100 	mov.w	r1, #0
 80044a8:	0159      	lsls	r1, r3, #5
 80044aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ae:	0150      	lsls	r0, r2, #5
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4641      	mov	r1, r8
 80044b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80044ba:	4649      	mov	r1, r9
 80044bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044d4:	ebb2 040a 	subs.w	r4, r2, sl
 80044d8:	eb63 050b 	sbc.w	r5, r3, fp
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	00eb      	lsls	r3, r5, #3
 80044e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ea:	00e2      	lsls	r2, r4, #3
 80044ec:	4614      	mov	r4, r2
 80044ee:	461d      	mov	r5, r3
 80044f0:	4643      	mov	r3, r8
 80044f2:	18e3      	adds	r3, r4, r3
 80044f4:	603b      	str	r3, [r7, #0]
 80044f6:	464b      	mov	r3, r9
 80044f8:	eb45 0303 	adc.w	r3, r5, r3
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800450a:	4629      	mov	r1, r5
 800450c:	028b      	lsls	r3, r1, #10
 800450e:	4621      	mov	r1, r4
 8004510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004514:	4621      	mov	r1, r4
 8004516:	028a      	lsls	r2, r1, #10
 8004518:	4610      	mov	r0, r2
 800451a:	4619      	mov	r1, r3
 800451c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800451e:	2200      	movs	r2, #0
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	61fa      	str	r2, [r7, #28]
 8004524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004528:	f7fc f86e 	bl	8000608 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4613      	mov	r3, r2
 8004532:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <HAL_RCC_GetSysClockFreq+0x200>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	0c1b      	lsrs	r3, r3, #16
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	3301      	adds	r3, #1
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800454e:	e002      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_RCC_GetSysClockFreq+0x204>)
 8004552:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004558:	4618      	mov	r0, r3
 800455a:	3750      	adds	r7, #80	; 0x50
 800455c:	46bd      	mov	sp, r7
 800455e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004562:	bf00      	nop
 8004564:	40023800 	.word	0x40023800
 8004568:	00f42400 	.word	0x00f42400
 800456c:	007a1200 	.word	0x007a1200

08004570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004574:	4b03      	ldr	r3, [pc, #12]	; (8004584 <HAL_RCC_GetHCLKFreq+0x14>)
 8004576:	681b      	ldr	r3, [r3, #0]
}
 8004578:	4618      	mov	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20000008 	.word	0x20000008

08004588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800458c:	f7ff fff0 	bl	8004570 <HAL_RCC_GetHCLKFreq>
 8004590:	4602      	mov	r2, r0
 8004592:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	0a9b      	lsrs	r3, r3, #10
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	4903      	ldr	r1, [pc, #12]	; (80045ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800459e:	5ccb      	ldrb	r3, [r1, r3]
 80045a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40023800 	.word	0x40023800
 80045ac:	08009bcc 	.word	0x08009bcc

080045b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e07b      	b.n	80046ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d108      	bne.n	80045dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045d2:	d009      	beq.n	80045e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	61da      	str	r2, [r3, #28]
 80045da:	e005      	b.n	80045e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fd f800 	bl	8001608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800461e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466c:	ea42 0103 	orr.w	r1, r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	0c1b      	lsrs	r3, r3, #16
 8004686:	f003 0104 	and.w	r1, r3, #4
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	f003 0210 	and.w	r2, r3, #16
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b088      	sub	sp, #32
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_SPI_Transmit+0x22>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e126      	b.n	8004932 <HAL_SPI_Transmit+0x270>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ec:	f7fd f8ec 	bl	80018c8 <HAL_GetTick>
 80046f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d002      	beq.n	8004708 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004702:	2302      	movs	r3, #2
 8004704:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004706:	e10b      	b.n	8004920 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_SPI_Transmit+0x52>
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004718:	e102      	b.n	8004920 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2203      	movs	r2, #3
 800471e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	88fa      	ldrh	r2, [r7, #6]
 8004732:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004760:	d10f      	bne.n	8004782 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004770:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004780:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d007      	beq.n	80047a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800479e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a8:	d14b      	bne.n	8004842 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_SPI_Transmit+0xf6>
 80047b2:	8afb      	ldrh	r3, [r7, #22]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d13e      	bne.n	8004836 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	881a      	ldrh	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	1c9a      	adds	r2, r3, #2
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047dc:	e02b      	b.n	8004836 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d112      	bne.n	8004812 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	881a      	ldrh	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	1c9a      	adds	r2, r3, #2
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004810:	e011      	b.n	8004836 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004812:	f7fd f859 	bl	80018c8 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d803      	bhi.n	800482a <HAL_SPI_Transmit+0x168>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d102      	bne.n	8004830 <HAL_SPI_Transmit+0x16e>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004834:	e074      	b.n	8004920 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ce      	bne.n	80047de <HAL_SPI_Transmit+0x11c>
 8004840:	e04c      	b.n	80048dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_SPI_Transmit+0x18e>
 800484a:	8afb      	ldrh	r3, [r7, #22]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d140      	bne.n	80048d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	330c      	adds	r3, #12
 800485a:	7812      	ldrb	r2, [r2, #0]
 800485c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800486c:	b29b      	uxth	r3, r3
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004876:	e02c      	b.n	80048d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b02      	cmp	r3, #2
 8004884:	d113      	bne.n	80048ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	330c      	adds	r3, #12
 8004890:	7812      	ldrb	r2, [r2, #0]
 8004892:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80048ac:	e011      	b.n	80048d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ae:	f7fd f80b 	bl	80018c8 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d803      	bhi.n	80048c6 <HAL_SPI_Transmit+0x204>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d102      	bne.n	80048cc <HAL_SPI_Transmit+0x20a>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d102      	bne.n	80048d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048d0:	e026      	b.n	8004920 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1cd      	bne.n	8004878 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	6839      	ldr	r1, [r7, #0]
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 fb73 	bl	8004fcc <SPI_EndRxTxTransaction>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048fa:	2300      	movs	r3, #0
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e000      	b.n	8004920 <HAL_SPI_Transmit+0x25e>
  }

error:
 800491e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004930:	7ffb      	ldrb	r3, [r7, #31]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b08c      	sub	sp, #48	; 0x30
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
 8004946:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004948:	2301      	movs	r3, #1
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_SPI_TransmitReceive+0x26>
 800495c:	2302      	movs	r3, #2
 800495e:	e18a      	b.n	8004c76 <HAL_SPI_TransmitReceive+0x33c>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004968:	f7fc ffae 	bl	80018c8 <HAL_GetTick>
 800496c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800497e:	887b      	ldrh	r3, [r7, #2]
 8004980:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004982:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004986:	2b01      	cmp	r3, #1
 8004988:	d00f      	beq.n	80049aa <HAL_SPI_TransmitReceive+0x70>
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004990:	d107      	bne.n	80049a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d103      	bne.n	80049a2 <HAL_SPI_TransmitReceive+0x68>
 800499a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d003      	beq.n	80049aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049a2:	2302      	movs	r3, #2
 80049a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049a8:	e15b      	b.n	8004c62 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_SPI_TransmitReceive+0x82>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_SPI_TransmitReceive+0x82>
 80049b6:	887b      	ldrh	r3, [r7, #2]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d103      	bne.n	80049c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049c2:	e14e      	b.n	8004c62 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d003      	beq.n	80049d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2205      	movs	r2, #5
 80049d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	887a      	ldrh	r2, [r7, #2]
 80049e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	887a      	ldrh	r2, [r7, #2]
 80049ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	887a      	ldrh	r2, [r7, #2]
 80049fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	887a      	ldrh	r2, [r7, #2]
 8004a00:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d007      	beq.n	8004a2c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a34:	d178      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_SPI_TransmitReceive+0x10a>
 8004a3e:	8b7b      	ldrh	r3, [r7, #26]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d166      	bne.n	8004b12 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	881a      	ldrh	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	1c9a      	adds	r2, r3, #2
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a68:	e053      	b.n	8004b12 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d11b      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x176>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d016      	beq.n	8004ab0 <HAL_SPI_TransmitReceive+0x176>
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d113      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	881a      	ldrh	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a98:	1c9a      	adds	r2, r3, #2
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d119      	bne.n	8004af2 <HAL_SPI_TransmitReceive+0x1b8>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d014      	beq.n	8004af2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	b292      	uxth	r2, r2
 8004ad4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	1c9a      	adds	r2, r3, #2
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aee:	2301      	movs	r3, #1
 8004af0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004af2:	f7fc fee9 	bl	80018c8 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d807      	bhi.n	8004b12 <HAL_SPI_TransmitReceive+0x1d8>
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d003      	beq.n	8004b12 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b10:	e0a7      	b.n	8004c62 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1a6      	bne.n	8004a6a <HAL_SPI_TransmitReceive+0x130>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1a1      	bne.n	8004a6a <HAL_SPI_TransmitReceive+0x130>
 8004b26:	e07c      	b.n	8004c22 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <HAL_SPI_TransmitReceive+0x1fc>
 8004b30:	8b7b      	ldrh	r3, [r7, #26]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d16b      	bne.n	8004c0e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	330c      	adds	r3, #12
 8004b40:	7812      	ldrb	r2, [r2, #0]
 8004b42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b5c:	e057      	b.n	8004c0e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d11c      	bne.n	8004ba6 <HAL_SPI_TransmitReceive+0x26c>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d017      	beq.n	8004ba6 <HAL_SPI_TransmitReceive+0x26c>
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d114      	bne.n	8004ba6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	330c      	adds	r3, #12
 8004b86:	7812      	ldrb	r2, [r2, #0]
 8004b88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d119      	bne.n	8004be8 <HAL_SPI_TransmitReceive+0x2ae>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d014      	beq.n	8004be8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004be4:	2301      	movs	r3, #1
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004be8:	f7fc fe6e 	bl	80018c8 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d803      	bhi.n	8004c00 <HAL_SPI_TransmitReceive+0x2c6>
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfe:	d102      	bne.n	8004c06 <HAL_SPI_TransmitReceive+0x2cc>
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d103      	bne.n	8004c0e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c0c:	e029      	b.n	8004c62 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1a2      	bne.n	8004b5e <HAL_SPI_TransmitReceive+0x224>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d19d      	bne.n	8004b5e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f9d0 	bl	8004fcc <SPI_EndRxTxTransaction>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d006      	beq.n	8004c40 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c3e:	e010      	b.n	8004c62 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	e000      	b.n	8004c62 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3730      	adds	r7, #48	; 0x30
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	099b      	lsrs	r3, r3, #6
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10f      	bne.n	8004cc4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	099b      	lsrs	r3, r3, #6
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d004      	beq.n	8004cc4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4798      	blx	r3
    return;
 8004cc2:	e0d7      	b.n	8004e74 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	085b      	lsrs	r3, r3, #1
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_SPI_IRQHandler+0x66>
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	09db      	lsrs	r3, r3, #7
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d004      	beq.n	8004ce6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4798      	blx	r3
    return;
 8004ce4:	e0c6      	b.n	8004e74 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	095b      	lsrs	r3, r3, #5
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10c      	bne.n	8004d0c <HAL_SPI_IRQHandler+0x8c>
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	0a1b      	lsrs	r3, r3, #8
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80b4 	beq.w	8004e74 <HAL_SPI_IRQHandler+0x1f4>
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80ad 	beq.w	8004e74 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	099b      	lsrs	r3, r3, #6
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d023      	beq.n	8004d6e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d011      	beq.n	8004d56 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d36:	f043 0204 	orr.w	r2, r3, #4
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	e00b      	b.n	8004d6e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d56:	2300      	movs	r3, #0
 8004d58:	613b      	str	r3, [r7, #16]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	693b      	ldr	r3, [r7, #16]
        return;
 8004d6c:	e082      	b.n	8004e74 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d014      	beq.n	8004da4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	f043 0201 	orr.w	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	0a1b      	lsrs	r3, r3, #8
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00c      	beq.n	8004dca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db4:	f043 0208 	orr.w	r2, r3, #8
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	60bb      	str	r3, [r7, #8]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d04f      	beq.n	8004e72 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004de0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d104      	bne.n	8004dfe <HAL_SPI_IRQHandler+0x17e>
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d034      	beq.n	8004e68 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0203 	bic.w	r2, r2, #3
 8004e0c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d011      	beq.n	8004e3a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1a:	4a18      	ldr	r2, [pc, #96]	; (8004e7c <HAL_SPI_IRQHandler+0x1fc>)
 8004e1c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fd f903 	bl	800202e <HAL_DMA_Abort_IT>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d016      	beq.n	8004e70 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e46:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <HAL_SPI_IRQHandler+0x1fc>)
 8004e48:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fd f8ed 	bl	800202e <HAL_DMA_Abort_IT>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004e66:	e003      	b.n	8004e70 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f809 	bl	8004e80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e6e:	e000      	b.n	8004e72 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004e70:	bf00      	nop
    return;
 8004e72:	bf00      	nop
  }
}
 8004e74:	3720      	adds	r7, #32
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	08004e95 	.word	0x08004e95

08004e80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f7ff ffe6 	bl	8004e80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ecc:	f7fc fcfc 	bl	80018c8 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed4:	1a9b      	subs	r3, r3, r2
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	4413      	add	r3, r2
 8004eda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004edc:	f7fc fcf4 	bl	80018c8 <HAL_GetTick>
 8004ee0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ee2:	4b39      	ldr	r3, [pc, #228]	; (8004fc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	015b      	lsls	r3, r3, #5
 8004ee8:	0d1b      	lsrs	r3, r3, #20
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	fb02 f303 	mul.w	r3, r2, r3
 8004ef0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ef2:	e054      	b.n	8004f9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d050      	beq.n	8004f9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004efc:	f7fc fce4 	bl	80018c8 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d902      	bls.n	8004f12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d13d      	bne.n	8004f8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f2a:	d111      	bne.n	8004f50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f34:	d004      	beq.n	8004f40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3e:	d107      	bne.n	8004f50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f58:	d10f      	bne.n	8004f7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e017      	b.n	8004fbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	bf0c      	ite	eq
 8004fae:	2301      	moveq	r3, #1
 8004fb0:	2300      	movne	r3, #0
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	79fb      	ldrb	r3, [r7, #7]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d19b      	bne.n	8004ef4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000008 	.word	0x20000008

08004fcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b088      	sub	sp, #32
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fd8:	4b1b      	ldr	r3, [pc, #108]	; (8005048 <SPI_EndRxTxTransaction+0x7c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1b      	ldr	r2, [pc, #108]	; (800504c <SPI_EndRxTxTransaction+0x80>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	0d5b      	lsrs	r3, r3, #21
 8004fe4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fe8:	fb02 f303 	mul.w	r3, r2, r3
 8004fec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ff6:	d112      	bne.n	800501e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2200      	movs	r2, #0
 8005000:	2180      	movs	r1, #128	; 0x80
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f7ff ff5a 	bl	8004ebc <SPI_WaitFlagStateUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d016      	beq.n	800503c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	f043 0220 	orr.w	r2, r3, #32
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e00f      	b.n	800503e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	3b01      	subs	r3, #1
 8005028:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005034:	2b80      	cmp	r3, #128	; 0x80
 8005036:	d0f2      	beq.n	800501e <SPI_EndRxTxTransaction+0x52>
 8005038:	e000      	b.n	800503c <SPI_EndRxTxTransaction+0x70>
        break;
 800503a:	bf00      	nop
  }

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000008 	.word	0x20000008
 800504c:	165e9f81 	.word	0x165e9f81

08005050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e041      	b.n	80050e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fc fb16 	bl	80016a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f000 fa96 	bl	80055c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b01      	cmp	r3, #1
 8005102:	d001      	beq.n	8005108 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e04e      	b.n	80051a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a23      	ldr	r2, [pc, #140]	; (80051b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d022      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0x80>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005132:	d01d      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0x80>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1f      	ldr	r2, [pc, #124]	; (80051b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d018      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0x80>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1e      	ldr	r2, [pc, #120]	; (80051bc <HAL_TIM_Base_Start_IT+0xcc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d013      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0x80>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00e      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0x80>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d009      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0x80>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0x80>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a18      	ldr	r2, [pc, #96]	; (80051cc <HAL_TIM_Base_Start_IT+0xdc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d111      	bne.n	8005194 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b06      	cmp	r3, #6
 8005180:	d010      	beq.n	80051a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0201 	orr.w	r2, r2, #1
 8005190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005192:	e007      	b.n	80051a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40010000 	.word	0x40010000
 80051b8:	40000400 	.word	0x40000400
 80051bc:	40000800 	.word	0x40000800
 80051c0:	40000c00 	.word	0x40000c00
 80051c4:	40010400 	.word	0x40010400
 80051c8:	40014000 	.word	0x40014000
 80051cc:	40001800 	.word	0x40001800

080051d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d122      	bne.n	800522c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d11b      	bne.n	800522c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0202 	mvn.w	r2, #2
 80051fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f9b5 	bl	8005582 <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f9a7 	bl	800556e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f9b8 	bl	8005596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b04      	cmp	r3, #4
 8005238:	d122      	bne.n	8005280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b04      	cmp	r3, #4
 8005246:	d11b      	bne.n	8005280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0204 	mvn.w	r2, #4
 8005250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2202      	movs	r2, #2
 8005256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f98b 	bl	8005582 <HAL_TIM_IC_CaptureCallback>
 800526c:	e005      	b.n	800527a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f97d 	bl	800556e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f98e 	bl	8005596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	2b08      	cmp	r3, #8
 800528c:	d122      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b08      	cmp	r3, #8
 800529a:	d11b      	bne.n	80052d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0208 	mvn.w	r2, #8
 80052a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2204      	movs	r2, #4
 80052aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f961 	bl	8005582 <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f953 	bl	800556e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f964 	bl	8005596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d122      	bne.n	8005328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d11b      	bne.n	8005328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0210 	mvn.w	r2, #16
 80052f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2208      	movs	r2, #8
 80052fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f937 	bl	8005582 <HAL_TIM_IC_CaptureCallback>
 8005314:	e005      	b.n	8005322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f929 	bl	800556e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f93a 	bl	8005596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b01      	cmp	r3, #1
 8005334:	d10e      	bne.n	8005354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b01      	cmp	r3, #1
 8005342:	d107      	bne.n	8005354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0201 	mvn.w	r2, #1
 800534c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fb fcfe 	bl	8000d50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535e:	2b80      	cmp	r3, #128	; 0x80
 8005360:	d10e      	bne.n	8005380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536c:	2b80      	cmp	r3, #128	; 0x80
 800536e:	d107      	bne.n	8005380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fae0 	bl	8005940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d10e      	bne.n	80053ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005398:	2b40      	cmp	r3, #64	; 0x40
 800539a:	d107      	bne.n	80053ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f8ff 	bl	80055aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d10e      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d107      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0220 	mvn.w	r2, #32
 80053d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 faaa 	bl	800592c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_TIM_ConfigClockSource+0x1c>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e0b4      	b.n	8005566 <HAL_TIM_ConfigClockSource+0x186>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800541a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005422:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005434:	d03e      	beq.n	80054b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543a:	f200 8087 	bhi.w	800554c <HAL_TIM_ConfigClockSource+0x16c>
 800543e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005442:	f000 8086 	beq.w	8005552 <HAL_TIM_ConfigClockSource+0x172>
 8005446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544a:	d87f      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
 800544c:	2b70      	cmp	r3, #112	; 0x70
 800544e:	d01a      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0xa6>
 8005450:	2b70      	cmp	r3, #112	; 0x70
 8005452:	d87b      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
 8005454:	2b60      	cmp	r3, #96	; 0x60
 8005456:	d050      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0x11a>
 8005458:	2b60      	cmp	r3, #96	; 0x60
 800545a:	d877      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
 800545c:	2b50      	cmp	r3, #80	; 0x50
 800545e:	d03c      	beq.n	80054da <HAL_TIM_ConfigClockSource+0xfa>
 8005460:	2b50      	cmp	r3, #80	; 0x50
 8005462:	d873      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
 8005464:	2b40      	cmp	r3, #64	; 0x40
 8005466:	d058      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x13a>
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d86f      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
 800546c:	2b30      	cmp	r3, #48	; 0x30
 800546e:	d064      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x15a>
 8005470:	2b30      	cmp	r3, #48	; 0x30
 8005472:	d86b      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
 8005474:	2b20      	cmp	r3, #32
 8005476:	d060      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x15a>
 8005478:	2b20      	cmp	r3, #32
 800547a:	d867      	bhi.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
 800547c:	2b00      	cmp	r3, #0
 800547e:	d05c      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x15a>
 8005480:	2b10      	cmp	r3, #16
 8005482:	d05a      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x15a>
 8005484:	e062      	b.n	800554c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6899      	ldr	r1, [r3, #8]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f000 f9ad 	bl	80057f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	609a      	str	r2, [r3, #8]
      break;
 80054b2:	e04f      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	6899      	ldr	r1, [r3, #8]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f000 f996 	bl	80057f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054d6:	609a      	str	r2, [r3, #8]
      break;
 80054d8:	e03c      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6859      	ldr	r1, [r3, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f000 f90a 	bl	8005700 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2150      	movs	r1, #80	; 0x50
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f963 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 80054f8:	e02c      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6859      	ldr	r1, [r3, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	461a      	mov	r2, r3
 8005508:	f000 f929 	bl	800575e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2160      	movs	r1, #96	; 0x60
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f953 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 8005518:	e01c      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	6859      	ldr	r1, [r3, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	461a      	mov	r2, r3
 8005528:	f000 f8ea 	bl	8005700 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2140      	movs	r1, #64	; 0x40
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f943 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 8005538:	e00c      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4619      	mov	r1, r3
 8005544:	4610      	mov	r0, r2
 8005546:	f000 f93a 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 800554a:	e003      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
      break;
 8005550:	e000      	b.n	8005554 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005552:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005564:	7bfb      	ldrb	r3, [r7, #15]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
	...

080055c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a40      	ldr	r2, [pc, #256]	; (80056d4 <TIM_Base_SetConfig+0x114>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d013      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055de:	d00f      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a3d      	ldr	r2, [pc, #244]	; (80056d8 <TIM_Base_SetConfig+0x118>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00b      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a3c      	ldr	r2, [pc, #240]	; (80056dc <TIM_Base_SetConfig+0x11c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d007      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a3b      	ldr	r2, [pc, #236]	; (80056e0 <TIM_Base_SetConfig+0x120>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a3a      	ldr	r2, [pc, #232]	; (80056e4 <TIM_Base_SetConfig+0x124>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d108      	bne.n	8005612 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a2f      	ldr	r2, [pc, #188]	; (80056d4 <TIM_Base_SetConfig+0x114>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d02b      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005620:	d027      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a2c      	ldr	r2, [pc, #176]	; (80056d8 <TIM_Base_SetConfig+0x118>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d023      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a2b      	ldr	r2, [pc, #172]	; (80056dc <TIM_Base_SetConfig+0x11c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01f      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a2a      	ldr	r2, [pc, #168]	; (80056e0 <TIM_Base_SetConfig+0x120>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d01b      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a29      	ldr	r2, [pc, #164]	; (80056e4 <TIM_Base_SetConfig+0x124>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d017      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a28      	ldr	r2, [pc, #160]	; (80056e8 <TIM_Base_SetConfig+0x128>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a27      	ldr	r2, [pc, #156]	; (80056ec <TIM_Base_SetConfig+0x12c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00f      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a26      	ldr	r2, [pc, #152]	; (80056f0 <TIM_Base_SetConfig+0x130>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00b      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a25      	ldr	r2, [pc, #148]	; (80056f4 <TIM_Base_SetConfig+0x134>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d007      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a24      	ldr	r2, [pc, #144]	; (80056f8 <TIM_Base_SetConfig+0x138>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d003      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a23      	ldr	r2, [pc, #140]	; (80056fc <TIM_Base_SetConfig+0x13c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d108      	bne.n	8005684 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a0a      	ldr	r2, [pc, #40]	; (80056d4 <TIM_Base_SetConfig+0x114>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_Base_SetConfig+0xf8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a0c      	ldr	r2, [pc, #48]	; (80056e4 <TIM_Base_SetConfig+0x124>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d103      	bne.n	80056c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	615a      	str	r2, [r3, #20]
}
 80056c6:	bf00      	nop
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40010000 	.word	0x40010000
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800
 80056e0:	40000c00 	.word	0x40000c00
 80056e4:	40010400 	.word	0x40010400
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800
 80056f4:	40001800 	.word	0x40001800
 80056f8:	40001c00 	.word	0x40001c00
 80056fc:	40002000 	.word	0x40002000

08005700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f023 0201 	bic.w	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800572a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 030a 	bic.w	r3, r3, #10
 800573c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800575e:	b480      	push	{r7}
 8005760:	b087      	sub	sp, #28
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f023 0210 	bic.w	r2, r3, #16
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005788:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	031b      	lsls	r3, r3, #12
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800579a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	621a      	str	r2, [r3, #32]
}
 80057b2:	bf00      	nop
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	f043 0307 	orr.w	r3, r3, #7
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	609a      	str	r2, [r3, #8]
}
 80057e8:	bf00      	nop
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800580e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	021a      	lsls	r2, r3, #8
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	431a      	orrs	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4313      	orrs	r3, r2
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	609a      	str	r2, [r3, #8]
}
 8005828:	bf00      	nop
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005848:	2302      	movs	r3, #2
 800584a:	e05a      	b.n	8005902 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a21      	ldr	r2, [pc, #132]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d022      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005898:	d01d      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a1d      	ldr	r2, [pc, #116]	; (8005914 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d018      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a1b      	ldr	r2, [pc, #108]	; (8005918 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d013      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1a      	ldr	r2, [pc, #104]	; (800591c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00e      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a18      	ldr	r2, [pc, #96]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d009      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a17      	ldr	r2, [pc, #92]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d004      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a15      	ldr	r2, [pc, #84]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d10c      	bne.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40010000 	.word	0x40010000
 8005914:	40000400 	.word	0x40000400
 8005918:	40000800 	.word	0x40000800
 800591c:	40000c00 	.word	0x40000c00
 8005920:	40010400 	.word	0x40010400
 8005924:	40014000 	.word	0x40014000
 8005928:	40001800 	.word	0x40001800

0800592c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005954:	b084      	sub	sp, #16
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	f107 001c 	add.w	r0, r7, #28
 8005962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	2b01      	cmp	r3, #1
 800596a:	d122      	bne.n	80059b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005996:	2b01      	cmp	r3, #1
 8005998:	d105      	bne.n	80059a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f001 fbee 	bl	8007188 <USB_CoreReset>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]
 80059b0:	e01a      	b.n	80059e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 fbe2 	bl	8007188 <USB_CoreReset>
 80059c4:	4603      	mov	r3, r0
 80059c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
 80059da:	e005      	b.n	80059e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d10b      	bne.n	8005a06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f043 0206 	orr.w	r2, r3, #6
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f043 0220 	orr.w	r2, r3, #32
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a12:	b004      	add	sp, #16
 8005a14:	4770      	bx	lr
	...

08005a18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	4613      	mov	r3, r2
 8005a24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d165      	bne.n	8005af8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4a41      	ldr	r2, [pc, #260]	; (8005b34 <USB_SetTurnaroundTime+0x11c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d906      	bls.n	8005a42 <USB_SetTurnaroundTime+0x2a>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4a40      	ldr	r2, [pc, #256]	; (8005b38 <USB_SetTurnaroundTime+0x120>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d202      	bcs.n	8005a42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a3c:	230f      	movs	r3, #15
 8005a3e:	617b      	str	r3, [r7, #20]
 8005a40:	e062      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	4a3c      	ldr	r2, [pc, #240]	; (8005b38 <USB_SetTurnaroundTime+0x120>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d306      	bcc.n	8005a58 <USB_SetTurnaroundTime+0x40>
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	4a3b      	ldr	r2, [pc, #236]	; (8005b3c <USB_SetTurnaroundTime+0x124>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d202      	bcs.n	8005a58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a52:	230e      	movs	r3, #14
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	e057      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4a38      	ldr	r2, [pc, #224]	; (8005b3c <USB_SetTurnaroundTime+0x124>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d306      	bcc.n	8005a6e <USB_SetTurnaroundTime+0x56>
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4a37      	ldr	r2, [pc, #220]	; (8005b40 <USB_SetTurnaroundTime+0x128>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d202      	bcs.n	8005a6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a68:	230d      	movs	r3, #13
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	e04c      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4a33      	ldr	r2, [pc, #204]	; (8005b40 <USB_SetTurnaroundTime+0x128>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d306      	bcc.n	8005a84 <USB_SetTurnaroundTime+0x6c>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4a32      	ldr	r2, [pc, #200]	; (8005b44 <USB_SetTurnaroundTime+0x12c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d802      	bhi.n	8005a84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a7e:	230c      	movs	r3, #12
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e041      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4a2f      	ldr	r2, [pc, #188]	; (8005b44 <USB_SetTurnaroundTime+0x12c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d906      	bls.n	8005a9a <USB_SetTurnaroundTime+0x82>
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	4a2e      	ldr	r2, [pc, #184]	; (8005b48 <USB_SetTurnaroundTime+0x130>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d802      	bhi.n	8005a9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a94:	230b      	movs	r3, #11
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e036      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	4a2a      	ldr	r2, [pc, #168]	; (8005b48 <USB_SetTurnaroundTime+0x130>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d906      	bls.n	8005ab0 <USB_SetTurnaroundTime+0x98>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	4a29      	ldr	r2, [pc, #164]	; (8005b4c <USB_SetTurnaroundTime+0x134>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d802      	bhi.n	8005ab0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005aaa:	230a      	movs	r3, #10
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e02b      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4a26      	ldr	r2, [pc, #152]	; (8005b4c <USB_SetTurnaroundTime+0x134>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d906      	bls.n	8005ac6 <USB_SetTurnaroundTime+0xae>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4a25      	ldr	r2, [pc, #148]	; (8005b50 <USB_SetTurnaroundTime+0x138>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d202      	bcs.n	8005ac6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ac0:	2309      	movs	r3, #9
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	e020      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	4a21      	ldr	r2, [pc, #132]	; (8005b50 <USB_SetTurnaroundTime+0x138>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d306      	bcc.n	8005adc <USB_SetTurnaroundTime+0xc4>
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	4a20      	ldr	r2, [pc, #128]	; (8005b54 <USB_SetTurnaroundTime+0x13c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d802      	bhi.n	8005adc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	e015      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4a1d      	ldr	r2, [pc, #116]	; (8005b54 <USB_SetTurnaroundTime+0x13c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d906      	bls.n	8005af2 <USB_SetTurnaroundTime+0xda>
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4a1c      	ldr	r2, [pc, #112]	; (8005b58 <USB_SetTurnaroundTime+0x140>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d202      	bcs.n	8005af2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005aec:	2307      	movs	r3, #7
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	e00a      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005af2:	2306      	movs	r3, #6
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	e007      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005afe:	2309      	movs	r3, #9
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e001      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b04:	2309      	movs	r3, #9
 8005b06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	029b      	lsls	r3, r3, #10
 8005b1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005b20:	431a      	orrs	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	00d8acbf 	.word	0x00d8acbf
 8005b38:	00e4e1c0 	.word	0x00e4e1c0
 8005b3c:	00f42400 	.word	0x00f42400
 8005b40:	01067380 	.word	0x01067380
 8005b44:	011a499f 	.word	0x011a499f
 8005b48:	01312cff 	.word	0x01312cff
 8005b4c:	014ca43f 	.word	0x014ca43f
 8005b50:	016e3600 	.word	0x016e3600
 8005b54:	01a6ab1f 	.word	0x01a6ab1f
 8005b58:	01e84800 	.word	0x01e84800

08005b5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f043 0201 	orr.w	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f023 0201 	bic.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d115      	bne.n	8005bee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bce:	2001      	movs	r0, #1
 8005bd0:	f7fb fe86 	bl	80018e0 <HAL_Delay>
      ms++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f001 fa45 	bl	800706a <USB_GetMode>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d01e      	beq.n	8005c24 <USB_SetCurrentMode+0x84>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b31      	cmp	r3, #49	; 0x31
 8005bea:	d9f0      	bls.n	8005bce <USB_SetCurrentMode+0x2e>
 8005bec:	e01a      	b.n	8005c24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d115      	bne.n	8005c20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c00:	2001      	movs	r0, #1
 8005c02:	f7fb fe6d 	bl	80018e0 <HAL_Delay>
      ms++;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f001 fa2c 	bl	800706a <USB_GetMode>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <USB_SetCurrentMode+0x84>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b31      	cmp	r3, #49	; 0x31
 8005c1c:	d9f0      	bls.n	8005c00 <USB_SetCurrentMode+0x60>
 8005c1e:	e001      	b.n	8005c24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e005      	b.n	8005c30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b32      	cmp	r3, #50	; 0x32
 8005c28:	d101      	bne.n	8005c2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c38:	b084      	sub	sp, #16
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b086      	sub	sp, #24
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	e009      	b.n	8005c6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	3340      	adds	r3, #64	; 0x40
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	2200      	movs	r2, #0
 8005c64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b0e      	cmp	r3, #14
 8005c70:	d9f2      	bls.n	8005c58 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d11c      	bne.n	8005cb2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c86:	f043 0302 	orr.w	r3, r3, #2
 8005c8a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	639a      	str	r2, [r3, #56]	; 0x38
 8005cb0:	e00b      	b.n	8005cca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cdc:	4619      	mov	r1, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	680b      	ldr	r3, [r1, #0]
 8005ce8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d10c      	bne.n	8005d0a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d104      	bne.n	8005d00 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f965 	bl	8005fc8 <USB_SetDevSpeed>
 8005cfe:	e008      	b.n	8005d12 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d00:	2101      	movs	r1, #1
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f960 	bl	8005fc8 <USB_SetDevSpeed>
 8005d08:	e003      	b.n	8005d12 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d0a:	2103      	movs	r1, #3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f95b 	bl	8005fc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d12:	2110      	movs	r1, #16
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f8f3 	bl	8005f00 <USB_FlushTxFifo>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f91f 	bl	8005f68 <USB_FlushRxFifo>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	461a      	mov	r2, r3
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d52:	461a      	mov	r2, r3
 8005d54:	2300      	movs	r3, #0
 8005d56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	e043      	b.n	8005de6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d74:	d118      	bne.n	8005da8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10a      	bne.n	8005d92 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	e013      	b.n	8005dba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	e008      	b.n	8005dba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db4:	461a      	mov	r2, r3
 8005db6:	2300      	movs	r3, #0
 8005db8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	2300      	movs	r3, #0
 8005dca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	3301      	adds	r3, #1
 8005de4:	613b      	str	r3, [r7, #16]
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d3b7      	bcc.n	8005d5e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dee:	2300      	movs	r3, #0
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	e043      	b.n	8005e7c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e0a:	d118      	bne.n	8005e3e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e013      	b.n	8005e50 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e34:	461a      	mov	r2, r3
 8005e36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	e008      	b.n	8005e50 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	2300      	movs	r3, #0
 8005e60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d3b7      	bcc.n	8005df4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ea4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d105      	bne.n	8005eb8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	f043 0210 	orr.w	r2, r3, #16
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <USB_DevInit+0x2c4>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f043 0208 	orr.w	r2, r3, #8
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d107      	bne.n	8005eec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ee4:	f043 0304 	orr.w	r3, r3, #4
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ef8:	b004      	add	sp, #16
 8005efa:	4770      	bx	lr
 8005efc:	803c3800 	.word	0x803c3800

08005f00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3301      	adds	r3, #1
 8005f12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4a13      	ldr	r2, [pc, #76]	; (8005f64 <USB_FlushTxFifo+0x64>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d901      	bls.n	8005f20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e01b      	b.n	8005f58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	daf2      	bge.n	8005f0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	019b      	lsls	r3, r3, #6
 8005f30:	f043 0220 	orr.w	r2, r3, #32
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4a08      	ldr	r2, [pc, #32]	; (8005f64 <USB_FlushTxFifo+0x64>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d901      	bls.n	8005f4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e006      	b.n	8005f58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d0f0      	beq.n	8005f38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	00030d40 	.word	0x00030d40

08005f68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3301      	adds	r3, #1
 8005f78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4a11      	ldr	r2, [pc, #68]	; (8005fc4 <USB_FlushRxFifo+0x5c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d901      	bls.n	8005f86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e018      	b.n	8005fb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	daf2      	bge.n	8005f74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2210      	movs	r2, #16
 8005f96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4a08      	ldr	r2, [pc, #32]	; (8005fc4 <USB_FlushRxFifo+0x5c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d901      	bls.n	8005faa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e006      	b.n	8005fb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b10      	cmp	r3, #16
 8005fb4:	d0f0      	beq.n	8005f98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	00030d40 	.word	0x00030d40

08005fc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	68f9      	ldr	r1, [r7, #12]
 8005fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b087      	sub	sp, #28
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0306 	and.w	r3, r3, #6
 8006012:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800601a:	2300      	movs	r3, #0
 800601c:	75fb      	strb	r3, [r7, #23]
 800601e:	e00a      	b.n	8006036 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d002      	beq.n	800602c <USB_GetDevSpeed+0x32>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b06      	cmp	r3, #6
 800602a:	d102      	bne.n	8006032 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800602c:	2302      	movs	r3, #2
 800602e:	75fb      	strb	r3, [r7, #23]
 8006030:	e001      	b.n	8006036 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006032:	230f      	movs	r3, #15
 8006034:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006036:	7dfb      	ldrb	r3, [r7, #23]
}
 8006038:	4618      	mov	r0, r3
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d13a      	bne.n	80060d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	2101      	movs	r1, #1
 8006072:	fa01 f303 	lsl.w	r3, r1, r3
 8006076:	b29b      	uxth	r3, r3
 8006078:	68f9      	ldr	r1, [r7, #12]
 800607a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800607e:	4313      	orrs	r3, r2
 8006080:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d155      	bne.n	8006144 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	791b      	ldrb	r3, [r3, #4]
 80060b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	059b      	lsls	r3, r3, #22
 80060ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060bc:	4313      	orrs	r3, r2
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	0151      	lsls	r1, r2, #5
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	440a      	add	r2, r1
 80060c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	e036      	b.n	8006144 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060dc:	69da      	ldr	r2, [r3, #28]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	2101      	movs	r1, #1
 80060e8:	fa01 f303 	lsl.w	r3, r1, r3
 80060ec:	041b      	lsls	r3, r3, #16
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060f4:	4313      	orrs	r3, r2
 80060f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d11a      	bne.n	8006144 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	791b      	ldrb	r3, [r3, #4]
 8006128:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800612a:	430b      	orrs	r3, r1
 800612c:	4313      	orrs	r3, r2
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800613e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006142:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
	...

08006154 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d161      	bne.n	8006234 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006186:	d11f      	bne.n	80061c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	440a      	add	r2, r1
 800619e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	2101      	movs	r1, #1
 80061da:	fa01 f303 	lsl.w	r3, r1, r3
 80061de:	b29b      	uxth	r3, r3
 80061e0:	43db      	mvns	r3, r3
 80061e2:	68f9      	ldr	r1, [r7, #12]
 80061e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061e8:	4013      	ands	r3, r2
 80061ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	2101      	movs	r1, #1
 80061fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006202:	b29b      	uxth	r3, r3
 8006204:	43db      	mvns	r3, r3
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800620c:	4013      	ands	r3, r2
 800620e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	0159      	lsls	r1, r3, #5
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	440b      	add	r3, r1
 8006226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622a:	4619      	mov	r1, r3
 800622c:	4b35      	ldr	r3, [pc, #212]	; (8006304 <USB_DeactivateEndpoint+0x1b0>)
 800622e:	4013      	ands	r3, r2
 8006230:	600b      	str	r3, [r1, #0]
 8006232:	e060      	b.n	80062f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800624a:	d11f      	bne.n	800628c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	440a      	add	r2, r1
 8006262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006266:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800626a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006286:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800628a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	2101      	movs	r1, #1
 800629e:	fa01 f303 	lsl.w	r3, r1, r3
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	43db      	mvns	r3, r3
 80062a6:	68f9      	ldr	r1, [r7, #12]
 80062a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062ac:	4013      	ands	r3, r2
 80062ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b6:	69da      	ldr	r2, [r3, #28]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	f003 030f 	and.w	r3, r3, #15
 80062c0:	2101      	movs	r1, #1
 80062c2:	fa01 f303 	lsl.w	r3, r1, r3
 80062c6:	041b      	lsls	r3, r3, #16
 80062c8:	43db      	mvns	r3, r3
 80062ca:	68f9      	ldr	r1, [r7, #12]
 80062cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062d0:	4013      	ands	r3, r2
 80062d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	0159      	lsls	r1, r3, #5
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	440b      	add	r3, r1
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	4619      	mov	r1, r3
 80062f0:	4b05      	ldr	r3, [pc, #20]	; (8006308 <USB_DeactivateEndpoint+0x1b4>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	ec337800 	.word	0xec337800
 8006308:	eff37800 	.word	0xeff37800

0800630c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	; 0x28
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	2b01      	cmp	r3, #1
 800632a:	f040 815c 	bne.w	80065e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d132      	bne.n	800639c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	0151      	lsls	r1, r2, #5
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	440a      	add	r2, r1
 800634c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006350:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006354:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006358:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	440a      	add	r2, r1
 8006370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006374:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006378:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006394:	0cdb      	lsrs	r3, r3, #19
 8006396:	04db      	lsls	r3, r3, #19
 8006398:	6113      	str	r3, [r2, #16]
 800639a:	e074      	b.n	8006486 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b6:	0cdb      	lsrs	r3, r3, #19
 80063b8:	04db      	lsls	r3, r3, #19
 80063ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6999      	ldr	r1, [r3, #24]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	440b      	add	r3, r1
 80063f8:	1e59      	subs	r1, r3, #1
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006402:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006404:	4b9d      	ldr	r3, [pc, #628]	; (800667c <USB_EPStartXfer+0x370>)
 8006406:	400b      	ands	r3, r1
 8006408:	69b9      	ldr	r1, [r7, #24]
 800640a:	0148      	lsls	r0, r1, #5
 800640c:	69f9      	ldr	r1, [r7, #28]
 800640e:	4401      	add	r1, r0
 8006410:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006414:	4313      	orrs	r3, r2
 8006416:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800642e:	69b9      	ldr	r1, [r7, #24]
 8006430:	0148      	lsls	r0, r1, #5
 8006432:	69f9      	ldr	r1, [r7, #28]
 8006434:	4401      	add	r1, r0
 8006436:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800643a:	4313      	orrs	r3, r2
 800643c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	791b      	ldrb	r3, [r3, #4]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d11f      	bne.n	8006486 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	440a      	add	r2, r1
 800645c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006460:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006464:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	0151      	lsls	r1, r2, #5
 8006478:	69fa      	ldr	r2, [r7, #28]
 800647a:	440a      	add	r2, r1
 800647c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006480:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006484:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d14b      	bne.n	8006524 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d009      	beq.n	80064a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	461a      	mov	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	791b      	ldrb	r3, [r3, #4]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d128      	bne.n	8006502 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d110      	bne.n	80064e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	e00f      	b.n	8006502 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006500:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	440a      	add	r2, r1
 8006518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800651c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	e133      	b.n	800678c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	440a      	add	r2, r1
 800653a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006542:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	791b      	ldrb	r3, [r3, #4]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d015      	beq.n	8006578 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 811b 	beq.w	800678c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	2101      	movs	r1, #1
 8006568:	fa01 f303 	lsl.w	r3, r1, r3
 800656c:	69f9      	ldr	r1, [r7, #28]
 800656e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006572:	4313      	orrs	r3, r2
 8006574:	634b      	str	r3, [r1, #52]	; 0x34
 8006576:	e109      	b.n	800678c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d110      	bne.n	80065aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	440a      	add	r2, r1
 800659e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	e00f      	b.n	80065ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	69fa      	ldr	r2, [r7, #28]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6919      	ldr	r1, [r3, #16]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	781a      	ldrb	r2, [r3, #0]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	b298      	uxth	r0, r3
 80065d8:	79fb      	ldrb	r3, [r7, #7]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	4603      	mov	r3, r0
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 fade 	bl	8006ba0 <USB_WritePacket>
 80065e4:	e0d2      	b.n	800678c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	69fa      	ldr	r2, [r7, #28]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006600:	0cdb      	lsrs	r3, r3, #19
 8006602:	04db      	lsls	r3, r3, #19
 8006604:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006620:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006624:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006628:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d126      	bne.n	8006680 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006648:	69b9      	ldr	r1, [r7, #24]
 800664a:	0148      	lsls	r0, r1, #5
 800664c:	69f9      	ldr	r1, [r7, #28]
 800664e:	4401      	add	r1, r0
 8006650:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006654:	4313      	orrs	r3, r2
 8006656:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	0151      	lsls	r1, r2, #5
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	440a      	add	r2, r1
 800666e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006676:	6113      	str	r3, [r2, #16]
 8006678:	e03a      	b.n	80066f0 <USB_EPStartXfer+0x3e4>
 800667a:	bf00      	nop
 800667c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	4413      	add	r3, r2
 800668a:	1e5a      	subs	r2, r3, #1
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	fbb2 f3f3 	udiv	r3, r2, r3
 8006694:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	8afa      	ldrh	r2, [r7, #22]
 800669c:	fb03 f202 	mul.w	r2, r3, r2
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	8afb      	ldrh	r3, [r7, #22]
 80066b4:	04d9      	lsls	r1, r3, #19
 80066b6:	4b38      	ldr	r3, [pc, #224]	; (8006798 <USB_EPStartXfer+0x48c>)
 80066b8:	400b      	ands	r3, r1
 80066ba:	69b9      	ldr	r1, [r7, #24]
 80066bc:	0148      	lsls	r0, r1, #5
 80066be:	69f9      	ldr	r1, [r7, #28]
 80066c0:	4401      	add	r1, r0
 80066c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066c6:	4313      	orrs	r3, r2
 80066c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066e0:	69b9      	ldr	r1, [r7, #24]
 80066e2:	0148      	lsls	r0, r1, #5
 80066e4:	69f9      	ldr	r1, [r7, #28]
 80066e6:	4401      	add	r1, r0
 80066e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066ec:	4313      	orrs	r3, r2
 80066ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d10d      	bne.n	8006712 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	6919      	ldr	r1, [r3, #16]
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670e:	460a      	mov	r2, r1
 8006710:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	791b      	ldrb	r3, [r3, #4]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d128      	bne.n	800676c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006726:	2b00      	cmp	r3, #0
 8006728:	d110      	bne.n	800674c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	0151      	lsls	r1, r2, #5
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	440a      	add	r2, r1
 8006740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006744:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	e00f      	b.n	800676c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	0151      	lsls	r1, r2, #5
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	440a      	add	r2, r1
 8006762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800676a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	0151      	lsls	r1, r2, #5
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	440a      	add	r2, r1
 8006782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006786:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800678a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3720      	adds	r7, #32
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	1ff80000 	.word	0x1ff80000

0800679c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	f040 80ce 	bne.w	800695a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d132      	bne.n	800682c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006808:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006824:	0cdb      	lsrs	r3, r3, #19
 8006826:	04db      	lsls	r3, r3, #19
 8006828:	6113      	str	r3, [r2, #16]
 800682a:	e04e      	b.n	80068ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	0151      	lsls	r1, r2, #5
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	440a      	add	r2, r1
 8006842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006846:	0cdb      	lsrs	r3, r3, #19
 8006848:	04db      	lsls	r3, r3, #19
 800684a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006866:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800686a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800686e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	699a      	ldr	r2, [r3, #24]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	429a      	cmp	r2, r3
 800687a:	d903      	bls.n	8006884 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	440a      	add	r2, r1
 800689a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800689e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b0:	691a      	ldr	r2, [r3, #16]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ba:	6939      	ldr	r1, [r7, #16]
 80068bc:	0148      	lsls	r0, r1, #5
 80068be:	6979      	ldr	r1, [r7, #20]
 80068c0:	4401      	add	r1, r0
 80068c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068c6:	4313      	orrs	r3, r2
 80068c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068ca:	79fb      	ldrb	r3, [r7, #7]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d11e      	bne.n	800690e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d009      	beq.n	80068ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e4:	461a      	mov	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	0151      	lsls	r1, r2, #5
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	440a      	add	r2, r1
 8006902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006906:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	e097      	b.n	8006a3e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	440a      	add	r2, r1
 8006924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006928:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800692c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 8083 	beq.w	8006a3e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	2101      	movs	r1, #1
 800694a:	fa01 f303 	lsl.w	r3, r1, r3
 800694e:	6979      	ldr	r1, [r7, #20]
 8006950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006954:	4313      	orrs	r3, r2
 8006956:	634b      	str	r3, [r1, #52]	; 0x34
 8006958:	e071      	b.n	8006a3e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006974:	0cdb      	lsrs	r3, r3, #19
 8006976:	04db      	lsls	r3, r3, #19
 8006978:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	440a      	add	r2, r1
 8006990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006994:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006998:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800699c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	0151      	lsls	r1, r2, #5
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	440a      	add	r2, r1
 80069cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ec:	6939      	ldr	r1, [r7, #16]
 80069ee:	0148      	lsls	r0, r1, #5
 80069f0:	6979      	ldr	r1, [r7, #20]
 80069f2:	4401      	add	r1, r0
 80069f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069f8:	4313      	orrs	r3, r2
 80069fa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80069fc:	79fb      	ldrb	r3, [r7, #7]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d10d      	bne.n	8006a1e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d009      	beq.n	8006a1e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6919      	ldr	r1, [r3, #16]
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1a:	460a      	mov	r2, r1
 8006a1c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	0151      	lsls	r1, r2, #5
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	440a      	add	r2, r1
 8006a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	371c      	adds	r7, #28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	785b      	ldrb	r3, [r3, #1]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d14a      	bne.n	8006b00 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a82:	f040 8086 	bne.w	8006b92 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	7812      	ldrb	r2, [r2, #0]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006aa8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	7812      	ldrb	r2, [r2, #0]
 8006abe:	0151      	lsls	r1, r2, #5
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	440a      	add	r2, r1
 8006ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006acc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f242 7210 	movw	r2, #10000	; 0x2710
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d902      	bls.n	8006ae4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ae2:	e056      	b.n	8006b92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006af8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006afc:	d0e7      	beq.n	8006ace <USB_EPStopXfer+0x82>
 8006afe:	e048      	b.n	8006b92 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b18:	d13b      	bne.n	8006b92 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	7812      	ldrb	r2, [r2, #0]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b3c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	7812      	ldrb	r2, [r2, #0]
 8006b52:	0151      	lsls	r1, r2, #5
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	440a      	add	r2, r1
 8006b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d902      	bls.n	8006b78 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	75fb      	strb	r3, [r7, #23]
          break;
 8006b76:	e00c      	b.n	8006b92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b90:	d0e7      	beq.n	8006b62 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b089      	sub	sp, #36	; 0x24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	4611      	mov	r1, r2
 8006bac:	461a      	mov	r2, r3
 8006bae:	460b      	mov	r3, r1
 8006bb0:	71fb      	strb	r3, [r7, #7]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006bbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d123      	bne.n	8006c0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bc6:	88bb      	ldrh	r3, [r7, #4]
 8006bc8:	3303      	adds	r3, #3
 8006bca:	089b      	lsrs	r3, r3, #2
 8006bcc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006bce:	2300      	movs	r3, #0
 8006bd0:	61bb      	str	r3, [r7, #24]
 8006bd2:	e018      	b.n	8006c06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
 8006bd6:	031a      	lsls	r2, r3, #12
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006be0:	461a      	mov	r2, r3
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	3301      	adds	r3, #1
 8006bec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	3301      	adds	r3, #1
 8006c04:	61bb      	str	r3, [r7, #24]
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d3e2      	bcc.n	8006bd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3724      	adds	r7, #36	; 0x24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b08b      	sub	sp, #44	; 0x2c
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	4613      	mov	r3, r2
 8006c28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	089b      	lsrs	r3, r3, #2
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c3a:	88fb      	ldrh	r3, [r7, #6]
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c42:	2300      	movs	r3, #0
 8006c44:	623b      	str	r3, [r7, #32]
 8006c46:	e014      	b.n	8006c72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	3301      	adds	r3, #1
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	3301      	adds	r3, #1
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	3301      	adds	r3, #1
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	623b      	str	r3, [r7, #32]
 8006c72:	6a3a      	ldr	r2, [r7, #32]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d3e6      	bcc.n	8006c48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c7a:	8bfb      	ldrh	r3, [r7, #30]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d01e      	beq.n	8006cbe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f107 0310 	add.w	r3, r7, #16
 8006c90:	6812      	ldr	r2, [r2, #0]
 8006c92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	701a      	strb	r2, [r3, #0]
      i++;
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	623b      	str	r3, [r7, #32]
      pDest++;
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	3301      	adds	r3, #1
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006cb2:	8bfb      	ldrh	r3, [r7, #30]
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006cb8:	8bfb      	ldrh	r3, [r7, #30]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1ea      	bne.n	8006c94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	372c      	adds	r7, #44	; 0x2c
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d12c      	bne.n	8006d42 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	db12      	blt.n	8006d20 <USB_EPSetStall+0x54>
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00f      	beq.n	8006d20 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d1e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	0151      	lsls	r1, r2, #5
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	440a      	add	r2, r1
 8006d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	e02b      	b.n	8006d9a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	db12      	blt.n	8006d7a <USB_EPSetStall+0xae>
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00f      	beq.n	8006d7a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d78:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d128      	bne.n	8006e16 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006de2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	791b      	ldrb	r3, [r3, #4]
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d003      	beq.n	8006df4 <USB_EPClearStall+0x4c>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	791b      	ldrb	r3, [r3, #4]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d138      	bne.n	8006e66 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	0151      	lsls	r1, r2, #5
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	440a      	add	r2, r1
 8006e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	e027      	b.n	8006e66 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	791b      	ldrb	r3, [r3, #4]
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d003      	beq.n	8006e46 <USB_EPClearStall+0x9e>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	791b      	ldrb	r3, [r3, #4]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d10f      	bne.n	8006e66 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	0151      	lsls	r1, r2, #5
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	440a      	add	r2, r1
 8006e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e64:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e96:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006ea8:	68f9      	ldr	r1, [r7, #12]
 8006eaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006eda:	f023 0303 	bic.w	r3, r3, #3
 8006ede:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eee:	f023 0302 	bic.w	r3, r3, #2
 8006ef2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b085      	sub	sp, #20
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f1c:	f023 0303 	bic.w	r3, r3, #3
 8006f20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f30:	f043 0302 	orr.w	r3, r3, #2
 8006f34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	0c1b      	lsrs	r3, r3, #16
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	b29b      	uxth	r3, r3
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006fe2:	78fb      	ldrb	r3, [r7, #3]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007000:	68bb      	ldr	r3, [r7, #8]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800700e:	b480      	push	{r7}
 8007010:	b087      	sub	sp, #28
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	460b      	mov	r3, r1
 8007018:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007030:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	f003 030f 	and.w	r3, r3, #15
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	fa22 f303 	lsr.w	r3, r2, r3
 800703e:	01db      	lsls	r3, r3, #7
 8007040:	b2db      	uxtb	r3, r3
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	4013      	ands	r3, r2
 800705a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800705c:	68bb      	ldr	r3, [r7, #8]
}
 800705e:	4618      	mov	r0, r3
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	f003 0301 	and.w	r3, r3, #1
}
 800707a:	4618      	mov	r0, r3
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80070a4:	f023 0307 	bic.w	r3, r3, #7
 80070a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	460b      	mov	r3, r1
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	333c      	adds	r3, #60	; 0x3c
 80070e2:	3304      	adds	r3, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	4a26      	ldr	r2, [pc, #152]	; (8007184 <USB_EP0_OutStart+0xb8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d90a      	bls.n	8007106 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007100:	d101      	bne.n	8007106 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	e037      	b.n	8007176 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	461a      	mov	r2, r3
 800710e:	2300      	movs	r3, #0
 8007110:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007134:	f043 0318 	orr.w	r3, r3, #24
 8007138:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007148:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800714c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800714e:	7afb      	ldrb	r3, [r7, #11]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d10f      	bne.n	8007174 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715a:	461a      	mov	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007172:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	4f54300a 	.word	0x4f54300a

08007188 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3301      	adds	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4a13      	ldr	r2, [pc, #76]	; (80071ec <USB_CoreReset+0x64>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d901      	bls.n	80071a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e01b      	b.n	80071de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	daf2      	bge.n	8007194 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	f043 0201 	orr.w	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3301      	adds	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4a09      	ldr	r2, [pc, #36]	; (80071ec <USB_CoreReset+0x64>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d901      	bls.n	80071d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e006      	b.n	80071de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d0f0      	beq.n	80071be <USB_CoreReset+0x36>

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	00030d40 	.word	0x00030d40

080071f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007200:	f002 fc28 	bl	8009a54 <USBD_static_malloc>
 8007204:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d109      	bne.n	8007220 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	32b0      	adds	r2, #176	; 0xb0
 8007216:	2100      	movs	r1, #0
 8007218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800721c:	2302      	movs	r3, #2
 800721e:	e0d4      	b.n	80073ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007220:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007224:	2100      	movs	r1, #0
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f002 fc7c 	bl	8009b24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	32b0      	adds	r2, #176	; 0xb0
 8007236:	68f9      	ldr	r1, [r7, #12]
 8007238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	32b0      	adds	r2, #176	; 0xb0
 8007246:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	7c1b      	ldrb	r3, [r3, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d138      	bne.n	80072ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007258:	4b5e      	ldr	r3, [pc, #376]	; (80073d4 <USBD_CDC_Init+0x1e4>)
 800725a:	7819      	ldrb	r1, [r3, #0]
 800725c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007260:	2202      	movs	r2, #2
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f002 fad3 	bl	800980e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007268:	4b5a      	ldr	r3, [pc, #360]	; (80073d4 <USBD_CDC_Init+0x1e4>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	f003 020f 	and.w	r2, r3, #15
 8007270:	6879      	ldr	r1, [r7, #4]
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	440b      	add	r3, r1
 800727c:	3324      	adds	r3, #36	; 0x24
 800727e:	2201      	movs	r2, #1
 8007280:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007282:	4b55      	ldr	r3, [pc, #340]	; (80073d8 <USBD_CDC_Init+0x1e8>)
 8007284:	7819      	ldrb	r1, [r3, #0]
 8007286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800728a:	2202      	movs	r2, #2
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f002 fabe 	bl	800980e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007292:	4b51      	ldr	r3, [pc, #324]	; (80073d8 <USBD_CDC_Init+0x1e8>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	f003 020f 	and.w	r2, r3, #15
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	440b      	add	r3, r1
 80072a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072aa:	2201      	movs	r2, #1
 80072ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80072ae:	4b4b      	ldr	r3, [pc, #300]	; (80073dc <USBD_CDC_Init+0x1ec>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	f003 020f 	and.w	r2, r3, #15
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	440b      	add	r3, r1
 80072c2:	3326      	adds	r3, #38	; 0x26
 80072c4:	2210      	movs	r2, #16
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	e035      	b.n	8007336 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80072ca:	4b42      	ldr	r3, [pc, #264]	; (80073d4 <USBD_CDC_Init+0x1e4>)
 80072cc:	7819      	ldrb	r1, [r3, #0]
 80072ce:	2340      	movs	r3, #64	; 0x40
 80072d0:	2202      	movs	r2, #2
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f002 fa9b 	bl	800980e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80072d8:	4b3e      	ldr	r3, [pc, #248]	; (80073d4 <USBD_CDC_Init+0x1e4>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	f003 020f 	and.w	r2, r3, #15
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	4613      	mov	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	440b      	add	r3, r1
 80072ec:	3324      	adds	r3, #36	; 0x24
 80072ee:	2201      	movs	r2, #1
 80072f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80072f2:	4b39      	ldr	r3, [pc, #228]	; (80073d8 <USBD_CDC_Init+0x1e8>)
 80072f4:	7819      	ldrb	r1, [r3, #0]
 80072f6:	2340      	movs	r3, #64	; 0x40
 80072f8:	2202      	movs	r2, #2
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f002 fa87 	bl	800980e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007300:	4b35      	ldr	r3, [pc, #212]	; (80073d8 <USBD_CDC_Init+0x1e8>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	f003 020f 	and.w	r2, r3, #15
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	440b      	add	r3, r1
 8007314:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007318:	2201      	movs	r2, #1
 800731a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800731c:	4b2f      	ldr	r3, [pc, #188]	; (80073dc <USBD_CDC_Init+0x1ec>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 020f 	and.w	r2, r3, #15
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	440b      	add	r3, r1
 8007330:	3326      	adds	r3, #38	; 0x26
 8007332:	2210      	movs	r2, #16
 8007334:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007336:	4b29      	ldr	r3, [pc, #164]	; (80073dc <USBD_CDC_Init+0x1ec>)
 8007338:	7819      	ldrb	r1, [r3, #0]
 800733a:	2308      	movs	r3, #8
 800733c:	2203      	movs	r2, #3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f002 fa65 	bl	800980e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007344:	4b25      	ldr	r3, [pc, #148]	; (80073dc <USBD_CDC_Init+0x1ec>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	f003 020f 	and.w	r2, r3, #15
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	3324      	adds	r3, #36	; 0x24
 800735a:	2201      	movs	r2, #1
 800735c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	33b0      	adds	r3, #176	; 0xb0
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007394:	2302      	movs	r3, #2
 8007396:	e018      	b.n	80073ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	7c1b      	ldrb	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073a0:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <USBD_CDC_Init+0x1e8>)
 80073a2:	7819      	ldrb	r1, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f002 fb1c 	bl	80099ec <USBD_LL_PrepareReceive>
 80073b4:	e008      	b.n	80073c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073b6:	4b08      	ldr	r3, [pc, #32]	; (80073d8 <USBD_CDC_Init+0x1e8>)
 80073b8:	7819      	ldrb	r1, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073c0:	2340      	movs	r3, #64	; 0x40
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f002 fb12 	bl	80099ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	2000009b 	.word	0x2000009b
 80073d8:	2000009c 	.word	0x2000009c
 80073dc:	2000009d 	.word	0x2000009d

080073e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80073ec:	4b3a      	ldr	r3, [pc, #232]	; (80074d8 <USBD_CDC_DeInit+0xf8>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f002 fa31 	bl	800985a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80073f8:	4b37      	ldr	r3, [pc, #220]	; (80074d8 <USBD_CDC_DeInit+0xf8>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	f003 020f 	and.w	r2, r3, #15
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	440b      	add	r3, r1
 800740c:	3324      	adds	r3, #36	; 0x24
 800740e:	2200      	movs	r2, #0
 8007410:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007412:	4b32      	ldr	r3, [pc, #200]	; (80074dc <USBD_CDC_DeInit+0xfc>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f002 fa1e 	bl	800985a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800741e:	4b2f      	ldr	r3, [pc, #188]	; (80074dc <USBD_CDC_DeInit+0xfc>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	f003 020f 	and.w	r2, r3, #15
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	440b      	add	r3, r1
 8007432:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007436:	2200      	movs	r2, #0
 8007438:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800743a:	4b29      	ldr	r3, [pc, #164]	; (80074e0 <USBD_CDC_DeInit+0x100>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f002 fa0a 	bl	800985a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007446:	4b26      	ldr	r3, [pc, #152]	; (80074e0 <USBD_CDC_DeInit+0x100>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	f003 020f 	and.w	r2, r3, #15
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	4613      	mov	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	440b      	add	r3, r1
 800745a:	3324      	adds	r3, #36	; 0x24
 800745c:	2200      	movs	r2, #0
 800745e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007460:	4b1f      	ldr	r3, [pc, #124]	; (80074e0 <USBD_CDC_DeInit+0x100>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	f003 020f 	and.w	r2, r3, #15
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	440b      	add	r3, r1
 8007474:	3326      	adds	r3, #38	; 0x26
 8007476:	2200      	movs	r2, #0
 8007478:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	32b0      	adds	r2, #176	; 0xb0
 8007484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01f      	beq.n	80074cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	33b0      	adds	r3, #176	; 0xb0
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	32b0      	adds	r2, #176	; 0xb0
 80074aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f002 fade 	bl	8009a70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	32b0      	adds	r2, #176	; 0xb0
 80074be:	2100      	movs	r1, #0
 80074c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	2000009b 	.word	0x2000009b
 80074dc:	2000009c 	.word	0x2000009c
 80074e0:	2000009d 	.word	0x2000009d

080074e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	32b0      	adds	r2, #176	; 0xb0
 80074f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007510:	2303      	movs	r3, #3
 8007512:	e0bf      	b.n	8007694 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800751c:	2b00      	cmp	r3, #0
 800751e:	d050      	beq.n	80075c2 <USBD_CDC_Setup+0xde>
 8007520:	2b20      	cmp	r3, #32
 8007522:	f040 80af 	bne.w	8007684 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	88db      	ldrh	r3, [r3, #6]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d03a      	beq.n	80075a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	b25b      	sxtb	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	da1b      	bge.n	8007570 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	33b0      	adds	r3, #176	; 0xb0
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800754e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	88d2      	ldrh	r2, [r2, #6]
 8007554:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	88db      	ldrh	r3, [r3, #6]
 800755a:	2b07      	cmp	r3, #7
 800755c:	bf28      	it	cs
 800755e:	2307      	movcs	r3, #7
 8007560:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	89fa      	ldrh	r2, [r7, #14]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 fd43 	bl	8008ff4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800756e:	e090      	b.n	8007692 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	785a      	ldrb	r2, [r3, #1]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	88db      	ldrh	r3, [r3, #6]
 800757e:	2b3f      	cmp	r3, #63	; 0x3f
 8007580:	d803      	bhi.n	800758a <USBD_CDC_Setup+0xa6>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	88db      	ldrh	r3, [r3, #6]
 8007586:	b2da      	uxtb	r2, r3
 8007588:	e000      	b.n	800758c <USBD_CDC_Setup+0xa8>
 800758a:	2240      	movs	r2, #64	; 0x40
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007592:	6939      	ldr	r1, [r7, #16]
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800759a:	461a      	mov	r2, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fd55 	bl	800904c <USBD_CtlPrepareRx>
      break;
 80075a2:	e076      	b.n	8007692 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	33b0      	adds	r3, #176	; 0xb0
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	7850      	ldrb	r0, [r2, #1]
 80075ba:	2200      	movs	r2, #0
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	4798      	blx	r3
      break;
 80075c0:	e067      	b.n	8007692 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	785b      	ldrb	r3, [r3, #1]
 80075c6:	2b0b      	cmp	r3, #11
 80075c8:	d851      	bhi.n	800766e <USBD_CDC_Setup+0x18a>
 80075ca:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <USBD_CDC_Setup+0xec>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	08007601 	.word	0x08007601
 80075d4:	0800767d 	.word	0x0800767d
 80075d8:	0800766f 	.word	0x0800766f
 80075dc:	0800766f 	.word	0x0800766f
 80075e0:	0800766f 	.word	0x0800766f
 80075e4:	0800766f 	.word	0x0800766f
 80075e8:	0800766f 	.word	0x0800766f
 80075ec:	0800766f 	.word	0x0800766f
 80075f0:	0800766f 	.word	0x0800766f
 80075f4:	0800766f 	.word	0x0800766f
 80075f8:	0800762b 	.word	0x0800762b
 80075fc:	08007655 	.word	0x08007655
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b03      	cmp	r3, #3
 800760a:	d107      	bne.n	800761c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800760c:	f107 030a 	add.w	r3, r7, #10
 8007610:	2202      	movs	r2, #2
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 fced 	bl	8008ff4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800761a:	e032      	b.n	8007682 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f001 fc77 	bl	8008f12 <USBD_CtlError>
            ret = USBD_FAIL;
 8007624:	2303      	movs	r3, #3
 8007626:	75fb      	strb	r3, [r7, #23]
          break;
 8007628:	e02b      	b.n	8007682 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b03      	cmp	r3, #3
 8007634:	d107      	bne.n	8007646 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007636:	f107 030d 	add.w	r3, r7, #13
 800763a:	2201      	movs	r2, #1
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 fcd8 	bl	8008ff4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007644:	e01d      	b.n	8007682 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f001 fc62 	bl	8008f12 <USBD_CtlError>
            ret = USBD_FAIL;
 800764e:	2303      	movs	r3, #3
 8007650:	75fb      	strb	r3, [r7, #23]
          break;
 8007652:	e016      	b.n	8007682 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b03      	cmp	r3, #3
 800765e:	d00f      	beq.n	8007680 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 fc55 	bl	8008f12 <USBD_CtlError>
            ret = USBD_FAIL;
 8007668:	2303      	movs	r3, #3
 800766a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800766c:	e008      	b.n	8007680 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 fc4e 	bl	8008f12 <USBD_CtlError>
          ret = USBD_FAIL;
 8007676:	2303      	movs	r3, #3
 8007678:	75fb      	strb	r3, [r7, #23]
          break;
 800767a:	e002      	b.n	8007682 <USBD_CDC_Setup+0x19e>
          break;
 800767c:	bf00      	nop
 800767e:	e008      	b.n	8007692 <USBD_CDC_Setup+0x1ae>
          break;
 8007680:	bf00      	nop
      }
      break;
 8007682:	e006      	b.n	8007692 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 fc43 	bl	8008f12 <USBD_CtlError>
      ret = USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	75fb      	strb	r3, [r7, #23]
      break;
 8007690:	bf00      	nop
  }

  return (uint8_t)ret;
 8007692:	7dfb      	ldrb	r3, [r7, #23]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	32b0      	adds	r2, #176	; 0xb0
 80076ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e065      	b.n	8007792 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	32b0      	adds	r2, #176	; 0xb0
 80076d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	f003 020f 	and.w	r2, r3, #15
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	440b      	add	r3, r1
 80076e8:	3318      	adds	r3, #24
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d02f      	beq.n	8007750 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	f003 020f 	and.w	r2, r3, #15
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	3318      	adds	r3, #24
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	78fb      	ldrb	r3, [r7, #3]
 8007708:	f003 010f 	and.w	r1, r3, #15
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	460b      	mov	r3, r1
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	440b      	add	r3, r1
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4403      	add	r3, r0
 8007718:	3348      	adds	r3, #72	; 0x48
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007720:	fb01 f303 	mul.w	r3, r1, r3
 8007724:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007726:	2b00      	cmp	r3, #0
 8007728:	d112      	bne.n	8007750 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	f003 020f 	and.w	r2, r3, #15
 8007730:	6879      	ldr	r1, [r7, #4]
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	440b      	add	r3, r1
 800773c:	3318      	adds	r3, #24
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007742:	78f9      	ldrb	r1, [r7, #3]
 8007744:	2300      	movs	r3, #0
 8007746:	2200      	movs	r2, #0
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f002 f92e 	bl	80099aa <USBD_LL_Transmit>
 800774e:	e01f      	b.n	8007790 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2200      	movs	r2, #0
 8007754:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	33b0      	adds	r3, #176	; 0xb0
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d010      	beq.n	8007790 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	33b0      	adds	r3, #176	; 0xb0
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800778c:	78fa      	ldrb	r2, [r7, #3]
 800778e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	460b      	mov	r3, r1
 80077a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	32b0      	adds	r2, #176	; 0xb0
 80077b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	32b0      	adds	r2, #176	; 0xb0
 80077c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e01a      	b.n	8007802 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f002 f92c 	bl	8009a2e <USBD_LL_GetRxDataSize>
 80077d6:	4602      	mov	r2, r0
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	33b0      	adds	r3, #176	; 0xb0
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077fc:	4611      	mov	r1, r2
 80077fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	32b0      	adds	r2, #176	; 0xb0
 800781c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007820:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007828:	2303      	movs	r3, #3
 800782a:	e025      	b.n	8007878 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	33b0      	adds	r3, #176	; 0xb0
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01a      	beq.n	8007876 <USBD_CDC_EP0_RxReady+0x6c>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007846:	2bff      	cmp	r3, #255	; 0xff
 8007848:	d015      	beq.n	8007876 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	33b0      	adds	r3, #176	; 0xb0
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007862:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800786a:	b292      	uxth	r2, r2
 800786c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	22ff      	movs	r2, #255	; 0xff
 8007872:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007888:	2182      	movs	r1, #130	; 0x82
 800788a:	4818      	ldr	r0, [pc, #96]	; (80078ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800788c:	f000 fd09 	bl	80082a2 <USBD_GetEpDesc>
 8007890:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007892:	2101      	movs	r1, #1
 8007894:	4815      	ldr	r0, [pc, #84]	; (80078ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007896:	f000 fd04 	bl	80082a2 <USBD_GetEpDesc>
 800789a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800789c:	2181      	movs	r1, #129	; 0x81
 800789e:	4813      	ldr	r0, [pc, #76]	; (80078ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 80078a0:	f000 fcff 	bl	80082a2 <USBD_GetEpDesc>
 80078a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2210      	movs	r2, #16
 80078b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d006      	beq.n	80078c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078c0:	711a      	strb	r2, [r3, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d006      	beq.n	80078da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078d4:	711a      	strb	r2, [r3, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2243      	movs	r2, #67	; 0x43
 80078de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078e0:	4b02      	ldr	r3, [pc, #8]	; (80078ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000058 	.word	0x20000058

080078f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078f8:	2182      	movs	r1, #130	; 0x82
 80078fa:	4818      	ldr	r0, [pc, #96]	; (800795c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078fc:	f000 fcd1 	bl	80082a2 <USBD_GetEpDesc>
 8007900:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007902:	2101      	movs	r1, #1
 8007904:	4815      	ldr	r0, [pc, #84]	; (800795c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007906:	f000 fccc 	bl	80082a2 <USBD_GetEpDesc>
 800790a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800790c:	2181      	movs	r1, #129	; 0x81
 800790e:	4813      	ldr	r0, [pc, #76]	; (800795c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007910:	f000 fcc7 	bl	80082a2 <USBD_GetEpDesc>
 8007914:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2210      	movs	r2, #16
 8007920:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d006      	beq.n	8007936 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	2200      	movs	r2, #0
 800792c:	711a      	strb	r2, [r3, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f042 0202 	orr.w	r2, r2, #2
 8007934:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d006      	beq.n	800794a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	711a      	strb	r2, [r3, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f042 0202 	orr.w	r2, r2, #2
 8007948:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2243      	movs	r2, #67	; 0x43
 800794e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007950:	4b02      	ldr	r3, [pc, #8]	; (800795c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20000058 	.word	0x20000058

08007960 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007968:	2182      	movs	r1, #130	; 0x82
 800796a:	4818      	ldr	r0, [pc, #96]	; (80079cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800796c:	f000 fc99 	bl	80082a2 <USBD_GetEpDesc>
 8007970:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007972:	2101      	movs	r1, #1
 8007974:	4815      	ldr	r0, [pc, #84]	; (80079cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007976:	f000 fc94 	bl	80082a2 <USBD_GetEpDesc>
 800797a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800797c:	2181      	movs	r1, #129	; 0x81
 800797e:	4813      	ldr	r0, [pc, #76]	; (80079cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007980:	f000 fc8f 	bl	80082a2 <USBD_GetEpDesc>
 8007984:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	2210      	movs	r2, #16
 8007990:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d006      	beq.n	80079a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	2200      	movs	r2, #0
 800799c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079a0:	711a      	strb	r2, [r3, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d006      	beq.n	80079ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079b4:	711a      	strb	r2, [r3, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2243      	movs	r2, #67	; 0x43
 80079be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079c0:	4b02      	ldr	r3, [pc, #8]	; (80079cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000058 	.word	0x20000058

080079d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	220a      	movs	r2, #10
 80079dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80079de:	4b03      	ldr	r3, [pc, #12]	; (80079ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	20000014 	.word	0x20000014

080079f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e009      	b.n	8007a18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	33b0      	adds	r3, #176	; 0xb0
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	32b0      	adds	r2, #176	; 0xb0
 8007a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e008      	b.n	8007a5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	371c      	adds	r7, #28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	32b0      	adds	r2, #176	; 0xb0
 8007a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e004      	b.n	8007a96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
	...

08007aa4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	32b0      	adds	r2, #176	; 0xb0
 8007ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	32b0      	adds	r2, #176	; 0xb0
 8007ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e018      	b.n	8007b04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	7c1b      	ldrb	r3, [r3, #16]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ada:	4b0c      	ldr	r3, [pc, #48]	; (8007b0c <USBD_CDC_ReceivePacket+0x68>)
 8007adc:	7819      	ldrb	r1, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 ff7f 	bl	80099ec <USBD_LL_PrepareReceive>
 8007aee:	e008      	b.n	8007b02 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007af0:	4b06      	ldr	r3, [pc, #24]	; (8007b0c <USBD_CDC_ReceivePacket+0x68>)
 8007af2:	7819      	ldrb	r1, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007afa:	2340      	movs	r3, #64	; 0x40
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 ff75 	bl	80099ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	2000009c 	.word	0x2000009c

08007b10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e01f      	b.n	8007b68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	79fa      	ldrb	r2, [r7, #7]
 8007b5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f001 fdef 	bl	8009740 <USBD_LL_Init>
 8007b62:	4603      	mov	r3, r0
 8007b64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e025      	b.n	8007bd4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	32ae      	adds	r2, #174	; 0xae
 8007b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00f      	beq.n	8007bc4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	32ae      	adds	r2, #174	; 0xae
 8007bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb4:	f107 020e 	add.w	r2, r7, #14
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4798      	blx	r3
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 fdf7 	bl	80097d8 <USBD_LL_Start>
 8007bea:	4603      	mov	r3, r0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	460b      	mov	r3, r1
 8007c14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d009      	beq.n	8007c38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	4798      	blx	r3
 8007c34:	4603      	mov	r3, r0
 8007c36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	78fa      	ldrb	r2, [r7, #3]
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f001 f908 	bl	8008e9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d01a      	beq.n	8007ce8 <USBD_LL_SetupStage+0x72>
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d822      	bhi.n	8007cfc <USBD_LL_SetupStage+0x86>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <USBD_LL_SetupStage+0x4a>
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d00a      	beq.n	8007cd4 <USBD_LL_SetupStage+0x5e>
 8007cbe:	e01d      	b.n	8007cfc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fb5f 	bl	800838c <USBD_StdDevReq>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd2:	e020      	b.n	8007d16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fbc7 	bl	8008470 <USBD_StdItfReq>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce6:	e016      	b.n	8007d16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fc29 	bl	8008548 <USBD_StdEPReq>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8007cfa:	e00c      	b.n	8007d16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f001 fdc4 	bl	8009898 <USBD_LL_StallEP>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73fb      	strb	r3, [r7, #15]
      break;
 8007d14:	bf00      	nop
  }

  return ret;
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007d32:	7afb      	ldrb	r3, [r7, #11]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d16e      	bne.n	8007e16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	f040 8098 	bne.w	8007e7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d913      	bls.n	8007d80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	1ad2      	subs	r2, r2, r3
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	bf28      	it	cs
 8007d72:	4613      	movcs	r3, r2
 8007d74:	461a      	mov	r2, r3
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f001 f984 	bl	8009086 <USBD_CtlContinueRx>
 8007d7e:	e07d      	b.n	8007e7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d86:	f003 031f 	and.w	r3, r3, #31
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d014      	beq.n	8007db8 <USBD_LL_DataOutStage+0x98>
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d81d      	bhi.n	8007dce <USBD_LL_DataOutStage+0xae>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <USBD_LL_DataOutStage+0x7c>
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d003      	beq.n	8007da2 <USBD_LL_DataOutStage+0x82>
 8007d9a:	e018      	b.n	8007dce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	75bb      	strb	r3, [r7, #22]
            break;
 8007da0:	e018      	b.n	8007dd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	4619      	mov	r1, r3
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 fa5e 	bl	800826e <USBD_CoreFindIF>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75bb      	strb	r3, [r7, #22]
            break;
 8007db6:	e00d      	b.n	8007dd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 fa60 	bl	8008288 <USBD_CoreFindEP>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	75bb      	strb	r3, [r7, #22]
            break;
 8007dcc:	e002      	b.n	8007dd4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	75bb      	strb	r3, [r7, #22]
            break;
 8007dd2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007dd4:	7dbb      	ldrb	r3, [r7, #22]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d119      	bne.n	8007e0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d113      	bne.n	8007e0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007de6:	7dba      	ldrb	r2, [r7, #22]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	32ae      	adds	r2, #174	; 0xae
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00b      	beq.n	8007e0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007df6:	7dba      	ldrb	r2, [r7, #22]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007dfe:	7dba      	ldrb	r2, [r7, #22]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	32ae      	adds	r2, #174	; 0xae
 8007e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f001 f94a 	bl	80090a8 <USBD_CtlSendStatus>
 8007e14:	e032      	b.n	8007e7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	4619      	mov	r1, r3
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f000 fa31 	bl	8008288 <USBD_CoreFindEP>
 8007e26:	4603      	mov	r3, r0
 8007e28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e2a:	7dbb      	ldrb	r3, [r7, #22]
 8007e2c:	2bff      	cmp	r3, #255	; 0xff
 8007e2e:	d025      	beq.n	8007e7c <USBD_LL_DataOutStage+0x15c>
 8007e30:	7dbb      	ldrb	r3, [r7, #22]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d122      	bne.n	8007e7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d117      	bne.n	8007e72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e42:	7dba      	ldrb	r2, [r7, #22]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	32ae      	adds	r2, #174	; 0xae
 8007e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00f      	beq.n	8007e72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007e52:	7dba      	ldrb	r2, [r7, #22]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e5a:	7dba      	ldrb	r2, [r7, #22]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	32ae      	adds	r2, #174	; 0xae
 8007e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	7afa      	ldrb	r2, [r7, #11]
 8007e68:	4611      	mov	r1, r2
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	4798      	blx	r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	e000      	b.n	8007e7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b086      	sub	sp, #24
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	607a      	str	r2, [r7, #4]
 8007e92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e94:	7afb      	ldrb	r3, [r7, #11]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d16f      	bne.n	8007f7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3314      	adds	r3, #20
 8007e9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d15a      	bne.n	8007f60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d914      	bls.n	8007ee0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f001 f8ac 	bl	800902a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f001 fd87 	bl	80099ec <USBD_LL_PrepareReceive>
 8007ede:	e03f      	b.n	8007f60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d11c      	bne.n	8007f26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d316      	bcc.n	8007f26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d20f      	bcs.n	8007f26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f06:	2200      	movs	r2, #0
 8007f08:	2100      	movs	r1, #0
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f001 f88d 	bl	800902a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f001 fd64 	bl	80099ec <USBD_LL_PrepareReceive>
 8007f24:	e01c      	b.n	8007f60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d10f      	bne.n	8007f52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d009      	beq.n	8007f52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f52:	2180      	movs	r1, #128	; 0x80
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f001 fc9f 	bl	8009898 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f001 f8b7 	bl	80090ce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d03a      	beq.n	8007fe0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f7ff fe42 	bl	8007bf4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f78:	e032      	b.n	8007fe0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f7a:	7afb      	ldrb	r3, [r7, #11]
 8007f7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	4619      	mov	r1, r3
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 f97f 	bl	8008288 <USBD_CoreFindEP>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	2bff      	cmp	r3, #255	; 0xff
 8007f92:	d025      	beq.n	8007fe0 <USBD_LL_DataInStage+0x15a>
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d122      	bne.n	8007fe0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d11c      	bne.n	8007fe0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007fa6:	7dfa      	ldrb	r2, [r7, #23]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	32ae      	adds	r2, #174	; 0xae
 8007fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d014      	beq.n	8007fe0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007fb6:	7dfa      	ldrb	r2, [r7, #23]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007fbe:	7dfa      	ldrb	r2, [r7, #23]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	32ae      	adds	r2, #174	; 0xae
 8007fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	7afa      	ldrb	r2, [r7, #11]
 8007fcc:	4611      	mov	r1, r2
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	4798      	blx	r3
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007fd6:	7dbb      	ldrb	r3, [r7, #22]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007fdc:	7dbb      	ldrb	r3, [r7, #22]
 8007fde:	e000      	b.n	8007fe2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008022:	2b00      	cmp	r3, #0
 8008024:	d014      	beq.n	8008050 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00e      	beq.n	8008050 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6852      	ldr	r2, [r2, #4]
 800803e:	b2d2      	uxtb	r2, r2
 8008040:	4611      	mov	r1, r2
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800804c:	2303      	movs	r3, #3
 800804e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008050:	2340      	movs	r3, #64	; 0x40
 8008052:	2200      	movs	r2, #0
 8008054:	2100      	movs	r1, #0
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 fbd9 	bl	800980e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2240      	movs	r2, #64	; 0x40
 8008068:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800806c:	2340      	movs	r3, #64	; 0x40
 800806e:	2200      	movs	r2, #0
 8008070:	2180      	movs	r1, #128	; 0x80
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 fbcb 	bl	800980e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2240      	movs	r2, #64	; 0x40
 8008082:	621a      	str	r2, [r3, #32]

  return ret;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	460b      	mov	r3, r1
 8008098:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	78fa      	ldrb	r2, [r7, #3]
 800809e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2204      	movs	r2, #4
 80080c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b04      	cmp	r3, #4
 80080ec:	d106      	bne.n	80080fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b03      	cmp	r3, #3
 800811c:	d110      	bne.n	8008140 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00b      	beq.n	8008140 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d005      	beq.n	8008140 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	32ae      	adds	r2, #174	; 0xae
 8008160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008168:	2303      	movs	r3, #3
 800816a:	e01c      	b.n	80081a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b03      	cmp	r3, #3
 8008176:	d115      	bne.n	80081a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	32ae      	adds	r2, #174	; 0xae
 8008182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00b      	beq.n	80081a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	32ae      	adds	r2, #174	; 0xae
 8008196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	78fa      	ldrb	r2, [r7, #3]
 800819e:	4611      	mov	r1, r2
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	32ae      	adds	r2, #174	; 0xae
 80081c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e01c      	b.n	800820a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b03      	cmp	r3, #3
 80081da:	d115      	bne.n	8008208 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	32ae      	adds	r2, #174	; 0xae
 80081e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00b      	beq.n	8008208 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	32ae      	adds	r2, #174	; 0xae
 80081fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	78fa      	ldrb	r2, [r7, #3]
 8008202:	4611      	mov	r1, r2
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00e      	beq.n	8008264 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	6852      	ldr	r2, [r2, #4]
 8008252:	b2d2      	uxtb	r2, r2
 8008254:	4611      	mov	r1, r2
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008260:	2303      	movs	r3, #3
 8008262:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800827a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800827c:	4618      	mov	r0, r3
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008294:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b086      	sub	sp, #24
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	885b      	ldrh	r3, [r3, #2]
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d920      	bls.n	800830c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80082d2:	e013      	b.n	80082fc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80082d4:	f107 030a 	add.w	r3, r7, #10
 80082d8:	4619      	mov	r1, r3
 80082da:	6978      	ldr	r0, [r7, #20]
 80082dc:	f000 f81b 	bl	8008316 <USBD_GetNextDesc>
 80082e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	785b      	ldrb	r3, [r3, #1]
 80082e6:	2b05      	cmp	r3, #5
 80082e8:	d108      	bne.n	80082fc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	789b      	ldrb	r3, [r3, #2]
 80082f2:	78fa      	ldrb	r2, [r7, #3]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d008      	beq.n	800830a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	885b      	ldrh	r3, [r3, #2]
 8008300:	b29a      	uxth	r2, r3
 8008302:	897b      	ldrh	r3, [r7, #10]
 8008304:	429a      	cmp	r2, r3
 8008306:	d8e5      	bhi.n	80082d4 <USBD_GetEpDesc+0x32>
 8008308:	e000      	b.n	800830c <USBD_GetEpDesc+0x6a>
          break;
 800830a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800830c:	693b      	ldr	r3, [r7, #16]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008316:	b480      	push	{r7}
 8008318:	b085      	sub	sp, #20
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	881a      	ldrh	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	b29b      	uxth	r3, r3
 800832e:	4413      	add	r3, r2
 8008330:	b29a      	uxth	r2, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4413      	add	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008342:	68fb      	ldr	r3, [r7, #12]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	3301      	adds	r3, #1
 8008366:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800836e:	8a3b      	ldrh	r3, [r7, #16]
 8008370:	021b      	lsls	r3, r3, #8
 8008372:	b21a      	sxth	r2, r3
 8008374:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008378:	4313      	orrs	r3, r2
 800837a:	b21b      	sxth	r3, r3
 800837c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800837e:	89fb      	ldrh	r3, [r7, #14]
}
 8008380:	4618      	mov	r0, r3
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083a2:	2b40      	cmp	r3, #64	; 0x40
 80083a4:	d005      	beq.n	80083b2 <USBD_StdDevReq+0x26>
 80083a6:	2b40      	cmp	r3, #64	; 0x40
 80083a8:	d857      	bhi.n	800845a <USBD_StdDevReq+0xce>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00f      	beq.n	80083ce <USBD_StdDevReq+0x42>
 80083ae:	2b20      	cmp	r3, #32
 80083b0:	d153      	bne.n	800845a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	32ae      	adds	r2, #174	; 0xae
 80083bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	4798      	blx	r3
 80083c8:	4603      	mov	r3, r0
 80083ca:	73fb      	strb	r3, [r7, #15]
      break;
 80083cc:	e04a      	b.n	8008464 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	785b      	ldrb	r3, [r3, #1]
 80083d2:	2b09      	cmp	r3, #9
 80083d4:	d83b      	bhi.n	800844e <USBD_StdDevReq+0xc2>
 80083d6:	a201      	add	r2, pc, #4	; (adr r2, 80083dc <USBD_StdDevReq+0x50>)
 80083d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083dc:	08008431 	.word	0x08008431
 80083e0:	08008445 	.word	0x08008445
 80083e4:	0800844f 	.word	0x0800844f
 80083e8:	0800843b 	.word	0x0800843b
 80083ec:	0800844f 	.word	0x0800844f
 80083f0:	0800840f 	.word	0x0800840f
 80083f4:	08008405 	.word	0x08008405
 80083f8:	0800844f 	.word	0x0800844f
 80083fc:	08008427 	.word	0x08008427
 8008400:	08008419 	.word	0x08008419
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fa3c 	bl	8008884 <USBD_GetDescriptor>
          break;
 800840c:	e024      	b.n	8008458 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fba1 	bl	8008b58 <USBD_SetAddress>
          break;
 8008416:	e01f      	b.n	8008458 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fbe0 	bl	8008be0 <USBD_SetConfig>
 8008420:	4603      	mov	r3, r0
 8008422:	73fb      	strb	r3, [r7, #15]
          break;
 8008424:	e018      	b.n	8008458 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fc83 	bl	8008d34 <USBD_GetConfig>
          break;
 800842e:	e013      	b.n	8008458 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fcb4 	bl	8008da0 <USBD_GetStatus>
          break;
 8008438:	e00e      	b.n	8008458 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fce3 	bl	8008e08 <USBD_SetFeature>
          break;
 8008442:	e009      	b.n	8008458 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fd07 	bl	8008e5a <USBD_ClrFeature>
          break;
 800844c:	e004      	b.n	8008458 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fd5e 	bl	8008f12 <USBD_CtlError>
          break;
 8008456:	bf00      	nop
      }
      break;
 8008458:	e004      	b.n	8008464 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fd58 	bl	8008f12 <USBD_CtlError>
      break;
 8008462:	bf00      	nop
  }

  return ret;
 8008464:	7bfb      	ldrb	r3, [r7, #15]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop

08008470 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008486:	2b40      	cmp	r3, #64	; 0x40
 8008488:	d005      	beq.n	8008496 <USBD_StdItfReq+0x26>
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d852      	bhi.n	8008534 <USBD_StdItfReq+0xc4>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <USBD_StdItfReq+0x26>
 8008492:	2b20      	cmp	r3, #32
 8008494:	d14e      	bne.n	8008534 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800849c:	b2db      	uxtb	r3, r3
 800849e:	3b01      	subs	r3, #1
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d840      	bhi.n	8008526 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	889b      	ldrh	r3, [r3, #4]
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d836      	bhi.n	800851c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	889b      	ldrh	r3, [r3, #4]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff fed9 	bl	800826e <USBD_CoreFindIF>
 80084bc:	4603      	mov	r3, r0
 80084be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	2bff      	cmp	r3, #255	; 0xff
 80084c4:	d01d      	beq.n	8008502 <USBD_StdItfReq+0x92>
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d11a      	bne.n	8008502 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80084cc:	7bba      	ldrb	r2, [r7, #14]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	32ae      	adds	r2, #174	; 0xae
 80084d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00f      	beq.n	80084fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80084dc:	7bba      	ldrb	r2, [r7, #14]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084e4:	7bba      	ldrb	r2, [r7, #14]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	32ae      	adds	r2, #174	; 0xae
 80084ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
 80084f6:	4603      	mov	r3, r0
 80084f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084fa:	e004      	b.n	8008506 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80084fc:	2303      	movs	r3, #3
 80084fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008500:	e001      	b.n	8008506 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008502:	2303      	movs	r3, #3
 8008504:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	88db      	ldrh	r3, [r3, #6]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d110      	bne.n	8008530 <USBD_StdItfReq+0xc0>
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10d      	bne.n	8008530 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fdc7 	bl	80090a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800851a:	e009      	b.n	8008530 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fcf7 	bl	8008f12 <USBD_CtlError>
          break;
 8008524:	e004      	b.n	8008530 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fcf2 	bl	8008f12 <USBD_CtlError>
          break;
 800852e:	e000      	b.n	8008532 <USBD_StdItfReq+0xc2>
          break;
 8008530:	bf00      	nop
      }
      break;
 8008532:	e004      	b.n	800853e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fceb 	bl	8008f12 <USBD_CtlError>
      break;
 800853c:	bf00      	nop
  }

  return ret;
 800853e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	889b      	ldrh	r3, [r3, #4]
 800855a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008564:	2b40      	cmp	r3, #64	; 0x40
 8008566:	d007      	beq.n	8008578 <USBD_StdEPReq+0x30>
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	f200 817f 	bhi.w	800886c <USBD_StdEPReq+0x324>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d02a      	beq.n	80085c8 <USBD_StdEPReq+0x80>
 8008572:	2b20      	cmp	r3, #32
 8008574:	f040 817a 	bne.w	800886c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff fe83 	bl	8008288 <USBD_CoreFindEP>
 8008582:	4603      	mov	r3, r0
 8008584:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008586:	7b7b      	ldrb	r3, [r7, #13]
 8008588:	2bff      	cmp	r3, #255	; 0xff
 800858a:	f000 8174 	beq.w	8008876 <USBD_StdEPReq+0x32e>
 800858e:	7b7b      	ldrb	r3, [r7, #13]
 8008590:	2b00      	cmp	r3, #0
 8008592:	f040 8170 	bne.w	8008876 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008596:	7b7a      	ldrb	r2, [r7, #13]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800859e:	7b7a      	ldrb	r2, [r7, #13]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	32ae      	adds	r2, #174	; 0xae
 80085a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 8163 	beq.w	8008876 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80085b0:	7b7a      	ldrb	r2, [r7, #13]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	32ae      	adds	r2, #174	; 0xae
 80085b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	4798      	blx	r3
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085c6:	e156      	b.n	8008876 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d008      	beq.n	80085e2 <USBD_StdEPReq+0x9a>
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	f300 8145 	bgt.w	8008860 <USBD_StdEPReq+0x318>
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 809b 	beq.w	8008712 <USBD_StdEPReq+0x1ca>
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d03c      	beq.n	800865a <USBD_StdEPReq+0x112>
 80085e0:	e13e      	b.n	8008860 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d002      	beq.n	80085f4 <USBD_StdEPReq+0xac>
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d016      	beq.n	8008620 <USBD_StdEPReq+0xd8>
 80085f2:	e02c      	b.n	800864e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00d      	beq.n	8008616 <USBD_StdEPReq+0xce>
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b80      	cmp	r3, #128	; 0x80
 80085fe:	d00a      	beq.n	8008616 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f001 f947 	bl	8009898 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800860a:	2180      	movs	r1, #128	; 0x80
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f943 	bl	8009898 <USBD_LL_StallEP>
 8008612:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008614:	e020      	b.n	8008658 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fc7a 	bl	8008f12 <USBD_CtlError>
              break;
 800861e:	e01b      	b.n	8008658 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	885b      	ldrh	r3, [r3, #2]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10e      	bne.n	8008646 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00b      	beq.n	8008646 <USBD_StdEPReq+0xfe>
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	2b80      	cmp	r3, #128	; 0x80
 8008632:	d008      	beq.n	8008646 <USBD_StdEPReq+0xfe>
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	88db      	ldrh	r3, [r3, #6]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d104      	bne.n	8008646 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 f929 	bl	8009898 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fd2e 	bl	80090a8 <USBD_CtlSendStatus>

              break;
 800864c:	e004      	b.n	8008658 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fc5e 	bl	8008f12 <USBD_CtlError>
              break;
 8008656:	bf00      	nop
          }
          break;
 8008658:	e107      	b.n	800886a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d002      	beq.n	800866c <USBD_StdEPReq+0x124>
 8008666:	2b03      	cmp	r3, #3
 8008668:	d016      	beq.n	8008698 <USBD_StdEPReq+0x150>
 800866a:	e04b      	b.n	8008704 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00d      	beq.n	800868e <USBD_StdEPReq+0x146>
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	2b80      	cmp	r3, #128	; 0x80
 8008676:	d00a      	beq.n	800868e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 f90b 	bl	8009898 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008682:	2180      	movs	r1, #128	; 0x80
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 f907 	bl	8009898 <USBD_LL_StallEP>
 800868a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800868c:	e040      	b.n	8008710 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fc3e 	bl	8008f12 <USBD_CtlError>
              break;
 8008696:	e03b      	b.n	8008710 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	885b      	ldrh	r3, [r3, #2]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d136      	bne.n	800870e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d004      	beq.n	80086b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 f911 	bl	80098d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fcf7 	bl	80090a8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff fde2 	bl	8008288 <USBD_CoreFindEP>
 80086c4:	4603      	mov	r3, r0
 80086c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086c8:	7b7b      	ldrb	r3, [r7, #13]
 80086ca:	2bff      	cmp	r3, #255	; 0xff
 80086cc:	d01f      	beq.n	800870e <USBD_StdEPReq+0x1c6>
 80086ce:	7b7b      	ldrb	r3, [r7, #13]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d11c      	bne.n	800870e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80086d4:	7b7a      	ldrb	r2, [r7, #13]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80086dc:	7b7a      	ldrb	r2, [r7, #13]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	32ae      	adds	r2, #174	; 0xae
 80086e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d010      	beq.n	800870e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086ec:	7b7a      	ldrb	r2, [r7, #13]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	32ae      	adds	r2, #174	; 0xae
 80086f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	4798      	blx	r3
 80086fe:	4603      	mov	r3, r0
 8008700:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008702:	e004      	b.n	800870e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fc03 	bl	8008f12 <USBD_CtlError>
              break;
 800870c:	e000      	b.n	8008710 <USBD_StdEPReq+0x1c8>
              break;
 800870e:	bf00      	nop
          }
          break;
 8008710:	e0ab      	b.n	800886a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b02      	cmp	r3, #2
 800871c:	d002      	beq.n	8008724 <USBD_StdEPReq+0x1dc>
 800871e:	2b03      	cmp	r3, #3
 8008720:	d032      	beq.n	8008788 <USBD_StdEPReq+0x240>
 8008722:	e097      	b.n	8008854 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d007      	beq.n	800873a <USBD_StdEPReq+0x1f2>
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	2b80      	cmp	r3, #128	; 0x80
 800872e:	d004      	beq.n	800873a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fbed 	bl	8008f12 <USBD_CtlError>
                break;
 8008738:	e091      	b.n	800885e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800873a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800873e:	2b00      	cmp	r3, #0
 8008740:	da0b      	bge.n	800875a <USBD_StdEPReq+0x212>
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	3310      	adds	r3, #16
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	4413      	add	r3, r2
 8008756:	3304      	adds	r3, #4
 8008758:	e00b      	b.n	8008772 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008760:	4613      	mov	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	4413      	add	r3, r2
 8008770:	3304      	adds	r3, #4
 8008772:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2202      	movs	r2, #2
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fc37 	bl	8008ff4 <USBD_CtlSendData>
              break;
 8008786:	e06a      	b.n	800885e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800878c:	2b00      	cmp	r3, #0
 800878e:	da11      	bge.n	80087b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	f003 020f 	and.w	r2, r3, #15
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	4613      	mov	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	3324      	adds	r3, #36	; 0x24
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d117      	bne.n	80087da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fbb0 	bl	8008f12 <USBD_CtlError>
                  break;
 80087b2:	e054      	b.n	800885e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	f003 020f 	and.w	r2, r3, #15
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	4613      	mov	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	440b      	add	r3, r1
 80087c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d104      	bne.n	80087da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fb9d 	bl	8008f12 <USBD_CtlError>
                  break;
 80087d8:	e041      	b.n	800885e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	da0b      	bge.n	80087fa <USBD_StdEPReq+0x2b2>
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087e8:	4613      	mov	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	3310      	adds	r3, #16
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	4413      	add	r3, r2
 80087f6:	3304      	adds	r3, #4
 80087f8:	e00b      	b.n	8008812 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008800:	4613      	mov	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	4413      	add	r3, r2
 8008810:	3304      	adds	r3, #4
 8008812:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <USBD_StdEPReq+0x2d8>
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	2b80      	cmp	r3, #128	; 0x80
 800881e:	d103      	bne.n	8008828 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2200      	movs	r2, #0
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	e00e      	b.n	8008846 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008828:	7bbb      	ldrb	r3, [r7, #14]
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 f871 	bl	8009914 <USBD_LL_IsStallEP>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2201      	movs	r2, #1
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	e002      	b.n	8008846 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2202      	movs	r2, #2
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fbd1 	bl	8008ff4 <USBD_CtlSendData>
              break;
 8008852:	e004      	b.n	800885e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fb5b 	bl	8008f12 <USBD_CtlError>
              break;
 800885c:	bf00      	nop
          }
          break;
 800885e:	e004      	b.n	800886a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fb55 	bl	8008f12 <USBD_CtlError>
          break;
 8008868:	bf00      	nop
      }
      break;
 800886a:	e005      	b.n	8008878 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fb4f 	bl	8008f12 <USBD_CtlError>
      break;
 8008874:	e000      	b.n	8008878 <USBD_StdEPReq+0x330>
      break;
 8008876:	bf00      	nop
  }

  return ret;
 8008878:	7bfb      	ldrb	r3, [r7, #15]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
	...

08008884 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	885b      	ldrh	r3, [r3, #2]
 800889e:	0a1b      	lsrs	r3, r3, #8
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	2b06      	cmp	r3, #6
 80088a6:	f200 8128 	bhi.w	8008afa <USBD_GetDescriptor+0x276>
 80088aa:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <USBD_GetDescriptor+0x2c>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	080088cd 	.word	0x080088cd
 80088b4:	080088e5 	.word	0x080088e5
 80088b8:	08008925 	.word	0x08008925
 80088bc:	08008afb 	.word	0x08008afb
 80088c0:	08008afb 	.word	0x08008afb
 80088c4:	08008a9b 	.word	0x08008a9b
 80088c8:	08008ac7 	.word	0x08008ac7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	7c12      	ldrb	r2, [r2, #16]
 80088d8:	f107 0108 	add.w	r1, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
      break;
 80088e2:	e112      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	7c1b      	ldrb	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10d      	bne.n	8008908 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	f107 0208 	add.w	r2, r7, #8
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	2202      	movs	r2, #2
 8008904:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008906:	e100      	b.n	8008b0a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	f107 0208 	add.w	r2, r7, #8
 8008914:	4610      	mov	r0, r2
 8008916:	4798      	blx	r3
 8008918:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3301      	adds	r3, #1
 800891e:	2202      	movs	r2, #2
 8008920:	701a      	strb	r2, [r3, #0]
      break;
 8008922:	e0f2      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	885b      	ldrh	r3, [r3, #2]
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b05      	cmp	r3, #5
 800892c:	f200 80ac 	bhi.w	8008a88 <USBD_GetDescriptor+0x204>
 8008930:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <USBD_GetDescriptor+0xb4>)
 8008932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008936:	bf00      	nop
 8008938:	08008951 	.word	0x08008951
 800893c:	08008985 	.word	0x08008985
 8008940:	080089b9 	.word	0x080089b9
 8008944:	080089ed 	.word	0x080089ed
 8008948:	08008a21 	.word	0x08008a21
 800894c:	08008a55 	.word	0x08008a55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00b      	beq.n	8008974 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	7c12      	ldrb	r2, [r2, #16]
 8008968:	f107 0108 	add.w	r1, r7, #8
 800896c:	4610      	mov	r0, r2
 800896e:	4798      	blx	r3
 8008970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008972:	e091      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 facb 	bl	8008f12 <USBD_CtlError>
            err++;
 800897c:	7afb      	ldrb	r3, [r7, #11]
 800897e:	3301      	adds	r3, #1
 8008980:	72fb      	strb	r3, [r7, #11]
          break;
 8008982:	e089      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	7c12      	ldrb	r2, [r2, #16]
 800899c:	f107 0108 	add.w	r1, r7, #8
 80089a0:	4610      	mov	r0, r2
 80089a2:	4798      	blx	r3
 80089a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089a6:	e077      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fab1 	bl	8008f12 <USBD_CtlError>
            err++;
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	3301      	adds	r3, #1
 80089b4:	72fb      	strb	r3, [r7, #11]
          break;
 80089b6:	e06f      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00b      	beq.n	80089dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	7c12      	ldrb	r2, [r2, #16]
 80089d0:	f107 0108 	add.w	r1, r7, #8
 80089d4:	4610      	mov	r0, r2
 80089d6:	4798      	blx	r3
 80089d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089da:	e05d      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa97 	bl	8008f12 <USBD_CtlError>
            err++;
 80089e4:	7afb      	ldrb	r3, [r7, #11]
 80089e6:	3301      	adds	r3, #1
 80089e8:	72fb      	strb	r3, [r7, #11]
          break;
 80089ea:	e055      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00b      	beq.n	8008a10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	7c12      	ldrb	r2, [r2, #16]
 8008a04:	f107 0108 	add.w	r1, r7, #8
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
 8008a0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a0e:	e043      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa7d 	bl	8008f12 <USBD_CtlError>
            err++;
 8008a18:	7afb      	ldrb	r3, [r7, #11]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a1e:	e03b      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00b      	beq.n	8008a44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	7c12      	ldrb	r2, [r2, #16]
 8008a38:	f107 0108 	add.w	r1, r7, #8
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4798      	blx	r3
 8008a40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a42:	e029      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa63 	bl	8008f12 <USBD_CtlError>
            err++;
 8008a4c:	7afb      	ldrb	r3, [r7, #11]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	72fb      	strb	r3, [r7, #11]
          break;
 8008a52:	e021      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00b      	beq.n	8008a78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	7c12      	ldrb	r2, [r2, #16]
 8008a6c:	f107 0108 	add.w	r1, r7, #8
 8008a70:	4610      	mov	r0, r2
 8008a72:	4798      	blx	r3
 8008a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a76:	e00f      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fa49 	bl	8008f12 <USBD_CtlError>
            err++;
 8008a80:	7afb      	ldrb	r3, [r7, #11]
 8008a82:	3301      	adds	r3, #1
 8008a84:	72fb      	strb	r3, [r7, #11]
          break;
 8008a86:	e007      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fa41 	bl	8008f12 <USBD_CtlError>
          err++;
 8008a90:	7afb      	ldrb	r3, [r7, #11]
 8008a92:	3301      	adds	r3, #1
 8008a94:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a96:	bf00      	nop
      }
      break;
 8008a98:	e037      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7c1b      	ldrb	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d109      	bne.n	8008ab6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aaa:	f107 0208 	add.w	r2, r7, #8
 8008aae:	4610      	mov	r0, r2
 8008ab0:	4798      	blx	r3
 8008ab2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ab4:	e029      	b.n	8008b0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fa2a 	bl	8008f12 <USBD_CtlError>
        err++;
 8008abe:	7afb      	ldrb	r3, [r7, #11]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ac4:	e021      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	7c1b      	ldrb	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10d      	bne.n	8008aea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	f107 0208 	add.w	r2, r7, #8
 8008ada:	4610      	mov	r0, r2
 8008adc:	4798      	blx	r3
 8008ade:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	2207      	movs	r2, #7
 8008ae6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ae8:	e00f      	b.n	8008b0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fa10 	bl	8008f12 <USBD_CtlError>
        err++;
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	3301      	adds	r3, #1
 8008af6:	72fb      	strb	r3, [r7, #11]
      break;
 8008af8:	e007      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fa08 	bl	8008f12 <USBD_CtlError>
      err++;
 8008b02:	7afb      	ldrb	r3, [r7, #11]
 8008b04:	3301      	adds	r3, #1
 8008b06:	72fb      	strb	r3, [r7, #11]
      break;
 8008b08:	bf00      	nop
  }

  if (err != 0U)
 8008b0a:	7afb      	ldrb	r3, [r7, #11]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d11e      	bne.n	8008b4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	88db      	ldrh	r3, [r3, #6]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d016      	beq.n	8008b46 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008b18:	893b      	ldrh	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00e      	beq.n	8008b3c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	88da      	ldrh	r2, [r3, #6]
 8008b22:	893b      	ldrh	r3, [r7, #8]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	bf28      	it	cs
 8008b28:	4613      	movcs	r3, r2
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b2e:	893b      	ldrh	r3, [r7, #8]
 8008b30:	461a      	mov	r2, r3
 8008b32:	68f9      	ldr	r1, [r7, #12]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fa5d 	bl	8008ff4 <USBD_CtlSendData>
 8008b3a:	e009      	b.n	8008b50 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f9e7 	bl	8008f12 <USBD_CtlError>
 8008b44:	e004      	b.n	8008b50 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 faae 	bl	80090a8 <USBD_CtlSendStatus>
 8008b4c:	e000      	b.n	8008b50 <USBD_GetDescriptor+0x2cc>
    return;
 8008b4e:	bf00      	nop
  }
}
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop

08008b58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	889b      	ldrh	r3, [r3, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d131      	bne.n	8008bce <USBD_SetAddress+0x76>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	88db      	ldrh	r3, [r3, #6]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d12d      	bne.n	8008bce <USBD_SetAddress+0x76>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	885b      	ldrh	r3, [r3, #2]
 8008b76:	2b7f      	cmp	r3, #127	; 0x7f
 8008b78:	d829      	bhi.n	8008bce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	885b      	ldrh	r3, [r3, #2]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d104      	bne.n	8008b9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f9bc 	bl	8008f12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9a:	e01d      	b.n	8008bd8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	7bfa      	ldrb	r2, [r7, #15]
 8008ba0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fedf 	bl	800996c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa7a 	bl	80090a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d004      	beq.n	8008bc4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc2:	e009      	b.n	8008bd8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bcc:	e004      	b.n	8008bd8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f99e 	bl	8008f12 <USBD_CtlError>
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	bf00      	nop
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	885b      	ldrh	r3, [r3, #2]
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	4b4e      	ldr	r3, [pc, #312]	; (8008d30 <USBD_SetConfig+0x150>)
 8008bf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bf8:	4b4d      	ldr	r3, [pc, #308]	; (8008d30 <USBD_SetConfig+0x150>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d905      	bls.n	8008c0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f985 	bl	8008f12 <USBD_CtlError>
    return USBD_FAIL;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e08c      	b.n	8008d26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d002      	beq.n	8008c1e <USBD_SetConfig+0x3e>
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d029      	beq.n	8008c70 <USBD_SetConfig+0x90>
 8008c1c:	e075      	b.n	8008d0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c1e:	4b44      	ldr	r3, [pc, #272]	; (8008d30 <USBD_SetConfig+0x150>)
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d020      	beq.n	8008c68 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008c26:	4b42      	ldr	r3, [pc, #264]	; (8008d30 <USBD_SetConfig+0x150>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c30:	4b3f      	ldr	r3, [pc, #252]	; (8008d30 <USBD_SetConfig+0x150>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7fe ffe7 	bl	8007c0a <USBD_SetClassConfig>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d008      	beq.n	8008c58 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f962 	bl	8008f12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2202      	movs	r2, #2
 8008c52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c56:	e065      	b.n	8008d24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fa25 	bl	80090a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2203      	movs	r2, #3
 8008c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c66:	e05d      	b.n	8008d24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fa1d 	bl	80090a8 <USBD_CtlSendStatus>
      break;
 8008c6e:	e059      	b.n	8008d24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c70:	4b2f      	ldr	r3, [pc, #188]	; (8008d30 <USBD_SetConfig+0x150>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d112      	bne.n	8008c9e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c80:	4b2b      	ldr	r3, [pc, #172]	; (8008d30 <USBD_SetConfig+0x150>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	461a      	mov	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c8a:	4b29      	ldr	r3, [pc, #164]	; (8008d30 <USBD_SetConfig+0x150>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7fe ffd6 	bl	8007c42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fa06 	bl	80090a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c9c:	e042      	b.n	8008d24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c9e:	4b24      	ldr	r3, [pc, #144]	; (8008d30 <USBD_SetConfig+0x150>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d02a      	beq.n	8008d02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7fe ffc4 	bl	8007c42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008cba:	4b1d      	ldr	r3, [pc, #116]	; (8008d30 <USBD_SetConfig+0x150>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cc4:	4b1a      	ldr	r3, [pc, #104]	; (8008d30 <USBD_SetConfig+0x150>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7fe ff9d 	bl	8007c0a <USBD_SetClassConfig>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00f      	beq.n	8008cfa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f918 	bl	8008f12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7fe ffa9 	bl	8007c42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008cf8:	e014      	b.n	8008d24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f9d4 	bl	80090a8 <USBD_CtlSendStatus>
      break;
 8008d00:	e010      	b.n	8008d24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f9d0 	bl	80090a8 <USBD_CtlSendStatus>
      break;
 8008d08:	e00c      	b.n	8008d24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f900 	bl	8008f12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d12:	4b07      	ldr	r3, [pc, #28]	; (8008d30 <USBD_SetConfig+0x150>)
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7fe ff92 	bl	8007c42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	73fb      	strb	r3, [r7, #15]
      break;
 8008d22:	bf00      	nop
  }

  return ret;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	200002b8 	.word	0x200002b8

08008d34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	88db      	ldrh	r3, [r3, #6]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d004      	beq.n	8008d50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f8e2 	bl	8008f12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d4e:	e023      	b.n	8008d98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	dc02      	bgt.n	8008d62 <USBD_GetConfig+0x2e>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dc03      	bgt.n	8008d68 <USBD_GetConfig+0x34>
 8008d60:	e015      	b.n	8008d8e <USBD_GetConfig+0x5a>
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d00b      	beq.n	8008d7e <USBD_GetConfig+0x4a>
 8008d66:	e012      	b.n	8008d8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	3308      	adds	r3, #8
 8008d72:	2201      	movs	r2, #1
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f93c 	bl	8008ff4 <USBD_CtlSendData>
        break;
 8008d7c:	e00c      	b.n	8008d98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3304      	adds	r3, #4
 8008d82:	2201      	movs	r2, #1
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f934 	bl	8008ff4 <USBD_CtlSendData>
        break;
 8008d8c:	e004      	b.n	8008d98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f8be 	bl	8008f12 <USBD_CtlError>
        break;
 8008d96:	bf00      	nop
}
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	3b01      	subs	r3, #1
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d81e      	bhi.n	8008df6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	88db      	ldrh	r3, [r3, #6]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d004      	beq.n	8008dca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f8a5 	bl	8008f12 <USBD_CtlError>
        break;
 8008dc8:	e01a      	b.n	8008e00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d005      	beq.n	8008de6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f043 0202 	orr.w	r2, r3, #2
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	330c      	adds	r3, #12
 8008dea:	2202      	movs	r2, #2
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f900 	bl	8008ff4 <USBD_CtlSendData>
      break;
 8008df4:	e004      	b.n	8008e00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f88a 	bl	8008f12 <USBD_CtlError>
      break;
 8008dfe:	bf00      	nop
  }
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	885b      	ldrh	r3, [r3, #2]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d107      	bne.n	8008e2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f940 	bl	80090a8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e28:	e013      	b.n	8008e52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	885b      	ldrh	r3, [r3, #2]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d10b      	bne.n	8008e4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	889b      	ldrh	r3, [r3, #4]
 8008e36:	0a1b      	lsrs	r3, r3, #8
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f930 	bl	80090a8 <USBD_CtlSendStatus>
}
 8008e48:	e003      	b.n	8008e52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f860 	bl	8008f12 <USBD_CtlError>
}
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d80b      	bhi.n	8008e8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	885b      	ldrh	r3, [r3, #2]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d10c      	bne.n	8008e94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f910 	bl	80090a8 <USBD_CtlSendStatus>
      }
      break;
 8008e88:	e004      	b.n	8008e94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f840 	bl	8008f12 <USBD_CtlError>
      break;
 8008e92:	e000      	b.n	8008e96 <USBD_ClrFeature+0x3c>
      break;
 8008e94:	bf00      	nop
  }
}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	781a      	ldrb	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	781a      	ldrb	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f7ff fa41 	bl	8008350 <SWAPBYTE>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f7ff fa34 	bl	8008350 <SWAPBYTE>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	461a      	mov	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f7ff fa27 	bl	8008350 <SWAPBYTE>
 8008f02:	4603      	mov	r3, r0
 8008f04:	461a      	mov	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	80da      	strh	r2, [r3, #6]
}
 8008f0a:	bf00      	nop
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f1c:	2180      	movs	r1, #128	; 0x80
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fcba 	bl	8009898 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f24:	2100      	movs	r1, #0
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fcb6 	bl	8009898 <USBD_LL_StallEP>
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f40:	2300      	movs	r3, #0
 8008f42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d036      	beq.n	8008fb8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f4e:	6938      	ldr	r0, [r7, #16]
 8008f50:	f000 f836 	bl	8008fc0 <USBD_GetLen>
 8008f54:	4603      	mov	r3, r0
 8008f56:	3301      	adds	r3, #1
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	4413      	add	r3, r2
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	7812      	ldrb	r2, [r2, #0]
 8008f6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
 8008f70:	3301      	adds	r3, #1
 8008f72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	4413      	add	r3, r2
 8008f7a:	2203      	movs	r2, #3
 8008f7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
 8008f80:	3301      	adds	r3, #1
 8008f82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f84:	e013      	b.n	8008fae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	7812      	ldrb	r2, [r2, #0]
 8008f90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	3301      	adds	r3, #1
 8008f96:	613b      	str	r3, [r7, #16]
    idx++;
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008fa8:	7dfb      	ldrb	r3, [r7, #23]
 8008faa:	3301      	adds	r3, #1
 8008fac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e7      	bne.n	8008f86 <USBD_GetString+0x52>
 8008fb6:	e000      	b.n	8008fba <USBD_GetString+0x86>
    return;
 8008fb8:	bf00      	nop
  }
}
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fd0:	e005      	b.n	8008fde <USBD_GetLen+0x1e>
  {
    len++;
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1f5      	bne.n	8008fd2 <USBD_GetLen+0x12>
  }

  return len;
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2202      	movs	r2, #2
 8009004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	2100      	movs	r1, #0
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f000 fcc5 	bl	80099aa <USBD_LL_Transmit>

  return USBD_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	2100      	movs	r1, #0
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 fcb4 	bl	80099aa <USBD_LL_Transmit>

  return USBD_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2203      	movs	r2, #3
 800905c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	2100      	movs	r1, #0
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 fcb8 	bl	80099ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b084      	sub	sp, #16
 800908a:	af00      	add	r7, sp, #0
 800908c:	60f8      	str	r0, [r7, #12]
 800908e:	60b9      	str	r1, [r7, #8]
 8009090:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	2100      	movs	r1, #0
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f000 fca7 	bl	80099ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2204      	movs	r2, #4
 80090b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090b8:	2300      	movs	r3, #0
 80090ba:	2200      	movs	r2, #0
 80090bc:	2100      	movs	r1, #0
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fc73 	bl	80099aa <USBD_LL_Transmit>

  return USBD_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b082      	sub	sp, #8
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2205      	movs	r2, #5
 80090da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090de:	2300      	movs	r3, #0
 80090e0:	2200      	movs	r2, #0
 80090e2:	2100      	movs	r1, #0
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fc81 	bl	80099ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090f8:	2200      	movs	r2, #0
 80090fa:	4912      	ldr	r1, [pc, #72]	; (8009144 <MX_USB_DEVICE_Init+0x50>)
 80090fc:	4812      	ldr	r0, [pc, #72]	; (8009148 <MX_USB_DEVICE_Init+0x54>)
 80090fe:	f7fe fd07 	bl	8007b10 <USBD_Init>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009108:	f7f8 f9c4 	bl	8001494 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800910c:	490f      	ldr	r1, [pc, #60]	; (800914c <MX_USB_DEVICE_Init+0x58>)
 800910e:	480e      	ldr	r0, [pc, #56]	; (8009148 <MX_USB_DEVICE_Init+0x54>)
 8009110:	f7fe fd2e 	bl	8007b70 <USBD_RegisterClass>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800911a:	f7f8 f9bb 	bl	8001494 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800911e:	490c      	ldr	r1, [pc, #48]	; (8009150 <MX_USB_DEVICE_Init+0x5c>)
 8009120:	4809      	ldr	r0, [pc, #36]	; (8009148 <MX_USB_DEVICE_Init+0x54>)
 8009122:	f7fe fc65 	bl	80079f0 <USBD_CDC_RegisterInterface>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800912c:	f7f8 f9b2 	bl	8001494 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009130:	4805      	ldr	r0, [pc, #20]	; (8009148 <MX_USB_DEVICE_Init+0x54>)
 8009132:	f7fe fd53 	bl	8007bdc <USBD_Start>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800913c:	f7f8 f9aa 	bl	8001494 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009140:	bf00      	nop
 8009142:	bd80      	pop	{r7, pc}
 8009144:	200000b4 	.word	0x200000b4
 8009148:	200002bc 	.word	0x200002bc
 800914c:	20000020 	.word	0x20000020
 8009150:	200000a0 	.word	0x200000a0

08009154 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009158:	2200      	movs	r2, #0
 800915a:	4905      	ldr	r1, [pc, #20]	; (8009170 <CDC_Init_FS+0x1c>)
 800915c:	4805      	ldr	r0, [pc, #20]	; (8009174 <CDC_Init_FS+0x20>)
 800915e:	f7fe fc61 	bl	8007a24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009162:	4905      	ldr	r1, [pc, #20]	; (8009178 <CDC_Init_FS+0x24>)
 8009164:	4803      	ldr	r0, [pc, #12]	; (8009174 <CDC_Init_FS+0x20>)
 8009166:	f7fe fc7f 	bl	8007a68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800916a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800916c:	4618      	mov	r0, r3
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20000d98 	.word	0x20000d98
 8009174:	200002bc 	.word	0x200002bc
 8009178:	20000598 	.word	0x20000598

0800917c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009180:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009182:	4618      	mov	r0, r3
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	6039      	str	r1, [r7, #0]
 8009196:	71fb      	strb	r3, [r7, #7]
 8009198:	4613      	mov	r3, r2
 800919a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	2b23      	cmp	r3, #35	; 0x23
 80091a0:	d84a      	bhi.n	8009238 <CDC_Control_FS+0xac>
 80091a2:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <CDC_Control_FS+0x1c>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	08009239 	.word	0x08009239
 80091ac:	08009239 	.word	0x08009239
 80091b0:	08009239 	.word	0x08009239
 80091b4:	08009239 	.word	0x08009239
 80091b8:	08009239 	.word	0x08009239
 80091bc:	08009239 	.word	0x08009239
 80091c0:	08009239 	.word	0x08009239
 80091c4:	08009239 	.word	0x08009239
 80091c8:	08009239 	.word	0x08009239
 80091cc:	08009239 	.word	0x08009239
 80091d0:	08009239 	.word	0x08009239
 80091d4:	08009239 	.word	0x08009239
 80091d8:	08009239 	.word	0x08009239
 80091dc:	08009239 	.word	0x08009239
 80091e0:	08009239 	.word	0x08009239
 80091e4:	08009239 	.word	0x08009239
 80091e8:	08009239 	.word	0x08009239
 80091ec:	08009239 	.word	0x08009239
 80091f0:	08009239 	.word	0x08009239
 80091f4:	08009239 	.word	0x08009239
 80091f8:	08009239 	.word	0x08009239
 80091fc:	08009239 	.word	0x08009239
 8009200:	08009239 	.word	0x08009239
 8009204:	08009239 	.word	0x08009239
 8009208:	08009239 	.word	0x08009239
 800920c:	08009239 	.word	0x08009239
 8009210:	08009239 	.word	0x08009239
 8009214:	08009239 	.word	0x08009239
 8009218:	08009239 	.word	0x08009239
 800921c:	08009239 	.word	0x08009239
 8009220:	08009239 	.word	0x08009239
 8009224:	08009239 	.word	0x08009239
 8009228:	08009239 	.word	0x08009239
 800922c:	08009239 	.word	0x08009239
 8009230:	08009239 	.word	0x08009239
 8009234:	08009239 	.word	0x08009239
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009238:	bf00      	nop
  }

  return (USBD_OK);
 800923a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	4805      	ldr	r0, [pc, #20]	; (800926c <CDC_Receive_FS+0x24>)
 8009256:	f7fe fc07 	bl	8007a68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800925a:	4804      	ldr	r0, [pc, #16]	; (800926c <CDC_Receive_FS+0x24>)
 800925c:	f7fe fc22 	bl	8007aa4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009260:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	200002bc 	.word	0x200002bc

08009270 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	4613      	mov	r3, r2
 800927c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009282:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009286:	4618      	mov	r0, r3
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
	...

08009294 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	6039      	str	r1, [r7, #0]
 800929e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2212      	movs	r2, #18
 80092a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80092a6:	4b03      	ldr	r3, [pc, #12]	; (80092b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	200000d0 	.word	0x200000d0

080092b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2204      	movs	r2, #4
 80092c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092ca:	4b03      	ldr	r3, [pc, #12]	; (80092d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	200000e4 	.word	0x200000e4

080092dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	6039      	str	r1, [r7, #0]
 80092e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d105      	bne.n	80092fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	4907      	ldr	r1, [pc, #28]	; (8009310 <USBD_FS_ProductStrDescriptor+0x34>)
 80092f2:	4808      	ldr	r0, [pc, #32]	; (8009314 <USBD_FS_ProductStrDescriptor+0x38>)
 80092f4:	f7ff fe1e 	bl	8008f34 <USBD_GetString>
 80092f8:	e004      	b.n	8009304 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	4904      	ldr	r1, [pc, #16]	; (8009310 <USBD_FS_ProductStrDescriptor+0x34>)
 80092fe:	4805      	ldr	r0, [pc, #20]	; (8009314 <USBD_FS_ProductStrDescriptor+0x38>)
 8009300:	f7ff fe18 	bl	8008f34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009304:	4b02      	ldr	r3, [pc, #8]	; (8009310 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009306:	4618      	mov	r0, r3
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	20001598 	.word	0x20001598
 8009314:	08009b74 	.word	0x08009b74

08009318 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	6039      	str	r1, [r7, #0]
 8009322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	4904      	ldr	r1, [pc, #16]	; (8009338 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009328:	4804      	ldr	r0, [pc, #16]	; (800933c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800932a:	f7ff fe03 	bl	8008f34 <USBD_GetString>
  return USBD_StrDesc;
 800932e:	4b02      	ldr	r3, [pc, #8]	; (8009338 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	20001598 	.word	0x20001598
 800933c:	08009b8c 	.word	0x08009b8c

08009340 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	6039      	str	r1, [r7, #0]
 800934a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	221a      	movs	r2, #26
 8009350:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009352:	f000 f843 	bl	80093dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009356:	4b02      	ldr	r3, [pc, #8]	; (8009360 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	200000e8 	.word	0x200000e8

08009364 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	6039      	str	r1, [r7, #0]
 800936e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d105      	bne.n	8009382 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	4907      	ldr	r1, [pc, #28]	; (8009398 <USBD_FS_ConfigStrDescriptor+0x34>)
 800937a:	4808      	ldr	r0, [pc, #32]	; (800939c <USBD_FS_ConfigStrDescriptor+0x38>)
 800937c:	f7ff fdda 	bl	8008f34 <USBD_GetString>
 8009380:	e004      	b.n	800938c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	4904      	ldr	r1, [pc, #16]	; (8009398 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009386:	4805      	ldr	r0, [pc, #20]	; (800939c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009388:	f7ff fdd4 	bl	8008f34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800938c:	4b02      	ldr	r3, [pc, #8]	; (8009398 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	20001598 	.word	0x20001598
 800939c:	08009ba0 	.word	0x08009ba0

080093a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	4603      	mov	r3, r0
 80093a8:	6039      	str	r1, [r7, #0]
 80093aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093ac:	79fb      	ldrb	r3, [r7, #7]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d105      	bne.n	80093be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	4907      	ldr	r1, [pc, #28]	; (80093d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093b6:	4808      	ldr	r0, [pc, #32]	; (80093d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093b8:	f7ff fdbc 	bl	8008f34 <USBD_GetString>
 80093bc:	e004      	b.n	80093c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	4904      	ldr	r1, [pc, #16]	; (80093d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093c2:	4805      	ldr	r0, [pc, #20]	; (80093d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093c4:	f7ff fdb6 	bl	8008f34 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093c8:	4b02      	ldr	r3, [pc, #8]	; (80093d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	20001598 	.word	0x20001598
 80093d8:	08009bac 	.word	0x08009bac

080093dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093e2:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <Get_SerialNum+0x44>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093e8:	4b0e      	ldr	r3, [pc, #56]	; (8009424 <Get_SerialNum+0x48>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093ee:	4b0e      	ldr	r3, [pc, #56]	; (8009428 <Get_SerialNum+0x4c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4413      	add	r3, r2
 80093fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d009      	beq.n	8009416 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009402:	2208      	movs	r2, #8
 8009404:	4909      	ldr	r1, [pc, #36]	; (800942c <Get_SerialNum+0x50>)
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f000 f814 	bl	8009434 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800940c:	2204      	movs	r2, #4
 800940e:	4908      	ldr	r1, [pc, #32]	; (8009430 <Get_SerialNum+0x54>)
 8009410:	68b8      	ldr	r0, [r7, #8]
 8009412:	f000 f80f 	bl	8009434 <IntToUnicode>
  }
}
 8009416:	bf00      	nop
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	1fff7a10 	.word	0x1fff7a10
 8009424:	1fff7a14 	.word	0x1fff7a14
 8009428:	1fff7a18 	.word	0x1fff7a18
 800942c:	200000ea 	.word	0x200000ea
 8009430:	200000fa 	.word	0x200000fa

08009434 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	4613      	mov	r3, r2
 8009440:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009446:	2300      	movs	r3, #0
 8009448:	75fb      	strb	r3, [r7, #23]
 800944a:	e027      	b.n	800949c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	0f1b      	lsrs	r3, r3, #28
 8009450:	2b09      	cmp	r3, #9
 8009452:	d80b      	bhi.n	800946c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	0f1b      	lsrs	r3, r3, #28
 8009458:	b2da      	uxtb	r2, r3
 800945a:	7dfb      	ldrb	r3, [r7, #23]
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	4619      	mov	r1, r3
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	440b      	add	r3, r1
 8009464:	3230      	adds	r2, #48	; 0x30
 8009466:	b2d2      	uxtb	r2, r2
 8009468:	701a      	strb	r2, [r3, #0]
 800946a:	e00a      	b.n	8009482 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	0f1b      	lsrs	r3, r3, #28
 8009470:	b2da      	uxtb	r2, r3
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	005b      	lsls	r3, r3, #1
 8009476:	4619      	mov	r1, r3
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	440b      	add	r3, r1
 800947c:	3237      	adds	r2, #55	; 0x37
 800947e:	b2d2      	uxtb	r2, r2
 8009480:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	011b      	lsls	r3, r3, #4
 8009486:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	005b      	lsls	r3, r3, #1
 800948c:	3301      	adds	r3, #1
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	4413      	add	r3, r2
 8009492:	2200      	movs	r2, #0
 8009494:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	3301      	adds	r3, #1
 800949a:	75fb      	strb	r3, [r7, #23]
 800949c:	7dfa      	ldrb	r2, [r7, #23]
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d3d3      	bcc.n	800944c <IntToUnicode+0x18>
  }
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
	...

080094b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b08a      	sub	sp, #40	; 0x28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094bc:	f107 0314 	add.w	r3, r7, #20
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	605a      	str	r2, [r3, #4]
 80094c6:	609a      	str	r2, [r3, #8]
 80094c8:	60da      	str	r2, [r3, #12]
 80094ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094d4:	d13a      	bne.n	800954c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094d6:	2300      	movs	r3, #0
 80094d8:	613b      	str	r3, [r7, #16]
 80094da:	4b1e      	ldr	r3, [pc, #120]	; (8009554 <HAL_PCD_MspInit+0xa0>)
 80094dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094de:	4a1d      	ldr	r2, [pc, #116]	; (8009554 <HAL_PCD_MspInit+0xa0>)
 80094e0:	f043 0301 	orr.w	r3, r3, #1
 80094e4:	6313      	str	r3, [r2, #48]	; 0x30
 80094e6:	4b1b      	ldr	r3, [pc, #108]	; (8009554 <HAL_PCD_MspInit+0xa0>)
 80094e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	613b      	str	r3, [r7, #16]
 80094f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80094f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80094f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094f8:	2302      	movs	r3, #2
 80094fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094fc:	2300      	movs	r3, #0
 80094fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009500:	2303      	movs	r3, #3
 8009502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009504:	230a      	movs	r3, #10
 8009506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009508:	f107 0314 	add.w	r3, r7, #20
 800950c:	4619      	mov	r1, r3
 800950e:	4812      	ldr	r0, [pc, #72]	; (8009558 <HAL_PCD_MspInit+0xa4>)
 8009510:	f7f8 fdb0 	bl	8002074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009514:	4b0f      	ldr	r3, [pc, #60]	; (8009554 <HAL_PCD_MspInit+0xa0>)
 8009516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009518:	4a0e      	ldr	r2, [pc, #56]	; (8009554 <HAL_PCD_MspInit+0xa0>)
 800951a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800951e:	6353      	str	r3, [r2, #52]	; 0x34
 8009520:	2300      	movs	r3, #0
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	4b0b      	ldr	r3, [pc, #44]	; (8009554 <HAL_PCD_MspInit+0xa0>)
 8009526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009528:	4a0a      	ldr	r2, [pc, #40]	; (8009554 <HAL_PCD_MspInit+0xa0>)
 800952a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800952e:	6453      	str	r3, [r2, #68]	; 0x44
 8009530:	4b08      	ldr	r3, [pc, #32]	; (8009554 <HAL_PCD_MspInit+0xa0>)
 8009532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800953c:	2200      	movs	r2, #0
 800953e:	2100      	movs	r1, #0
 8009540:	2043      	movs	r0, #67	; 0x43
 8009542:	f7f8 fd3e 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009546:	2043      	movs	r0, #67	; 0x43
 8009548:	f7f8 fd57 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800954c:	bf00      	nop
 800954e:	3728      	adds	r7, #40	; 0x28
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	40023800 	.word	0x40023800
 8009558:	40020000 	.word	0x40020000

0800955c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009570:	4619      	mov	r1, r3
 8009572:	4610      	mov	r0, r2
 8009574:	f7fe fb7f 	bl	8007c76 <USBD_LL_SetupStage>
}
 8009578:	bf00      	nop
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009592:	78fa      	ldrb	r2, [r7, #3]
 8009594:	6879      	ldr	r1, [r7, #4]
 8009596:	4613      	mov	r3, r2
 8009598:	00db      	lsls	r3, r3, #3
 800959a:	4413      	add	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	440b      	add	r3, r1
 80095a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	78fb      	ldrb	r3, [r7, #3]
 80095a8:	4619      	mov	r1, r3
 80095aa:	f7fe fbb9 	bl	8007d20 <USBD_LL_DataOutStage>
}
 80095ae:	bf00      	nop
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b082      	sub	sp, #8
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	460b      	mov	r3, r1
 80095c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80095c8:	78fa      	ldrb	r2, [r7, #3]
 80095ca:	6879      	ldr	r1, [r7, #4]
 80095cc:	4613      	mov	r3, r2
 80095ce:	00db      	lsls	r3, r3, #3
 80095d0:	4413      	add	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	440b      	add	r3, r1
 80095d6:	334c      	adds	r3, #76	; 0x4c
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	78fb      	ldrb	r3, [r7, #3]
 80095dc:	4619      	mov	r1, r3
 80095de:	f7fe fc52 	bl	8007e86 <USBD_LL_DataInStage>
}
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b082      	sub	sp, #8
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fe fd86 	bl	800810a <USBD_LL_SOF>
}
 80095fe:	bf00      	nop
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b084      	sub	sp, #16
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800960e:	2301      	movs	r3, #1
 8009610:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d102      	bne.n	8009620 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800961a:	2300      	movs	r3, #0
 800961c:	73fb      	strb	r3, [r7, #15]
 800961e:	e008      	b.n	8009632 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d102      	bne.n	800962e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009628:	2301      	movs	r3, #1
 800962a:	73fb      	strb	r3, [r7, #15]
 800962c:	e001      	b.n	8009632 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800962e:	f7f7 ff31 	bl	8001494 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009638:	7bfa      	ldrb	r2, [r7, #15]
 800963a:	4611      	mov	r1, r2
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe fd26 	bl	800808e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009648:	4618      	mov	r0, r3
 800964a:	f7fe fcce 	bl	8007fea <USBD_LL_Reset>
}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
	...

08009658 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009666:	4618      	mov	r0, r3
 8009668:	f7fe fd21 	bl	80080ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	6812      	ldr	r2, [r2, #0]
 800967a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800967e:	f043 0301 	orr.w	r3, r3, #1
 8009682:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d005      	beq.n	8009698 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800968c:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <HAL_PCD_SuspendCallback+0x48>)
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	4a03      	ldr	r2, [pc, #12]	; (80096a0 <HAL_PCD_SuspendCallback+0x48>)
 8009692:	f043 0306 	orr.w	r3, r3, #6
 8009696:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	e000ed00 	.word	0xe000ed00

080096a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fe fd11 	bl	80080da <USBD_LL_Resume>
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096d2:	78fa      	ldrb	r2, [r7, #3]
 80096d4:	4611      	mov	r1, r2
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe fd69 	bl	80081ae <USBD_LL_IsoOUTIncomplete>
}
 80096dc:	bf00      	nop
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096f6:	78fa      	ldrb	r2, [r7, #3]
 80096f8:	4611      	mov	r1, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe fd25 	bl	800814a <USBD_LL_IsoINIncomplete>
}
 8009700:	bf00      	nop
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe fd7b 	bl	8008212 <USBD_LL_DevConnected>
}
 800971c:	bf00      	nop
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe fd78 	bl	8008228 <USBD_LL_DevDisconnected>
}
 8009738:	bf00      	nop
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d13c      	bne.n	80097ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009750:	4a20      	ldr	r2, [pc, #128]	; (80097d4 <USBD_LL_Init+0x94>)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a1e      	ldr	r2, [pc, #120]	; (80097d4 <USBD_LL_Init+0x94>)
 800975c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009760:	4b1c      	ldr	r3, [pc, #112]	; (80097d4 <USBD_LL_Init+0x94>)
 8009762:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009766:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009768:	4b1a      	ldr	r3, [pc, #104]	; (80097d4 <USBD_LL_Init+0x94>)
 800976a:	2204      	movs	r2, #4
 800976c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800976e:	4b19      	ldr	r3, [pc, #100]	; (80097d4 <USBD_LL_Init+0x94>)
 8009770:	2202      	movs	r2, #2
 8009772:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009774:	4b17      	ldr	r3, [pc, #92]	; (80097d4 <USBD_LL_Init+0x94>)
 8009776:	2200      	movs	r2, #0
 8009778:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800977a:	4b16      	ldr	r3, [pc, #88]	; (80097d4 <USBD_LL_Init+0x94>)
 800977c:	2202      	movs	r2, #2
 800977e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009780:	4b14      	ldr	r3, [pc, #80]	; (80097d4 <USBD_LL_Init+0x94>)
 8009782:	2200      	movs	r2, #0
 8009784:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009786:	4b13      	ldr	r3, [pc, #76]	; (80097d4 <USBD_LL_Init+0x94>)
 8009788:	2200      	movs	r2, #0
 800978a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800978c:	4b11      	ldr	r3, [pc, #68]	; (80097d4 <USBD_LL_Init+0x94>)
 800978e:	2200      	movs	r2, #0
 8009790:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009792:	4b10      	ldr	r3, [pc, #64]	; (80097d4 <USBD_LL_Init+0x94>)
 8009794:	2200      	movs	r2, #0
 8009796:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009798:	4b0e      	ldr	r3, [pc, #56]	; (80097d4 <USBD_LL_Init+0x94>)
 800979a:	2200      	movs	r2, #0
 800979c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800979e:	480d      	ldr	r0, [pc, #52]	; (80097d4 <USBD_LL_Init+0x94>)
 80097a0:	f7f9 f805 	bl	80027ae <HAL_PCD_Init>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80097aa:	f7f7 fe73 	bl	8001494 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80097ae:	2180      	movs	r1, #128	; 0x80
 80097b0:	4808      	ldr	r0, [pc, #32]	; (80097d4 <USBD_LL_Init+0x94>)
 80097b2:	f7fa fa5c 	bl	8003c6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80097b6:	2240      	movs	r2, #64	; 0x40
 80097b8:	2100      	movs	r1, #0
 80097ba:	4806      	ldr	r0, [pc, #24]	; (80097d4 <USBD_LL_Init+0x94>)
 80097bc:	f7fa fa10 	bl	8003be0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80097c0:	2280      	movs	r2, #128	; 0x80
 80097c2:	2101      	movs	r1, #1
 80097c4:	4803      	ldr	r0, [pc, #12]	; (80097d4 <USBD_LL_Init+0x94>)
 80097c6:	f7fa fa0b 	bl	8003be0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	20001798 	.word	0x20001798

080097d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7f9 f8fa 	bl	80029e8 <HAL_PCD_Start>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 f942 	bl	8009a84 <USBD_Get_USB_Status>
 8009800:	4603      	mov	r3, r0
 8009802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009804:	7bbb      	ldrb	r3, [r7, #14]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b084      	sub	sp, #16
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	4608      	mov	r0, r1
 8009818:	4611      	mov	r1, r2
 800981a:	461a      	mov	r2, r3
 800981c:	4603      	mov	r3, r0
 800981e:	70fb      	strb	r3, [r7, #3]
 8009820:	460b      	mov	r3, r1
 8009822:	70bb      	strb	r3, [r7, #2]
 8009824:	4613      	mov	r3, r2
 8009826:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009836:	78bb      	ldrb	r3, [r7, #2]
 8009838:	883a      	ldrh	r2, [r7, #0]
 800983a:	78f9      	ldrb	r1, [r7, #3]
 800983c:	f7f9 fdcb 	bl	80033d6 <HAL_PCD_EP_Open>
 8009840:	4603      	mov	r3, r0
 8009842:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009844:	7bfb      	ldrb	r3, [r7, #15]
 8009846:	4618      	mov	r0, r3
 8009848:	f000 f91c 	bl	8009a84 <USBD_Get_USB_Status>
 800984c:	4603      	mov	r3, r0
 800984e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009850:	7bbb      	ldrb	r3, [r7, #14]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	460b      	mov	r3, r1
 8009864:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009874:	78fa      	ldrb	r2, [r7, #3]
 8009876:	4611      	mov	r1, r2
 8009878:	4618      	mov	r0, r3
 800987a:	f7f9 fe14 	bl	80034a6 <HAL_PCD_EP_Close>
 800987e:	4603      	mov	r3, r0
 8009880:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	4618      	mov	r0, r3
 8009886:	f000 f8fd 	bl	8009a84 <USBD_Get_USB_Status>
 800988a:	4603      	mov	r3, r0
 800988c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800988e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098b2:	78fa      	ldrb	r2, [r7, #3]
 80098b4:	4611      	mov	r1, r2
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7f9 feec 	bl	8003694 <HAL_PCD_EP_SetStall>
 80098bc:	4603      	mov	r3, r0
 80098be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 f8de 	bl	8009a84 <USBD_Get_USB_Status>
 80098c8:	4603      	mov	r3, r0
 80098ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	460b      	mov	r3, r1
 80098e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	4611      	mov	r1, r2
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7f9 ff31 	bl	800375c <HAL_PCD_EP_ClrStall>
 80098fa:	4603      	mov	r3, r0
 80098fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
 8009900:	4618      	mov	r0, r3
 8009902:	f000 f8bf 	bl	8009a84 <USBD_Get_USB_Status>
 8009906:	4603      	mov	r3, r0
 8009908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800990a:	7bbb      	ldrb	r3, [r7, #14]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009926:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800992c:	2b00      	cmp	r3, #0
 800992e:	da0b      	bge.n	8009948 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009930:	78fb      	ldrb	r3, [r7, #3]
 8009932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009936:	68f9      	ldr	r1, [r7, #12]
 8009938:	4613      	mov	r3, r2
 800993a:	00db      	lsls	r3, r3, #3
 800993c:	4413      	add	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	440b      	add	r3, r1
 8009942:	333e      	adds	r3, #62	; 0x3e
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	e00b      	b.n	8009960 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009948:	78fb      	ldrb	r3, [r7, #3]
 800994a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800994e:	68f9      	ldr	r1, [r7, #12]
 8009950:	4613      	mov	r3, r2
 8009952:	00db      	lsls	r3, r3, #3
 8009954:	4413      	add	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	440b      	add	r3, r1
 800995a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800995e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009960:	4618      	mov	r0, r3
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009986:	78fa      	ldrb	r2, [r7, #3]
 8009988:	4611      	mov	r1, r2
 800998a:	4618      	mov	r0, r3
 800998c:	f7f9 fcfe 	bl	800338c <HAL_PCD_SetAddress>
 8009990:	4603      	mov	r3, r0
 8009992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	4618      	mov	r0, r3
 8009998:	f000 f874 	bl	8009a84 <USBD_Get_USB_Status>
 800999c:	4603      	mov	r3, r0
 800999e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b086      	sub	sp, #24
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	60f8      	str	r0, [r7, #12]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	603b      	str	r3, [r7, #0]
 80099b6:	460b      	mov	r3, r1
 80099b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80099c8:	7af9      	ldrb	r1, [r7, #11]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	f7f9 fe17 	bl	8003600 <HAL_PCD_EP_Transmit>
 80099d2:	4603      	mov	r3, r0
 80099d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099d6:	7dfb      	ldrb	r3, [r7, #23]
 80099d8:	4618      	mov	r0, r3
 80099da:	f000 f853 	bl	8009a84 <USBD_Get_USB_Status>
 80099de:	4603      	mov	r3, r0
 80099e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3718      	adds	r7, #24
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	607a      	str	r2, [r7, #4]
 80099f6:	603b      	str	r3, [r7, #0]
 80099f8:	460b      	mov	r3, r1
 80099fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a0a:	7af9      	ldrb	r1, [r7, #11]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	f7f9 fd93 	bl	800353a <HAL_PCD_EP_Receive>
 8009a14:	4603      	mov	r3, r0
 8009a16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a18:	7dfb      	ldrb	r3, [r7, #23]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 f832 	bl	8009a84 <USBD_Get_USB_Status>
 8009a20:	4603      	mov	r3, r0
 8009a22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a24:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3718      	adds	r7, #24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	460b      	mov	r3, r1
 8009a38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a40:	78fa      	ldrb	r2, [r7, #3]
 8009a42:	4611      	mov	r1, r2
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7f9 fdc3 	bl	80035d0 <HAL_PCD_EP_GetRxCount>
 8009a4a:	4603      	mov	r3, r0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a5c:	4b03      	ldr	r3, [pc, #12]	; (8009a6c <USBD_static_malloc+0x18>)
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	20001ca4 	.word	0x20001ca4

08009a70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]

}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	2b03      	cmp	r3, #3
 8009a96:	d817      	bhi.n	8009ac8 <USBD_Get_USB_Status+0x44>
 8009a98:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <USBD_Get_USB_Status+0x1c>)
 8009a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9e:	bf00      	nop
 8009aa0:	08009ab1 	.word	0x08009ab1
 8009aa4:	08009ab7 	.word	0x08009ab7
 8009aa8:	08009abd 	.word	0x08009abd
 8009aac:	08009ac3 	.word	0x08009ac3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ab4:	e00b      	b.n	8009ace <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8009aba:	e008      	b.n	8009ace <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009abc:	2301      	movs	r3, #1
 8009abe:	73fb      	strb	r3, [r7, #15]
    break;
 8009ac0:	e005      	b.n	8009ace <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ac6:	e002      	b.n	8009ace <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	73fb      	strb	r3, [r7, #15]
    break;
 8009acc:	bf00      	nop
  }
  return usb_status;
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <__libc_init_array>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	4d0d      	ldr	r5, [pc, #52]	; (8009b14 <__libc_init_array+0x38>)
 8009ae0:	4c0d      	ldr	r4, [pc, #52]	; (8009b18 <__libc_init_array+0x3c>)
 8009ae2:	1b64      	subs	r4, r4, r5
 8009ae4:	10a4      	asrs	r4, r4, #2
 8009ae6:	2600      	movs	r6, #0
 8009ae8:	42a6      	cmp	r6, r4
 8009aea:	d109      	bne.n	8009b00 <__libc_init_array+0x24>
 8009aec:	4d0b      	ldr	r5, [pc, #44]	; (8009b1c <__libc_init_array+0x40>)
 8009aee:	4c0c      	ldr	r4, [pc, #48]	; (8009b20 <__libc_init_array+0x44>)
 8009af0:	f000 f820 	bl	8009b34 <_init>
 8009af4:	1b64      	subs	r4, r4, r5
 8009af6:	10a4      	asrs	r4, r4, #2
 8009af8:	2600      	movs	r6, #0
 8009afa:	42a6      	cmp	r6, r4
 8009afc:	d105      	bne.n	8009b0a <__libc_init_array+0x2e>
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b04:	4798      	blx	r3
 8009b06:	3601      	adds	r6, #1
 8009b08:	e7ee      	b.n	8009ae8 <__libc_init_array+0xc>
 8009b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b0e:	4798      	blx	r3
 8009b10:	3601      	adds	r6, #1
 8009b12:	e7f2      	b.n	8009afa <__libc_init_array+0x1e>
 8009b14:	08009bdc 	.word	0x08009bdc
 8009b18:	08009bdc 	.word	0x08009bdc
 8009b1c:	08009bdc 	.word	0x08009bdc
 8009b20:	08009be0 	.word	0x08009be0

08009b24 <memset>:
 8009b24:	4402      	add	r2, r0
 8009b26:	4603      	mov	r3, r0
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d100      	bne.n	8009b2e <memset+0xa>
 8009b2c:	4770      	bx	lr
 8009b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b32:	e7f9      	b.n	8009b28 <memset+0x4>

08009b34 <_init>:
 8009b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b36:	bf00      	nop
 8009b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b3a:	bc08      	pop	{r3}
 8009b3c:	469e      	mov	lr, r3
 8009b3e:	4770      	bx	lr

08009b40 <_fini>:
 8009b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b42:	bf00      	nop
 8009b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b46:	bc08      	pop	{r3}
 8009b48:	469e      	mov	lr, r3
 8009b4a:	4770      	bx	lr
